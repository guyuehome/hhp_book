{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。 本教程将会以旭日X3派为平台，介绍地平线机器人开发平台的使用原理与方法。 教程链接汇总 旭日X3派开发板使用手册： https://developer.horizon.ai/api/v1/fileData/documents_pi/index.html 机器人开发平台使用手册： https://developer.horizon.ai/api/v1/fileData/TogetherROS/index.html 视频课程： https://class.guyuehome.com/all/10284445/19617453 图文教程： https://hhp.guyuehome.com/ 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/92 博客泡圈： https://www.guyuehome.com/","text_tokens":["主控","工具","环境","进行","链接","以","guyuehome","等","地平线","、","使用手册","开发板","19617453","/","大脑","帮助","2022","index","方法","hhp","一代","：","10284445","平台","ai","为","原理","电机","，","com","92","汇总","信息","教程","问答","给","部分","计算","与","api","www","class","派","更","复杂","旭日","手册","是","horizon","系统","机器人","filedata","地平","各样","在","作为","6","课程","本","togetherros","图文","。","执行","传感器","非常","bubble",":","v1","引言","行业","各种","年"," ","机器","使用","id","等等","一个","动作","all","推出","层面","开发","x3","circledetail","操作系统","规控","带来","硬件","包括","视频","月","将会","_","传感","算法","驱动","https","博客",".","非常复杂","感器","各种各样","多","程式","全新","软件","正式","操作","介绍","的","html","泡圈","pi","感知","developer","documents","数据"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。 本教程将会以旭日X3派为平台，介绍地平线机器人开发平台的使用原理与方法。","text_tokens":["主控","工具","环境","进行","以","等","地平线","、","大脑","帮助","2022","方法","一代","：","平台","为","原理","电机","，","信息","教程","给","部分","计算","与","派","更","复杂","旭日","是","系统","机器人","地平","各样","在","作为","6","本","。","执行","传感器","非常","行业","各种","年","机器"," ","使用","等等","一个","动作","推出","层面","开发","x3","操作系统","规控","带来","硬件","包括","月","将会","传感","算法","驱动","非常复杂","感器","各种各样","多","程式","全新","软件","正式","操作","介绍","的","感知","数据"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"旭日X3派开发板使用手册： https://developer.horizon.ai/api/v1/fileData/documents_pi/index.html 机器人开发平台使用手册： https://developer.horizon.ai/api/v1/fileData/TogetherROS/index.html 视频课程： https://class.guyuehome.com/all/10284445/19617453 图文教程： https://hhp.guyuehome.com/ 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/92 博客泡圈： https://www.guyuehome.com/","text_tokens":["_","togetherros","图文","92","教程","问答","guyuehome","bubble",":","api","https","www","v1","使用手册","开发板","class","博客","派","/","19617453"," ","使用","机器",".","旭日","id","手册","index","horizon","hhp","机器人","：","filedata","all","html","10284445","开发","ai","平台","pi","泡圈","x3","circledetail","developer","视频","documents","com","课程"],"title":"教程链接汇总","title_tokens":["汇总","教程","链接"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["《","限于","传播","进行","guyuehome","版权","等","众多","、","违反","内容","人才","学","图书","累积","努力","但","及","合作","微控","被","责任","建立","平台","ai","未来","追究","有权","面向","为","网站","将","，","明者","通过","或","面向未来","com","优质","精锋","ros","捆绑","抄录","华语","许可","修改","实践","线上","社区","与","和","www","高质量","声明","声明者","均","究其","1000","高校","超过","是","有限","授权","不得","联系","构建","机器人","镜像","畅销","创新","一体","依法","至今","模式","拥有","个人","请","致力","单位","课程","法律","地区","本","古月","上述","课件","致力于","创建","知名","居","。","用户","未经","质量","法律责任","交流","@","）","120","校企","+","年","作品","机器"," ","使用","企业","任何","对本","提供","出版","集","销售","源码","上","开发","复制","公司","》","2011","其它","包括","视频","书面","仅限","产品","小时","武汉","交流学习","追究其","合法","所有","人才培养","有限公司",".","高质","培养","学习","生态","（","科技","赋能","brand","万字","的","如需","学习者","万人","不"],"title":"关于我们","title_tokens":["我们","关于"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["《","guyuehome","等","众多","、","内容","人才","图书","累积","努力","及","合作","建立","平台","ai","未来","面向","为","，","通过","面向未来","com","优质","ros","华语","实践","线上","社区","与","www","高质量","1000","高校","超过","是","构建","机器人","畅销","创新","一体","至今","模式","致力","课程","地区","古月","致力于","创建","知名","居","。","用户","质量","交流","）","120","校企","+","年"," ","机器","企业","提供","出版","集","开发","》","2011","视频","小时","交流学习","人才培养",".","高质","培养","学习","生态","（","赋能","万字","的","学习者","万人"],"title":"学机器人，上古月居","title_tokens":["居","机器人","学","机器","，","上","古月"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["限于","传播","进行","guyuehome","版权","等","、","违反","但","微控","被","责任","追究","有权","网站","为","将","，","明者","或","com","精锋","捆绑","抄录","许可","修改","和","与","声明","声明者","均","究其","有限","授权","不得","联系","镜像","依法","拥有","个人","请","单位","法律","课程","本","上述","古月","课件","居","。","用户","未经","法律责任","@","作品"," ","使用","任何","对本","销售","源码","复制","公司","其它","包括","视频","书面","仅限","产品","武汉","追究其","合法","所有","有限公司",".","学习","科技","brand","的","如需","不"],"title":"版权声明","title_tokens":["版权","声明"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/","text":"智能机器人发展与现状 智能机器人正在改变着我们的生活，想象这样一种场景。 也许不知不觉的某一天，我们就会发现类似这样的机器人会真实出现在生活当中。 科技的发展日新月异，智能机器人也突飞猛进，伴随机器人发展而生的机器人操作系统，也是机器人重要的发展动力之一。 智能机器人举例 提到智能机器人，大家脑海里会映射出什么样的情景呢？ 是不是会有很多科幻电影中变形金刚、大白机器人、星球大战等场景呢？ 智能机器人这个概念，只是一个科幻词汇么？当然不是的，其实在我们身边，已经有越来越多智能机器人出现，我们来看看他们都在哪里？ 扫地机器人 先来看一个大家最熟悉的一个类型——扫地机器人。现在的扫地机器人，除了可以完成扫地、拖地这样一些基本功能之外，还搭载了激光雷达、相机、红外等十几种传感器。 一个全新的扫地机器人虽然是第一次来到你家，但是它可能用到 5 分到 10 分钟时间，很快就可以通过它的传感器对你的家庭环境了如指掌，也就是把实际的家庭环境做成了一张地图，这样他就会知道哪里是卧室，哪里是餐厅，哪里是厨房，不同的区域用多大的风力，用多大的水量来去清扫最为合适，它都会智能化地来做判断。 除此之外，它还得知道怎么样去躲避各种障碍物，比如说家里面的宠物、地上摆放的插线板，各种各样的杂物等等。 所以看似非常小的一个扫地机器人，其实已经是一个很智能化的家用设备了，正在潜移默化地改变着我们的生活。 自动化仓储 第二个案例，虽然大部分人在生活中不会直接接触，但却和每一个人息息相关，那就是自动化仓储。 这是京东某个实际部署运营的一套自动化的仓库，在里面可以看到各种各样的机器人，比如工业机械臂、移动机器人等等，这套立体仓库当中大量的货架也是自动化的，这就是一个典型的机器人应用场景。 之前有一个关于京东的新闻报道，里边讲到，从我们下单那刻开始，到商品分拣出来放到快递员手上，只需要20分钟。比如我们要买个手机，下单付款，20分钟之后，这个手机已经从这么庞大的仓库中顺利找到，并且完成了包装、打标、分配等一系列工序。这样，我们在绝大部分城市，基本都可以体验到下单之后，当天或者隔天收货的体验，为什么它可以做到如此高效，就是因为背后这一套由机器人组成的自动化系统，借助大数据的分析，甚至可以做到在你下单之前，平台就知道你将要买什么东西。比如说你会按照一个月的频率买米买面，那平台就可以预测到上个月你买的米应该快吃完了，然后就会在距离你家最近的一个仓库里面备货。 当你下单之后，这袋米可能半个小时送到你手上了。 自动驾驶 第三个案例，那就是当今最为热门的技术之一——自动驾驶。 自动驾驶汽车也是典型的移动机器人系统，为了保证绝对安全的驾驶过程，汽车上装配了非常多的传感器，以及极为复杂的控制算法。 视频中我们看到的是华为自动驾驶系统在实际路面上测试的效果，自动驾驶汽车通过多个相机、雷达、超声波，实时构建周围环境的三维信息，不仅可以动态识别路面上的行人车辆、车道线、交通指示灯等，还可以安全完成超车、会车、跟车、转向等重要功能，同时对突发状况也可以及时处理，比如躲避突然出现的车辆、礼让行人等，最终自动行驶入库，把我们安全顺利的送到目的地。 虽然自动驾驶相关的技术和法律法规还在不断完善中，但是相信有一天我们每个人都可以体验自动驾驶的乐趣，而且这一天不会太远。 智能机器人发展 机器人的发展横跨几十年，经历了三个重要时期。 2000年前，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 2015年之后，智能机器人市场迅速爆发，到2025年，国内人工智能市场有望达到1164亿元，而作为人工智能重要载体的机器人，市场更会达到1463亿元。 行业的快速发展，必将带动大量专业人才的需求，人才缺口也将逐年扩大，2025年，预计国内机器人行业的人才缺口将超过450万，人工智能方面的缺口更会达到1000万。 面对如此严峻的人才需求，国内各高校从2016年起，陆续开设机器人和人工智能专业，为人才的供给提供有力保障。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角。 机器人操作系统 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是机器人操作系统。 ROS的诞生 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣、做饭、收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法：既然自己做不到，那为什么不联合所有人一起干呢？如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在这几个图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面，却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS怀揣“提高机器人软件复用率”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 ROS的特点 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。","text_tokens":["学术","只能","苹果","立体","商品","知道","设计","嵌入","猛进","以","等","迅猛","东西","快速","三维","周围环境","基本功能","情景","每个","存储","日常","大有可为","来讲","以上","潜移默化","国家","index","discourse","预测","被","应该","熨烫","：","基于","发布","一大步","访问","家用","之一","平台","ai","深知","2015","图中","将","剪头发","突飞猛进","背后","成为","默化","典型","2","备货","那刻","趋势","卧室","想法","维基百科","一系列","然后","减速","很快","家","万","给","两个","第一","俗称","模块化","20","红外","活跃","越来越","处理","高","时期","2000","统计","改变","长远","更","类型","很多","原型","agv","问题","所以","四足","领域","之","大部","是","总称","尽量","三个","助推","里边","基本","用多大","劳动","实现","毛巾","远","250","厨房","它","开始","当天","专业人才","轮子","上个月","围绕","生态系统","百科","闻报","有没有","引擎","扫地","亿元","因","作为","同一","局部","充足","第一次","洗衣","这些","复合","宽松","智慧","几种","举例","这个","不觉","一群","操控","框架","元素","同样","障碍物","新增","快","450","标准","效率","行业","很","各种","页面","既然","词汇","组成"," ","部署","仿生","参考","复用","视觉","低","法规","这里","方式","等等","搭载","1164","站","上边","福大","送到","事情","个","全球化","出来","需求","上","联合","操作系统","地上","说干就干","？","最后","着","手机","那","月","从中","分","尝试","风力","现状","10","立体仓库","实验","木头","上市","科幻电影","容易","包","运营","按照","送餐","时至今日","人数","linux","只要","所有","分享","初期","说明","映射","驱动器",".","技术","统统","叠","你家","扩大","一系","二个","生态","而生","全新","完善","热点","太远","软件","么","制造","下单","基本功","以及","命令","什么样","提到","太","更会","当今","工业生产","曲线","windows","做","摆放","中","加","数据","上个","做成","当","柔性","虽然","环境","工具","了","几十年","教器","核心","功能","大","自己","之内","有力","外观","robot","不要","横跨","物体","多万","地图","人工","目的地","人才","访问量","必将","记录","性能","此时","家庭","但","车","用到","水量","得","”","系列","目的","检测","指示","就","哪里","用","电路","还是","网站","跑","answers","而且","比如说","在生活中","找到","款","十几","水下","100","呈","狗","部件","超车","ros","转向","商业","教程","问答","许可","车辆","正在","和","某个","庞大","时间","personal","推动","无疑","一种","许可证","于","工厂","激光","浪潮","不断丰富","可为","由","复杂","1000","真实","高校","还","发展","从","15","代表","下来","广泛","近几年","指示灯","而言","机器人","最佳","各","2016","由示","不断完善","四项","突飞","程度","超声波","ros2","伴随","下载","甚至","他","合适","至今","媒体","在","不是","人","半个","当中","十几种","状况","课程","某","总而言之","电影","执行","传感器","用户","不同","繁荣","大战","礼让","头发","开发者","有志","年","推进","使用","释放","关注","不到","玩耍","去","员","来到","提供","wiki","模块","出现","主要","条","通信","源码","层面","车道","巨人","a","无论","沉淀","数字","根据","org","入库","地","并且","突发状况","思考","如果","乐趣","工序","度","传感","算法","要","小时","日新月异","发状","当然","状","会","跨平台","序幕","雷达","如此","前夜","有望","无论是","大学","里会","需要","四大","我们","而","整合","同理","上去","要求","新鲜","感器","有","各种各样","多","除此","开发工具","80","服务","这样","工业","吃","时候","衣服","主角","几个","载体","开设","数据库","电气","不会","第二","对于","一家","机制","概念","其中","提高","肩膀","现在","后","发表","不断","促使","面对","大量","里面","插","排名","米","轰动","法律法规","进步","算是","其他","结晶","就是","极为","万左右","专业","帮助","应用软件","同时","控制算法","及时处理","生产","劳动力","用于","多媒体","自主","明智","将要","动态","正如","不过","c","频繁","聊天","一套","动机","2007","采购","做到","并","通过","没有","实验室","这是","声波","呢","过程","装配","信息","精致","40","第三","生态系","论坛","但是","却","每","完全","社区","几十","计算","诞生","肯定","比如","率","拖地","代","隔天","为了","杂物","做饭","分钟","躲避","超过","资金","分析","丰富","系统","有限","相信","重要","一些","逐年","构建","也","息息相关","应用","一个月","革命","多个","地来","智能化","是不是","方面","这套","得以","潜移","整理","资源","情况","。","金刚","这款","今日","接触","他们","生活","非常","付款","跟车","井喷","移动","后期","绝大部分","实时","最","一款","向前走","熟悉","算机","随着","把","超声","周围","机器","已有","友好","packages","都","软件系统","造","向前","相关","陆续","人工智能","团队","路面","收货","一个","涉及","5","清扫","快递","大家","这袋","预计","本身","动作","维基","斯坦福","人才需求","臂","开发","收拾","自身","乐意","左右","公司","自动化","到","计算机","缺少","除了","给出","城市","身边","产品","带动","普遍","包装","缩短","圈","顺利","人类","严峻","重新","零部件","简单","2025","台球","商业化","看似","时代","—","大步","一步","场景","越来","移动机器人","科技","市场","打标","多项","做法","身影","可能","脑海","起来","活跃度","的","伺服","一大","多媒体系统","先","借助","此","；","一起","突发","有人","直接","具备","“","实际","缺口","十年","维基百","报道","激光雷达","放到","为什么","、","更加","国内","150","餐厅","控制器","律法","星球大战","之后","完","不想","逐渐","一切","最高","光靠","全球","障碍","自动","各项","起","最终","经历","效果","已经","案例","人形","1463","地域","所有人","为","查看","其实","支持","电机","通常","热门","，","这一波","开源","第二个","这","新闻报道","才","频率","来看","业生","宠物","类似","变形金刚","活动","华为","交通","部分","与","不多","因为","不知","设备","新","张图","新月","智能","无聊","增长","新鲜事","看到","对","爆发","或者","家庭环境","讨论","针对","得到","关于","pr2","控制","线","突然","成果","买米","为例","迅速","区域","强悍","一张","创意","出","回答","各样","不仅","个人","货架","青年","基本上","一天","汽车","仓储","小","法律","全人","特点","特性","上图","判断","不知不觉","最为","测试","动力","最近","ros1","买面","据库","次数","体系","大白","怀揣","识别","只","b","25","绝大","速度","之外","京东","行人","真的","任何","减速机","也许","新闻","供给","研究","当时","伺服电机","变形","这么","浏览量","距离","几年","保证","科幻","及时","绝对","差不多","一次","行驶","零","目标","只是","视频","驾驶","嵌入式","如何","星球","年前","做出","看看","棒","仓库","大部分","总体","驱动","全人类","斯坦福大学","拉开序幕","保障","集合","以叠","可以","相机","安全","浏览","机械","手上","怎么","分拣","达到","什么","干","打","体验","分配","想象","别人","除此之外","完成","依然","索引","第三个","增长速度","提出","更为","怎么样","拉开","正式","操作","答案","陪","发现","买","独立","万人","不","来","讲","感知","线板","了如指掌","之前","高效","买个","你","研发","清晰"],"title":"智能机器人发展与现状","title_tokens":["现状","智能","机器人","机器","与","发展"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_1","text":"智能机器人正在改变着我们的生活，想象这样一种场景。 也许不知不觉的某一天，我们就会发现类似这样的机器人会真实出现在生活当中。 科技的发展日新月异，智能机器人也突飞猛进，伴随机器人发展而生的机器人操作系统，也是机器人重要的发展动力之一。","text_tokens":["不知不觉","。","日新月异","动力","不觉","类似","生活","猛进","会","正在","不知","我们","改变","一种","新月","智能","机器"," ","真实","想象","发展","也许","场景","是","系统","重要","而生","科技","机器人","也","这样","出现","突飞","操作","的","发现","之一","就","伴随","操作系统","突飞猛进","在","，","着","一天","当中","某"],"title":"智能机器人发展与现状","title_tokens":["现状","智能","机器人","机器","与","发展"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_2","text":"提到智能机器人，大家脑海里会映射出什么样的情景呢？ 是不是会有很多科幻电影中变形金刚、大白机器人、星球大战等场景呢？ 智能机器人这个概念，只是一个科幻词汇么？当然不是的，其实在我们身边，已经有越来越多智能机器人出现，我们来看看他们都在哪里？","text_tokens":["看看","这个","呢","身边","金刚","电影","当然","他们","会","变形金刚","科幻电影","等","大战","大白","里会","、","越来越","什么","情景","我们","智能","词汇","机器"," ","很多","映射","星球大战","都","场景","越来","有","一个","多","大家","机器人","变形","么","脑海","出现","的","已经","什么样","提到","出","科幻","哪里","来","其实","在","？","不是","，","只是","中","是不是","概念","星球"],"title":"智能机器人举例","title_tokens":["机器人","机器","举例","智能"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_3","text":"先来看一个大家最熟悉的一个类型——扫地机器人。现在的扫地机器人，除了可以完成扫地、拖地这样一些基本功能之外，还搭载了激光雷达、相机、红外等十几种传感器。 一个全新的扫地机器人虽然是第一次来到你家，但是它可能用到 5 分到 10 分钟时间，很快就可以通过它的传感器对你的家庭环境了如指掌，也就是把实际的家庭环境做成了一张地图，这样他就会知道哪里是卧室，哪里是餐厅，哪里是厨房，不同的区域用多大的风力，用多大的水量来去清扫最为合适，它都会智能化地来做判断。 除此之外，它还得知道怎么样去躲避各种障碍物，比如说家里面的宠物、地上摆放的插线板，各种各样的杂物等等。 所以看似非常小的一个扫地机器人，其实已经是一个很智能化的家用设备了，正在潜移默化地改变着我们的生活。","text_tokens":["现在","虽然","环境","实际","了","知道","等","里面","激光雷达","功能","、","基本功能","插","餐厅","地图","就是","潜移默化","家庭","障碍","用到","水量","得","已经","家用","就","哪里","其实","比如说","，","默化","通过","十几","卧室","来看","宠物","很快","家","但是","第一","正在","时间","红外","比如","拖地","设备","改变","智能","激光","类型","杂物","分钟","躲避","所以","还","对","是","一些","家庭环境","基本","用多大","机器人","也","厨房","它","区域","一张","他","合适","地来","各样","扫地","智能化","第一次","十几种","小","几种","潜移","判断","最为","。","传感器","非常","不同","生活","障碍物","最","熟悉","很","各种","把","机器"," ","之外","都","去","来到","等等","一个","搭载","5","清扫","大家","一次","到","地上","地","着","除了","分","传感","风力","10","可以","会","相机","怎么","雷达","我们","看似","—","除此之外","完成","你家","感器","各种各样","除此","全新","这样","可能","怎么样","基本功","的","先","来","做","摆放","线板","了如指掌","你","做成"],"title":"扫地机器人","title_tokens":["机器人","机器","扫地"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_4","text":"第二个案例，虽然大部分人在生活中不会直接接触，但却和每一个人息息相关，那就是自动化仓储。 这是京东某个实际部署运营的一套自动化的仓库，在里面可以看到各种各样的机器人，比如工业机械臂、移动机器人等等，这套立体仓库当中大量的货架也是自动化的，这就是一个典型的机器人应用场景。 之前有一个关于京东的新闻报道，里边讲到，从我们下单那刻开始，到商品分拣出来放到快递员手上，只需要20分钟。比如我们要买个手机，下单付款，20分钟之后，这个手机已经从这么庞大的仓库中顺利找到，并且完成了包装、打标、分配等一系列工序。这样，我们在绝大部分城市，基本都可以体验到下单之后，当天或者隔天收货的体验，为什么它可以做到如此高效，就是因为背后这一套由机器人组成的自动化系统，借助大数据的分析，甚至可以做到在你下单之前，平台就知道你将要买什么东西。比如说你会按照一个月的频率买米买面，那平台就可以预测到上个月你买的米应该快吃完了，然后就会在距离你家最近的一个仓库里面备货。 当你下单之后，这袋米可能半个小时送到你手上了。","text_tokens":["直接","虽然","实际","立体","商品","了","知道","大量","等","东西","报道","里面","大","放到","为什么","、","米","之后","就是","完","但","自动","将要","预测","应该","系列","已经","案例","平台","就","一套","动机","做到","背后","比如说","，","在生活中","典型","找到","备货","第二个","那刻","这","新闻报道","这是","频率","一系列","然后","却","每","部分","和","某个","庞大","20","比如","因为","隔天","分钟","由","看到","分析","从","大部","是","系统","或者","里边","基本","机器人","也","关于","它","开始","当天","息息相关","应用","买米","上个月","甚至","闻报","一个月","各样","在","人","货架","半个","当中","仓储","这套","这个","。","最近","接触","生活","付款","移动","买面","绝大部分","快","只","各种","绝大","组成"," ","部署","机器","京东","都","相关","员","新闻","等等","一个","收货","这袋","快递","送到","这么","出来","距离","臂","自动化","到","并且","手机","那","工序","城市","仓库","大部分","要","小时","包装","立体仓库","可以","会","顺利","机械","手上","运营","按照","如此","分拣","数据","需要","什么","我们","体验","分配","完成","你家","场景","二个","移动机器人","一系","有","各种各样","打标","这样","可能","工业","下单","吃","的","买","借助","讲","不会","第二","之前","中","高效","买个","你","上个","当"],"title":"自动化仓储","title_tokens":["自动","自动化","仓储"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_5","text":"第三个案例，那就是当今最为热门的技术之一——自动驾驶。 自动驾驶汽车也是典型的移动机器人系统，为了保证绝对安全的驾驶过程，汽车上装配了非常多的传感器，以及极为复杂的控制算法。 视频中我们看到的是华为自动驾驶系统在实际路面上测试的效果，自动驾驶汽车通过多个相机、雷达、超声波，实时构建周围环境的三维信息，不仅可以动态识别路面上的行人车辆、车道线、交通指示灯等，还可以安全完成超车、会车、跟车、转向等重要功能，同时对突发状况也可以及时处理，比如躲避突然出现的车辆、礼让行人等，最终自动行驶入库，把我们安全顺利的送到目的地。 虽然自动驾驶相关的技术和法律法规还在不断完善中，但是相信有一天我们每个人都可以体验自动驾驶的乐趣，而且这一天不会太远。","text_tokens":["实际","环境","虽然","了","不断","等","三维","周围环境","功能","、","每个","法律法规","律法","目的地","就是","极为","同时","控制算法","及时处理","车","自动","最终","效果","动态","目的","案例","之一","指示","动机","而且","热门","，","典型","通过","这","超车","声波","转向","过程","装配","信息","第三","车辆","但是","华为","交通","和","比如","处理","为了","复杂","躲避","还","看到","对","是","系统","相信","重要","三个","指示灯","构建","机器人","也","不断完善","控制","线","突然","超声波","多个","不仅","在","人","一天","汽车","状况","法律","最为","。","测试","传感器","非常","跟车","移动","礼让","实时","识别","把","超声","周围"," ","机器","都","行人","相关","法规","路面","送到","出现","保证","上","车道","及时","绝对","行驶","入库","突发状况","视频","驾驶","乐趣","那","传感","算法","发状","可以","会","顺利","安全","相机","雷达","我们","技术","—","体验","完成","移动机器人","感器","有","第三个","多","完善","太远","以及","的","当今","不会","中","突发"],"title":"自动驾驶","title_tokens":["自动","驾驶"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_6","text":"机器人的发展横跨几十年，经历了三个重要时期。 2000年前，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 2015年之后，智能机器人市场迅速爆发，到2025年，国内人工智能市场有望达到1164亿元，而作为人工智能重要载体的机器人，市场更会达到1463亿元。 行业的快速发展，必将带动大量专业人才的需求，人才缺口也将逐年扩大，2025年，预计国内机器人行业的人才缺口将超过450万，人工智能方面的缺口更会达到1000万。 面对如此严峻的人才需求，国内各高校从2016年起，陆续开设机器人和人工智能专业，为人才的供给提供有力保障。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角。","text_tokens":["只能","环境","了","后","缺口","不断","面对","几十年","等","大量","快速","十年","教器","大","更加","、","国内","有力","横跨","控制器","人才","人工","之后","就是","逐渐","专业","必将","帮助","劳动力","此时","生产","家庭","自主","自动","起","经历","检测","不过","ai","1463","之一","2015","将","为","成为","电机","，","并","没有","这","这是","狗","呈","过程","业生","减速","万","但是","完全","俗称","几十","计算","和","高","时期","2000","设备","于","工厂","智能","类型","不断丰富","更","1000","agv","高校","四足","超过","发展","对","丰富","从","是","有限","爆发","系统","重要","三个","逐年","劳动","而言","机器人","最佳","各","也","由示","2016","控制","专业人才","应用","迅速","智能化","亿元","作为","局部","方面","汽车","课程","最为","。","动力","执行","传感器","操控","井喷","450","算机","随着","行业","年","机器"," ","释放","关注","仿生","视觉","减速机","人工智能","陆续","提供","供给","1164","伺服电机","预计","主要","出现","动作","需求","层面","人才需求","开发","数字","操作系统","到","计算机","思考","缺少","驾驶","年前","传感","驱动","带动","拉开序幕","保障","状","人类","按照","序幕","有望","前夜","送餐","如此","严峻","达到","我们","2025","而","时代","驱动器","技术","依然","要求","扩大","感器","多","市场","提出","热点","服务","软件","拉开","工业","正式","操作","的","命令","伺服","主角","太","载体","更会","开设","工业生产","感知","电气"],"title":"智能机器人发展","title_tokens":["机器人","机器","发展","智能"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_7","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是机器人操作系统。","text_tokens":["这个","尝试","。","斯坦福大学","非常","一群","可以","大学","越来越","有志","智能","机器","那","复杂","问题","就是","技术","完成","是","越来","系统","团队","重要","一个","或者","福大","机器人","针对","答案","操作","斯坦福","已经","的","上","层面","独立","开发","操作系统","对于","不是","，","人","青年","高效","如何","给出"],"title":"机器人操作系统","title_tokens":["系统","操作系统","机器人","机器","操作"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros","text":"2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣、做饭、收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法：既然自己做不到，那为什么不联合所有人一起干呢？如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在这几个图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面，却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS怀揣“提高机器人软件复用率”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。","text_tokens":["柔性","学术","“","苹果","虽然","了","设计","促使","等","快速","你","自己","为什么","功能","、","之内","外观","robot","横跨","物体","轰动","就是","不想","一切","专业","光靠","帮助","应用软件","性能","此时","用于","熨烫","：","基于","”","系列","已经","一大步","人形","平台","深知","就","图中","用","聊天","电路","所有人","一套","剪头发","2007","动机","成为","而且","还是","，","找到","并","2","款","没有","实验室","100","水下","这","想法","部件","才","ros","呢","一系列","精致","家","类似","很快","但是","第一","却","社区","诞生","和","推动","肯定","personal","率","因为","处理","代","更","做饭","无聊","很多","原型","复杂","分钟","所以","资金","还","领域","看到","发展","是","系统","一些","重要","广泛","实现","毛巾","机器人","也","pr2","应用","为例","强悍","甚至","至今","有没有","因","在","个人","同一","充足","洗衣","第一次","复合","得以","整理","这个","。","这款","今日","他们","框架","繁荣","同样","头发","移动","后期","向前走","一款","标准","效率","怀揣","只","很","各种","既然","年","组成","机器"," ","不到","玩耍","都","软件系统","真的","向前","复用","低","研究","一个","当时","涉及","5","大家","事情","个","出来","条","上","层面","开发","臂","收拾","无论","联合","一次","说干就干","目标","？","最后","如果","手机","那","从中","做出","要","普遍","实验","木头","以叠","可以","圈","容易","机械","无论是","时至今日","零部件","只要","什么","所有","我们","分享","干","初期","台球","打","统统","—","别人","大步","完成","叠","一系","移动机器人","有","而生","多","服务","软件","身影","这样","可能","衣服","时候","陪","的","一大","独立","几个","不","做","一起","中","其中","提高","有人"],"title":"ROS的诞生","title_tokens":["ros","诞生","的"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros_1","text":"提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["具备","直接","工具","了","设计","嵌入","促使","以","核心","自己","不要","功能","、","进步","人才","结晶","就是","来讲","全球","同时","多媒体","明智","被","：","正如","案例","c","平台","就","将","采购","跑","做到","支持","通常","，","并","开源","这","ros","商业","家","许可","给","生态系","完全","社区","和","模块化","部分","率","比如","时间","越来越","新","长远","许可证","更","智能","很多","由","还","领域","之","发展","对","从","是","总称","代表","系统","尽量","下来","实现","机器人","远","也","轮子","围绕","生态系统","成果","应用","ros2","创意","各样","引擎","媒体","智能化","在","不是","汽车","这些","宽松","全人","智慧","特性","特点","这个","。","他们","非常","ros1","新增","向前走","体系","b","各种","把","组成","友好","机器"," ","已有","推进","使用","都","造","向前","复用","这里","一个","站","本身","大家","肩膀","模块","全球化","通信","上","开发","巨人","a","沉淀","自身","公司","到","零","目标","最后","着","嵌入式","那","产品","全人类","缩短","集合","可以","会","上市","人类","跨平台","重新","linux","四大","我们","分享","简单","商业化","整合","同理","上去","技术","别人","一步","越来","生态","有","开发工具","多","各种各样","多项","做法","软件","制造","这样","工业","的","多媒体系统","此","来","windows","一家","做","机制","一起","；","中","提高","做成"],"title":"ROS的特点","title_tokens":["特点","ros","的"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros_2","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。","text_tokens":["现在","了","发表","等","迅猛","快速","维基百","核心","功能","大","、","150","排名","每个","算是","其他","多万","存储","日常","就是","大有可为","访问量","万左右","以上","最高","记录","国家","全球","index","各项","discourse","发布","：","已经","访问","频繁","就","地域","网站","查看","其实","answers","这一波","，","通过","趋势","这","这是","ros","呢","维基百科","来看","教程","40","问答","万","给","两个","论坛","活动","每","正在","社区","和","部分","20","比如","无疑","活跃","不多","越来越","统计","新","张图","可为","浪潮","很多","问题","增长","新鲜事","看到","发展","从","大部","是","15","代表","重要","近几年","讨论","助推","基本","250","而言","机器人","得到","关于","四项","程度","应用","百科","回答","下载","革命","在","作为","基本上","人","这些","总而言之","上图","资源","情况","最为","。","动力","用户","非常","不同","元素","据库","绝大部分","次数","快","开发者","很","各种","页面","25","绝大","速度","packages"," ","使用","机器","都","参考","相关","任何","方式","这里","等等","一个","上边","wiki","大家","浏览量","维基","源码","几年","上","左右","开发","乐意","差不多","根据","到","org","？","月","度","棒","总体","大部分","可以","浏览","包","人数","什么","我们","说明","整合",".","索引","越来","新鲜","有","80","多","增长速度","提出","更为","起来","活跃度","的","几个","万人","数据库","不","曲线","；","中","加","其中","数据","研发","清晰"],"title":"ROS的社区","title_tokens":["ros","社区","的"]},{"location":"hhp/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/","text":"智能机器人开发平台介绍 机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 以操作系统为例，应用最为广泛的ROS系统在不断迭代，不过在智能时代洪流的冲击下，还是涌现出一些问题。 ROS的一些问题 ROS逐渐成为标准，大量机器人应用被贡献到社区，虽然提高了代码的通用性，但却难以发挥硬件的完整性能； 大量应用聚焦在机器人运动控制与定位导航等基础功能，智能化的应用较少； 在软件资源格外丰富的社区中，还缺少系统化的内容，帮助用户快速实现相关资源的复用。 很多开发者都在魔改ROS，去适配自己的机器人，所以机器人的研发成本非常高。从机械选型、系统定制、算法开发到数据闭环，每个过程都要付出高昂的成本，在这么高昂的成本下，做机器人是非常困难的一件事情。 在算法层面，机器人算法仍处于早期阶段，很多感知算法还停留在理论阶段，无法服务与实际场景，机器学习发展迅速，不过对于很多开发者来讲，数据的采集、标注、训练都是一个庞大的工作量，部署运行不仅十分困难，还要消耗大量的算力成本。 智能机器人涉及的领域和方法较多，目前整体的学习成本偏高，想要实现智能化应用的难度就更高，问题的出现，也带来了机遇与挑战。 地平线机器人开发平台 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。这套机器人开发平台的目的是打造软硬协同、极致优化、丰富易用的机器人开发组件与生态，由图中这几个部分组成，我们一一来看下。 平台的底层主要依托于地平线AIOT边缘AI芯片——旭日3和旭日5，内部集成了地平线最先进的伯努利2.0架构的AI 引擎，可提供 5TOPS 以上的等效算力。如此强大的算力支持，保证了智能机器人开发的基础条件。 芯片是基础建设，在此之上更重要的是一系列软件设施，正如我们电脑上的windows和linux，一套优质的操作系统，是上层应用软件开发的必要条件，TogetherROS在ROS系统的基础上，进行了大量的改良和优化，可以为开发者提供高效实用的系统环境。 在此之上，平台还会提供大量的机器人参考算法和应用功能示例，比如常用的建图、定位、导航，还有智能机器人中至关重要的智能化功能，比如一些基础算法，图像分类、图像分割、目标检测等，还有应用功能，人脸检测、人体跟踪、骨骼点检测、手势识别、语音处理等等，提供基于大量数据训练的模型，借助底层AI引擎的支持，可以快速、稳定的实现各种各样的智能应用。 同时平台还会配套一系列加速机器人开发的工具链，比如代码编写工具、系统调试工具、数据标注和训练工具等。 古月居和地平线也会共同打造机器人开发者社区，持续分享技术内容，沉淀更多开发者的智慧，更多机器人产业中的合作伙伴也会陆续加入，共同打造最为丰富的机器人开发者套件，建设智能机器人开发的生态圈。 在这个机器人开发平台之中，最为重要的就是TogetherROS系统了，起到了承上启下、连接各项功能的作用，我们将通过一系列课程为大家深入浅出的介绍。 TogetherROS的特点 在ROS系统庞大社区资源的基础上，结合智能机器人的发展和产业需求，TogetherROS应运而生。 TogetherROS有三个核心特点： 开源兼容，秉承开源精神的力量 TogetherROS和ROS系统一样，也是一套完全开源的系统，所有开发者都可以继续二次开发，接口方面和ROS2完全兼容，ROS2原有的功能也都可以继续复用，已有的机器人代码可以十分便利的迁移过来。 极致性能优化 相比ROS的通用化，TogetherROS更多考虑的是如何充分挖掘底层硬件的性能，比如提高数据传输的效率、增强人工智能处理的能力，在后续的使用案例中，大家可以充分感受到这一点。 丰富易用的软硬件组件 比如各种各样的传感器和开发套件，再比如算法模块、感知应用、机器人功能，还有提高开发效率的各种编程、部署工具。 TogetherROS系统框架 具体展开来看，TogetherROS的系统框架如图所示，其中深蓝色部分为地平线优化、新增的模块，其他是目前复用ROS2中的模块： 在系统通信的中间件部分，保留了ROS2中原本针对不同DDS的通信框架，与ROS2 foxy版本的接口完全兼容，方便复用ROS丰富工具包进行原型验证，在此之上增加了“zero-copy” 零拷贝 的通信机制，降低大数据传输时延和系统资源消耗。 在组件功能部分，TogetherROS提供“hobot CV” 视觉加速库 ，软硬件协同，可以提升CV算子性能、降低系统资源消耗；针对AI模型的推理，封装了“hobot_dnn” 功能包，可以调用底层芯片的AI引擎，简化板端AI开发与部署，释放BPU的算力。可以支持丰富的机器人传感器型号，比如相机、雷达、IMU、GPS等，节省驱动开发的时间，可以聚焦在机器人应用开发上。 除此之外，TogetherROS还会提供丰富的 软件调试和性能调优工具 ，方便用户定位问题和优化系统性能，在具体的行业应用中，还支持最小化和模块化的剪裁，利于部署在资源受限的嵌入式产品中。 总之，TogetherROS出于ROS，又不止于ROS，ROS原有的功能依然继承，重点是借助硬件能力，充分优化系统的性能，提高机器人开发的效率。","text_tokens":["主控","进行","降低","嵌入","以","型号","等","地平线","快速","加速","每个","内容","中间","来讲","以上","通用化","具体","被","：","基于","消耗","dnn","平台","ai","极致","调优","将","成为","算子","一系列","工具包","给","挖掘","模块化","hobot","定位","结合","处理","高","更","很多","原型","问题","所以","旭日","领域","是","三个","实现","工作量","地平","之中","引擎","编程","作为","智慧","这个","居","协同","框架","新增","cv","分割","标准","效率","行业","各种","组成"," ","部署","标注","参考","必要条件","复用","加入","视觉","等等","系统资源","事情","推理","需求","上","操作系统","规控","运动","月","优化","一点","最小化","不止","_","人体","调用","采集","相比","包","人脸","linux","必要","所有","分享","套件","应运而生","迁移","技术","调试","学习","一系","生态","程式","全新","再","软件","伙伴","windows","做","示例","中","数据","深入","copy","虽然","环境","工具","蓝色","了","核心","功能","自己","大","运行","语音","系统化","人工","机遇","性能","2022","等效","但","洪流","边缘","一代","承上启下","”","系列","目的","定位导航","格外","定位问题","检测","就","应运","持续","还是","gps","工作","ros","感受","提升","至关重要","和","二次开发","庞大","时间","聚焦","算力","难度","于","复杂","之上","还","发挥","发展","从","付出","广泛","可","还有","停留","方便","机器人","考虑","共同","ros2","又","在","至关","课程","整体","古月","目前","执行","传感器","用户","不同","改良","芯片","开发者","年","精神","使用","释放","去","提供","连接","模块","出现","主要","通信","增强","层面","早期","十分困难","沉淀","foxy","合作伙伴","带来","贡献","传感","算法","要","仍","会","拷贝","跟踪","如此","深蓝色","雷达","我们","较","充分","非常复杂","点","感器","有","各种各样","多","除此","服务","介绍","几个","对于","机制","节省","其中","提高","能力","十分","通用","zero","不断","aiot","大量","接口","原本","兼容","分类","其他","就是","帮助","迭代","应用软件","同时","方法","合作","正如","不过","训练","社区资源","适配","一套","通用性","处于","通过","优质","伯努利","链","导航","过程","信息","内部","却","完全","社区","计算","比如","原有","便利","实用","高昂","起到","生态圈","丰富","少","系统","如图所示","一些","重要","也","骨骼","闭环","应用","板端","5tops","智能化","底层","方面","电脑","传输","这套","资源","。","难以","非常","最","改","机器","已有","都","相关","陆续","人工智能","一个","涉及","5","还要","大家","总之","动作","一样","还会","开发","到","包括","缺少","设施","先进","产品","理论","利于","版本","组件","作用","现出","编写","产业","时代","—","场景","下","的","借助","涌现","2.0","此","涌现出","；","据传","imu","打造","架构","“","实际","出于","、","数据传输","增加","一件","集成","逐渐","由图","过来","大脑","困难","代码","各项","剪裁","手势","所示","深蓝","案例","选型","时延","挑战","强大","为","支持","电机","软硬件","，","建设","开源","这","二次","3","偏高","来看","最小","一一","软硬","基础","中间件","力量","部分","与","受限","智能","配套","建图","针对","重点","控制","dds","成本","为例","迅速","各样","不仅","6","稳定","特点","togetherros","最为","常用","识别","条件","之外","深入浅出","继续","无法","图像","软件资源","-","封装","这么","保证","推出","零","目标","硬件","秉承","验证","嵌入式","如何","简化","驱动","可以","相机","机械","继承","模型","展开","保留","完整","想要","库","除此之外","依然","上层","阶段","定制","bpu","后续","冲击","魔","正式","操作","感知","易用","高效","依托","研发"],"title":"智能机器人开发平台介绍","title_tokens":["开发","平台","智能","机器人","机器","介绍"]},{"location":"hhp/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#_1","text":"机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 以操作系统为例，应用最为广泛的ROS系统在不断迭代，不过在智能时代洪流的冲击下，还是涌现出一些问题。","text_tokens":["主控","传感","算法","最为","ros","环境","。","驱动","信息","执行","传感器","进行","非常","不断","以","等","部分","计算","、","现出","各种","智能","机器"," ","复杂","时代","问题","大脑","非常复杂","迭代","是","系统","洪流","感器","等等","一个","各种各样","广泛","程式","一些","冲击","机器人","：","软件","动作","操作","下","的","应用","层面","为例","平台","不过","涌现","各样","感知","操作系统","规控","还是","涌现出","电机","硬件","在","，","包括","作为","数据"],"title":"智能机器人开发平台介绍","title_tokens":["开发","平台","智能","机器人","机器","介绍"]},{"location":"hhp/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#ros","text":"ROS逐渐成为标准，大量机器人应用被贡献到社区，虽然提高了代码的通用性，但却难以发挥硬件的完整性能； 大量应用聚焦在机器人运动控制与定位导航等基础功能，智能化的应用较少； 在软件资源格外丰富的社区中，还缺少系统化的内容，帮助用户快速实现相关资源的复用。 很多开发者都在魔改ROS，去适配自己的机器人，所以机器人的研发成本非常高。从机械选型、系统定制、算法开发到数据闭环，每个过程都要付出高昂的成本，在这么高昂的成本下，做机器人是非常困难的一件事情。 在算法层面，机器人算法仍处于早期阶段，很多感知算法还停留在理论阶段，无法服务与实际场景，机器学习发展迅速，不过对于很多开发者来讲，数据的采集、标注、训练都是一个庞大的工作量，部署运行不仅十分困难，还要消耗大量的算力成本。 智能机器人涉及的领域和方法较多，目前整体的学习成本偏高，想要实现智能化应用的难度就更高，问题的出现，也带来了机遇与挑战。","text_tokens":["十分","虽然","通用","实际","了","大量","等","快速","功能","自己","、","运行","每个","内容","一件","系统化","来讲","逐渐","机遇","性能","帮助","困难","但","代码","方法","被","消耗","定位导航","格外","不过","就","训练","选型","适配","挑战","成为","通用性","，","处于","偏高","工作","ros","导航","过程","基础","却","社区","与","和","定位","庞大","聚焦","高","算力","难度","高昂","智能","更","很多","问题","所以","还","领域","发挥","发展","丰富","从","是","少","付出","系统","实现","停留","机器人","也","控制","闭环","应用","成本","迅速","工作量","不仅","智能化","在","整体","资源","目前","难以","。","用户","非常","标准","开发者","改","机器"," ","部署","标注","都","无法","相关","复用","去","软件资源","一个","涉及","还要","事情","这么","出现","层面","早期","开发","十分困难","到","带来","贡献","硬件","运动","缺少","算法","要","采集","仍","理论","机械","完整","较","想要","学习","场景","阶段","定制","多","服务","软件","魔","下","的","感知","做","；","对于","中","数据","提高","研发"],"title":"ROS的一些问题","title_tokens":["一些","ros","问题","的"]},{"location":"hhp/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#_2","text":"2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。这套机器人开发平台的目的是打造软硬协同、极致优化、丰富易用的机器人开发组件与生态，由图中这几个部分组成，我们一一来看下。 平台的底层主要依托于地平线AIOT边缘AI芯片——旭日3和旭日5，内部集成了地平线最先进的伯努利2.0架构的AI 引擎，可提供 5TOPS 以上的等效算力。如此强大的算力支持，保证了智能机器人开发的基础条件。 芯片是基础建设，在此之上更重要的是一系列软件设施，正如我们电脑上的windows和linux，一套优质的操作系统，是上层应用软件开发的必要条件，TogetherROS在ROS系统的基础上，进行了大量的改良和优化，可以为开发者提供高效实用的系统环境。 在此之上，平台还会提供大量的机器人参考算法和应用功能示例，比如常用的建图、定位、导航，还有智能机器人中至关重要的智能化功能，比如一些基础算法，图像分类、图像分割、目标检测等，还有应用功能，人脸检测、人体跟踪、骨骼点检测、手势识别、语音处理等等，提供基于大量数据训练的模型，借助底层AI引擎的支持，可以快速、稳定的实现各种各样的智能应用。 同时平台还会配套一系列加速机器人开发的工具链，比如代码编写工具、系统调试工具、数据标注和训练工具等。 古月居和地平线也会共同打造机器人开发者社区，持续分享技术内容，沉淀更多开发者的智慧，更多机器人产业中的合作伙伴也会陆续加入，共同打造最为丰富的机器人开发者套件，建设智能机器人开发的生态圈。 在这个机器人开发平台之中，最为重要的就是TogetherROS系统了，起到了承上启下、连接各项功能的作用，我们将通过一系列课程为大家深入浅出的介绍。","text_tokens":["工具","环境","了","进行","aiot","地平线","大量","等","快速","功能","加速","、","内容","分类","语音","集成","就是","由图","以上","帮助","2022","应用软件","同时","等效","代码","各项","边缘","合作","一代","承上启下","手势","基于","系列","目的","正如","检测","平台","ai","训练","持续","极致","一套","为","强大","将","支持","，","建设","通过","这","优质","伯努利","3","链","ros","来看","导航","一系列","内部","一一","给","软硬","基础","部分","与","和","定位","至关重要","社区","比如","实用","处理","深入","算力","更","于","智能","起到","旭日","之上","生态圈","丰富","是","系统","重要","一些","配套","可","还有","实现","建图","机器人","也","骨骼","应用","共同","5tops","地平","各样","引擎","之中","智能化","在","至关","6","底层","稳定","课程","电脑","智慧","古月","这套","togetherros","这个","最为","。","协同","居","改良","最","常用","分割","芯片","识别","开发者","行业","条件","各种","年","组成","机器"," ","标注","深入浅出","参考","必要条件","加入","图像","陆续","提供","等等","连接","5","大家","主要","保证","推出","层面","上","开发","还会","沉淀","合作伙伴","操作系统","带来","目标","设施","优化","月","先进","人体","算法","可以","会","组件","跟踪","如此","人脸","作用","linux","必要","模型","编写","我们","分享","产业","套件","技术","—","调试","上层","点","一系","生态","各种各样","多","全新","软件","伙伴","正式","操作","下","的","介绍","几个","借助","2.0","此","windows","示例","易用","中","高效","数据","打造","依托","架构"],"title":"地平线机器人开发平台","title_tokens":["开发","平台","地平","机器人","机器","地平线"]},{"location":"hhp/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#togetherros","text":"在ROS系统庞大社区资源的基础上，结合智能机器人的发展和产业需求，TogetherROS应运而生。 TogetherROS有三个核心特点： 开源兼容，秉承开源精神的力量 TogetherROS和ROS系统一样，也是一套完全开源的系统，所有开发者都可以继续二次开发，接口方面和ROS2完全兼容，ROS2原有的功能也都可以继续复用，已有的机器人代码可以十分便利的迁移过来。 极致性能优化 相比ROS的通用化，TogetherROS更多考虑的是如何充分挖掘底层硬件的性能，比如提高数据传输的效率、增强人工智能处理的能力，在后续的使用案例中，大家可以充分感受到这一点。 丰富易用的软硬件组件 比如各种各样的传感器和开发套件，再比如算法模块、感知应用、机器人功能，还有提高开发效率的各种编程、部署工具。","text_tokens":["十分","通用","工具","接口","核心","功能","、","兼容","数据传输","人工","过来","性能","代码","通用化","：","案例","社区资源","应运","极致","一套","软硬件","，","开源","这","二次","ros","感受","软硬","基础","力量","完全","挖掘","社区","和","二次开发","庞大","比如","结合","原有","便利","处理","更","智能","发展","丰富","是","系统","三个","还有","机器人","也","考虑","应用","ros2","各样","在","编程","底层","方面","特点","传输","togetherros","资源","。","传感器","效率","开发者","各种","精神","机器"," ","已有","使用","部署","都","继续","复用","人工智能","大家","模块","需求","增强","上","一样","开发","到","秉承","硬件","如何","优化","一点","传感","算法","可以","组件","相比","所有","产业","应运而生","套件","迁移","充分","感器","有","后续","多","各种各样","再","的","感知","据传","易用","中","数据","提高","能力"],"title":"TogetherROS的特点","title_tokens":["togetherros","的","特点"]},{"location":"hhp/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#togetherros_1","text":"具体展开来看，TogetherROS的系统框架如图所示，其中深蓝色部分为地平线优化、新增的模块，其他是目前复用ROS2中的模块： 在系统通信的中间件部分，保留了ROS2中原本针对不同DDS的通信框架，与ROS2 foxy版本的接口完全兼容，方便复用ROS丰富工具包进行原型验证，在此之上增加了“zero-copy” 零拷贝 的通信机制，降低大数据传输时延和系统资源消耗。 在组件功能部分，TogetherROS提供“hobot CV” 视觉加速库 ，软硬件协同，可以提升CV算子性能、降低系统资源消耗；针对AI模型的推理，封装了“hobot_dnn” 功能包，可以调用底层芯片的AI引擎，简化板端AI开发与部署，释放BPU的算力。可以支持丰富的机器人传感器型号，比如相机、雷达、IMU、GPS等，节省驱动开发的时间，可以聚焦在机器人应用开发上。 除此之外，TogetherROS还会提供丰富的 软件调试和性能调优工具 ，方便用户定位问题和优化系统性能，在具体的行业应用中，还支持最小化和模块化的剪裁，利于部署在资源受限的嵌入式产品中。 总之，TogetherROS出于ROS，又不止于ROS，ROS原有的功能依然继承，重点是借助硬件能力，充分优化系统的性能，提高机器人开发的效率。","text_tokens":["“","copy","工具","蓝色","了","zero","进行","降低","嵌入","型号","原本","地平线","接口","等","出于","大","功能","加速","、","兼容","数据传输","其他","增加","中间","性能","剪裁","具体","：","”","所示","深蓝","消耗","dnn","定位问题","ai","时延","调优","为","软硬件","支持","gps","，","算子","ros","来看","工具包","最小","软硬","中间件","提升","完全","部分","与","和","hobot","定位","时间","比如","模块化","受限","原有","聚焦","算力","于","原型","问题","之上","还","丰富","是","系统","如图所示","方便","机器人","针对","重点","dds","板端","应用","ros2","地平","引擎","又","在","底层","传输","togetherros","资源","目前","。","协同","传感器","用户","不同","框架","新增","cv","芯片","效率","行业"," ","部署","释放","机器","之外","复用","视觉","提供","系统资源","模块","-","推理","封装","总之","通信","上","还会","开发","foxy","零","硬件","验证","嵌入式","简化","优化","最小化","不止","_","传感","调用","产品","驱动","利于","版本","可以","组件","相机","拷贝","包","深蓝色","雷达","继承","模型","展开","保留","充分","调试","库","除此之外","依然","感器","bpu","除此","软件","的","借助","此","机制","；","据传","imu","中","节省","其中","数据","提高","能力"],"title":"TogetherROS系统框架","title_tokens":["togetherros","系统","框架"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/","text":"TogetherROS与ROS性能对比 ROS2 vs ROS1 先来看下两个大版本ROS的系统架构。 在这张图中，左侧是ROS1，右侧是ROS2，两者最明显的变化，就是Master。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery——自发现机制，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的DDS系统。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于共享内存的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了，Linux、windows、MacOS、RTOS都可以。 ROS2系统架构 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个ROS Middleware，简称RMW，也就是制定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 TogetherROS vs ROS2 TogetherROS就是在这样一个ROS2架构的基础上，继续进行了优化，原本DDS通信的部分依然保留，可以适配不同厂家的DDS通信系统，在此之上，针对功能性的组件进行了众多优化和补充，在上一节中我们也给大家介绍了这套框架。 优化之后的TogetherROS系统，在数据传输和AI处理方面，到底有多少提升呢，我们来看具体的对比数据。 通信效率量化对比 先来看下操作系统至关重要的数据通信功能，我们针对ROS中最为常用的大数据传输模式——话题通信进行了测试。 在单元测试中，使用同样的算力平台，分别安装TogetherROS和ROS2系统，然后在其中运行一个话题通信的发布者与订阅者，实现不同数据量的传输。经过数据统计，我们可以看到，在数据通信延时方面，随着数据量的增加，ROS2系统在通信延时、发送端和接收端的CPU占用率上，都会程线性增加，可以预想，在数据量较大的情况下，系统的通信负荷会非常严重。 而在TogetherROS系统中，由于使用了零拷贝的传输机制，传输数据量的增加，并不会导致延时和CPU占用率的增加，极大程度节省了系统资源。 在场景测试中，我们尽量模拟真实机器人的应用，使用TogetherROS和ROS2系统连接了多个相机、雷达和里程计等传感器，作为大量数据的输入来源，继续进行了测试，结果和之前的单元测试类似，ROS2系统此时的CPU占用率已经超过90%，想要运行数据传输之外的应用功能，几乎是不可能的，通信延时也达到了15ms以上，这在某些实时性要求比较高的应用中，是不可接受的。 而在TogetherROS系统中，CPU占用和通信延时也微乎其微，更多系统资源都可以让给应用处理。 CV图像处理量化对比 再来看下智能机器人中视觉感知层面的处理，TogetherROS系统集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 模型推理 在AI处理方面，ROS2原生系统中并没有太多支持，只能依赖社区中的资源，很难充分发挥硬件的算力。 对此，TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 传感器驱动管理 在传感器层面，是大量数据传输的来源，TogetherROS也重点进行了优化，针对常用的传感器类型，系统中内置参数配置、系统调用和内存管理机制，同样是在芯片的硬件层面进行了加速和隔离，保障数据流的稳定生成。 机器人开发工具 机器人开发过程中的性能优化和调试，也是非常繁杂的工作，TogetherROS系统自带火焰图等工具，可以实现系统层面的调优和测试，便于开发者挖掘系统性能。 以上这些都是TogetherROS在ROS系统之上的优化和补充，未来更多特性也会不断迭代推出，让智能机器人的开发更加简单。","text_tokens":["只能","进行","设计","降低","等","地平线","物","加速","每个","中间","举","开发成本","经过","来讲","以上","常","补充","发布","具体","应该","基于","消耗","滤波","传输数据","dnn","建立","ai","平台","定义","15ms","调优","将","简称","节点","2","算子","选择","发布者","收","然后","很快","厂商","延迟","两个","给","挖掘","hobot","明显","处理","高","统计","交付","选项","更","类型","很多","问题","所以","是","尽量","风格","发","实现","基本","国际标准","它","内","地平","另","引擎","编程","作为","请","充足","这些","这个","协同","简单明了","框架","一节","同样","程序","cv","调教","标准","效率","发送","参数","各种","opensplice"," ","部署","啦","复用","视觉","这里","系统资源","客户","火焰","推理","需求","上","只有","操作系统","不用","？","数据通","移植","优化","调用","一行","共享","相比","走","按照","linux","只要","名字","所有","量化","依赖","调试","完善","再","对此","软件","么","有且","太","vs","windows","做","符合","中","数据","协议","指挥","结果","倍","工具","了","成","交道","让","大","功能","输入","运行","一团","人工","性能","此时","不可","但","应用层","图","得","用率","就","用","进程","而且","找到","自带","内存","macos","ros","数据流","工作","商业","联网","通信接口","例子","提升","从而","至关重要","和","时间","不太","算力","一种","于","复杂","真实","之上","高斯","发挥","比较","适用","广泛","帧","还有","机器人","花费","程度","ceo","ros2","共享内存","甚至","隔离","在","至关","间层","不是","较大","某","话题","时","国际","接受","传感器","用户","不同","middleware","满足","芯片","开发者","rmw","而已","使用","多少","提供","连接","混合","分发","主要","通信","层面","带来","如果","诟病","到底","打交道","安装","传感","要","属性","左侧","当然","会","拷贝","雷达","解决","系统集成","需要","我们","而","配置","来源","充分","要求","省略","感器","有","开发工具","多","这样","介绍","时候","一家","层","机制","对于","不会","节省","便于","其中","提高","广泛应用","切换","不断","校正","原本","接口","大量","众多","发成","兼容","其他","管理","好","就是","该","一团乱麻","迭代","方法","彼此","频繁","不过","训练","适配","导致","一套","做到","通信协议","角色","并","通过","没有","乱麻","里","自","会成","呢","过程","中间层","信息","每","社区","延时","肯定","比如","率","会程","为了","超过","丰富","系统","重要","接入","负荷","也","旋转","应用","自家","多个","模式","更换","生成","变得","底层","数据量","方面","传输","这套","功能性","资源","情况","。","例如","非常","制定","5g","实时","最","者","熟悉","占用","随着","改","把","接收端","机器","接收","都","软件系统","对比","人工智能","一个","大家","某些","只不过","一样","开发","产品开发","最大","公司","到","量","除了","不爽","master","能够","产品","单元","版本","组件","重新","听说","实时性","理器","简单","—","另外","哪些","单元测试","减少","场景","写","模拟","管理机制","里程","可能","下","的","客户端","先","借助","此","据传","线性","很难","架构","交给","可选项","实际","严重","可选","微乎其微","一团乱","更加","、","数据传输","/","增加","集成","之后","完","加密","过来","discovery","里程计","代码","畸变","已经","fastrtps","未来","厂家","为","其实","软硬件","支持","变化","，","极大","开源","预想","这","3","来看","类似","软硬","基础","下边","丢","与","部分","右侧","张图","智能","听","内置","看到","由于","库会","针对","分别","重点","突然","dds","成本","rtos","稳定","特性","端","togetherros","最为","测试","轻松","ros1","唯一","几乎","常用","图像处理","之外","继续","无法","图像","cpu","opencv","繁杂","封装","原生","两者","推出","消失","零","目标","硬件","缩放","tcp","如何","数据通信","充分发挥","驱动","保障","可以","占用率","相机","模型","达到","保留","管理器","想要","库","依然","udp","90%","让给","bpu","订阅","操作","发现","不","多倍","感知","之前"],"title":"性能对比","title_tokens":["性能","对比"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#togetherrosros","text":"","text_tokens":[],"title":"TogetherROS与ROS性能对比","title_tokens":["togetherros","ros","与","对比","性能"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#ros2-vs-ros1","text":"先来看下两个大版本ROS的系统架构。 在这张图中，左侧是ROS1，右侧是ROS2，两者最明显的变化，就是Master。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery——自发现机制，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的DDS系统。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于共享内存的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了，Linux、windows、MacOS、RTOS都可以。","text_tokens":["了","进行","成","接口","交道","大量","让","可选","大","一团乱","更加","、","管理","一团","中间","好","就是","一团乱麻","discovery","但","应用层","发布","方法","彼此","得","基于","建立","频繁","不过","就","进程","一套","将","通信协议","角色","变化","，","找到","节点","通过","内存","这","乱麻","里","ros","会成","来看","自","macos","中间层","通信接口","信息","类似","两个","下边","从而","至关重要","和","肯定","比如","明显","不太","右侧","张图","选项","听","很多","复杂","是","系统","重要","库会","也","它","突然","dds","应用","ceo","rtos","ros2","内","共享内存","更换","在","至关","间层","变得","底层","请","稳定","这些","这个","。","简单明了","ros1","最","程序","标准","把"," ","接收","而已","都","图像","提供","连接","一个","客户","封装","主要","只不过","两者","通信","一样","上","开发","消失","只有","公司","操作系统","tcp","如果","打交道","安装","master","调用","驱动","左侧","版本","可以","会","共享","走","雷达","linux","名字","需要","所有","我们","理器","简单","管理器","依赖","而","—","另外","哪些","udp","写","完善","再","有且","时候","下","的","客户端","操作","发现","先","不","windows","层","机制","中","数据","协议","架构","指挥","可选项"],"title":"ROS2 vs ROS1","title_tokens":["vs"," ","ros1","ros2"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#ros2","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个ROS Middleware，简称RMW，也就是制定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。","text_tokens":["广泛应用","了","切换","设计","等","接口","物","功能","、","发成","每个","/","其他","好","就是","完","来讲","加密","举","开发成本","该","过来","性能","常","代码","应该","得","基于","频繁","不过","fastrtps","就","定义","用","适配","厂家","为","其实","通信协议","简称","变化","，","并","开源","这","ros","选择","商业","联网","收","然后","类似","厂商","延迟","给","例子","每","丢","社区","肯定","比如","率","交付","一种","为了","于","更","问题","所以","丰富","是","适用","系统","广泛","发","实现","还有","国际标准","接入","基本","也","dds","应用","成本","ros2","自家","多个","另","更换","在","不是","底层","稳定","这些","某","这个","时","。","国际","轻松","用户","不同","制定","ros1","5g","middleware","唯一","最","程序","满足","标准","熟悉","rmw","各种","把","改","opensplice"," ","部署","之外","软件系统","都","无法","复用","提供","这里","一个","通信","需求","一样","层面","开发","产品开发","最大","带来","目标","？","不用","tcp","如果","诟病","移植","提高","如何","除了","不爽","安装","master","能够","产品","要","一行","属性","当然","可以","版本","相比","按照","重新","解决","只要","听说","我们","简单","配置","想要","udp","场景","减少","省略","写","多","再","软件","么","这样","的","先","不","一家","做","符合","对于","中","数据","协议","交给"],"title":"ROS2系统架构","title_tokens":["架构","系统","ros2"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#togetherros-vs-ros2","text":"TogetherROS就是在这样一个ROS2架构的基础上，继续进行了优化，原本DDS通信的部分依然保留，可以适配不同厂家的DDS通信系统，在此之上，针对功能性的组件进行了众多优化和补充，在上一节中我们也给大家介绍了这套框架。 优化之后的TogetherROS系统，在数据传输和AI处理方面，到底有多少提升呢，我们来看具体的对比数据。","text_tokens":["这套","togetherros","功能性","呢","来看","。","了","进行","不同","可以","框架","给","基础","原本","组件","一节","提升","部分","和","功能","众多","处理","保留","我们","数据传输"," ","就是","之后","多少","之上","继续","依然","对比","系统","一个","有","补充","具体","大家","针对","也","这样","架构","介绍","通信","dds","的","上","ros2","ai","适配","此","厂家","在","据传","，","中","方面","数据","到底","优化","传输"],"title":"TogetherROS vs ROS2","title_tokens":["togetherros"," ","vs","ros2"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_1","text":"先来看下操作系统至关重要的数据通信功能，我们针对ROS中最为常用的大数据传输模式——话题通信进行了测试。 在单元测试中，使用同样的算力平台，分别安装TogetherROS和ROS2系统，然后在其中运行一个话题通信的发布者与订阅者，实现不同数据量的传输。经过数据统计，我们可以看到，在数据通信延时方面，随着数据量的增加，ROS2系统在通信延时、发送端和接收端的CPU占用率上，都会程线性增加，可以预想，在数据量较大的情况下，系统的通信负荷会非常严重。 而在TogetherROS系统中，由于使用了零拷贝的传输机制，传输数据量的增加，并不会导致延时和CPU占用率的增加，极大程度节省了系统资源。 在场景测试中，我们尽量模拟真实机器人的应用，使用TogetherROS和ROS2系统连接了多个相机、雷达和里程计等传感器，作为大量数据的输入来源，继续进行了测试，结果和之前的单元测试类似，ROS2系统此时的CPU占用率已经超过90%，想要运行数据传输之外的应用功能，几乎是不可能的，通信延时也达到了15ms以上，这在某些实时性要求比较高的应用中，是不可接受的。 而在TogetherROS系统中，CPU占用和通信延时也微乎其微，更多系统资源都可以让给应用处理。","text_tokens":["结果","了","进行","严重","等","大量","微乎其微","功能","大","输入","、","运行","数据传输","增加","经过","以上","里程计","此时","不可","发布","传输数据","用率","已经","平台","导致","15ms","，","极大","并","预想","这","ros","来看","发布者","然后","类似","至关重要","和","与","延时","会程","处理","高","统计","算力","更","真实","超过","看到","比较","是","由于","系统","尽量","重要","实现","负荷","机器人","针对","也","分别","程度","应用","ros2","模式","多个","至关","在","较大","作为","数据量","方面","端","传输","togetherros","话题","资源","最为","情况","测试","。","接受","传感器","非常","不同","同样","实时","几乎","常用","者","占用","随着","发送","接收端"," ","使用","接收","机器","之外","都","继续","cpu","系统资源","一个","连接","某些","通信","上","操作系统","零","数据通","量","数据通信","安装","传感","单元","可以","会","占用率","相机","拷贝","雷达","达到","我们","实时性","而","来源","想要","—","要求","单元测试","场景","90%","让给","模拟","感器","多","订阅","里程","可能","操作","下","的","先","不","不会","机制","据传","之前","线性","中","节省","其中","数据"],"title":"通信效率量化对比","title_tokens":["通信","效率","量化","对比"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#cv","text":"再来看下智能机器人中视觉感知层面的处理，TogetherROS系统集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。","text_tokens":["倍","了","进行","降低","校正","地平线","等","接口","加速","、","运行","兼容","集成","性能","方法","具体","畸变","消耗","滤波","做到","软硬件","而且","，","2","通过","算子","3","来看","软硬","提升","与","hobot","率","处理","更","智能","高斯","系统","风格","帧","实现","机器人","分别","旋转","应用","甚至","地平","引擎","在","编程","底层","togetherros","资源","。","协同","测试","例如","cv","常用","芯片","效率","机器"," ","对比","视觉","图像","系统资源","opencv","混合","上","层面","开发","到","缩放","硬件","可以","系统集成","我们","库","再","软件","下","的","多倍","感知","中","便于"],"title":"CV图像处理量化对比","title_tokens":["图像","处理","量化","图像处理","对比","cv"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_2","text":"在AI处理方面，ROS2原生系统中并没有太多支持，只能依赖社区中的资源，很难充分发挥硬件的算力。 对此，TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。","text_tokens":["这套","togetherros","充分发挥","资源","只能","实际","。","了","保障","很快","可以","社区","和","hobot","时间","众多","系统集成","芯片","处理","模型","开发者","调教","数据","算力","智能","依赖","集成","人工"," ","使用","很多","部署","充分","啦","库","发挥","人工智能","提供","系统","bpu","多","分发","对此","推理","原生","dnn","花费","基于","的","应用","上","太","ai","ros2","借助","开发","就","训练","引擎","支持","在","硬件","不用","，","底层","中","并","方面","没有","很难","开源","充足"],"title":"模型推理","title_tokens":["推理","模型"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_3","text":"在传感器层面，是大量数据传输的来源，TogetherROS也重点进行了优化，针对常用的传感器类型，系统中内置参数配置、系统调用和内存管理机制，同样是在芯片的硬件层面进行了加速和隔离，保障数据流的稳定生成。","text_tokens":["togetherros","传感","数据流","调用","。","了","保障","传感器","进行","大量","同样","和","常用","加速","芯片","、","数据传输","参数","管理","类型","来源","内置","配置","是","系统","感器","针对","也","管理机制","重点","的","层面","隔离","机制","在","据传","硬件","，","生成","中","内存","稳定","数据","优化","传输"],"title":"传感器驱动管理","title_tokens":["传感","驱动","感器","传感器","管理"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_4","text":"机器人开发过程中的性能优化和调试，也是非常繁杂的工作，TogetherROS系统自带火焰图等工具，可以实现系统层面的调优和测试，便于开发者挖掘系统性能。 以上这些都是TogetherROS在ROS系统之上的优化和补充，未来更多特性也会不断迭代推出，让智能机器人的开发更加简单。","text_tokens":["togetherros","工作","ros","工具","过程","测试","。","不断","非常","可以","会","等","挖掘","和","让","更加","开发者","更","智能","简单","机器"," ","以上","都","调试","之上","性能","迭代","是","系统","多","繁杂","实现","补充","机器人","火焰","图","也","的","推出","层面","开发","未来","调优","在","，","自带","中","便于","这些","特性","优化"],"title":"机器人开发工具","title_tokens":["开发","工具","开发工具","机器人","机器"]},{"location":"hhp/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/","text":"TogetherROS应用场景 相比手机、电脑等通用平台，机器人的类型可是千变万化，构建机器人操作系统的难度就远比手机和电脑的操作系统要复杂很多。机器人的主流应用大致可以分为 服务机器人、工业机器人、特种机器人 三个方向，无论是在哪一方向，都会面临很多问题。比如传感器、执行器等器件选型复杂，不同场景下需要的性能和参数都有所不同，这就要求操作系统得兼容尽量多的器件。 不同场景下的计算平台算力和资源差异很大，一般都需要进行定制化的裁剪和优化，这就得有一系列工具便于系统的定制和裁剪。每个场景中的应用功能变化也很大，各种算法的集成和开发要尽量简单，算法基于的数据也在持续迭代，需要一套工具链来提供迭代和升级。 针对各种各样的需求变化，TogetherROS系统都提供了支持。 服务机器人 在服务机器人领域，场景和功能尤其复杂，有家里的扫地机器人，有餐厅里的送餐机器人，有咖啡店里的双臂机器人，还有物流送货的飞行机器人，虽然每一个机器人平台的构型不同，但都需要动态处理多种多样的环境变化，这就需要TogetherROS系统基于大量数据的AI处理和丰富的组件功能支持，快速推动各种功能的落地。 工业机器人 在工业机器人领域，目前的机器人主要以工业机械臂和物流移动机器人形态为主，场景相比服务机器人要标准很多，核心目的是要提高生产效率，这就要求机器人可以长期稳定的运行，同时实时处理各项运动功能，TogetherROS系统可裁剪和性能稳定等特点，都可以符合要求。 特种机器人 而在特种机器人的应用领域，结合了服务和工业场景中的不少特点，机器人形态多变，得动态处理各种复杂场景里的事件，例如火灾、地震、管道等场景，更是会发生很多不可预料的情况，TogetherROS系统中的AI处理可以较好的保障不同环境中的感知效果，同时端云联动，可以实现大量数据的训练和部署，不断提高对复杂环境的处理能力。 可见，TogetherROS系统充分考虑了众多应用场景的需求，不仅可以满足智能机器人开发过程中的每一个环节，也考虑到了机器人未来在产业中的应用效果。","text_tokens":["地震","通用","工具","虽然","环境","了","进行","不断","以","等","大量","快速","核心","功能","众多","、","运行","兼容","每个","餐厅","化","集成","多种","好","落地","多种多样","性能","迭代","多样","同时","生产","不可","但","咖啡店","为主","裁剪","各项","得","基于","动态","系列","分为","目的","效果","平台","就","ai","训练","一般","选型","未来","器件","持续","一套","动机","支持","变化","，","有所不同","比","链来","这","里","长期","过程","一系列","方向","有所","家里","每","和","计算","升级","推动","比如","结合","处理","算力","难度","执行器","智能","类型","很多","千变万化","复杂","问题","领域","对","丰富","是","系统","尽量","联动","三个","可","构建","还有","送货","不少","机器人","远","针对","也","咖啡","实现","考虑","应用","火灾","各样","预料","不仅","特种","扫地","在","稳定","充分考虑","电脑","特点","可是","togetherros","资源","飞行","情况","目前","。","执行","例如","传感器","不同","端云","物流","移动","实时","满足","尤其","标准","效率","参数","各种"," ","机器","部署","都","提供","一个","发生","主流","主要","哪","需求","差异","符合要求","开发","臂","无论","操作系统","到","双臂","运动","构型","手机","面临","更是","优化","传感","算法","要","管道","保障","可以","会","组件","相比","机械","可见","无论是","送餐","形态","需要","产业","简单","大致","而","事件","较","实时处理","充分","要求","场景","一系","移动机器人","多变","感器","定制","有","各种各样","多","服务","工业","操作","下","的","环节","一","感知","应用领域","符合","很大","中","便于","数据","提高","能力"],"title":"应用场景","title_tokens":["场景","应用"]},{"location":"hhp/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#togetherros","text":"相比手机、电脑等通用平台，机器人的类型可是千变万化，构建机器人操作系统的难度就远比手机和电脑的操作系统要复杂很多。机器人的主流应用大致可以分为 服务机器人、工业机器人、特种机器人 三个方向，无论是在哪一方向，都会面临很多问题。比如传感器、执行器等器件选型复杂，不同场景下需要的性能和参数都有所不同，这就要求操作系统得兼容尽量多的器件。 不同场景下的计算平台算力和资源差异很大，一般都需要进行定制化的裁剪和优化，这就得有一系列工具便于系统的定制和裁剪。每个场景中的应用功能变化也很大，各种算法的集成和开发要尽量简单，算法基于的数据也在持续迭代，需要一套工具链来提供迭代和升级。 针对各种各样的需求变化，TogetherROS系统都提供了支持。","text_tokens":["通用","工具","了","进行","等","功能","、","兼容","每个","化","集成","性能","迭代","裁剪","得","基于","系列","分为","平台","就","一般","选型","器件","持续","一套","支持","变化","，","有所不同","比","链来","这","一系列","方向","有所","和","计算","升级","比如","算力","难度","执行器","类型","很多","千变万化","复杂","问题","系统","尽量","三个","构建","机器人","远","针对","也","应用","各样","特种","在","电脑","可是","togetherros","资源","。","执行","传感器","不同","参数","各种","机器"," ","都","提供","主流","哪","需求","差异","开发","无论","操作系统","手机","面临","优化","传感","算法","要","可以","会","相比","无论是","需要","简单","大致","要求","场景","一系","感器","定制","有","各种各样","多","服务","工业","操作","下","的","一","很大","中","便于","数据"],"title":"TogetherROS应用场景","title_tokens":["togetherros","场景","应用"]},{"location":"hhp/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_1","text":"在服务机器人领域，场景和功能尤其复杂，有家里的扫地机器人，有餐厅里的送餐机器人，有咖啡店里的双臂机器人，还有物流送货的飞行机器人，虽然每一个机器人平台的构型不同，但都需要动态处理多种多样的环境变化，这就需要TogetherROS系统基于大量数据的AI处理和丰富的组件功能支持，快速推动各种功能的落地。","text_tokens":["togetherros","里","飞行","虽然","环境","。","不同","家里","物流","每","大量","组件","快速","和","送餐","尤其","功能","推动","处理","需要","餐厅","各种","多种","机器","落地","复杂","多种多样","都","领域","多样","丰富","场景","但","系统","咖啡店","有","一个","还有","送货","机器人","服务","咖啡","基于","动态","的","平台","就","ai","扫地","支持","在","双臂","变化","，","构型","数据","这"],"title":"服务机器人","title_tokens":["机器人","服务","机器"]},{"location":"hhp/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_2","text":"在工业机器人领域，目前的机器人主要以工业机械臂和物流移动机器人形态为主，场景相比服务机器人要标准很多，核心目的是要提高生产效率，这就要求机器人可以长期稳定的运行，同时实时处理各项运动功能，TogetherROS系统可裁剪和性能稳定等特点，都可以符合要求。","text_tokens":["togetherros","长期","目前","要","。","以","可以","等","物流","相比","机械","移动","实时","和","核心","功能","标准","效率","处理","形态","运行","机器","很多","实时处理","都","领域","性能","要求","同时","是","场景","生产","移动机器人","系统","为主","各项","可","裁剪","机器人","服务","主要","工业","目的","的","符合要求","臂","就","动机","符合","在","，","运动","稳定","提高","这","特点"],"title":"工业机器人","title_tokens":["机器人","机器","工业"]},{"location":"hhp/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_3","text":"而在特种机器人的应用领域，结合了服务和工业场景中的不少特点，机器人形态多变，得动态处理各种复杂场景里的事件，例如火灾、地震、管道等场景，更是会发生很多不可预料的情况，TogetherROS系统中的AI处理可以较好的保障不同环境中的感知效果，同时端云联动，可以实现大量数据的训练和部署，不断提高对复杂环境的处理能力。 可见，TogetherROS系统充分考虑了众多应用场景的需求，不仅可以满足智能机器人开发过程中的每一个环节，也考虑到了机器人未来在产业中的应用效果。","text_tokens":["地震","环境","了","不断","等","大量","众多","、","好","同时","不可","得","动态","效果","ai","训练","未来","，","里","过程","每","和","结合","处理","智能","很多","复杂","领域","对","系统","联动","不少","实现","机器人","也","考虑","应用","火灾","预料","不仅","特种","在","充分考虑","特点","togetherros","情况","。","例如","不同","端云","满足","各种","机器","部署"," ","一个","发生","需求","开发","到","更是","管道","保障","可以","会","可见","形态","产业","而","事件","较","充分","场景","多变","服务","工业","环节","的","感知","应用领域","中","数据","提高","能力"],"title":"特种机器人","title_tokens":["机器人","机器","特种"]},{"location":"hhp/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/","text":"旭日X3派介绍 TogetherROS是一个软件层面的系统，要想使用它，当然得找一个硬件层面的计算平台，安装之后才能使用啦。 之前我们提到，TogetherROS会基于地平线的AI芯片，充分发挥硬件性能，我们如何使用这颗芯片呢？ 旭日X3派 没问题，地平线已经为我们准备好了，那就是搭载旭日X3芯片的机器人开发板——旭日X3派。 第一眼看上去，大家是否会想到树莓派呢？没错，为了适应开发者的使用习惯，兼容市面上大量已有的模块，旭日X3派的整体外观和接口形态都接近树莓派，不过面向的开发对象以及板卡的计算实力，和树莓派就完全不同了。 类似这些常用的传感器，旭日X3派统统都可以支持，未来还有更多机器人套件会出现在大家身边。 大家可以在这张表中，看到旭日X3派的硬件资源，CPU是四核A53，频率1.2Hz，在系统内还可以进行超频，BPU就是硬件级的AI引擎，这是旭日X3派相比市面上其他开发板，最大的不同，也是核心性能的主要来源，类似于业界常听到的NPU，这里使用的是地平线机器人独有的伯努利2.0架构，可以提供5Tops的等效算力支持。 内存方面，大家可以选择2GB或者4GB的版本，存储使用的是SD卡，我们可以自行选择，只要大于8GB就可以啦。 在多媒体方面，旭日X3派支持硬件级别的H265和H264编解码，常用的图像和视频都可以流畅播放。 接口方面，尽量可以满足我们常用外接设备和开发的需求，这里是一个CSI的相机接口，板载USB有3个，包含1个USB3.0和2个USB2.0，这里是一个板载的调试串口，我们可以通过它获取系统层面的很多调试信息，也可以与板卡进行通信。 板卡上也搭载了有线网络和无线网络，这个有线网口我们可以直接用网线连接到电脑，就可以在电脑上远程登录和板卡通信了，或者连接到路由器，让板卡直接上网，无线网络和蓝牙是一个二合一的模块，我们也可以直接通过wiki，让板卡连接到某个网络中。 显示接口主要是这里的HDMI，如果我们先要看到系统界面，或者后续很多视觉例程的识别效果，都可以通过HDMI外接一个显示器进行显示。 最后还有至关重要的扩展接口，有40个引脚，和树莓派的接口定义一致，什么GPIO、串口、I2C、SPI等等，一应俱全。 这块板卡我们在使用的时候，推荐使用5V3A的电源，通过TypeC线连接到这里供电，官方提供的系统目前是Ubuntu20.04，使用起来和原生系统没有太大差别。 总体来讲， 旭日X3派是一款面向生态开发者的嵌入式AI开发板，接口兼容树莓派，具有5Tops的端侧推理算力，以及4核ARM A53的处理能力。 面对个人开发者，旭日X3派可以让每一位开发者拥有自己的AI开发套件，不再受开发板高昂的价格限制，面对高等院校，使用旭日X3派开发套件探索AI和机器人应用是学习的开始，有助于学生快速入门人工智能与机器人开发，面对产业，旭日X3派以及地平线的AI工具链，可以帮助客户将产品尽快推向市场，快速落地智能机器人方向的解决方案。 旭日X3M芯片 在旭日X3派上，最为核心的当然就是这颗AI芯片了，这是关于芯片的具体信息，供大家参考。 值得一提的是，随着芯片的技术迭代，2023年，地平线将推出X5芯片，比较大的变化是CPU升级到了8核A55，主频提升到1.8GHz，BPU的算力也将达到8Tops，还加入了GPU，以及更多可扩展的接口。 在使用旭日X3派的过程中，大家也可以期待旭日X5派了。 旭日X3派接口 好啦，还是回到旭日X3派的开发接口上来，我们再做一个整理，这些就是我们使用开发板进行智能机器人开发过程中，最为常用的接口啦。 大家目前在树莓派或者其他开发板上使用的绝大部分模块，基本都可以在旭日X3派上复用，同时还有更多智能化的玩法等着大家。 关于40Pin扩展接口的序号排布，大家可以看这里，引脚的序号是从靠近HDMI板卡内测的开始算起，是引脚1，然后依次蛇形计数，分别是1、2、3、4、5，一直到这里是39和40。 上图是40PIN扩展接口的详细定义，有3.3V和5V的电源信号，有I2C、I2S、SPI、UART等通信接口，还有很多可动态配置的GPIO信号，基本可以满足各种各样的机器人开发啦。 好啦，关于旭日X3派这块开发板我们已经了解清楚了，具体该如何使用呢，我们后续操作起来。","text_tokens":["想","是否","进行","嵌入","地平线","自行","等","快速","推向市场","入门","a53","大于","存储","落地","来讲","接近","无线","具体","基于","平台","ai","定义","将","一应","2","选择","然后","第一","处理","1.2","更","很多","问题","旭日","4","是","大部","是从","尽量","基本","市面","高等院校","它","开始","内","8","地平","引擎","路由器","拥有","接设备","x5","这些","这个","对象","ubuntu20.04","具有","外","各种"," ","获取","扩展","啦","参考","复用","听到","有线网","视觉","加入","排布","这里","等等","搭载","市面上","客户","推理","个","需求","上","有助于","？","最后","着","期待","那","8gb","5v","面上","1.8","相比","sd","只要","套件","2gb","统统","技术","调试","学习","生态","hdmi","3.3","高等","8tops","再","软件","以及","提到","太","做","中","看","工具","了","让","核心","大","自己","开发板","外观","人工","供电","性能","等效","得","上来","就","用","面向","卡","无线网络","还是","39","gpu","差别","内存","常听到","通信接口","想到","提升","usb2.0","至关重要","和","某个","升级","算力","派","于","无线网","二合一","还","发挥","比较","可","还有","机器人","媒体","才能","在","至关","不再","整体","目前","传感器","网线","不同","40pin","满足","有线","芯片","开发者","序号","详细","年","使用","2023","提供","连接","分发","wiki","模块","引脚","出现","主要","俱全","通信","层面","如果","调试信息","安装","传感","要","当然","会","x3m","csi","看上去","解决","端侧","形态","我们","配置","来源","上去","充分","播放","ghz","助于","感器","有","各种各样","多","显示器","介绍","i2c","时候","5v3a","核","找","硬件资源","一位","能力","面对","大量","接口","兼容","其他","一直","好","就是","h264","该","帮助","解决方案","迭代","同时","有助","多媒体","这块","这颗","动态","了解","不过","超频","通过","没有","这是","链","伯努利","第一眼","呢","限制","过程","信息","40","二合","方向","完全","每","计算","板载","树莓","为了","高昂","系统","重要","回到","也","应用","5tops","板卡","界面","智能化","方面","电脑","整理","资源","。","上网","绝大部分","一款","一应俱全","推荐","随着","主频","机器","已有","usb3.0","都","人工智能","一个","typec","5","大家","值得","级","开发","方案","i2s","最大","x3","到","spi","gpio","身边","产品","版本","产业","—","蓝牙","独有","市场","起来","的","先","编解码","2.0","解码","电源","架构","线网","直接","没错","算","准备","、","计数","接口定义","之后","习惯","供","官方","口","起","信号","适应","流畅","效果","已经","一眼","arm","未来","4gb","价格","为","h265","支持","变化","，","串口","玩法","这","3","远程","频率","路由","清楚","类似","包含","部分","与","靠近","设备","npu","业界","智能","学生","看到","或者","受","关于","分别","线","依次","各样","探索","没","个人","合一","togetherros","上图","最为","尽快","显示","网络","实力","常用","识别","绝大","1","例程","外接","图像","cpu","看上","原生","一致","推出","张表中","硬件","视频","a55","hz","嵌入式","如何","充分发挥","总体","大部分","可以","相机","usb","达到","什么","推向","院校","v","bpu","后续","操作","蛇形","登录","uart","四核","级别","内测","之前","值得一提的是"],"title":"旭日X3派介绍","title_tokens":["旭日","x3","派","介绍"]},{"location":"hhp/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3","text":"TogetherROS是一个软件层面的系统，要想使用它，当然得找一个硬件层面的计算平台，安装之后才能使用啦。 之前我们提到，TogetherROS会基于地平线的AI芯片，充分发挥硬件性能，我们如何使用这颗芯片呢？","text_tokens":["togetherros","充分发挥","呢","想","要","。","当然","会","地平线","计算","芯片","我们","之后","使用"," ","充分","啦","性能","发挥","是","系统","一个","这颗","分发","软件","得","基于","它","的","层面","提到","平台","ai","地平","才能","硬件","？","，","之前","找","如何","安装"],"title":"旭日X3派介绍","title_tokens":["旭日","x3","派","介绍"]},{"location":"hhp/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3_1","text":"没问题，地平线已经为我们准备好了，那就是搭载旭日X3芯片的机器人开发板——旭日X3派。 第一眼看上去，大家是否会想到树莓派呢？没错，为了适应开发者的使用习惯，兼容市面上大量已有的模块，旭日X3派的整体外观和接口形态都接近树莓派，不过面向的开发对象以及板卡的计算实力，和树莓派就完全不同了。 类似这些常用的传感器，旭日X3派统统都可以支持，未来还有更多机器人套件会出现在大家身边。 大家可以在这张表中，看到旭日X3派的硬件资源，CPU是四核A53，频率1.2Hz，在系统内还可以进行超频，BPU就是硬件级的AI引擎，这是旭日X3派相比市面上其他开发板，最大的不同，也是核心性能的主要来源，类似于业界常听到的NPU，这里使用的是地平线机器人独有的伯努利2.0架构，可以提供5Tops的等效算力支持。 内存方面，大家可以选择2GB或者4GB的版本，存储使用的是SD卡，我们可以自行选择，只要大于8GB就可以啦。 在多媒体方面，旭日X3派支持硬件级别的H265和H264编解码，常用的图像和视频都可以流畅播放。 接口方面，尽量可以满足我们常用外接设备和开发的需求，这里是一个CSI的相机接口，板载USB有3个，包含1个USB3.0和2个USB2.0，这里是一个板载的调试串口，我们可以通过它获取系统层面的很多调试信息，也可以与板卡进行通信。 板卡上也搭载了有线网络和无线网络，这个有线网口我们可以直接用网线连接到电脑，就可以在电脑上远程登录和板卡通信了，或者连接到路由器，让板卡直接上网，无线网络和蓝牙是一个二合一的模块，我们也可以直接通过wiki，让板卡连接到某个网络中。 显示接口主要是这里的HDMI，如果我们先要看到系统界面，或者后续很多视觉例程的识别效果，都可以通过HDMI外接一个显示器进行显示。 最后还有至关重要的扩展接口，有40个引脚，和树莓派的接口定义一致，什么GPIO、串口、I2C、SPI等等，一应俱全。 这块板卡我们在使用的时候，推荐使用5V3A的电源，通过TypeC线连接到这里供电，官方提供的系统目前是Ubuntu20.04，使用起来和原生系统没有太大差别。 总体来讲， 旭日X3派是一款面向生态开发者的嵌入式AI开发板，接口兼容树莓派，具有5Tops的端侧推理算力，以及4核ARM A53的处理能力。 面对个人开发者，旭日X3派可以让每一位开发者拥有自己的AI开发套件，不再受开发板高昂的价格限制，面对高等院校，使用旭日X3派开发套件探索AI和机器人应用是学习的开始，有助于学生快速入门人工智能与机器人开发，面对产业，旭日X3派以及地平线的AI工具链，可以帮助客户将产品尽快推向市场，快速落地智能机器人方向的解决方案。","text_tokens":["是否","进行","嵌入","地平线","自行","快速","推向市场","入门","a53","大于","存储","落地","来讲","接近","无线","ai","定义","将","一应","2","选择","第一","处理","1.2","更","很多","问题","旭日","4","是","尽量","市面","高等院校","它","开始","内","地平","引擎","路由器","拥有","接设备","这些","这个","对象","ubuntu20.04","具有","外"," ","获取","扩展","啦","听到","有线网","视觉","这里","等等","搭载","市面上","客户","推理","个","需求","上","有助于","？","最后","那","8gb","面上","相比","sd","只要","套件","2gb","统统","调试","学习","生态","hdmi","高等","以及","太","中","工具","了","让","核心","大","自己","开发板","外观","人工","供电","性能","等效","就","用","面向","卡","无线网络","差别","内存","常听到","想到","usb2.0","至关重要","和","某个","算力","派","于","无线网","二合一","还","还有","机器人","媒体","在","至关","不再","整体","目前","传感器","网线","不同","满足","有线","芯片","开发者","使用","提供","连接","wiki","模块","引脚","出现","主要","俱全","通信","层面","如果","调试信息","传感","要","会","csi","看上去","解决","端侧","形态","我们","来源","上去","播放","助于","感器","有","多","显示器","i2c","时候","5v3a","核","硬件资源","一位","能力","面对","大量","接口","兼容","其他","好","就是","h264","帮助","解决方案","有助","多媒体","这块","不过","超频","通过","没有","这是","链","伯努利","第一眼","呢","限制","信息","40","二合","方向","完全","每","计算","板载","树莓","为了","高昂","系统","重要","也","应用","5tops","板卡","界面","方面","电脑","资源","。","上网","一款","一应俱全","推荐","机器","已有","usb3.0","都","人工智能","一个","typec","大家","级","开发","方案","最大","x3","到","spi","gpio","身边","产品","版本","产业","—","蓝牙","独有","市场","起来","的","先","编解码","2.0","解码","电源","架构","线网","直接","没错","准备","、","接口定义","习惯","官方","口","适应","流畅","效果","已经","一眼","arm","未来","4gb","价格","为","h265","支持","，","串口","这","3","远程","频率","路由","类似","包含","与","设备","npu","业界","智能","学生","看到","或者","受","线","探索","没","个人","合一","尽快","显示","网络","实力","常用","识别","1","例程","外接","图像","cpu","看上","原生","一致","张表中","硬件","视频","hz","嵌入式","总体","可以","相机","usb","什么","推向","院校","bpu","后续","登录","四核","级别"],"title":"旭日X3派","title_tokens":["旭日","x3","派"]},{"location":"hhp/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3m","text":"在旭日X3派上，最为核心的当然就是这颗AI芯片了，这是关于芯片的具体信息，供大家参考。 值得一提的是，随着芯片的技术迭代，2023年，地平线将推出X5芯片，比较大的变化是CPU升级到了8核A55，主频提升到1.8GHz，BPU的算力也将达到8Tops，还加入了GPU，以及更多可扩展的接口。 在使用旭日X3派的过程中，大家也可以期待旭日X5派了。","text_tokens":["最为","。","过程","了","信息","当然","可以","1.8","提升","地平线","接口","核心","升级","大","芯片","达到","随着","主频","派","算力","更","年"," ","就是","扩展","使用","旭日","供","技术","参考","2023","迭代","ghz","还","加入","比较","是","cpu","bpu","这颗","多","可","具体","8tops","大家","也","关于","以及","的","值得","上","推出","8","ai","核","地平","x3","将","到","gpu","在","变化","，","a55","中","期待","x5","这是","值得一提的是"],"title":"旭日X3M芯片","title_tokens":["旭日","x3m","芯片"]},{"location":"hhp/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3_2","text":"好啦，还是回到旭日X3派的开发接口上来，我们再做一个整理，这些就是我们使用开发板进行智能机器人开发过程中，最为常用的接口啦。 大家目前在树莓派或者其他开发板上使用的绝大部分模块，基本都可以在旭日X3派上复用，同时还有更多智能化的玩法等着大家。 关于40Pin扩展接口的序号排布，大家可以看这里，引脚的序号是从靠近HDMI板卡内测的开始算起，是引脚1，然后依次蛇形计数，分别是1、2、3、4、5，一直到这里是39和40。 上图是40PIN扩展接口的详细定义，有3.3V和5V的电源信号，有I2C、I2S、SPI、UART等通信接口，还有很多可动态配置的GPIO信号，基本可以满足各种各样的机器人开发啦。 好啦，关于旭日X3派这块开发板我们已经了解清楚了，具体该如何使用呢，我们后续操作起来。","text_tokens":["了","进行","算","接口","等","、","开发板","计数","其他","一直","好","就是","该","同时","这块","具体","信号","起","上来","动态","已经","了解","定义","还是","39","，","2","玩法","3","呢","过程","清楚","然后","40","通信接口","部分","和","靠近","树莓","派","更","智能","很多","旭日","大部","是","是从","4","或者","回到","可","还有","基本","机器人","关于","分别","开始","依次","板卡","各样","智能化","在","这些","整理","上图","最为","目前","。","40pin","绝大部分","满足","常用","序号","详细","绝大","各种","机器","使用"," ","扩展","1","都","啦","复用","排布","这里","一个","5","大家","模块","引脚","通信","上","开发","i2s","x3","到","spi","着","如何","5v","gpio","大部分","可以","我们","配置","v","hdmi","有","3.3","多","各种各样","后续","再","起来","i2c","操作","的","蛇形","uart","做","内测","中","看","电源"],"title":"旭日X3派接口","title_tokens":["旭日","x3","派","接口"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/","text":"安装地平线机器人开发平台（HHP） 我们在旭日X3派上安装系统镜像，并进一步完成TogetherROS系统的安装，大家如果手上有旭日X3派开发板的话，建议跟随一起操作。 先来了解一下TogetherROS系统安装的整体流程： 第一步，要完成硬件的准备，我们需要找到一块旭日X3派的开发板，并且准备好电源线、SD卡、读卡器、串口模块等必要的配件，当然还需要有一台操作的电脑啦。 硬件都准备好之后，就可以进入第二步，给旭日X3派下载并安装Ubuntu系统镜像，这是TogetherROS系统运行必要的底层环境。 第三步，就可以开始安装TogetherROS啦。 安装完成后，我们还需要进一步完成一些配置工作，可以也让旭日X3派板卡上的各项功能都运行起来，保证TogetherROS的顺利运行。 最后一步，就是体验TogetherROS出厂自带的一些例程啦，确定一切安装顺利，为后续机器人开发最好准备。 接下来，我们就按照这个流程，开始操作。 硬件准备 先来完成硬件准备： 找到一块旭日X3派的板卡，准备好一套5V3A的电源和TypeC电源线，稍后会连接到这里的电源接口，给板卡供电。 然后准备好一张8GB以上的SD卡和读卡器，下一步我们会在上边烧写系统镜像。 接下来使用一个串口模块，连接旭日X3派和笔记本电脑，便于下一步看到系统镜像的启动信息。 如果大家有网线和HDMI显示器的话，也可以先准备好，在之后的操作中用的上，如果没有也没关系，不影响TogetherROS系统的基本使用。 硬件准备齐全之后，就可以进入第二步了。 安装Ubuntu系统 我们来给旭日X3派安装Ubuntu系统，关于系统镜像和烧写工具，都可以在 地平线AI社区 中找到。 下载SD卡镜像 首先登录地平线AI社区，点击”产品中心——资源中心“， 进入页面后下拉至”X3派资料包“专区，其中有两个镜像，点击下载其中的”旭日X3派系统镜像（服务版）“，会有一个压缩包，把它保存到当前电脑桌面。 此外，我们稍后将镜像烧写到SD卡里，需要用到烧写小工具，如果大家电脑上没有合适的工具，可以下拉到”工具“专区，点击下载”烧录 工具rufus\"。 下载完后我们来看一下两个压缩文件中的内容： 其中一个是烧写X3派镜像文件的工具，压缩包中有两个文件，一个是system_sdcard.img文件，是我们稍后会用于烧写SD卡的镜像文件；另一个是disk_nand.img文件，用于烧写旭日X3派中的flash文件，大多数情况下都用不到； 另一个压缩包里是我们稍后用于烧写镜像的rufus工具。 我们把两个压缩包都解压出来，然后把SD卡放进读卡器、插到电脑端 接下来就可以开始烧写SD卡镜像。 烧写SD卡镜像 运行解压出来的烧写工具rufus。启动后需要确认几个参数： 第一个是确定烧写到哪个磁盘上。工具软件会默认搜索当前读取到的SD卡，下图所示磁盘名称，就是演示时插好的16GB的SD卡。 下一步我们点击“选择”，找到需要烧写的镜像文件。演示中已经把需要的system_sdcrd.img文件放在了桌面上，选中它点击“打开”； 下面的内容就可以用默认的配置，点击“开始”会弹出警告告诉我们将把磁盘里的所有文件都清除掉，这没有问题，我们点击“选择“，就开始烧写SD卡镜像了。 进度条显示“准备就绪”后，点击“关闭”，此时你的SD卡镜像就已经烧写完成了，我们把SD卡的读卡器拔出来。 连接串口 接下来把SD卡插到旭日X3派上。 把串口模块连接到电脑的USB上。 连接好串口模块后，为了确保串口已经跟电脑连接成功、并且安装好了驱动，我们可以右键“我的电脑”图标、选择“管理”，在打开的”计算机管理“界面中找到”设备管理器——端口“，检查一下你的USB串口是否已经显示出了对应的设备。演示中的端口号为COM6,说明串口已经成功驱动了。 如果没有看到自己的设备号、或者设备号前有一个叹号或者问号标记，说明你的驱动没有安装好，可以搜索网络上的技术博客，来完成串口模块的驱动安装。 关闭“计算机管理”窗口，接下来就要通过串口与旭日X3派进行连接了。这里我们需要用到一个串口小工具，大家可以使用自己常用的工具。 演示中使用的串口工具是MobaXterm,十分推荐大家使用这个工具，里面集成了开发过程中需要使用的各种小工具，我们后续的串口通讯、SSH网络通讯，都会使用这些工具完成。 打开MobaXterm,点击左上角的\"Session\"； 找到里面的“Serial\"串口选项，点击打开；串口号选择本机连接到旭日X3派的相应端口，演示中为COM6; 波特率选择921600。选项好后点击“OK”。 现在串口已经连接成功了，但当前旭日X3派的板子还没有上电，所以没有任何信息弹出。 我们把电源线与旭日X3派连接好。 可以看到弹出了日志提醒：“当前系统正在启动”。等待系统加载完成。 现在可以看到系统已经加载成功了。 串口登录系统 接下来我们需要登录系统。我们有两个账号可以用来登录： 账号1：用户名为root，密码也为root； 账号2：用户名为storise，密码也为storise； 这里演示使用root用户来登录。输入用户名、密码，回车，需要等待大约1分钟，因为第一次登录需要展开一些系统必要的安装软件，安装好后系统会自动重启。 系统自动重启后，再次使用root用户登录。现在你的UBUNTU系统就已经安装好了。 我们可以使用LINUX系统常用的一些命令行进行查看和设置，比如ls查看当前命令，pwd查看当前路径，还可以使用mkdir命令创建文件夹，比如这里,一个test文件夹就创建成功了。 到这里为止，旭日X3派上的Ubuntu系统就安装成功啦，我们继续下一步。 安装HHP/TogetherROS 接下来安装地平线机器人开发平台HHP，TogetherROS系统包含其中。 为了达到更好的通信效率，我们后续使用有线网络连接旭日X3派，这里大家可以拿出一根网线，直接连接电脑和旭日X3派的网口。 旭日X3派中出厂已经配置好了静态IP地址，是192.168.1.10，我们将使用的电脑也配置到同一网段即可。 配置有线网络 接下来请大家拿一根网线，连接旭日X3派和电脑。 然后，在电脑端打开控制面板，找到“查看网络状态和任务”。 找到已经连接成功的以太网，点击它； 会弹出一个窗口，我们点击“属性”。 再次弹出窗口，我们双击选择“Internet协议版本4”。 然后会弹出一个配置IP地址的窗口，我们勾选”使用下面的IP地址“。 按照如下信息填入： IP地址：192.168.1.100 子网掩码：255.255.255.0 默认网关：192.168.1.1 我们使用的旭日X3派的板子IP为192.168.1.10，所以IP后三位除了.10和网关.1以外，大家可以选用1-255之间的任意数字，这里使用.100； 填写完在所有窗口点击“确定”，最后关闭窗口。现在网络的配置就完成了，此时电脑端的静态IP就是192.168.1.100,我们通过这个IP与旭日X3派产生连接。 SSH远程登录 我们再次打开MobaXterm软件,点击左上角的\"Session\"，找到里面的\"SSH\",输入 旭日X3派板子的IP192.168.1.10，点击”OK“。 弹出登录窗口，我们用root账户登录：用户名为root，密码为root。这里会弹窗询问是否保存登录密码，如果需要保存就点“YES”，不需要保存就点“NO”。 现在我们就成功通过网络SSH协议登录到了旭日X3派板子上，和之前我们用串口登录的效果几乎是一样的，但现在我们是用网络通讯，所以现在通讯的效率和传输的速度会更高。 配置完成网络通讯后，我们来正式安装HHP。 安装HHP 我们在登录成功的SSH终端中，直接使用如下命令即可安装HHP： $ sudo apt install hhp 等待安装完成： $ root@ubuntu:~# sudo apt install hhp Reading package lists... Done Building dependency tree Reading state information... Done The following NEW packages will be installed: hhp 0 upgraded, 1 newly installed, 0 to remove and 52 not upgraded. Need to get 384 MB of archives. After this operation, 512 MB of additional disk space will be used. Get:1 http://42.62.85.28/ubuntu-ports focal/main arm64 hhp arm64 1 .0.1 [ 384 MB ] Fetched 384 MB in 6min 43s ( 954 kB/s ) Selecting previously unselected package hhp. ( Reading database ... 110406 files and directories currently installed. ) Preparing to unpack .../archives/hhp_1.0.1_arm64.deb ... Unpacking hhp ( 1 .0.1 ) ... Setting up hhp ( 1 .0.1 ) ... Generating locales ( this might take a while ) ... en_US.ISO-8859-1... done en_US.UTF-8... done Generation complete. 安装完成后，查看/opt目录下的文件，可以看到已经安装： $ root@ubuntu:/userdata# ls /opt/ tros 如果觉得终端里看不方便，也可以使用MobaXterm软件的可视化浏览器来查看。 大家可以点击/opt/tros文件夹，看看其中的文件结构。 /include文件夹里，是我们后续会用到的关于系统的头文件的调用路径； /lib文件夹里面是库文件； /share文件夹里是安装好的功能包的路径； /src文件夹里是后续会用到的代码； /tools文件夹里是一些小工具。 除此之外，还有很多.bat,.sh脚本文件，它们是用来设置环境变量的。这是因为，你的LINUX系统不知道你安装包的路径在哪，所以需要通过环境变量的脚本来告诉系统，如何找到对应的TogetherROS的功能包、和功能包里的命令工具。 环境变量在我们后续操作里会频繁地使用到，我们会使用到一个”source\"命令来配置环境变量，例如： $ source /opt/tros/setup.bash 运行上面这行命令，就会把当前环境变量设置到系统里去；下次再运行ROS2、TogetherROS指令时，就能找到功能包的路径了。 到这里，TogetherROS也安装完成，下一节我们将对开发板和TogetherROS进行配置。","text_tokens":["and","可视","16gb","是否","will","之间","进行","知道","[","地平线","等","after","脚本","additional","内容","1.1","以上","$","确认","网络连接","进一步","再次","：","newly","大多","平台","ai","setting","问号","将","跟随","2","new","rufus","通讯","读取","网关","警告","此外","选择","然后","ls","be","给","两个","第一","session","回车","跟","磁盘","954","放进","高","号","选项","更","压缩包","很多","是因为","问题","账号","所以","旭日","烧","4","是","基本",",","确定","桌面","下拉","它","开始","打开","8","地平","另","used","main","apt","同一","请","第一次","这些","generating","端口","这个","\"","电源接口","6min","第一步",":","directories","src","一节","保存","install","preparing","掉","效率",")","）","页面","参数","各种"," ","啦","255","就绪","这里","觉得","询问","就点","上边","storise","出来","哪","上","nand","最后","get",";","8gb","archives","_","space","to","调用","拿出","10","地址","面上","sd","等待","包","按照","终端","~","linux","必要","(","所有","好后","lib","说明","二步","搜索",".","能","技术","双击","hdmi","再","软件","命令","网络通讯","完在","多数","sh","中","看","协议","85.28","以太","system","upgraded","工具","环境","了","进度","行","重启","iso","任意","第二步","the","让","功能","自己","输入","开发板","运行","选用","标记","进度条","lists","稍后","供电","卡里","拉到","此时","但","kb","相应","用到","”","名称","就","弹窗","没关系","用","卡","板子","掩码","找到","自带","100","网段","的话","工作","921600","正在","和","一根","接下","previously","烧录","派","可视化","share","还","take","下来","mkdir","清除","255.0","方便","还有","机器人","yes","检查一下","52","ros2","第三步","下载","合适","while","中有","internet","专区","在","8859","波特率","need","整体","网口","bat","户名","时","43s","用户","网线","ubuntu","路径","镜像文件","弹","有线","影响","selecting","使用","不到","dependency","去","连接","ssh","用户名","operation","模块","左上","日志","通信","a","下拉至","端口号","加载","数字","no","并且","地","工具软件","如果","disk","选中","安装","要","笔记本电脑","用来","属性","当然","会","一块","utf","关闭","下次","not","里会","需要","我们","产生","齐全","配置","最好","告诉","三步","上电","complete","en","有","除此","显示器","三位","服务","电脑桌面","几个","5v3a","110406","deb","电脑桌","第二","tree","便于","电源线","其中","安装包","为止","十分","现在","后","环境变量","解压","接口","口号","package","没关","里面","currently","插","管理","locales","好","就是","变量","中用","默认","左上角","用于","建议","hhp","following","任务","unpacking","中心","fetched","了解","中为","频繁","拔出来","会弹","ports","tros","下面","一套","ip192.168","s","就要","并","通过","没有","mb","关系","文件","这是","大多数","里","过程","信息","第三","上角","社区","计算","比如","头文件","384","img","我","为了","分钟","系统","com6","一些","压缩文件","镜像","也","us","对应","放在","提醒","板卡","填写","界面","http","底层","演示","电脑","传输","...","资源","情况","。","done","例如","unpack","设置","in","255.255","上面","算机","推荐","@","generation","把","packages","机器","userdata","大约","都","窗口","完后","typec","一个","当前","setup","大家","制面","一样","开发","x3","到","#","计算机","除了","接下来","压缩","ip地址","产品","一台","件夹","右键","版本","顺利","密码","ip","桌面上","理器","—","]","一步","首先","写","图标","起来","版","下","的","42.62","0.1","include","先","reading","烧写","一起","；","面板","电源","机","flash","直接","source","“","以外","下拉到","笔记","前","叹","unselected","配件","准备","、","mobaxterm","/","集成","填入","之后","might","一切","它们","代码","自动","各项","sdcard","information","所示","效果","笔记本","已经","成功","读卡","拿","环境变","为","查看","，","files","串口","pwd","这","子网掩码","账户","远程","指令","来看","remove","名为","state","包含","与","计算机管理","因为","installed","设备","serial","读卡器","确保","看到","包里","对","状态","结构","静态","或者","命令行","1.0","出厂","勾选","关于","控制","一张","1.10","出","端的","哪个","下图","即可","sudo","小","端","本","0","控制面板","opt","togetherros","bash","创建","文件夹","of","显示","sdcrd","网络","focal","拔出","几乎","常用","波特","速度","database","之外","1","继续","例程","任何","流程","以太网","进入","第一个","准备就绪","串","-","保证","tools","192.168","一次","硬件","如下","512","如何","ok","看看","驱动","子网","可以","test","浏览","usb","手上","检查","博客","展开","达到","一下","弹出","building","点击","this","管理器","资料","体验","启动","arm64","up","库","完成","除此之外","1.100","（","后续","正式","操作","登录","不","来","root","目录","更好","之前","你","浏览器"],"title":"系统安装","title_tokens":["安装","系统"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#hhp","text":"我们在旭日X3派上安装系统镜像，并进一步完成TogetherROS系统的安装，大家如果手上有旭日X3派开发板的话，建议跟随一起操作。 先来了解一下TogetherROS系统安装的整体流程： 第一步，要完成硬件的准备，我们需要找到一块旭日X3派的开发板，并且准备好电源线、SD卡、读卡器、串口模块等必要的配件，当然还需要有一台操作的电脑啦。 硬件都准备好之后，就可以进入第二步，给旭日X3派下载并安装Ubuntu系统镜像，这是TogetherROS系统运行必要的底层环境。 第三步，就可以开始安装TogetherROS啦。 安装完成后，我们还需要进一步完成一些配置工作，可以也让旭日X3派板卡上的各项功能都运行起来，保证TogetherROS的顺利运行。 最后一步，就是体验TogetherROS出厂自带的一些例程啦，确定一切安装顺利，为后续机器人开发最好准备。 接下来，我们就按照这个流程，开始操作。","text_tokens":["环境","后","等","配件","第二步","准备","让","功能","、","开发板","运行","好","之后","就是","一切","进一步","建议","各项","：","了解","读卡","就","卡","为","跟随","，","找到","并","串口","自带","这是","的话","工作","第三","给","第一","接下","派","读卡器","旭日","还","系统","下来","一些","出厂","镜像","确定","机器人","也","开始","第三步","下载","板卡","在","底层","整体","电脑","togetherros","这个","。","ubuntu","第一步"," ","机器","都","啦","例程","流程","进入","大家","模块","保证","上","开发","x3","硬件","并且","最后","如果","安装","接下来","要","一台","当然","可以","一块","顺利","sd","手上","按照","必要","需要","一下","我们","配置","最好","二步","体验","一步","三步","完成","有","后续","起来","操作","的","先","来","第二","一起","电源线","电源"],"title":"安装地平线机器人开发平台（HHP）","title_tokens":["开发","平台","地平","（","）","hhp","机器人","机器","地平线","安装"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_1","text":"先来完成硬件准备： 找到一块旭日X3派的板卡，准备好一套5V3A的电源和TypeC电源线，稍后会连接到这里的电源接口，给板卡供电。 然后准备好一张8GB以上的SD卡和读卡器，下一步我们会在上边烧写系统镜像。 接下来使用一个串口模块，连接旭日X3派和笔记本电脑，便于下一步看到系统镜像的启动信息。 如果大家有网线和HDMI显示器的话，也可以先准备好，在之后的操作中用的上，如果没有也没关系，不影响TogetherROS系统的基本使用。 硬件准备齐全之后，就可以进入第二步了。","text_tokens":["了","接口","笔记","第二步","准备","没关","稍后","好","之后","以上","供电","中用","：","笔记本","读卡","就","没关系","卡","一套","找到","，","串口","没有","关系","的话","然后","信息","给","和","接下","派","读卡器","旭日","看到","系统","下来","基本","镜像","也","一张","板卡","在","电脑","togetherros","。","显示","网线","电源接口","影响"," ","使用","这里","连接","typec","一个","上边","进入","模块","大家","上","x3","到","硬件","如果","接下来","8gb","笔记本电脑","可以","会","一块","sd","我们","齐全","二步","启动","一步","完成","hdmi","有","显示器","操作","下","的","先","5v3a","不","来","烧写","第二","便于","电源线","电源"],"title":"硬件准备","title_tokens":["硬件","准备"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#ubuntu","text":"我们来给旭日X3派安装Ubuntu系统，关于系统镜像和烧写工具，都可以在 地平线AI社区 中找到。","text_tokens":["工具","。","可以","ubuntu","给","地平线","社区","和","我们","派"," ","旭日","都","烧","系统","写","镜像","关于","ai","地平","来","x3","在","，","找到","中","安装"],"title":"安装Ubuntu系统","title_tokens":["ubuntu","安装","系统"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#sd","text":"首先登录地平线AI社区，点击”产品中心——资源中心“， 进入页面后下拉至”X3派资料包“专区，其中有两个镜像，点击下载其中的”旭日X3派系统镜像（服务版）“，会有一个压缩包，把它保存到当前电脑桌面。 此外，我们稍后将镜像烧写到SD卡里，需要用到烧写小工具，如果大家电脑上没有合适的工具，可以下拉到”工具“专区，点击下载”烧录 工具rufus\"。 下载完后我们来看一下两个压缩文件中的内容： 其中一个是烧写X3派镜像文件的工具，压缩包中有两个文件，一个是system_sdcard.img文件，是我们稍后会用于烧写SD卡的镜像文件；另一个是disk_nand.img文件，用于烧写旭日X3派中的flash文件，大多数情况下都用不到； 另一个压缩包里是我们稍后用于烧写镜像的rufus工具。 我们把两个压缩包都解压出来，然后把SD卡放进读卡器、插到电脑端 接下来就可以开始烧写SD卡镜像。","text_tokens":["“","工具","下拉到","后","解压","地平线","、","插","内容","稍后","卡里","拉到","用于","sdcard","用到","”","：","中心","大多","读卡","ai","就","用","卡","将","，","没有","文件","rufus","大多数","里","此外","来看","然后","两个","社区","放进","接下","烧录","img","派","压缩包","读卡器","旭日","烧","是","系统","下来","压缩文件","镜像","桌面","下拉","它","开始","下载","合适","地平","另","中有","专区","小","电脑","端","资源","情况","。","\"","镜像文件","保存","）","页面","把"," ","不到","都","完后","一个","进入","当前","大家","出来","上","nand","下拉至","x3","到","如果","disk","压缩","接下来","_","产品","可以","会","sd","包","需要","一下","我们","点击","资料",".","—","首先","写","有","（","服务","电脑桌面","版","下","的","登录","电脑桌","多数","烧写","；","中","其中","system","flash"],"title":"下载SD卡镜像","title_tokens":["卡","镜像","下载","sd"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#sd_1","text":"运行解压出来的烧写工具rufus。启动后需要确认几个参数： 第一个是确定烧写到哪个磁盘上。工具软件会默认搜索当前读取到的SD卡，下图所示磁盘名称，就是演示时插好的16GB的SD卡。 下一步我们点击“选择”，找到需要烧写的镜像文件。演示中已经把需要的system_sdcrd.img文件放在了桌面上，选中它点击“打开”； 下面的内容就可以用默认的配置，点击“开始”会弹出警告告诉我们将把磁盘里的所有文件都清除掉，这没有问题，我们点击“选择“，就开始烧写SD卡镜像了。 进度条显示“准备就绪”后，点击“关闭”，此时你的SD卡镜像就已经烧写完成了，我们把SD卡的读卡器拔出来。","text_tokens":["“","16gb","工具","后","了","进度","解压","准备","插","运行","内容","进度条","好","就是","默认","确认","此时","：","”","所示","名称","已经","读卡","就","拔出来","会弹","用","卡","下面","将","，","找到","没有","文件","rufus","这","读取","警告","里","选择","第一","磁盘","img","读卡器","问题","烧","是","清除","确定","镜像","桌面","它","开始","打开","放在","出","哪个","下图","演示","时","。","显示","sdcrd","拔出","镜像文件","掉","参数","把"," ","都","就绪","一个","当前","第一个","准备就绪","出来","上","到","工具软件","选中","_","面上","可以","会","sd","关闭","桌面上","需要","所有","我们","点击","配置","搜索",".","告诉","启动","一步","完成","写","软件","下","的","几个","烧写","；","中","你","system"],"title":"烧写SD卡镜像","title_tokens":["卡","镜像","烧写","sd"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_2","text":"接下来把SD卡插到旭日X3派上。 把串口模块连接到电脑的USB上。 连接好串口模块后，为了确保串口已经跟电脑连接成功、并且安装好了驱动，我们可以右键“我的电脑”图标、选择“管理”，在打开的”计算机管理“界面中找到”设备管理器——端口“，检查一下你的USB串口是否已经显示出了对应的设备。演示中的端口号为COM6,说明串口已经成功驱动了。 如果没有看到自己的设备号、或者设备号前有一个叹号或者问号标记，说明你的驱动没有安装好，可以搜索网络上的技术博客，来完成串口模块的驱动安装。 关闭“计算机管理”窗口，接下来就要通过串口与旭日X3派进行连接了。这里我们需要用到一个串口小工具，大家可以使用自己常用的工具。 演示中使用的串口工具是MobaXterm,十分推荐大家使用这个工具，里面集成了开发过程中需要使用的各种小工具，我们后续的串口通讯、SSH网络通讯，都会使用这些工具完成。 打开MobaXterm,点击左上角的\"Session\"； 找到里面的“Serial\"串口选项，点击打开；串口号选择本机连接到旭日X3派的相应端口，演示中为COM6; 波特率选择921600。选项好后点击“OK”。 现在串口已经连接成功了，但当前旭日X3派的板子还没有上电，所以没有任何信息弹出。 我们把电源线与旭日X3派连接好。 可以看到弹出了日志提醒：“当前系统正在启动”。等待系统加载完成。 现在可以看到系统已经加载成功了。","text_tokens":["十分","“","现在","是否","工具","后","了","进行","前","叹","口号","里面","自己","插","、","mobaxterm","管理","标记","集成","好","左上角","但","相应","用到","”","：","已经","成功","中为","问号","卡","为","板子","，","找到","串口","就要","通过","没有","通讯","选择","过程","921600","信息","上角","session","正在","计算","与","跟","计算机管理","接下","号","设备","我","serial","派","为了","选项","确保","所以","旭日","还","看到","是","系统","下来","com6","或者",",","检查一下","打开","对应","提醒","出","界面","在","演示","波特率","这些","小","电脑","本","端口","这个","。","显示","\"","网络","弹","常用","波特","算机","推荐","各种","把"," ","使用","都","窗口","任何","这里","连接","一个","ssh","当前","串","模块","大家","左上","日志","上","开发","x3","端口号","加载","到","并且","计算机","如果","接下来","安装",";","ok","驱动","右键","可以","会","sd","usb","等待","关闭","检查","博客","需要","一下","我们","弹出","点击","理器","好后","管理器","说明","搜索","技术","—","启动","完成","上电","图标","有","后续","的","网络通讯","来","；","中","电源线","你","电源","机"],"title":"连接串口","title_tokens":["连接","串口"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_3","text":"接下来我们需要登录系统。我们有两个账号可以用来登录： 账号1：用户名为root，密码也为root； 账号2：用户名为storise，密码也为storise； 这里演示使用root用户来登录。输入用户名、密码，回车，需要等待大约1分钟，因为第一次登录需要展开一些系统必要的安装软件，安装好后系统会自动重启。 系统自动重启后，再次使用root用户登录。现在你的UBUNTU系统就已经安装好了。 我们可以使用LINUX系统常用的一些命令行进行查看和设置，比如ls查看当前命令，pwd查看当前路径，还可以使用mkdir命令创建文件夹，比如这里,一个test文件夹就创建成功了。 到这里为止，旭日X3派上的Ubuntu系统就安装成功啦，我们继续下一步。","text_tokens":["现在","后","了","进行","重启","输入","、","好","自动","再次","：","已经","成功","就","为","查看","，","2","pwd","文件","ls","两个","名为","第一","回车","和","比如","因为","接下","派","分钟","账号","旭日","还","系统","下来","一些","mkdir","命令行",",","也","演示","第一次","户名","创建","。","文件夹","用户","设置","ubuntu","路径","常用"," ","使用","大约","1","继续","啦","这里","一个","用户名","当前","storise","上","x3","一次","到","安装","接下来","件夹","用来","可以","会","密码","test","等待","linux","必要","展开","需要","我们","好后","一步","有","软件","下","的","命令","登录","来","root","；","你","为止"],"title":"串口登录系统","title_tokens":["登录","串口","系统"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#hhptogetherros","text":"接下来安装地平线机器人开发平台HHP，TogetherROS系统包含其中。 为了达到更好的通信效率，我们后续使用有线网络连接旭日X3派，这里大家可以拿出一根网线，直接连接电脑和旭日X3派的网口。 旭日X3派中出厂已经配置好了静态IP地址，是192.168.1.10，我们将使用的电脑也配置到同一网段即可。","text_tokens":["直接","togetherros","ip地址","。","拿出","了","地址","网线","可以","网络","地平线","电脑","包含","和","有线","一根","效率","接下","达到","我们","派","为了","配置","机器"," ","使用","好",".","旭日","是","网络连接","系统","下来","这里","安装","连接","后续","静态","hhp","出厂","大家","机器人","也","通信","的","已经","开发","平台","192.168","1.10","地平","x3","将","更好","到","即可","，","同一","中","其中","网段","接下来","网口"],"title":"安装HHP/TogetherROS","title_tokens":["togetherros","安装","hhp","/"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_4","text":"接下来请大家拿一根网线，连接旭日X3派和电脑。 然后，在电脑端打开控制面板，找到“查看网络状态和任务”。 找到已经连接成功的以太网，点击它； 会弹出一个窗口，我们点击“属性”。 再次弹出窗口，我们双击选择“Internet协议版本4”。 然后会弹出一个配置IP地址的窗口，我们勾选”使用下面的IP地址“。 按照如下信息填入： IP地址：192.168.1.100 子网掩码：255.255.255.0 默认网关：192.168.1.1 我们使用的旭日X3派的板子IP为192.168.1.10，所以IP后三位除了.10和网关.1以外，大家可以选用1-255之间的任意数字，这里使用.100； 填写完在所有窗口点击“确定”，最后关闭窗口。现在网络的配置就完成了，此时电脑端的静态IP就是192.168.1.100,我们通过这个IP与旭日X3派产生连接。","text_tokens":["现在","“","以外","后","之间","了","任意","1.1","选用","填入","就是","默认","此时","再次","任务","”","：","已经","成功","拿","就","会弹","下面","查看","掩码","板子","为","，","找到","通过","100","子网掩码","网关","选择","然后","信息","和","与","一根","接下","派","所以","旭日","状态","4","静态","下来","255.0",",","确定","勾选","它","控制","打开","1.10","端的","出","填写","internet","在","请","端","电脑","控制面板","这个","。","网线","网络","255.255","弹"," ","使用","1","窗口","以太网","255","这里","连接","一个","大家","制面","-","192.168","x3","数字","如下","最后","除了","接下来","ip地址","属性","子网","地址","10","版本","可以","ip","关闭","按照","所有","我们","点击","产生","配置",".","完成","1.100","双击","三位","的","完在","；","面板","协议","以太"],"title":"配置有线网络","title_tokens":["配置","网络","有线"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#ssh","text":"我们再次打开MobaXterm软件,点击左上角的\"Session\"，找到里面的\"SSH\",输入 旭日X3派板子的IP192.168.1.10，点击”OK“。 弹出登录窗口，我们用root账户登录：用户名为root，密码为root。这里会弹窗询问是否保存登录密码，如果需要保存就点“YES”，不需要保存就点“NO”。 现在我们就成功通过网络SSH协议登录到了旭日X3派板子上，和之前我们用串口登录的效果几乎是一样的，但现在我们是用网络通讯，所以现在通讯的效率和传输的速度会更高。 配置完成网络通讯后，我们来正式安装HHP。","text_tokens":["现在","“","是否","了","后","里面","输入","mobaxterm","左上角","但","再次","hhp","”","：","效果","成功","就","弹窗","用","ip192.168","板子","为","，","找到","串口","通过","通讯","账户","上角","名为","session","和","高","派","更","所以","旭日","是",",","yes","打开","1.10","出","传输","。","用户","\"","网络","弹","保存","几乎","效率","速度"," ","窗口","这里","询问","ssh","就点","左上","上","一样","x3","no","到","如果","安装","ok","会","密码","需要","我们","点击","配置",".","完成","软件","正式","的","网络通讯","登录","不","来","root","之前","协议"],"title":"SSH远程登录","title_tokens":["远程","ssh","登录"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#hhp_1","text":"我们在登录成功的SSH终端中，直接使用如下命令即可安装HHP： $ sudo apt install hhp 等待安装完成： $ root@ubuntu:~# sudo apt install hhp Reading package lists... Done Building dependency tree Reading state information... Done The following NEW packages will be installed: hhp 0 upgraded, 1 newly installed, 0 to remove and 52 not upgraded. Need to get 384 MB of archives. After this operation, 512 MB of additional disk space will be used. Get:1 http://42.62.85.28/ubuntu-ports focal/main arm64 hhp arm64 1 .0.1 [ 384 MB ] Fetched 384 MB in 6min 43s ( 954 kB/s ) Selecting previously unselected package hhp. ( Reading database ... 110406 files and directories currently installed. ) Preparing to unpack .../archives/hhp_1.0.1_arm64.deb ... Unpacking hhp ( 1 .0.1 ) ... Setting up hhp ( 1 .0.1 ) ... Generating locales ( this might take a while ) ... en_US.ISO-8859-1... done en_US.UTF-8... done Generation complete. 安装完成后，查看/opt目录下的文件，可以看到已经安装： $ root@ubuntu:/userdata# ls /opt/ tros 如果觉得终端里看不方便，也可以使用MobaXterm软件的可视化浏览器来查看。 大家可以点击/opt/tros文件夹，看看其中的文件结构。 /include文件夹里，是我们后续会用到的关于系统的头文件的调用路径； /lib文件夹里面是库文件； /share文件夹里是安装好的功能包的路径； /src文件夹里是后续会用到的代码； /tools文件夹里是一些小工具。 除此之外，还有很多.bat,.sh脚本文件，它们是用来设置环境变量的。这是因为，你的LINUX系统不知道你安装包的路径在哪，所以需要通过环境变量的脚本来告诉系统，如何找到对应的TogetherROS的功能包、和功能包里的命令工具。 环境变量在我们后续操作里会频繁地使用到，我们会使用到一个”source\"命令来配置环境变量，例如： $ source /opt/tros/setup.bash 运行上面这行命令，就会把当前环境变量设置到系统里去；下次再运行ROS2、TogetherROS指令时，就能找到功能包的路径了。 到这里，TogetherROS也安装完成，下一节我们将对开发板和TogetherROS进行配置。","text_tokens":["直接","upgraded","and","可视","source","工具","环境","will","后","环境变量","知道","了","进行","行","[","iso","after","unselected","脚本","package","the","里面","你","currently","功能","additional","、","mobaxterm","运行","开发板","/","lists","locales","好","might","变量","$","安装包","它们","代码","kb","hhp","following","用到","：","information","”","unpacking","newly","fetched","成功","已经","频繁","就","setting","ports","tros","环境变","查看","将","s","，","files","找到","通过","mb","new","文件","这","里","指令","remove","be","ls","state","和","954","installed","头文件","因为","384","previously","很多","是因为","可视化","所以","share","看到","包里","take","对","是","结构","系统","一些","1.0","还有","方便",",","也","关于","us","对应","52","8","ros2","used","main","while","在","即可","apt","http","sudo","8859","need","generating","小","0","...","opt","togetherros","bat","bash","时","of","done","。","43s","文件夹","例如","unpack","设置","ubuntu","\"","focal","6min",":","in","directories","路径","src","上面","一节","preparing","install",")","@","selecting","generation","把","packages"," ","使用","database","userdata","1","之外","dependency","去","觉得","这里","一个","ssh","当前","operation","大家","setup","-","哪","tools","开发","a","到","#","512","如下","地","disk","如果","如何","get","安装","archives","_","space","to","看看","调用","件夹","用来","可以","会","浏览","utf","等待","包","终端","~","下次","not","linux","里会","(","需要","我们","building","this","点击","lib","配置","能",".","告诉","]","arm64","up","库","完成","除此之外","complete","en","后续","除此","再","软件","操作","下","的","命令","42.62","0.1","include","登录","reading","110406","不","deb","root","目录","来","；","sh","tree","中","看","其中","85.28","浏览器"],"title":"安装HHP","title_tokens":["安装","hhp"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/","text":"TogetherROS系统配置 无论是旭日X3派，还是TogetherROS，在正式使用之前，都还需要进行一些必要的配置，完善必要的功能模块，提供完整的算力支持，达到最佳状态。 网络连接 第一个配置，是无线网络连接。 当然，大家也可以直接用网线连接旭日X3派和一个可以上网的路由器，不过更多时候，我们还是会使用无线网络来上网。 我们打开MobaXterm,选择SSH，使用root用户登录板卡；如果之前登录过板卡、还没有关闭的话，也可以继续使用。 现在我们可以通过命令行搜索周边环境有哪些WIFI信号，命令如下： $ sudo nmcli device wifi rescan #扫描当前环境里所有WIFI名称，但扫描结果不会显示 $ nmcli device wifi list #显示扫描到的WIFI名称 $ sudo nmcli device wifi connect <账号> password <密码> #连接WIFI $ sudo vim /etc/network/interfaces #修改DHCP配置 比如，我的办公室里wifi的名称是psmicro,我们就可以使用“sudo nmcli device wifi connect psmicro password <密码>”来连接。 等到终端返回信息“successfully activated\",就说明WIFI连接成功； 我们可以Ping古月居的网址，来检查一下连接。如果能够Ping通，就说明网络已经连接成功，现在就可以成功连接到互联网，进行后续的软件下载和更新了。 网络配置完成后，在后续开发中，大家就可以直接下载或更新各种软件包了。 系统更新 第二个配置，是更新当前旭日X3派所使用的Ubuntu镜像，和在电脑上使用的命令相同。 我们更新一下当前的系统镜像： $ sudo apt update #会按照当前软件源的域名设置去连接远程软件源 $ sudo apt full-upgrade #升级所有可以升级的软件包 弹出如下对话，我们选择“Y”，回车； 这样我们就完成了对系统更新的检查，并安装好了更新包。 CPU调频策略 第三个配置，设置CPU的调频策略，这是一个可选项，大家了解之后，在未来需要使用的时候进行配置即可。 动态调频 $ echo > ondemand /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让系统根据当前负载，动态调整CPU频率 满频模式 $ echo > performance /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让CPU始终以满频，也就1.2GHz的频率工作 打开超频 $ echo 1 > /sys/devices/system/cpu/cpufreq/boost #使CPU以超频，也就是1.5GHz的频率工作 关闭超频 $ echo 0 > /sys/devices/system/cpu/cpufreq/boost 这里CPU频率为，满频模式：1.2GHz，超频模式：1.5GHz。 大家需要注意，默认的系统配置是关闭超频、并且动态调频的配置。这样可以比较好地保证功率最优。 安装ROS2功能包 接下来，还有一个很重要的配置，那就是安装ROS2功能包，我们说TogetherROS是基于ROS2深度优化的，很多模块还是会复用ROS2中的功能，所有ROS2的原生功能也可以支持，这里我们就把ROS2必要的功能包都安装一下，让系统的功能模块更加完整。 熟悉ROS2的同学，应该对这些指令并不陌生，和ROS2官方手册中的安装步骤一致，不过还是建议大家跟着课程的步骤一起来安装一下。 添加ROS2源 第一步我们需要更新系统软件源，并安装必要的下载工具。 $ sudo apt update && sudo apt install curl gnupg lsb-release #更新软件源 $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg #设置ROS2软件源秘钥 $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null #设置ROS2软件源 Attention 大部分国内开发者在这都会遇到同一个问题：网址无法连接。解决方案可以参考古月居官网上的这篇帖子： 《解决”Failed to connect to raw.githubusercontent.com“报错》 安装ROS2包 $ sudo apt update #更新软件源 $ sudo apt install ros-foxy-ros-base ros-foxy-demo-nodes-cpp # 安装ROS2功能包 时间会有些长，需要稍微等待一下。 现在ROS2就安装完成了。 大家可以使用同样的命令，继续安装ROS2中的更多功能包。 这里推荐大家先安装ROS2之后会使用到的编译器，比如python3-colcon-common-extensions。我们后续一些TogetherROS功能包的编译，也会使用python3-colcon-common的命令来安装。 $ sudo apt install python3-colcon-common-extensions # ROS2编译器 另外，我们推荐大家安装一个git工具，大家可以通过它下载GitHub、GitLab上的软件包，我们后续也会用到。安装命令为本小节代码第四行。 $ sudo apt install git # 安装git工具 到这里，我们常用的软件和功能包就安装完成了。我们可以看到，在旭日X3派文件目录/opt底下，除了之前的/tros文件夹外，还多出来一个/ros文件夹，里面就是我们刚才安装好的ros-foxy版本的所有系统文件。 如果大家要使用ROS2的功能包，也需要source里面的.bash或者.bat脚本文件。 建立软链接 为了方便我们在TogetherROS系统李调用ROS2的功能，在TogetherROS里提供了一个叫create_soft_link创建软链接的脚本，它而已通过软链接，把ROS2的环境变量链接到当前TogetherROS的环境包里来。执行以下命令： $ cd /opt/tros ## 使用/opt/tros目录下的create_soft_link.py创建ROS package至TogetherROS的软链接 $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros 这样设置以后，假如你source了TogetherROS的环境变量，那么同样的配置也会对ROS2生效。 好啦，到这里为止，所有必要的配置项我们都做完了，是不是有点迫不及待想要使用TogetherROS了呢？","text_tokens":["进行","以","[","脚本","ondemand","cpp","功能模块","稍微","$","网络连接","无线","应该","：","基于","系统文件","建立","list","gnupg","githubusercontent","选择","刚才","修改","这篇","第一","回车","等到","1.2","选项","更","sys","很多","账号","问题","旭日","注意","大部","是","三个",",","它","打开",">","update","main","路由器","apt","同一","这些","python3","create","底下","居","etc","以下","\"","同样","第一步",":","秘钥","install","外",")","colcon","很","各种"," ","啦","参考","调整","通","复用","这里","出来","使","上","多功能","devices","keyrings","过","始终","》","？","添加","那","优化","_","to","调用","更新包","包","终端","按照","等待","必要","(","所有","说明","搜索",".","二个","同一个","完善","软件","帖子","命令","负载","一","keyring","arch","github","做","相同","中","有点","system","调频","lsb","结果","环境","工具","了","深度","公室","让","满频","功能","vim","nmcli","<","跟着","文件目录","不及","但","用到","”","名称","就","policy0","interfaces","用","以后","无线网络","还是","的话","release","工作","ros","activated","sources","联网","和","升级","时间","迫不及待","接下","算力","派","无线网","share","还","比较","网上","下来","还有","方便","最佳","统配","检查一下","o","ros2","下载","更新","在","base","不是","课程","古月","bat","编译器","执行","用户","网线","扫描","ubuntu","&&","弹","cpufreq","小节","null","开发者","而已","使用","去","提供","连接","ssh","模块","无论","foxy","根据","org","至","并且","地","如果","signed","包都","安装","psmicro","那么","要","echo","当然","会","关闭","https","无论是","解决","需要","我们","d","配置","ghz","soft","py","有","archive","多","这样","时候","deb","不会","第二","陌生","功率","最优","1.5","为止","《","现在","以满频","后","环境变量","governor","周边","软件包","所","长","package","域名","里面","办公","源","好","就是","报错","变量","对系统","默认","解决方案","系统软件","建议","--","=","返回","动态","说","了解","不过","performance","tros","超频","并","通过","或","没有","com","文件","这是","里","git","四行","呢","信息","网址","第三","curl","系统配置","extensions","比如","叫","我","为了","gitlab","互联网","系统","一些","重要","镜像","也","为本","device","板卡","模式","key","raw","http","是不是","电脑","。","上网","策略","假如","设置","熟悉","推荐","dpkg","把","upgrade","packages","attention","都","对话","一个","connect","当前","大家","步骤","第四行","方案","开发","|","x3","到","usr","codename","#","有些","full","除了","接下来","dhcp","master","能够","件夹","版本","密码","ssl","link","]","一步","另外","哪些","起来","##","下","的","先","；","by","线网","可选项","直接","source","“","项","rescan","链接","demo","编译","可选","、","更加","mobaxterm","国内","print","/","wifi","ping","之后","完","官方","李","达到最佳","代码","互联","信号","成功","已经","未来","环境变","nodes","为","支持","，","network","第二个","这","远程","频率","指令","路由","architecture","系统配","部分","居官","dev","手册","common","看到","对","包里","状态","或者","命令行","下载工具","cd","出","即可","sudo","os","boost","0","遇到","opt","togetherros","bash","创建","文件夹","办公室","gpg","显示","网络","常用","password","tee","1","继续","无法","cpu","第一个","-","原生","一致","保证","y","scaling","如下","大部分","rosdistro","周边环境","可以","failed","同学","检查","达到","一下","完整","第四","想要","完成","后续","第三个","正式","生效","successfully","登录","不","软","来","root","目录","之前","你"],"title":"系统配置","title_tokens":["系统","配置","系统配","统配","系统配置"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#togetherros","text":"无论是旭日X3派，还是TogetherROS，在正式使用之前，都还需要进行一些必要的配置，完善必要的功能模块，提供完整的算力支持，达到最佳状态。","text_tokens":["togetherros","。","进行","无论是","功能","必要","达到","需要","算力","派","功能模块","配置","完整","使用","旭日","都","还","状态","提供","达到最佳","一些","完善","模块","最佳","正式","的","无论","x3","还是","支持","在","，","之前"],"title":"TogetherROS系统配置","title_tokens":["togetherros","系统","配置","系统配","统配","系统配置"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_1","text":"第一个配置，是无线网络连接。 当然，大家也可以直接用网线连接旭日X3派和一个可以上网的路由器，不过更多时候，我们还是会使用无线网络来上网。 我们打开MobaXterm,选择SSH，使用root用户登录板卡；如果之前登录过板卡、还没有关闭的话，也可以继续使用。 现在我们可以通过命令行搜索周边环境有哪些WIFI信号，命令如下： $ sudo nmcli device wifi rescan #扫描当前环境里所有WIFI名称，但扫描结果不会显示 $ nmcli device wifi list #显示扫描到的WIFI名称 $ sudo nmcli device wifi connect <账号> password <密码> #连接WIFI $ sudo vim /etc/network/interfaces #修改DHCP配置 比如，我的办公室里wifi的名称是psmicro,我们就可以使用“sudo nmcli device wifi connect psmicro password <密码>”来连接。 等到终端返回信息“successfully activated\",就说明WIFI连接成功； 我们可以Ping古月居的网址，来检查一下连接。如果能够Ping通，就说明网络已经连接成功，现在就可以成功连接到互联网，进行后续的软件下载和更新了。 网络配置完成后，在后续开发中，大家就可以直接下载或更新各种软件包了。","text_tokens":["直接","现在","“","结果","环境","了","后","进行","周边","rescan","软件包","公室","办公","vim","、","mobaxterm","nmcli","<","/","wifi","ping","$","但","无线","互联","信号","返回","：","”","名称","成功","已经","不过","就","list","interfaces","用","无线网络","还是","，","通过","network","没有","或","的话","里","activated","选择","路由","联网","信息","网址","修改","第一","和","等到","比如","我","派","更","无线网","账号","旭日","还","互联网","是","命令行",",","也","检查一下","打开",">","device","下载","板卡","更新","路由器","在","sudo","古月","。","上网","办公室","居","显示","用户","网线","etc","扫描","网络","\"","password","各种"," ","使用","继续","通","连接","一个","ssh","connect","当前","第一个","大家","开发","过","x3","到","#","如下","如果","dhcp","psmicro","能够","当然","周边环境","可以","会","密码","关闭","终端","检查","所有","我们","一下","配置","说明","搜索","完成","哪些","有","后续","多","软件","时候","的","命令","successfully","登录","来","root","不会","；","之前","中","线网"],"title":"网络连接","title_tokens":["连接","网络","网络连接"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_2","text":"第二个配置，是更新当前旭日X3派所使用的Ubuntu镜像，和在电脑上使用的命令相同。 我们更新一下当前的系统镜像： $ sudo apt update #会按照当前软件源的域名设置去连接远程软件源 $ sudo apt full-upgrade #升级所有可以升级的软件包 弹出如下对话，我们选择“Y”，回车； 这样我们就完成了对系统更新的检查，并安装好了更新包。","text_tokens":["远程","“","选择","。","了","软件包","设置","所","ubuntu","会","可以","更新包","回车","和","按照","域名","升级","弹","检查","一下","我们","派","所有","upgrade","配置"," ","使用","源","好","对系统","旭日","$","对话","去","完成","是","二个","系统","连接","安装","当前","镜像","-","：","软件","”","；","这样","的","命令","上","update","y","就","出","更新","x3","第二","在","apt","#","，","相同","sudo","full","如下","第二个","并","电脑"],"title":"系统更新","title_tokens":["系统","更新"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#cpu","text":"第三个配置，设置CPU的调频策略，这是一个可选项，大家了解之后，在未来需要使用的时候进行配置即可。 动态调频 $ echo > ondemand /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让系统根据当前负载，动态调整CPU频率 满频模式 $ echo > performance /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让CPU始终以满频，也就1.2GHz的频率工作 打开超频 $ echo 1 > /sys/devices/system/cpu/cpufreq/boost #使CPU以超频，也就是1.5GHz的频率工作 关闭超频 $ echo 0 > /sys/devices/system/cpu/cpufreq/boost 这里CPU频率为，满频模式：1.2GHz，超频模式：1.5GHz。 大家需要注意，默认的系统配置是关闭超频、并且动态调频的配置。这样可以比较好地保证功率最优。","text_tokens":["调频","以满频","进行","governor","以","让","可选","满频","ondemand","、","/","之后","就是","好","$","默认","：","动态","了解","performance","就","未来","policy0","超频","为","，","这是","频率","工作","系统配","第三","系统配置","1.2","选项","sys","注意","比较","是","系统","三个","也","统配","打开",">","模式","在","即可","0","boost","。","策略","设置","cpufreq"," ","使用","1","调整","cpu","这里","一个","当前","大家","使","保证","devices","scaling","始终","根据","#","并且","地","_","echo","可以","关闭","需要","配置","ghz","最优","第三个","这样","时候","的","负载","功率","1.5","system","可选项"],"title":"CPU调频策略","title_tokens":["策略","调频","cpu"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2","text":"接下来，还有一个很重要的配置，那就是安装ROS2功能包，我们说TogetherROS是基于ROS2深度优化的，很多模块还是会复用ROS2中的功能，所有ROS2的原生功能也可以支持，这里我们就把ROS2必要的功能包都安装一下，让系统的功能模块更加完整。 熟悉ROS2的同学，应该对这些指令并不陌生，和ROS2官方手册中的安装步骤一致，不过还是建议大家跟着课程的步骤一起来安装一下。","text_tokens":["togetherros","指令","。","可以","会","深度","接下来","包","让","和","同学","功能","更加","必要","接下","熟悉","所有","很","我们","把","一下","功能模块","跟着","配置","完整","很多","就是","优化"," ","课程","手册","对","复用","官方","是","这里","下来","系统","重要","一个","建议","还有","模块","应该","步骤","大家","基于","原生","也","一致","起来","说","的","不过","ros2","一","就","不","还是","支持","陌生","，","中","并","这些","包都","那","安装"],"title":"安装ROS2功能包","title_tokens":["功能","包","安装","ros2"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2_1","text":"第一步我们需要更新系统软件源，并安装必要的下载工具。 $ sudo apt update && sudo apt install curl gnupg lsb-release #更新软件源 $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg #设置ROS2软件源秘钥 $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null #设置ROS2软件源 Attention 大部分国内开发者在这都会遇到同一个问题：网址无法连接。解决方案可以参考古月居官网上的这篇帖子： 《解决”Failed to connect to raw.githubusercontent.com“报错》","text_tokens":["source","《","“","lsb","工具","[","国内","print","/","源","报错","$","解决方案","系统软件","--","=","：","”","list","gnupg","，","并","githubusercontent","com","这","release","ros","sources","网址","architecture","这篇","第一","curl","部分","居官","dev","问题","share","大部","网上","系统","下载工具","o",">","ros2","update","下载","更新","main","key","raw","apt","在","sudo","http","同一","os","遇到","古月","。","gpg","etc","设置","\"","ubuntu","第一步",":","&&","秘钥","install","null",")","开发者","dpkg","packages","attention"," ","tee","都","参考","无法","连接","一个","connect","-","方案","|","开发","keyrings","》","usr","org","codename","#","signed","安装","master","_","to","大部分","echo","rosdistro","可以","会","https","failed","ssl","解决","必要","需要","(","我们","d",".","]","一步","同一个","archive","软件","帖子","的","keyring","deb","arch","by"],"title":"添加ROS2源","title_tokens":["添加","源","ros2"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2_2","text":"$ sudo apt update #更新软件源 $ sudo apt install ros-foxy-ros-base ros-foxy-demo-nodes-cpp # 安装ROS2功能包 时间会有些长，需要稍微等待一下。 现在ROS2就安装完成了。 大家可以使用同样的命令，继续安装ROS2中的更多功能包。 这里推荐大家先安装ROS2之后会使用到的编译器，比如python3-colcon-common-extensions。我们后续一些TogetherROS功能包的编译，也会使用python3-colcon-common的命令来安装。 $ sudo apt install python3-colcon-common-extensions # ROS2编译器 另外，我们推荐大家安装一个git工具，大家可以通过它下载GitHub、GitLab上的软件包，我们后续也会用到。安装命令为本小节代码第四行。 $ sudo apt install git # 安装git工具 到这里，我们常用的软件和功能包就安装完成了。我们可以看到，在旭日X3派文件目录/opt底下，除了之前的/tros文件夹外，还多出来一个/ros文件夹，里面就是我们刚才安装好的ros-foxy版本的所有系统文件。 如果大家要使用ROS2的功能包，也需要source里面的.bash或者.bat脚本文件。","text_tokens":["source","现在","工具","了","软件包","demo","长","编译","脚本","里面","功能","、","cpp","/","文件目录","源","之后","就是","稍微","好","$","代码","用到","系统文件","就","tros","nodes","，","通过","文件","git","ros","四行","刚才","和","时间","比如","extensions","派","更","gitlab","旭日","common","还","看到","系统","一些","或者","也","为本","它","ros2","update","下载","更新","apt","base","在","sudo","python3","opt","togetherros","底下","编译器","bash","bat","。","文件夹","同样","install","小节","常用","外","推荐","colcon"," ","使用","继续","这里","一个","大家","-","第四行","出来","多功能","上","foxy","x3","到","有些","#","如果","除了","安装","要","件夹","可以","会","版本","等待","包","需要","一下","我们","所有","第四",".","另外","完成","后续","多","软件","的","命令","先","来","目录","github","之前","中"],"title":"安装ROS2包","title_tokens":["包","安装","ros2"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_3","text":"为了方便我们在TogetherROS系统李调用ROS2的功能，在TogetherROS里提供了一个叫create_soft_link创建软链接的脚本，它而已通过软链接，把ROS2的环境变量链接到当前TogetherROS的环境包里来。执行以下命令： $ cd /opt/tros ## 使用/opt/tros目录下的create_soft_link.py创建ROS package至TogetherROS的软链接 $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros 这样设置以后，假如你source了TogetherROS的环境变量，那么同样的配置也会对ROS2生效。 好啦，到这里为止，所有必要的配置项我们都做完了，是不是有点迫不及待想要使用TogetherROS了呢？","text_tokens":["source","环境","了","环境变量","项","链接","脚本","package","功能","/","好","完","变量","不及","$","李","--","：","环境变","tros","以后","，","通过","里","ros","呢","迫不及待","叫","为了","包里","对","系统","方便","也","它","ros2","cd","在","不是","是不是","python3","opt","create","togetherros","创建","。","假如","执行","以下","设置","同样","把","而已"," ","使用","都","啦","提供","这里","一个","当前","foxy","到","至","？","_","那么","调用","会","必要","所有","我们","配置","想要","link",".","soft","py","这样","##","下","的","命令","生效","软","来","目录","做","有点","你","为止"],"title":"建立软链接","title_tokens":["链接","建立","软"]},{"location":"hhp/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/","text":"TogetherROS示例运行 接下来，我们就在安装配置好TogetherROS的旭日X3派上，试一试系统自带的一些例程，确保整个系统已经可以正常运行。 通信测试 先来测试一下TogetherROS系统的通信功能。 我们需要启动两个终端，分别连接到旭日X3派上，并分别按以下命令配置环境变量。 终端1： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function 终端2： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 接下来，我们用ros2 run命令运行节点： 运行第一个例程： ros2 run example_rclcpp_minimal_publisher publisher_member_function 这是一个用C++写的最小化的发布者程序，其中节点叫publisher_member+function，按回车运行该节点。 可以看到这个节点开始不断循环发布信息，每次发布的信息为字符串形式，内容是“Hello,world! +数字”。 同样，在终端2的命令行窗口，输入以下命令并回车开启订阅者节点。 ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 这个订阅者节点会获取到、并显示出刚才发布者节点发布的信息。 通过这样一个例程，我们验证了两个节点之间的通信没有问题。这这是一个基于DDS的话题通信。 按CTRL+C可以关闭该例程。 通信系统没有问题了，如果你是一个ROS2的开发者，可能对刚才我们使用的ROS2命令比较熟悉，这时你可能也会产生一个问题：我们之前也安装了ROS2系统，那ROS2的原生功能还可以正常运行么？ 我们再来试一试ROS2中自带的一个例程。 和刚才一样打开两个终端，这里我们需要source一下ROS里的环境变量。该环境变量我们刚才已经设置了过软连接，所以配置过程中它也会配置ROS2的功能包路径。 在终端1输入命令： $ source /opt/tros/local_setup.bash 在终端2，也输入同样的命令，配置环境变量的脚本： 接下来运行两个ROS2的节点。 这两个节点的功能包是属于ROS2里的功能包,可以直接调用到。我们来尝试一下输入命令ros2 run，再输入功能包名称，如果按Tab自动补全文件名，说明可以找到对应的这个功能包： ros2 run demo_nodes_cpp talker talker也是一个发布者节点。按回车运行，可以看到终端1的发布者节点以每秒1次的频率发布消息。 同样，我们到终端2中打开订阅者节点： ros2 run demo_nodes_cpp listener 回车运行，很快两个终端间就建立了通讯。 这样就使用ROS2里的例程实现了话题通信连接，只不过这里我们使用的就是ROS2原生的功能包了，而不是TogetherROS的功能。 通信系统已经没问题了，但看上去似乎还不太直观。 目标检测 没问题，接下来，我们就运行一个更为直观的案例——目标检测。 在这个案例中，需要大家找一个USB的相机，连接到旭日X3拍的USB接口上。 在运行这个例程之前，需要确认两点：1.有一个USB相机已经连接到了旭日X3派板子上；2.有一个HDMI的显示器也连接到了旭日X3派板子上，它主要用于显示后续的图像检测的效果。 要确认USB相机已经正确连接到开发板，可以在终端输入命令“ls - dv\"查看当前设备号，默认把USB相机识别为vedio8，如果当前列表里能找到vedio8就说明相机被成功识别到了。 输入以下命令运行例程： $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 代码第一行，02例程的功能是通过相机动态采集图像，并对图像里的目标物体进行实时识别。 代码第二行，我们用python3来运行例程usb_camera_fcos.py，它的目标识别的功能是通过我们板卡中CPU的AI引擎来实现的。 我们输入以上两行代码，就开始驱动相机、并对相机里的图像做动态识别了。 此时如果有连接HDMI的显示器，就可以在显示器里看到动态识别的效果。 我们可以调整USB相机镜头的范围，去拍一些杯子、电脑、显示器等等，都可以把对应的目标物体识别到，并把对应的物体用彩色框给框出来；在框的左上角，就是识别到物体的名称、以及它识别的概率值了。 几个示例程序都可以正常运行了，说明当前的软硬件系统都已经准备就绪，到这里，我们才算是可以正式开始机器人开发了。","text_tokens":["之间","进行","以","脚本","概率","内容","cpp","以上","$","确认","subscriber","inference","发布","被","：","基于","建立","ai","2","节点","循环","通讯","publisher","发布者","刚才","很快","ls","两个","第一","回车","号","问题","所以","旭日","是","实现",",","它","开始","打开","引擎","python3","这个","两点","examples","以下","\"","同样","c++","程序","框"," ","获取","调整","就绪","这里","等等","出来","上","过","整个","？","最小化","那","02","_","尝试","调用","一行","采集","包","终端","说明","能",".","hdmi","再","么","以及","命令","太","做","框出来","示例","vedio8","中","似乎","包是","这时","环境","了","功能","输入","开发板","运行","物体","此时","但","拍","”","名称","检测","就","用","板子","自带","找到","ros","和","列表","接下","属于","派","还","比较","下来","!","机器人","范围","example","ros2","在","不是","话题","形式","路径","开发者","+","使用","listener","试一试","去","第一行","连接","左上","主要","function","通信","数字","开启","如果","安装","正确","要","会","关闭","看上去","两行","需要","我们","产生","而","配置","上去","py","camera","有","显示器","这样","按","几个","第二","找","其中","fcos","环境变量","不断","接口","算是","包了","每次","好","就是","变量","该","默认","左上角","用于","sample","动态","run","不过","c","tros","并","通过","没有","文件","这是","框给","里","正常","过程","信息","上角","叫","补全","系统","一些","每秒","也","对应","板卡","member","电脑","world","。","设置","实时","者","熟悉","把","机器","都","窗口","一个","当前","setup","大家","只不过","一样","开发","x3","到","local","接下来","二行","rclcpp","—","写","彩色","可能","的","先","；","直接","source","“","直观","dv","demo","准备","、","/","代码","自动","ctrl","次","效果","tab","已经","案例","成功","hello","环境变","nodes","为","查看","软硬件","，","这","才","频率","最小","软硬","第二行","设备","间","确保","镜头","值","minimal","看到","对","文件名","命令行","分别","dds","消息","cd","出","没","opt","togetherros","bash","测试","显示","杯子","识别","1","例程","图像","cpu","第一个","准备就绪","看上","-","原生","目标","硬件","字符串","验证","框出","驱动","可以","相机","usb","字符","一下","talker","app","启动","后续","订阅","更为","正式","不","软","来","之前","你"],"title":"示例运行","title_tokens":["示例","运行"]},{"location":"hhp/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#togetherros","text":"接下来，我们就在安装配置好TogetherROS的旭日X3派上，试一试系统自带的一些例程，确保整个系统已经可以正常运行。","text_tokens":["togetherros","正常","。","可以","接下来","接下","运行","我们","派","配置","好","确保","旭日","例程","试一试","系统","下来","一些","的","已经","上","就","x3","整个","在","，","自带","安装"],"title":"TogetherROS示例运行","title_tokens":["示例","togetherros","运行"]},{"location":"hhp/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#_1","text":"先来测试一下TogetherROS系统的通信功能。 我们需要启动两个终端，分别连接到旭日X3派上，并分别按以下命令配置环境变量。 终端1： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function 终端2： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 接下来，我们用ros2 run命令运行节点： 运行第一个例程： ros2 run example_rclcpp_minimal_publisher publisher_member_function 这是一个用C++写的最小化的发布者程序，其中节点叫publisher_member+function，按回车运行该节点。 可以看到这个节点开始不断循环发布信息，每次发布的信息为字符串形式，内容是“Hello,world! +数字”。 同样，在终端2的命令行窗口，输入以下命令并回车开启订阅者节点。 ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 这个订阅者节点会获取到、并显示出刚才发布者节点发布的信息。 通过这样一个例程，我们验证了两个节点之间的通信没有问题。这这是一个基于DDS的话题通信。 按CTRL+C可以关闭该例程。 通信系统没有问题了，如果你是一个ROS2的开发者，可能对刚才我们使用的ROS2命令比较熟悉，这时你可能也会产生一个问题：我们之前也安装了ROS2系统，那ROS2的原生功能还可以正常运行么？ 我们再来试一试ROS2中自带的一个例程。 和刚才一样打开两个终端，这里我们需要source一下ROS里的环境变量。该环境变量我们刚才已经设置了过软连接，所以配置过程中它也会配置ROS2的功能包路径。 在终端1输入命令： $ source /opt/tros/local_setup.bash 在终端2，也输入同样的命令，配置环境变量的脚本： 接下来运行两个ROS2的节点。 这两个节点的功能包是属于ROS2里的功能包,可以直接调用到。我们来尝试一下输入命令ros2 run，再输入功能包名称，如果按Tab自动补全文件名，说明可以找到对应的这个功能包： ros2 run demo_nodes_cpp talker talker也是一个发布者节点。按回车运行，可以看到终端1的发布者节点以每秒1次的频率发布消息。 同样，我们到终端2中打开订阅者节点： ros2 run demo_nodes_cpp listener 回车运行，很快两个终端间就建立了通讯。 这样就使用ROS2里的例程实现了话题通信连接，只不过这里我们使用的就是ROS2原生的功能包了，而不是TogetherROS的功能。 通信系统已经没问题了，但看上去似乎还不太直观。","text_tokens":["直接","source","“","这时","直观","环境","了","环境变量","之间","不断","demo","以","脚本","功能","输入","、","运行","内容","/","cpp","包了","每次","就是","变量","该","$","subscriber","但","自动","ctrl","发布","次","：","”","基于","tab","run","已经","名称","建立","不过","hello","c","就","环境变","tros","用","nodes","为","，","自带","并","2","节点","通过","没有","找到","这","文件","这是","循环","通讯","里","ros","频率","正常","publisher","发布者","过程","信息","最小","刚才","很快","两个","第一","回车","和","接下","叫","属于","派","间","问题","所以","旭日","还","minimal","看到","对","比较","是","补全","系统","下来","文件名","!","命令行","实现",",","每秒","也","分别","它","开始","dds","example","打开","对应","消息","ros2","出","没","在","不是","member","opt","world","togetherros","bash","这个","形式","话题","测试","。","examples","以下","显示","设置","同样","路径","c++","程序","者","熟悉","开发者","+"," ","获取","使用","1","listener","例程","窗口","试一试","这里","连接","一个","setup","第一个","看上","原生","function","通信","只不过","上","一样","开发","过","x3","数字","到","local","？","开启","字符串","如果","验证","最小化","接下来","安装","那","_","尝试","调用","可以","会","字符","关闭","终端","包","看上去","rclcpp","需要","一下","我们","产生","而","配置","说明","talker",".","上去","启动","写","订阅","再","这样","可能","么","的","命令","按","太","先","不","软","来","之前","中","其中","似乎","你","包是"],"title":"通信测试","title_tokens":["通信","测试"]},{"location":"hhp/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#_2","text":"没问题，接下来，我们就运行一个更为直观的案例——目标检测。 在这个案例中，需要大家找一个USB的相机，连接到旭日X3拍的USB接口上。 在运行这个例程之前，需要确认两点：1.有一个USB相机已经连接到了旭日X3派板子上；2.有一个HDMI的显示器也连接到了旭日X3派板子上，它主要用于显示后续的图像检测的效果。 要确认USB相机已经正确连接到开发板，可以在终端输入命令“ls - dv\"查看当前设备号，默认把USB相机识别为vedio8，如果当前列表里能找到vedio8就说明相机被成功识别到了。 输入以下命令运行例程： $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 代码第一行，02例程的功能是通过相机动态采集图像，并对图像里的目标物体进行实时识别。 代码第二行，我们用python3来运行例程usb_camera_fcos.py，它的目标识别的功能是通过我们板卡中CPU的AI引擎来实现的。 我们输入以上两行代码，就开始驱动相机、并对相机里的图像做动态识别了。 此时如果有连接HDMI的显示器，就可以在显示器里看到动态识别的效果。 我们可以调整USB相机镜头的范围，去拍一些杯子、电脑、显示器等等，都可以把对应的目标物体识别到，并把对应的物体用彩色框给框出来；在框的左上角，就是识别到物体的名称、以及它识别的概率值了。 几个示例程序都可以正常运行了，说明当前的软硬件系统都已经准备就绪，到这里，我们才算是可以正式开始机器人开发了。","text_tokens":["“","直观","了","进行","dv","接口","准备","概率","功能","输入","、","开发板","运行","物体","/","算是","就是","以上","$","默认","左上角","确认","此时","用于","代码","拍","inference","被","：","sample","效果","动态","已经","案例","检测","成功","名称","ai","就","用","查看","板子","为","软硬件","，","找到","2","通过","并","才","框给","里","正常","ls","上角","软硬","第二行","第一","列表","接下","号","设备","派","问题","旭日","镜头","值","看到","对","是","系统","下来","一些","实现","机器人","也","范围","它","开始","对应","cd","板卡","引擎","没","在","python3","电脑","这个","两点","。","显示","以下","\"","杯子","实时","程序","框","识别","把"," ","机器","1","都","例程","调整","去","第一行","图像","就绪","cpu","这里","连接","一个","等等","当前","准备就绪","大家","左上","-","主要","出来","上","开发","x3","到","目标","硬件","如果","接下来","正确","02","_","二行","框出","要","一行","驱动","采集","可以","相机","usb","终端","两行","需要","我们","说明","能",".","app","—","py","camera","hdmi","有","后续","更为","显示器","彩色","正式","以及","的","命令","几个","来","做","；","第二","框出来","示例","之前","vedio8","中","找","fcos"],"title":"目标检测","title_tokens":["检测","目标"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/","text":"多节点话题通信 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 编程方法 了解了话题的基本原理，接下来我们就要开始编写代码啦。 创建工作空间 请大家先按照这个流程创建工作空间、下载课程的例程代码，并进行编译。 $ mkdir –p dev_ws/src $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build 运行示例程序 编译成功后，我们尝试运行话题通信的Hello World例程，在这个例程中，我们会先创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_topic_cpp talker $ ros2 run learning_topic_cpp listener 这就是TogetherROS系统中话题通信的方法，依然沿用了ROS2中话题通信的完整流程。 代码解析 发布者的实现方法publisher_member_function.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using namespace std :: chrono_literals ; /* This example creates a subclass of Node and uses std::bind() to register a * member function as a callback from the timer. */ class MinimalPublisher : public rclcpp :: Node { public : MinimalPublisher () : Node ( \"minimal_publisher\" ), count_ ( 0 ) { publisher_ = this -> create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & MinimalPublisher :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, world! \" + std :: to_string ( count_ ++ ); RCLCPP_INFO ( this -> get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者的实现方法subscriber_member_function.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using std :: placeholders :: _1 ; class MinimalSubscriber : public rclcpp :: Node { public : MinimalSubscriber () : Node ( \"minimal_subscriber\" ) { subscription_ = this -> create_subscription < std_msgs :: msg :: String > ( \"topic\" , 10 , std :: bind ( & MinimalSubscriber :: topic_callback , this , _1 )); } private : void topic_callback ( const std_msgs :: msg :: String :: SharedPtr msg ) const { RCLCPP_INFO ( this -> get_logger (), \"I heard: '%s'\" , msg -> data . c_str ()); } rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["and","可视","想","传递","之间","知道","进行","guyuehome","以","[","自行","东西","平时","node","每个","init","cpp","argv","$","subscriber","文章","发布","被","应该","：","基于","定义","并不知道","将","成为","原理","解析","节点","2","std","发布者","publisher","修改","给","两个","出去","第一","他会","号","更","类型","chatter","很多","发送数据","长宽","注意","是","是从","异步","namespace","联系","uses","实现","基本",",","minimalpublisher","它","开始",">","make","固定","main","编程","作为","ws","msg","请","数据类型","第一次","这些","500","create","千丝万缕","这个","居","对象","heard","\"","src",":","install","程序","标准",")","colcon","积木","发送","参数","各种","既然","组成"," ","获取","tutorials","仔细","啦","逻辑","方式","这里","等等","一篇","沿用","魔性","个","creates","上","？","int","运动","最后","chrono","那",";","get","_","to","逻辑性","尝试","10","接收数据","后缀","按照","只要","{","名字","hpp","(","随处可见","message",".","ms","所谓","画面","rgb","再","随处","msgs","太","数据结构","&","clone","build","topic","spin","做","示例","中","看","似乎","数据","联系方式","挺","了","会先","成","无关","from","the","让","中文","功能","运行","<","发出","拍摄","编程语言","此时","但","适合","”","得","argc","名称","就","用","还是","在生活中","'","minimalsubscriber","的话","工作","ros","timerbase","从而","和","void","接下","一种","优先","%","比方","i","复杂","可视化","从","下来","mkdir","!","还有","机器人","example","*","ros2","下载","合适","才能","在","不是","人","课程","存在","某","古月","话题","传感器","用户","publish","size","data","t","+","微信","使用","listener","角度","function","通信","shutdown","using","a","timer","如果","感兴趣","之为","auto","传感","要","摇杆","placeholders","会","https","literals","周期","需要","我们","gitee","publishing","桥梁","const","要求","数量","感器","info","有","各种各样","多","根本","区分","这样","public","时候","千丝","英文","}","其中","概念","后","接口","好","就是","该","通信模型","用于","建议","=","方法","run","说","了解","c","较强","描述","tros","感兴","某种","s","就要","并","通过","没有","com","关系","文件","里","git","呢","p","信息","方向","每","比如","class","叫","基本原理","想下","系统","重要","一些","称之为","callback","也","对应","组织","排版","多个","是不是","member","传输","world","语言","。","生活","实时","最","者","杂志","把","机器","接收","块","userdata","都","监控","阅读","一个","本身","setup","大家","某些","优先级","一样","到","local","#","词","接下来","string","rclcpp","char","听说","编写","公众","谁","]","另外","wall","可能","的","include","控制指令","先","memory","logger","据传","拼接","小编","str","source","“","传递数据","没错","编译","、","接口定义","数据传输","/","之后","sharedptr","叫做","private","代码","成功","hello","查看","，","这","3","指令","来看","一份","类似","包含","count","与","dev","因为","不知","设备","间","听","值","minimal","对","指","结构","万缕","得到","控制","dds","为例","消息","register","cd","各样","特性","0","不然","opt","togetherros","bash","创建","learning","of","渲染","显示","functional","唯一","subclass","b","as","不能","必然","1","例程","无法","流程","图像","报社","–","shared","知识","-","++","空间","一次","硬件","报纸","视频","统一","字符串","bind","格式","驱动","可以","相机","可见","字符","同学","return","理解","模型","什么","一下","this","收到","自然","subscription","完整","talker","打","兴趣","想象","依然","订阅","独立","不","像","本原","你","像素"],"title":"多节点话题通信","title_tokens":["通信","话题","多","节点"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["千丝万缕","话题","传递","。","了","之间","传递数据","会","最","功能","各种","一种","桥梁","间","机器","就是"," ","是","方式","但","重要","有","各种各样","联系","实现","机器人","万缕","它","的","独立","各样","千丝","不是","，","节点","并","其中","数据","联系方式","这些"],"title":"多节点话题通信","title_tokens":["通信","话题","多","节点"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["可视","想","传递","没错","了","之间","以","功能","数据传输","拍摄","此时","就","某种","将","查看","，","节点","关系","这","ros","信息","方向","给","两个","设备","可视化","从","是","称之为","实现","机器人","得到","它","为例","在","才能","不是","作为","是不是","传输","存在","某","话题","这个","。","渲染","显示","用户","实时","b","机器","获取"," ","必然","监控","图像","方式","一个","大家","上","a","到","硬件","？","视频","之为","要","驱动","可以","相机","一下","我们","桥梁","有","这样","的","做","据传","中","数据"],"title":"通信模型","title_tokens":["通信","通信模型","模型"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["“","了","成","平时","、","数据传输","/","好","就是","之后","叫做","文章","发布","应该","”","基于","名称","就","感兴","成为","，","在生活中","节点","没有","的话","呢","来看","发布者","类似","每","出去","和","他会","比如","号","叫","比方","类型","发送数据","对","从","是","是从","称之为","实现","机器人","也","它","dds","组织","排版","固定","数据类型","特性","古月","传输","话题","这个","。","居","对象","生活","者","杂志","发送","把","微信"," ","使用","接收","机器","都","无法","等等","一个","知识","本身","角度","大家","到","？","报纸","如果","感兴趣","之为","格式","可以","会","接收数据","可见","模型","名字","什么","需要","收到","随处可见","自然","公众","打","兴趣","另外","要求","有","订阅","这样","随处","的","据传","看","数据","小编"],"title":"发布/订阅模型","title_tokens":["/","订阅","发布","模型"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["挺","没错","知道","了","东西","、","每个","该","通信模型","建议","发布","被","还是","，","并","2","节点","3","里","ros","指令","发布者","和","因为","号","优先","听","很多","想下","注意","对","是","称之为","机器人","也","控制","多个","不是","人","是不是","这些","不然","存在","话题","这个","。","唯一","者","杂志","发送"," ","机器","1","仔细","一个","大家","魔性","个","通信","优先级","一样","报纸","如果","之为","要","摇杆","可以","模型","一下","我们","公众","谁","想象","数量","画面","有","多","订阅","区分","再","可能","的","控制指令","不","似乎"],"title":"多对多通信","title_tokens":["通信","多","对"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["后","知道","了","让","发出","就是","叫做","用于","文章","发布","适合","就","较强","用","并不知道","，","这","指令","一份","发布者","类似","修改","第一","比如","不知","号","更","异步","是","指","一些","还有","也","控制","合适","第一次","特性","古月","某","传输","话题","这个","居","。","传感器","者","参数"," ","阅读","报社","逻辑","等等","一个","一篇","某些","通信","一次","？","报纸","运动","如果","那","词","传感","逻辑性","可以","周期","同学","只要","听说","什么","收到","公众","所谓","感器","有","根本","订阅","可能","时候","的","太","不","数据","你"],"title":"异步通信","title_tokens":["通信","异步"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["了","进行","成","接口","自行","无关","中文","、","接口定义","每个","数据传输","编程语言","发布","得","说","就","描述","定义","，","节点","通过","文件","ros","发布者","包含","和","与","比如","一种","复杂","长宽","值","是","结构","系统","称之为","机器人","也","对应","消息","各样","在","编程","msg","传输","话题","语言","。","者","标准","积木","各种","既然","不能","组成"," ","机器","块","都","图像","方式","这里","等等","一个","通信","一样","最后","统一","之为","格式","可以","会","后缀","理解","我们",".","有","各种各样","rgb","订阅","这样","的","数据结构","据传","像","英文","中","概念","数据","拼接","像素"],"title":"消息接口","title_tokens":["接口","消息"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_7","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。","text_tokens":["话题","。","了","接下","编写","我们","基本原理","啦","下来","代码","基本","开始","的","了解","原理","，","本原","就要","接下来"],"title":"编程方法","title_tokens":["方法","编程"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_8","text":"请大家先按照这个流程创建工作空间、下载课程的例程代码，并进行编译。 $ mkdir –p dev_ws/src $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build","text_tokens":["_","togetherros","工作","这个","创建","git","。","p","进行","guyuehome","编译","src",":","按照","dev","https","、","colcon","gitee","/"," ","userdata","tutorials",".","例程","$","流程","–","代码","mkdir","大家","的","先","下载","cd","clone","空间","build","，","ws","并","请","com","课程"],"title":"创建工作空间","title_tokens":["工作","创建","空间"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_9","text":"编译成功后，我们尝试运行话题通信的Hello World例程，在这个例程中，我们会先创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_topic_cpp talker $ ros2 run learning_topic_cpp listener 这就是TogetherROS系统中话题通信的方法，依然沿用了ROS2中话题通信的完整流程。","text_tokens":["world","source","话题","这个","尝试","创建","“","发布者","ros","。","后","bash","learning","_","会先","了","编译","从而","字符","install","周期","者","标准","运行","发送","我们","cpp","/","类型","chatter"," ","接收","talker","就是",".","listener","完整","例程","$","依然","流程","是","系统","一个","订阅","发布","setup","方法","再","沿用","”","通信","run","的","成功","消息","hello","ros2","定义","tros","topic","到","在","local","，","字符串","中","这","string","togetherros","opt"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_10","text":"发布者的实现方法publisher_member_function.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using namespace std :: chrono_literals ; /* This example creates a subclass of Node and uses std::bind() to register a * member function as a callback from the timer. */ class MinimalPublisher : public rclcpp :: Node { public : MinimalPublisher () : Node ( \"minimal_publisher\" ), count_ ( 0 ) { publisher_ = this -> create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & MinimalPublisher :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, world! \" + std :: to_string ( count_ ++ ); RCLCPP_INFO ( this -> get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者的实现方法subscriber_member_function.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using std :: placeholders :: _1 ; class MinimalSubscriber : public rclcpp :: Node { public : MinimalSubscriber () : Node ( \"minimal_subscriber\" ) { subscription_ = this -> create_subscription < std_msgs :: msg :: String > ( \"topic\" , 10 , std :: bind ( & MinimalSubscriber :: topic_callback , this , _1 )); } private : void topic_callback ( const std_msgs :: msg :: String :: SharedPtr msg ) const { RCLCPP_INFO ( this -> get_logger (), \"I heard: '%s'\" , msg -> data . c_str ()); } rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["and","[","from","the","node","init","cpp","<","/","argv","sharedptr","private","subscriber","=","方法","发布","：","argc","hello","c","s","std","'","minimalsubscriber","发布者","publisher","timerbase","count","class","void","%","i","minimal","namespace","!","uses","实现","callback",",","minimalpublisher",">","example","*","register","make","main","msg","member","0","500","create","world","of","size","publish","data","\"","heard",":","functional","者",")","subclass","t","+","as"," ","1","shared","-","++","function","creates","shutdown","using","a","timer","#","int","bind","chrono","get",";","string","auto","_","to","10","placeholders","literals","rclcpp","char","return","{","hpp","(","this","publishing","message","subscription","const",".","ms","]","info","wall","订阅","public","的","include","msgs","&","topic","memory","spin","logger","}","str"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/","text":"多节点服务通信 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 编程方法 了解了服务通信的原理，接下来我们就要开始编写代码啦，我们尝试通过服务实现一个加法求解器的功能。 运行示例程序 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 我们一起操作下这个例程。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_service_cpp server $ ros2 run learning_service_cpp client 2 3 话题和服务是最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 代码解析 服务器端add_two_ints_server.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <memory> void add ( const std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Request> request, std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Response> response ) { response->sum = request->a + request->b ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Incoming request\\na: %ld\" \" b: %ld\" , request->a, request->b ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"sending back response: [%ld]\" , ( long int ) response->sum ) ; } int main ( int argc, char **argv ) { rclcpp::init ( argc, argv ) ; std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared ( \"add_two_ints_server\" ) ; rclcpp::Service<learning_service_cpp::srv::AddTwoInts>::SharedPtr service = node->create_service<learning_service_cpp::srv::AddTwoInts> ( \"add_two_ints\" , & add ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Ready to add two ints.\" ) ; rclcpp::spin ( node ) ; rclcpp::shutdown () ; } 客户端add_two_ints_client.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <chrono> #include <cstdlib> #include <memory> using namespace std :: chrono_literals ; int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); if ( argc != 3 ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"usage: add_two_ints_client X Y\" ); return 1 ; } std :: shared_ptr < rclcpp :: Node > node = rclcpp :: Node :: make_shared ( \"add_two_ints_client\" ); rclcpp :: Client < learning_service_cpp :: srv :: AddTwoInts >:: SharedPtr client = node -> create_client < learning_service_cpp :: srv :: AddTwoInts > ( \"add_two_ints\" ); auto request = std :: make_shared < learning_service_cpp :: srv :: AddTwoInts :: Request > (); request -> a = atoll ( argv [ 1 ]); request -> b = atoll ( argv [ 2 ]); while ( ! client -> wait_for_service ( 1 s )) { if ( ! rclcpp :: ok ()) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Interrupted while waiting for the service. Exiting.\" ); return 0 ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"service not available, waiting again...\" ); } auto result = client -> async_send_request ( request ); // Wait for the result. if ( rclcpp :: spin_until_future_complete ( node , result ) == rclcpp :: FutureReturnCode :: SUCCESS ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"Sum: %ld\" , result . get () -> sum ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Failed to call service add_two_ints\" ); } rclcpp :: shutdown (); return 0 ; }","text_tokens":["是否","传递","苹果","之间","知道","进行","waiting","[","前者","等","exiting","node","init","cpp","加法","argv","$","send","发布","具体","：","访问","\\","定义","一般","务器","back","将","成为","简称","原理","跟随","有所不同","解析","节点","2","std","半天","发布者","然后","srv","给","有所","两个","出去","处理","高","更","服务器端","所以","异步","是","后者","again","namespace","发","实现",",","开始",">","越好","make","main","编程","msg","这些","create","这个","居","until","\"","同样",":","附近","install","同步","程序","标准",")","发送","很","各种","页面"," ","获取","啦","视觉","最新","客户","上","数据通","int","运动","答","chrono","get",";","_","to","尝试","相比","按照","请求","{","hpp","(","futurereturncode",".","学习","na","命令","&","两种","spin","示例","中","数据","当","atoll","结果","了","success","成","the","核心","功能","运行","物体","转圈圈","周期性","<","此时","但","适合","”","argc","就","还是","网站","在生活中","for","usage","ros","同步性","和","某个","void","接下","一种","%","add","async","坐标","从","下来","!","还有","机器人","求解","*","ros2","while","在","人","课程","古月","存在","话题","形式","时","传感器","不同","应答","+","变成","x","加数","future","使用","提供","通信","shutdown","using","a","问","之为","auto","传感","要","会","位置","宕机","literals","周期","not","available","需要","我们","const","要求","else","不好","感器","info","complete","多","服务","这样","介绍","时候","一问一答","机制","}","其中","后","接口","域名","服务器发送","一直","就是","通信模型","常见","=","方法","返回","run","并不需要","了解","查询","tros","s","就要","并","通过","没有","文件","过程","信息","发给","但是","完全","每","计算","比如","long","我","addtwoints","越快越好","request","client","称之为","反应","也","应用","多个","response","界面","service","电脑","传输","...","ints","。","生活","者","圈圈","incoming","机器","接收","ready","都","一个","setup","大家","某些","一样","到","展现","local","#","ld","接下来","cs","那有","而是","rclcpp","char","编写","服务器","—","经常","]","另外","wait","反馈","sum","可能","客户端","的","下","include","控制指令","interrupted","memory","logger","一起","source","“","传递数据","转圈","cstdlib","ptr","、","/","if","之后","sharedptr","叫做","器","代码","效果","server","求和","假设","为","向","，","3","频率","指令","来看","类似","部分","这种","好像","看到","对","状态","或者","针对","得到","two","控制","消息","call","0","本","opt","bash","判断","最为","learning","尽快","网络","唯一","常用","识别","图像识别","红色","b","error","越快","1","继续","例程","无法","图像","一对","shared","封装","-","这么","y","准确","目标","希望","数据通信","ok","驱动","可以","单向","相机","浏览","failed","网页","return","模型","收到","想要","上层","sending","后续","订阅","操作","result","不","讲","之前","你","浏览器"],"title":"多节点服务通信","title_tokens":["通信","服务","多","节点"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["话题","ros","是否","发布者","。","之间","知道","类似","可以","单向","同步","常用","这种","者","我","我们","收到","一种"," ","使用","—","无法","另外","学习","异步","实现","发布","订阅","方法","服务","效果","通信","的","消息","多个","准确","讲","将","机制","一起","问","，","节点","答","数据","你","本","传输"],"title":"多节点服务通信","title_tokens":["通信","服务","多","节点"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["了","物体","一直","此时","通信模型","发布","并不需要","查询","成为","跟随","，","有所不同","节点","通过","并","频率","ros","然后","信息","发给","有所","和","这种","比如","高","我","更","好像","对","是","或者","发","实现","机器人","得到","应用","在","service","课程","传输","话题","这个","形式","。","尽快","不同","应答","附近","识别","图像识别","红色","发送","变成"," ","机器","使用","继续","图像","一个","最新","这么","通信","一样","到","目标","问","运动","希望","答","驱动","可以","而是","单向","相机","位置","按照","周期","请求","模型","需要","我们","另外","上层","反馈","订阅","服务","这样","时候","的","机制","之前","中","其中","数据","你"],"title":"通信模型","title_tokens":["通信","通信模型","模型"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["形式","来看","cs","。","信息","进行","展现","生活","会","浏览","应答","域名","某个","这种","请求","比如","网页","模型","处理","需要","服务器发送","我","发送","收到","/","很","服务器端","我们","各种","页面"," ","之后","就是","叫做","服务器","经常","从","此时","反馈","常见","或者","实现","客户","具体","服务","针对","也","某些","返回","时候","客户端","的","通信","上","操作","就","务器","为","网站","向","机制","问","简称","在","，","在生活中","答","并","通过","数据","你","浏览器","电脑"],"title":"客户端/服务器模型","title_tokens":["务器","模型","/","客户","服务","服务器","客户端"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["话题","这个","判断","过程","那有","。","了","信息","转圈","可以","网络","浏览","相比","应答","宕机","同步","半天","转圈圈","越快越好","我们","服务器端","一直","圈圈","接收","越快","所以","服务器","要求","状态","是","不好","或者","称之为","反应","客户","服务","也","可能","通信","客户端","的","越好","一般","假设","务器","到","在","，","中","通过","没有","你","浏览器","之为"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["这个","居","。","可以","古月","同样","但是","完全","每","唯一","比如","模型","服务器端","所以","服务器","都","看到","是","通信模型","但","一个","客户","大家","服务","通信","客户端","的","一样","访问","务器","多个","不","网站","界面","，","人","并","中","没有","存在"],"title":"一对多通信","title_tokens":["通信","多","一对"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["话题","ros","要","传递","苹果","。","传递数据","了","类似","srv","会","给","两个","位置","部分","和","核心","请求","比如","标准","我们","变成"," ","使用",".","坐标","是","反馈","一个","后续","还有","方法","大家","服务","也","介绍","通信","的","命令","一样","消息","定义","还是","在","，","中","msg","数据","这些","文件"],"title":"服务接口","title_tokens":["服务","接口"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_7","text":"了解了服务通信的原理，接下来我们就要开始编写代码啦，我们尝试通过服务实现一个加法求解器的功能。","text_tokens":["尝试","。","了","功能","接下","编写","我们","加法","啦","器","下来","代码","一个","实现","服务","开始","通信","求解","的","了解","原理","，","就要","通过","接下来"],"title":"编程方法","title_tokens":["方法","编程"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_8","text":"当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 我们一起操作下这个例程。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_service_cpp server $ ros2 run learning_service_cpp client 2 3 话题和服务是最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。","text_tokens":["source","“","结果","后","进行","成","前者","等","、","周期性","cpp","/","加法","之后","$","方法","适合","”","server","求和","run","就","务器","tros","将","，","节点","通过","并","2","3","指令","给","两个","出去","同步性","计算","和","比如","高","更","服务器端","add","client","是","后者","针对","得到","two","开始","控制","ros2","service","opt","传输","bash","这个","ints","话题","时","。","learning","最为","传感器","应答","install","同步","常用","识别","发送","加数"," ","获取","机器","啦","例程","视觉","提供","客户","setup","封装","通信","到","local","数据通","目标","数据通信","_","传感","可以","单向","位置","周期","请求","需要","我们","收到","想要",".","服务器","要求","反馈","感器","服务","一问一答","操作","客户端","的","下","控制指令","两种","一起","数据","当"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_9","text":"服务器端add_two_ints_server.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <memory> void add ( const std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Request> request, std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Response> response ) { response->sum = request->a + request->b ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Incoming request\\na: %ld\" \" b: %ld\" , request->a, request->b ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"sending back response: [%ld]\" , ( long int ) response->sum ) ; } int main ( int argc, char **argv ) { rclcpp::init ( argc, argv ) ; std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared ( \"add_two_ints_server\" ) ; rclcpp::Service<learning_service_cpp::srv::AddTwoInts>::SharedPtr service = node->create_service<learning_service_cpp::srv::AddTwoInts> ( \"add_two_ints\" , & add ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Ready to add two ints.\" ) ; rclcpp::spin ( node ) ; rclcpp::shutdown () ; } 客户端add_two_ints_client.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <chrono> #include <cstdlib> #include <memory> using namespace std :: chrono_literals ; int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); if ( argc != 3 ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"usage: add_two_ints_client X Y\" ); return 1 ; } std :: shared_ptr < rclcpp :: Node > node = rclcpp :: Node :: make_shared ( \"add_two_ints_client\" ); rclcpp :: Client < learning_service_cpp :: srv :: AddTwoInts >:: SharedPtr client = node -> create_client < learning_service_cpp :: srv :: AddTwoInts > ( \"add_two_ints\" ); auto request = std :: make_shared < learning_service_cpp :: srv :: AddTwoInts :: Request > (); request -> a = atoll ( argv [ 1 ]); request -> b = atoll ( argv [ 2 ]); while ( ! client -> wait_for_service ( 1 s )) { if ( ! rclcpp :: ok ()) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Interrupted while waiting for the service. Exiting.\" ); return 0 ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"service not available, waiting again...\" ); } auto result = client -> async_send_request ( request ); // Wait for the result. if ( rclcpp :: spin_until_future_complete ( node , result ) == rclcpp :: FutureReturnCode :: SUCCESS ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"Sum: %ld\" , result . get () -> sum ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Failed to call service add_two_ints\" ); } rclcpp :: shutdown (); return 0 ; }","text_tokens":["atoll","waiting","success","[","exiting","the","cstdlib","ptr","node","init","cpp","/","<","if","argv","sharedptr","send","=","：","argc","server","\\","务器","back","s","std","2","for","usage","3","srv","long","void","addtwoints","%","服务器端","request","add","async","client","again","namespace","!",",","two",">","*","call","make","response","main","while","service","0","create","...","ints","learning","until","\"",":",")","b","+","x","incoming","error","future"," ","ready","1","shared","客户","-","shutdown","using","y","a","#","int","ld","chrono","get",";","auto","_","ok","to","failed","literals","rclcpp","char","return","not","{","hpp","(","available","futurereturncode","const",".","服务器","wait","]","sending","else","complete","info","sum","服务","na","客户端","include","interrupted","result","&","memory","spin","logger","}"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/","text":"多节点动作通信 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 编程方法 相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 运行示例程序 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_action_cpp server $ ros2 run learning_action_cpp client 代码解析 动作的服务器fibonacci_action_server.cpp： #include <inttypes.h> #include <memory> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO(jacobperron): Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionServer : public rclcpp :: Node { public : using Fibonacci = learning_action_cpp :: action :: Fibonacci ; using GoalHandleFibonacci = rclcpp_action :: ServerGoalHandle < Fibonacci > ; explicit MinimalActionServer ( const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : Node ( \"minimal_action_server\" , options ) { using namespace std :: placeholders ; this -> action_server_ = rclcpp_action :: create_server < Fibonacci > ( this -> get_node_base_interface (), this -> get_node_clock_interface (), this -> get_node_logging_interface (), this -> get_node_waitables_interface (), \"fibonacci\" , std :: bind ( & MinimalActionServer :: handle_goal , this , _1 , _2 ), std :: bind ( & MinimalActionServer :: handle_cancel , this , _1 ), std :: bind ( & MinimalActionServer :: handle_accepted , this , _1 )); } private : rclcpp_action :: Server < Fibonacci >:: SharedPtr action_server_ ; rclcpp_action :: GoalResponse handle_goal ( const rclcpp_action :: GoalUUID & uuid , std :: shared_ptr < const Fibonacci :: Goal > goal ) { RCLCPP_INFO ( this -> get_logger (), \"Received goal request with order %d\" , goal -> order ); ( void ) uuid ; // Let's reject sequences that are over 9000 if ( goal -> order > 9000 ) { return rclcpp_action :: GoalResponse :: REJECT ; } return rclcpp_action :: GoalResponse :: ACCEPT_AND_EXECUTE ; } rclcpp_action :: CancelResponse handle_cancel ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Received request to cancel goal\" ); ( void ) goal_handle ; return rclcpp_action :: CancelResponse :: ACCEPT ; } void execute ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Executing goal\" ); rclcpp :: Rate loop_rate ( 1 ); const auto goal = goal_handle -> get_goal (); auto feedback = std :: make_shared < Fibonacci :: Feedback > (); auto & sequence = feedback -> sequence ; sequence . push_back ( 0 ); sequence . push_back ( 1 ); auto result = std :: make_shared < Fibonacci :: Result > (); for ( int i = 1 ; ( i < goal -> order ) && rclcpp :: ok (); ++ i ) { // Check if there is a cancel request if ( goal_handle -> is_canceling ()) { result -> sequence = sequence ; goal_handle -> canceled ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Canceled\" ); return ; } // Update sequence sequence . push_back ( sequence [ i ] + sequence [ i - 1 ]); // Publish feedback goal_handle -> publish_feedback ( feedback ); RCLCPP_INFO ( this -> get_logger (), \"Publish Feedback\" ); loop_rate . sleep (); } // Check if goal is done if ( rclcpp :: ok ()) { result -> sequence = sequence ; goal_handle -> succeed ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Succeeded\" ); } } void handle_accepted ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { using namespace std :: placeholders ; // this needs to return quickly to avoid blocking the executor, so spin up a new thread std :: thread { std :: bind ( & MinimalActionServer :: execute , this , _1 ), goal_handle }. detach (); } }; // class MinimalActionServer int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); auto action_server = std :: make_shared < MinimalActionServer > (); rclcpp :: spin ( action_server ); rclcpp :: shutdown (); return 0 ; } 动作的客户端fibonacci_action_client.cpp： #include <inttypes.h> #include <memory> #include <string> #include <iostream> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO ( jacobperron ) : Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionClient : public rclcpp::Node { public: using Fibonacci = learning_action_cpp::action::Fibonacci ; using GoalHandleFibonacci = rclcpp_action::ClientGoalHandle<Fibonacci> ; explicit MinimalActionClient ( const rclcpp::NodeOptions & node_options = rclcpp::NodeOptions ()) : Node ( \"minimal_action_client\" , node_options ) , goal_done_ ( false ) { this->client_ptr_ = rclcpp_action::create_client<Fibonacci> ( this->get_node_base_interface () , this->get_node_graph_interface () , this->get_node_logging_interface () , this->get_node_waitables_interface () , \"fibonacci\" ) ; this->timer_ = this->create_wall_timer ( std::chrono::milliseconds ( 500 ) , std::bind ( & MinimalActionClient::send_goal, this )) ; } bool is_goal_done () const { return this->goal_done_ ; } void send_goal () { using namespace std::placeholders ; this->timer_->cancel () ; this->goal_done_ = false ; if ( !this->client_ptr_ ) { RCLCPP_ERROR ( this->get_logger () , \"Action client not initialized\" ) ; } if ( !this->client_ptr_->wait_for_action_server ( std::chrono::seconds ( 10 ))) { RCLCPP_ERROR ( this->get_logger () , \"Action server not available after waiting\" ) ; this->goal_done_ = true ; return ; } auto goal_msg = Fibonacci::Goal () ; goal_msg.order = 10 ; RCLCPP_INFO ( this->get_logger () , \"Sending goal\" ) ; auto send_goal_options = rclcpp_action::Client<Fibonacci>::SendGoalOptions () ; send_goal_options.goal_response_callback = std::bind ( & MinimalActionClient::goal_response_callback, this, _1 ) ; send_goal_options.feedback_callback = std::bind ( & MinimalActionClient::feedback_callback, this, _1, _2 ) ; send_goal_options.result_callback = std::bind ( & MinimalActionClient::result_callback, this, _1 ) ; auto goal_handle_future = this->client_ptr_->async_send_goal ( goal_msg, send_goal_options ) ; } private: rclcpp_action::Client<Fibonacci>::SharedPtr client_ptr_ ; rclcpp::TimerBase::SharedPtr timer_ ; bool goal_done_ ; void goal_response_callback ( std::shared_future<GoalHandleFibonacci::SharedPtr> future ) { auto goal_handle = future.get () ; if ( !goal_handle ) { RCLCPP_ERROR ( this->get_logger () , \"Goal was rejected by server\" ) ; } else { RCLCPP_INFO ( this->get_logger () , \"Goal accepted by server, waiting for result\" ) ; } } void feedback_callback ( GoalHandleFibonacci::SharedPtr, const std::shared_ptr<const Fibonacci::Feedback> feedback ) { RCLCPP_INFO ( this->get_logger () , \"Next number in sequence received: %\" PRId32, feedback->sequence.back ()) ; } void result_callback ( const GoalHandleFibonacci::WrappedResult & result ) { this->goal_done_ = true ; switch ( result.code ) { case rclcpp_action::ResultCode::SUCCEEDED: break ; case rclcpp_action::ResultCode::ABORTED: RCLCPP_ERROR ( this->get_logger () , \"Goal was aborted\" ) ; return ; case rclcpp_action::ResultCode::CANCELED: RCLCPP_ERROR ( this->get_logger () , \"Goal was canceled\" ) ; return ; default: RCLCPP_ERROR ( this->get_logger () , \"Unknown result code\" ) ; return ; } RCLCPP_INFO ( this->get_logger () , \"Result received\" ) ; for ( auto number : result.result->sequence ) { RCLCPP_INFO ( this->get_logger () , \"%\" PRId32, number ) ; } } } ; // class MinimalActionClient int main ( int argc, char ** argv ) { rclcpp::init ( argc, argv ) ; auto action_client = std::make_shared<MinimalActionClient> () ; while ( !action_client->is_goal_done ()) { rclcpp::spin_some ( action_client ) ; } rclcpp::shutdown () ; return 0 ; }","text_tokens":["and","只能","想","知道","进行","waiting","[","等","after","node","included","cpp","init","argv","相对","$","send","取消","具体","被","发布","：","基于","initialized","are","1s","定义","务器","logging","back","解析","节点","std","2","new","it","发布者","两个","20","nodeoptions","服务器端","sequence","不仅仅","minimalactionclient","是","namespace","三个","实现",",","开始",">","update","make","有没有","main","_-","编程","msg","这些","500","create","some","这个","\"",":","that","install","同步","程序",")","发送","很","既然"," ","prid32","仔细","is","sleep","上边","客户","需求","上","过","只有","整个","？","int","运动","waitables","chrono","那","一点",";","get","handle","_","to","调用","accepted","10","相比","送餐","请求","{","hpp","(","名字",".","wrappedresult","多少度","遥控","bool","canceling","再","milliseconds","9000","avoid","minimalactionserver","仅仅","命令","一","&","sendgoaloptions","spin","示例","中","看","数据","动","当","false","眼前","goaluuid","了","once","push","进度","accept","每隔","the","让","功能","interface","就此","运行","execute","<","发出","进度条","竟然","cancel","应用层","用到","得","argc","目的","就","哪里","clock","for","'","抓取","goalresponse","ros","timerbase","通信接口","例子","seconds","和","某个","时间","uuid","void","一种","%","i","由","复杂","async","part","还","thread","坐标","从","!","送货","机器人","举个","合成","*","ros2","一点一点","合适","while","又","在","才能","不是","base","当中","there","话题","时","goalhandlefibonacci","aborted","执行","publish","&&","满足","表示","动图","+","30","future","使用","多少","over","options","sequences","模块","通信","shutdown","inttypes","using","a","timer","unknown","如果","reject","其","到底","auto","度","placeholders","会","rejected","周期","not","available","需要","控","我们","needs","d","const","告诉","else","干什么","executor","info","根本","有","多","服务","public","这样","隐藏","介绍","机制","便于","概念","}","switch","现在","后","一段时间","结束","接口","break","feedback","管理","好","就是","同时","通信模型","=","方法","run","一边","tros","s","并","没有","文件","导航","过程","信息","某一","但是","肯定","比如","class","request","client","分析","系统","rate","callback","也","旋转","应用","多个","response","底层","是不是","servergoalhandle","explicit","。","done","canceled","in","实时","was","者","把","机器","都","一个","当前","setup","大家","转个","动作","succeeded","一样","还会","臂","到","local","#","action","string","圈","一段","rclcpp","char","简单","h","clientgoalhandle","服务器","—","]","wait","另外","场景","反馈","wall","可能","起来","received","客户端","的","下","include","先","常常","memory","fibonacci","logger","by","source","姿态","没错","转圈","应带","detach","ptr","、","code","/","毕竟","if","之后","todo","sharedptr","private","360","代码","server","转","假设","其实","loop","，","这","executing","指令","let","remove","类似","键盘","true","这种","智能","default","minimal","对","状态","控制","所处","with","resultcode","不仅","随时","0","opt","bash","learning","of","装","number","就此结束","order","jacobperron","识别","succeed","as","error","quickly","1","例程","流程","一对","shared","-","++","这么","cancelresponse","graph","目标","so","bind","ok","next","goal","可以","行为","秘密","case","机械","分拣","return","直到","理解","模型","什么","达到","一下","this","收到","完整","up","完成","含义","sending","较长","订阅","更为","iostream","段时间","check","发现","result","不","来","之前","像","blocking"],"title":"多节点动作通信","title_tokens":["动作","通信","多","节点"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["ros","这个","。","进行","键盘","某一","可以","会","行为","等","满足","某个","送餐","这种","功能","分拣","、","识别","名字","需要","理解","我们","一种","很","简单","智能","管理","完整","机器"," ","复杂","就是","好","—","不仅仅","另外","对","含义","从","流程","是","遥控","场景","系统","一个","实现","送货","具体","被","机器人","用到","这么","也","动作","需求","通信","仅仅","的","应用","上","目的","就","常常","不仅","机制","目标","在","，","运动","并","中","概念","便于","这些","那"],"title":"多节点动作通信","title_tokens":["动作","通信","多","节点"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["现在","想","眼前","后","知道","了","一段时间","结束","转圈","进度","每隔","让","、","发出","进度条","之后","360","取消","得","1s","转","就","假设","哪里","，","并","没有","这","指令","过程","信息","例子","肯定","比如","20","时间","还","是","机器人","举个","开始","旋转","一点一点","合适","有没有","才能","在","不是","当中","随时","。","装","执行","表示","发送","把","30","机器"," ","多少","使用","一个","当前","转个","动作","通信","到","？","运动","如果","到底","一点","度","ok","10","可以","圈","行为","一段","直到","需要","一下","我们","控","告诉","完成","多少度","反馈","根本","更为","再","这样","的","段时间","命令","不","机制","像"],"title":"通信模型","title_tokens":["通信","通信模型","模型"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["这个","想","导航","过程","。","执行","姿态","类似","后","结束","信息","就此结束","机械","实时","和","让","周期","就此","模型","达到","什么","发送","收到","服务器端","机器","使用"," ","之后","服务器","坐标","同时","状态","是","干什么","反馈","一个","客户","当前","机器人","服务","再","也","可能","起来","动作","控制","客户端","的","开始","所处","通信","臂","就","一边","务器","整个","又","目标","，","运动","中","如果","抓取","动","当"],"title":"客户端/服务器模型","title_tokens":["务器","模型","/","客户","服务","服务器","客户端"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["只能","。","执行","可以","但是","和","发送","毕竟","服务器端","机器","服务器","都","完成","有","一个","客户","大家","机器人","服务","动作","通信","客户端","命令","的","一样","下","先","务器","多个","只有","才能","，","运动","中"],"title":"一对多通信","title_tokens":["通信","多","一对"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["过程","。","通信接口","文件","进行","接口","同步","我们","一种","既然","使用",".","是","反馈","有","也","介绍","动作","通信","的","定义","过","机制","，","之前","中","数据","那","action"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["话题","调用","时","。","过程","发布者","没错","实现","会","两个","秘密","应带","和","周期","请求","者","动图","表示","发送","收到","一种","服务器端"," ","使用","就是","服务器","仔细","竟然","是","反馈","一个","三个","上边","有","订阅","客户","发布","大家","再","模块","服务","也","应用层","基于","隐藏","动作","通信","下","的","客户端","命令","发现","还会","应用","务器","来","其实","机制","目标","不是","，","运动","底层","看","是不是","其","当"],"title":"由服务和话题合成","title_tokens":["话题","服务","由","和","合成"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_7","text":"相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["话题","。","相比","和","程序","运行","一下","我们","相对","例程","分析","较长","服务","起来","动作","通信","的","一","之前","，","并"],"title":"编程方法","title_tokens":["方法","编程"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_8","text":"$ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_action_cpp server $ ros2 run learning_action_cpp client","text_tokens":["_","source","bash","learning","install","cpp","/"," ",".","client","$","setup","server","run","ros2","tros","local","action","opt"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_9","text":"动作的服务器fibonacci_action_server.cpp： #include <inttypes.h> #include <memory> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO(jacobperron): Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionServer : public rclcpp :: Node { public : using Fibonacci = learning_action_cpp :: action :: Fibonacci ; using GoalHandleFibonacci = rclcpp_action :: ServerGoalHandle < Fibonacci > ; explicit MinimalActionServer ( const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : Node ( \"minimal_action_server\" , options ) { using namespace std :: placeholders ; this -> action_server_ = rclcpp_action :: create_server < Fibonacci > ( this -> get_node_base_interface (), this -> get_node_clock_interface (), this -> get_node_logging_interface (), this -> get_node_waitables_interface (), \"fibonacci\" , std :: bind ( & MinimalActionServer :: handle_goal , this , _1 , _2 ), std :: bind ( & MinimalActionServer :: handle_cancel , this , _1 ), std :: bind ( & MinimalActionServer :: handle_accepted , this , _1 )); } private : rclcpp_action :: Server < Fibonacci >:: SharedPtr action_server_ ; rclcpp_action :: GoalResponse handle_goal ( const rclcpp_action :: GoalUUID & uuid , std :: shared_ptr < const Fibonacci :: Goal > goal ) { RCLCPP_INFO ( this -> get_logger (), \"Received goal request with order %d\" , goal -> order ); ( void ) uuid ; // Let's reject sequences that are over 9000 if ( goal -> order > 9000 ) { return rclcpp_action :: GoalResponse :: REJECT ; } return rclcpp_action :: GoalResponse :: ACCEPT_AND_EXECUTE ; } rclcpp_action :: CancelResponse handle_cancel ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Received request to cancel goal\" ); ( void ) goal_handle ; return rclcpp_action :: CancelResponse :: ACCEPT ; } void execute ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Executing goal\" ); rclcpp :: Rate loop_rate ( 1 ); const auto goal = goal_handle -> get_goal (); auto feedback = std :: make_shared < Fibonacci :: Feedback > (); auto & sequence = feedback -> sequence ; sequence . push_back ( 0 ); sequence . push_back ( 1 ); auto result = std :: make_shared < Fibonacci :: Result > (); for ( int i = 1 ; ( i < goal -> order ) && rclcpp :: ok (); ++ i ) { // Check if there is a cancel request if ( goal_handle -> is_canceling ()) { result -> sequence = sequence ; goal_handle -> canceled ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Canceled\" ); return ; } // Update sequence sequence . push_back ( sequence [ i ] + sequence [ i - 1 ]); // Publish feedback goal_handle -> publish_feedback ( feedback ); RCLCPP_INFO ( this -> get_logger (), \"Publish Feedback\" ); loop_rate . sleep (); } // Check if goal is done if ( rclcpp :: ok ()) { result -> sequence = sequence ; goal_handle -> succeed ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Succeeded\" ); } } void handle_accepted ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { using namespace std :: placeholders ; // this needs to return quickly to avoid blocking the executor, so spin up a new thread std :: thread { std :: bind ( & MinimalActionServer :: execute , this , _1 ), goal_handle }. detach (); } }; // class MinimalActionServer int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); auto action_server = std :: make_shared < MinimalActionServer > (); rclcpp :: spin ( action_server ); rclcpp :: shutdown (); return 0 ; } 动作的客户端fibonacci_action_client.cpp： #include <inttypes.h> #include <memory> #include <string> #include <iostream> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO ( jacobperron ) : Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionClient : public rclcpp::Node { public: using Fibonacci = learning_action_cpp::action::Fibonacci ; using GoalHandleFibonacci = rclcpp_action::ClientGoalHandle<Fibonacci> ; explicit MinimalActionClient ( const rclcpp::NodeOptions & node_options = rclcpp::NodeOptions ()) : Node ( \"minimal_action_client\" , node_options ) , goal_done_ ( false ) { this->client_ptr_ = rclcpp_action::create_client<Fibonacci> ( this->get_node_base_interface () , this->get_node_graph_interface () , this->get_node_logging_interface () , this->get_node_waitables_interface () , \"fibonacci\" ) ; this->timer_ = this->create_wall_timer ( std::chrono::milliseconds ( 500 ) , std::bind ( & MinimalActionClient::send_goal, this )) ; } bool is_goal_done () const { return this->goal_done_ ; } void send_goal () { using namespace std::placeholders ; this->timer_->cancel () ; this->goal_done_ = false ; if ( !this->client_ptr_ ) { RCLCPP_ERROR ( this->get_logger () , \"Action client not initialized\" ) ; } if ( !this->client_ptr_->wait_for_action_server ( std::chrono::seconds ( 10 ))) { RCLCPP_ERROR ( this->get_logger () , \"Action server not available after waiting\" ) ; this->goal_done_ = true ; return ; } auto goal_msg = Fibonacci::Goal () ; goal_msg.order = 10 ; RCLCPP_INFO ( this->get_logger () , \"Sending goal\" ) ; auto send_goal_options = rclcpp_action::Client<Fibonacci>::SendGoalOptions () ; send_goal_options.goal_response_callback = std::bind ( & MinimalActionClient::goal_response_callback, this, _1 ) ; send_goal_options.feedback_callback = std::bind ( & MinimalActionClient::feedback_callback, this, _1, _2 ) ; send_goal_options.result_callback = std::bind ( & MinimalActionClient::result_callback, this, _1 ) ; auto goal_handle_future = this->client_ptr_->async_send_goal ( goal_msg, send_goal_options ) ; } private: rclcpp_action::Client<Fibonacci>::SharedPtr client_ptr_ ; rclcpp::TimerBase::SharedPtr timer_ ; bool goal_done_ ; void goal_response_callback ( std::shared_future<GoalHandleFibonacci::SharedPtr> future ) { auto goal_handle = future.get () ; if ( !goal_handle ) { RCLCPP_ERROR ( this->get_logger () , \"Goal was rejected by server\" ) ; } else { RCLCPP_INFO ( this->get_logger () , \"Goal accepted by server, waiting for result\" ) ; } } void feedback_callback ( GoalHandleFibonacci::SharedPtr, const std::shared_ptr<const Fibonacci::Feedback> feedback ) { RCLCPP_INFO ( this->get_logger () , \"Next number in sequence received: %\" PRId32, feedback->sequence.back ()) ; } void result_callback ( const GoalHandleFibonacci::WrappedResult & result ) { this->goal_done_ = true ; switch ( result.code ) { case rclcpp_action::ResultCode::SUCCEEDED: break ; case rclcpp_action::ResultCode::ABORTED: RCLCPP_ERROR ( this->get_logger () , \"Goal was aborted\" ) ; return ; case rclcpp_action::ResultCode::CANCELED: RCLCPP_ERROR ( this->get_logger () , \"Goal was canceled\" ) ; return ; default: RCLCPP_ERROR ( this->get_logger () , \"Unknown result code\" ) ; return ; } RCLCPP_INFO ( this->get_logger () , \"Result received\" ) ; for ( auto number : result.result->sequence ) { RCLCPP_INFO ( this->get_logger () , \"%\" PRId32, number ) ; } } } ; // class MinimalActionClient int main ( int argc, char ** argv ) { rclcpp::init ( argc, argv ) ; auto action_client = std::make_shared<MinimalActionClient> () ; while ( !action_client->is_goal_done ()) { rclcpp::spin_some ( action_client ) ; } rclcpp::shutdown () ; return 0 ; }","text_tokens":["and","false","goaluuid","once","push","waiting","[","accept","after","detach","break","the","ptr","interface","node","execute","feedback","code","included","cpp","<","/","init","if","todo","sharedptr","argv","private","send","cancel","=","：","initialized","are","server","argc","务器","logging","back","clock","s","loop","std","2","for","'","new","goalresponse","executing","it","let","remove","timerbase","seconds","true","nodeoptions","class","uuid","void","%","request","i","async","sequence","part","client","minimal","thread","minimalactionclient","default","namespace","!","rate","callback",",",">","*","update","with","make","resultcode","response","main","while","_-","base","msg","servergoalhandle","0","500","create","there","some","explicit","learning","of","goalhandlefibonacci","done","aborted","publish","number","\"",":","that","&&","canceled","in","was","order","jacobperron",")","succeed","+","as","error","future","quickly"," ","1","prid32","is","over","sleep","options","shared","sequences","客户","-","++","cancelresponse","graph","动作","succeeded","shutdown","inttypes","using","a","timer","unknown","#","int","so","waitables","reject","bind","chrono","get",";","action","string","handle","_","auto","to","ok","accepted","next","10","goal","placeholders","case","rejected","rclcpp","char","return","not","{","hpp","(","available","this","needs","h","d","clientgoalhandle","const",".","服务器","wait","]","up","wrappedresult","bool","sending","executor","else","canceling","info","wall","服务","milliseconds","public","9000","received","minimalactionserver","avoid","客户端","的","check","iostream","include","result","&","sendgoaloptions","memory","fibonacci","logger","spin","}","by","switch","blocking"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/","text":"零拷贝数据传输 在传统操作系统的数据传输过程中，系统内部会在磁盘、内存、缓存中多次进行数据拷贝，每次都会占用CPU的资源，数据量小的时候还好，随着数据量的增加，CPU的开销也会持续增加，尤其是在机器人图像数据的应用中 ，经常会发生这种问题，导致CPU都在做数据拷贝，没有时间处理其他的应用功能了，直接的感觉就是处理卡顿。 零拷贝技术 针对这种问题，零拷贝技术应运而生。 零拷贝主要的任务就是避免CPU将数据从一块存储拷贝到另外一块存储，避免让CPU做大量的数据拷贝任务，减少不必要的拷贝，或者让别的组件来做这一类简单的数据传输任务，让CPU解脱出来专注于别的任务。这样就可以让系统资源的利用更加有效。 TogetherROS中就提供了灵活、高效的零拷贝功能，可以显著降低大尺寸数据的通信延时和CPU占用，具体有多显著呢，我们不妨进行一个测试。 TogetherROS零拷贝性能测试 我们使用TogetherROS系统内部集成的性能测试工具——performance_test，来评估下开启零拷贝前后的性能差异，这里我们传输的样本数据量是4M。 未开启零拷贝进行数据传输 $ ros2 run performance_test perf_test --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #未开启 开启零拷贝数据传输： $ ros2 run performance_test perf_test --zero-copy --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #开启 好的，测试已经跑完了，我们把结果放到这里，来分析一下。 在这个测试中，关键有四个指标： 时延，也就是消息从发布者到订阅者的传输时间。不开启零拷贝的情况下，平均为0.004912s，开启零拷贝之后，速度快了差不多40倍，平均为0.000180s。 CPU使用率，表示通信活动所占用的CPU时间，大家可以看这个utime指标，开启零拷贝之后时间有显著的提升，消耗CPU的资源少了。 驻留内存，包括通信过程中分配的内存和共享内存，是这个maxrss中的数据，开启零拷贝之后，占用的内存也更少。 样本统计，包括测试中发送、接收以及丢失的消息数量，是这组数据，依然是开启零拷贝之后性能更好。 通过测试，对于大数据通信来讲，零拷贝在CPU消耗、内存占用以及通信延迟抖动方面的性能都会更好。 这里只是便于大家感受零拷贝技术的效果，具体编程中如何使用零拷贝机制呢？ 编程开发 为了方便大家使用，TogetherROS针对零拷贝功能进行了封装，风格类似ROS2中话题通信的接口，还是话题通信一样的流程，我们只需要修改几个函数就可以实现啦。 运行例程 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run hbmem_pubsub talker $ ros2 run hbmem_pubsub listener 代码解析 发布者publisher_hbmem.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" using namespace std :: chrono_literals ; class MinimalHbmemPublisher : public rclcpp :: Node { public : MinimalHbmemPublisher () : Node ( \"minimal_hbmem_publisher\" ), count_ ( 0 ) { // 创建publisher_hbmem，topic为\"topic\"，QOS为KEEPLAST(10)，以及默认的可靠传输 publisher_ = this -> create_publisher_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 ); // 定时器，每隔40毫秒调用一次timer_callback进行消息发送 timer_ = this -> create_wall_timer ( 40 ms , std :: bind ( & MinimalHbmemPublisher :: timer_callback , this )); } private : // 定时器回调函数 void timer_callback () { // 获取要发送的消息 auto loanedMsg = publisher_ -> borrow_loaned_message (); // 判断消息是否可用，可能出现获取消息失败导致消息不可用的情况 if ( loanedMsg . is_valid ()) { // 引用方式获取实际的消息 auto & msg = loanedMsg . get (); // 获取当前时间，单位为us auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()). count (); // 对消息的index和time_stamp进行赋值 msg . index = count_ ; msg . time_stamp = time_now ; // 打印发送消息 RCLCPP_INFO ( this -> get_logger (), \"message: %d\" , msg . index ); publisher_ -> publish ( std :: move ( loanedMsg )); // 注意，发送后，loanedMsg已不可用 // 计数器加一 count_ ++ ; } else { // 获取消息失败，丢弃该消息 RCLCPP_INFO ( this -> get_logger (), \"Failed to get LoanMessage!\" ); } } // 定时器 rclcpp :: TimerBase :: SharedPtr timer_ ; // hbmem publisher rclcpp :: PublisherHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr publisher_ ; // 计数器 size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者subscriber_hbmem.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" class MinimalHbmemSubscriber : public rclcpp :: Node { public : MinimalHbmemSubscriber () : Node ( \"minimal_hbmem_subscriber\" ) { // 创建subscription_hbmem，topic为\"sample\"，QOS为KEEPLAST(10)，以及默认的可靠传输 // 消息回调函数为topic_callback subscription_ = this -> create_subscription_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 , std :: bind ( & MinimalHbmemSubscriber :: topic_callback , this , std :: placeholders :: _1 )); } private : // 消息回调函数 void topic_callback ( const hbmem_pubsub :: msg :: SampleMessage :: SharedPtr msg ) const { // 注意，msg只能在回调函数中使用，回调函数返回后，该消息就会被释放 // 获取当前时间 auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()) . count (); // 计算延时并打印出来 RCLCPP_INFO ( this -> get_logger (), \"msg %d, time cost %dus\" , msg -> index , time_now - msg -> time_stamp ); } // hbmem subscription rclcpp :: SubscriptionHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemSubscriber > ()); rclcpp :: shutdown (); return 0 ; } 接口汇总 我们整理一下，与ROS2中的话题通信相比，TogetherROS带有零拷贝机制的话题通信接口是这样的。 在发布者中，我们可以使用PublisherHbmem来创建一个发布者对象，然后通过create_publisher_hbmem发布数据，而在订阅者中，SubscriptionHbmem用来创建一个订阅者对象，通过 create_subscription_hbmem订阅需要的数据，至于底层如何完成零拷贝的过程，都交给TogetherROS即可。","text_tokens":["只能","是否","进行","降低","[","未","node","init","cpp","存储","argv","来讲","$","index","subscriber","4m","具体","发布","被","：","消耗","将","解析","std","发布者","publisher","然后","测试工具","修改","延迟","评估","磁盘","处理","统计","问题","keeplast","注意","是","丢弃","namespace","风格","实现",",",">","make","main","编程","dus","msg","create","这个","对象","\"","reliable",":","快","install","last",")","发送"," ","获取","is","啦","方式","这里","系统资源","引用","出来","利用","runtime","minimalhbmempublisher","不必","操作系统","数据通","？","int","chrono","get",";","cost","_","to","调用","10","共享","相比","可靠","平均","不妨","必要","hpp","(","{","now","应运而生","message",".","ms","技术","指标","以及","&","topic","spin","做","显著","中","看","数据","有效","loanmessage","copy","工具","样本","结果","倍","了","0.000180","每隔","让","功能","大","运行","关键","<","stamp","minimalhbmemsubscriber","time","性能","subscriptionhbmem","不可","argc","用率","专注","就","应运","用","持续","clock","还是","赋值","跑","抖动","内存","灵活","100","感受","汇总","timerbase","通信接口","perf","提升","和","时间","void","于","%","microseconds","从","maxrss","!","定时器","方便","samplemessage","机器人","*","ros2","共享内存","在","失败","话题","size","publish","表示","t","30","试工","使用","释放","listener","since","提供","duration","避免","主要","出现","通信","shutdown","using","timer","开启","auto","要","用来","placeholders","会","一块","拷贝","前后","literals","需要","四个","我们","d","而","const","数量","else","move","info","有","多","r","这样","public","时候","几个","utime","对于","机制","便于","}","使用率","zero","后","所","大量","接口","keep","其他","每次","好","就是","history","该","默认","--","=","计数器","返回","任务","sample","拷贝到","run","定时","performance","tros","导致","已","s","通过","没有","呢","过程","40","内部","0.004912","计算","延时","class","为了","丢失","解脱","分析","少","系统","callback","也","borrow","us","应用","底层","数据量","方面","单位","尺寸","传输","整理","资源","情况","publisherhbmem","。","感觉","尤其","者","占用","随着","不必要","把","机器","接收","缓存","带有","都","至于","一个","当前","setup","大家","别的","一样","loaned","开发","到","#","local","包括","string","驻留","组件","rclcpp","char","开销","简单","—","经常","]","另外","减少","wall","epoch","可能","下","的","include","array4m","memory","logger","据传","valid","交给","直接","source","实际","更少","并打印","放到","、","更加","计数","数据传输","增加","/","集成","if","之后","完","sharedptr","private","传统","一类","qos","代码","效果","已经","steady","时延","为","，","这","max","这组","回调","可用","类似","活动","count","加一","与","这种","不多","minimal","对","或者","hbmem","针对","函数","消息","即可","小","0","opt","togetherros","bash","创建","卡顿","判断","loanedmsg","测试","functional","只","速度","1","例程","流程","图像","cpu","shared","发生","-","封装","++","差异","差不多","一次","零","只是","还好","bind","如何","数据通信","cast","可以","test","打印","failed","m","return","一下","this","subscription","talker","depth","分配","多次","依然","完成","订阅","操作","毫秒","不","来","pubsub","更好","高效"],"title":"零拷贝数据传输","title_tokens":["数据传输","零","据传","拷贝","数据","传输"]},{"location":"hhp/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_1","text":"在传统操作系统的数据传输过程中，系统内部会在磁盘、内存、缓存中多次进行数据拷贝，每次都会占用CPU的资源，数据量小的时候还好，随着数据量的增加，CPU的开销也会持续增加，尤其是在机器人图像数据的应用中 ，经常会发生这种问题，导致CPU都在做数据拷贝，没有时间处理其他的应用功能了，直接的感觉就是处理卡顿。","text_tokens":["直接","资源","卡顿","过程","。","了","进行","内部","会","拷贝","感觉","磁盘","尤其","这种","时间","功能","、","处理","占用","随着","开销","数据传输","增加","其他","每次","机器"," ","缓存","问题","就是","没有","都","传统","经常","多次","图像","是","cpu","系统","发生","机器人","也","操作","时候","的","应用","持续","导致","操作系统","做","在","据传","，","还好","中","内存","数据量","数据","小","传输"],"title":"零拷贝数据传输","title_tokens":["数据传输","零","据传","拷贝","数据","传输"]},{"location":"hhp/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_2","text":"针对这种问题，零拷贝技术应运而生。 零拷贝主要的任务就是避免CPU将数据从一块存储拷贝到另外一块存储，避免让CPU做大量的数据拷贝任务，减少不必要的拷贝，或者让别的组件来做这一类简单的数据传输任务，让CPU解脱出来专注于别的任务。这样就可以让系统资源的利用更加有效。 TogetherROS中就提供了灵活、高效的零拷贝功能，可以显著降低大尺寸数据的通信延时和CPU占用，具体有多显著呢，我们不妨进行一个测试。","text_tokens":["了","进行","降低","大量","让","功能","大","更加","、","数据传输","存储","就是","一类","具体","任务","拷贝到","专注","就","应运","将","，","灵活","这","呢","和","延时","这种","于","问题","解脱","从","系统","或者","针对","尺寸","传输","togetherros","资源","。","测试","占用","不必要"," ","cpu","提供","系统资源","一个","避免","主要","别的","出来","通信","利用","不必","零","可以","一块","组件","拷贝","不妨","必要","我们","应运而生","简单","技术","另外","减少","有","多","这样","的","来","做","据传","显著","中","高效","数据","有效"],"title":"零拷贝技术","title_tokens":["技术","零","拷贝"]},{"location":"hhp/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#togetherros","text":"我们使用TogetherROS系统内部集成的性能测试工具——performance_test，来评估下开启零拷贝前后的性能差异，这里我们传输的样本数据量是4M。 未开启零拷贝进行数据传输 $ ros2 run performance_test perf_test --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #未开启 开启零拷贝数据传输： $ ros2 run performance_test perf_test --zero-copy --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #开启 好的，测试已经跑完了，我们把结果放到这里，来分析一下。 在这个测试中，关键有四个指标： 时延，也就是消息从发布者到订阅者的传输时间。不开启零拷贝的情况下，平均为0.004912s，开启零拷贝之后，速度快了差不多40倍，平均为0.000180s。 CPU使用率，表示通信活动所占用的CPU时间，大家可以看这个utime指标，开启零拷贝之后时间有显著的提升，消耗CPU的资源少了。 驻留内存，包括通信过程中分配的内存和共享内存，是这个maxrss中的数据，开启零拷贝之后，占用的内存也更少。 样本统计，包括测试中发送、接收以及丢失的消息数量，是这组数据，依然是开启零拷贝之后性能更好。 通过测试，对于大数据通信来讲，零拷贝在CPU消耗、内存占用以及通信延迟抖动方面的性能都会更好。 这里只是便于大家感受零拷贝技术的效果，具体编程中如何使用零拷贝机制呢？","text_tokens":["copy","工具","样本","结果","倍","zero","了","进行","0.000180","使用率","更少","所","未","keep","大","放到","、","关键","数据传输","集成","好","完","就是","之后","来讲","history","$","性能","4m","--","发布","具体","：","消耗","效果","run","用率","已经","performance","时延","为","跑","抖动","s","，","内存","通过","100","max","这组","呢","感受","发布者","过程","40","内部","测试工具","perf","提升","延迟","活动","0.004912","和","评估","时间","不多","统计","丢失","分析","从","maxrss","是","少","系统","也","消息","ros2","共享内存","在","编程","数据量","方面","传输","togetherros","这个","资源","情况","测试","。","reliable","快","者","last","表示","占用","发送","把","30","速度","试工"," ","使用","接收","1","都","cpu","这里","大家","-","通信","差异","runtime","差不多","到","零","#","数据通","只是","开启","包括","？","如何","数据通信","_","驻留","10","可以","会","共享","test","拷贝","前后","m","平均","四个","一下","我们","depth","技术","—","分配","依然","数量","有","r","订阅","下","的","指标","以及","不","array4m","来","utime","更好","对于","机制","据传","显著","中","看","便于","数据"],"title":"TogetherROS零拷贝性能测试","title_tokens":["togetherros","测试","零","拷贝","性能"]},{"location":"hhp/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_3","text":"为了方便大家使用，TogetherROS针对零拷贝功能进行了封装，风格类似ROS2中话题通信的接口，还是话题通信一样的流程，我们只需要修改几个函数就可以实现啦。","text_tokens":["togetherros","话题","。","了","进行","类似","修改","可以","接口","拷贝","功能","只","需要","我们","为了","使用","啦","流程","风格","实现","方便","大家","封装","针对","函数","通信","的","一样","ros2","几个","就","还是","零","，","中"],"title":"编程开发","title_tokens":["开发","编程"]},{"location":"hhp/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_4","text":"$ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run hbmem_pubsub talker $ ros2 run hbmem_pubsub listener","text_tokens":["_","source","bash","tros","hbmem","pubsub","/","local","setup"," ","ros2","talker",".","listener","run","$","install","opt"],"title":"运行例程","title_tokens":["例程","运行"]},{"location":"hhp/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_5","text":"发布者publisher_hbmem.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" using namespace std :: chrono_literals ; class MinimalHbmemPublisher : public rclcpp :: Node { public : MinimalHbmemPublisher () : Node ( \"minimal_hbmem_publisher\" ), count_ ( 0 ) { // 创建publisher_hbmem，topic为\"topic\"，QOS为KEEPLAST(10)，以及默认的可靠传输 publisher_ = this -> create_publisher_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 ); // 定时器，每隔40毫秒调用一次timer_callback进行消息发送 timer_ = this -> create_wall_timer ( 40 ms , std :: bind ( & MinimalHbmemPublisher :: timer_callback , this )); } private : // 定时器回调函数 void timer_callback () { // 获取要发送的消息 auto loanedMsg = publisher_ -> borrow_loaned_message (); // 判断消息是否可用，可能出现获取消息失败导致消息不可用的情况 if ( loanedMsg . is_valid ()) { // 引用方式获取实际的消息 auto & msg = loanedMsg . get (); // 获取当前时间，单位为us auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()). count (); // 对消息的index和time_stamp进行赋值 msg . index = count_ ; msg . time_stamp = time_now ; // 打印发送消息 RCLCPP_INFO ( this -> get_logger (), \"message: %d\" , msg . index ); publisher_ -> publish ( std :: move ( loanedMsg )); // 注意，发送后，loanedMsg已不可用 // 计数器加一 count_ ++ ; } else { // 获取消息失败，丢弃该消息 RCLCPP_INFO ( this -> get_logger (), \"Failed to get LoanMessage!\" ); } } // 定时器 rclcpp :: TimerBase :: SharedPtr timer_ ; // hbmem publisher rclcpp :: PublisherHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr publisher_ ; // 计数器 size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者subscriber_hbmem.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" class MinimalHbmemSubscriber : public rclcpp :: Node { public : MinimalHbmemSubscriber () : Node ( \"minimal_hbmem_subscriber\" ) { // 创建subscription_hbmem，topic为\"sample\"，QOS为KEEPLAST(10)，以及默认的可靠传输 // 消息回调函数为topic_callback subscription_ = this -> create_subscription_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 , std :: bind ( & MinimalHbmemSubscriber :: topic_callback , this , std :: placeholders :: _1 )); } private : // 消息回调函数 void topic_callback ( const hbmem_pubsub :: msg :: SampleMessage :: SharedPtr msg ) const { // 注意，msg只能在回调函数中使用，回调函数返回后，该消息就会被释放 // 获取当前时间 auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()) . count (); // 计算延时并打印出来 RCLCPP_INFO ( this -> get_logger (), \"msg %d, time cost %dus\" , msg -> index , time_now - msg -> time_stamp ); } // hbmem subscription rclcpp :: SubscriptionHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["loanmessage","只能","是否","实际","后","进行","并打印","[","每隔","node","计数","init","cpp","<","/","stamp","if","minimalhbmemsubscriber","argv","time","sharedptr","private","该","默认","subscriptionhbmem","index","qos","subscriber","不可","=","发布","计数器","被","返回","：","sample","argc","定时","steady","就","用","导致","clock","赋值","为","已","，","std","回调","publisher","发布者","timerbase","40","可用","count","和","加一","计算","延时","时间","class","void","%","microseconds","keeplast","minimal","注意","对","丢弃","namespace","!","hbmem","定时器","callback",",","samplemessage","borrow","函数","us",">","*","消息","make","main","在","dus","msg","单位","0","失败","create","传输","创建","判断","情况","loanedmsg","publisherhbmem","size","publish","\"",":","functional","者",")","t","发送"," ","获取","使用","释放","1","is","since","方式","shared","duration","当前","引用","-","++","出现","出来","shutdown","loaned","using","timer","minimalhbmempublisher","一次","#","int","bind","chrono","get",";","string","cast","auto","_","cost","to","调用","要","10","placeholders","会","打印","failed","literals","rclcpp","char","可靠","return","{","now","hpp","(","this","d","message","subscription","const",".","ms","]","else","move","info","wall","订阅","epoch","public","可能","以及","的","include","&","毫秒","topic","memory","pubsub","logger","spin","中","}","valid"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_6","text":"我们整理一下，与ROS2中的话题通信相比，TogetherROS带有零拷贝机制的话题通信接口是这样的。 在发布者中，我们可以使用PublisherHbmem来创建一个发布者对象，然后通过create_publisher_hbmem发布数据，而在订阅者中，SubscriptionHbmem用来创建一个订阅者对象，通过 create_subscription_hbmem订阅需要的数据，至于底层如何完成零拷贝的过程，都交给TogetherROS即可。","text_tokens":["整理","togetherros","话题","创建","_","publisherhbmem","。","发布者","然后","通信接口","publisher","用来","过程","对象","可以","接口","相比","拷贝","与","者","需要","一下","我们","交给","而","subscription"," ","使用","带有","都","subscriptionhbmem","完成","是","至于","一个","hbmem","订阅","发布","这样","通信","的","ros2","来","零","机制","在","即可","，","底层","中","通过","数据","如何","create"],"title":"接口汇总","title_tokens":["接口","汇总"]},{"location":"hhp/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/","text":"分布式通信配置 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如在这款机器人系统中，就有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用旭日派作为控制器，主要实现传感器驱动、电机控制、AI应用等功能，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个计算平台之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过TogehterROS都已经为我们准备好了，我们只需要在每一个计算上配置好TogehterROS或者ROS2的环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下分布式系统的魅力。 分布式网络搭建 旭日派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function # 旭日派端 $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function # PC端 神奇的事情就这样发生了，旭日X3派上安装的是TogetherROS，我的电脑上安装的是ROS2，他们只要处于同一网络中，就可以实现通信了，感觉就像在一个电脑里一样。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和旭日X3派端中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 话题分布式通信 之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 以话题通信为例，旭日派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串，我们看下效果如何。 $ ros2 run learning_topic_cpp talker # 旭日派端 $ ros2 run learning_topic_cpp listener # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，我们几乎不需要任何配置，代码也不需要做任何修改，一切都会变得如此轻松。","text_tokens":["直接","是否","环境","挺","实际","了","之间","于是","后","所","以","原本","等","岂","笔记","准备","功能","一句","、","运行","<","控制器","毕竟","cpp","好","就是","一切","$","布式","subscriber","代码","互联","export","=","方法","具体","虚拟机","发布","适合","用到","任务","带领","消耗","魅力","效果","不够","笔记本","run","已经","：","系列","不过","hello","平台","之一","就","ai","分组","用","频繁","全都","将","为","电机","变化","，","典型","节点","处于","并","小组","没有","togehterros","这","远程","里","分布式系统","呢","此外","感受","publisher","ros","发布者","信息","一系列","类似","修改","分布","两个","每","完全","计算","和","这种","比如","处理","接下","叫","我","派","智能","搭建","很多","由","复杂","确保","问题","旭日","还","minimal","比较","是","局域网络","结构","系统","下来","互通","任务分配","或者","命令行","实现","方便","而言","机器人","也","控制",">","应用","放","为例","放在","ros2","多个","模式","简而言之","中有","没","在","才能","不是","作为","同一","即可","请","变得","这些","domain","小","电脑","member","端","遇到","传输","togetherros","话题","资源","卡顿","情况","world","。","这款","测试","learning","examples","传感器","轻松","非常","不同","他们","框架","网络","感觉","虚拟","几乎","者","算机","局域","只","各种","组成","attention"," ","机器","使用","pc","listener","都","id","例程","无法","监控","啦","任何","加入","如","提供","连接","一个","上边","发生","减轻","大家","看上","事情","个","your","出现","主要","function","通信","体积","两者","上","一样","桥接","开发","x3","到","带来","#","？","并且","运动","计算机","如果","希望","字符串","如何","接下来","安装","_","传感","驱动","笔记本电脑","可以","会","而是","位于","相互","分布式","字符","派端","采用","看上去","rclcpp","如此","局域网","拆解","神奇","只要","什么","需要","一下","我们","编写","配置","较","talker","上去","经常","分配","完成","一系","感器","同一个","有","多","订阅","计算能力","打通","繁多","可能","起来","这样","下","的","命令","一","不","topic","压力","做","机制","有点","像","中","则","之前","数据","看","你","能力"],"title":"分布式通信配置","title_tokens":["配置","分布","通信","分布式","布式"]},{"location":"hhp/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。","text_tokens":["里","分布式系统","卡顿","情况","。","可以","会","分布","等","岂","分布式","计算","功能","拆解","算机","、","处理","运行","智能","机器"," ","就是","经常","分配","布式","系统","一个","任务分配","多","减轻","实现","机器人","计算能力","任务","繁多","出现","不够","的","上","放在","平台","多个","全都","压力","将","到","？","不是","，","计算机","如果","中","这些","能力","这","遇到"],"title":"分布式通信配置","title_tokens":["配置","分布","通信","分布式","布式"]},{"location":"hhp/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_2","text":"什么叫分布式？ 机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如在这款机器人系统中，就有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用旭日派作为控制器，主要实现传感器驱动、电机控制、AI应用等功能，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个计算平台之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过TogehterROS都已经为我们准备好了，我们只需要在每一个计算上配置好TogehterROS或者ROS2的环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下分布式系统的魅力。","text_tokens":["环境","挺","了","之间","于是","原本","笔记","等","准备","功能","、","控制器","毕竟","好","就是","布式","适合","任务","带领","消耗","魅力","笔记本","已经","不过","平台","之一","就","ai","将","为","电机","变化","，","典型","节点","togehterros","这","远程","分布式系统","此外","感受","信息","分布","两个","每","完全","计算","这种","比如","接下","叫","派","由","复杂","旭日","还","比较","是","结构","系统","下来","或者","实现","方便","机器人","控制","应用","放","ros2","在","作为","这些","小","电脑","传输","资源","。","这款","传感器","非常","不同","框架","算机","只","各种","组成"," ","机器","都","监控","任何","一个","上边","减轻","大家","看上","主要","通信","体积","上","开发","到","？","并且","运动","计算机","接下来","传感","驱动","笔记本电脑","可以","位于","相互","分布式","采用","看上去","什么","需要","我们","配置","较","上去","分配","感器","有","多","可能","起来","下","的","一","不","压力","做","中","数据","有点"],"title":"分布式通信","title_tokens":["通信","分布","布式","分布式"]},{"location":"hhp/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_3","text":"旭日派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function # 旭日派端 $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function # PC端 神奇的事情就这样发生了，旭日X3派上安装的是TogetherROS，我的电脑上安装的是ROS2，他们只要处于同一网络中，就可以实现通信了，感觉就像在一个电脑里一样。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["直接","后","了","之间","所","$","subscriber","互联","具体","虚拟机","效果","run","已经","不过","平台","就","分组","用","将","为","，","处于","并","小组","这","里","呢","publisher","修改","两个","和","计算","接下","我","派","很多","确保","问题","旭日","minimal","局域网络","是","互通","下来","命令行","实现","而言","也","ros2","模式","简而言之","中有","在","同一","请","member","端","电脑","togetherros","话题","。","测试","examples","他们","网络","感觉","虚拟","算机","局域","attention"," ","使用","pc","都","无法","如","连接","一个","发生","事情","个","function","通信","上","一样","桥接","x3","到","带来","#","？","计算机","如果","希望","接下来","安装","_","可以","会","而是","派端","rclcpp","局域网","神奇","只要","需要","什么","一下","我们","配置","完成","同一个","打通","这样","的","命令","不","做","像","中","你","能力"],"title":"分布式网络搭建","title_tokens":["搭建","分布","网络","分布式","布式"]},{"location":"hhp/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_4","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和旭日X3派端中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["_","ros","。","了","类似","不同","可以","计算","和","派端","一句","算机","我们","<","配置"," ","问题","旭日","分配","$","id","无法","加入","提供","同一个","一个","export","=","实现","：","这样","your","通信","两者","的",">","一样","ros2","就","分组","x3","将","到","没","机制","才能","在","，","处于","同一","中","计算机","即可","小组","如果","domain","则","电脑"],"title":"分布式网络分组","title_tokens":["分组","分布","网络","分布式","布式"]},{"location":"hhp/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_5","text":"之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 以话题通信为例，旭日派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串，我们看下效果如何。 $ ros2 run learning_topic_cpp talker # 旭日派端 $ ros2 run learning_topic_cpp listener # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，我们几乎不需要任何配置，代码也不需要做任何修改，一切都会变得如此轻松。","text_tokens":["直接","是否","实际","了","以","cpp","好","一切","$","布式","代码","方法","发布","用到","效果","系列","run","频繁","hello","，","没有","ros","呢","发布者","一系列","类似","修改","分布","派","问题","旭日","机器人","也","为例","ros2","在","作为","变得","端","电脑","world","话题","情况","learning","。","测试","轻松","网络","几乎","者","机器"," ","使用","listener","pc","都","例程","啦","任何","通信","开发","#","？","字符串","如何","_","可以","会","字符","分布式","派端","如此","需要","编写","我们","配置","talker","一系","订阅","下","的","不","topic","做","之前","中","看"],"title":"话题分布式通信","title_tokens":["话题","分布","通信","分布式","布式"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/","text":"数字输入与输出 数字输入与输出是最常用的一种外设通信方式，虽然每一个端口只有0和1两种状态，但却可以组合出各种各样的变化。 数字输入与输出原理 数字输入与输出，也称为通用输入输出，全称是General-purpose input/output，大部分情况下，我们都会用简称GPIO GPIO的功能，主要是指这个管脚可以作为数字信号的输入或者输出使用，到底是输入还是输出呢，这需要我们使用系统寄存器来进行配置。 当GPIO被设置为输入模式时，就可以读取这个管脚上的电平高低，从而实现读取外部信号的功能，比如外部按键的信号，就是这样读取的。 当GPIO被设置为输出模式时，我们就可以主动改变管脚的电平高低了，这样就能通过电平的变化，控制外部的设备，比如点亮或者熄灭一个LED灯。 除此之外，一些IO口还可以配置成其他功能，比如PWM输出，串口通信等等。 关于旭日X3派的管脚定义，大家可以参考这张图，他会显示每个管脚具体可以实现什么功能。 这里需要说明一点，旭日X3派的管脚序号定义有三种编码方式： 第一种就是Board编码，这种就是按照主板上管脚排针编号，分别对应1~40号排针。 第二种就是BCM编码，这种方式是参考 Broadcom SOC 的通道编号，侧重CPU寄存器，在使用BCM库或者使用python编程时，常采用的一种编码方式。 第三种就是X3编码，可以理解为是旭日X3派自己的编码方式，在使用旭日派自己的驱动库编程时，会使用到这种编码。 大家在后续编程开发中，需要结合函数接口的说明，使用对应的引脚编号，不然可能会出现意料之外的问题。 引脚复用配置工具 虽然从硬件上看，扩展出来的引脚只有40个，不过大部分引脚还可以配置成多种功能，这样延伸出来变化可就多了，那如何配置引脚的不同功能呢？ 我们可以使用旭日X3派中提供的srpi-config工具进行配置。 直接在终端中输入这个指令，就可以看到这样的窗口，okay配置对应管脚为专用功能，disabled配置对应管脚为GPIO模式，按照自己的需要进行配置即可，配置完成后重启才会生效。 了解了GPIO的概念，接下来我们就要开始编程啦。 数字输入编程 首先我们来看下最基本的数字输入测试，读取一个按键的状态。 硬件接线 我们将按键的一边连接到旭日X3派的38号引脚上，这是一个GPIO的接口，另一边连接到39号引脚，也就是GND。 原理很简单，按键没按下时，导线是断开的，GPIO是默认的状态，按键按下后，导线就会导通，GPIO的状态变成了GND。 这样，我们就可以通过电平的变化，知道按键的状态啦。 运行例程 我们不妨来运行一下，看下实际效果是不是这样。 $ sudo python3 simple_input.py 我们将一个按键开关接到对应的管脚上， 然后连接到旭日X3PI当中，运行刚才的程序。之后我们按下或是松开按键时，他都会打印出对应的电平变化。 按下显示的就是LOW，也就是低电平，松开就是HIGH，也就是高电平。 代码解析 数字输入的功能实现啦，我们来看下代码是如何实现的。 simple_input.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 input_pin = 38 # BOARD 编码 38 def main (): prev_value = None # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输入模式 GPIO . setup ( input_pin , GPIO . IN ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : # 读取管脚电平 value = GPIO . input ( input_pin ) if value != prev_value : if value == GPIO . HIGH : value_str = \"HIGH\" else : value_str = \"LOW\" print ( \"Value read from pin {} : {} \" . format ( input_pin , value_str )) prev_value = value time . sleep ( 1 ) finally : GPIO . cleanup () if __name__ == '__main__' : main () 我们在Python中需要引入X3Pi的GPIO库，从而使用对应的GPIO功能。 主函数里首先需要定义了一个变量来存储这个管脚的电平信号。 进行初始化，设置管脚的编码模式为BOARD模式，之后定义输入用的管脚，这里使用的是BOARD编码，因为他是第38个管脚，所以为38号。 之后的话就会进入到循环当中，这样的一个函数就可以读出当前的电平值。 没有按下按键的时候，38管脚和GND是断开的，他就是高电平，按下按键时，就和GND导通了，这个管脚就会编程低电平。 如果电平值和上一次存储的不一致，后面的判断就会判断出是升高还是降低，最后会把结果打印出来。 松开按键时同理。 数字输出编程 GPIO不止有输入功能，还有输出功能，大家应该经常看到电子设别上的LED灯吧，这就是典型的IO输出控制的设备，我们也来试一试。 硬件接线 我们将一个LED灯的正极连接到了2号引脚，这是5V电源，用来给LED供电的，不过LED电阻小，为了不至于烧坏，我们最好还是在电路中串联一个电阻来限制电流大小。 接下来，当LED的负极接到GND，也就是电源的0V上时，LED两边会因为有电势差而被点亮；当LED的负极也连接到高电平，也就是5V的时候，会因为两边没有电势差，也就不会被点亮。 这个负极的电平信号我们就用GPIO来输出，所以我们把LED的负极连接到任意的GPIO引脚上，比如38号，将这个引脚设置为输出模式，当输出高电平时，灯就会熄灭，输出低电平，灯就会被点亮。 把这两个动作放到一个循环中，就可以实现闪烁的功能啦。 运行示例程序 快来运行例程试一试吧，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行程序，就可以看到这个LED就会开始闪烁了。 $ sudo python3 simple_input.py 代码解析 simple_out.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 output_pin = 38 # BOARD 编码 38 def main (): # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输出模式，并且初始化为高电平 GPIO . setup ( output_pin , GPIO . OUT , initial = GPIO . HIGH ) # 记录当前管脚状态 curr_value = GPIO . HIGH print ( \"Starting demo now! Press CTRL+C to exit\" ) try : # 间隔1秒时间，循环控制LED灯亮灭 while True : time . sleep ( 1 ) GPIO . output ( output_pin , curr_value ) curr_value ^= GPIO . HIGH finally : GPIO . cleanup () if __name__ == '__main__' : main () 数字输入与输出集成 学习了GPIO的输入与输出功能后，我们就可以做一些自动化的功能了。 硬件接线 比如我们同时连接一个按键和LED灯，尝试实现按键被按下，灯被点亮，松开，灯熄灭，这样的功能。 运行示例程序 我们通过这个例程来试一试效果如何？ $ sudo python3 button_led.py 我们来看一下具体的操作，同样的，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。按下按键后，就可以看到LED被点亮了，松开之后，LED就熄灭了。 代码解析 button_led.py #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道： # 36号作为输出，可以点亮一个LED # 38号作为输入，可以接一个按钮 led_pin = 36 # BOARD 编码 36 but_pin = 38 # BOARD 编码 38 # 禁用警告信息 GPIO . setwarnings ( False ) def main (): prev_value = None # Pin Setup: GPIO . setmode ( GPIO . BOARD ) # BOARD pin-numbering scheme GPIO . setup ( led_pin , GPIO . OUT ) # LED pin set as output GPIO . setup ( but_pin , GPIO . IN ) # Button pin set as input # Initial state for LEDs: GPIO . output ( led_pin , GPIO . LOW ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : curr_value = GPIO . input ( but_pin ) if curr_value != prev_value : GPIO . output ( led_pin , curr_value ) prev_value = curr_value print ( \"Outputting {} to Pin {} \" . format ( curr_value , led_pin )) time . sleep ( 1 ) finally : GPIO . cleanup () # cleanup all GPIO if __name__ == '__main__' : main () 基本的配置还是一样的，引入基本的库，然后设置为BOARD模式，然后初始化两个管脚，一个用来读取按键的通断，一个用来控制LED的亮灭，之后只需要判断按键的状态来做出对应的控制LED的动作就可以了。","text_tokens":["知道","进行","降低","电势差","每个","存储","通道","$","常","具体","被","应该","：","后面","高电平","定义","将","原理","简称","解析","典型","2","另一边","编号","input","gnd","读取","name","循环","警告","然后","刚才","给","两个","第一","hobot","他会","结合","号","改变","io","问题","所以","旭日","大部","是","实现","基本",",","灯亮","开始","main","编程","作为","意料之外","外部","python3","端口","这个","第","\"","srpi","同样",":","快","程序",")","很","各种","import"," ","扩展","啦","参考","复用","sleep","方式","这里","断开","等等","numbering","个","出来","上","只有","？","最后","一点","那","不止","5v","_","to","尝试","两边","侧重","按照","led","~","终端","不妨","now","{","(","^","说明","format","能",".","学习","吧","def","输入输出","initial","两种","做","value","示例","中","看","leds","pwm","当","false","虽然","工具","结果","了","串联","重启","成","任意","from","功能","输入","自己","运行","多种","time","供电","记录","但","主","purpose","就","用","电路","还是","39","for","'","的话","__","从而","和","时间","接下","一种","派","上时","还","low","从","大小","scheme","下来","!","可","还有","x3pi","他","while","熄灭","按键","在","不是","try","当中","set","时","不同","序号","+","变成","使用","试一试","提供","连接","引脚","主要","出现","闪烁","通信","finally","组合","bcm","数字","并且","如果","到底","点亮","实际效果","outputting","用来","会","高低","按钮","需要","我们","而","配置","最好","同理","第二种","else","py","output","各种各样","有","除此","多","接到","这样","时候","接线","按","实物","but","不会","第二","二种","}","概念","电流","通断","通用","后","接口","主板","okay","导通","其他","就是","变量","升高","默认","同时","soc","=","读出","主动","三种","了解","不过","c","一边","board","就要","通过","没有","这是","press","里","呢","限制","40","信息","第三","每","却","setwarnings","比如","为了","或是","系统","开关","一些","也","对应","电势","模式","是不是","情况","。","curr","设置","称为","in","禁用","最","把","负极","都","窗口","至于","一个","电子","当前","setup","大家","动作","一样","开发","x3","自动化","read","到","usr","#","接下来","gpio","灯","松开","全称","低电平","采用","none","引入","简单","经常","首先","第三种","可能","会导通","下","的","数字信号","simple","排针","disabled","寄存","；","exit","意料","电源","str","直接","实际","demo","cleanup","编码方式","env","放到","导线","print","/","if","集成","之后","初始","out","代码","自动","ctrl","config","信号","口","效果","按下","电阻","为","秒","变化","，","串口","这","编码","python","才","指令","来看","设别","state","部分","与","true","这种","亮","因为","设备","张图","接","值","看到","状态","指","starting","或者","延伸","关于","分别","控制","函数","button","出","各样","没","即可","sudo","小","0","不然","外设","判断","38","第一种","测试","prev","显示","broadcom","常用","0v","只","正极","as","之外","1","例程","36","cpu","进入","-","一致","all","bin","一次","硬件","如何","pin","做出","general","大部分","驱动","high","可以","灭","打印","初始化","电平","理解","什么","一下","烧坏","库","输出","除此之外","完成","管脚","后续","操作","寄存器","生效","出是","不","来","专用","不至于","setmode","间隔"],"title":"数字输入与输出","title_tokens":["与","数字","输入","输出"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_1","text":"数字输入与输出是最常用的一种外设通信方式，虽然每一个端口只有0和1两种状态，但却可以组合出各种各样的变化。","text_tokens":["外设","虽然","。","可以","每","却","与","最","和","常用","输入","一种","各种","1","输出","状态","是","方式","但","一个","各种各样","通信","的","出","只有","组合","各样","两种","数字","变化","，","0","端口"],"title":"数字输入与输出","title_tokens":["与","数字","输入","输出"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_2","text":"数字输入与输出，也称为通用输入输出，全称是General-purpose input/output，大部分情况下，我们都会用简称GPIO GPIO的功能，主要是指这个管脚可以作为数字信号的输入或者输出使用，到底是输入还是输出呢，这需要我们使用系统寄存器来进行配置。 当GPIO被设置为输入模式时，就可以读取这个管脚上的电平高低，从而实现读取外部信号的功能，比如外部按键的信号，就是这样读取的。 当GPIO被设置为输出模式时，我们就可以主动改变管脚的电平高低了，这样就能通过电平的变化，控制外部的设备，比如点亮或者熄灭一个LED灯。 除此之外，一些IO口还可以配置成其他功能，比如PWM输出，串口通信等等。 关于旭日X3派的管脚定义，大家可以参考这张图，他会显示每个管脚具体可以实现什么功能。 这里需要说明一点，旭日X3派的管脚序号定义有三种编码方式： 第一种就是Board编码，这种就是按照主板上管脚排针编号，分别对应1~40号排针。 第二种就是BCM编码，这种方式是参考 Broadcom SOC 的通道编号，侧重CPU寄存器，在使用BCM库或者使用python编程时，常采用的一种编码方式。 第三种就是X3编码，可以理解为是旭日X3派自己的编码方式，在使用旭日派自己的驱动库编程时，会使用到这种编码。 大家在后续编程开发中，需要结合函数接口的说明，使用对应的引脚编号，不然可能会出现意料之外的问题。","text_tokens":["通用","了","进行","成","编码方式","接口","主板","功能","输入","自己","每个","/","其他","就是","通道","常","soc","具体","被","信号","主动","口","purpose","：","三种","就","定义","用","还是","为","board","简称","变化","，","串口","通过","这","编码","input","编号","读取","python","呢","40","第三","从而","第一","部分","与","他会","这种","比如","结合","号","设备","改变","派","io","张图","一种","问题","旭日","还","大部","是","指","系统","一些","或者","实现","也","关于","分别","控制","函数","对应","模式","熄灭","按键","在","编程","作为","意料之外","外部","不然","这个","情况","时","。","第一种","显示","设置","broadcom","称为","序号"," ","使用","之外","1","都","参考","方式","cpu","这里","等等","一个","大家","-","引脚","主要","出现","通信","上","开发","bcm","x3","数字","到","到底","点亮","一点","gpio","灯","general","大部分","驱动","可以","全称","会","侧重","高低","按照","led","电平","~","采用","理解","需要","什么","我们","配置","说明","第二种","能","库","输出","除此之外","管脚","output","有","后续","除此","第三种","这样","输入输出","可能","下","的","数字信号","寄存器","排针","来","寄存","第二","二种","中","意料","pwm","当"],"title":"数字输入与输出原理","title_tokens":["输入","数字","原理","与","输出"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_3","text":"虽然从硬件上看，扩展出来的引脚只有40个，不过大部分引脚还可以配置成多种功能，这样延伸出来变化可就多了，那如何配置引脚的不同功能呢？ 我们可以使用旭日X3派中提供的srpi-config工具进行配置。 直接在终端中输入这个指令，就可以看到这样的窗口，okay配置对应管脚为专用功能，disabled配置对应管脚为GPIO模式，按照自己的需要进行配置即可，配置完成后重启才会生效。 了解了GPIO的概念，接下来我们就要开始编程啦。","text_tokens":["直接","虽然","工具","了","后","进行","重启","成","功能","输入","自己","okay","多种","config","了解","不过","就","为","变化","，","就要","才","指令","呢","40","部分","接下","派","旭日","还","看到","从","大部","下来","可","延伸","开始","对应","模式","在","即可","编程","这个","。","不同","srpi"," ","使用","扩展","啦","窗口","提供","-","引脚","个","出来","上","只有","x3","硬件","？","如何","那","接下来","gpio","大部分","可以","会","终端","按照","需要","我们","配置","完成","管脚","多","这样","的","生效","disabled","专用","中","看","概念"],"title":"引脚复用配置工具","title_tokens":["配置","引脚","工具","复用"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_4","text":"首先我们来看下最基本的数字输入测试，读取一个按键的状态。","text_tokens":["首先","输入","状态","来看","测试","。","一个","我们","数字","基本","按键","，","下","的","最","读取"],"title":"数字输入编程","title_tokens":["数字","输入","编程"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_5","text":"我们将按键的一边连接到旭日X3派的38号引脚上，这是一个GPIO的接口，另一边连接到39号引脚，也就是GND。 原理很简单，按键没按下时，导线是断开的，GPIO是默认的状态，按键按下后，导线就会导通，GPIO的状态变成了GND。 这样，我们就可以通过电平的变化，知道按键的状态啦。","text_tokens":["gpio","38","时","。","后","了","知道","可以","接口","电平","导线","号","我们","派","很","简单","变成"," ","就是","旭日","啦","默认","状态","是","断开","连接","一个","引脚","也","这样","会导通","下","的","按下","上","按","就","一边","x3","将","到","39","原理","按键","没","变化","，","通过","另一边","这是","gnd"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_6","text":"我们不妨来运行一下，看下实际效果是不是这样。 $ sudo python3 simple_input.py 我们将一个按键开关接到对应的管脚上， 然后连接到旭日X3PI当中，运行刚才的程序。之后我们按下或是松开按键时，他都会打印出对应的电平变化。 按下显示的就是LOW，也就是低电平，松开就是HIGH，也就是高电平。","text_tokens":["_","松开","实际效果","实际","。","时","然后","high","刚才","显示","会","低电平","打印","程序","电平","不妨","运行","一下","我们"," ","之后","就是",".","旭日","都","$","low","或是","管脚","py","开关","连接","一个","接到","也","这样","效果","高电平","下","的","simple","对应","上","按下","x3pi","出","他","来","将","到","按键","不是","，","sudo","变化","看","是不是","当中","python3","input"],"title":"运行例程","title_tokens":["例程","运行"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_7","text":"数字输入的功能实现啦，我们来看下代码是如何实现的。 simple_input.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 input_pin = 38 # BOARD 编码 38 def main (): prev_value = None # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输入模式 GPIO . setup ( input_pin , GPIO . IN ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : # 读取管脚电平 value = GPIO . input ( input_pin ) if value != prev_value : if value == GPIO . HIGH : value_str = \"HIGH\" else : value_str = \"LOW\" print ( \"Value read from pin {} : {} \" . format ( input_pin , value_str )) prev_value = value time . sleep ( 1 ) finally : GPIO . cleanup () if __name__ == '__main__' : main () 我们在Python中需要引入X3Pi的GPIO库，从而使用对应的GPIO功能。 主函数里首先需要定义了一个变量来存储这个管脚的电平信号。 进行初始化，设置管脚的编码模式为BOARD模式，之后定义输入用的管脚，这里使用的是BOARD编码，因为他是第38个管脚，所以为38号。 之后的话就会进入到循环当中，这样的一个函数就可以读出当前的电平值。 没有按下按键的时候，38管脚和GND是断开的，他就是高电平，按下按键时，就和GND导通了，这个管脚就会编程低电平。 如果电平值和上一次存储的不一致，后面的判断就会判断出是升高还是降低，最后会把结果打印出来。 松开按键时同理。","text_tokens":["结果","了","进行","降低","demo","cleanup","from","env","功能","输入","导通","print","/","if","存储","初始","之后","变量","time","通道","就是","升高","代码","ctrl","=","读出","主","信号","：","后面","高电平","按下","c","就","定义","用","还是","为","board","，","没有","'","编号","编码","input","读取","press","name","python","里","的话","来看","循环","gnd","__","从而","和","hobot","true","因为","号","所以","值","low","是","starting","!","实现",",","函数","对应","x3pi","他","模式","while","main","在","按键","编程","try","当中","python3","这个","38","判断","时","。","prev","第","设置","\"",":","in",")","+","as","把","import"," ","使用","1","啦","sleep","这里","断开","一个","进入","setup","当前","个","一致","出来","finally","上","bin","数字","read","usr","到","一次","#","硬件","最后","如果","pin","如何","_","gpio","to","松开","high","可以","会","低电平","打印","初始化","电平","none","now","{","引入","(","需要","我们","format","同理",".","库","else","首先","管脚","py","def","这样","时候","下","的","simple","出是","不","来","value","中","}","setmode","exit","str"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_8","text":"GPIO不止有输入功能，还有输出功能，大家应该经常看到电子设别上的LED灯吧，这就是典型的IO输出控制的设备，我们也来试一试。","text_tokens":["gpio","灯","。","设别","led","功能","输入","设备","我们","io","就是","经常","看到","输出","试一试","吧","有","电子","还有","大家","应该","也","控制","的","上","来","，","典型","这","不止"],"title":"数字输出编程","title_tokens":["数字","输出","编程"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_9","text":"我们将一个LED灯的正极连接到了2号引脚，这是5V电源，用来给LED供电的，不过LED电阻小，为了不至于烧坏，我们最好还是在电路中串联一个电阻来限制电流大小。 接下来，当LED的负极接到GND，也就是电源的0V上时，LED两边会因为有电势差而被点亮；当LED的负极也连接到高电平，也就是5V的时候，会因为两边没有电势差，也就不会被点亮。 这个负极的电平信号我们就用GPIO来输出，所以我们把LED的负极连接到任意的GPIO引脚上，比如38号，将这个引脚设置为输出模式，当输出高电平时，灯就会熄灭，输出低电平，灯就会被点亮。 把这两个动作放到一个循环中，就可以实现闪烁的功能啦。","text_tokens":["了","串联","任意","功能","放到","电势差","就是","供电","被","信号","高电平","不过","电阻","就","用","电路","还是","将","为","，","2","没有","这","这是","gnd","循环","限制","给","两个","比如","因为","接下","号","为了","所以","上时","大小","下来","实现","也","电势","模式","熄灭","在","小","这个","38","时","。","设置","0v","正极","把"," ","负极","啦","至于","连接","一个","引脚","闪烁","动作","上","到","点亮","接下来","5v","灯","gpio","两边","用来","可以","会","低电平","led","电平","我们","而","最好","烧坏","输出","有","接到","时候","的","来","不会","；","不至于","中","电流","电源","当"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_10","text":"快来运行例程试一试吧，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行程序，就可以看到这个LED就会开始闪烁了。 $ sudo python3 simple_input.py","text_tokens":["_","这个","。","然后","了","刚才","设置","可以","会","按照","快","程序","led","运行"," ",".","例程","$","试一试","完成","看到","py","吧","连接","闪烁","开始","的","simple","实物","x3pi","就","来","将","到","，","sudo","python3","input"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_11","text":"simple_out.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 output_pin = 38 # BOARD 编码 38 def main (): # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输出模式，并且初始化为高电平 GPIO . setup ( output_pin , GPIO . OUT , initial = GPIO . HIGH ) # 记录当前管脚状态 curr_value = GPIO . HIGH print ( \"Starting demo now! Press CTRL+C to exit\" ) try : # 间隔1秒时间，循环控制LED灯亮灭 while True : time . sleep ( 1 ) GPIO . output ( output_pin , curr_value ) curr_value ^= GPIO . HIGH finally : GPIO . cleanup () if __name__ == '__main__' : main ()","text_tokens":["demo","cleanup","env","print","/","if","初始","time","通道","记录","out","ctrl","=","：","高电平","c","定义","为","board","秒","，","'","编号","编码","循环","name","press","__","hobot","true","时间","状态","starting","!",",","灯亮","控制","模式","while","main","try","python3","38","curr","设置","\"",":",")","+","as","import"," ","使用","1","sleep","当前","setup","finally","bin","usr","#","硬件","并且","pin","_","gpio","to","high","灭","初始化","led","电平","now","(","^",".","输出","管脚","py","output","def","的","simple","initial","value","setmode","exit","间隔"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_12","text":"学习了GPIO的输入与输出功能后，我们就可以做一些自动化的功能了。","text_tokens":["gpio","功能","输入","就","。","一些","自动","了","后","我们","做","自动化","可以","，","的","与","输出","学习"],"title":"数字输入与输出集成","title_tokens":["输入","数字","集成","与","输出"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_13","text":"比如我们同时连接一个按键和LED灯，尝试实现按键被按下，灯被点亮，松开，灯熄灭，这样的功能。","text_tokens":["灯","松开","尝试","。","和","led","比如","功能","我们","同时","连接","一个","实现","被","这样","下","的","按","熄灭","按键","，","点亮"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_14","text":"我们通过这个例程来试一试效果如何？ $ sudo python3 button_led.py 我们来看一下具体的操作，同样的，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。按下按键后，就可以看到LED被点亮了，松开之后，LED就熄灭了。","text_tokens":["_","松开","这个","来看","。","然后","后","了","刚才","设置","可以","同样","按照","led","程序","运行","一下","我们"," ","之后",".","$","例程","试一试","完成","看到","py","连接","具体","被","效果","button","如何","的","操作","按下","实物","x3pi","就","来","将","到","熄灭","按键","？","sudo","，","通过","python3","点亮"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_15","text":"button_led.py #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道： # 36号作为输出，可以点亮一个LED # 38号作为输入，可以接一个按钮 led_pin = 36 # BOARD 编码 36 but_pin = 38 # BOARD 编码 38 # 禁用警告信息 GPIO . setwarnings ( False ) def main (): prev_value = None # Pin Setup: GPIO . setmode ( GPIO . BOARD ) # BOARD pin-numbering scheme GPIO . setup ( led_pin , GPIO . OUT ) # LED pin set as output GPIO . setup ( but_pin , GPIO . IN ) # Button pin set as input # Initial state for LEDs: GPIO . output ( led_pin , GPIO . LOW ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : curr_value = GPIO . input ( but_pin ) if curr_value != prev_value : GPIO . output ( led_pin , curr_value ) prev_value = curr_value print ( \"Outputting {} to Pin {} \" . format ( curr_value , led_pin )) time . sleep ( 1 ) finally : GPIO . cleanup () # cleanup all GPIO if __name__ == '__main__' : main () 基本的配置还是一样的，引入基本的库，然后设置为BOARD模式，然后初始化两个管脚，一个用来读取按键的通断，一个用来控制LED的亮灭，之后只需要判断按键的状态来做出对应的控制LED的动作就可以了。","text_tokens":["通断","false","了","demo","cleanup","env","输入","print","/","if","初始","之后","time","通道","out","ctrl","=","：","c","就","定义","还是","board","为","，","for","'","编码","input","name","读取","press","警告","然后","信息","__","两个","setwarnings","state","hobot","true","亮","号","接","low","状态","starting","scheme","!","基本",",","控制","button","对应","模式","while","main","按键","作为","try","python3","set","判断","38","curr","。","prev","设置","\"",":","禁用","in",")","只","+","as","import"," ","使用","1","sleep","36","一个","setup","-","numbering","动作","finally","all","一样","bin","usr","#","pin","点亮","做出","_","gpio","to","outputting","用来","可以","灭","初始化","led","none","按钮","now","{","引入","(","需要","format","配置",".","库","输出","管脚","py","output","def","的","but","initial","来","value","}","setmode","exit","leds"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/","text":"PWM脉冲宽度调制 我们已经可以用GPIO控制LED灯一闪一闪亮晶晶了，这样只有亮和灭的状态似乎还是太简单了，能不能对LED的亮度进行调整呢？ 当然没问题，这就要用到接下来学习的PWM脉冲宽度调制了。 PWM脉冲宽度调制原理 在GPIO的数字输入和输出模式中，只有高低电平，高电平一般是3.3V或者5V，低电平就是0V，如果我想要一个折中一点的电压怎么办呢？PWM大家了解一下。 PWM，全称是脉冲宽度调制 ， 是一种对模拟信号电平进行数字编码的方法，通过高分辨率计数器，调制出一定占空比的方波，通过这种方式对模拟信号的电平进行编码。 通俗点来说，如果我们有一个10W的灯泡，在一个小时中亮了半个小时，那我们宏观来看，它在这一个小时中的功率就是5W，这样就相当于是它的电压被降低了。而我们还可以通过改变这一个小时中，灯泡被点亮的时长，来等效出不同的电压。 然后，我们把一个小时缩短为很小的一个时间，到达一定的微分程度，表现出来的就是电压的变化，而这个很小的时间，就是PWM频率的倒数，被点亮的时间在这个很小的时间中所占的百分比就叫做占空比。 这里大家也要注意，虽然PWM在尽力呈现出模拟信号的样子，但本质还是数字信号，因为在给定的某一任何时刻，引脚只能高电平或者低电平。 通过PWM技术，可以让数字电路产生类似模拟信号的效果，从而实现类似的无级控制，比如风扇的转速，或者屏幕的亮度，很多都是通过PWM技术实现的调节。 PWM编程 接下来我们就来试一试，通过PWM让一个LED实现不同亮度的变化，也就是我们常见的呼吸灯了。 硬件接线 还是用这个LED灯，一端连接电阻，再到5V高电平的引脚，另外一端，接到33号引脚的PWM接口。 运行示例程序 大家先来运行例程，看看效果如何。 $ sudo python3 simple_pwm.py 我们来看一下实物的操作，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。就可以看到这样的一个呼吸灯的效果了。 代码解析 simple_pwm.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 支持PWM的管脚: 32 and 33, 在使用PWM时，必须确保该管脚没有被其他功能占用 output_pin = 33 def main (): # Pin Setup: # Board pin-numbering scheme GPIO . setmode ( GPIO . BOARD ) # 支持的频率范围： 48KHz ~ 192MHz p = GPIO . PWM ( output_pin , 48000 ) # 初始占空比 25%， 先每0.25秒增加5%占空比，达到100%之后再每0.25秒减少5%占空比 val = 25 incr = 5 p . ChangeDutyCycle ( val ) p . start ( val ) print ( \"PWM running. Press CTRL+C to exit.\" ) try : while True : time . sleep ( 0.25 ) if val >= 100 : incr = - incr if val <= 0 : incr = - incr val += incr p . ChangeDutyCycle ( val ) finally : p . stop () GPIO . cleanup () if __name__ == '__main__' : main () 一样的引入GPIO的库，然后设置管脚编码模式为BOARD，然后创建一个PWM的实例化对象p，同时设置他的频率，之后就可以通过ChangeDutyCycle来改变他的占空比，在循环当中，占空比大于等于100时，就会以5%的梯度减小；当小于等于0时，就会以5%的梯度增大。","text_tokens":["and","只能","进行","降低","以","化","大于","$","5w","被","：","高电平","一般","将","原理","解析","val","占","name","循环","一定","然后","等于","刚才","hobot","高","号","改变","亮晶晶","很多","问题","注意","是","很小","实现",",","一闪","它",">","main","编程","python3","这个","对象","\"",":","程序",")","import"," ","本质","调整","sleep","呈现出","方式","这里","start","占空比","numbering","出来","只有","数字电路","？","一点","那","5v","_","to","任何时刻","按照","led","~","(","能",".","技术","学习","3.3","当于","def","再","一","太","呈现","示例","中","似乎","pwm","当","虽然","了","百分比","让","功能","输入","运行","<","time","等效","但","模拟信号","48khz","来说","用到","宽度","就","用","电路","还是","'","100","__","从而","和","时间","接下","方波","一种","还","scheme","下来","!","范围","程度","x3pi","他","分辨率","while","在","try","半个","当中","某","微分","时","时刻","不同","灯一闪","+","使用","试一试","连接","引脚","finally","调制","32","数字","如果","点亮","要","小时","当然","会","我们","屏幕","产生","电压","而","48000","高分辨率","0.25","点","py","有","output","接到","这样","33","接线","灯泡","实物","小于","相当于","功率","接口","其他","就是","该","同时","到达","一端","常见","=","方法","计数器","了解","c","倒数","board","就要","通过","没有","press","呢","p","无级","每","比如","100%","我","风扇","辨率","亮度","呼吸","running","也","表现","梯度","模式","通俗","。","设置","占用","把","5%","10w","都","样子","一个","5","setup","大家","一样","到","usr","#","接下来","gpio","灯","缩短","incr","全称","低电平","引入","现出","简单","另外","减少","模拟","数字信号","的","simple","先","；","exit","192mhz","中所","脉冲","必须","cleanup","env","计数","print","/","增加","if","初始","之后","叫做","百分","数字编码","代码","ctrl","信号","效果","已经","宏观","电阻","何时","为","秒","支持","变化","，","这","编码","晶晶","高分","频率","来看","类似","数字电","true","这种","亮","因为","changedutycycle","怎么办","确保","转速","看到","对","状态","或者","控制","分辨","25%","出","没","sudo","中亮","0","创建","相当","0v","25","as","不能","尽力","例程","任何","减小","-","bin","增大","硬件","给定","折中","如何","pin","看看","时长","可以","灭","怎么","电平","达到","一下","实例","想要","库","输出","完成","管脚","v","操作","来","stop","setmode","调节"],"title":"PWM脉冲宽度调制","title_tokens":["宽度","脉冲","pwm","调制"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm","text":"我们已经可以用GPIO控制LED灯一闪一闪亮晶晶了，这样只有亮和灭的状态似乎还是太简单了，能不能对LED的亮度进行调整呢？ 当然没问题，这就要用到接下来学习的PWM脉冲宽度调制了。","text_tokens":["gpio","晶晶","呢","。","了","脉冲","进行","当然","可以","灭","灯一闪","和","led","亮","接下","我们","简单","亮晶晶","不能"," ","问题","能","亮度","对","调整","学习","状态","下来","用到","这样","一闪","pwm","控制","的","已经","调制","太","宽度","用","只有","还是","没","？","，","就要","似乎","这","接下来"],"title":"PWM脉冲宽度调制","title_tokens":["宽度","脉冲","pwm","调制"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm_1","text":"在GPIO的数字输入和输出模式中，只有高低电平，高电平一般是3.3V或者5V，低电平就是0V，如果我想要一个折中一点的电压怎么办呢？PWM大家了解一下。 PWM，全称是脉冲宽度调制 ， 是一种对模拟信号电平进行数字编码的方法，通过高分辨率计数器，调制出一定占空比的方波，通过这种方式对模拟信号的电平进行编码。 通俗点来说，如果我们有一个10W的灯泡，在一个小时中亮了半个小时，那我们宏观来看，它在这一个小时中的功率就是5W，这样就相当于是它的电压被降低了。而我们还可以通过改变这一个小时中，灯泡被点亮的时长，来等效出不同的电压。 然后，我们把一个小时缩短为很小的一个时间，到达一定的微分程度，表现出来的就是电压的变化，而这个很小的时间，就是PWM频率的倒数，被点亮的时间在这个很小的时间中所占的百分比就叫做占空比。 这里大家也要注意，虽然PWM在尽力呈现出模拟信号的样子，但本质还是数字信号，因为在给定的某一任何时刻，引脚只能高电平或者低电平。 通过PWM技术，可以让数字电路产生类似模拟信号的效果，从而实现类似的无级控制，比如风扇的转速，或者屏幕的亮度，很多都是通过PWM技术实现的调节。","text_tokens":["中所","只能","虽然","了","脉冲","进行","降低","百分比","让","输入","计数","就是","叫做","百分","数字编码","5w","等效","到达","模拟信号","但","来说","方法","计数器","被","信号","效果","高电平","了解","宏观","宽度","就","倒数","一般","电路","何时","还是","为","变化","，","通过","这","编码","占","高分","频率","呢","来看","一定","然后","类似","从而","无级","数字电","和","这种","时间","比如","因为","高","方波","我","一种","辨率","改变","风扇","很多","怎么办","还","转速","注意","对","亮度","是","或者","很小","实现","也","它","表现","控制","程度","分辨","出","模式","分辨率","在","通俗","半个","中亮","某","这个","微分","。","时刻","不同","相当","0v","把"," ","10w","本质","都","尽力","任何","呈现出","方式","这里","样子","一个","占空比","大家","引脚","出来","调制","只有","数字","数字电路","？","给定","如果","折中","点亮","一点","那","5v","gpio","时长","任何时刻","要","小时","缩短","可以","全称","低电平","怎么","电平","现出","一下","我们","屏幕","产生","电压","而","想要","技术","输出","高分辨率","点","v","3.3","模拟","有","当于","这样","数字信号","的","灯泡","一","来","呈现","相当于","功率","中","调节","pwm"],"title":"PWM脉冲宽度调制原理","title_tokens":["宽度","调制","脉冲","原理","pwm"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm_2","text":"接下来我们就来试一试，通过PWM让一个LED实现不同亮度的变化，也就是我们常见的呼吸灯了。","text_tokens":["灯","。","了","不同","接下来","让","led","接下","我们","就是","亮度","试一试","下来","一个","常见","呼吸","实现","也","的","就","来","变化","，","通过","pwm"],"title":"PWM编程","title_tokens":["pwm","编程"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_1","text":"还是用这个LED灯，一端连接电阻，再到5V高电平的引脚，另外一端，接到33号引脚的PWM接口。","text_tokens":["灯","这个","。","接口","led","电平","号","另外","一端","连接","再","接到","引脚","33","高电平","的","电阻","用","还是","到","，","pwm","5v"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_2","text":"大家先来运行例程，看看效果如何。 $ sudo python3 simple_pwm.py 我们来看一下实物的操作，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。就可以看到这样的一个呼吸灯的效果了。","text_tokens":["_","看看","灯","来看","。","然后","了","刚才","设置","可以","按照","程序","运行","一下","我们"," ",".","$","例程","看到","完成","py","连接","一个","呼吸","大家","这样","效果","如何","操作","的","simple","实物","先","x3pi","就","来","将","到","，","sudo","python3","pwm"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_3","text":"simple_pwm.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 支持PWM的管脚: 32 and 33, 在使用PWM时，必须确保该管脚没有被其他功能占用 output_pin = 33 def main (): # Pin Setup: # Board pin-numbering scheme GPIO . setmode ( GPIO . BOARD ) # 支持的频率范围： 48KHz ~ 192MHz p = GPIO . PWM ( output_pin , 48000 ) # 初始占空比 25%， 先每0.25秒增加5%占空比，达到100%之后再每0.25秒减少5%占空比 val = 25 incr = 5 p . ChangeDutyCycle ( val ) p . start ( val ) print ( \"PWM running. Press CTRL+C to exit.\" ) try : while True : time . sleep ( 0.25 ) if val >= 100 : incr = - incr if val <= 0 : incr = - incr val += incr p . ChangeDutyCycle ( val ) finally : p . stop () GPIO . cleanup () if __name__ == '__main__' : main () 一样的引入GPIO的库，然后设置管脚编码模式为BOARD，然后创建一个PWM的实例化对象p，同时设置他的频率，之后就可以通过ChangeDutyCycle来改变他的占空比，在循环当中，占空比大于等于100时，就会以5%的梯度减小；当小于等于0时，就会以5%的梯度增大。","text_tokens":["and","必须","以","cleanup","env","功能","print","<","/","其他","增加","if","化","大于","初始","之后","time","该","同时","48khz","ctrl","=","被","：","c","就","board","秒","为","支持","val","，","通过","没有","'","100","name","编码","循环","press","频率","p","然后","等于","__","每","hobot","true","100%","改变","changedutycycle","确保","scheme","!","running",",","范围","梯度",">","25%","他","模式","while","main","在","try","当中","python3","0","创建","时","。","对象","设置","\"",":",")","占用","25","+","as","5%","import"," ","使用","sleep","减小","start","一个","占空比","5","setup","-","numbering","finally","32","bin","一样","usr","#","增大","pin","_","gpio","to","incr","可以","会","~","引入","达到","(","实例",".","48000","库","0.25","减少","管脚","py","output","def","再","33","的","simple","先","来","小于","stop","；","setmode","exit","192mhz","pwm","当"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/","text":"UART串口通信 现在的传感器和执行器种类越来越多，需要和控制器传输的数据也是多种多样，只用GPIO来控制和读取的话，只有0和1的状态，未免还是有点麻烦，各种各样的通信方法也层出不穷，UART串口通信绝对是最为常用的一种。 串口通信原理 串行通信是一种通讯协议，也可以简称为串口，可以理解为数据是串成一串的，所以也就只能一位一位的发送，这样传输的速度虽然受到了限制，但是对硬件线路的要求小，只需要一对传输线，一个发送，一个接收，就可以实现双向通信了。 一般情况下，串口模块发送数据的管脚叫做TX，接收数据的管脚叫做RX。发送端发过去的数据，需要对方串口模块的接收端来接收，所以一侧发送端的TX需要连接到另外一侧的接收端RX，接收和发送在两方看来是相对的，所以我们接线的时候，要记住永远是TX引脚连接到RX引脚，接反了数据就传输不了了。 硬件连接 接下来，我们就尝试通过一个串口模块来实现电脑和旭日X3Pi的串口通信。 在接线方面，我们先交叉连接串口模块和旭日X3Pi的RX、TX，同时为了让两边具有相同的参考电平，还要将两者的GND连接到一起，然后再把串口模块连接到电脑就可以了。 运行示例程序 接下来就可以运行串口通信的例程了。 $ sudo python3 test_serial.py 实物接线完成后，在旭日X3派的终端中输入指令启动例程，很快就可以在终端中看到串口向外发送的数据了。 在串口连接的电脑中打开一个串口软件，用来接收和发送数据，设置好端口和波特率，就能看到旭日X3派发过来的数据了。我们再使用电脑的串口软件尝试下发送数据给旭日X3派，输入1234，点击发送，可以看到，X3Pi的终端这边也成功的接收到了数据并且打印出来了。 代码解析 test_serial.py： #!/usr/bin/env python3 import sys import os import time # 导入python串口库 import serial import serial.tools.list_ports def serialTest (): print ( \"List of enabled UART:\" ) os . system ( 'ls /dev/tty[a-zA-Z]*' ) uart_dev = input ( \"请输入需要测试的串口设备名:\" ) baudrate = input ( \"请输入波特率(9600,19200,38400,57600,115200,921600):\" ) try : ser = serial . Serial ( uart_dev , int ( baudrate ), timeout = 1 ) # 1s timeout except Exception as e : print ( \"open serial failed! \\n \" ) print ( ser ) print ( \"Starting demo now! Press CTRL+C to exit\" ) while True : test_data = \"AA55\" write_num = ser . write ( test_data . encode ( 'UTF-8' )) print ( \"Send: \" , test_data ) received_data = ser . read ( write_num ) . decode ( 'UTF-8' ) if received_data : print ( \"Recv: \" , received_data ) time . sleep ( 1 ) ser . close () return 0 if __name__ == '__main__' : if serialTest () != 0 : print ( \"Serial test failed!\" ) else : print ( \"Serial test success!\" ) X3Pi这边如果要使用串口，直接使用serial库就可以了，这里我们先调用系统的库，打印出当前有哪些串口，然后手动输入选择串口的设备名，再输入串口的波特率，就可以进项串口的初始化了，初始化成功之后就会进入循环。 循环中，X3Pi会每隔一秒发送一次AA55，同时还会判断是否接收到了数据，如果接收到了数据也会打印出来。","text_tokens":["只能","是否","层出不穷","永远","[","ser","n","相对","$","send","多样","enabled","：","1s","\\","list","一般","将","原理","简称","解析","name","循环","通讯","gnd","读取","input","close","选择","然后","很快","ls","进项","给","导入","9600","越来越","rx","sys","所以","发送数据","旭日","19200","是","实现",",","打开","8","main","请","serialtest","python3","线路","端口","\"",":","具有","程序",")","发送","各种","import"," ","参考","z","sleep","这里","派发","接反","向外","出来","只有","int","_","to","尝试","调用","两边","38400","接收数据","终端","now","(","decode","能",".","def","再","软件","示例","相同","中","数据","协议","有点","system","虽然","了","success","每隔","让","输入","运行","多种","多种多样","time","一侧","就","还是","write","'","的话","921600","__","和","接下","一种","派","受到","下来","!","*","x3pi","未免","while","在","try","波特率","执行","端发","传感器","za","data","57600","+","使用","双向通信","不了","连接","模块","引脚","交叉","通信","a","只用","并且","如果","tx","传感","要","用来","会","utf","需要","我们","要求","else","py","感器","有","各种各样","多","这样","时候","双向","接线","实物","传输线","一位","现在","后","baudrate","好","同时","except","=","方法","tty","c","ports","通过","press","限制","但是","串成","执行器","为了","encode","系统","也","open","recv","方面","1234","电脑","num","传输","情况","。","设置","exception","把","接收端","接收","一个","当前","还要","还会","x3","read","到","usr","#","接下来","gpio","两方","名","手动","]","另外","哪些","越来","对方","received","下","的","先","记住","一起","麻烦","exit","直接","demo","看来","一秒","env","、","print","控制器","/","if","初始","之后","叫做","过来","代码","ctrl","成功","为","，","串口","python","指令","dev","true","serial","设备","一串","看到","对","115200","e","状态","starting","串行","这边","控制","端的","出","各样","timeout","sudo","os","小","0","判断","最为","of","测试","常用","波特","只","as","速度","1","例程","一对","进入","-","两者","种类","tools","bin","绝对","一次","aa55","硬件","可以","test","打印","初始化","failed","电平","return","理解","点击","启动","库","完成","管脚","uart","来","过去"],"title":"UART异步串口通信","title_tokens":["串口","通信","异步","uart"]},{"location":"hhp/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#uart","text":"现在的传感器和执行器种类越来越多，需要和控制器传输的数据也是多种多样，只用GPIO来控制和读取的话，只有0和1的状态，未免还是有点麻烦，各种各样的通信方法也层出不穷，UART串口通信绝对是最为常用的一种。","text_tokens":["gpio","的话","现在","传感","最为","。","执行","传感器","层出不穷","和","常用","越来越","需要","各种","执行器","控制器","一种","多种","多种多样","1","多样","状态","是","越来","感器","各种各样","多","读取","方法","也","控制","通信","种类","的","uart","只有","未免","只用","来","还是","各样","绝对","，","麻烦","串口","数据","有点","0","传输"],"title":"UART串口通信","title_tokens":["串口","通信","uart"]},{"location":"hhp/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_1","text":"串行通信是一种通讯协议，也可以简称为串口，可以理解为数据是串成一串的，所以也就只能一位一位的发送，这样传输的速度虽然受到了限制，但是对硬件线路的要求小，只需要一对传输线，一个发送，一个接收，就可以实现双向通信了。 一般情况下，串口模块发送数据的管脚叫做TX，接收数据的管脚叫做RX。发送端发过去的数据，需要对方串口模块的接收端来接收，所以一侧发送端的TX需要连接到另外一侧的接收端RX，接收和发送在两方看来是相对的，所以我们接线的时候，要记住永远是TX引脚连接到RX引脚，接反了数据就传输不了了。","text_tokens":["只能","虽然","了","永远","看来","相对","叫做","一侧","就","一般","为","简称","，","串口","通讯","限制","但是","和","串成","一种","rx","所以","受到","发送数据","一串","对","是","串行","实现","也","端的","在","小","线路","传输","情况","。","端发","只","发送","速度","接收端"," ","接收","双向通信","不了","一对","连接","一个","接反","模块","引脚","通信","到","硬件","tx","两方","要","可以","接收数据","理解","需要","我们","另外","要求","管脚","对方","这样","时候","下","的","双向","接线","传输线","记住","来","过去","数据","协议","一位"],"title":"串口通信原理","title_tokens":["通信","串口","原理"]},{"location":"hhp/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_2","text":"接下来，我们就尝试通过一个串口模块来实现电脑和旭日X3Pi的串口通信。 在接线方面，我们先交叉连接串口模块和旭日X3Pi的RX、TX，同时为了让两边具有相同的参考电平，还要将两者的GND连接到一起，然后再把串口模块连接到电脑就可以了。","text_tokens":["尝试","两边","。","然后","了","可以","接下来","具有","和","让","电平","、","接下","我们","rx","为了","把"," ","旭日","参考","同时","下来","连接","一个","实现","还要","模块","再","交叉","通信","两者","的","接线","就","x3pi","先","来","将","到","在","一起","，","相同","串口","通过","方面","tx","电脑","gnd"],"title":"硬件连接","title_tokens":["硬件","连接"]},{"location":"hhp/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_3","text":"接下来就可以运行串口通信的例程了。 $ sudo python3 test_serial.py 实物接线完成后，在旭日X3派的终端中输入指令启动例程，很快就可以在终端中看到串口向外发送的数据了。 在串口连接的电脑中打开一个串口软件，用来接收和发送数据，设置好端口和波特率，就能看到旭日X3派发过来的数据了。我们再使用电脑的串口软件尝试下发送数据给旭日X3派，输入1234，点击发送，可以看到，X3Pi的终端这边也成功的接收到了数据并且打印出来了。","text_tokens":["_","指令","尝试","。","用来","了","后","很快","设置","可以","给","test","电脑","打印","使用","终端","和","输入","波特","接下","运行","serial","发送","我们","派","点击"," ","接收","好","能",".","发送数据","旭日","启动","$","例程","过来","看到","完成","下来","py","连接","一个","派发","再","向外","软件","也","这边","出来","通信","打开","的","接线","下","成功","实物","就","x3pi","x3","到","在","并且","sudo","，","串口","中","波特率","数据","python3","1234","接下来","端口"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_4","text":"test_serial.py： #!/usr/bin/env python3 import sys import os import time # 导入python串口库 import serial import serial.tools.list_ports def serialTest (): print ( \"List of enabled UART:\" ) os . system ( 'ls /dev/tty[a-zA-Z]*' ) uart_dev = input ( \"请输入需要测试的串口设备名:\" ) baudrate = input ( \"请输入波特率(9600,19200,38400,57600,115200,921600):\" ) try : ser = serial . Serial ( uart_dev , int ( baudrate ), timeout = 1 ) # 1s timeout except Exception as e : print ( \"open serial failed! \\n \" ) print ( ser ) print ( \"Starting demo now! Press CTRL+C to exit\" ) while True : test_data = \"AA55\" write_num = ser . write ( test_data . encode ( 'UTF-8' )) print ( \"Send: \" , test_data ) received_data = ser . read ( write_num ) . decode ( 'UTF-8' ) if received_data : print ( \"Recv: \" , received_data ) time . sleep ( 1 ) ser . close () return 0 if __name__ == '__main__' : if serialTest () != 0 : print ( \"Serial test failed!\" ) else : print ( \"Serial test success!\" ) X3Pi这边如果要使用串口，直接使用serial库就可以了，这里我们先调用系统的库，打印出当前有哪些串口，然后手动输入选择串口的设备名，再输入串口的波特率，就可以进项串口的初始化了，初始化成功之后就会进入循环。 循环中，X3Pi会每隔一秒发送一次AA55，同时还会判断是否接收到了数据，如果接收到了数据也会打印出来。","text_tokens":["直接","是否","了","success","demo","[","ser","一秒","每隔","env","输入","baudrate","print","n","/","if","初始","之后","time","send","同时","except","enabled","ctrl","=","：","tty","1s","成功","\\","c","就","list","ports","write","，","串口","'","python","input","name","close","press","循环","选择","921600","然后","ls","进项","__","导入","9600","dev","true","serial","设备","sys","encode","19200","e","115200","starting","系统","!",",","也","这边","*","open","8","x3pi","出","while","main","recv","timeout","try","请","serialtest","波特率","python3","os","0","num","判断","of","测试","。","za","data","\"","exception",":","57600","波特",")","发送","+","as","import"," ","使用","接收","1","z","sleep","这里","当前","进入","-","出来","tools","bin","还会","a","一次","read","usr","aa55","到","#","int","如果","_","to","调用","要","38400","可以","会","名","test","打印","utf","初始化","failed","return","now","(","需要","我们","手动","decode",".","]","库","哪些","else","py","有","def","再","received","的","先","uart","中","exit","数据","system"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/","text":"SPI同步串行通信 UART串口通信中的数据只能一位一位的传输，如果数据量比较大的时候，传输速率会受到很大影响，此时我们就可以考虑使用同步串行通信了，比如SPI。 SPI通信原理 SPI，全称是Serial Peripheral Interface，也就是串行外设接口，同样是一种通信协议，在很多芯片中都有集成。 相比之前学习的UART串口通信，他多了两根线，其中一个是时钟信号，另一个是设备使能信号，用来控制设备是否启用，所以也产生了主从设备的概念。 MISO ：Master Input Slave Output，主设备数据输入，从设备数据输出； MOSI ：Master Output Slave Input，主设备数据输出，从设备数据输入； SCLK ：Serial Clock，时钟信号，由主设备产生； CS ：Chip Select，从设备使能信号，由主设备控制。 这样，在一组SPI通信的系统中，可以连接多个设备，想要和哪个设备通信时，就使能这个设备，除能其他设备。 我们在开发中常见的SPI设备会有一些传感器，还有电阻屏之类的。 硬件连线 在SPI的通信中，有一个管脚负责发送，另外一个管脚负责接收，如果我们把同一组SPI的发送和接收接到一起，岂不是能接收到自己发送的数据吗？ 我们不妨来试一试，这里使用一个跳线帽直接把19，21两个SPI的通信管脚短接。 运行示例程序 大家来运行例程，看看会发生什么？ $ sudo python3 test_spi.py 在旭日X3派的终端中，输入运行例程的指令，接下来我们就可以看到通过SPI传输并收到的数据啦，相当于是左手传递给右手，自己给自己循环传输数据了。 代码解析 test_spi.py： #!/usr/bin/env python3 import sys import os import time # 导入spidev模块 import spidev def BytesToHex ( Bytes ): return '' . join ([ \"0x %02X \" % x for x in Bytes ]) . strip () def spidevTest (): # 设置spi的bus号（0, 1, 2）和片选(0, 1) spi_bus = input ( \"Please input SPI bus num:\" ) spi_device = input ( \"Please input SPI cs num:\" ) # 创建spidev类的对象以访问基于spidev的Python函数。 spi = spidev . SpiDev () # 打开spi总线句柄 spi . open ( int ( spi_bus ), int ( spi_device )) # 设置 spi 频率为 12MHz spi . max_speed_hz = 12000000 print ( \"Starting demo now! Press CTRL+C to exit\" ) # 发送 [0x55, 0xAA], 接收的数据应该也是 [0x55, 0xAA] try : while True : resp = spi . xfer2 ([ 0x55 , 0xAA ]) print ( BytesToHex ( resp )) time . sleep ( 1 ) except KeyboardInterrupt : spi . close () if __name__ == '__main__' : print ( \"List of enabled spi controllers:\" ) os . system ( 'ls /dev/spidev*' ) spidevTest () 在python中使用spidev这个库，初始化X3Pi的SPI，之后使用xerf2发送数据，同时接收数据，并打印出来，会发现打印出来的就是我们发送的。","text_tokens":["直接","只能","是否","传递","了","并打印","keyboardinterrupt","miso","[","以","demo","接口","岂","env","大","interface","输入","除能","自己","运行","print","其他","/","集成","if","slave","初始","就是","之后","time","总线","$","跳线","同时","此时","19","代码","strip","常见","ctrl","=","except","enabled","信号","主","应该","：","基于","传输数据","访问","电阻","c","就","0x","list","clock","为","0x55","原理","通信协议","解析","name","，","bytestohex","串口","负责","通过","并","'","for","2","python","input","由主","循环","连线","max","指令","频率","join","press","close","speed","主从","ls","给","两个","__","导入","和","dev","true","两根","比如","02x","接下","号","serial","设备","一种","派","左手","sys","%","很多","peripheral","受到","所以","旭日","发送数据","看到","从","比较","是","句柄","串行","启用","系统","短接","一些","下来","!","starting","还有","xerf2",",","右手","spidevtest","也","考虑","mosi","线","控制","函数","打开","open","*","device","x3pi","他","多个","另","哪个","while","12000000","main","在","不是","sudo","try","数据量","sclk","python3","os","之类","0","num","传输","外设","这个","创建","xfer2","时","。","bus","of","传感器","对象","设置","chip","select","\"","同样",":","in","相当","同步","影响","程序","芯片",")","12mhz","发送","）","+","把","x","import","速率"," ","使用","接收","同","1","都","例程","啦","片选","试一试","sleep","帽","0xaa","这里","spidev","连接","一个","21","发生","大家","模块","使能","出来","controllers","通信","使","bin","开发","x3","到","spi","usr","#","硬件","？","int","如果","hz","接下来","master","看看","_","传感","吗","to","cs","用来","可以","会","全称","接收数据","test","相比","打印","初始化","终端","return","不妨","now","什么","(","我们","收到","产生","屏","想要","能",".","]","库","另外","输出","学习","bytes","管脚","py","感器","有","output","多","当于","def","（","resp","接到","这样","please","一组","时候","的","发现","uart","传输速率","来","相当于","；","很大","一起","示例","之前","中","其中","数据","协议","概念","一位","类","exit","system","时钟"],"title":"SPI同步串行通信","title_tokens":["通信","串行","spi","同步"]},{"location":"hhp/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#spi","text":"UART串口通信中的数据只能一位一位的传输，如果数据量比较大的时候，传输速率会受到很大影响，此时我们就可以考虑使用同步串行通信了，比如SPI。","text_tokens":["只能","。","了","可以","会","同步","影响","大","比如","我们","速率","使用","受到","比较","此时","串行","考虑","通信","时候","的","就","uart","传输速率","spi","很大","，","串口","中","如果","数据","数据量","一位","传输"],"title":"SPI同步串行通信","title_tokens":["通信","串行","spi","同步"]},{"location":"hhp/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#spi_1","text":"SPI，全称是Serial Peripheral Interface，也就是串行外设接口，同样是一种通信协议，在很多芯片中都有集成。 相比之前学习的UART串口通信，他多了两根线，其中一个是时钟信号，另一个是设备使能信号，用来控制设备是否启用，所以也产生了主从设备的概念。 MISO ：Master Input Slave Output，主设备数据输入，从设备数据输出； MOSI ：Master Output Slave Input，主设备数据输出，从设备数据输入； SCLK ：Serial Clock，时钟信号，由主设备产生； CS ：Chip Select，从设备使能信号，由主设备控制。 这样，在一组SPI通信的系统中，可以连接多个设备，想要和哪个设备通信时，就使能这个设备，除能其他设备。 我们在开发中常见的SPI设备会有一些传感器，还有电阻屏之类的。","text_tokens":["是否","了","miso","接口","除能","interface","输入","其他","集成","slave","就是","常见","信号","主","：","电阻","就","clock","通信协议","，","串口","由主","input","主从","和","两根","serial","设备","协议","一种","很多","peripheral","所以","从","是","串行","启用","系统","一些","还有","也","mosi","线","控制","他","多个","另","哪个","在","sclk","之类","外设","这个","时","。","传感器","chip","select","同样","芯片"," ","都","连接","一个","使能","通信","使","开发","spi","master","传感","cs","用来","可以","全称","会","相比","我们","产生","想要","能","输出","学习","感器","有","output","多","这样","一组","的","uart","；","之前","中","其中","数据","概念","屏","时钟"],"title":"SPI通信原理","title_tokens":["通信","spi","原理"]},{"location":"hhp/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_1","text":"在SPI的通信中，有一个管脚负责发送，另外一个管脚负责接收，如果我们把同一组SPI的发送和接收接到一起，岂不是能接收到自己发送的数据吗？ 我们不妨来试一试，这里使用一个跳线帽直接把19，21两个SPI的通信管脚短接。","text_tokens":["直接","吗","。","两个","岂","和","自己","不妨","发送","我们","把"," ","接收","使用","同","能","另外","试一试","跳线","帽","管脚","这里","19","21","有","一个","短接","接到","一组","通信","的","来","到","spi","在","一起","不是","，","？","中","负责","如果","数据"],"title":"硬件连线","title_tokens":["硬件","连线"]},{"location":"hhp/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_2","text":"大家来运行例程，看看会发生什么？ $ sudo python3 test_spi.py 在旭日X3派的终端中，输入运行例程的指令，接下来我们就可以看到通过SPI传输并收到的数据啦，相当于是左手传递给右手，自己给自己循环传输数据了。","text_tokens":["_","看看","指令","传递","。","了","可以","会","给","test","终端","相当","自己","输入","接下","运行","什么","我们","派","收到","左手"," ",".","旭日","$","例程","啦","看到","是","py","下来","发生","当于","大家","右手","传输数据","的","就","来","x3","相当于","spi","在","？","，","sudo","中","通过","并","数据","python3","接下来","循环","传输"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_3","text":"test_spi.py： #!/usr/bin/env python3 import sys import os import time # 导入spidev模块 import spidev def BytesToHex ( Bytes ): return '' . join ([ \"0x %02X \" % x for x in Bytes ]) . strip () def spidevTest (): # 设置spi的bus号（0, 1, 2）和片选(0, 1) spi_bus = input ( \"Please input SPI bus num:\" ) spi_device = input ( \"Please input SPI cs num:\" ) # 创建spidev类的对象以访问基于spidev的Python函数。 spi = spidev . SpiDev () # 打开spi总线句柄 spi . open ( int ( spi_bus ), int ( spi_device )) # 设置 spi 频率为 12MHz spi . max_speed_hz = 12000000 print ( \"Starting demo now! Press CTRL+C to exit\" ) # 发送 [0x55, 0xAA], 接收的数据应该也是 [0x55, 0xAA] try : while True : resp = spi . xfer2 ([ 0x55 , 0xAA ]) print ( BytesToHex ( resp )) time . sleep ( 1 ) except KeyboardInterrupt : spi . close () if __name__ == '__main__' : print ( \"List of enabled spi controllers:\" ) os . system ( 'ls /dev/spidev*' ) spidevTest () 在python中使用spidev这个库，初始化X3Pi的SPI，之后使用xerf2发送数据，同时接收数据，并打印出来，会发现打印出来的就是我们发送的。","text_tokens":["并打印","keyboardinterrupt","以","[","demo","env","print","/","if","初始","之后","就是","time","总线","同时","strip","except","ctrl","=","enabled","应该","：","基于","访问","c","0x","list","为","0x55","bytestohex","，","for","2","'","python","max","input","close","press","name","频率","join","speed","ls","__","导入","和","dev","true","02x","号","sys","%","发送数据","句柄","是","starting","!","xerf2",",","spidevtest","也","函数","打开","open","*","device","x3pi","while","main","12000000","在","try","python3","os","0","num","创建","这个","xfer2","。","bus","of","对象","设置","\"",":","in",")","发送","）","+","x","import"," ","接收","使用","1","片选","sleep","0xaa","spidev","模块","出来","controllers","bin","usr","spi","#","int","hz","_","to","cs","会","接收数据","test","打印","初始化","return","now","(","我们",".","]","库","bytes","py","（","def","resp","please","的","发现","中","exit","数据","12mhz","类","system"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/","text":"I2C同步串行通信 SPI通信虽然功能更强大了，但是需要4根线做连接，还是有点复杂，接下来I2C的连线就简单很多了。 I2C通信原理 I2C也是一种常用的串行通信方式，和SPI一样可以连接多个设备，重点是它只需要两根线就可以完成。 不过他的两根线和UART不同，不全是传输数据用的，I2C中的一根线是时钟线，另一根才是传输数据的，这根线可以双向的传输数据。 I2C通信中可以有多个主设备或者从设备，只要能通过地址找到彼此的位置即可。 主器件用于启动总线传送数据，并产生时钟给各种从机，此时任何被寻址的器件均被认为是从机。在总线上主和从、发和收的关系不是恒定的，而取决于此时数据传送方向。如果主机要发送数据给从机，主机首先得找到从机的地址，然后主动发送数据过去，最后也得由主机终止数据传送；如果主机要接收从机的数据，同样由主机得找到从机的地址，然后主机接收从器件发送的数据，最后由主机终止接收过程。 因为I2C的特性，使用I2C的设备比SPI多很多，比如图中的紫外线传感器，陀螺仪之类的，都是使用I2C进行通信的。 硬件接线 我们找来一个常用的陀螺仪模块，按照这里的接线图连接到旭日X3派的40PIN接口上，这里除了I2C通信的两根线之外，另外两根是电源线，负责给这个模块供电的，让它正常工作起来。 运行示例程序 接线是挺简单的，我们继续来运行这个例程，看下能否收到数据。 $ sudo python3 mpu6500_i2c.py 在终端启动例程，很快就可以看到通过I2C读取到了大量传感器的数据，这些就是陀螺仪模块的原始数据，收到之后我们就可以进行结算处理啦，这就是我们后续机器人开发的需要解决的问题了。 代码解析 mpu6500_i2c.py： #!/usr/bin/env python3 import smbus , time def MPU6050_start (): # alter sample rate (stability) samp_rate_div = 0 # sample rate = 8 kHz/(1+samp_rate_div) bus . write_byte_data ( MPU6050_ADDR , SMPLRT_DIV , samp_rate_div ) time . sleep ( 0.1 ) # reset all sensors bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x00 ) time . sleep ( 0.1 ) # power management and crystal settings bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x01 ) time . sleep ( 0.1 ) #Write to Configuration register bus . write_byte_data ( MPU6050_ADDR , CONFIG , 0 ) time . sleep ( 0.1 ) #Write to Gyro configuration register gyro_config_sel = [ 0b00000 , 0b010000 , 0b10000 , 0b11000 ] # byte registers gyro_config_vals = [ 250.0 , 500.0 , 1000.0 , 2000.0 ] # degrees/sec gyro_indx = 0 bus . write_byte_data ( MPU6050_ADDR , GYRO_CONFIG , int ( gyro_config_sel [ gyro_indx ])) time . sleep ( 0.1 ) #Write to Accel configuration register accel_config_sel = [ 0b00000 , 0b01000 , 0b10000 , 0b11000 ] # byte registers accel_config_vals = [ 2.0 , 4.0 , 8.0 , 16.0 ] # g (g = 9.81 m/s^2) accel_indx = 0 bus . write_byte_data ( MPU6050_ADDR , ACCEL_CONFIG , int ( accel_config_sel [ accel_indx ])) time . sleep ( 0.1 ) # interrupt register (related to overflow of data [FIFO]) bus . write_byte_data ( MPU6050_ADDR , INT_ENABLE , 1 ) time . sleep ( 0.1 ) return gyro_config_vals [ gyro_indx ], accel_config_vals [ accel_indx ] def read_raw_bits ( register ): # read accel and gyro values high = bus . read_byte_data ( MPU6050_ADDR , register ) low = bus . read_byte_data ( MPU6050_ADDR , register + 1 ) # combine higha and low for unsigned bit value value = (( high << 8 ) | low ) # convert to +- value if ( value > 32768 ): value -= 65536 return value def mpu6050_conv (): # raw acceleration bits acc_x = read_raw_bits ( ACCEL_XOUT_H ) acc_y = read_raw_bits ( ACCEL_YOUT_H ) acc_z = read_raw_bits ( ACCEL_ZOUT_H ) # raw temp bits ## t_val = read_raw_bits(TEMP_OUT_H) # uncomment to read temp # raw gyroscope bits gyro_x = read_raw_bits ( GYRO_XOUT_H ) gyro_y = read_raw_bits ( GYRO_YOUT_H ) gyro_z = read_raw_bits ( GYRO_ZOUT_H ) #convert to acceleration in g and gyro dps a_x = ( acc_x / ( 2.0 ** 15.0 )) * accel_sens a_y = ( acc_y / ( 2.0 ** 15.0 )) * accel_sens a_z = ( acc_z / ( 2.0 ** 15.0 )) * accel_sens w_x = ( gyro_x / ( 2.0 ** 15.0 )) * gyro_sens w_y = ( gyro_y / ( 2.0 ** 15.0 )) * gyro_sens w_z = ( gyro_z / ( 2.0 ** 15.0 )) * gyro_sens ## temp = ((t_val)/333.87)+21.0 # uncomment and add below in return return a_x , a_y , a_z , w_x , w_y , w_z # MPU6050 Registers MPU6050_ADDR = 0x68 PWR_MGMT_1 = 0x6B SMPLRT_DIV = 0x19 CONFIG = 0x1A GYRO_CONFIG = 0x1B ACCEL_CONFIG = 0x1C INT_ENABLE = 0x38 ACCEL_XOUT_H = 0x3B ACCEL_YOUT_H = 0x3D ACCEL_ZOUT_H = 0x3F TEMP_OUT_H = 0x41 GYRO_XOUT_H = 0x43 GYRO_YOUT_H = 0x45 GYRO_ZOUT_H = 0x47 # start I2C driver bus = smbus . SMBus ( 0 ) # start comm with i2c bus gyro_sens , accel_sens = MPU6050_start () # instantiate gyro/accel while True : print ( mpu6050_conv ()) 这里我们看一下怎么使用I2C和陀螺仪通信来获取信息。主体上有三个大的函数，而这三个函数的功能都比较单一，第一个函数通过给陀螺仪发送数据来进行初始化的设置，比如配置陀螺仪的电源寄存器，加速度寄存器等；第二个函数则是从陀螺仪读取数据；第三个函数则是将读取到的函数进行计算，从而变成真正的加速度等信息。 具体的读写操作可以看下面的代码片段，也是直接调用函数指定地址和数据就好了。 这里我们也能看到几个关键的参数，比如陀螺仪MPU6050的地址是0x68，通过这个地址才能确认到陀螺仪的存在，然后进行初始化，初始化完成之后进入循环，不停的将数据打印出来。","text_tokens":["and","div","进行","原始","[","等","加速","$","能否","mpu6050","确认","取决于","具体","被","紫外线","comm","：","传输数据","图中","器件","将","读写","原理","解析","val","2","0x68","读写操作","循环","0b10000","读取","然后","很快","给","第一","处理","均","更","很多","问题","发送数据","旭日","management","mpu6500","4","是","是从","三个",",","它",">","0x19","8","另","0b00000","python3","这些","之类","250.0","陀螺","pwr","这个","同样",":","higha","同步","程序",")","发送","参数","各种","import","9.81"," ","acceleration","获取","啦","z","sleep","0x1b","方式","这里","start","出来","上","convert","陀螺仪","0x3b","interrupt","smbus","int","最后","0x41","线图","_","to","调用","地址","加速度","g","combine","related","按照","终端","只要","(","^","2000.0","能",".","registers","overflow","二个","w","def","enable","做","value","示例","中","看","数据","有点","时钟","虽然","挺","了","恒定","smplrt","unsigned","让","功能","大","运行","关键","<","time","总线","供电","接线图","此时","sens","主","0x1c","0x3d","得","认为","就","用","还是","write","找到","负责","for","工作","mgmt","byte","从而","和","两根","一根","结算","1000.0","接下","fifo","一种","派","gyro","由","复杂","add","low","从","比较","下来","0x00","!","degrees","bit","机器人","传送","driver","*","他","while","333.87","在","才能","不是","主机","存在","真正","传感器","不同","data","40pin","reset","+-","t","不停","+","x","变成","使用","原始数据","8.0","16.0","连接","模块","终止","通信","instantiate","a","yout","如果","传感","要","zout","configuration","位置","sec","indx","解决","需要","我们","产生","而","配置","py","感器","有","多","65536","0x6b","i2c","从机","双向","接线","几个","crystal","第二","找","电源线","外线","接口","大量","sel","15.0","好","就是","单一","用于","=","彼此","主动","sample","dps","不过","sensors","下面","s","并","通过","比","关系","samp","紫外","正常","过程","信息","方向","第三","但是","寻址","计算","below","比如","片段","acc","这根","rate","也","根线","发和收","0x3f","stability","多个","raw","传输","uncomment","。","不全是","vals","设置","in","机器","接收","xout","都","一个","alter","传送数据","一样","开发","|","x3","read","到","spi","usr","#","除了","接下来","0x43","取信","简单","h","accel","调用函数","]","另外","首先","500.0","起来","##","下","的","0.1","bits","2.0","寄存","；","khz","conv","power","电源","机","0b01000","直接","env","、","print","/","if","之后","初始","0x1a","out","代码","config","0x01","强大","指定","，","第二个","这","才","连线","获取信息","true","因为","设备","0x47","0x45","看到","串行","values","或者","21.0","重点","线","4.0","主体","函数","register","with","即可","sudo","特性","0","temp","of","bus","常用","只","0x38","速度","之外","1","addr","继续","例程","任何","0b11000","取决","进入","第一个","-","all","bin","y","硬件","settings","读取数据","high","可以","打印","初始化","怎么","m","return","一下","收到","0b010000","启动","完成","上主","后续","第三个","32768","操作","寄存器","uart","来","gyroscope","则","过去"],"title":"I2C同步串行通信","title_tokens":["i2c","通信","串行","同步"]},{"location":"hhp/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#i2c","text":"SPI通信虽然功能更强大了，但是需要4根线做连接，还是有点复杂，接下来I2C的连线就简单很多了。","text_tokens":["连线","虽然","。","了","但是","功能","接下","需要","更","简单","很多","复杂","4","下来","连接","i2c","通信","的","根线","就","还是","强大","spi","做","，","有点","接下来"],"title":"I2C同步串行通信","title_tokens":["i2c","通信","串行","同步"]},{"location":"hhp/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#i2c_1","text":"I2C也是一种常用的串行通信方式，和SPI一样可以连接多个设备，重点是它只需要两根线就可以完成。 不过他的两根线和UART不同，不全是传输数据用的，I2C中的一根线是时钟线，另一根才是传输数据的，这根线可以双向的传输数据。 I2C通信中可以有多个主设备或者从设备，只要能通过地址找到彼此的位置即可。 主器件用于启动总线传送数据，并产生时钟给各种从机，此时任何被寻址的器件均被认为是从机。在总线上主和从、发和收的关系不是恒定的，而取决于此时数据传送方向。如果主机要发送数据给从机，主机首先得找到从机的地址，然后主动发送数据过去，最后也得由主机终止数据传送；如果主机要接收从机的数据，同样由主机得找到从机的地址，然后主机接收从器件发送的数据，最后由主机终止接收过程。 因为I2C的特性，使用I2C的设备比SPI多很多，比如图中的紫外线传感器，陀螺仪之类的，都是使用I2C进行通信的。","text_tokens":["进行","恒定","、","总线","此时","用于","取决于","被","主","彼此","主动","得","紫外线","认为","传输数据","不过","就","图中","用","器件","，","找到","并","通过","比","关系","才","紫外","过程","然后","方向","给","寻址","和","两根","比如","一根","因为","均","设备","一种","这根","很多","由","发送数据","从","是","是从","串行","或者","传送","也","重点","它","线","发和收","他","多个","另","即可","在","不是","主机","特性","之类","陀螺","传输","。","不全是","传感器","不同","同样","常用","只","发送","各种"," ","接收","使用","都","任何","方式","连接","取决","终止","传送数据","通信","一样","陀螺仪","spi","最后","如果","传感","要","地址","可以","位置","只要","需要","产生","而","能","启动","完成","上主","首先","感器","有","多","i2c","的","双向","从机","uart","；","中","过去","数据","外线","机","时钟"],"title":"I2C通信原理","title_tokens":["i2c","通信","原理"]},{"location":"hhp/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_1","text":"我们找来一个常用的陀螺仪模块，按照这里的接线图连接到旭日X3派的40PIN接口上，这里除了I2C通信的两根线之外，另外两根是电源线，负责给这个模块供电的，让它正常工作起来。","text_tokens":["线图","工作","这个","正常","。","40pin","电源","接口","给","按照","让","常用","两根","我们","派","之外","旭日","供电","另外","接线图","是","这里","连接","一个","模块","起来","它","i2c","通信","线","的","接线","上","陀螺仪","来","x3","到","，","负责","找","电源线","除了","陀螺"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"hhp/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_2","text":"接线是挺简单的，我们继续来运行这个例程，看下能否收到数据。 $ sudo python3 mpu6500_i2c.py 在终端启动例程，很快就可以看到通过I2C读取到了大量传感器的数据，这些就是陀螺仪模块的原始数据，收到之后我们就可以进行结算处理啦，这就是我们后续机器人开发的需要解决的问题了。","text_tokens":["_","这个","传感","。","挺","了","很快","传感器","进行","原始","可以","大量","终端","结算","解决","这些","处理","运行","需要","我们","收到","简单"," ","就是","之后","原始数据",".","机器","问题","继续","例程","能否","$","mpu6500","启动","看到","啦","是","py","感器","后续","模块","机器人","i2c","下","的","接线","开发","就","陀螺仪","来","到","在","，","sudo","看","通过","数据","python3","这","陀螺","读取"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_3","text":"mpu6500_i2c.py： #!/usr/bin/env python3 import smbus , time def MPU6050_start (): # alter sample rate (stability) samp_rate_div = 0 # sample rate = 8 kHz/(1+samp_rate_div) bus . write_byte_data ( MPU6050_ADDR , SMPLRT_DIV , samp_rate_div ) time . sleep ( 0.1 ) # reset all sensors bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x00 ) time . sleep ( 0.1 ) # power management and crystal settings bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x01 ) time . sleep ( 0.1 ) #Write to Configuration register bus . write_byte_data ( MPU6050_ADDR , CONFIG , 0 ) time . sleep ( 0.1 ) #Write to Gyro configuration register gyro_config_sel = [ 0b00000 , 0b010000 , 0b10000 , 0b11000 ] # byte registers gyro_config_vals = [ 250.0 , 500.0 , 1000.0 , 2000.0 ] # degrees/sec gyro_indx = 0 bus . write_byte_data ( MPU6050_ADDR , GYRO_CONFIG , int ( gyro_config_sel [ gyro_indx ])) time . sleep ( 0.1 ) #Write to Accel configuration register accel_config_sel = [ 0b00000 , 0b01000 , 0b10000 , 0b11000 ] # byte registers accel_config_vals = [ 2.0 , 4.0 , 8.0 , 16.0 ] # g (g = 9.81 m/s^2) accel_indx = 0 bus . write_byte_data ( MPU6050_ADDR , ACCEL_CONFIG , int ( accel_config_sel [ accel_indx ])) time . sleep ( 0.1 ) # interrupt register (related to overflow of data [FIFO]) bus . write_byte_data ( MPU6050_ADDR , INT_ENABLE , 1 ) time . sleep ( 0.1 ) return gyro_config_vals [ gyro_indx ], accel_config_vals [ accel_indx ] def read_raw_bits ( register ): # read accel and gyro values high = bus . read_byte_data ( MPU6050_ADDR , register ) low = bus . read_byte_data ( MPU6050_ADDR , register + 1 ) # combine higha and low for unsigned bit value value = (( high << 8 ) | low ) # convert to +- value if ( value > 32768 ): value -= 65536 return value def mpu6050_conv (): # raw acceleration bits acc_x = read_raw_bits ( ACCEL_XOUT_H ) acc_y = read_raw_bits ( ACCEL_YOUT_H ) acc_z = read_raw_bits ( ACCEL_ZOUT_H ) # raw temp bits ## t_val = read_raw_bits(TEMP_OUT_H) # uncomment to read temp # raw gyroscope bits gyro_x = read_raw_bits ( GYRO_XOUT_H ) gyro_y = read_raw_bits ( GYRO_YOUT_H ) gyro_z = read_raw_bits ( GYRO_ZOUT_H ) #convert to acceleration in g and gyro dps a_x = ( acc_x / ( 2.0 ** 15.0 )) * accel_sens a_y = ( acc_y / ( 2.0 ** 15.0 )) * accel_sens a_z = ( acc_z / ( 2.0 ** 15.0 )) * accel_sens w_x = ( gyro_x / ( 2.0 ** 15.0 )) * gyro_sens w_y = ( gyro_y / ( 2.0 ** 15.0 )) * gyro_sens w_z = ( gyro_z / ( 2.0 ** 15.0 )) * gyro_sens ## temp = ((t_val)/333.87)+21.0 # uncomment and add below in return return a_x , a_y , a_z , w_x , w_y , w_z # MPU6050 Registers MPU6050_ADDR = 0x68 PWR_MGMT_1 = 0x6B SMPLRT_DIV = 0x19 CONFIG = 0x1A GYRO_CONFIG = 0x1B ACCEL_CONFIG = 0x1C INT_ENABLE = 0x38 ACCEL_XOUT_H = 0x3B ACCEL_YOUT_H = 0x3D ACCEL_ZOUT_H = 0x3F TEMP_OUT_H = 0x41 GYRO_XOUT_H = 0x43 GYRO_YOUT_H = 0x45 GYRO_ZOUT_H = 0x47 # start I2C driver bus = smbus . SMBus ( 0 ) # start comm with i2c bus gyro_sens , accel_sens = MPU6050_start () # instantiate gyro/accel while True : print ( mpu6050_conv ()) 这里我们看一下怎么使用I2C和陀螺仪通信来获取信息。主体上有三个大的函数，而这三个函数的功能都比较单一，第一个函数通过给陀螺仪发送数据来进行初始化的设置，比如配置陀螺仪的电源寄存器，加速度寄存器等；第二个函数则是从陀螺仪读取数据；第三个函数则是将读取到的函数进行计算，从而变成真正的加速度等信息。 具体的读写操作可以看下面的代码片段，也是直接调用函数指定地址和数据就好了。 这里我们也能看到几个关键的参数，比如陀螺仪MPU6050的地址是0x68，通过这个地址才能确认到陀螺仪的存在，然后进行初始化，初始化完成之后进入循环，不停的将数据打印出来。","text_tokens":["and","直接","div","了","进行","[","等","smplrt","unsigned","env","sel","大","功能","加速","print","15.0","关键","<","/","if","初始","好","之后","time","单一","0x1a","mpu6050","确认","out","代码","=","sens","具体","config","0x1c","0x3d","：","comm","sample","dps","就","sensors","0x01","下面","将","write","读写","指定","s","val","，","2","for","通过","0x68","第二个","读写操作","这","循环","0b10000","读取","samp","mgmt","然后","信息","获取信息","byte","第三","给","第一","从而","和","计算","below","true","比如","1000.0","片段","acc","fifo","0x47","gyro","add","0x45","management","发送数据","mpu6500","low","看到","比较","是","是从","0x00","values","!","三个","rate",",","degrees","bit","也","21.0","driver","函数","4.0","主体",">","0x19","*","0x3f","8","register","stability","with","while","0b00000","raw","333.87","才能","python3","250.0","0","陀螺","temp","存在","pwr","真正","uncomment","这个","of","bus","vals","。","设置","data","reset","+-",":","in","higha",")","t","不停","0x38","发送","+","参数","x","变成","速度","import","9.81"," ","acceleration","xout","addr","1","使用","获取","都","z","sleep","8.0","16.0","0x1b","start","这里","0b11000","一个","alter","第一个","进入","-","出来","通信","all","上","bin","convert","|","y","instantiate","a","陀螺仪","0x3b","yout","interrupt","read","usr","到","#","smbus","int","settings","读取数据","0x41","_","to","调用","0x43","zout","high","configuration","地址","加速度","g","可以","combine","related","打印","取信","初始化","怎么","sec","m","indx","return","数据","(","^","一下","我们","h","2000.0","0b010000","accel","而","配置","能",".","调用函数","registers","]","完成","overflow","500.0","二个","py","w","有","第三个","def","65536","0x6b","##","32768","i2c","操作","的","寄存器","0.1","几个","enable","bits","2.0","来","crystal","寄存","；","value","khz","conv","gyroscope","第二","则","看","power","电源","0b01000"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/","text":"USB外设驱动 在电脑上，我们最常用的接口之一，应该就是USB了，相比之前讲到的外设通信方法，USB更加复杂，速度也更快。 USB通信原理 USB不仅是我们生活中最常用的一种接口，也是一种串行总线的通讯方式。他类似于UART，有两根线用来传输数据。 而且USB还有专门的接口规范，比如我们常听说的USB Type A、Type C。例如这里列出来的USB口，打印机常用的B口，手机上用的C口，都是标准的USB接口。 USB的接口规范，使用广泛，很多成熟的外设都是采用的USB接口。 摄像头驱动 比如USB摄像头。 硬件接线 这里我们使用一个USB摄像头，通过一个相机驱动把它跑起来，并且可以看到图像数据。 方法有很多中，TogetherROS兼容ROS2的所有功能，那我们就先试试ROS2中的标准方法，在旭日X3PI上直接安装一个usb_cam功能包。 ROS2相机驱动 安装与配置 首先安装ROS2的相机驱动包： # 安装功能包 $ sudo apt install ros-foxy-usb-cam 安装好之后，为了让系统能够找到该功能包，需要进入tros的目录，建立对应的软连接。 # 建立软连接 $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 因为旭日X3Pi可以连接csi摄像头，设备名占用了video0-7，所以外接的USB摄像头会被自动分配到video8，我们需要在ROS2的功能包中修改一下设备号。 # 修改配置文件 $ cd /opt/tros/share/usb_cam/config $ sudo vim params.yaml 然后给这个设备添加权限，最后再设置TogetherROS的环境变量就可以使用啦。 # 添加可执行权限 $ sudo chmod 777 /dev/video8 # 添加环境变量 $ source /opt/tros/local_setup.bash 运行相机驱动 我们来试一试。 $ ros2 launch usb_cam demo_launch.py #启动相机，X3Pi $ ros2 run rqt_image_view rqt_image_view #查看图像，PC 这里直接在X3Pi中启动usb_cam的launch文件，然后再启动一个能和他通信的Ubuntu桌面系统，打开rqt_image_view，选择对应的话题，就可以看到图像了。也就是说明我们成功的用TROS驱动了这个USB摄像头。 TogetherROS相机驱动 除此之外，TogetherROS中也提供了USB摄像头的驱动节点，连接摄像头之后，直接设置设备的权限和TogetherROS的环境变量就可以使用了。 $ source /opt/tros/local_setup.bash $ sudo chmod 777 /dev/video8 $ ros2 launch hobot_usb_cam hobot_usb_cam.launch.py 之后可以再打开一个新的终端，输入对应的指令，然后启动websocket这个节点，就可以把image这个话题的数据发送到网页了。 $ source /opt/tros/local_setup.bash $ cd /opt/tros/lib/websocket/webservice $ sudo chmod +x ./sbin/nginx $ sudo ./sbin/nginx -p . $ ros2 run websocket websocket --ros-args -p image_topic: = /image -p image_type: = mjpeg -p only_show_image: = true 这时我们直接打开在通一个局域网下的浏览器，输入X3Pi的地址，就可以进去到一个网页，点击左上方web端展示即可看到USB摄像头的实时画面。 激光雷达驱动 移动机器人中常用的激光雷达大多也是USB借口的，比如这款rplidar。 安装与配置 如果我们想把它跑起来，同样需要一个驱动包，大家可以在工作空间中下载雷达的驱动包，然后进行编译。编译完成后，添加环境变量就可以使用这个功能包了。 # 下载源码 $ mkdir -p catkin_ws/src $ cd ~/catkin_ws/src $ git clone -b ros2 https://github.com/slamtec/rplidar_ros.git # 编译 $ cd ~/catkin_ws $ colcon build --symlink-install # 添加环境变量 $ source ~/catkin_ws/install/setup.bash # 添加权限 $ sudo chmod 777 /dev/ttyUSB0 还要记得给激光雷达的USB口设置对应的权限。 运行激光雷达驱动 驱动安装好之后，就可以启动雷达了。 在旭日X3派的终端中，运行启动激光雷达的launch文件。 $ ros2 launch rplidar_ros2 rplidar_launch.py #启动雷达，X3PI $ ros2 run rviz2 rviz2 #查看点云，PC 启动成功后，我们在电脑端的Ubuntu系统中，在ros2环境下打开rviz2，然后将世界坐标系改为laser，然后添加LaserScan的可视化选项，并且把Reliability Policy的选项改为System Default，此时就可以看到激光雷达的点云数据了。","text_tokens":["可视","laser","想","only","进行","7","借口","$","常","video0","被","应该","：","传输数据","建立","大多","之一","type","将","原理","节点","上用","通讯","选择","然后","摄像","修改","给","点云","hobot","laserscan","号","选项","更","很多","symlink","所以","旭日","是","记得","桌面","它","打开","websocket","apt","ws","python3","create","这个","同样",":","src","快","install","标准","局域","colcon","发送"," ","啦","通","方式","这里","ttyusb0","image","送到","列出","出来","上","明","最后","手机","添加","那","_","地址","相比","包","终端","~","所有","lib","能",".","画面","再","clone","topic","build","github","cam","中","数据","system","这时","环境","了","让","功能","vim","输入","运行","总线","此时","就","reliability","用","跑","而且","找到","工作","ros","catkin","和","两根","一种","派","于","激光","复杂","可视化","share","坐标","广泛","mkdir","可","还有","机器人","ros2","x3pi","下载","他","在","view","话题","执行","ubuntu","webservice","+","x","使用","pc","试一试","打印机","提供","成熟","连接","像头","左上","通信","源码","show","a","foxy","再启动","并且","video8","如果","包中","安装","用来","会","csi","https","雷达","需要","我们","配置","sbin","权限","soft","py","有","除此","讲到","接线","后","环境变量","接口","列出来","兼容","包了","好","就是","变量","该","--","=","方法","run","c","tros","动机","专门","通过","进去","com","文件","git","p","比如","为了","摄像头","系统","串行总线","也","对应","args","电脑","传输","。","这款","例如","生活","设置","移动","实时","最","占用","把","机器","都","世界","一个","chmod","setup","大家","还要","x3","到","#","local","改为","能够","名","rplidar","采用","局域网","听说","link","首先","移动机器人","起来","下","的","web","先","params","直接","source","demo","编译","上方","激光雷达","更加","、","/","发送到","之后","印机","777","自动","config","口","成功","环境变","查看","，","规范","指令","类似","与","dev","true","因为","设备","新","配置文件","default","看到","policy","串行","线","端的","cd","不仅","试试","左上方","即可","sudo","端","opt","外设","togetherros","bash","常用","展示","也就是说","b","速度","launch","就是说","之外","坐标系","外接","图像","mjpeg","slamtec","进入","-","空间","rqt","硬件","nginx","驱动","可以","yaml","相机","浏览","打印","usb","网页","一下","点击","启动","分配","除此之外","完成","rviz2","uart","软","来","目录","之前","浏览器"],"title":"USB外设驱动","title_tokens":["usb","外设","驱动"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#usb","text":"在电脑上，我们最常用的接口之一，应该就是USB了，相比之前讲到的外设通信方法，USB更加复杂，速度也更快。","text_tokens":["外设","。","了","接口","相比","usb","最","快","常用","更加","我们","更","速度","就是","复杂","方法","应该","也","讲到","通信","的","上","之一","在","，","之前","电脑"],"title":"USB外设驱动","title_tokens":["usb","外设","驱动"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#usb_1","text":"USB不仅是我们生活中最常用的一种接口，也是一种串行总线的通讯方式。他类似于UART，有两根线用来传输数据。 而且USB还有专门的接口规范，比如我们常听说的USB Type A、Type C。例如这里列出来的USB口，打印机常用的B口，手机上用的C口，都是标准的USB接口。 USB的接口规范，使用广泛，很多成熟的外设都是采用的USB接口。","text_tokens":["外设","。","用来","例如","类似","生活","接口","打印","usb","最","采用","常用","两根","比如","列出来","标准","、","听说","b","我们","一种","于"," ","使用","很多","总线","都","印机","打印机","是","方式","串行","常","这里","成熟","广泛","有","还有","口","串行总线","也","列出","出来","传输数据","线","的","c","a","uart","他","不仅","type","而且","，","中","专门","手机","数据","上用","规范","通讯","传输"],"title":"USB通信原理","title_tokens":["通信","usb","原理"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_1","text":"比如USB摄像头。","text_tokens":["比如","。","摄像","像头","usb","摄像头"],"title":"摄像头驱动","title_tokens":["像头","摄像头","摄像","驱动"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_2","text":"这里我们使用一个USB摄像头，通过一个相机驱动把它跑起来，并且可以看到图像数据。 方法有很多中，TogetherROS兼容ROS2的所有功能，那我们就先试试ROS2中的标准方法，在旭日X3PI上直接安装一个usb_cam功能包。","text_tokens":["直接","togetherros","_","驱动","。","摄像","可以","相机","usb","包","功能","标准","兼容","所有","我们","把"," ","使用","很多","旭日","摄像头","看到","图像","这里","一个","有","方法","像头","起来","它","的","上","ros2","就","先","x3pi","试试","跑","在","并且","，","cam","中","通过","数据","那","安装"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#ros2","text":"","text_tokens":[],"title":"ROS2相机驱动","title_tokens":["驱动","相机","ros2"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_3","text":"首先安装ROS2的相机驱动包： # 安装功能包 $ sudo apt install ros-foxy-usb-cam 安装好之后，为了让系统能够找到该功能包，需要进入tros的目录，建立对应的软连接。 # 建立软连接 $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 因为旭日X3Pi可以连接csi摄像头，设备名占用了video0-7，所以外接的USB摄像头会被自动分配到video8，我们需要在ROS2的功能包中修改一下设备号。 # 修改配置文件 $ cd /opt/tros/share/usb_cam/config $ sudo vim params.yaml 然后给这个设备添加权限，最后再设置TogetherROS的环境变量就可以使用啦。 # 添加可执行权限 $ sudo chmod 777 /dev/video8 # 添加环境变量 $ source /opt/tros/local_setup.bash","text_tokens":["source","环境","了","环境变量","7","让","功能","vim","/","好","之后","变量","该","$","777","video0","自动","--","被","config","：","建立","就","环境变","tros","，","找到","文件","ros","然后","摄像","修改","给","dev","因为","号","设备","配置文件","为了","所以","旭日","share","摄像头","系统","可","对应","ros2","x3pi","cd","apt","在","sudo","python3","create","opt","togetherros","bash","这个","。","执行","设置","install","占用"," ","使用","外接","啦","连接","chmod","进入","setup","像头","-","foxy","到","#","local","video8","最后","包中","添加","安装","_","能够","驱动","可以","会","名","yaml","相机","csi","usb","包","需要","一下","我们","配置","权限","link",".","分配","soft","首先","py","再","的","软","目录","cam","params"],"title":"安装与配置","title_tokens":["配置","与","安装"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_4","text":"我们来试一试。 $ ros2 launch usb_cam demo_launch.py #启动相机，X3Pi $ ros2 run rqt_image_view rqt_image_view #查看图像，PC 这里直接在X3Pi中启动usb_cam的launch文件，然后再启动一个能和他通信的Ubuntu桌面系统，打开rqt_image_view，选择对应的话题，就可以看到图像了。也就是说明我们成功的用TROS驱动了这个USB摄像头。","text_tokens":["_","直接","话题","这个","选择","。","驱动","然后","了","摄像","demo","ubuntu","可以","相机","usb","和","也就是说","我们"," ","就是","launch","能",".","pc","就是说","启动","$","摄像头","试一试","看到","图像","这里","py","系统","image","一个","像头","桌面","run","通信","的","打开","对应","明","ros2","成功","x3pi","就","他","用","tros","来","查看","rqt","#","在","view","cam","，","中","再启动","文件"],"title":"运行相机驱动","title_tokens":["驱动","相机","运行"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#togetherros","text":"除此之外，TogetherROS中也提供了USB摄像头的驱动节点，连接摄像头之后，直接设置设备的权限和TogetherROS的环境变量就可以使用了。 $ source /opt/tros/local_setup.bash $ sudo chmod 777 /dev/video8 $ ros2 launch hobot_usb_cam hobot_usb_cam.launch.py 之后可以再打开一个新的终端，输入对应的指令，然后启动websocket这个节点，就可以把image这个话题的数据发送到网页了。 $ source /opt/tros/local_setup.bash $ cd /opt/tros/lib/websocket/webservice $ sudo chmod +x ./sbin/nginx $ sudo ./sbin/nginx -p . $ ros2 run websocket websocket --ros-args -p image_topic: = /image -p image_type: = mjpeg -p only_show_image: = true 这时我们直接打开在通一个局域网下的浏览器，输入X3Pi的地址，就可以进去到一个网页，点击左上方web端展示即可看到USB摄像头的实时画面。","text_tokens":["直接","source","这时","环境","only","了","环境变量","上方","输入","/","发送到","之后","变量","$","777","--","=","run","就","环境变","tros","type","，","节点","进去","指令","ros","p","然后","摄像","和","dev","hobot","true","设备","新","摄像头","看到","也","打开","对应","ros2","x3pi","cd","左上方","websocket","在","即可","sudo","args","端","opt","togetherros","bash","这个","话题","。","设置",":","实时","展示","局域","webservice","发送","+","把","x"," ","使用","launch","之外","通","mjpeg","提供","连接","chmod","一个","image","setup","像头","送到","-","左上","show","到","local","video8","_","nginx","驱动","地址","可以","浏览","usb","终端","网页","局域网","我们","lib","点击","sbin","权限",".","启动","除此之外","画面","py","除此","再","下","的","web","topic","cam","中","数据","浏览器"],"title":"TogetherROS相机驱动","title_tokens":["togetherros","相机","驱动"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_5","text":"移动机器人中常用的激光雷达大多也是USB借口的，比如这款rplidar。","text_tokens":["这款","。","移动","usb","rplidar","雷达","常用","激光雷达","比如","激光","机器","借口","是","移动机器人","机器人","也","的","大多","动机","，","中"],"title":"激光雷达驱动","title_tokens":["激光雷达","驱动","雷达","激光"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_6","text":"如果我们想把它跑起来，同样需要一个驱动包，大家可以在工作空间中下载雷达的驱动包，然后进行编译。编译完成后，添加环境变量就可以使用这个功能包了。 # 下载源码 $ mkdir -p catkin_ws/src $ cd ~/catkin_ws/src $ git clone -b ros2 https://github.com/slamtec/rplidar_ros.git # 编译 $ cd ~/catkin_ws $ colcon build --symlink-install # 添加环境变量 $ source ~/catkin_ws/install/setup.bash # 添加权限 $ sudo chmod 777 /dev/ttyUSB0 还要记得给激光雷达的USB口设置对应的权限。","text_tokens":["source","想","环境","后","环境变量","进行","编译","激光雷达","功能","/","包了","变量","$","777","--","口","就","环境变","跑","，","com","工作","git","ros","p","然后","给","catkin","dev","激光","symlink","mkdir","记得","它","对应","ros2","下载","cd","在","sudo","ws","bash","这个","。","设置","同样","src",":","install","colcon","b","把"," ","使用","ttyusb0","slamtec","一个","chmod","setup","大家","还要","-","源码","空间","#","如果","添加","_","驱动","可以","rplidar","usb","包","https","~","雷达","需要","我们","权限",".","完成","起来","的","clone","build","github","中"],"title":"安装与配置","title_tokens":["配置","与","安装"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_7","text":"驱动安装好之后，就可以启动雷达了。 在旭日X3派的终端中，运行启动激光雷达的launch文件。 $ ros2 launch rplidar_ros2 rplidar_launch.py #启动雷达，X3PI $ ros2 run rviz2 rviz2 #查看点云，PC 启动成功后，我们在电脑端的Ubuntu系统中，在ros2环境下打开rviz2，然后将世界坐标系改为laser，然后添加LaserScan的可视化选项，并且把Reliability Policy的选项改为System Default，此时就可以看到激光雷达的点云数据了。","text_tokens":["_","可视","laser","驱动","。","环境","了","后","然后","可以","ubuntu","电脑","点云","rplidar","终端","雷达","laserscan","激光雷达","运行","我们","派","选项","把","激光","好","之后"," ","launch",".","pc","旭日","启动","$","坐标系","可视化","default","坐标","看到","此时","policy","系统","py","世界","rviz2","run","下","的","成功","打开","ros2","就","x3pi","端的","reliability","x3","查看","将","在","#","改为","，","并且","中","数据","添加","文件","安装","system"],"title":"运行激光雷达驱动","title_tokens":["激光雷达","驱动","运行","激光","雷达"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/","text":"机器视觉介绍 机器视觉概念 机器视觉， 就是用计算机来模拟人的视觉功能，但这并不仅仅是人眼的简单延伸，更重要的是像人脑一样，可以从客观事物的图像中提取信息，进行处理并加以理解，最终用于实际检测、控制等场景。 获取图像信息相对简单，但想让机器人理解图像中千变万化的物品，就难上加难了。 为了解决这一系列复杂的问题，机器视觉也是一个涉猎广泛的交叉学科，横跨人工智能、神经生物学、物理学、计算机科学、图像处理、模式识别等诸多领域。时至今日，在各个领域中，都有大量开发者或组织参与其中，也积累了众多技术，不过依然还有很多问题亟待解决，就像我们对自己大脑的研究也只是冰山一角一样，机器视觉的研究也将会是一个长久的工作。 机器视觉相关的关键技术也有不少，比如视觉图像的采集和信号处理，这个过程主要是通过传感器硬件采集外部光信号的过程，光信号最终会转变成数字电路的信号，便于下一步的处理；类似左边图片中看到的效果，获取图像之后，更重要的是要识别图像中的物体、确定物体的位置、或者检测物品的变化，这就要用到模式识别或者机器学习等技术，这个部分也是当今机器视觉研究的重点。 和人类的两只眼睛不同，机器用于获取图像的传感器种类较为丰富，可以是一个摄像头，也可以是两个摄像头，还可以是三个、四个、很多个摄像头，不仅可以获取颜色信息，还可以通过红外相机获取深度或者能量信息，这可比人眼获取的信息丰富多了，当然，这也会对后期的处理带来不同的计算压力。 在工业领域，机器视觉系统已经被广泛用于自动检验、工件加工、装配自动化以及生产过程控制等工作。随着机器人的快速发展和应用，机器视觉也逐渐应用于农业机器人、AMR物流机器人、服务机器人、无人驾驶汽车等各种机器人，活跃在农场、物流、仓储、交通、医院等多种环境中。 机器视觉流程 人类视觉擅长于对复杂、非结构化的场景进行定性解释，但机器视觉凭借速度、精度和可重复性等优势，非常适合对结构化场景进行定量测量。 一般来讲，典型的机器视觉系统可以分为如图所示的三个部分：图像采集、图像分析和控制输出。 图像采集注重对原始光学信号的采样，是整个视觉系统的传感部分，核心是相机和相关的配件。 其中光源用于照明待检测的物体，并突显其特征，便于让相机能够更好的捕捉图像。光源是影响机器视觉系统成像质量的重要因素，好的光源和照明效果对机器视觉判断影响很大。当前，机器视觉的光源已经突破人眼的可见光范围，其光谱范围跨越红外光（IR）、可见光、紫外光（UV）乃至X射线波段，可实现更精细和更广泛的检测范围，以及特殊成像需求。 相机被喻为机器视觉系统的“眼睛”，承担着图像信息采集的重要任务。图像传感器又是相机的核心元器件，主要有CCD和CMOS两种类型，其工作原理是将相机镜头接收到的光学信号转化成数字信号。选择合适的相机是机器视觉系统设计的重要环节，不仅直接决定了采集图像的质量和速度，同时也与整个系统的运行模式相关。 图像处理系统接收到相机传来的数字图像之后，通过各种软件算法进行图像特征提取、特征分析和数据标定，最后进行判断。这是各种视觉算法研究最为集中的部分，从传统的模式识别算法，到当前热门的各种机器学习方法，都是为了更好的让机器理解环境。 对于人来讲，识别某一个物体是苹果似乎理所当然，但是对于机器人来讲，就需要提取各种各样不同种类、颜色、形状的苹果特征，然后训练得到一个苹果的“模型”，再通过这个模型对实时图像做匹配，从而分析面前这个东西到底是不是苹果。 在机器人系统中，视觉识别的结果最终要和机器人的某些行为绑定，也就是第三个部分——控制输出，包含I/O接口、运动控制、可视化显示等。当图像处理系统完成图像分析后，将判断的结果发给机器人控制系统，接下来机器人完成运动控制。比如视觉识别到了抓取目标的位置，通过IO口控制夹爪完成抓取和放置，过程中识别的结果和运动的状态，都可以在上位机中显示，方便我们监控。 就机器视觉而言，在这三个部分中，图像分析占据了绝对的核心，涉及的方法、使用的各种开源软件或者框架非常多，这也是我们后续开发的重点，TogetherROS中提供了大量的算法、工具和功能支持。 旭日X3派配置 了解了机器视觉的基本原理和流程，相信大家对视觉应用已经充满了期待，我们这就准备开始。 后续课程中，我们将继续在旭日X3派的开发板上，使用TogetherROS实现各种各样的视觉例程，不过我们得先找到一个相机，比如usb相机或者MIPI接口配套的相机模块，然后连接到开发板对应的接口上。 电脑和开发板之前通过网线连接，便于我们查看视觉处理的结果，速度更快。 如果有HDMI屏幕的话，也可以准备好，稍后需要使用的时候插上查看结果，如果没有的话，也没有影响，后续我们会使用一套网络传输工具，通过板卡的IP地址，就可以看到图像处理的实时状态啦。 USB相机图像采集 关于相机的驱动，请大家也再确认一下，这是后续视觉处理的基础。 如果是USB相机的话，可以参考这个过程验证下是否可以顺利看到图像。 # 旭日X3派 $ sudo apt install ros-foxy-usb-cam $ cd /opt/tros $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros $ source /opt/tros/local_setup.bash $ ros2 launch usb_cam demo_launch.py # 修改params.yaml配置文件中的设备号 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view MIPI相机图像采集 如果使用的是MIPI相机的话，可以参考这个流程驱动相机并显示图像。 # 旭日X3派 $ source /opt/tros/local_setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p video_device: = F37 -p image_width: = 960 -p image_height: = 540 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view 为了提高图像的编码和传输效率，我们建议大家使用MIPI接口的相机，后续应用功能我们也会以该相机为主。","text_tokens":["可视","想","苹果","两只","是否","进行","设计","原始","以","决定","等","东西","快速","ir","光源","定量","亟待","光学","充满","相对","来讲","$","科学","确认","非常适合","被","：","无人驾驶","一般","器件","占据","将","原理","典型","选择","一系列","然后","摄像","修改","两个","待","控制系统","红外","活跃","处理","号","更","io","类型","很多","问题","uv","旭日","不仅仅","领域","是","复性","参与","三个","实现","基本","确定","开始","眼睛","光","apt","请","外部","python3","create","难上加难","这个","生物学","擅长","元器","框架",":","集中","快","install","测量","效率","光谱","各种","）"," ","获取","啦","参考","视觉","采样","image","个","需求","上","神经","精度","整个","数字电路","农业","运动","最后","着","期待","紫外光","_","采集","地址","时至今日","解释","医院",".","技术","学习","注重","一系","hdmi","突破","再","软件","以及","仅仅","当今","两种","做","学科","cam","中","长于","似乎","数据","标定","精细","当","结果","环境","工具","了","上位","深度","重要环节","让","核心","各个领域","功能","自己","x射线","开发板","运行","横跨","关键","物体","多种","人工","稍后","农场","优势","理所当然","但","用到","适合","”","得","跨越","系列","分为","检测","height","就","用","电路","找到","抓取","颜色","特殊","的话","工作","ros","从而","转变","射线","和","接下","派","于","i","放置","复杂","一般来讲","可视化","还","发展","从","下来","广泛","可","还有","方便","而言","机器人","范围","o","机中","ros2","至今","冰山","合适","又","在","不是","人","view","特征分析","课程","某","传感器","网线","不同","关键技术","影响","开发者","波段","变成","使用","pc","提供","定性","擅长于","连接","像头","模块","交叉","主要","特征","foxy","数字","带来","width","如果","其","到底","传感","算法","要","红外光","当然","物理","理学","会","数字图像","位置","mipi","解决","需要","四个","我们","屏幕","配置","soft","py","感器","有","各种各样","多","服务","工业","介绍","时候","环节","无人","夹","捕捉","压力","对于","便于","概念","其中","提高","较为","冰山一角","后","爪","匹配","大量","接口","众多","元器件","好","就是","该","同时","生产","用于","建议","--","为主","=","方法","事物","任务","run","了解","不过","训练","tros","可比","一套","传来","就要","并","通过","或","没有","非","文件","这是","物品","紫外","过程","p","信息","装配","发给","第三","承担","但是","计算","比如","540","基本原理","为了","千变万化","摄像头","分析","丰富","可见光","系统","如图所示","重要","相信","不少","也","应用","对应","ccd","组织","工件","板卡","device","模式","是不是","args","结构化","电脑","传输","。","今日","非常","物流","后期","实时","转变成","质量","算机","随着","插上","机器","接收","都","监控","相关","人工智能","一个","涉及","当前","setup","大家","突显","照明","某些","一样","开发","乃至","x3","自动化","到","#","local","计算机","接下来","能够","ip地址","可重复性","顺利","人类","凭借","f37","简单","物理学","一角","link","—","一步","场景","模拟","模式识别","交叉学科","下","的","数字信号","先","重复","喻为","；","params","生物","直接","source","“","信号处理","实际","demo","配件","准备","客观","、","/","之后","逐渐","能量","客观事物","大脑","传统","自动","信号","口","图片","最终","所示","效果","已经","查看","支持","变化","，","热门","开源","这","编码","类似","积累","形状","基础","交通","数字电","加工","部分","与","包含","设备","cmos","配置文件","智能","镜头","看到","对","状态","结构","或者","配套","延伸","amr","得到","关于","重点","控制","涉猎","转化成","cd","不仅","各样","左边","sudo","汽车","仓储","opt","togetherros","bash","判断","特征提取","最为","显示","绑定","网络","识别","速度","图像处理","launch","继续","例程","流程","图像","研究","人脑","面前","加以","video","计算机科学","因素","-","种类","化成","绝对","各个","rqt","目标","硬件","提取","只是","验证","驾驶","长久","转化","驱动","可以","行为","人眼","相机","yaml","可见","usb","理解","模型","一下","依然","输出","完成","（","后续","第三个","960","亟待解决","成像","诸多","来","更好","很大","之前","像","本原","重复性","检验"],"title":"机器视觉介绍","title_tokens":["视觉","机器","介绍"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_1","text":"","text_tokens":[],"title":"机器视觉介绍","title_tokens":["视觉","机器","介绍"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_2","text":"机器视觉， 就是用计算机来模拟人的视觉功能，但这并不仅仅是人眼的简单延伸，更重要的是像人脑一样，可以从客观事物的图像中提取信息，进行处理并加以理解，最终用于实际检测、控制等场景。 获取图像信息相对简单，但想让机器人理解图像中千变万化的物品，就难上加难了。 为了解决这一系列复杂的问题，机器视觉也是一个涉猎广泛的交叉学科，横跨人工智能、神经生物学、物理学、计算机科学、图像处理、模式识别等诸多领域。时至今日，在各个领域中，都有大量开发者或组织参与其中，也积累了众多技术，不过依然还有很多问题亟待解决，就像我们对自己大脑的研究也只是冰山一角一样，机器视觉的研究也将会是一个长久的工作。 机器视觉相关的关键技术也有不少，比如视觉图像的采集和信号处理，这个过程主要是通过传感器硬件采集外部光信号的过程，光信号最终会转变成数字电路的信号，便于下一步的处理；类似左边图片中看到的效果，获取图像之后，更重要的是要识别图像中的物体、确定物体的位置、或者检测物品的变化，这就要用到模式识别或者机器学习等技术，这个部分也是当今机器视觉研究的重点。 和人类的两只眼睛不同，机器用于获取图像的传感器种类较为丰富，可以是一个摄像头，也可以是两个摄像头，还可以是三个、四个、很多个摄像头，不仅可以获取颜色信息，还可以通过红外相机获取深度或者能量信息，这可比人眼获取的信息丰富多了，当然，这也会对后期的处理带来不同的计算压力。 在工业领域，机器视觉系统已经被广泛用于自动检验、工件加工、装配自动化以及生产过程控制等工作。随着机器人的快速发展和应用，机器视觉也逐渐应用于农业机器人、AMR物流机器人、服务机器人、无人驾驶汽车等各种机器人，活跃在农场、物流、仓储、交通、医院等多种环境中。","text_tokens":["想","实际","信号处理","两只","环境","了","进行","等","大量","深度","快速","让","各个领域","功能","众多","客观","、","自己","亟待","横跨","关键","物体","多种","人工","之后","就是","相对","逐渐","能量","客观事物","大脑","农场","科学","生产","但","用于","自动","用到","被","事物","信号","图片","最终","效果","系列","无人驾驶","已经","检测","不过","就","用","电路","可比","将","变化","，","就要","并","通过","或","这","颜色","工作","物品","过程","一系列","信息","装配","类似","积累","摄像","两个","转变","数字电","加工","部分","计算","和","交通","比如","红外","活跃","处理","为了","更","智能","于","很多","千变万化","复杂","问题","摄像头","不仅仅","领域","对","看到","从","丰富","是","还","发展","系统","重要","广泛","参与","或者","三个","延伸","还有","不少","amr","机器人","确定","也","重点","控制","应用","涉猎","组织","工件","至今","冰山","模式","不仅","眼睛","光","左边","在","人","汽车","外部","仓储","难上加难","这个","生物学","。","今日","传感器","不同","物流","后期","关键技术","转变成","算机","识别","开发者","随着","各种","变成","图像处理","机器"," ","获取","都","相关","视觉","图像","人工智能","研究","人脑","一个","加以","像头","计算机科学","个","交叉","主要","种类","一样","开发","神经","各个","数字","数字电路","自动化","带来","硬件","提取","只是","计算机","农业","驾驶","长久","传感","要","采集","当然","物理","理学","可以","会","人眼","位置","人类","相机","时至今日","解决","理解","四个","我们","简单","物理学","一角","医院","技术","一步","依然","学习","场景","一系","模拟","感器","有","多","模式识别","亟待解决","服务","交叉学科","工业","下","仅仅","的","诸多","以及","无人","当今","来","压力","；","学科","像","中","便于","其中","较为","检验","生物","冰山一角"],"title":"机器视觉概念","title_tokens":["视觉","机器","概念"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_3","text":"人类视觉擅长于对复杂、非结构化的场景进行定性解释，但机器视觉凭借速度、精度和可重复性等优势，非常适合对结构化场景进行定量测量。 一般来讲，典型的机器视觉系统可以分为如图所示的三个部分：图像采集、图像分析和控制输出。 图像采集注重对原始光学信号的采样，是整个视觉系统的传感部分，核心是相机和相关的配件。 其中光源用于照明待检测的物体，并突显其特征，便于让相机能够更好的捕捉图像。光源是影响机器视觉系统成像质量的重要因素，好的光源和照明效果对机器视觉判断影响很大。当前，机器视觉的光源已经突破人眼的可见光范围，其光谱范围跨越红外光（IR）、可见光、紫外光（UV）乃至X射线波段，可实现更精细和更广泛的检测范围，以及特殊成像需求。 相机被喻为机器视觉系统的“眼睛”，承担着图像信息采集的重要任务。图像传感器又是相机的核心元器件，主要有CCD和CMOS两种类型，其工作原理是将相机镜头接收到的光学信号转化成数字信号。选择合适的相机是机器视觉系统设计的重要环节，不仅直接决定了采集图像的质量和速度，同时也与整个系统的运行模式相关。 图像处理系统接收到相机传来的数字图像之后，通过各种软件算法进行图像特征提取、特征分析和数据标定，最后进行判断。这是各种视觉算法研究最为集中的部分，从传统的模式识别算法，到当前热门的各种机器学习方法，都是为了更好的让机器理解环境。 对于人来讲，识别某一个物体是苹果似乎理所当然，但是对于机器人来讲，就需要提取各种各样不同种类、颜色、形状的苹果特征，然后训练得到一个苹果的“模型”，再通过这个模型对实时图像做匹配，从而分析面前这个东西到底是不是苹果。 在机器人系统中，视觉识别的结果最终要和机器人的某些行为绑定，也就是第三个部分——控制输出，包含I/O接口、运动控制、可视化显示等。当图像处理系统完成图像分析后，将判断的结果发给机器人控制系统，接下来机器人完成运动控制。比如视觉识别到了抓取目标的位置，通过IO口控制夹爪完成抓取和放置，过程中识别的结果和运动的状态，都可以在上位机中显示，方便我们监控。 就机器视觉而言，在这三个部分中，图像分析占据了绝对的核心，涉及的方法、使用的各种开源软件或者框架非常多，这也是我们后续开发的重点，TogetherROS中提供了大量的算法、工具和功能支持。","text_tokens":["直接","可视","“","苹果","环境","结果","工具","了","后","进行","设计","爪","原始","匹配","决定","等","接口","东西","重要环节","配件","ir","上位","大量","光源","让","定量","核心","功能","、","x射线","元器件","运行","光学","物体","/","好","之后","就是","来讲","传统","优势","同时","理所当然","但","用于","非常适合","方法","被","信号","适合","口","：","”","所示","效果","跨越","分为","任务","最终","已经","检测","就","训练","一般","器件","占据","将","传来","原理","支持","热门","，","典型","并","通过","开源","非","抓取","这","这是","颜色","特殊","工作","紫外","选择","过程","然后","信息","发给","第三","形状","承担","待","但是","从而","射线","包含","部分","和","与","控制系统","红外","比如","处理","接下","cmos","为了","更","io","类型","i","放置","复杂","一般来讲","uv","可视化","镜头","对","分析","从","可见光","是","状态","结构","复性","系统","如图所示","重要","三个","广泛","可","下来","实现","方便","而言","或者","机器人","也","范围","得到","重点","控制","o","ccd","转化成","机中","合适","模式","不仅","眼睛","各样","又","在","不是","人","是不是","结构化","特征分析","某","togetherros","判断","特征提取","最为","这个","。","擅长","元器","传感器","显示","非常","不同","绑定","框架","集中","实时","质量","影响","测量","识别","光谱","）","波段","各种","速度","图像处理","机器"," ","接收","使用","都","监控","相关","视觉","图像","提供","研究","定性","擅长于","采样","一个","面前","涉及","当前","突显","因素","照明","某些","主要","需求","特征","种类","化成","开发","绝对","乃至","精度","整个","数字","到","目标","提取","标定","最后","着","运动","其","紫外光","到底","接下来","能够","转化","传感","算法","可重复性","要","采集","红外光","当然","可以","数字图像","行为","人类","凭借","相机","人眼","位置","可见","理解","模型","需要","我们","解释","—","输出","学习","完成","注重","场景","感器","（","有","各种各样","第三个","多","模式识别","成像","突破","再","后续","软件","以及","的","数字信号","环节","夹","捕捉","重复","两种","更好","喻为","对于","很大","做","长于","便于","其中","数据","似乎","中","重复性","精细","当"],"title":"机器视觉流程","title_tokens":["视觉","机器","流程"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#x3","text":"了解了机器视觉的基本原理和流程，相信大家对视觉应用已经充满了期待，我们这就准备开始。 后续课程中，我们将继续在旭日X3派的开发板上，使用TogetherROS实现各种各样的视觉例程，不过我们得先找到一个相机，比如usb相机或者MIPI接口配套的相机模块，然后连接到开发板对应的接口上。 电脑和开发板之前通过网线连接，便于我们查看视觉处理的结果，速度更快。 如果有HDMI屏幕的话，也可以准备好，稍后需要使用的时候插上查看结果，如果没有的话，也没有影响，后续我们会使用一套网络传输工具，通过板卡的IP地址，就可以看到图像处理的实时状态啦。","text_tokens":["结果","工具","了","接口","准备","开发板","充满","稍后","好","得","已经","了解","不过","就","一套","将","查看","原理","，","找到","通过","没有","这","的话","然后","和","比如","处理","基本原理","派","更","旭日","看到","对","状态","相信","或者","配套","实现","基本","也","开始","应用","对应","板卡","各样","在","课程","电脑","传输","togetherros","。","网线","网络","实时","快","影响","各种","速度","插上","图像处理","机器"," ","使用","继续","例程","啦","视觉","流程","图像","连接","一个","大家","模块","上","开发","x3","到","如果","期待","ip地址","地址","可以","会","相机","mipi","usb","需要","我们","屏幕","hdmi","有","后续","各种各样","时候","的","先","之前","本原","中","便于"],"title":"旭日X3派配置","title_tokens":["旭日","x3","派","配置"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#usb","text":"关于相机的驱动，请大家也再确认一下，这是后续视觉处理的基础。 如果是USB相机的话，可以参考这个过程验证下是否可以顺利看到图像。 # 旭日X3派 $ sudo apt install ros-foxy-usb-cam $ cd /opt/tros $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros $ source /opt/tros/local_setup.bash $ ros2 launch usb_cam demo_launch.py # 修改params.yaml配置文件中的设备号 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view","text_tokens":["source","是否","demo","/","$","确认","--","run","tros","，","文件","这是","的话","ros","过程","修改","基础","处理","号","设备","派","配置文件","旭日","看到","是","也","关于","ros2","cd","apt","view","sudo","请","python3","create","opt","bash","这个","。","install"," ","launch","pc","参考","视觉","图像","image","setup","大家","-","foxy","x3","rqt","#","local","如果","验证","_","驱动","可以","顺利","yaml","相机","usb","一下","配置","link",".","soft","py","后续","再","下","的","cam","params","中"],"title":"USB相机图像采集","title_tokens":["图像","usb","采集","相机"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#mipi","text":"如果使用的是MIPI相机的话，可以参考这个流程驱动相机并显示图像。 # 旭日X3派 $ source /opt/tros/local_setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p video_device: = F37 -p image_width: = 960 -p image_height: = 540 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view 为了提高图像的编码和传输效率，我们建议大家使用MIPI接口的相机，后续应用功能我们也会以该相机为主。","text_tokens":["的话","source","_","这个","bash","ros","驱动","。","p","显示","可以","会","以","mipi","相机",":","接口","和","功能","f37","效率","540","我们","派","/","为了"," ","使用",".","pc","旭日","该","$","参考","流程","图像","是","image","--","960","=","建议","后续","为主","setup","video","大家","-","也","run","的","应用","height","ros2","device","传输","tros","foxy","x3","rqt","#","local","width","，","cam","如果","并","args","view","提高","编码","opt"],"title":"MIPI相机图像采集","title_tokens":["图像","相机","采集","mipi"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/","text":"CV图像加速处理 OpenCV是一个著名的机器视觉处理库，相信大家都有听过，这个库中有很多图像处理的基础算法，比如灰度变化、图像滤波等，不过这个库为了保证较好的通用性，主要通过软件实现各种算法，TogetherROS对此作了大量优化，我们一起来看看。 TogetherROS视觉加速 TogetherROS系统中集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 效果这么好，具体该如何使用呢？ 高斯滤波 我们先来看下图像处理中常用的高斯滤波算法，OpenCV和hobotcv，正面PK一下，我们也看看在程序中如何使用hobotcv的图像处理加速算法。 运行示例程序 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/hobot_cv/config/ . $ ros2 launch hobot_cv hobot_cv_gaussian_blur.launch.py 代码解析 代码地址：https://c-gitlab.horizon.ai/HHP/box/hobot_cv/-/blob/develop/test/test_gaussian_blur.cpp // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include <algorithm> #include <chrono> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <utility> #include \"hobotcv_gaussian_blur.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" void analyse_result ( cv :: Mat & out_filter , cv :: Mat & cls_filter , std :: string flag_name ) { auto start_time = std :: chrono :: steady_clock :: now (); std :: cout << \"\" << std :: endl ; std :: cout << \"analyse_result start \" << std :: endl ; std :: cout << \"---------\" << flag_name << std :: endl ; std :: cout << \"out_filter type:\" << out_filter . type () << \",cols:\" << out_filter . cols << \",rows:\" << out_filter . rows << \",channel:\" << out_filter . channels () << std :: endl ; std :: cout << \"cls_filter type:\" << cls_filter . type () << \",cols:\" << cls_filter . cols << \",rows:\" << cls_filter . rows << \",channel:\" << cls_filter . channels () << std :: endl ; double minvalue , maxvalue ; cv :: Point mixIdx , maxIdx ; cv :: minMaxLoc ( out_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"out_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"out_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"out_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: minMaxLoc ( cls_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"cls_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"cls_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"cls_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: Mat mat_diff = cv :: abs ( out_filter - cls_filter ); cv :: Scalar sum_error = cv :: sum ( mat_diff >= 1 ); cv :: Scalar mean_error = cv :: sum ( mat_diff ) / ( mat_diff . rows * mat_diff . cols ); cv :: minMaxLoc ( mat_diff , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"\" << std :: endl ; std :: cout << \"diff diff diff\" << std :: endl ; std :: cout << \"mat_diff minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"mat_diff min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"mat_diff max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; std :: cout << \"\" << std :: endl ; std :: cout << \"error sum:\" << sum_error [ 0 ] << \",max:\" << maxvalue << \",mean_error:\" << mean_error [ 0 ] << std :: endl ; int time_used_ms_end = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: steady_clock :: now () - start_time ) . count (); std :: cout << \"analyse_result,time_used_ms_end:\" << time_used_ms_end << std :: endl ; std :: cout << \"analyse_result end \" << std :: endl ; std :: cout << \"\" << std :: endl ; } int main () { int32_t ret = -1 ; HobotGaussianBlurParam blur_param ; HOBOTCV_INITIALIZE_GAUSSIAN_BLUR_PARAM ( & blur_param ); HobotCVGaussianBlurHandle handle ; ret = HobotCVGaussianBlurCreate ( blur_param , & handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurCreate failed, error msg:%d \\n \" , ret ); return -1 ; } for ( int i = 0 ; i < 5 ; i ++ ) { std :: string m_tof_file_s = \"images/frame1_\" + std :: to_string ( i ) + \".png\" ; std :: cout << \"===================\" << std :: endl ; std :: cout << \"image name :\" << m_tof_file_s << std :: endl ; cv :: Mat src = cv :: imread ( m_tof_file_s , CV_16UC1 ); cv :: Mat dst ; cv :: medianBlur ( src , src , 3 ); auto start_time_infe = std :: chrono :: steady_clock :: now (); ret = HobotCVGaussianBlurProcess ( handle , & src , & dst ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurProcess failed, error msg:%d \\n \" , ret ); return -1 ; } int infe_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_infe ). count (); std :: cout << \"infe cost time:\" << infe_time << std :: endl ; auto start_time_gauss = std :: chrono :: steady_clock :: now (); cv :: Mat gaussian_tof ; cv :: GaussianBlur ( src , gaussian_tof , cv :: Size ( 3 , 3 ), 0 , 0 , cv :: BORDER_REPLICATE ); int guss_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_gauss ). count (); std :: cout << \"guss_time cost time:\" << guss_time << std :: endl ; float save_rate = float (( guss_time * 1.0 - infe_time * 1.0 ) / guss_time ); std :: cout << \"hobotcv save rate:\" << save_rate << std :: endl ; analyse_result ( dst , gaussian_tof , \"GaussianBlur\" ); std :: cout << \"-------------------------\" << std :: endl ; std :: cout << \"\" << std :: endl ; } ret = HobotCVGaussianBlurDestroy ( handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurDestroy failed, error msg:%d \\n \" , ret ); return -1 ; } return 0 ; } 图像裁剪与缩放 再来看另外一个案例，图像的裁剪与缩放，比如这样一幅图片，我们尝试剪裁左上角的一小块图像出来，或者对裁剪的某一块图像放大来看看。 运行示例程序 # 配置TogetherROS环境 source /opt/tros/setup.bash # 从TogetherROS的安装路径中拷贝出运行示例需要的模型和配置文件。 cp -r /opt/tros/lib/hobot_cv/config/ . # 启动launch文件 ros2 launch hobot_cv hobot_cv_crop_resize.launch.py 代码解析 代码地址：https://c-gitlab.horizon.ai/HHP/box/hobot_cv/-/blob/develop/src/test.cpp // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include \"include/hobotcv_imgproc.h\" #include \"include/utils.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/core/types.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/opencv.hpp\" #include <fstream> #include <string> #include <chrono> #include <iostream> void writeImg ( cv :: Mat & mat , std :: string imgfile ) { cv :: Mat img_bgr ; cv :: cvtColor ( mat , img_bgr , cv :: COLOR_YUV2BGR_NV12 ); cv :: imwrite ( imgfile , img_bgr ); } int main () { std :: string image_file = \"config/test.jpg\" ; cv :: Mat bgr_mat = cv :: imread ( image_file , cv :: IMREAD_COLOR ); auto src_height = bgr_mat . rows ; auto src_width = bgr_mat . cols ; cv :: Mat srcmat_nv12 ; BGRToNv12 ( bgr_mat , srcmat_nv12 ); auto dst_height = src_height / 2 ; auto dst_width = src_width / 2 ; cv :: Mat dstmat_nv12 ( dst_height * 3 / 2 , dst_width , CV_8UC1 ); auto before_resize = std :: chrono :: system_clock :: now (); auto ret = hobot_cv :: hobotcv_resize ( srcmat_nv12 , src_height , src_width , dstmat_nv12 , dst_height , dst_width ); auto after_resize = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_resize - before_resize ). count (); if ( 0 == ret ) { std :: cout << \"resize finish, time: \" << interval << \"ms\" << std :: endl ; } writeImg ( dstmat_nv12 , \"./resize.jpg\" ); auto before_crop = std :: chrono :: system_clock :: now (); auto cropmat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , 200 , 200 , cv :: Range ( 0 , 200 ), cv :: Range ( 0 , 200 )); auto after_crop = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_crop - before_crop ). count (); std :: cout << \"crop finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropmat , \"./crop.jpg\" ); auto before_cropResize = std :: chrono :: system_clock :: now (); auto cropResizemat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , src_height , src_width , cv :: Range ( 200 , 400 ), cv :: Range ( 200 , 400 )); auto after_cropResize = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_cropResize - before_cropResize ). count (); std :: cout << \"cropResize finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropResizemat , \"./cropResize.jpg\" ); return 0 ; }","text_tokens":["and","16uc1","进行","降低","[","等","地平线","after","save","加速","n","cpp","medianblur","$","confidential","utility","inc","裁剪","具体","imgfile","：","消耗","滤波","\\","ai","type","解析","float","2","std","算子","name","gaussian","endl","cropresizemat","be","hobot","处理","更","很多","一幅","是","风格","实现",",","srcmat",">","地平","used","引擎","main","编程","bgr","msg","before","frame1","这个","协同","\"","src",":","cv","程序","效率",")","各种","hobotcvgaussianblurhandle"," ","is","视觉","一小","start","系统资源","image","core","出来","reproduced","robotics","上","过","queue","initialize","？","int","chrono","著名","优化",";","cost","handle","_","to","尝试","地址","proprietary","interval","{","now","hpp","(","lib","iterator",".","ms","一小块","库中","再","对此","软件","milliseconds","images","一","&","示例","copyright","中","system","倍","环境","了","iomanip","finish","the","运行","<","maxvalue","time","dst","written","性能","way","gaussianblur","purpose","400","height","clock","而且","mean","for","cls","提升","channels","contains","blur","file","和","mixidx","void","%","microseconds","i","filter","高斯","part","从","帧","*","ros2","甚至","int32","在","opencv2","hobotgaussianblurparam","cp","某","size","writeimg","路径","芯片","t","+","x","printf","使用","tof","8uc1","infe","ret","混合","duration","左上","double","主要","rights","hobotcvgaussianblurprocess","owned","box","no","width","range","rows","安装","auto","算法","cropresize","dstmat","imgcodecs","一块","拷贝","may","mat","https","需要","我们","d","配置","较","secrets","py","有","r","这样","pk","作","便于","analyse","}","通用","校正","imread","大量","接口","param","hobotcv","兼容","abs","好","maxidx","该","左上角","=","方法","hhp","gauss","minmaxloc","-------------------------","不过","c","material","reserved","tros","做到","s","通用性","通过","文件","呢","crop","without","上角","copied","率","比如","放大","img","为了","小块","gitlab","系统","相信","rate","也","cout","旋转","应用","png","---------","底层","资源","。","例如","in","机器","都","imgproc","对比","一个","bgrtonv12","5","setup","大家","color","开发","到","#","work","resize","string","replicate","h","正面","]","另外","cropmat","sum","起来","下","的","any","include","先","blob","by","hobotcvgaussianblurcreate","source","or","algorithm","、","/","集成","if","cvtcolor","out","代码","jpg","剪裁","畸变","config","图片","information","nv12","效果","map","cols","steady","案例","软硬件","200","scalar","变化","，","diff","max","3","end","来看","软硬","基础","count","与","min","配置文件","听","point","对","horizon","1.0","或者","fstream","minvalue","分别","灰度","出","trade","utils","0","opt","togetherros","bash","测试","of","yuv2bgr","常用","permission","error","图像处理","express","launch","1","图像","types","opencv","-","++","这么","all","保证","y","缩放","硬件","如何","imwrite","cast","看看","border","2021","可以","test","guss","failed","m","return","disclosed","hobotcvgaussianblurdestroy","develop","模型","一下","this","启动","库","iostream","flag","result","channel","多倍","来","transmitted"],"title":"CV图像处理加速","title_tokens":["图像","加速","处理","图像处理","cv"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#cv","text":"OpenCV是一个著名的机器视觉处理库，相信大家都有听过，这个库中有很多图像处理的基础算法，比如灰度变化、图像滤波等，不过这个库为了保证较好的通用性，主要通过软件实现各种算法，TogetherROS对此作了大量优化，我们一起来看看。","text_tokens":["togetherros","看看","这个","算法","通用","。","了","基础","等","大量","比如","、","处理","我们","各种","为了","听","图像处理","机器","很多","较","好","都","库","视觉","图像","是","相信","一个","有","opencv","库中","实现","大家","对此","软件","滤波","主要","起来","的","保证","不过","一","过","灰度","作","变化","，","通用性","通过","著名","优化"],"title":"CV图像加速处理","title_tokens":["图像","加速","处理","cv"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#togetherros","text":"TogetherROS系统中集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 效果这么好，具体该如何使用呢？","text_tokens":["倍","了","进行","降低","校正","地平线","等","接口","加速","、","运行","兼容","集成","好","该","性能","方法","具体","畸变","消耗","滤波","效果","做到","软硬件","而且","，","2","通过","算子","3","呢","软硬","提升","与","hobot","率","处理","更","高斯","系统","风格","帧","实现","分别","旋转","应用","甚至","地平","引擎","在","编程","底层","togetherros","资源","。","协同","测试","例如","cv","常用","芯片","效率"," ","使用","对比","视觉","图像","系统资源","opencv","混合","这么","上","开发","到","缩放","硬件","？","如何","可以","我们","库","软件","的","多倍","中","便于"],"title":"TogetherROS视觉加速","title_tokens":["视觉","togetherros","加速"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_1","text":"我们先来看下图像处理中常用的高斯滤波算法，OpenCV和hobotcv，正面PK一下，我们也看看在程序中如何使用hobotcv的图像处理加速算法。","text_tokens":["看看","算法","来看","。","hobotcv","和","程序","常用","加速","处理","一下","我们","正面","图像处理","使用","高斯","图像","opencv","也","滤波","pk","下","的","先","在","，","中","如何"],"title":"高斯滤波","title_tokens":["高斯","滤波"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_2","text":"$ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/hobot_cv/config/ . $ ros2 launch hobot_cv hobot_cv_gaussian_blur.launch.py","text_tokens":["_","source","bash","gaussian","blur","hobot","cv","/","lib"," ","launch",".","$","py","r","setup","config","-","ros2","tros","cp","opt"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_3","text":"代码地址：https://c-gitlab.horizon.ai/HHP/box/hobot_cv/-/blob/develop/test/test_gaussian_blur.cpp // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include <algorithm> #include <chrono> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <utility> #include \"hobotcv_gaussian_blur.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" void analyse_result ( cv :: Mat & out_filter , cv :: Mat & cls_filter , std :: string flag_name ) { auto start_time = std :: chrono :: steady_clock :: now (); std :: cout << \"\" << std :: endl ; std :: cout << \"analyse_result start \" << std :: endl ; std :: cout << \"---------\" << flag_name << std :: endl ; std :: cout << \"out_filter type:\" << out_filter . type () << \",cols:\" << out_filter . cols << \",rows:\" << out_filter . rows << \",channel:\" << out_filter . channels () << std :: endl ; std :: cout << \"cls_filter type:\" << cls_filter . type () << \",cols:\" << cls_filter . cols << \",rows:\" << cls_filter . rows << \",channel:\" << cls_filter . channels () << std :: endl ; double minvalue , maxvalue ; cv :: Point mixIdx , maxIdx ; cv :: minMaxLoc ( out_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"out_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"out_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"out_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: minMaxLoc ( cls_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"cls_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"cls_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"cls_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: Mat mat_diff = cv :: abs ( out_filter - cls_filter ); cv :: Scalar sum_error = cv :: sum ( mat_diff >= 1 ); cv :: Scalar mean_error = cv :: sum ( mat_diff ) / ( mat_diff . rows * mat_diff . cols ); cv :: minMaxLoc ( mat_diff , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"\" << std :: endl ; std :: cout << \"diff diff diff\" << std :: endl ; std :: cout << \"mat_diff minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"mat_diff min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"mat_diff max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; std :: cout << \"\" << std :: endl ; std :: cout << \"error sum:\" << sum_error [ 0 ] << \",max:\" << maxvalue << \",mean_error:\" << mean_error [ 0 ] << std :: endl ; int time_used_ms_end = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: steady_clock :: now () - start_time ) . count (); std :: cout << \"analyse_result,time_used_ms_end:\" << time_used_ms_end << std :: endl ; std :: cout << \"analyse_result end \" << std :: endl ; std :: cout << \"\" << std :: endl ; } int main () { int32_t ret = -1 ; HobotGaussianBlurParam blur_param ; HOBOTCV_INITIALIZE_GAUSSIAN_BLUR_PARAM ( & blur_param ); HobotCVGaussianBlurHandle handle ; ret = HobotCVGaussianBlurCreate ( blur_param , & handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurCreate failed, error msg:%d \\n \" , ret ); return -1 ; } for ( int i = 0 ; i < 5 ; i ++ ) { std :: string m_tof_file_s = \"images/frame1_\" + std :: to_string ( i ) + \".png\" ; std :: cout << \"===================\" << std :: endl ; std :: cout << \"image name :\" << m_tof_file_s << std :: endl ; cv :: Mat src = cv :: imread ( m_tof_file_s , CV_16UC1 ); cv :: Mat dst ; cv :: medianBlur ( src , src , 3 ); auto start_time_infe = std :: chrono :: steady_clock :: now (); ret = HobotCVGaussianBlurProcess ( handle , & src , & dst ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurProcess failed, error msg:%d \\n \" , ret ); return -1 ; } int infe_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_infe ). count (); std :: cout << \"infe cost time:\" << infe_time << std :: endl ; auto start_time_gauss = std :: chrono :: steady_clock :: now (); cv :: Mat gaussian_tof ; cv :: GaussianBlur ( src , gaussian_tof , cv :: Size ( 3 , 3 ), 0 , 0 , cv :: BORDER_REPLICATE ); int guss_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_gauss ). count (); std :: cout << \"guss_time cost time:\" << guss_time << std :: endl ; float save_rate = float (( guss_time * 1.0 - infe_time * 1.0 ) / guss_time ); std :: cout << \"hobotcv save rate:\" << save_rate << std :: endl ; analyse_result ( dst , gaussian_tof , \"GaussianBlur\" ); std :: cout << \"-------------------------\" << std :: endl ; std :: cout << \"\" << std :: endl ; } ret = HobotCVGaussianBlurDestroy ( handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurDestroy failed, error msg:%d \\n \" , ret ); return -1 ; } return 0 ; }","text_tokens":["and","16uc1","iomanip","[","imread","or","param","the","hobotcv","save","algorithm","n","cpp","/","<","abs","if","maxidx","maxvalue","time","dst","medianblur","written","way","confidential","out","代码","utility","inc","=","hhp","gaussianblur","：","information","purpose","gauss","map","cols","minmaxloc","steady","-------------------------","c","ai","material","\\","reserved","type","clock","scalar","s","mean","for","std","diff","float","name","max","3","cls","end","gaussian","endl","be","without","channels","contains","blur","copied","file","count","hobot","mixidx","void","min","%","microseconds","i","filter","point","gitlab","part","hobotcvgaussianblurcreate","horizon","1.0","rate",",","fstream","cout","minvalue",">","*","trade","used","main","int32","png","---------","msg","opencv2","hobotgaussianblurparam","0","frame1","of","size","\"","src",":","in","cv","permission",")","t","+","x","hobotcvgaussianblurhandle","error","express"," ","printf","1","is","imgproc","tof","infe","start","image","ret","duration","5","core","-","++","double","reproduced","robotics","all","rights","hobotcvgaussianblurprocess","owned","y","box","no","queue","initialize","#","work","int","chrono","rows","cast",";","string","cost","auto","_","handle","to","2021","border","imgcodecs","地址","proprietary","test","may","mat","guss","https","failed","m","return","disclosed","{","now","develop","(","hpp","replicate","this","hobotcvgaussianblurdestroy","h","d","iterator","secrets",".","ms","]","sum","milliseconds","iostream","any","flag","images","include","result","&","channel","blob","copyright","transmitted","by","analyse","}"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_4","text":"再来看另外一个案例，图像的裁剪与缩放，比如这样一幅图片，我们尝试剪裁左上角的一小块图像出来，或者对裁剪的某一块图像放大来看看。","text_tokens":["看看","尝试","来看","。","上角","一块","与","比如","放大","我们","小块","一小块","另外","一幅","对","左上角","图像","一小","一个","裁剪","或者","剪裁","左上","再","图片","这样","出来","的","案例","来","缩放","，","某"],"title":"图像裁剪与缩放","title_tokens":["图像","裁剪","与","缩放"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_5","text":"# 配置TogetherROS环境 source /opt/tros/setup.bash # 从TogetherROS的安装路径中拷贝出运行示例需要的模型和配置文件。 cp -r /opt/tros/lib/hobot_cv/config/ . # 启动launch文件 ros2 launch hobot_cv hobot_cv_crop_resize.launch.py","text_tokens":["_","togetherros","source","bash","环境","。","crop","拷贝","路径","和","hobot","cv","模型","运行","需要","配置文件","/","lib","配置"," ","launch",".","启动","cp","从","py","r","setup","config","-","的","ros2","出","tros","#","示例","中","resize","文件","安装","opt"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_6","text":"代码地址：https://c-gitlab.horizon.ai/HHP/box/hobot_cv/-/blob/develop/src/test.cpp // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include \"include/hobotcv_imgproc.h\" #include \"include/utils.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/core/types.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/opencv.hpp\" #include <fstream> #include <string> #include <chrono> #include <iostream> void writeImg ( cv :: Mat & mat , std :: string imgfile ) { cv :: Mat img_bgr ; cv :: cvtColor ( mat , img_bgr , cv :: COLOR_YUV2BGR_NV12 ); cv :: imwrite ( imgfile , img_bgr ); } int main () { std :: string image_file = \"config/test.jpg\" ; cv :: Mat bgr_mat = cv :: imread ( image_file , cv :: IMREAD_COLOR ); auto src_height = bgr_mat . rows ; auto src_width = bgr_mat . cols ; cv :: Mat srcmat_nv12 ; BGRToNv12 ( bgr_mat , srcmat_nv12 ); auto dst_height = src_height / 2 ; auto dst_width = src_width / 2 ; cv :: Mat dstmat_nv12 ( dst_height * 3 / 2 , dst_width , CV_8UC1 ); auto before_resize = std :: chrono :: system_clock :: now (); auto ret = hobot_cv :: hobotcv_resize ( srcmat_nv12 , src_height , src_width , dstmat_nv12 , dst_height , dst_width ); auto after_resize = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_resize - before_resize ). count (); if ( 0 == ret ) { std :: cout << \"resize finish, time: \" << interval << \"ms\" << std :: endl ; } writeImg ( dstmat_nv12 , \"./resize.jpg\" ); auto before_crop = std :: chrono :: system_clock :: now (); auto cropmat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , 200 , 200 , cv :: Range ( 0 , 200 ), cv :: Range ( 0 , 200 )); auto after_crop = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_crop - before_crop ). count (); std :: cout << \"crop finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropmat , \"./crop.jpg\" ); auto before_cropResize = std :: chrono :: system_clock :: now (); auto cropResizemat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , src_height , src_width , cv :: Range ( 200 , 400 ), cv :: Range ( 200 , 400 )); auto after_cropResize = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_cropResize - before_cropResize ). count (); std :: cout << \"cropResize finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropResizemat , \"./cropResize.jpg\" ); return 0 ; }","text_tokens":["and","imread","after","finish","or","the","hobotcv","cpp","/","<","if","dst","time","written","cvtcolor","way","confidential","代码","inc","=","hhp","jpg","config","imgfile","：","information","purpose","nv12","cols","400","height","c","ai","material","reserved","clock","200","for","std","2","3","endl","crop","cropresizemat","be","without","contains","copied","file","count","hobot","void","img","gitlab","part","horizon",",","fstream","cout","srcmat",">","*","trade","used","main","bgr","opencv2","utils","before","0","of","yuv2bgr","\"","src",":","in","writeimg","cv","permission",")","express"," ","is","imgproc","8uc1","types","image","ret","opencv","bgrtonv12","duration","core","-","reproduced","robotics","all","rights","owned","color","box","no","#","work","int","width","range","resize","chrono","imwrite","rows","cast",";","string","auto","_","2021","cropresize","dstmat","imgcodecs","地址","proprietary","test","may","mat","interval","https","return","disclosed","{","now","develop","(","hpp","this","h","secrets",".","ms","cropmat","milliseconds","iostream","any","include","&","blob","copyright","transmitted","by","}","system"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/","text":"模型推理框架 智能机器人与机器学习是紧密相连的，机器学习又可以分成数据采集、标注、训练、推理等环节，其中数据的训练需要消耗大量算力，适合在服务器或者云端进行，不过训练好的模型可是要部署到机器人端进行推理运算的，所以模型推理的效率如何，直接决定了机器人视觉处理的效率，这刚好是TogetherROS所擅长的地方。 Hobot DNN模型推理库 TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 hobot_dnn是在地平线X3开发板上利用BPU处理器实现AI推理功能，基于地平线EasyDNN和ROS2 Node进行二次开发，为应用开发提供更简单易用的模型集成开发接口，包括模型管理、基于模型描述的输入处理及结果解析，以及模型输出内存分配管理等功能。 关于hobot_dnn的使用逻辑流程如这张图所示，供大家参考，我们后续也会通过具体的案例解释代码的实现过程。 算法与应用库 在Hobot DNN模型推理库的基础上，地平线还提供了一套基于TogetherROS系统的AI算法包，称为BOXs，这样我们就不需要从零构建算法，基于这些标准而高效的算法，可以更关注应用层面的APP开发。 从这张图中我们可以看到，这套AI算法包中包含两大块，一个是基础算法，一个是应用算法。 基础算法中主要是图像分类、语义分割和目标检测这些常用的算法，应用层面就会基于这些算法和某些场景，动态实现更为复杂的人体识别、骨骼点识别、手势识别等具体的功能，这些模块就可以和机器人运功功能直接结合，节省了我们开发AI视觉部分的时间。 模型推理测试 这套模型推理和算法库的效果如何呢？ 我们先来体验一个TogetherROS系统自带的案例，识别这张图片中的人，以及每个人的骨骼关键点。 # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。config中为example使用的模型，回灌使用的本地图片 $ cp -r /opt/tros/lib/dnn_node_example/config/ . # 使用本地jpg格式图片通过同步模式进行回环预测，并存储渲染后的图片 $ ros2 launch dnn_node_example hobot_dnn_node_example_feedback.launch.py","text_tokens":["直接","source","实际","结果","环境","了","后","进行","所","决定","等","大量","地平线","接口","紧密","功能","众多","输入","、","node","开发板","运行","feedback","每个","关键","分类","管理","/","集成","存储","人工","好","供","$","运功","boxs","及","代码","jpg","具体","config","预测","适合","手势","图片","基于","消耗","dnn","所示","动态","效果","回灌","案例","检测","不过","处理器","ai","就","训练","描述","中为","务器","tros","一套","为","解析","这张","，","自带","并","开源","内存","通过","相连","这","二次","文件","大块","呢","过程","很快","语义","基础","包含","二次开发","与","hobot","和","部分","时间","结合","本地","处理","算力","张图","配置文件","更","智能","很多","复杂","所以","还","看到","从","是","系统","或者","实现","构建","机器人","花费","也","关于","骨骼","example","应用","关键点","ros2","出","模式","地平","引擎","又","在","人","底层","充足","这些","cp","端","opt","可是","togetherros","这套","bash","。","测试","擅长","渲染","框架","称为","路径","同步","分割","常用","调教","效率","芯片","标准","开发者","识别","回环"," ","机器","部署","使用","关注","标注","launch","啦","参考","视觉","流程","人工智能","逻辑","提供","如","图像","一个","setup","大家","模块","推理","-","某些","主要","上","层面","开发","利用","x3","到","不用","零","目标","？","包括","#","包中","如何","安装","_","人体","格式","算法","要","采集","保障","刚好","可以","会","拷贝","包","系统集成","模型","需要","我们","lib","理器","简单","而","配置","运算","解释",".","app","服务器","地方","分配","库","两大块","输出","学习","体验","分成","云端","场景","点","py","bpu","后续","r","更为","服务","这样","环节","的","以及","先","借助","easydnn","不","来","示例","易用","中","节省","其中","数据","高效"],"title":"模型推理框架","title_tokens":["框架","推理","模型"]},{"location":"hhp/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_1","text":"智能机器人与机器学习是紧密相连的，机器学习又可以分成数据采集、标注、训练、推理等环节，其中数据的训练需要消耗大量算力，适合在服务器或者云端进行，不过训练好的模型可是要部署到机器人端进行推理运算的，所以模型推理的效率如何，直接决定了机器人视觉处理的效率，这刚好是TogetherROS所擅长的地方。","text_tokens":["可是","直接","togetherros","要","。","采集","了","进行","擅长","刚好","可以","所","决定","等","大量","紧密","与","效率","、","模型","处理","需要","算力","智能","运算","机器","好","部署","标注","服务器","所以","地方","学习","视觉","是","分成","云端","或者","机器人","推理","适合","服务","消耗","环节","的","不过","训练","务器","到","又","在","，","其中","数据","相连","如何","这","端"],"title":"模型推理框架","title_tokens":["框架","推理","模型"]},{"location":"hhp/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#hobot-dnn","text":"TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 hobot_dnn是在地平线X3开发板上利用BPU处理器实现AI推理功能，基于地平线EasyDNN和ROS2 Node进行二次开发，为应用开发提供更简单易用的模型集成开发接口，包括模型管理、基于模型描述的输入处理及结果解析，以及模型输出内存分配管理等功能。 关于hobot_dnn的使用逻辑流程如这张图所示，供大家参考，我们后续也会通过具体的案例解释代码的实现过程。","text_tokens":["实际","结果","了","进行","地平线","接口","等","功能","众多","输入","、","node","开发板","管理","集成","人工","供","及","代码","具体","基于","dnn","所示","案例","处理器","ai","就","训练","描述","为","解析","，","开源","内存","通过","这","二次","过程","很快","二次开发","和","hobot","时间","处理","算力","张图","更","智能","很多","是","系统","实现","花费","也","关于","应用","ros2","地平","引擎","在","底层","充足","这套","togetherros","。","调教","芯片","开发者"," ","使用","部署","啦","参考","流程","人工智能","逻辑","提供","如","大家","推理","上","开发","利用","x3","不用","包括","_","保障","可以","会","系统集成","模型","我们","理器","简单","解释","分配","库","输出","bpu","后续","以及","的","借助","easydnn","易用","中","数据"],"title":"Hobot DNN模型推理库","title_tokens":["模型","推理"," ","dnn","库","hobot"]},{"location":"hhp/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_2","text":"在Hobot DNN模型推理库的基础上，地平线还提供了一套基于TogetherROS系统的AI算法包，称为BOXs，这样我们就不需要从零构建算法，基于这些标准而高效的算法，可以更关注应用层面的APP开发。 从这张图中我们可以看到，这套AI算法包中包含两大块，一个是基础算法，一个是应用算法。 基础算法中主要是图像分类、语义分割和目标检测这些常用的算法，应用层面就会基于这些算法和某些场景，动态实现更为复杂的人体识别、骨骼点识别、手势识别等具体的功能，这些模块就可以和机器人运功功能直接结合，节省了我们开发AI视觉部分的时间。","text_tokens":["直接","了","地平线","等","功能","、","分类","运功","boxs","具体","手势","基于","dnn","动态","检测","ai","就","一套","，","这","大块","语义","基础","包含","部分","和","hobot","时间","结合","张图","更","复杂","还","看到","从","是","系统","构建","实现","机器人","骨骼","应用","地平","在","这些","这套","togetherros","。","称为","分割","常用","标准","识别"," ","机器","关注","视觉","图像","提供","一个","模块","推理","某些","主要","上","层面","开发","零","目标","包中","人体","算法","可以","会","包","模型","需要","我们","而","app","两大块","库","点","场景","更为","这样","的","不","中","节省","高效"],"title":"算法与应用库","title_tokens":["与","应用","算法","库"]},{"location":"hhp/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_3","text":"这套模型推理和算法库的效果如何呢？ 我们先来体验一个TogetherROS系统自带的案例，识别这张图片中的人，以及每个人的骨骼关键点。 # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。config中为example使用的模型，回灌使用的本地图片 $ cp -r /opt/tros/lib/dnn_node_example/config/ . # 使用本地jpg格式图片通过同步模式进行回环预测，并存储渲染后的图片 $ ros2 launch dnn_node_example hobot_dnn_node_example_feedback.launch.py","text_tokens":["source","环境","后","进行","node","运行","feedback","每个","关键","/","存储","$","jpg","config","预测","回灌","图片","dnn","效果","案例","中为","tros","这张","自带","，","并","通过","文件","呢","和","hobot","本地","配置文件","从","系统","骨骼","example","关键点","ros2","出","模式","人","cp","opt","这套","togetherros","bash","。","渲染","路径","同步","识别","回环"," ","使用","launch","一个","setup","推理","-","#","？","如何","安装","_","格式","算法","拷贝","模型","需要","我们","lib","配置",".","体验","库","py","r","以及","的","先","来","示例","中"],"title":"模型推理测试","title_tokens":["推理","模型","测试"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/","text":"图像物体分类 接下来我们继续学习基于Hobot CNN模型推理库之上的视觉应用。 机器人要感知周边环境，那就得确定看到的图像中都有什么，比如地上有一只猫，旁边有一个桌子之类的，这个猫和桌子就是具体的物体分类啦。 图像分类原理 如果是人来识别一只猫的话，似乎再简单不过了，无论黑猫、白猫还是花猫，我们一眼就可以看出来。 不过这件事对于机器人来讲可没有那么简单，为了能够让机器准确识别一只猫，无数学者可是研究了几十年啊，虽然还赶不上人类的智慧，但是这件事已经没有那么遥不可及了。 比如说我们要让机器识别图像中有一只猫，我们就得先教会机器什么是猫，对此我们就得把各种各样猫的照片给计算机看，目的就是让机器学习，看的越多，识别的也就越准。 我们那里找这么多猫的图片呢？ 大家可能听说过一个著名的视觉对象数据库——ImageNet，里边有超过1400万张标注过的图像，2万多个类别，我们就可以利用这个庞大的数据库，找到很多猫的照片。 然后就搭建神经网络，把这些数据放进去训练了，调教出一套比较好的识别模型。 接下来把这套模型部署到机器人上，之后每当有一幅图像收到之后，就传到这个模型中，也就是模型推理，推理的结果就是类似这样的数据，概率最大的，也就是机器识别到的物体啦。 关于机器学习，理论众多，大家可以学习专门的课程，我们课上还是重点讲解在TogetherROS中的实现方法。 编程开发方法 我们来看这样一张图片，大家很快就可以发现这是一只斑马。 运行示例程序 我们如何用机器来识别它呢，大家先来运行这个案例，这是基于ImageNet数据集训练的模型，可以识别1000种常见的物体，我们看一下效果如何？ $ cd /app/ai_inference/01_basic_sample/ $ sudo python3 ./test_mobilenetv1.py 代码解析 test_mobilenetv1.py： #!/usr/bin/env python3 from hobot_dnn import pyeasy_dnn as dnn import numpy as np import cv2 def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_BGR2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] if __name__ == '__main__' : # test classification result models = dnn . load ( '../models/mobilenetv1_224x224_nv12.bin' ) # test input and output properties print ( \"=\" * 10 , \"inputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) print ( \"inputs[0] name is:\" , models [ 0 ] . inputs [ 0 ] . name ) print ( \"=\" * 10 , \"outputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . outputs [ 0 ] . properties ) print ( \"outputs[0] name is:\" , models [ 0 ] . outputs [ 0 ] . name ) # 打开图片 img_file = cv2 . imread ( './zebra_cls.jpg' ) # 把图片缩放到模型的输入尺寸 # 获取算法模型的输入tensor 的尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) des_dim = ( w , h ) resized_data = cv2 . resize ( img_file , des_dim , interpolation = cv2 . INTER_AREA ) nv12_data = bgr2nv12_opencv ( resized_data ) # 模型推理 outputs = models [ 0 ] . forward ( nv12_data ) print ( \"=\" * 10 , \"Get output[0] numpy data\" , \"=\" * 10 ) print ( \"output[0] buffer numpy info: \" ) print ( \"shape: \" , outputs [ 0 ] . buffer . shape ) print ( \"dtype: \" , outputs [ 0 ] . buffer . dtype ) # print(\"First 10 results:\", outputs[0].buffer[0][:10]) # 从输出结果中得到值最大的那个序号，比如 zebra 就是第 340 个值，应该大于 0.99 print ( \"=\" * 10 , \"Classification result\" , \"=\" * 10 ) assert np . argmax ( outputs [ 0 ] . buffer ) == 340 # 输出类别序号和预测概率值 print ( \"cls id: %d Confidence: %f \" % ( np . argmax ( outputs [ 0 ] . buffer ), outputs [ 0 ] . buffer [ 0 ][ np . argmax ( outputs [ 0 ] . buffer )])) Mobilenetv2物体分类 用图片进行识别不太过瘾，毕竟是静态的图像，没问题，TogetherROS中还提供了实时物体分类的案例，我们继续来体验一下。 为了实时显示视觉识别的效果，这里我们需要启动TogetherROS中的一个web服务器，它会把视觉识别的实时效果，通过网络传输出来，我们直接在浏览器中就可以看到结果啦。也是便于我们开发调试的一个重要工具。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . 运行例程： $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/mobilenetv2workconfig.json image_width: = 480 image_height: = 272 在浏览器中登录192.168.1.10，就可以看到分类效果啦：","text_tokens":["and","进行","[","概率","argmax","node","大于","来讲","$","inference","具体","预测","应该","：","基于","dnn","ai","务器","mobilenetv1","type","原理","解析","黑猫","2","name","input","然后","reshape","很快","多猫","越","给","hobot","种","放进","搭建","很多","f","问题","uv","教会","一幅","白猫","4","是","里边","实现",",","确定","它","万多个","打开","花猫","main","websocket","编程","这些","python3","之类","智慧","这个","越准","第","对象","\"","basic",":","程序","调教",")","各种","inter","import"," ","部署","获取","标注","is","啦","id","视觉","这里","image","那里","推理","出来","上","那个","利用","runtime","过","神经","地上","？","著名","那","get","_","assert","10","(","lib",".","调试","学习","w","def","再","对此","无数","i420","示例","中","看","似乎","数据","虽然","环境","结果","工具","了","几十年","from","让","classification","输入","运行","物体","不可","dim","得","目的","272","height","就","用","还是","比如说","找到","inputs","'","的话","cls","它会","imagenet","__","file","和","庞大","cv2","不太","接下","%","1000","之上","share","还","从","比较","下来","!","缩","可","机器人","这件","example","*","ros2","旁边","啊","中有","在","buffer","课程","cp","data","&&","序号","webservice","+","x","1400","提供","集","无论","width","如果","万张","confidence","bgr2nv12","那么","算法","要","万多","pyeasy","需要","我们","first","d","sbin","开发方法","else","py","info","有","各种各样","多","output","r","一只","服务","这样","数据库","bgr2yuv","对于","340","找","便于","benchmark","numpy","周边","imread","zeros","众多","mobilenetv2workconfig","赶不上","分类","好","就是","神经网络","mobilenetv2","过瘾","常见","=","方法","sample","就可以看","webserver","不过","训练","tros","一套","专门","通过","没有","进去","这是","pro","呢","p","猫","但是","几十","计算","224x224","比如","img","为了","hw","超过","重要","也","应用","多个","properties","尺寸","cnn","传输","这套","。","packed","shape","tensor","实时","算机","interpolation","like","把","课上","机器","学者","都","一个","chmod","setup","大家","color","开发","最大","到","usr","#","计算机","resize","照片","接下来","能够","遥不可及","理论","人类","人来","听说","简单","h","服务器","—","]","des","可能","web","的","zebra","先","models","results","直接","source","十年","env","放到","、","print","放进去","/","毕竟","if","之后","cvtcolor","事","代码","jpg","config","图片","nv12","效果","已经","案例","一眼","每当","01","，","3","来看","0.99","area","类似","layout","..","json","480","值","看到","planar","静态","得到","关于","重点","斑马","np","讲解","桌子","一张","cd","出","1.10","类别","各样","没","sudo","outputs","0","opt","可是","togetherros","dtype","bash","显示","网络","nchw","据库","识别","as","launch","1","继续","例程","图像","研究","opencv","-","这么","forward","resized","bin","y","192.168","准确","如何","nginx","个值","transpose","周边环境","可以","test","浏览","return","模型","什么","一下","收到","app","yuv420p","体验","启动","库","输出","load","发现","result","登录","来","感知","神经网","传到","浏览器"],"title":"图像物体分类","title_tokens":["图像","分类","物体"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_1","text":"接下来我们继续学习基于Hobot CNN模型推理库之上的视觉应用。 机器人要感知周边环境，那就得确定看到的图像中都有什么，比如地上有一只猫，旁边有一个桌子之类的，这个猫和桌子就是具体的物体分类啦。","text_tokens":["这个","要","。","环境","周边","周边环境","猫","和","hobot","比如","模型","接下","什么","物体","我们","分类"," ","机器","之类","就是","之上","继续","都","库","啦","看到","学习","视觉","图像","下来","有","一个","具体","机器人","推理","得","基于","确定","一只","的","应用","桌子","就","旁边","感知","地上","，","中","那","接下来","cnn"],"title":"图像物体分类","title_tokens":["图像","分类","物体"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_2","text":"如果是人来识别一只猫的话，似乎再简单不过了，无论黑猫、白猫还是花猫，我们一眼就可以看出来。 不过这件事对于机器人来讲可没有那么简单，为了能够让机器准确识别一只猫，无数学者可是研究了几十年啊，虽然还赶不上人类的智慧，但是这件事已经没有那么遥不可及了。 比如说我们要让机器识别图像中有一只猫，我们就得先教会机器什么是猫，对此我们就得把各种各样猫的照片给计算机看，目的就是让机器学习，看的越多，识别的也就越准。 我们那里找这么多猫的图片呢？ 大家可能听说过一个著名的视觉对象数据库——ImageNet，里边有超过1400万张标注过的图像，2万多个类别，我们就可以利用这个庞大的数据库，找到很多猫的照片。 然后就搭建神经网络，把这些数据放进去训练了，调教出一套比较好的识别模型。 接下来把这套模型部署到机器人上，之后每当有一幅图像收到之后，就传到这个模型中，也就是模型推理，推理的结果就是类似这样的数据，概率最大的，也就是机器识别到的物体啦。 关于机器学习，理论众多，大家可以学习专门的课程，我们课上还是重点讲解在TogetherROS中的实现方法。","text_tokens":["虽然","结果","了","几十年","十年","让","概率","众多","、","放进去","赶不上","物体","好","就是","之后","来讲","神经网络","事","不可","方法","图片","得","目的","就可以看","已经","一眼","不过","每当","就","训练","还是","一套","比如说","，","黑猫","2","找到","专门","没有","进去","的话","呢","然后","类似","imagenet","多猫","越","猫","给","但是","几十","计算","庞大","比如","放进","接下","为了","搭建","很多","超过","还","教会","一幅","白猫","比较","是","下来","可","里边","实现","机器人","也","这件","关于","万多个","重点","讲解","花猫","出","啊","多个","各样","类别","中有","在","这些","课程","智慧","可是","这套","togetherros","这个","越准","。","对象","网络","据库","调教","算机","识别","各种","把","课上"," ","机器","部署","标注","学者","啦","1400","视觉","图像","研究","一个","那里","大家","推理","这么","出来","上","利用","无论","过","神经","最大","准确","到","？","计算机","如果","万张","照片","著名","接下来","那么","能够","遥不可及","要","万多","理论","可以","人类","人来","数据","模型","什么","听说","我们","收到","简单","—","学习","有","各种各样","多","再","一只","对此","可能","这样","的","先","无数","数据库","神经网","对于","中","看","似乎","找","传到"],"title":"图像分类原理","title_tokens":["图像","分类","原理"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_3","text":"我们来看这样一张图片，大家很快就可以发现这是一只斑马。","text_tokens":["就","一张","来看","。","我们","很快","大家","可以","图片","，","一只","这样","斑马","这是","发现"],"title":"编程开发方法","title_tokens":["开发","开发方法","方法","编程"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_4","text":"我们如何用机器来识别它呢，大家先来运行这个案例，这是基于ImageNet数据集训练的模型，可以识别1000种常见的物体，我们看一下效果如何？ $ cd /app/ai_inference/01_basic_sample/ $ sudo python3 ./test_mobilenetv1.py","text_tokens":["_","这个","呢","imagenet","可以","basic","test","种","识别","模型","运行","物体","我们","一下","/","机器","1000"," ",".","app","$","py","常见","inference","大家","集","基于","sample","效果","它","的","案例","ai","先","训练","cd","用","python3","mobilenetv1","来","01","？","，","sudo","看","数据","如何","这是"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_5","text":"test_mobilenetv1.py： #!/usr/bin/env python3 from hobot_dnn import pyeasy_dnn as dnn import numpy as np import cv2 def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_BGR2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] if __name__ == '__main__' : # test classification result models = dnn . load ( '../models/mobilenetv1_224x224_nv12.bin' ) # test input and output properties print ( \"=\" * 10 , \"inputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) print ( \"inputs[0] name is:\" , models [ 0 ] . inputs [ 0 ] . name ) print ( \"=\" * 10 , \"outputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . outputs [ 0 ] . properties ) print ( \"outputs[0] name is:\" , models [ 0 ] . outputs [ 0 ] . name ) # 打开图片 img_file = cv2 . imread ( './zebra_cls.jpg' ) # 把图片缩放到模型的输入尺寸 # 获取算法模型的输入tensor 的尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) des_dim = ( w , h ) resized_data = cv2 . resize ( img_file , des_dim , interpolation = cv2 . INTER_AREA ) nv12_data = bgr2nv12_opencv ( resized_data ) # 模型推理 outputs = models [ 0 ] . forward ( nv12_data ) print ( \"=\" * 10 , \"Get output[0] numpy data\" , \"=\" * 10 ) print ( \"output[0] buffer numpy info: \" ) print ( \"shape: \" , outputs [ 0 ] . buffer . shape ) print ( \"dtype: \" , outputs [ 0 ] . buffer . dtype ) # print(\"First 10 results:\", outputs[0].buffer[0][:10]) # 从输出结果中得到值最大的那个序号，比如 zebra 就是第 340 个值，应该大于 0.99 print ( \"=\" * 10 , \"Classification result\" , \"=\" * 10 ) assert np . argmax ( outputs [ 0 ] . buffer ) == 340 # 输出类别序号和预测概率值 print ( \"cls id: %d Confidence: %f \" % ( np . argmax ( outputs [ 0 ] . buffer ), outputs [ 0 ] . buffer [ 0 ][ np . argmax ( outputs [ 0 ] . buffer )]))","text_tokens":["and","numpy","结果","[","imread","zeros","from","概率","env","argmax","classification","放到","输入","print","/","大于","if","就是","cvtcolor","dim","=","jpg","预测","应该","图片","：","dnn","nv12","height","mobilenetv1","type","，","2","inputs","'","name","input","3","cls","pro","0.99","reshape","area","__","file","和","hobot","224x224","比如","layout","cv2","..","img","%","hw","f","uv","值","从","4","planar","!","缩",",","得到","np","打开","*","类别","properties","main","outputs","buffer","python3","0","尺寸","dtype","packed","shape","tensor","data","\"","第",":","nchw",")","序号","interpolation","like","as","把","inter","import"," ","获取","1","is","id","image","opencv","推理","forward","resized","那个","bin","color","y","最大","usr","#","width","resize","confidence","get","bgr2nv12","_","算法","assert","个值","10","transpose","pyeasy","test","return","模型","(","first","h","d",".","yuv420p","]","输出","des","else","py","w","output","info","def","load","的","zebra","result","i420","bgr2yuv","models","340","中","results"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#mobilenetv2","text":"用图片进行识别不太过瘾，毕竟是静态的图像，没问题，TogetherROS中还提供了实时物体分类的案例，我们继续来体验一下。 为了实时显示视觉识别的效果，这里我们需要启动TogetherROS中的一个web服务器，它会把视觉识别的实时效果，通过网络传输出来，我们直接在浏览器中就可以看到结果啦。也是便于我们开发调试的一个重要工具。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . 运行例程： $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/mobilenetv2workconfig.json image_width: = 480 image_height: = 272 在浏览器中登录192.168.1.10，就可以看到分类效果啦：","text_tokens":["直接","source","结果","工具","了","进行","node","运行","mobilenetv2workconfig","物体","分类","毕竟","/","$","过瘾","=","config","图片","：","dnn","效果","272","案例","webserver","height","就","用","务器","tros","，","通过","p","它会","file","hobot","不太","为了","json","480","问题","share","还","看到","是","静态","重要","也","example","ros2","1.10","cd","没","在","websocket","cp","opt","传输","togetherros","bash","。","显示","网络",":","&&","实时","识别","webservice","+","把","x"," ","launch","继续","啦","例程","视觉","图像","提供","这里","image","一个","chmod","setup","-","出来","开发","192.168","runtime","#","width","_","nginx","可以","浏览","需要","一下","我们","lib","sbin",".","服务器","体验","启动","调试","py","r","服务","web","的","登录","来","中","便于","benchmark","浏览器"],"title":"Mobilenetv2物体分类","title_tokens":["物体","mobilenetv2","分类"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/","text":"动态目标检测 图像物体分类重在分析图像中存在的物体是什么，便于机器理解看到的环境信息，另外一种场景，机器不仅要识别某一物体，还要知道这个物体所在的位置，当物体在运动时，更要快速连续的跟踪，这就是目标检测，重在分析识别到物体在图像中的位置。 目标检测原理 假设我们要识别图像中这只狗的位置，以最为常用的YOLO算法为例，它会运用单个卷积神经网络(CNN) ，将图像分成网格，并预测每个网格的对象概率和边界框。 比如，对于这个图像，Yolo的CNN网络将输入的图片分割成7x7的网格，然后每个网格负责去检测那些中心点落在该格子内的目标，比如，小狗这个目标的中心点在左下角的网格中，那该网格就负责预测狗这个对象。 每个网格中将有多个边界框，在训练时，我们希望每个对象只有一个边界框，比如最终只有一个边界框把这只狗包起来。因此，我们根据哪个边界框与之前标注的重叠度最高，预测对象的位置和概率。 最终包围对象的边界框，就是识别的结果，使用四个描述符进行说明： 边界框的中心位置 边界框的高度 边界框的宽度 识别到对象所属的类 这样就完成了对目标的实时检测，拿到目标的信息之后，就可以进行后续的机器人行为控制了。 我们对目标检测系统运行速度的要求一般都比较高，可以实时处理视频流，比如车辆行驶的动态监测、自然环境中的目标识别，有着非常广泛的应用价值。 回到TogetherROS和旭日X3派的开发板，我们来看下这套软硬件结合的目标检测系统，效率如何。 MIPI相机目标检测 接下来，我们要利用MIPI相机，动态识别图像中各种各样的物体以及他们所在的位置，推理过程使用的是基于COCO数据集训练的80个类别，也就是可以识别80种常用的物体位置。 运行例程 $ cd /app/ai_inference/03_mipi_camera_sample/ $ python3 ./mipi_camera.py 代码解析 mipi_camera.py： #!/usr/bin/env python3 import numpy as np import cv2 import colorsys # Camera API libs from hobot_vio import libsrcampy as srcampy from hobot_dnn import pyeasy_dnn as dnn # detection model class names def get_classes (): return np . array ([ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" , \"bus\" , \"train\" , \"truck\" , \"boat\" , \"traffic light\" , \"fire hydrant\" , \"stop sign\" , \"parking meter\" , \"bench\" , \"bird\" , \"cat\" , \"dog\" , \"horse\" , \"sheep\" , \"cow\" , \"elephant\" , \"bear\" , \"zebra\" , \"giraffe\" , \"backpack\" , \"umbrella\" , \"handbag\" , \"tie\" , \"suitcase\" , \"frisbee\" , \"skis\" , \"snowboard\" , \"sports ball\" , \"kite\" , \"baseball bat\" , \"baseball glove\" , \"skateboard\" , \"surfboard\" , \"tennis racket\" , \"bottle\" , \"wine glass\" , \"cup\" , \"fork\" , \"knife\" , \"spoon\" , \"bowl\" , \"banana\" , \"apple\" , \"sandwich\" , \"orange\" , \"broccoli\" , \"carrot\" , \"hot dog\" , \"pizza\" , \"donut\" , \"cake\" , \"chair\" , \"couch\" , \"potted plant\" , \"bed\" , \"dining table\" , \"toilet\" , \"tv\" , \"laptop\" , \"mouse\" , \"remote\" , \"keyboard\" , \"cell phone\" , \"microwave\" , \"oven\" , \"toaster\" , \"sink\" , \"refrigerator\" , \"book\" , \"clock\" , \"vase\" , \"scissors\" , \"teddy bear\" , \"hair drier\" , \"toothbrush\" ]) def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_RGB2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] def postprocess ( model_output , model_hw_shape , origin_image = None , origin_img_shape = None , score_threshold = 0.5 , nms_threshold = 0.6 , dump_image = False ): input_height = model_hw_shape [ 0 ] input_width = model_hw_shape [ 1 ] if origin_image is not None : origin_image_shape = origin_image . shape [ 0 : 2 ] else : origin_image_shape = origin_img_shape prediction_bbox = decode ( outputs = model_output , score_threshold = score_threshold , origin_shape = origin_image_shape , input_size = 512 ) prediction_bbox = nms ( prediction_bbox , iou_threshold = nms_threshold ) prediction_bbox = np . array ( prediction_bbox ) topk = min ( prediction_bbox . shape [ 0 ], 1000 ) if topk != 0 : idx = np . argpartition ( prediction_bbox [ ... , 4 ], - topk )[ - topk :] prediction_bbox = prediction_bbox [ idx ] if dump_image and origin_image is not None : draw_bboxs ( origin_image , prediction_bbox ) return prediction_bbox def draw_bboxs ( image , bboxes , gt_classes_index = None , classes = get_classes ()): \"\"\"draw the bboxes in the original image \"\"\" num_classes = len ( classes ) image_h , image_w , channel = image . shape hsv_tuples = [( 1.0 * x / num_classes , 1. , 1. ) for x in range ( num_classes )] colors = list ( map ( lambda x : colorsys . hsv_to_rgb ( * x ), hsv_tuples )) colors = list ( map ( lambda x : ( int ( x [ 0 ] * 255 ), int ( x [ 1 ] * 255 ), int ( x [ 2 ] * 255 )), colors )) fontScale = 0.5 bbox_thick = int ( 0.6 * ( image_h + image_w ) / 600 ) for i , bbox in enumerate ( bboxes ): coor = np . array ( bbox [: 4 ], dtype = np . int32 ) if gt_classes_index == None : class_index = int ( bbox [ 5 ]) score = bbox [ 4 ] else : class_index = gt_classes_index [ i ] score = 1 bbox_color = colors [ class_index ] c1 , c2 = ( coor [ 0 ], coor [ 1 ]), ( coor [ 2 ], coor [ 3 ]) cv2 . rectangle ( image , c1 , c2 , bbox_color , bbox_thick ) classes_name = classes [ class_index ] bbox_mess = ' %s : %.2f ' % ( classes_name , score ) t_size = cv2 . getTextSize ( bbox_mess , 0 , fontScale , thickness = bbox_thick // 2 )[ 0 ] cv2 . rectangle ( image , c1 , ( c1 [ 0 ] + t_size [ 0 ], c1 [ 1 ] - t_size [ 1 ] - 3 ), bbox_color , - 1 ) cv2 . putText ( image , bbox_mess , ( c1 [ 0 ], c1 [ 1 ] - 2 ), cv2 . FONT_HERSHEY_SIMPLEX , fontScale , ( 0 , 0 , 0 ), bbox_thick // 2 , lineType = cv2 . LINE_AA ) print ( \" {} is in the picture with confidence: {:.4f} , bbox: {} \" . format ( classes_name , score , coor )) # cv2.imwrite(\"demo.jpg\", image) return image def decode ( outputs , score_threshold , origin_shape , input_size = 512 ): def _distance2bbox ( points , distance ): x1 = points [ ... , 0 ] - distance [ ... , 0 ] y1 = points [ ... , 1 ] - distance [ ... , 1 ] x2 = points [ ... , 0 ] + distance [ ... , 2 ] y2 = points [ ... , 1 ] + distance [ ... , 3 ] return np . stack ([ x1 , y1 , x2 , y2 ], - 1 ) def _scores ( cls , ce ): cls = 1 / ( 1 + np . exp ( - cls )) ce = 1 / ( 1 + np . exp ( - ce )) return np . sqrt ( ce * cls ) def _bbox ( bbox , stride , origin_shape , input_size ): h , w = bbox . shape [ 1 : 3 ] yv , xv = np . meshgrid ( np . arange ( h ), np . arange ( w )) xy = ( np . stack (( yv , xv ), 2 ) + 0.5 ) * stride bbox = _distance2bbox ( xy , bbox ) # opencv read, shape[1] is w, shape[0] is h scale_w = origin_shape [ 1 ] / input_size scale_h = origin_shape [ 0 ] / input_size scale = max ( origin_shape [ 0 ], origin_shape [ 1 ]) / input_size # origin img is pad resized #bbox = bbox * scale # origin img is resized bbox = bbox * [ scale_w , scale_h , scale_w , scale_h ] return bbox bboxes = list () strides = [ 8 , 16 , 32 , 64 , 128 ] for i in range ( len ( strides )): cls = outputs [ i ] . buffer bbox = outputs [ i + 5 ] . buffer ce = outputs [ i + 10 ] . buffer scores = _scores ( cls , ce ) classes = np . argmax ( scores , axis =- 1 ) classes = np . reshape ( classes , [ - 1 , 1 ]) max_score = np . max ( scores , axis =- 1 ) max_score = np . reshape ( max_score , [ - 1 , 1 ]) bbox = _bbox ( bbox , strides [ i ], origin_shape , input_size ) bbox = np . reshape ( bbox , [ - 1 , 4 ]) pred_bbox = np . concatenate ([ bbox , max_score , classes ], axis = 1 ) index = pred_bbox [ ... , 4 ] > score_threshold pred_bbox = pred_bbox [ index ] bboxes . append ( pred_bbox ) return np . concatenate ( bboxes ) def nms ( bboxes , iou_threshold , sigma = 0.3 , method = 'nms' ): def bboxes_iou ( boxes1 , boxes2 ): boxes1 = np . array ( boxes1 ) boxes2 = np . array ( boxes2 ) boxes1_area = ( boxes1 [ ... , 2 ] - boxes1 [ ... , 0 ]) * \\ ( boxes1 [ ... , 3 ] - boxes1 [ ... , 1 ]) boxes2_area = ( boxes2 [ ... , 2 ] - boxes2 [ ... , 0 ]) * \\ ( boxes2 [ ... , 3 ] - boxes2 [ ... , 1 ]) left_up = np . maximum ( boxes1 [ ... , : 2 ], boxes2 [ ... , : 2 ]) right_down = np . minimum ( boxes1 [ ... , 2 :], boxes2 [ ... , 2 :]) inter_section = np . maximum ( right_down - left_up , 0.0 ) inter_area = inter_section [ ... , 0 ] * inter_section [ ... , 1 ] union_area = boxes1_area + boxes2_area - inter_area ious = np . maximum ( 1.0 * inter_area / union_area , np . finfo ( np . float32 ) . eps ) return ious classes_in_img = list ( set ( bboxes [:, 5 ])) best_bboxes = [] for cls in classes_in_img : cls_mask = ( bboxes [:, 5 ] == cls ) cls_bboxes = bboxes [ cls_mask ] while len ( cls_bboxes ) > 0 : max_ind = np . argmax ( cls_bboxes [:, 4 ]) best_bbox = cls_bboxes [ max_ind ] best_bboxes . append ( best_bbox ) cls_bboxes = np . concatenate ( [ cls_bboxes [: max_ind ], cls_bboxes [ max_ind + 1 :]]) iou = bboxes_iou ( best_bbox [ np . newaxis , : 4 ], cls_bboxes [:, : 4 ]) weight = np . ones (( len ( iou ),), dtype = np . float32 ) assert method in [ 'nms' , 'soft-nms' ] if method == 'nms' : iou_mask = iou > iou_threshold weight [ iou_mask ] = 0.0 if method == 'soft-nms' : weight = np . exp ( - ( 1.0 * iou ** 2 / sigma )) cls_bboxes [:, 4 ] = cls_bboxes [:, 4 ] * weight score_mask = cls_bboxes [:, 4 ] > 0. cls_bboxes = cls_bboxes [ score_mask ] return best_bboxes def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) if __name__ == '__main__' : models = dnn . load ( '../models/fcos_512x512_nv12.bin' ) # 打印输入 tensor 的属性 print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) # 打印输出 tensor 的属性 print ( len ( models [ 0 ] . outputs )) for output in models [ 0 ] . outputs : print_properties ( output . properties ) # 获取 Camera 句柄 cam = srcampy . Camera () # 打开 f37 摄像头，并且把输出突出缩小成算法模型的输入尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) # 打开 F37, 初始化视频 pipeline 0 ，设置帧率30fps，缩放图像为 512 x 512 cam . open_cam ( 0 , 1 , 30 , w , h ) # Get HDMI display object disp = srcampy . Display () # For the meaning of parameters, please refer to the relevant documents of HDMI display disp . display ( 0 , 1920 , 1080 ) input_shape = ( h , w ) while True : # 从相机获取分辨率为 512x512 的nv12格式的图像数据， 参数 2 代表从硬件模块IPU中获取 img = cam . get_img ( 2 , 512 , 512 ) # 把图像数据转成 numpy 数据类型 img = np . frombuffer ( img , dtype = np . uint8 ) # 模型推理 outputs = models [ 0 ] . forward ( img ) # 对算法结果进行过滤，去掉执行度低的检测框，计算检测框的交并比去除冗余框，把检测框的坐标还原到原图位置上 prediction_bbox = postprocess ( outputs , input_shape , origin_img_shape = ( 1080 , 1920 )) # 从新获取一张图像，大小缩放成与显示器的分辨率一样的 1920 x 1080, 并且转换成 bgr格式，方便进行绘图操作 origin_image = cam . get_img ( 2 , 1920 , 1080 ) origin_nv12 = np . frombuffer ( origin_image , dtype = np . uint8 ) . reshape ( 1620 , 1920 ) origin_bgr = cv2 . cvtColor ( origin_nv12 , cv2 . COLOR_YUV420SP2BGR ) # 把算法运行后得到的物体检测框绘制到图像上 box_bgr = draw_bboxs ( origin_bgr , prediction_bbox ) # X3 的HDMI输出模块的输入图像格式需要是NV12的，所以需要先把bgr格式转成NV12 box_nv12 = bgr2nv12_opencv ( box_bgr ) # 把 NV12 格式的图像输出给显示器 disp . set_img ( box_nv12 . tobytes ()) cam . close_cam () USB相机目标检测 如果大家手上没有MIPI接口的相机，使用USB相机也可以实现同样的功能。 运行例程 $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 动态目标检测 大家如果没有HDMI显示器的话，也没有问题，刚才的例程，也可以这样来运行，我们通过统一网络环境中的浏览器就可以动态看到结果啦。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/fcosworkconfig.json image_width: = 480 image_height: = 272","text_tokens":["detection","and","中心点","知道","进行","还原","以","[","快速","relevant","概率","argmax","threshold","finfo","node","couch","每个","idx","thick","knife","0.5","hsv","points","array","$","index","stride","64","inference","预测","surfboard","：","基于","dnn","method","left","转换成","bbox","\\","ai","list","一般","换成","type","将","原理","解析","light","2","name","input","close","然后","reshape","refer","libs","摄像","刚才","给","api","种","hobot","结合","处理","高","自然环境","bboxs","section","bear","类型","问题","uv","所以","旭日","句柄","4","是","rectangle","实现",",","打开",">","内","8","main","2f","websocket","dump","bgr","数据类型","python3","mouse","vase","这个","racket","ball","对象","\"","bottle","original",":","concatenate","同样","1620","bicycle","gt","分割","效率",")","框","视频流","giraffe","display","参数","各种","inter","import","y2"," ","glove","获取","标注","is","啦","255","低","image","缩小成","推理","个","boxes2","parameters","disp","上","利用","runtime","神经","只有","int","运动","classes","get","02","_","to","sigma","assert","10","ious","person","linetype","包","{","(","x2","lib","说明","decode","format","实时处理",".","drier","30fps","输出模块","w","hdmi","rgb","def","please","maximum","以及","elephant","fork","i420","价值","下角","cam","中","数据","font","当","ones","umbrella","false","结果","环境","frombuffer","了","chair","cup","成","yuv420sp2bgr","from","the","microwave","argpartition","512x512","meaning","功能","输入","开发板","运行","物体","srcampy","ipu","object","冗余","落","所在","colors","colorsys","4f","272","检测","height","train","宽度","就","clock","负责","for","inputs","'","orange","狗","的话","cls","它会","parking","scale","tie","sqrt","车辆","__","交","file","和","7x7","glass","cv2","down","接下","一种","派","%","ind","i","1000","600","newaxis","share","draw","格子","names","从","比较","坐标","代表","大小","下来","广泛","!","帧","方便","机器人","example","边界","*","ros2","分辨率","hydrant","while","int32","在","buffer","cp","set","存在","bed","bat","03","mess","时","因此","sports","执行","ce","size","data","toothbrush","meter","&&","过滤","t","webservice","+","x","30","pred","使用","potted","sink","weight","去","集","像头","模块","那该","32","len","根据","box","minimum","width","range","并且","如果","confidence","bgr2nv12","度","算法","要","属性","pyeasy","位置","mipi","跟踪","描述符","vio","not","score","需要","四个","我们","sbin","要求","soft","else","缩小","strides","py","camera","有","各种各样","80","output","r","重在","显示器","x1","服务","这样","append","banana","图像格式","best","对于","dog","exp","便于","%.","}","benchmark","类","fcos","去掉","bowl","numpy","suitcase","更要","c1","fire","后","接口","zeros","nms","skis","stack","0.3","分类","apple","就是","dining","cow","神经网络","该","model","table","arange","tobytes","=","sample","动态","prediction","中心","origin","webserver","traffic","描述","训练","tros","donut","wine","s","backpack","line","并","通过","没有","比","meshgrid","pro","postprocess","过程","p","信息","有着","aa","某一","1080","phone","mask","xy","计算","率","比如","class","img","toilet","yv","horse","辨率","refrigerator","fcosworkconfig","hw","摄像头","gettextsize","分析","sign","puttext","系统","转成","回到","也","motorcycle","pad","应用","libsrcampy","enumerate","open","多个","properties","boxes1","broccoli","thickness","尺寸","cnn","tennis","...","这套","num","pipeline","。","packed","非常","他们","shape","tensor","设置","in","hershey","teddy","实时","carrot","right","float32","like","把","机器","都","union","一个","chmod","picture","kite","frisbee","还要","tuples","5","0.0","大家","setup","绘制","一样","color","绘图","开发","0.6","x3","coco","到","usr","read","#","连续","接下来","去除","eps","yolo","左下角","uint8","none","f37","y1","h","]","另外","handbag","场景","fontscale","起来","下","的","zebra","中将","lambda","先","models","source","demo","那些","env","、","print","/","sheep","if","之后","初始","最高","cvtcolor","代码","jpg","config","keyboard","图片","最终","nv12","map","转","所属","假设","拿到","scores","为","软硬件","，","这","max","3","小成","来看","cat","hot","area","原图","软硬","simplex","与","laptop","true","layout","..","min","卷积","新","json","突出","480","spoon","rgb2yuv","看到","对","car","planar","scissors","1.0","boat","小狗","得到","np","控制","为例","topk","分辨","bench","一张","cd","with","类别","不仅","哪个","各样","1920","监测","outputs","hair","xv","cake","skateboard","coor","truck","0","opt","togetherros","dtype","bash","高度","最为","of","bus","baseball","显示","网络","nchw","oven","常用","iou","识别","只","网格","toaster","128","as","速度","launch","1","例程","bboxes","图像","16","axis","opencv","-","forward","包围","resized","bin","y","左下","distance","行驶","remote","目标","硬件","sandwich","512","视频","希望","缩放","转换","统一","重叠","如何","imwrite","格式","bird","nginx","单个","book","transpose","可以","行为","相机","浏览","打印","初始化","usb","手上","return","理解","模型","什么","snowboard","plant","自然","c2","app","yuv420p","启动","up","pizza","输出","完成","分成","tv","后续","load","airplane","运用","操作","cell","channel","来","神经网","stop","之前","documents","打印输出","浏览器","distance2bbox"],"title":"动态目标检测","title_tokens":["检测","动态","目标"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_1","text":"图像物体分类重在分析图像中存在的物体是什么，便于机器理解看到的环境信息，另外一种场景，机器不仅要识别某一物体，还要知道这个物体所在的位置，当物体在运动时，更要快速连续的跟踪，这就是目标检测，重在分析识别到物体在图像中的位置。","text_tokens":["这个","要","环境","时","更要","信息","知道","。","某一","位置","快速","跟踪","理解","识别","什么","物体","一种","分类","机器","就是","另外","看到","分析","图像","是","场景","所在","重在","还要","的","检测","不仅","到","在","连续","目标","，","运动","中","便于","这","当","存在"],"title":"动态目标检测","title_tokens":["检测","动态","目标"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_2","text":"假设我们要识别图像中这只狗的位置，以最为常用的YOLO算法为例，它会运用单个卷积神经网络(CNN) ，将图像分成网格，并预测每个网格的对象概率和边界框。 比如，对于这个图像，Yolo的CNN网络将输入的图片分割成7x7的网格，然后每个网格负责去检测那些中心点落在该格子内的目标，比如，小狗这个目标的中心点在左下角的网格中，那该网格就负责预测狗这个对象。 每个网格中将有多个边界框，在训练时，我们希望每个对象只有一个边界框，比如最终只有一个边界框把这只狗包起来。因此，我们根据哪个边界框与之前标注的重叠度最高，预测对象的位置和概率。 最终包围对象的边界框，就是识别的结果，使用四个描述符进行说明： 边界框的中心位置 边界框的高度 边界框的宽度 识别到对象所属的类 这样就完成了对目标的实时检测，拿到目标的信息之后，就可以进行后续的机器人行为控制了。 我们对目标检测系统运行速度的要求一般都比较高，可以实时处理视频流，比如车辆行驶的动态监测、自然环境中的目标识别，有着非常广泛的应用价值。 回到TogetherROS和旭日X3派的开发板，我们来看下这套软硬件结合的目标检测系统，效率如何。","text_tokens":["结果","环境","中心点","了","进行","以","成","那些","概率","输入","、","开发板","运行","每个","之后","就是","神经网络","该","最高","落","预测","图片","最终","：","动态","中心","检测","所属","宽度","就","训练","描述","假设","一般","拿到","将","软硬件","，","并","负责","这","狗","来看","它会","然后","信息","有着","软硬","车辆","和","与","7x7","比如","结合","处理","高","自然环境","卷积","派","旭日","格子","对","比较","系统","广泛","回到","小狗","机器人","控制","应用","边界","为例","内","多个","哪个","在","监测","cnn","这套","togetherros","这个","高度","最为","时","。","因此","对象","非常","网络","实时","常用","分割","效率",")","识别","框","只","网格","视频流","把","速度"," ","使用","机器","标注","都","去","图像","一个","那该","包围","开发","左下","神经","只有","x3","根据","行驶","到","目标","硬件","视频","希望","重叠","如何","yolo","度","算法","左下角","要","单个","可以","行为","位置","描述符","包","(","四个","我们","自然","说明","实时处理","完成","要求","分成","有","后续","这样","起来","运用","下","的","中将","价值","神经网","对于","下角","之前","中","类"],"title":"目标检测原理","title_tokens":["检测","原理","目标"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#mipi","text":"接下来，我们要利用MIPI相机，动态识别图像中各种各样的物体以及他们所在的位置，推理过程使用的是基于COCO数据集训练的80个类别，也就是可以识别80种常用的物体位置。","text_tokens":["要","过程","。","他们","可以","mipi","相机","位置","种","常用","识别","接下","物体","我们","各种","使用","就是","图像","是","下来","所在","各种各样","80","集","推理","基于","个","动态","也","以及","的","利用","训练","类别","各样","coco","，","中","数据","接下来"],"title":"MIPI相机目标检测","title_tokens":["相机","mipi","检测","目标"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_3","text":"$ cd /app/ai_inference/03_mipi_camera_sample/ $ python3 ./mipi_camera.py","text_tokens":["ai","_","cd","03","py","camera","inference","/"," ","mipi","sample",".","app","python3","$"],"title":"运行例程","title_tokens":["例程","运行"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_4","text":"mipi_camera.py： #!/usr/bin/env python3 import numpy as np import cv2 import colorsys # Camera API libs from hobot_vio import libsrcampy as srcampy from hobot_dnn import pyeasy_dnn as dnn # detection model class names def get_classes (): return np . array ([ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" , \"bus\" , \"train\" , \"truck\" , \"boat\" , \"traffic light\" , \"fire hydrant\" , \"stop sign\" , \"parking meter\" , \"bench\" , \"bird\" , \"cat\" , \"dog\" , \"horse\" , \"sheep\" , \"cow\" , \"elephant\" , \"bear\" , \"zebra\" , \"giraffe\" , \"backpack\" , \"umbrella\" , \"handbag\" , \"tie\" , \"suitcase\" , \"frisbee\" , \"skis\" , \"snowboard\" , \"sports ball\" , \"kite\" , \"baseball bat\" , \"baseball glove\" , \"skateboard\" , \"surfboard\" , \"tennis racket\" , \"bottle\" , \"wine glass\" , \"cup\" , \"fork\" , \"knife\" , \"spoon\" , \"bowl\" , \"banana\" , \"apple\" , \"sandwich\" , \"orange\" , \"broccoli\" , \"carrot\" , \"hot dog\" , \"pizza\" , \"donut\" , \"cake\" , \"chair\" , \"couch\" , \"potted plant\" , \"bed\" , \"dining table\" , \"toilet\" , \"tv\" , \"laptop\" , \"mouse\" , \"remote\" , \"keyboard\" , \"cell phone\" , \"microwave\" , \"oven\" , \"toaster\" , \"sink\" , \"refrigerator\" , \"book\" , \"clock\" , \"vase\" , \"scissors\" , \"teddy bear\" , \"hair drier\" , \"toothbrush\" ]) def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_RGB2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] def postprocess ( model_output , model_hw_shape , origin_image = None , origin_img_shape = None , score_threshold = 0.5 , nms_threshold = 0.6 , dump_image = False ): input_height = model_hw_shape [ 0 ] input_width = model_hw_shape [ 1 ] if origin_image is not None : origin_image_shape = origin_image . shape [ 0 : 2 ] else : origin_image_shape = origin_img_shape prediction_bbox = decode ( outputs = model_output , score_threshold = score_threshold , origin_shape = origin_image_shape , input_size = 512 ) prediction_bbox = nms ( prediction_bbox , iou_threshold = nms_threshold ) prediction_bbox = np . array ( prediction_bbox ) topk = min ( prediction_bbox . shape [ 0 ], 1000 ) if topk != 0 : idx = np . argpartition ( prediction_bbox [ ... , 4 ], - topk )[ - topk :] prediction_bbox = prediction_bbox [ idx ] if dump_image and origin_image is not None : draw_bboxs ( origin_image , prediction_bbox ) return prediction_bbox def draw_bboxs ( image , bboxes , gt_classes_index = None , classes = get_classes ()): \"\"\"draw the bboxes in the original image \"\"\" num_classes = len ( classes ) image_h , image_w , channel = image . shape hsv_tuples = [( 1.0 * x / num_classes , 1. , 1. ) for x in range ( num_classes )] colors = list ( map ( lambda x : colorsys . hsv_to_rgb ( * x ), hsv_tuples )) colors = list ( map ( lambda x : ( int ( x [ 0 ] * 255 ), int ( x [ 1 ] * 255 ), int ( x [ 2 ] * 255 )), colors )) fontScale = 0.5 bbox_thick = int ( 0.6 * ( image_h + image_w ) / 600 ) for i , bbox in enumerate ( bboxes ): coor = np . array ( bbox [: 4 ], dtype = np . int32 ) if gt_classes_index == None : class_index = int ( bbox [ 5 ]) score = bbox [ 4 ] else : class_index = gt_classes_index [ i ] score = 1 bbox_color = colors [ class_index ] c1 , c2 = ( coor [ 0 ], coor [ 1 ]), ( coor [ 2 ], coor [ 3 ]) cv2 . rectangle ( image , c1 , c2 , bbox_color , bbox_thick ) classes_name = classes [ class_index ] bbox_mess = ' %s : %.2f ' % ( classes_name , score ) t_size = cv2 . getTextSize ( bbox_mess , 0 , fontScale , thickness = bbox_thick // 2 )[ 0 ] cv2 . rectangle ( image , c1 , ( c1 [ 0 ] + t_size [ 0 ], c1 [ 1 ] - t_size [ 1 ] - 3 ), bbox_color , - 1 ) cv2 . putText ( image , bbox_mess , ( c1 [ 0 ], c1 [ 1 ] - 2 ), cv2 . FONT_HERSHEY_SIMPLEX , fontScale , ( 0 , 0 , 0 ), bbox_thick // 2 , lineType = cv2 . LINE_AA ) print ( \" {} is in the picture with confidence: {:.4f} , bbox: {} \" . format ( classes_name , score , coor )) # cv2.imwrite(\"demo.jpg\", image) return image def decode ( outputs , score_threshold , origin_shape , input_size = 512 ): def _distance2bbox ( points , distance ): x1 = points [ ... , 0 ] - distance [ ... , 0 ] y1 = points [ ... , 1 ] - distance [ ... , 1 ] x2 = points [ ... , 0 ] + distance [ ... , 2 ] y2 = points [ ... , 1 ] + distance [ ... , 3 ] return np . stack ([ x1 , y1 , x2 , y2 ], - 1 ) def _scores ( cls , ce ): cls = 1 / ( 1 + np . exp ( - cls )) ce = 1 / ( 1 + np . exp ( - ce )) return np . sqrt ( ce * cls ) def _bbox ( bbox , stride , origin_shape , input_size ): h , w = bbox . shape [ 1 : 3 ] yv , xv = np . meshgrid ( np . arange ( h ), np . arange ( w )) xy = ( np . stack (( yv , xv ), 2 ) + 0.5 ) * stride bbox = _distance2bbox ( xy , bbox ) # opencv read, shape[1] is w, shape[0] is h scale_w = origin_shape [ 1 ] / input_size scale_h = origin_shape [ 0 ] / input_size scale = max ( origin_shape [ 0 ], origin_shape [ 1 ]) / input_size # origin img is pad resized #bbox = bbox * scale # origin img is resized bbox = bbox * [ scale_w , scale_h , scale_w , scale_h ] return bbox bboxes = list () strides = [ 8 , 16 , 32 , 64 , 128 ] for i in range ( len ( strides )): cls = outputs [ i ] . buffer bbox = outputs [ i + 5 ] . buffer ce = outputs [ i + 10 ] . buffer scores = _scores ( cls , ce ) classes = np . argmax ( scores , axis =- 1 ) classes = np . reshape ( classes , [ - 1 , 1 ]) max_score = np . max ( scores , axis =- 1 ) max_score = np . reshape ( max_score , [ - 1 , 1 ]) bbox = _bbox ( bbox , strides [ i ], origin_shape , input_size ) bbox = np . reshape ( bbox , [ - 1 , 4 ]) pred_bbox = np . concatenate ([ bbox , max_score , classes ], axis = 1 ) index = pred_bbox [ ... , 4 ] > score_threshold pred_bbox = pred_bbox [ index ] bboxes . append ( pred_bbox ) return np . concatenate ( bboxes ) def nms ( bboxes , iou_threshold , sigma = 0.3 , method = 'nms' ): def bboxes_iou ( boxes1 , boxes2 ): boxes1 = np . array ( boxes1 ) boxes2 = np . array ( boxes2 ) boxes1_area = ( boxes1 [ ... , 2 ] - boxes1 [ ... , 0 ]) * \\ ( boxes1 [ ... , 3 ] - boxes1 [ ... , 1 ]) boxes2_area = ( boxes2 [ ... , 2 ] - boxes2 [ ... , 0 ]) * \\ ( boxes2 [ ... , 3 ] - boxes2 [ ... , 1 ]) left_up = np . maximum ( boxes1 [ ... , : 2 ], boxes2 [ ... , : 2 ]) right_down = np . minimum ( boxes1 [ ... , 2 :], boxes2 [ ... , 2 :]) inter_section = np . maximum ( right_down - left_up , 0.0 ) inter_area = inter_section [ ... , 0 ] * inter_section [ ... , 1 ] union_area = boxes1_area + boxes2_area - inter_area ious = np . maximum ( 1.0 * inter_area / union_area , np . finfo ( np . float32 ) . eps ) return ious classes_in_img = list ( set ( bboxes [:, 5 ])) best_bboxes = [] for cls in classes_in_img : cls_mask = ( bboxes [:, 5 ] == cls ) cls_bboxes = bboxes [ cls_mask ] while len ( cls_bboxes ) > 0 : max_ind = np . argmax ( cls_bboxes [:, 4 ]) best_bbox = cls_bboxes [ max_ind ] best_bboxes . append ( best_bbox ) cls_bboxes = np . concatenate ( [ cls_bboxes [: max_ind ], cls_bboxes [ max_ind + 1 :]]) iou = bboxes_iou ( best_bbox [ np . newaxis , : 4 ], cls_bboxes [:, : 4 ]) weight = np . ones (( len ( iou ),), dtype = np . float32 ) assert method in [ 'nms' , 'soft-nms' ] if method == 'nms' : iou_mask = iou > iou_threshold weight [ iou_mask ] = 0.0 if method == 'soft-nms' : weight = np . exp ( - ( 1.0 * iou ** 2 / sigma )) cls_bboxes [:, 4 ] = cls_bboxes [:, 4 ] * weight score_mask = cls_bboxes [:, 4 ] > 0. cls_bboxes = cls_bboxes [ score_mask ] return best_bboxes def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) if __name__ == '__main__' : models = dnn . load ( '../models/fcos_512x512_nv12.bin' ) # 打印输入 tensor 的属性 print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) # 打印输出 tensor 的属性 print ( len ( models [ 0 ] . outputs )) for output in models [ 0 ] . outputs : print_properties ( output . properties ) # 获取 Camera 句柄 cam = srcampy . Camera () # 打开 f37 摄像头，并且把输出突出缩小成算法模型的输入尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) # 打开 F37, 初始化视频 pipeline 0 ，设置帧率30fps，缩放图像为 512 x 512 cam . open_cam ( 0 , 1 , 30 , w , h ) # Get HDMI display object disp = srcampy . Display () # For the meaning of parameters, please refer to the relevant documents of HDMI display disp . display ( 0 , 1920 , 1080 ) input_shape = ( h , w ) while True : # 从相机获取分辨率为 512x512 的nv12格式的图像数据， 参数 2 代表从硬件模块IPU中获取 img = cam . get_img ( 2 , 512 , 512 ) # 把图像数据转成 numpy 数据类型 img = np . frombuffer ( img , dtype = np . uint8 ) # 模型推理 outputs = models [ 0 ] . forward ( img ) # 对算法结果进行过滤，去掉执行度低的检测框，计算检测框的交并比去除冗余框，把检测框的坐标还原到原图位置上 prediction_bbox = postprocess ( outputs , input_shape , origin_img_shape = ( 1080 , 1920 )) # 从新获取一张图像，大小缩放成与显示器的分辨率一样的 1920 x 1080, 并且转换成 bgr格式，方便进行绘图操作 origin_image = cam . get_img ( 2 , 1920 , 1080 ) origin_nv12 = np . frombuffer ( origin_image , dtype = np . uint8 ) . reshape ( 1620 , 1920 ) origin_bgr = cv2 . cvtColor ( origin_nv12 , cv2 . COLOR_YUV420SP2BGR ) # 把算法运行后得到的物体检测框绘制到图像上 box_bgr = draw_bboxs ( origin_bgr , prediction_bbox ) # X3 的HDMI输出模块的输入图像格式需要是NV12的，所以需要先把bgr格式转成NV12 box_nv12 = bgr2nv12_opencv ( box_bgr ) # 把 NV12 格式的图像输出给显示器 disp . set_img ( box_nv12 . tobytes ()) cam . close_cam ()","text_tokens":["detection","and","还原","进行","[","relevant","argmax","threshold","finfo","couch","idx","thick","knife","0.5","hsv","points","array","index","stride","64","surfboard","：","method","dnn","left","转换成","bbox","\\","list","换成","type","light","2","name","input","close","reshape","refer","libs","摄像","给","api","hobot","bboxs","section","bear","类型","uv","所以","句柄","4","rectangle","是",",","打开",">","8","main","2f","dump","bgr","数据类型","python3","mouse","vase","racket","ball","\"","bottle","original",":","concatenate","1620","bicycle","gt",")","框","giraffe","display","参数","inter","import","y2"," ","glove","获取","is","255","低","image","缩小成","推理","boxes2","parameters","disp","上","int","classes","get","_","to","sigma","assert","10","ious","person","linetype","{","(","x2","format","decode",".","drier","30fps","输出模块","w","hdmi","rgb","def","please","maximum","elephant","fork","i420","cam","中","数据","font","ones","umbrella","false","结果","frombuffer","chair","cup","成","yuv420sp2bgr","from","the","microwave","argpartition","512x512","meaning","输入","运行","物体","srcampy","ipu","object","冗余","colors","colorsys","4f","检测","height","train","clock","for","inputs","'","orange","cls","parking","scale","tie","sqrt","__","交","glass","cv2","down","ind","%","i","1000","600","newaxis","draw","names","坐标","从","代表","大小","!","帧","方便","*","分辨率","hydrant","while","int32","buffer","set","bed","bat","mess","sports","执行","ce","size","data","toothbrush","meter","过滤","t","+","x","30","pred","potted","sink","weight","像头","模块","32","len","box","minimum","width","range","并且","confidence","bgr2nv12","度","算法","属性","pyeasy","mipi","位置","vio","not","score","需要","soft","else","缩小","strides","py","camera","output","显示器","x1","append","banana","图像格式","best","dog","exp","}","%.","去掉","fcos","bowl","numpy","suitcase","c1","fire","后","zeros","nms","skis","stack","0.3","apple","dining","cow","model","table","arange","tobytes","=","prediction","origin","traffic","donut","wine","s","backpack","line","并","比","meshgrid","pro","postprocess","aa","1080","phone","mask","xy","计算","率","class","img","toilet","yv","horse","辨率","refrigerator","hw","摄像头","gettextsize","sign","puttext","转成","motorcycle","pad","libsrcampy","enumerate","open","properties","boxes1","broccoli","thickness","尺寸","tennis","num","...","pipeline","packed","shape","tensor","设置","in","hershey","teddy","carrot","right","float32","like","把","union","picture","kite","frisbee","tuples","5","0.0","绘制","一样","color","绘图","0.6","x3","read","usr","到","#","去除","eps","uint8","none","f37","y1","h","]","handbag","fontscale","的","zebra","先","lambda","models","demo","env","print","/","sheep","if","初始","cvtcolor","jpg","keyboard","nv12","map","转","scores","为","，","max","3","小成","cat","hot","area","原图","simplex","与","laptop","true","layout","..","min","新","突出","spoon","rgb2yuv","对","car","planar","scissors","1.0","boat","得到","np","topk","分辨","bench","一张","with","1920","outputs","hair","xv","cake","skateboard","coor","truck","0","dtype","of","bus","baseball","显示","nchw","oven","iou","toaster","128","as","1","bboxes","图像","16","axis","opencv","-","forward","resized","bin","y","distance","remote","sandwich","512","缩放","硬件","视频","转换","imwrite","格式","bird","book","transpose","相机","打印","初始化","return","模型","snowboard","plant","c2","yuv420p","up","pizza","输出","tv","load","airplane","操作","cell","channel","stop","documents","打印输出","distance2bbox"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#usb","text":"如果大家手上没有MIPI接口的相机，使用USB相机也可以实现同样的功能。","text_tokens":["功能","。","实现","大家","可以","，","使用","mipi","如果","接口","没有","的","相机","usb","手上","也","同样"],"title":"USB相机目标检测","title_tokens":["usb","相机","检测","目标"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_5","text":"$ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py","text_tokens":["ai","_","cd","python3","py","camera","inference","/"," ","sample",".","app","usb","$","fcos","02"],"title":"运行例程","title_tokens":["例程","运行"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_6","text":"大家如果没有HDMI显示器的话，也没有问题，刚才的例程，也可以这样来运行，我们通过统一网络环境中的浏览器就可以动态看到结果啦。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/fcosworkconfig.json image_width: = 480 image_height: = 272","text_tokens":["source","结果","环境","node","运行","/","$","=","config","dnn","动态","272","webserver","height","就","tros","，","通过","没有","的话","p","刚才","file","hobot","json","fcosworkconfig","480","问题","share","看到","也","example","ros2","cd","websocket","cp","opt","bash","。","显示","网络",":","&&","webservice","+","x"," ","launch","例程","啦","image","chmod","setup","大家","-","runtime","#","width","如果","统一","_","nginx","可以","浏览","我们","lib","sbin",".","启动","py","hdmi","r","显示器","服务","这样","的","来","中","benchmark","浏览器"],"title":"动态目标检测","title_tokens":["检测","动态","目标"]},{"location":"hhp/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/","text":"人体检测与跟踪 不知道大家有没有玩过类似XBOX的体感游戏机，上边会有一个相机，动态识别我们的动作，比如跳舞、打球，是不是还挺神奇的，这就是人体检测与跟踪的应用。 TogetherROS中也集成了一套类似的算法，可以识别人体、人头、人脸、人手等一系列关键点，我们来体验一下。 编程开发方法 先来看一个人体识别的基础应用，我们驱动相机后，实时采样视觉信息，然后再通过检测算法，识别每一幅图片中人体位置，并把识别的结果保存成一张图片，便于我们查看。 运行例程 # 下载例程代码（与之前课程下载的代码一致） $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build # 终端1，运行相机 $ source /opt/tros/setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p out_format: = nv12 -p image_width: = 960 -p image_height: = 544 -p video_device: = F37 # 终端2，运行例程 $ source /opt/tros/setup.bash $ source ./install/local_setup.bash $ mkdir -p config && cp -r /opt/tros/lib/dnn_node_example/config/multitask_body_kps_960x544.hbm config/ $ ros2 run cpp_dnn_demo cpp_dnn_demo --ros-args -p image: = config/test.jpg 代码解析 #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" #include \"dnn_node/dnn_node.h\" #include \"dnn_node/util/image_proc.h\" #include \"sensor_msgs/msg/image.hpp\" using namespace hobot :: dnn_node ; class BodyDetNode : public DnnNode { public : BodyDetNode ( const std :: string & node_name = \"body_det\" , const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : DnnNode ( node_name , options ) { // 获取模型输入图片的尺寸，包括图片的宽model_input_width_和高model_input_height ，用于模型前处理 if ( Init () != 0 || GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ) < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Node init fail!\" ); } //创建图片消息的subscriber，订阅的topic为”/image_raw”，消息类型为sensor_msgs::msg::Image。订阅到的图片用于算法模型推理 ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( \"/image_raw\" , 10 , std :: bind ( & BodyDetNode :: FeedImg , this , std :: placeholders :: _1 )); } ~ BodyDetNode () override {} void FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr msg ); protected : int SetNodePara () override { if ( ! dnn_node_para_ptr_ ) return -1 ; //指定模型推理使用的模型文件名和模型名 dnn_node_para_ptr_ -> model_file = \"config/multitask_body_kps_960x544.hbm\" ; dnn_node_para_ptr_ -> model_name = \"multitask_body_kps_960x544\" ; //指定模型输出的人体框的解析方法，其中人体框输出索引为box_output_index_ //使用的解析方法为hobot_dnn预定义的检测框解析方法FaceHandDetectionOutputParser。 std :: shared_ptr < OutputParser > box_out_parser = std :: make_shared < FaceHandDetectionOutputParser > (); dnn_node_para_ptr_ -> output_parsers_ . emplace_back ( std :: make_pair ( box_output_index_ , box_out_parser ) ); return 0 ; } int PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) override ; private : int model_input_width_ = -1 ; int model_input_height_ = -1 ; const int32_t box_output_index_ = 1 ; sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg_ ; rclcpp :: Subscription < sensor_msgs :: msg :: Image >:: ConstSharedPtr ros_img_subscription_ = nullptr ; }; //输出模型结果，并将结果渲染到图片后保存在本地 int BodyDetNode::PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( node_output -> outputs . empty () || static_cast < int32_t > ( node_output -> outputs . size ()) < box_output_index_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid outputs\" ); return -1 ; } auto * filter2d_result = dynamic_cast < Filter2DResult *> ( node_output -> outputs [ box_output_index_ ]. get ()); if ( ! filter2d_result ) return -1 ; std :: stringstream ss ; ss << \"img encoding: \" << img_msg_ -> encoding << \", stamp: \" << img_msg_ -> header . stamp . sec << \",\" << img_msg_ -> header . stamp . nanosec << \" \\n out box size: \" << filter2d_result -> boxes . size () << \" \\n \" ; cv :: Mat nv12 ( img_msg_ -> height * 3 / 2 , img_msg_ -> width , CV_8UC1 , const_cast < char *> ( reinterpret_cast < const char *> ( img_msg_ -> data . data ()))); cv :: Mat bgr ; cv :: cvtColor ( nv12 , bgr , CV_YUV2BGR_NV12 ); for ( auto & rect : filter2d_result -> boxes ) { ss << \"rect: \" << rect . left << \" \" << rect . top << \" \" << rect . right << \" \" << rect . bottom << \" \\n \" ; // 图片渲染 cv :: rectangle ( bgr , cv :: Point ( rect . left , rect . top ), cv :: Point ( rect . right , rect . bottom ), cv :: Scalar ( 255 , 0 , 0 ), 3 ); } std :: string result_image = \"render_\" + std :: to_string ( img_msg_ -> header . stamp . sec ) + \".\" + std :: to_string ( img_msg_ -> header . stamp . nanosec ) + \".jpg\" ; ss << \"Render img to file: \" << result_image ; RCLCPP_INFO ( rclcpp :: get_logger ( \"example\" ), \"%s\" , ss . str (). c_str ()); cv :: imwrite ( result_image , bgr ); return 0 ; } //将nv12格式的图片转成模型输入的数据类型DNNInput后，输入给推理任务 void BodyDetNode::FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg ) return ; if ( \"nv12\" != img_msg -> encoding ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Only support nv12 img encoding!\" ); return ; } img_msg_ = img_msg ; // 创建模型输入数据 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { ImageProc :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ )}; // 运行推理，DnnNode基类中定义并实现的启动推理接口。 Run ( inputs ); } int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < BodyDetNode > ()); rclcpp :: shutdown (); return 0 ; } 人体检测与跟踪 结果保存成图片，虽然便于保留数据，但是不利于动态看到效果，我们不如再来实时动态效果显示。 在这个案例中，我们在之前人体识别的基础上，进一步实现了人体部位的识别和骨骼、眼神等关键点的识别，比如头、脸、身体、手掌、眼睛。 识别的结果同样是通过浏览器来进行查看。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . $ ros2 launch /opt/tros/share/mono2d_body_detection/launch/hobot_mono2d_body_detection.launch.py","text_tokens":["detection","only","知道","进行","guyuehome","[","等","xbox","node","n","init","cpp","argv","$","index","subscriber","进一步","left","dnn","\\","定义","encoding","back","将","解析","2","std","name","input","一系列","然后","给","hobot","nodeoptions","bottom","处理","高","nullptr","类型","人手","一幅","rectangle","是","namespace","玩过","实现",",",">","make","有没有","main","眼睛","websocket","编程","bgr","ws","facehanddetectionoutputparser","msg","数据类型","create","pair","这个","det","\"","src",":","同样","保存","install","cv","parsers",")","框","colcon","）","body"," ","获取","tutorials","视觉","255","采样","image","dynamic","上边","core","推理","上","int","get",";","_","人体","to","10","打球","rect","终端","~","人脸","神奇","{","hpp","(","lib","format",".","一系","再","游戏机","msgs","&","clone","build","topic","spin","眼神","cam","中","数据","结果","虽然","挺","了","ss","成","invalid","输入","运行","关键","<","stamp","getnv12pyramidfromnv12img","header","proc","”","动态效果","系列","argc","检测","height","for","inputs","ros","setnodepara","file","和","void","%","dnnnode","share","还","mkdir","!","imageproc","基类","example","关键点","*","ros2","下载","int32","在","不是","opencv2","课程","cp","stringstream","size","data","&&","t","webservice","+","x","义","使用","bodydetnode","8uc1","options","shutdown","using","box","width","constsharedptr","手掌","auto","算法","imgcodecs","placeholders","会","位置","mipi","outputparser","跟踪","mat","https","sec","fail","我们","gitee","const","emplace","开发方法","sbin","部位","py","info","有","output","r","服务","public","不如","feedimg","便于","}","其中","static","后","util","接口","就是","model","不利","para","用于","--","=","方法","任务","动态","run","webserver","c","tros","一套","s","并","通过","没有","com","文件","git","960x544","postprocess","体感","p","信息","但是","每","比如","class","img","dnnnodeoutput","游戏","也","骨骼","应用","device","dnninput","raw","是不是","args","尺寸","。","实时","right","把","userdata","人头","身体","imgproc","一个","chmod","setup","大家","动作","宽","filter2d","开发","|","到","#","local","包括","544","string","利于","名","boxes","头","rclcpp","char","f37","h","vector","]","一步","的","include","跳舞","先","logger","reinterpret","预定","multitask","str","source","protected","demo","前","getmodelinputsize","ptr","render","sensor","、","hbm","/","集成","if","private","cvtcolor","out","代码","nanosec","jpg","config","图片","nv12","效果","转","案例","查看","为","指定","scalar","，","这","3","来看","脸","类似","基础","与","dev","本地","top","point","看到","文件名","消息","不利于","一张","cd","outputs","0","opt","togetherros","bash","创建","渲染","显示","yuv2bgr","mono2d","识别","error","launch","1","例程","empty","filter2dresult","shared","video","-","一致","kps","bind","imwrite","cast","格式","nginx","驱动","可以","相机","test","浏览","return","模型","保留","一下","this","subscription","体验","启动","输出","索引","（","960","订阅","override","parser","support","result","不","来","之前","浏览器"],"title":"人体检测与跟踪","title_tokens":["跟踪","人体","与","检测"]},{"location":"hhp/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_1","text":"不知道大家有没有玩过类似XBOX的体感游戏机，上边会有一个相机，动态识别我们的动作，比如跳舞、打球，是不是还挺神奇的，这就是人体检测与跟踪的应用。 TogetherROS中也集成了一套类似的算法，可以识别人体、人头、人脸、人手等一系列关键点，我们来体验一下。","text_tokens":["togetherros","人体","算法","。","体感","挺","了","知道","类似","一系列","可以","会","打球","相机","等","跟踪","xbox","与","人脸","比如","神奇","、","识别","关键","我们","一下","集成"," ","就是","人头","体验","还","人手","一系","有","玩过","上边","一个","大家","游戏机","游戏","也","动态","系列","动作","的","应用","检测","关键点","跳舞","不","有没有","一套","来","不是","，","中","是不是","没有","这"],"title":"人体检测与跟踪","title_tokens":["跟踪","人体","与","检测"]},{"location":"hhp/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_2","text":"先来看一个人体识别的基础应用，我们驱动相机后，实时采样视觉信息，然后再通过检测算法，识别每一幅图片中人体位置，并把识别的结果保存成一张图片，便于我们查看。","text_tokens":["人体","算法","来看","结果","驱动","。","然后","后","信息","成","基础","相机","位置","每","实时","保存","识别","我们","把","一幅","视觉","采样","一个","再","图片","的","应用","检测","先","一张","查看","，","中","通过","并","便于"],"title":"编程开发方法","title_tokens":["开发","开发方法","方法","编程"]},{"location":"hhp/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_3","text":"# 下载例程代码（与之前课程下载的代码一致） $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build # 终端1，运行相机 $ source /opt/tros/setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p out_format: = nv12 -p image_width: = 960 -p image_height: = 544 -p video_device: = F37 # 终端2，运行例程 $ source /opt/tros/setup.bash $ source ./install/local_setup.bash $ mkdir -p config && cp -r /opt/tros/lib/dnn_node_example/config/multitask_body_kps_960x544.hbm config/ $ ros2 run cpp_dnn_demo cpp_dnn_demo --ros-args -p image: = config/test.jpg","text_tokens":["source","guyuehome","demo","node","运行","hbm","cpp","/","$","out","代码","--","=","jpg","config","nv12","dnn","run","height","tros","，","2","com","git","ros","960x544","p","与","dev","mkdir","example","ros2","device","下载","cd","ws","args","课程","cp","opt","togetherros","bash","src",":","&&","install","colcon","）","body"," ","userdata","tutorials","1","例程","image","setup","video","-","一致","#","width","local","kps","544","_","相机","mipi","test","https","终端","f37","gitee","lib","format",".","（","960","r","的","clone","build","之前","cam","multitask"],"title":"运行例程","title_tokens":["例程","运行"]},{"location":"hhp/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_4","text":"#include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" #include \"dnn_node/dnn_node.h\" #include \"dnn_node/util/image_proc.h\" #include \"sensor_msgs/msg/image.hpp\" using namespace hobot :: dnn_node ; class BodyDetNode : public DnnNode { public : BodyDetNode ( const std :: string & node_name = \"body_det\" , const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : DnnNode ( node_name , options ) { // 获取模型输入图片的尺寸，包括图片的宽model_input_width_和高model_input_height ，用于模型前处理 if ( Init () != 0 || GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ) < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Node init fail!\" ); } //创建图片消息的subscriber，订阅的topic为”/image_raw”，消息类型为sensor_msgs::msg::Image。订阅到的图片用于算法模型推理 ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( \"/image_raw\" , 10 , std :: bind ( & BodyDetNode :: FeedImg , this , std :: placeholders :: _1 )); } ~ BodyDetNode () override {} void FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr msg ); protected : int SetNodePara () override { if ( ! dnn_node_para_ptr_ ) return -1 ; //指定模型推理使用的模型文件名和模型名 dnn_node_para_ptr_ -> model_file = \"config/multitask_body_kps_960x544.hbm\" ; dnn_node_para_ptr_ -> model_name = \"multitask_body_kps_960x544\" ; //指定模型输出的人体框的解析方法，其中人体框输出索引为box_output_index_ //使用的解析方法为hobot_dnn预定义的检测框解析方法FaceHandDetectionOutputParser。 std :: shared_ptr < OutputParser > box_out_parser = std :: make_shared < FaceHandDetectionOutputParser > (); dnn_node_para_ptr_ -> output_parsers_ . emplace_back ( std :: make_pair ( box_output_index_ , box_out_parser ) ); return 0 ; } int PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) override ; private : int model_input_width_ = -1 ; int model_input_height_ = -1 ; const int32_t box_output_index_ = 1 ; sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg_ ; rclcpp :: Subscription < sensor_msgs :: msg :: Image >:: ConstSharedPtr ros_img_subscription_ = nullptr ; }; //输出模型结果，并将结果渲染到图片后保存在本地 int BodyDetNode::PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( node_output -> outputs . empty () || static_cast < int32_t > ( node_output -> outputs . size ()) < box_output_index_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid outputs\" ); return -1 ; } auto * filter2d_result = dynamic_cast < Filter2DResult *> ( node_output -> outputs [ box_output_index_ ]. get ()); if ( ! filter2d_result ) return -1 ; std :: stringstream ss ; ss << \"img encoding: \" << img_msg_ -> encoding << \", stamp: \" << img_msg_ -> header . stamp . sec << \",\" << img_msg_ -> header . stamp . nanosec << \" \\n out box size: \" << filter2d_result -> boxes . size () << \" \\n \" ; cv :: Mat nv12 ( img_msg_ -> height * 3 / 2 , img_msg_ -> width , CV_8UC1 , const_cast < char *> ( reinterpret_cast < const char *> ( img_msg_ -> data . data ()))); cv :: Mat bgr ; cv :: cvtColor ( nv12 , bgr , CV_YUV2BGR_NV12 ); for ( auto & rect : filter2d_result -> boxes ) { ss << \"rect: \" << rect . left << \" \" << rect . top << \" \" << rect . right << \" \" << rect . bottom << \" \\n \" ; // 图片渲染 cv :: rectangle ( bgr , cv :: Point ( rect . left , rect . top ), cv :: Point ( rect . right , rect . bottom ), cv :: Scalar ( 255 , 0 , 0 ), 3 ); } std :: string result_image = \"render_\" + std :: to_string ( img_msg_ -> header . stamp . sec ) + \".\" + std :: to_string ( img_msg_ -> header . stamp . nanosec ) + \".jpg\" ; ss << \"Render img to file: \" << result_image ; RCLCPP_INFO ( rclcpp :: get_logger ( \"example\" ), \"%s\" , ss . str (). c_str ()); cv :: imwrite ( result_image , bgr ); return 0 ; } //将nv12格式的图片转成模型输入的数据类型DNNInput后，输入给推理任务 void BodyDetNode::FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg ) return ; if ( \"nv12\" != img_msg -> encoding ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Only support nv12 img encoding!\" ); return ; } img_msg_ = img_msg ; // 创建模型输入数据 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { ImageProc :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ )}; // 运行推理，DnnNode基类中定义并实现的启动推理接口。 Run ( inputs ); } int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < BodyDetNode > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["protected","结果","only","后","ss","util","[","成","接口","前","getmodelinputsize","ptr","invalid","sensor","render","输入","node","运行","n","init","<","/","hbm","stamp","if","header","getnv12pyramidfromnv12img","argv","private","model","cvtcolor","index","proc","subscriber","para","用于","out","nanosec","=","jpg","方法","config","图片","”","left","dnn","nv12","任务","argc","run","转","检测","height","\\","c","定义","encoding","back","为","指定","将","解析","scalar","s","，","std","并","2","for","inputs","文件","name","input","3","ros","960x544","postprocess","给","setnodepara","file","和","hobot","nodeoptions","本地","bottom","class","处理","高","void","img","nullptr","%","类型","top","point","dnnnode","rectangle","dnnnodeoutput","namespace","文件名","!","imageproc","实现",",","基类","example",">","*","消息","make","main","dnninput","int32","raw","在","outputs","bgr","facehanddetectionoutputparser","msg","opencv2","数据类型","尺寸","0","stringstream","create","pair","创建","。","det","渲染","size","data","\"","yuv2bgr",":","保存","cv","right","parsers",")","框","t","+","body","error","义"," ","获取","使用","1","bodydetnode","imgproc","empty","filter2dresult","8uc1","255","options","shared","image","dynamic","core","推理","-","shutdown","宽","using","|","filter2d","box","到","#","width","int","包括","kps","bind","imwrite","get",";","string","constsharedptr","cast","_","auto","人体","to","算法","格式","imgcodecs","10","placeholders","名","outputparser","rect","mat","boxes","~","sec","rclcpp","fail","char","return","数据","{","模型","hpp","(","this","h","const","subscription","emplace","vector",".","启动","]","输出","索引","info","output","订阅","override","public","parser","的","support","include","msgs","result","&","topic","spin","logger","reinterpret","预定","feedimg","中","}","其中","static","multitask","str"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_5","text":"结果保存成图片，虽然便于保留数据，但是不利于动态看到效果，我们不如再来实时动态效果显示。 在这个案例中，我们在之前人体识别的基础上，进一步实现了人体部位的识别和骨骼、眼神等关键点的识别，比如头、脸、身体、手掌、眼睛。 识别的结果同样是通过浏览器来进行查看。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . $ ros2 launch /opt/tros/share/mono2d_body_detection/launch/hobot_mono2d_body_detection.launch.py","text_tokens":["detection","source","结果","虽然","了","进行","成","等","、","运行","关键","/","$","不利","进一步","config","图片","动态效果","动态","效果","案例","webserver","tros","查看","，","通过","脸","p","基础","但是","和","hobot","比如","share","看到","是","实现","骨骼","关键点","不利于","ros2","cd","眼睛","websocket","在","cp","opt","bash","这个","。","显示","同样","&&","实时","保存","mono2d","识别","webservice","+","x","body"," ","launch","身体","例程","chmod","setup","-","上","#","手掌","_","人体","nginx","利于","浏览","头","保留","我们","lib","sbin",".","部位","启动","一步","py","r","再","服务","的","不如","来","眼神","之前","中","便于","数据","浏览器"],"title":"人体检测与跟踪","title_tokens":["跟踪","人体","与","检测"]},{"location":"hhp/5.7_%E5%8D%95%E7%9B%AE3D%E5%AE%A4%E5%86%85%E6%A3%80%E6%B5%8B/","text":"单目3D室内检测 接下来，我们继续学习物体 3D 检测算法。 机器人有时候不仅仅要识别出人，还要识别出房间里有什么东西，这就是室内物体 3D 检测啦。 在TogetherROS上，就集成了这样一套算法，接下来让我们一起来体验以下吧。 先来看一张图片，很明显大家可以看到图中有两个垃圾桶。 运行示例程序 # 配置ROS2环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。 $ cp -r /opt/tros/lib/mono3d_indoor_detection/config/ . # 启动launch文件 $ ros2 launch /opt/tros/share/mono3d_indoor_detection/launch/mono3d_indoor_detection.launch.py [ INFO ] [ 1654858490 .168592166 ] [ mono3d_detection ] : target type: trash_can [ INFO ] [ 1654858490 .168644750 ] [ mono3d_detection ] : target type: width, value: 236 .816406 [ INFO ] [ 1654858490 .168704333 ] [ mono3d_detection ] : target type: height, value: 305 .664062 [ INFO ] [ 1654858490 .168759584 ] [ mono3d_detection ] : target type: length, value: 224 .182129 [ INFO ] [ 1654858490 .168812334 ] [ mono3d_detection ] : target type: rotation, value: -1571.989179 [ INFO ] [ 1654858490 .168862543 ] [ mono3d_detection ] : target type: x, value: -191.977829 [ INFO ] [ 1654858490 .168916168 ] [ mono3d_detection ] : target type: y, value: -143.963307 [ INFO ] [ 1654858490 .168966502 ] [ mono3d_detection ] : target type: z, value: 714 .024127 [ INFO ] [ 1654858490 .169016794 ] [ mono3d_detection ] : target type: depth, value: 714 .024127 [ INFO ] [ 1654858490 .169067461 ] [ mono3d_detection ] : target type: score, value: 0 .973215 [ INFO ] [ 1654858490 .169168795 ] [ mono3d_detection ] : target type: trash_can [ INFO ] [ 1654858490 .169212837 ] [ mono3d_detection ] : target type: width, value: 253 .051758 [ INFO ] [ 1654858490 .169265004 ] [ mono3d_detection ] : target type: height, value: 282 .348633 [ INFO ] [ 1654858490 .169317046 ] [ mono3d_detection ] : target type: length, value: 257 .934570 [ INFO ] [ 1654858490 .169368921 ] [ mono3d_detection ] : target type: rotation, value: -1542.727947 [ INFO ] [ 1654858490 .169418671 ] [ mono3d_detection ] : target type: x, value: 552 .459776 [ INFO ] [ 1654858490 .169470588 ] [ mono3d_detection ] : target type: y, value: -164.073169 [ INFO ] [ 1654858490 .169517505 ] [ mono3d_detection ] : target type: z, value: 1088 .358164 [ INFO ] [ 1654858490 .169566839 ] [ mono3d_detection ] : target type: depth, value: 1088 .358164 [ INFO ] [ 1654858490 .169616464 ] [ mono3d_detection ] : target type: score, value: 0 .875521 很明显，已经识别到了两个垃圾桶。 代码解析 // Copyright (c) 2022，Horizon Robotics. // // Licensed under the Apache License, Version 2.0 (the \"License\"); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \"AS IS\" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. #include \"include/centernet_3d_detection_node.h\" #include <unistd.h> #include <fstream> #include <memory> #include <string> #include <vector> #include \"dnn_node/dnn_node.h\" #include \"include/image_utils.h\" #include \"rclcpp/rclcpp.hpp\" #include <sys/stat.h> #ifdef CV_BRIDGE_PKG_ENABLED #include <cv_bridge/cv_bridge.h> #endif using hobot :: easy_dnn :: OutputDescription ; using hobot :: easy_dnn :: OutputParser ; CenterNet3DDetectionNode :: CenterNet3DDetectionNode ( const std :: string & node_name , const NodeOptions & options ) : DnnNode ( node_name , options ), output_frameCount_ ( 0 ) { this -> declare_parameter < int > ( \"is_sync_mode\" , is_sync_mode_ ); this -> declare_parameter < std :: string > ( \"config_file_path\" , config_file_path_ ); this -> declare_parameter < int > ( \"shared_mem\" , shared_mem_ ); this -> declare_parameter < std :: string > ( \"ai_msg_pub_topic_name\" , msg_pub_topic_name_ ); this -> declare_parameter < std :: string > ( \"image_sub_topic_name\" , ros_img_topic_name_ ); this -> declare_parameter < std :: string > ( \"feed_image\" , feed_image_ ); this -> get_parameter < int > ( \"is_sync_mode\" , is_sync_mode_ ); this -> get_parameter < std :: string > ( \"config_file_path\" , config_file_path_ ); this -> get_parameter < int > ( \"shared_mem\" , shared_mem_ ); this -> get_parameter < std :: string > ( \"ai_msg_pub_topic_name\" , msg_pub_topic_name_ ); this -> get_parameter < std :: string > ( \"image_sub_topic_name\" , ros_img_topic_name_ ); this -> get_parameter < std :: string > ( \"feed_image\" , feed_image_ ); model_file_name_ = config_file_path_ + \"/centernet.hbm\" ; mkdir ( \"./result/\" , 666 ); std :: stringstream ss ; ss << \"Parameter:\" << \" \\n config_file_path_:\" << config_file_path_ << \" \\n shared_men:\" << shared_mem_ << \" \\n is_sync_mode_: \" << is_sync_mode_ << \" \\n model_file_name_: \" << model_file_name_ << \" \\n feed_image:\" << feed_image_ ; RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); if ( Start () == 0 ) { RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"start success!!!\" ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"start fail!!!\" ); } } CenterNet3DDetectionNode ::~ CenterNet3DDetectionNode () {} int CenterNet3DDetectionNode :: Start () { int ret = Init (); if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Init failed!\" ); return ret ; } ret = GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ); if ( ret < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get model input size fail!\" ); return ret ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"The model input width is %d and height is %d\" , model_input_width_ , model_input_height_ ); msg_publisher_ = this -> create_publisher < ai_msgs :: msg :: PerceptionTargets > ( msg_pub_topic_name_ , 10 ); RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"msg_pub_topic_name: %s\" , msg_pub_topic_name_ . data ()); if ( ! feed_image_ . empty ()) { std :: cout << \"mono3d read image:\" << feed_image_ << \" to detect\" << std :: endl ; PredictByImage ( feed_image_ ); return 0 ; } // RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Detect images that use subscriptions\" ); if ( shared_mem_ ) { #ifdef SHARED_MEM_ENABLED RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Create hbmem_subscription with topic_name: %s\" , sharedmem_img_topic_name_ . c_str ()); sharedmem_img_subscription_ = this -> create_subscription_hbmem < hbm_img_msgs :: msg :: HbmMsg1080P > ( sharedmem_img_topic_name_ , 10 , std :: bind ( & CenterNet3DDetectionNode :: SharedMemImgProcess , this , std :: placeholders :: _1 )); #else RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Unsupport shared mem\" ); #endif } else { RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Create subscription with topic_name: %s\" , ros_img_topic_name_ . c_str ()); ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( ros_img_topic_name_ , 10 , std :: bind ( & CenterNet3DDetectionNode :: RosImgProcess , this , std :: placeholders :: _1 )); } return 0 ; } int CenterNet3DDetectionNode :: SetNodePara () { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Set node para.\" ); if ( ! dnn_node_para_ptr_ ) { return -1 ; } dnn_node_para_ptr_ -> model_file = model_file_name_ ; dnn_node_para_ptr_ -> model_name = model_name_ ; dnn_node_para_ptr_ -> model_task_type = model_task_type_ ; dnn_node_para_ptr_ -> task_num = 1 ; return 0 ; } int CenterNet3DDetectionNode :: SetOutputParser () { // set output parser auto model_manage = GetModel (); if ( ! model_manage || ! dnn_node_para_ptr_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Invalid model\" ); return -1 ; } if ( model_manage -> GetOutputCount () < model_output_count_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Error! Model %s output count is %d, unmatch with count %d\" , dnn_node_para_ptr_ -> model_name . c_str (), model_manage -> GetOutputCount (), model_output_count_ ); return -1 ; } for ( int i = 0 ; i < output_index_ ; ++ i ) { std :: shared_ptr < OutputParser > assist_parser = std :: make_shared < CenterNet3DAssistParser > (); model_manage -> SetOutputParser ( i , assist_parser ); } // set 3D paser auto output_desc = std :: make_shared < OutputDescription > ( model_manage , output_index_ , \"3D_branch\" ); for ( int i = 0 ; i < output_index_ ; ++ i ) { output_desc -> GetDependencies (). push_back ( i ); } output_desc -> SetType ( \"3D\" ); model_manage -> SetOutputDescription ( output_desc ); std :: shared_ptr < OutputParser > out_parser = std :: make_shared < CenterNet3DOutputParser > ( config_file_path_ ); model_manage -> SetOutputParser ( output_index_ , out_parser ); return 0 ; } #define CV_DRAW_LINE(p0, p1) \\ cv::line(image, cv::Point(points[p0][0], points[p0][1]), \\ cv::Point(points[p1][0], points[p1][1]), \\ CV_RGB(0, 255, 0), 2); #define CV_PUT_TEXT(text, px, py, offset) \\ { double fontScale = 3.0l; int thickness = 3u, baseline; \\ cv::Size text_size = cv::getTextSize(text, \\ cv::HersheyFonts::FONT_HERSHEY_PLAIN, fontScale, thickness, &baseline); \\ cv::Point point(px , py); \\ point.y += offset;\\ cv::Rect rect(point.x, point.y, \\ text_size.width, text_size.height); \\ point.y += text_size.height;\\ offset += text_size.height;\\ cv::putText(image, text, point, \\ cv::HersheyFonts::FONT_HERSHEY_PLAIN, \\ fontScale, CV_RGB(0, 255, 128), thickness); } void Render3DBox ( const BBox3D & box , cv :: Mat & image ) { auto & points = box . corners2d_upscale ; CV_DRAW_LINE ( 0 , 1 ) CV_DRAW_LINE ( 0 , 3 ) CV_DRAW_LINE ( 0 , 4 ) CV_DRAW_LINE ( 1 , 2 ) CV_DRAW_LINE ( 1 , 5 ) CV_DRAW_LINE ( 2 , 3 ) CV_DRAW_LINE ( 2 , 6 ) CV_DRAW_LINE ( 3 , 7 ) CV_DRAW_LINE ( 4 , 5 ) CV_DRAW_LINE ( 4 , 7 ) CV_DRAW_LINE ( 5 , 6 ) CV_DRAW_LINE ( 6 , 7 ) std :: string box_type = std :: to_string ( box . class_label ); std :: string score = std :: to_string ( box . score ); int offset = 0 ; if ( - M_PI_2 <= box . r || box . r <= M_PI_2 ) { CV_PUT_TEXT ( box_type , points [ 7 ][ 0 ], points [ 7 ][ 1 ], offset ); CV_PUT_TEXT ( score , points [ 7 ][ 0 ], points [ 7 ][ 1 ], offset ); } else { CV_PUT_TEXT ( box_type , points [ 6 ][ 0 ], points [ 6 ][ 1 ], offset ); CV_PUT_TEXT ( score , points [ 6 ][ 0 ], points [ 6 ][ 1 ], offset ); } } int CenterNet3DDetectionNode :: PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( ! msg_publisher_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid msg_publisher_\" ); return -1 ; } struct timespec time_start = { 0 , 0 }; clock_gettime ( CLOCK_REALTIME , & time_start ); ai_msgs :: msg :: Perf perf ; perf . set__type ( \"PostProcess\" ); perf . stamp_start . sec = time_start . tv_sec ; perf . stamp_start . nanosec = time_start . tv_nsec ; auto centernet_3d_output = std :: dynamic_pointer_cast < CenterNet3DOutput > ( node_output ); if ( centernet_3d_output ) { std :: stringstream ss ; ss << \"3D output dection info\" ; if ( centernet_3d_output -> image_msg_header_ ) { ss << \", frame_id: \" << centernet_3d_output -> image_msg_header_ -> frame_id << \", stamp: \" << centernet_3d_output -> image_msg_header_ -> stamp . sec << \".\" << centernet_3d_output -> image_msg_header_ -> stamp . nanosec ; } RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); } const auto & outputs = node_output -> outputs ; RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"outputs size: %d\" , outputs . size ()); if ( outputs . empty () || static_cast < int32_t > ( outputs . size ()) < model_output_count_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Invalid outputs\" ); return -1 ; } int smart_fps = 0 ; { auto tp_now = std :: chrono :: system_clock :: now (); output_frameCount_ ++ ; auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - output_tp_ ) . count (); if ( interval >= 1000 ) { smart_fps = output_frameCount_ ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Smart fps = %d\" , smart_fps ); output_frameCount_ = 0 ; output_tp_ = std :: chrono :: system_clock :: now (); } } ai_msgs :: msg :: PerceptionTargets :: UniquePtr pub_data ( new ai_msgs :: msg :: PerceptionTargets ()); if ( centernet_3d_output -> image_msg_header_ ) { pub_data -> header . set__stamp ( centernet_3d_output -> image_msg_header_ -> stamp ); pub_data -> header . set__frame_id ( centernet_3d_output -> image_msg_header_ -> frame_id ); } pub_data -> set__fps ( smart_fps ); auto * det_result = dynamic_cast < CenterNet3DDetResult *> ( outputs [ output_index_ ]. get ()); if ( ! det_result ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"invalid cast\" ); } else { RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"out box size: %d\" , det_result -> boxes . size ()); std :: map < std :: string , ai_msgs :: msg :: Target > target_list ; std :: vector < ai_msgs :: msg :: Target > targets ; targets . reserve ( det_result -> boxes . size ()); for ( auto & box : det_result -> boxes ) { ai_msgs :: msg :: Target target ; switch ( box . class_label ) { case BBox3D :: CHARGING_BASE : target . type = \"charging_base\" ; break ; case BBox3D :: SLIPPER : target . type = \"slipper\" ; break ; case BBox3D :: TRASH_CAN : target . type = \"trash_can\" ; break ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s\" , target . type . c_str ()); ai_msgs :: msg :: Attribute attribute ; ai_msgs :: msg :: Point point ; attribute . type = \"width\" ; attribute . value = box . w * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"height\" ; attribute . value = box . h * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"length\" ; attribute . value = box . l * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"rotation\" ; attribute . value = box . r * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"x\" ; attribute . value = box . x * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"y\" ; attribute . value = box . y * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"z\" ; attribute . value = box . z * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"depth\" ; attribute . value = box . d * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"score\" ; attribute . value = box . score * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), box . score ); target . attributes . push_back ( attribute ); // 8 corners /* 4----------5 6----------7 /| /| /| /| / | / | / | / | / | / | / | / | 7---|------6 |5---|------4 | | | | || | | | | | | || | | | | 0------|---1| 2------|---3 | / | / | / | / | / ^ | / | / v | / |/ |/ |/ |/ 3----------2 1----------0 */ for ( const auto & corners : box . corners2d_upscale ) { geometry_msgs :: msg :: Point32 g_point ; g_point . x = corners [ 0 ]; g_point . y = corners [ 1 ]; point . point . push_back ( g_point ); } point . type = \"corners\" ; target . points . push_back ( point ); targets . push_back ( target ); } pub_data -> targets = std :: move ( targets ); if ( ! centernet_3d_output -> image_name_ . empty ()) { auto img_bgr = cv :: imread ( centernet_3d_output -> image_name_ ); for ( auto & box : det_result -> boxes ) { Render3DBox ( box , img_bgr ); } std :: string :: size_type iPos = centernet_3d_output -> image_name_ . find_last_of ( '/' ) + 1 ; std :: string filename = centernet_3d_output -> image_name_ . substr ( iPos , centernet_3d_output -> image_name_ . length () - iPos ); cv :: imwrite ( \"./result/\" + filename , img_bgr ); } } clock_gettime ( CLOCK_REALTIME , & time_start ); perf . stamp_end . sec = time_start . tv_sec ; perf . stamp_end . nanosec = time_start . tv_nsec ; pub_data -> perfs . emplace_back ( perf ); msg_publisher_ -> publish ( std :: move ( pub_data )); return 0 ; } int CenterNet3DDetectionNode :: Predict ( std :: vector < std :: shared_ptr < DNNInput >> & inputs , const std :: shared_ptr < std :: vector < hbDNNRoi >> rois , std :: shared_ptr < DnnNodeOutput > dnn_output ) { return Run ( inputs , dnn_output , rois , is_sync_mode_ == 1 ); } void CenterNet3DDetectionNode :: RosImgProcess ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg || ! rclcpp :: ok ()) { return ; } std :: stringstream ss ; ss << \"Recved img encoding: \" << img_msg -> encoding << \", h: \" << img_msg -> height << \", w: \" << img_msg -> width << \", step: \" << img_msg -> step << \", frame_id: \" << img_msg -> header . frame_id << \", stamp: \" << img_msg -> header . stamp . sec << \".\" << img_msg -> header . stamp . nanosec << \", data size: \" << img_msg -> data . size (); RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); auto tp_start = std :: chrono :: system_clock :: now (); // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; if ( \"rgb8\" == img_msg -> encoding ) { #ifdef CV_BRIDGE_PKG_ENABLED auto cv_img = cv_bridge :: cvtColorForDisplay ( cv_bridge :: toCvShare ( img_msg ), \"bgr8\" ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after cvtColorForDisplay cost ms: %d\" , interval ); } pyramid = ImageUtils :: GetNV12Pyramid ( cv_img -> image , model_input_height_ , model_input_width_ ); #else RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Unsupport cv bridge\" ); #endif } else if ( \"nv12\" == img_msg -> encoding ) { pyramid = ImageUtils :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ ); } if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail\" ); return ; } { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after GetNV12Pyramid cost ms: %d\" , interval ); } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Dnn node begin to predict\" ); // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = img_msg -> width ; dnn_output -> src_img_height_ = img_msg -> height ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( img_msg -> header . frame_id ); dnn_output -> image_msg_header_ -> set__stamp ( img_msg -> header . stamp ); dnn_output -> image_name_ = \"\" ; // 3. 开始预测 uint32_t ret = Predict ( inputs , nullptr , dnn_output ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after Predict cost ms: %d\" , interval ); } if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"predict img failed!\" ); } return ; } int CenterNet3DDetectionNode :: PredictByImage ( const std :: string & image ) { // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; // bgr img，支持将图片resize到模型输入size pyramid = ImageUtils :: GetNV12Pyramid ( image , ImageType :: BGR , model_input_height_ , model_input_width_ ); if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail with image: %s\" , image . c_str ()); return -1 ; } // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = 1920 ; dnn_output -> src_img_height_ = 1024 ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( \"test_frame\" ); dnn_output -> image_msg_header_ -> set__stamp ( rclcpp :: Time ()); dnn_output -> image_name_ = image ; // dnn_output->image_msg_header->set__frame_id(std::to_string(img_msg->index)); // dnn_output->image_msg_header->set__stamp(img_msg->time_stamp); // 3. 开始预测 uint32_t ret = Predict ( inputs , nullptr , dnn_output ); if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"predict img failed!\" ); } return ret ; } #ifdef SHARED_MEM_ENABLED void CenterNet3DDetectionNode :: SharedMemImgProcess ( const hbm_img_msgs :: msg :: HbmMsg1080P :: ConstSharedPtr img_msg ) { if ( ! img_msg || ! rclcpp :: ok ()) { return ; } RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"go into shared mem\" ); // dump recved img msg // std::ofstream ofs(\"img_\" + std::to_string(img_msg->index) + \".\" + // std::string(reinterpret_cast<const char*>(img_msg->encoding.data()))); // ofs.write(reinterpret_cast<const char*>(img_msg->data.data()), // img_msg->data_size); auto tp_start = std :: chrono :: system_clock :: now (); // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; if ( \"nv12\" == std :: string ( reinterpret_cast < const char *> ( img_msg -> encoding . data ()))) { pyramid = ImageUtils :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ ); } else { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"share mem unsupported img encoding: %s\" , img_msg -> encoding ); } if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail!\" ); return ; } { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after GetNV12Pyramid cost ms: %d\" , interval ); } // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = img_msg -> width ; dnn_output -> src_img_height_ = img_msg -> height ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( std :: to_string ( img_msg -> index )); dnn_output -> image_msg_header_ -> set__stamp ( img_msg -> time_stamp ); // 3. 开始预测 int ret = Predict ( inputs , nullptr , dnn_output ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after Predict cost ms: %d\" , interval ); } // 4. 处理预测结果，如渲染到图片或者发布预测结果 if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Run predict failed!\" ); } return ; } #endif","text_tokens":["detection","168966502","and","024127","[","after","东西","7","出人","an","node","n","init","points","$","index","writing","enabled","declare","发布","预测","dnn","point32","easy","\\","ai","centernet","图中","list","encoding","back","type","implied","将","875521","解析","settype","pointer","std","2","new","name","input","centernet3doutputparser","find","publisher","endl","setoutputdescription","两个","hobot","www","manage","nodeoptions","明显","处理","nullptr","sys","164.073169","类型","f","stat","不仅仅","4","sharedmem","169265004",",","hbdnnroi","trash","开始",">","8","make","bgr","作为","dump","msg","数据类型","see","室内","182129","create","attributes","dection","det","at","以下","对象","282","\"","src",":","that","men","程序","cv","last",")","paser","很"," ","runinfertask","垃圾","啦","z","is","id","255","169212837","start","image","dynamic","169616464","robotics","上","cvtcolorfordisplay","feed","unsupport","1088","int","chrono","get",";","cost","_","to","10","centernet3doutput","1542.727947","can","put","g","unless","required","rect","interval","~","{","now","hpp","(","^","unistd","lib",".","ms","学习","吧","render3dbox","w","path","rgb","milliseconds","pkg","仅仅","images","一","msgs","realtime","&","topic","value","示例","copyright","中","governing","数据","font","system","endif","copy","结果","环境","了","push","ss","success","成","the","让","invalid","on","begin","输入","px","uint32","运行","物体","257","<","define","stamp","fps","getnv12pyramidfromnv12img","header","time","459776","2022","p0","getdependencies","timespec","centernet3ddetresult","检测","height","就","upscale","tocvshare","clock","write","for","inputs","'","smart","ros","perf","__","setnodepara","file","168759584","------","void","接下","169016794","struct","714","%","i","1000","dnnnode","share","传入","draw","rosimgprocess","slipper","从","centernet3ddetectionnode","下来","mkdir","!","169418671","机器人","---","934570","warn","example","hbmmsg1080p","168862543","*","ros2","int32","在","base","reserve","cp","stringstream","set","有时候","168916168","size","publish","data","ofstream","路径","1571.989179","assist","getoutputcount","t","sync","geometry","+","x","agreed","使用","options","1024","ret","duration","double","using","pym","a","box","corners2d","org","width","detect","target","安装","constsharedptr","auto","step","将会","算法","要","applicable","unsupported","placeholders","outputparser","拷贝","may","mat","pyramid","sec","fail","not","score","substr","需要","我们","d","配置","license","const","emplace","168812334","else","move","py","info","有","output","r","imageutils","这样","时候","}","static","switch","imread","接口","getnv12pyramid","licensed","break","length","168592166","debug","就是","model","236","para","ifdef","except","=","run","c","targets","tros","kind","一套","s","line","通过","outputdescription","文件","permissions","里","setoutputparser","predict","postprocess","169368921","label","有时","without","191.977829","limitations","class","img","169317046","basis","143.963307","gettextsize","baseline","puttext","dnnnodeoutput","253","cout","task","desc","dnninput","生成","thickness","http","224","num","。","text","in","hershey","branch","pub","version","机器","distributed","attribute","tp","centernet3dassistparser","如","5","还要","大家","setup","licenses","|","305","p1","unmatch","read","到","#","corners","conditions","rotation","resize","compliance","接下来","string","plain","boxes","973215","rclcpp","char","imagetype","mem","obtain","h","vector","]","getmodel","nv12pyramidinput","fontscale","use","168644750","起来","169517505","any","的","include","先","you","pi","2.0","memory","logger","reinterpret","by","单目","indoor","str","source","getmodelinputsize","or","ptr","sensor","frame","language","hbm","/","集成","if","ofs","3.0","predictbyimage","out","代码","software","nanosec","specific","config","图片","nv12","map","已经","169470588","为","支持","，","under","这","3","子类","end","来看","sharedmemimgprocess","bbox3d","count","sub","552","配置文件","recved","point","看到","law","horizon","或者","hbmem","垃圾桶","169168795","fstream","358164","一张","with","出","不仅","apache","rois","1920","either","6","outputs","utils","0","perceptiontargets","opt","togetherros","bash","filename","创建","of","168704333","渲染","gettime","warranties","into","parameter","识别","128","664062","as","error","express","666","launch","1","房间","继续","empty","shared","348633","mode","-","++","----------","y","1654858490","nsec","uniqueptr","3u","bind","imwrite","cast","ok","169566839","ipos","可以","bridge","case","test","failed","m","return","模型","什么","this","subscription","depth","体验","启动","subscriptions","bgr8","go","051758","framecount","hersheyfonts","tv","v","perfs","rgb8","169067461","charging","parser","3d","result","816406","l","offset","mono3d"],"title":"单目3D室内检测","title_tokens":["单目","室内","检测","3d"]},{"location":"hhp/5.7_%E5%8D%95%E7%9B%AE3D%E5%AE%A4%E5%86%85%E6%A3%80%E6%B5%8B/#3d","text":"接下来，我们继续学习物体 3D 检测算法。 机器人有时候不仅仅要识别出人，还要识别出房间里有什么东西，这就是室内物体 3D 检测啦。 在TogetherROS上，就集成了这样一套算法，接下来让我们一起来体验以下吧。 先来看一张图片，很明显大家可以看到图中有两个垃圾桶。","text_tokens":["togetherros","里","算法","有时候","要","。","来看","了","以下","有时","可以","两个","东西","出人","让","明显","识别","接下","什么","物体","我们","很","集成"," ","机器","就是","房间","继续","啦","体验","不仅仅","看到","学习","垃圾","下来","吧","有","垃圾桶","还要","大家","机器人","图片","这样","起来","时候","仅仅","检测","上","3d","一","就","先","一张","出","图中","不仅","一套","室内","在","，","这","接下来"],"title":"单目3D室内检测","title_tokens":["单目","室内","检测","3d"]},{"location":"hhp/5.7_%E5%8D%95%E7%9B%AE3D%E5%AE%A4%E5%86%85%E6%A3%80%E6%B5%8B/#_1","text":"# 配置ROS2环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。 $ cp -r /opt/tros/lib/mono3d_indoor_detection/config/ . # 启动launch文件 $ ros2 launch /opt/tros/share/mono3d_indoor_detection/launch/mono3d_indoor_detection.launch.py [ INFO ] [ 1654858490 .168592166 ] [ mono3d_detection ] : target type: trash_can [ INFO ] [ 1654858490 .168644750 ] [ mono3d_detection ] : target type: width, value: 236 .816406 [ INFO ] [ 1654858490 .168704333 ] [ mono3d_detection ] : target type: height, value: 305 .664062 [ INFO ] [ 1654858490 .168759584 ] [ mono3d_detection ] : target type: length, value: 224 .182129 [ INFO ] [ 1654858490 .168812334 ] [ mono3d_detection ] : target type: rotation, value: -1571.989179 [ INFO ] [ 1654858490 .168862543 ] [ mono3d_detection ] : target type: x, value: -191.977829 [ INFO ] [ 1654858490 .168916168 ] [ mono3d_detection ] : target type: y, value: -143.963307 [ INFO ] [ 1654858490 .168966502 ] [ mono3d_detection ] : target type: z, value: 714 .024127 [ INFO ] [ 1654858490 .169016794 ] [ mono3d_detection ] : target type: depth, value: 714 .024127 [ INFO ] [ 1654858490 .169067461 ] [ mono3d_detection ] : target type: score, value: 0 .973215 [ INFO ] [ 1654858490 .169168795 ] [ mono3d_detection ] : target type: trash_can [ INFO ] [ 1654858490 .169212837 ] [ mono3d_detection ] : target type: width, value: 253 .051758 [ INFO ] [ 1654858490 .169265004 ] [ mono3d_detection ] : target type: height, value: 282 .348633 [ INFO ] [ 1654858490 .169317046 ] [ mono3d_detection ] : target type: length, value: 257 .934570 [ INFO ] [ 1654858490 .169368921 ] [ mono3d_detection ] : target type: rotation, value: -1542.727947 [ INFO ] [ 1654858490 .169418671 ] [ mono3d_detection ] : target type: x, value: 552 .459776 [ INFO ] [ 1654858490 .169470588 ] [ mono3d_detection ] : target type: y, value: -164.073169 [ INFO ] [ 1654858490 .169517505 ] [ mono3d_detection ] : target type: z, value: 1088 .358164 [ INFO ] [ 1654858490 .169566839 ] [ mono3d_detection ] : target type: depth, value: 1088 .358164 [ INFO ] [ 1654858490 .169616464 ] [ mono3d_detection ] : target type: score, value: 0 .875521 很明显，已经识别到了两个垃圾桶。","text_tokens":["detection","source","168966502","024127","环境","了","[","length","运行","168592166","257","/","459776","$","236","config","已经","height","169470588","tros","type","875521","，","文件","169368921","两个","191.977829","168759584","552","明显","169016794","配置文件","714","164.073169","share","169317046","143.963307","从","169418671","垃圾桶","169168795","169265004",",","253","934570","trash","358164","168862543","ros2","出","cp","182129","0","224","opt","bash","。","168704333","168916168","282",":","路径","1571.989179","识别","很","664062","x"," ","launch","垃圾","z","169212837","348633","setup","169616464","-","y","305","1654858490","1088","到","#","width","rotation","target","安装","_","169566839","1542.727947","can","拷贝","973215","score","需要","lib","配置",".","depth","启动","]","168812334","051758","py","info","r","168644750","169067461","169517505","的","816406","value","示例","mono3d","中","indoor"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/5.7_%E5%8D%95%E7%9B%AE3D%E5%AE%A4%E5%86%85%E6%A3%80%E6%B5%8B/#_2","text":"// Copyright (c) 2022，Horizon Robotics. // // Licensed under the Apache License, Version 2.0 (the \"License\"); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \"AS IS\" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. #include \"include/centernet_3d_detection_node.h\" #include <unistd.h> #include <fstream> #include <memory> #include <string> #include <vector> #include \"dnn_node/dnn_node.h\" #include \"include/image_utils.h\" #include \"rclcpp/rclcpp.hpp\" #include <sys/stat.h> #ifdef CV_BRIDGE_PKG_ENABLED #include <cv_bridge/cv_bridge.h> #endif using hobot :: easy_dnn :: OutputDescription ; using hobot :: easy_dnn :: OutputParser ; CenterNet3DDetectionNode :: CenterNet3DDetectionNode ( const std :: string & node_name , const NodeOptions & options ) : DnnNode ( node_name , options ), output_frameCount_ ( 0 ) { this -> declare_parameter < int > ( \"is_sync_mode\" , is_sync_mode_ ); this -> declare_parameter < std :: string > ( \"config_file_path\" , config_file_path_ ); this -> declare_parameter < int > ( \"shared_mem\" , shared_mem_ ); this -> declare_parameter < std :: string > ( \"ai_msg_pub_topic_name\" , msg_pub_topic_name_ ); this -> declare_parameter < std :: string > ( \"image_sub_topic_name\" , ros_img_topic_name_ ); this -> declare_parameter < std :: string > ( \"feed_image\" , feed_image_ ); this -> get_parameter < int > ( \"is_sync_mode\" , is_sync_mode_ ); this -> get_parameter < std :: string > ( \"config_file_path\" , config_file_path_ ); this -> get_parameter < int > ( \"shared_mem\" , shared_mem_ ); this -> get_parameter < std :: string > ( \"ai_msg_pub_topic_name\" , msg_pub_topic_name_ ); this -> get_parameter < std :: string > ( \"image_sub_topic_name\" , ros_img_topic_name_ ); this -> get_parameter < std :: string > ( \"feed_image\" , feed_image_ ); model_file_name_ = config_file_path_ + \"/centernet.hbm\" ; mkdir ( \"./result/\" , 666 ); std :: stringstream ss ; ss << \"Parameter:\" << \" \\n config_file_path_:\" << config_file_path_ << \" \\n shared_men:\" << shared_mem_ << \" \\n is_sync_mode_: \" << is_sync_mode_ << \" \\n model_file_name_: \" << model_file_name_ << \" \\n feed_image:\" << feed_image_ ; RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); if ( Start () == 0 ) { RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"start success!!!\" ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"start fail!!!\" ); } } CenterNet3DDetectionNode ::~ CenterNet3DDetectionNode () {} int CenterNet3DDetectionNode :: Start () { int ret = Init (); if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Init failed!\" ); return ret ; } ret = GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ); if ( ret < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get model input size fail!\" ); return ret ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"The model input width is %d and height is %d\" , model_input_width_ , model_input_height_ ); msg_publisher_ = this -> create_publisher < ai_msgs :: msg :: PerceptionTargets > ( msg_pub_topic_name_ , 10 ); RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"msg_pub_topic_name: %s\" , msg_pub_topic_name_ . data ()); if ( ! feed_image_ . empty ()) { std :: cout << \"mono3d read image:\" << feed_image_ << \" to detect\" << std :: endl ; PredictByImage ( feed_image_ ); return 0 ; } // RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Detect images that use subscriptions\" ); if ( shared_mem_ ) { #ifdef SHARED_MEM_ENABLED RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Create hbmem_subscription with topic_name: %s\" , sharedmem_img_topic_name_ . c_str ()); sharedmem_img_subscription_ = this -> create_subscription_hbmem < hbm_img_msgs :: msg :: HbmMsg1080P > ( sharedmem_img_topic_name_ , 10 , std :: bind ( & CenterNet3DDetectionNode :: SharedMemImgProcess , this , std :: placeholders :: _1 )); #else RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Unsupport shared mem\" ); #endif } else { RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Create subscription with topic_name: %s\" , ros_img_topic_name_ . c_str ()); ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( ros_img_topic_name_ , 10 , std :: bind ( & CenterNet3DDetectionNode :: RosImgProcess , this , std :: placeholders :: _1 )); } return 0 ; } int CenterNet3DDetectionNode :: SetNodePara () { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Set node para.\" ); if ( ! dnn_node_para_ptr_ ) { return -1 ; } dnn_node_para_ptr_ -> model_file = model_file_name_ ; dnn_node_para_ptr_ -> model_name = model_name_ ; dnn_node_para_ptr_ -> model_task_type = model_task_type_ ; dnn_node_para_ptr_ -> task_num = 1 ; return 0 ; } int CenterNet3DDetectionNode :: SetOutputParser () { // set output parser auto model_manage = GetModel (); if ( ! model_manage || ! dnn_node_para_ptr_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Invalid model\" ); return -1 ; } if ( model_manage -> GetOutputCount () < model_output_count_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Error! Model %s output count is %d, unmatch with count %d\" , dnn_node_para_ptr_ -> model_name . c_str (), model_manage -> GetOutputCount (), model_output_count_ ); return -1 ; } for ( int i = 0 ; i < output_index_ ; ++ i ) { std :: shared_ptr < OutputParser > assist_parser = std :: make_shared < CenterNet3DAssistParser > (); model_manage -> SetOutputParser ( i , assist_parser ); } // set 3D paser auto output_desc = std :: make_shared < OutputDescription > ( model_manage , output_index_ , \"3D_branch\" ); for ( int i = 0 ; i < output_index_ ; ++ i ) { output_desc -> GetDependencies (). push_back ( i ); } output_desc -> SetType ( \"3D\" ); model_manage -> SetOutputDescription ( output_desc ); std :: shared_ptr < OutputParser > out_parser = std :: make_shared < CenterNet3DOutputParser > ( config_file_path_ ); model_manage -> SetOutputParser ( output_index_ , out_parser ); return 0 ; } #define CV_DRAW_LINE(p0, p1) \\ cv::line(image, cv::Point(points[p0][0], points[p0][1]), \\ cv::Point(points[p1][0], points[p1][1]), \\ CV_RGB(0, 255, 0), 2); #define CV_PUT_TEXT(text, px, py, offset) \\ { double fontScale = 3.0l; int thickness = 3u, baseline; \\ cv::Size text_size = cv::getTextSize(text, \\ cv::HersheyFonts::FONT_HERSHEY_PLAIN, fontScale, thickness, &baseline); \\ cv::Point point(px , py); \\ point.y += offset;\\ cv::Rect rect(point.x, point.y, \\ text_size.width, text_size.height); \\ point.y += text_size.height;\\ offset += text_size.height;\\ cv::putText(image, text, point, \\ cv::HersheyFonts::FONT_HERSHEY_PLAIN, \\ fontScale, CV_RGB(0, 255, 128), thickness); } void Render3DBox ( const BBox3D & box , cv :: Mat & image ) { auto & points = box . corners2d_upscale ; CV_DRAW_LINE ( 0 , 1 ) CV_DRAW_LINE ( 0 , 3 ) CV_DRAW_LINE ( 0 , 4 ) CV_DRAW_LINE ( 1 , 2 ) CV_DRAW_LINE ( 1 , 5 ) CV_DRAW_LINE ( 2 , 3 ) CV_DRAW_LINE ( 2 , 6 ) CV_DRAW_LINE ( 3 , 7 ) CV_DRAW_LINE ( 4 , 5 ) CV_DRAW_LINE ( 4 , 7 ) CV_DRAW_LINE ( 5 , 6 ) CV_DRAW_LINE ( 6 , 7 ) std :: string box_type = std :: to_string ( box . class_label ); std :: string score = std :: to_string ( box . score ); int offset = 0 ; if ( - M_PI_2 <= box . r || box . r <= M_PI_2 ) { CV_PUT_TEXT ( box_type , points [ 7 ][ 0 ], points [ 7 ][ 1 ], offset ); CV_PUT_TEXT ( score , points [ 7 ][ 0 ], points [ 7 ][ 1 ], offset ); } else { CV_PUT_TEXT ( box_type , points [ 6 ][ 0 ], points [ 6 ][ 1 ], offset ); CV_PUT_TEXT ( score , points [ 6 ][ 0 ], points [ 6 ][ 1 ], offset ); } } int CenterNet3DDetectionNode :: PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( ! msg_publisher_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid msg_publisher_\" ); return -1 ; } struct timespec time_start = { 0 , 0 }; clock_gettime ( CLOCK_REALTIME , & time_start ); ai_msgs :: msg :: Perf perf ; perf . set__type ( \"PostProcess\" ); perf . stamp_start . sec = time_start . tv_sec ; perf . stamp_start . nanosec = time_start . tv_nsec ; auto centernet_3d_output = std :: dynamic_pointer_cast < CenterNet3DOutput > ( node_output ); if ( centernet_3d_output ) { std :: stringstream ss ; ss << \"3D output dection info\" ; if ( centernet_3d_output -> image_msg_header_ ) { ss << \", frame_id: \" << centernet_3d_output -> image_msg_header_ -> frame_id << \", stamp: \" << centernet_3d_output -> image_msg_header_ -> stamp . sec << \".\" << centernet_3d_output -> image_msg_header_ -> stamp . nanosec ; } RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); } const auto & outputs = node_output -> outputs ; RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"outputs size: %d\" , outputs . size ()); if ( outputs . empty () || static_cast < int32_t > ( outputs . size ()) < model_output_count_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Invalid outputs\" ); return -1 ; } int smart_fps = 0 ; { auto tp_now = std :: chrono :: system_clock :: now (); output_frameCount_ ++ ; auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - output_tp_ ) . count (); if ( interval >= 1000 ) { smart_fps = output_frameCount_ ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Smart fps = %d\" , smart_fps ); output_frameCount_ = 0 ; output_tp_ = std :: chrono :: system_clock :: now (); } } ai_msgs :: msg :: PerceptionTargets :: UniquePtr pub_data ( new ai_msgs :: msg :: PerceptionTargets ()); if ( centernet_3d_output -> image_msg_header_ ) { pub_data -> header . set__stamp ( centernet_3d_output -> image_msg_header_ -> stamp ); pub_data -> header . set__frame_id ( centernet_3d_output -> image_msg_header_ -> frame_id ); } pub_data -> set__fps ( smart_fps ); auto * det_result = dynamic_cast < CenterNet3DDetResult *> ( outputs [ output_index_ ]. get ()); if ( ! det_result ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"invalid cast\" ); } else { RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"out box size: %d\" , det_result -> boxes . size ()); std :: map < std :: string , ai_msgs :: msg :: Target > target_list ; std :: vector < ai_msgs :: msg :: Target > targets ; targets . reserve ( det_result -> boxes . size ()); for ( auto & box : det_result -> boxes ) { ai_msgs :: msg :: Target target ; switch ( box . class_label ) { case BBox3D :: CHARGING_BASE : target . type = \"charging_base\" ; break ; case BBox3D :: SLIPPER : target . type = \"slipper\" ; break ; case BBox3D :: TRASH_CAN : target . type = \"trash_can\" ; break ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s\" , target . type . c_str ()); ai_msgs :: msg :: Attribute attribute ; ai_msgs :: msg :: Point point ; attribute . type = \"width\" ; attribute . value = box . w * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"height\" ; attribute . value = box . h * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"length\" ; attribute . value = box . l * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"rotation\" ; attribute . value = box . r * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"x\" ; attribute . value = box . x * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"y\" ; attribute . value = box . y * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"z\" ; attribute . value = box . z * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"depth\" ; attribute . value = box . d * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"score\" ; attribute . value = box . score * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), box . score ); target . attributes . push_back ( attribute ); // 8 corners /* 4----------5 6----------7 /| /| /| /| / | / | / | / | / | / | / | / | 7---|------6 |5---|------4 | | | | || | | | | | | || | | | | 0------|---1| 2------|---3 | / | / | / | / | / ^ | / | / v | / |/ |/ |/ |/ 3----------2 1----------0 */ for ( const auto & corners : box . corners2d_upscale ) { geometry_msgs :: msg :: Point32 g_point ; g_point . x = corners [ 0 ]; g_point . y = corners [ 1 ]; point . point . push_back ( g_point ); } point . type = \"corners\" ; target . points . push_back ( point ); targets . push_back ( target ); } pub_data -> targets = std :: move ( targets ); if ( ! centernet_3d_output -> image_name_ . empty ()) { auto img_bgr = cv :: imread ( centernet_3d_output -> image_name_ ); for ( auto & box : det_result -> boxes ) { Render3DBox ( box , img_bgr ); } std :: string :: size_type iPos = centernet_3d_output -> image_name_ . find_last_of ( '/' ) + 1 ; std :: string filename = centernet_3d_output -> image_name_ . substr ( iPos , centernet_3d_output -> image_name_ . length () - iPos ); cv :: imwrite ( \"./result/\" + filename , img_bgr ); } } clock_gettime ( CLOCK_REALTIME , & time_start ); perf . stamp_end . sec = time_start . tv_sec ; perf . stamp_end . nanosec = time_start . tv_nsec ; pub_data -> perfs . emplace_back ( perf ); msg_publisher_ -> publish ( std :: move ( pub_data )); return 0 ; } int CenterNet3DDetectionNode :: Predict ( std :: vector < std :: shared_ptr < DNNInput >> & inputs , const std :: shared_ptr < std :: vector < hbDNNRoi >> rois , std :: shared_ptr < DnnNodeOutput > dnn_output ) { return Run ( inputs , dnn_output , rois , is_sync_mode_ == 1 ); } void CenterNet3DDetectionNode :: RosImgProcess ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg || ! rclcpp :: ok ()) { return ; } std :: stringstream ss ; ss << \"Recved img encoding: \" << img_msg -> encoding << \", h: \" << img_msg -> height << \", w: \" << img_msg -> width << \", step: \" << img_msg -> step << \", frame_id: \" << img_msg -> header . frame_id << \", stamp: \" << img_msg -> header . stamp . sec << \".\" << img_msg -> header . stamp . nanosec << \", data size: \" << img_msg -> data . size (); RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); auto tp_start = std :: chrono :: system_clock :: now (); // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; if ( \"rgb8\" == img_msg -> encoding ) { #ifdef CV_BRIDGE_PKG_ENABLED auto cv_img = cv_bridge :: cvtColorForDisplay ( cv_bridge :: toCvShare ( img_msg ), \"bgr8\" ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after cvtColorForDisplay cost ms: %d\" , interval ); } pyramid = ImageUtils :: GetNV12Pyramid ( cv_img -> image , model_input_height_ , model_input_width_ ); #else RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Unsupport cv bridge\" ); #endif } else if ( \"nv12\" == img_msg -> encoding ) { pyramid = ImageUtils :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ ); } if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail\" ); return ; } { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after GetNV12Pyramid cost ms: %d\" , interval ); } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Dnn node begin to predict\" ); // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = img_msg -> width ; dnn_output -> src_img_height_ = img_msg -> height ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( img_msg -> header . frame_id ); dnn_output -> image_msg_header_ -> set__stamp ( img_msg -> header . stamp ); dnn_output -> image_name_ = \"\" ; // 3. 开始预测 uint32_t ret = Predict ( inputs , nullptr , dnn_output ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after Predict cost ms: %d\" , interval ); } if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"predict img failed!\" ); } return ; } int CenterNet3DDetectionNode :: PredictByImage ( const std :: string & image ) { // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; // bgr img，支持将图片resize到模型输入size pyramid = ImageUtils :: GetNV12Pyramid ( image , ImageType :: BGR , model_input_height_ , model_input_width_ ); if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail with image: %s\" , image . c_str ()); return -1 ; } // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = 1920 ; dnn_output -> src_img_height_ = 1024 ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( \"test_frame\" ); dnn_output -> image_msg_header_ -> set__stamp ( rclcpp :: Time ()); dnn_output -> image_name_ = image ; // dnn_output->image_msg_header->set__frame_id(std::to_string(img_msg->index)); // dnn_output->image_msg_header->set__stamp(img_msg->time_stamp); // 3. 开始预测 uint32_t ret = Predict ( inputs , nullptr , dnn_output ); if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"predict img failed!\" ); } return ret ; } #ifdef SHARED_MEM_ENABLED void CenterNet3DDetectionNode :: SharedMemImgProcess ( const hbm_img_msgs :: msg :: HbmMsg1080P :: ConstSharedPtr img_msg ) { if ( ! img_msg || ! rclcpp :: ok ()) { return ; } RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"go into shared mem\" ); // dump recved img msg // std::ofstream ofs(\"img_\" + std::to_string(img_msg->index) + \".\" + // std::string(reinterpret_cast<const char*>(img_msg->encoding.data()))); // ofs.write(reinterpret_cast<const char*>(img_msg->data.data()), // img_msg->data_size); auto tp_start = std :: chrono :: system_clock :: now (); // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; if ( \"nv12\" == std :: string ( reinterpret_cast < const char *> ( img_msg -> encoding . data ()))) { pyramid = ImageUtils :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ ); } else { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"share mem unsupported img encoding: %s\" , img_msg -> encoding ); } if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail!\" ); return ; } { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after GetNV12Pyramid cost ms: %d\" , interval ); } // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = img_msg -> width ; dnn_output -> src_img_height_ = img_msg -> height ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( std :: to_string ( img_msg -> index )); dnn_output -> image_msg_header_ -> set__stamp ( img_msg -> time_stamp ); // 3. 开始预测 int ret = Predict ( inputs , nullptr , dnn_output ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after Predict cost ms: %d\" , interval ); } // 4. 处理预测结果，如渲染到图片或者发布预测结果 if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Run predict failed!\" ); } return ; } #endif","text_tokens":["and","detection","[","after","7","an","node","n","init","points","index","writing","enabled","declare","发布","预测","dnn","point32","easy","\\","ai","centernet","list","encoding","back","type","implied","将","settype","pointer","std","2","new","name","input","centernet3doutputparser","find","publisher","endl","setoutputdescription","hobot","www","manage","nodeoptions","处理","nullptr","sys","类型","f","stat","4","sharedmem",",","hbdnnroi","trash","开始",">","8","make","bgr","作为","dump","msg","数据类型","see","create","attributes","dection","det","at","对象","\"","src",":","that","men","cv","last",")","paser"," ","runinfertask","is","id","z","255","start","image","dynamic","robotics","cvtcolorfordisplay","feed","unsupport","int","chrono","get",";","cost","_","to","10","centernet3doutput","g","can","put","unless","required","rect","interval","~","{","now","hpp","(","^","unistd",".","ms","render3dbox","w","path","rgb","milliseconds","pkg","images","msgs","realtime","&","topic","value","copyright","governing","数据","font","system","endif","copy","结果","push","ss","success","成","the","invalid","on","begin","输入","px","uint32","fps","<","define","stamp","getnv12pyramidfromnv12img","header","time","2022","p0","getdependencies","timespec","centernet3ddetresult","height","upscale","tocvshare","clock","write","for","inputs","'","smart","ros","perf","__","setnodepara","file","------","void","struct","%","i","1000","dnnnode","share","传入","draw","rosimgprocess","slipper","centernet3ddetectionnode","mkdir","!","---","warn","example","hbmmsg1080p","*","int32","base","reserve","stringstream","set","size","publish","data","ofstream","assist","getoutputcount","t","sync","geometry","+","x","agreed","使用","options","1024","ret","duration","double","using","pym","a","box","corners2d","org","width","detect","target","constsharedptr","auto","step","将会","applicable","unsupported","placeholders","outputparser","pyramid","may","mat","sec","fail","not","score","substr","d","license","const","emplace","else","move","py","info","output","r","imageutils","}","static","switch","imread","接口","getnv12pyramid","licensed","break","length","debug","model","para","ifdef","except","=","run","c","targets","kind","s","line","通过","outputdescription","permissions","predict","setoutputparser","postprocess","label","without","limitations","class","img","basis","gettextsize","baseline","puttext","dnnnodeoutput","cout","task","desc","dnninput","生成","thickness","http","num","text","in","hershey","branch","pub","version","distributed","attribute","tp","centernet3dassistparser","如","5","licenses","|","p1","unmatch","read","到","#","corners","conditions","rotation","resize","compliance","string","plain","boxes","rclcpp","char","imagetype","mem","obtain","h","vector","]","getmodel","nv12pyramidinput","fontscale","use","any","的","include","you","pi","2.0","memory","logger","reinterpret","by","indoor","str","getmodelinputsize","or","ptr","sensor","frame","language","hbm","/","if","ofs","3.0","predictbyimage","out","software","nanosec","specific","config","图片","nv12","map","为","支持","，","under","3","子类","end","sharedmemimgprocess","bbox3d","count","sub","recved","point","law","horizon","或者","hbmem","fstream","with","apache","rois","1920","either","6","outputs","utils","0","perceptiontargets","filename","创建","of","渲染","gettime","warranties","into","parameter","128","as","error","express","666","1","empty","shared","mode","-","++","----------","y","nsec","uniqueptr","3u","bind","imwrite","cast","ok","ipos","bridge","case","test","failed","m","return","模型","this","subscription","depth","subscriptions","bgr8","go","tv","framecount","hersheyfonts","v","perfs","rgb8","charging","parser","3d","result","l","offset","mono3d"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/6.1_SLAM%E5%BB%BA%E5%9B%BE/","text":"SLAM建图 从这一节开始，我们开始尝试将 TogetherROS 与机器人联系起来做一些小项目。 第一节将开始学习 SLAM 技术。SLAM一般指即时定位与地图构建，即时定位与地图构建（Simultaneous Localization and Mapping，简称SLAM） 这个章节，我们将联系ROS2 和 TogetherROS ，使用 ROS2 的 SLAM-Toolbox 作为建图算法，在仿真环境中构建地图。 准备工作 1、安装 SLAM - Toolbox建立软链接 $ sudo apt-get install ros-foxy-slam-toolbox $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 2、搭载仿真环境，此处采用 turtlebot3 仿真环境 $ sudo apt-get install ros-foxy-gazebo-* $ sudo apt install ros-foxy-turtlebot3 $ sudo apt install ros-foxy-turtlebot3-bringup $ sudo apt install ros-foxy-turtlebot3-simulations $ sudo apt install ros-foxy-teleop-twist-keyboard 使用介绍 首先在 PC 端启动仿真环境 $ source /opt/ros/foxy/setup.bash $ export TURTLEBOT3_MODEL = burger $ ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py Attention 第一次加载可能比较慢，原因是正在下载部分需要的插件。 打开后，即可看到如图: 在PC端打开一个新终端： $ source /opt/ros/foxy/setup.bash $ ros2 launch turtlebot3_bringup rviz2.launch.py 此时会打开一个RVIZ2 ，需要添加“map” 如下图： 旭日X3 派运行 SLAM-Toolbox： # 配置TogetherROS环境 $ source /opt/tros/setup.bash #启动SLAM launch文件 $ ros2 launch slam_toolbox online_sync_launch.py 此处有可能会遇到缺少lib文件问题，如果发生的话如下操作： $ sudo vi /etc/ld.so.conf #在其后增加： /usr/local/lib #保存退出： $ sudo ldconfig PC端再打开一个新终端，遥控建图： $ source /opt/ros/foxy/setup.bash $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 效果如图： 建图结果","text_tokens":["and","source","“","结果","环境","后","链接","准备","、","运行","bringup","/","增加","slam","地图","章节","第一节","$","model","此时","--","export","=","keyboard","图","：","”","效果","map","mapping","run","建立","一般","tros","toolbox","将","ldconfig","简称","，","2","simultaneous","这","文件","的话","工作","ros","插件","gazebo","第一","正在","部分","与","和","定位","burger","新","派","问题","旭日","看到","从","比较","指","是","vi","一些","联系","构建","建图","机器人","开始","打开","*","ros2","比较慢","cd","teleop","下载","退出","在","apt","即可","作为","sudo","第一次","python3","小","端","create","opt","togetherros","bash","这个","world","遇到","。","项目","etc","即时","一节","仿真",":","原因","保存","install","sync","其后","）","attention"," ","机器","使用","launch","1","pc","online","搭载","一个","发生","setup","-","如图","localization","较慢","foxy","此处","加载","一次","x3","usr","#","local","如下","ld","so","如果","缺少","添加","get","安装","_","尝试","算法","会","终端","采用","需要","我们","lib","turtlebot3","配置","link",".","conf","技术","启动","twist","学习","soft","首先","遥控","py","（","有","rviz2","再","可能","起来","simulations","介绍","操作","的","软","做","中"],"title":"SLAM地图构建","title_tokens":["地图","构建","slam"]},{"location":"hhp/6.1_SLAM%E5%BB%BA%E5%9B%BE/#slam","text":"从这一节开始，我们开始尝试将 TogetherROS 与机器人联系起来做一些小项目。 第一节将开始学习 SLAM 技术。SLAM一般指即时定位与地图构建，即时定位与地图构建（Simultaneous Localization and Mapping，简称SLAM） 这个章节，我们将联系ROS2 和 TogetherROS ，使用 ROS2 的 SLAM-Toolbox 作为建图算法，在仿真环境中构建地图。","text_tokens":["and","togetherros","这个","尝试","算法","。","环境","项目","即时","一节","仿真","第一","与","和","定位","小","我们","）","slam","地图","章节"," ","机器","使用","第一节","技术","学习","从","指","一些","（","联系","构建","建图","机器人","-","起来","开始","mapping","的","ros2","localization","一般","toolbox","将","做","简称","在","，","作为","中","simultaneous","这"],"title":"SLAM建图","title_tokens":["建图","slam"]},{"location":"hhp/6.1_SLAM%E5%BB%BA%E5%9B%BE/#_1","text":"1、安装 SLAM - Toolbox建立软链接 $ sudo apt-get install ros-foxy-slam-toolbox $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 2、搭载仿真环境，此处采用 turtlebot3 仿真环境 $ sudo apt-get install ros-foxy-gazebo-* $ sudo apt install ros-foxy-turtlebot3 $ sudo apt install ros-foxy-turtlebot3-bringup $ sudo apt install ros-foxy-turtlebot3-simulations $ sudo apt install ros-foxy-teleop-twist-keyboard","text_tokens":["_","ros","create","环境","gazebo","链接","仿真","install","采用","、","bringup","/","turtlebot3","slam"," ","link","1",".","$","twist","soft","py","--","搭载","keyboard","-","simulations","建立","*","cd","teleop","tros","软","foxy","toolbox","此处","apt","sudo","，","2","python3","get","安装","opt"],"title":"准备工作","title_tokens":["准备","工作"]},{"location":"hhp/6.1_SLAM%E5%BB%BA%E5%9B%BE/#_2","text":"首先在 PC 端启动仿真环境 $ source /opt/ros/foxy/setup.bash $ export TURTLEBOT3_MODEL = burger $ ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py Attention 第一次加载可能比较慢，原因是正在下载部分需要的插件。 打开后，即可看到如图: 在PC端打开一个新终端： $ source /opt/ros/foxy/setup.bash $ ros2 launch turtlebot3_bringup rviz2.launch.py 此时会打开一个RVIZ2 ，需要添加“map” 如下图： 旭日X3 派运行 SLAM-Toolbox： # 配置TogetherROS环境 $ source /opt/tros/setup.bash #启动SLAM launch文件 $ ros2 launch slam_toolbox online_sync_launch.py 此处有可能会遇到缺少lib文件问题，如果发生的话如下操作： $ sudo vi /etc/ld.so.conf #在其后增加： /usr/local/lib #保存退出： $ sudo ldconfig PC端再打开一个新终端，遥控建图： $ source /opt/ros/foxy/setup.bash $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 效果如图：","text_tokens":["source","“","环境","后","运行","bringup","/","增加","slam","$","model","此时","export","=","keyboard","图","：","”","效果","map","run","tros","toolbox","ldconfig","，","文件","的话","插件","ros","gazebo","第一","正在","部分","burger","新","派","问题","旭日","看到","比较","是","vi","建图","打开","ros2","比较慢","下载","teleop","退出","在","即可","sudo","第一次","端","opt","world","togetherros","bash","遇到","。","etc","仿真",":","原因","保存","sync","其后","attention"," ","launch","pc","online","一个","发生","setup","-","如图","较慢","foxy","此处","加载","一次","x3","usr","#","local","如下","ld","so","如果","缺少","添加","_","会","终端","需要","lib","turtlebot3","配置","conf",".","启动","twist","首先","遥控","py","有","rviz2","再","可能","操作","的"],"title":"使用介绍","title_tokens":["介绍","使用"]},{"location":"hhp/6.1_SLAM%E5%BB%BA%E5%9B%BE/#_3","text":"","text_tokens":[],"title":"建图结果","title_tokens":["结果","建图"]},{"location":"hhp/6.2_%E5%B0%8F%E8%BD%A6%E4%BA%BA%E4%BD%93%E8%B7%9F%E9%9A%8F/","text":"小车人体跟随 之前我们介绍了如何利用 X3派 进行人体检测和跟踪，那么加入我们想要将体检测和跟踪和真实机器人做一个结合会是一种什么样的体验呢？ 这里，我们将通过X3派检测到的人体目标进行一个移动跟踪，最终的一个效果就是当装配着X3派和摄像头的小车面前出现一个人物时，小车将会跟随着人体一起移动。接下来，让我们一起来体验一下吧。 编程开发方法 先来看整个程序的流程图： 这里，我们将通过 Gazebo 仿真环境下的虚拟小车作为真实机器，首先，让我们来做一些准备工作。 在PC端搭建一个仿真环境： $ sudo apt-get install ros-foxy-gazebo-* $ sudo apt install ros-foxy-turtlebot3 $ sudo apt install ros-foxy-turtlebot3-simulations 使用介绍 首先在 PC 端启动仿真环境 $ source /opt/ros/foxy/setup.bash $ export TURTLEBOT3_MODEL = burger $ ros2 launch turtlebot3_gazebo empty_world.launch.py Attention 第一次加载可能比较慢，原因是正在下载部分需要的插件。 如下图所见： 旭日X3 派运行 如下指令： # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从TogetherROS的安装路径中拷贝出运行示例需要的配置文件。 $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . #启动launch文件 $ ros2 launch body_tracking hobot_body_tracking_without_gesture.launch.py 接下来，只需要你站在摄像头面前左右前后移动，就会发现仿真环境下的小车也会跟着你移动。 再来看终端输出的信息： $ ros2 topic echo /cmd_vel linear: x: 0.5 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: -0.5 --- linear: x: 0.5 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: -0.5 --- 跟随效果","text_tokens":["detection","source","环境","了","进行","准备","让","运行","/","跟着","cmd","0.5","就是","图所见","$","model","export","=","方法","config","最终","：","效果","检测","angular","就","tros","将","跟随","，","通过","文件","工作","ros","呢","来看","插件","指令","装配","信息","gazebo","摄像","without","tracking","第一","正在","部分","和","hobot","跟","结合","接下","burger","派","一种","配置文件","搭建","真实","旭日","摄像头","从","比较","是","小车","下来","一些","机器人","也","---","*","ros2","比较慢","下载","所见","出","编程","在","apt","作为","sudo","将体","第一次","cp","端","opt","world","togetherros","bash","时","。","仿真",":","移动","原因","路径","虚拟","install","程序","mono2d","只","随着","body","x","attention"," ","机器","使用","launch","pc","z","empty","加入","流程","这里","一个","面前","站","setup","像头","0.0","-","出现","左右","开发","利用","流程图","较慢","y","foxy","x3","整个","一次","到","加载","gesture","目标","？","如下","#","着","vel","如何","get","接下来","安装","将会","那么","人体","_","echo","会","拷贝","跟踪","前后","终端","什么","需要","一下","我们","lib","turtlebot3","配置","开发方法","想要",".","体验","启动","输出","linear","首先","py","吧","r","人物","再","可能","起来","介绍","simulations","下","的","什么样","一","发现","先","topic","来","做","一起","示例","之前","中","你","当"],"title":"小车人体跟随","title_tokens":["跟随","人体","小车"]},{"location":"hhp/6.2_%E5%B0%8F%E8%BD%A6%E4%BA%BA%E4%BD%93%E8%B7%9F%E9%9A%8F/#_1","text":"之前我们介绍了如何利用 X3派 进行人体检测和跟踪，那么加入我们想要将体检测和跟踪和真实机器人做一个结合会是一种什么样的体验呢？ 这里，我们将通过X3派检测到的人体目标进行一个移动跟踪，最终的一个效果就是当装配着X3派和摄像头的小车面前出现一个人物时，小车将会跟随着人体一起移动。接下来，让我们一起来体验一下吧。","text_tokens":["将会","那么","人体","呢","时","。","了","装配","进行","摄像","会","移动","跟踪","和","让","跟","结合","接下","什么","随着","一下","我们","派","一种"," ","机器","想要","就是","真实","体验","摄像头","加入","是","小车","这里","下来","吧","一个","面前","像头","机器人","人物","最终","效果","出现","介绍","起来","的","检测","什么样","一","利用","x3","将","到","做","目标","？","一起","之前","，","将体","通过","着","如何","接下来","当"],"title":"小车人体跟随","title_tokens":["跟随","人体","小车"]},{"location":"hhp/6.2_%E5%B0%8F%E8%BD%A6%E4%BA%BA%E4%BD%93%E8%B7%9F%E9%9A%8F/#_2","text":"先来看整个程序的流程图： 这里，我们将通过 Gazebo 仿真环境下的虚拟小车作为真实机器，首先，让我们来做一些准备工作。 在PC端搭建一个仿真环境： $ sudo apt-get install ros-foxy-gazebo-* $ sudo apt install ros-foxy-turtlebot3 $ sudo apt install ros-foxy-turtlebot3-simulations","text_tokens":["工作","ros","来看","环境","。","gazebo","仿真","准备","虚拟","让","程序","install","我们","turtlebot3","搭建"," ","机器","真实","pc","$","流程","首先","小车","这里","一些","一个","-","：","simulations","下","的","*","流程图","先","foxy","来","整个","将","做","在","apt","，","作为","sudo","通过","get","端"],"title":"编程开发方法","title_tokens":["开发","开发方法","方法","编程"]},{"location":"hhp/6.2_%E5%B0%8F%E8%BD%A6%E4%BA%BA%E4%BD%93%E8%B7%9F%E9%9A%8F/#_3","text":"首先在 PC 端启动仿真环境 $ source /opt/ros/foxy/setup.bash $ export TURTLEBOT3_MODEL = burger $ ros2 launch turtlebot3_gazebo empty_world.launch.py Attention 第一次加载可能比较慢，原因是正在下载部分需要的插件。 如下图所见： 旭日X3 派运行 如下指令： # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从TogetherROS的安装路径中拷贝出运行示例需要的配置文件。 $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . #启动launch文件 $ ros2 launch body_tracking hobot_body_tracking_without_gesture.launch.py 接下来，只需要你站在摄像头面前左右前后移动，就会发现仿真环境下的小车也会跟着你移动。 再来看终端输出的信息： $ ros2 topic echo /cmd_vel linear: x: 0.5 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: -0.5 --- linear: x: 0.5 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: -0.5 ---","text_tokens":["detection","source","环境","运行","/","跟着","cmd","0.5","图所见","$","model","export","=","config","：","angular","就","tros","，","文件","插件","ros","指令","来看","信息","gazebo","摄像","without","tracking","第一","正在","部分","hobot","接下","burger","派","配置文件","旭日","摄像头","从","比较","是","小车","下来","也","---","ros2","比较慢","下载","所见","出","在","第一次","cp","端","opt","world","togetherros","bash","。","仿真",":","原因","路径","移动","mono2d","只","body","x","attention"," ","launch","pc","z","empty","面前","站","setup","像头","0.0","-","左右","较慢","y","foxy","加载","一次","x3","gesture","#","如下","vel","安装","接下来","_","echo","会","拷贝","前后","终端","需要","lib","turtlebot3","配置",".","启动","输出","linear","首先","py","r","再","可能","下","的","发现","topic","示例","中","你"],"title":"使用介绍","title_tokens":["介绍","使用"]},{"location":"hhp/6.2_%E5%B0%8F%E8%BD%A6%E4%BA%BA%E4%BD%93%E8%B7%9F%E9%9A%8F/#_4","text":"","text_tokens":[],"title":"跟随效果","title_tokens":["跟随","效果"]}]}