{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。 本教程将会以旭日X3派为平台，介绍地平线机器人开发平台的使用原理与方法。 教程链接汇总 旭日X3派开发板使用手册： https://developer.horizon.ai/api/v1/fileData/documents_pi/index.html 机器人开发平台使用手册： https://developer.horizon.ai/api/v1/fileData/TogetherROS/index.html 视频课程： https://class.guyuehome.com/all/10284445/19617453 图文教程： https://hhp.guyuehome.com/ 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/92 博客泡圈： https://www.guyuehome.com/","text_tokens":["togetherros","平台","com","：","以","感知","电机","程式","地平线","带来","软件","circledetail","。","感器","操作系统","部分","主控","developer","documents","非常","驱动","将会","算法","各种各样","是","动作","x3","手册","博客","filedata","派","规控","多","开发","月","汇总","_","进行","各样","/","等等","index",".","class","guyuehome","在","视频","id","机器","、","2022","html","10284445","行业","全新","方法","信息","链接","更","层面","horizon","等","传感","为","引言","硬件","正式","6","计算","hhp","教程","课程"," ","机器人","给","环境","执行","原理","帮助","图文","pi","开发板","地平","作为","问答","，","使用手册","本","各种","系统","的","ai","介绍","all","推出","操作","19617453","www","复杂","非常复杂","年","工具","使用","与","传感器","一代","大脑","包括","92","api","bubble","数据","v1","https",":","泡圈","旭日","一个"],"title":"**引言**","title_tokens":["*","引言"]},{"location":"#_1","text":"机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。 本教程将会以旭日X3派为平台，介绍地平线机器人开发平台的使用原理与方法。","text_tokens":["平台","：","以","感知","电机","程式","地平线","带来","软件","。","感器","操作系统","部分","主控","非常","驱动","将会","算法","各种各样","是","动作","x3","派","规控","多","开发","月","进行","各样","等等","在","机器","、","2022","行业","全新","方法","信息","更","层面","等","传感","为","硬件","正式","6","计算","教程"," ","机器人","给","环境","执行","原理","帮助","地平","作为","，","本","各种","系统","的","介绍","推出","操作","复杂","非常复杂","年","工具","使用","与","传感器","一代","大脑","包括","数据","旭日","一个"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"旭日X3派开发板使用手册： https://developer.horizon.ai/api/v1/fileData/documents_pi/index.html 机器人开发平台使用手册： https://developer.horizon.ai/api/v1/fileData/TogetherROS/index.html 视频课程： https://class.guyuehome.com/all/10284445/19617453 图文教程： https://hhp.guyuehome.com/ 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/92 博客泡圈： https://www.guyuehome.com/","text_tokens":["togetherros","问答","使用手册","平台","com","手册","x3","：","ai","horizon","博客","filedata","all","派","19617453","www","开发","使用","_","/","index",".","circledetail","hhp","class","92","教程","api","课程"," ","机器人","guyuehome","bubble","v1","视频","id","https","developer","documents","图文","机器","pi",":","泡圈","旭日","html","10284445","开发板"],"title":"教程链接汇总","title_tokens":["汇总","教程","链接"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["至今","有限公司","平台","com","课件","线上","许可","校企","个人","捆绑","不","培养","人才","1000","brand","任何","。","出版","面向","修改","追究","违反","声明","质量","万字","努力","赋能","声明者","构建","武汉","但","上","是","居","优质","致力于","通过","拥有","或","实践","知名","内容","开发","传播","众多","+","社区","和","抄录","进行","》",".","网站","guyuehome","作品","限于","视频","授权","单位","机器","、","学","请","人才培养","高质","华语","明者","@","将","地区","公司","集","致力","未来","有限","生态","追究其","提供","精锋","镜像","等","为","高质量","其它","依法","对本","法律责任","一体","合作","120","高校","微控","课程"," ","创新","机器人","如需","科技","小时","合法","联系","书面","仅限","《","被","究其","超过","交流","2011","，","本","的","学习者","ai","）","（","上述","法律","古月","责任","均","创建","万人","www","年","交流学习","不得","建立","面向未来","使用","学习","累积","用户","与","销售","模式","包括","企业","有权","畅销","图书","源码","版权","未经","产品","ros","所有","复制","及"],"title":"关于我们","title_tokens":["关于","我们"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["至今","平台","com","线上","校企","培养","人才","1000","。","出版","面向","质量","万字","努力","赋能","构建","是","居","优质","致力于","通过","实践","知名","内容","开发","众多","+","社区","》",".","guyuehome","视频","机器","、","人才培养","高质","华语","地区","集","致力","未来","生态","提供","等","为","高质量","一体","合作","120","高校","课程"," ","创新","机器人","小时","《","超过","交流","2011","，","的","学习者","ai","）","（","古月","创建","万人","www","年","交流学习","建立","面向未来","学习","累积","用户","与","模式","企业","畅销","图书","ros","及"],"title":"学机器人，上古月居","title_tokens":["上","，","机器","学","居","机器人","古月"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["有限公司","com","课件","许可","个人","捆绑","不","brand","任何","。","修改","追究","违反","声明","声明者","武汉","但","居","拥有","或","传播","和","抄录","进行",".","网站","guyuehome","作品","限于","视频","授权","单位","、","请","明者","@","将","公司","有限","追究其","精锋","镜像","等","为","其它","依法","对本","法律责任","微控","课程"," ","如需","科技","合法","联系","书面","仅限","被","究其","，","本","的","上述","法律","责任","古月","均","不得","使用","学习","用户","与","销售","包括","有权","源码","版权","未经","产品","所有","复制"],"title":"版权声明","title_tokens":["声明","版权"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/","text":"智能机器人发展与现状 智能机器人正在改变着我们的生活，想象这样一种场景。 也许不知不觉的某一天，我们就会发现类似这样的机器人会真实出现在生活当中。 科技的发展日新月异，智能机器人也突飞猛进，伴随机器人发展而生的机器人操作系统，也是机器人重要的发展动力之一。 智能机器人举例 提到智能机器人，大家脑海里会映射出什么样的情景呢？ 是不是会有很多科幻电影中变形金刚、大白机器人、星球大战等场景呢？ 智能机器人这个概念，只是一个科幻词汇么？当然不是的，其实在我们身边，已经有越来越多智能机器人出现，我们来看看他们都在哪里？ 扫地机器人 先来看一个大家最熟悉的一个类型——扫地机器人。现在的扫地机器人，除了可以完成扫地、拖地这样一些基本功能之外，还搭载了激光雷达、相机、红外等十几种传感器。 一个全新的扫地机器人虽然是第一次来到你家，但是它可能用到 5 分到 10 分钟时间，很快就可以通过它的传感器对你的家庭环境了如指掌，也就是把实际的家庭环境做成了一张地图，这样他就会知道哪里是卧室，哪里是餐厅，哪里是厨房，不同的区域用多大的风力，用多大的水量来去清扫最为合适，它都会智能化地来做判断。 除此之外，它还得知道怎么样去躲避各种障碍物，比如说家里面的宠物、地上摆放的插线板，各种各样的杂物等等。 所以看似非常小的一个扫地机器人，其实已经是一个很智能化的家用设备了，正在潜移默化地改变着我们的生活。 自动化仓储 第二个案例，虽然大部分人在生活中不会直接接触，但却和每一个人息息相关，那就是自动化仓储。 这是京东某个实际部署运营的一套自动化的仓库，在里面可以看到各种各样的机器人，比如工业机械臂、移动机器人等等，这套立体仓库当中大量的货架也是自动化的，这就是一个典型的机器人应用场景。 之前有一个关于京东的新闻报道，里边讲到，从我们下单那刻开始，到商品分拣出来放到快递员手上，只需要20分钟。比如我们要买个手机，下单付款，20分钟之后，这个手机已经从这么庞大的仓库中顺利找到，并且完成了包装、打标、分配等一系列工序。这样，我们在绝大部分城市，基本都可以体验到下单之后，当天或者隔天收货的体验，为什么它可以做到如此高效，就是因为背后这一套由机器人组成的自动化系统，借助大数据的分析，甚至可以做到在你下单之前，平台就知道你将要买什么东西。比如说你会按照一个月的频率买米买面，那平台就可以预测到上个月你买的米应该快吃完了，然后就会在距离你家最近的一个仓库里面备货。 当你下单之后，这袋米可能半个小时送到你手上了。 自动驾驶 第三个案例，那就是当今最为热门的技术之一——自动驾驶。 自动驾驶汽车也是典型的移动机器人系统，为了保证绝对安全的驾驶过程，汽车上装配了非常多的传感器，以及极为复杂的控制算法。 视频中我们看到的是华为自动驾驶系统在实际路面上测试的效果，自动驾驶汽车通过多个相机、雷达、超声波，实时构建周围环境的三维信息，不仅可以动态识别路面上的行人车辆、车道线、交通指示灯等，还可以安全完成超车、会车、跟车、转向等重要功能，同时对突发状况也可以及时处理，比如躲避突然出现的车辆、礼让行人等，最终自动行驶入库，把我们安全顺利的送到目的地。 虽然自动驾驶相关的技术和法律法规还在不断完善中，但是相信有一天我们每个人都可以体验自动驾驶的乐趣，而且这一天不会太远。 智能机器人发展 机器人的发展横跨几十年，经历了三个重要时期。 2000年前，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 2015年之后，智能机器人市场迅速爆发，到2025年，国内人工智能市场有望达到1164亿元，而作为人工智能重要载体的机器人，市场更会达到1463亿元。 行业的快速发展，必将带动大量专业人才的需求，人才缺口也将逐年扩大，2025年，预计国内机器人行业的人才缺口将超过450万，人工智能方面的缺口更会达到1000万。 面对如此严峻的人才需求，国内各高校从2016年起，陆续开设机器人和人工智能专业，为人才的供给提供有力保障。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角。 机器人操作系统 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是机器人操作系统。 ROS的诞生 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣、做饭、收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法：既然自己做不到，那为什么不联合所有人一起干呢？如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在这几个图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面，却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS怀揣“提高机器人软件复用率”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 ROS的特点 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。","text_tokens":["么","先","下来","访问","至今","机械","人工智能","平台","算机","伺服","论坛","也","查看","问题","张图","隔天","率","据库","人形","如何","动机","巨人","当然","活跃","不","来看","汽车","本身","安全","人数","嵌入","任何","控制算法","既然","应用软件","新鲜","生产","感器","操作系统","时间","检测","特性","大白","5","业生","经历","基本上","现状","却","做","真的","之内","一起","在生活中","personal","如此","统统","这里","立体仓库","时代","上","躲避","基于","模块","必将","怎么","效果","通信","顺利","叠","上图","场景","2","了如指掌","星球大战","出现","pr2","二个","实际","起","只能","雷达","里边","成为","原型","没有","简单","频繁","来讲","款","付款","会","最后","不知","目的","c","各项","视觉","这款","而且","开发工具","全人类","一套","索引","差不多","路面","answers","可能","行业","记录","将","想法","面对","两个","有限","基本","需求","根据","体系","举例","层面","等","后期","几种","才","物体","嵌入式","为例","？","日常","一些","整合","框架","零","算是","其实","水量","依然","结晶","发展","包装","预测","通常","ros2","由示","这是","高校","送到","保障","百科","智能化","插","备货","玩耍","提高","四大","现在"," ","得","拉开","科技","并","方式","着","餐厅","上个月","几十","虽然","维基百","速度","无聊","做出","所有人","背后","80","繁荣","这个","组成","控制器","知道","专业人才","收拾","作为","外观","普遍","绝对","最终","轮子","除此","电路","明智","商业化","不知不觉","资金","操控","类似","10","工序","复杂","新增","了","横跨","怀揣","做法","十几","呢","京东","一系","20","快速","什么","他","开源","新闻","随着","有志","买米","而","—","大战","最近","很快","分配","agv","入库","当天","极为","新","目的地","合适","及时处理","仓储","为什么","系列","带动","学术","设计","完全","应用","围绕","太远","浪潮","自己","以","感知","动力","劳动","仿生","个人","一大","从中","你","拖地","典型","这一波","除了","前夜","丰富","有人","已有","150","那刻","万","找到","因为","载体","实现","不多","工业","逐渐","过程","分钟","已经","直接","一切","一大步","标准","驱动","有望","精致","剪头发","家用","计算机","达到","算法","第三个","礼让","2015","之","完成","它","动作","高","爆发","将要","初期","杂物","容易","星球","风力","仓库","如果","苹果","车道","具备","改变","复合","大步","映射","移动","卧室","同一","社区","万左右","地","衣服","半个","潜移","index","核心","关于","进步","对","不是","打标","减速","释放","棒","每","主要","金刚","讲","红外","光靠","想象","第二个","聊天","你家","立体","缺口","情景","劳动力","2000","呈","陆续","之一","行驶","越来越","访问量","里面","实验室","增长速度","驾驶","用多大","其中","有力","分","更","生活","很","状","有没有","效率","2007","熟悉","相关","事情","部件","吃","线板","福大","浏览","然后","身影","中","几十年","地上","统计","相信","这套","工业生产","包","时至今日","扫地","轰动","答案","第一","机器人","对于","来","所以","深知","执行","远","真实","独立","宽松","指示灯","减速机","”","某","清扫","收货","时候","时期","人","上边","状况","浏览量","被","小","得以","系统","新鲜事","什么样","从","律法","尽量","全人","支持","发表","操作","供给","热点","不断完善","思考","年","采购","要求","；","之前","词汇","三维","井喷","正在","预计","引擎","ros1","四项","“","功能","更加","青年","用于","区域","序幕","搭载","不想","超车","新闻报道","所有","放到","洗衣","多媒体系统","就是","木头","按照","discourse","上个","当今","默化","太","这些","：","增长","基本功能","诞生","东西","许可","电机","缺少","几年","不同","大部","障碍物","最","狗","软件","热门","人类","。","严峻","windows","代","运营","友好","起来","多媒体","水下","把","这","非常","十年","模块化","第三","但是","激光雷达","制造","做成","450","今日","障碍","高效","数据库","变形金刚","更会","同样","是","趋势","跨平台","来到","到","电影","可以","不断丰富","零部件","家庭环境","动态","跟车","声波","斯坦福大学","开始","联合","开发","完","人工","超声波","最为","和","自身","发状","装配","一群","做饭","分享","大部分","特点","基本功","全球","40","以上","网站","1164","智能","2025","下单","绝大","不要","在","闻报","实验","行人","科幻电影","突飞","台球","乐意","个","、","只","越来","存储","总称","次数","生态系","臂","a","不断","实时","250","十几种","某个","周围","设备","b","比如","生态","智慧","因","当","各","干","有","参考","大家","是不是","传感","不会","上去","熨烫","以叠","缩短","向前走","此时","25","而言","命令","指示","去","革命","团队","页面","元素","伴随","由","曲线","这样","一个月","开设","涉及","只是","教程","以及","开发者","小时","给","软件系统","集合","跑","地域","用","迅猛","研究","排名","圈","保证","尝试","柔性","问答","提到","之后","ai","需要","不仅","法律","车辆","造","也许","万人","加","工具","周围环境","近几年","日新月异","使用","不到","处理","说干就干","与","用户","他们","传感器","出来","总而言之","肯定","宠物","一家","斯坦福","几个","程度","复用","源码","驱动器","2016","四足","送餐","产品","厨房","并且","媒体","城市","接触","上市","linux","1463","迅速","类型","第一次","看到","机制","大量","一次","看似","案例","大","局部","出","乐趣","里会","商品","向前","维基百科","国家","家","货架","当中","一系列","法规","或者","同理","报道","拉开序幕","总体","部署","于","性能","条","还","除此之外","提出","新月","人才","都","充足","1000","陪","推动","wiki","那","买","这袋","电气","第二","最佳","人才需求","给出","推进","下载","正如","此","部分","毛巾","猛进","激光","而生","哪里","识别","低","沉淀","工厂","变形","华为","构建","但","国内","无论","自动","交通","各种各样","地来","讨论","通过","亿元","还是","得到","移动机器人","庞大","手上","我们","转向","一天","判断","多","绝大部分","重新","月","买个","15","活动","地图","用到","各样","年前","突发状况","不过","比如说","等等","清晰","潜移默化","目标","家庭","摆放","资源","自动化","员","大学",".","肩膀","息息相关","教器","视频","买面","多个","别人","甚至","整理","无疑","助推","要","机器","自主","打","说明","多项","发现","就","伺服电机","成果","全新","身边","相机","信息","最高","频率","公司","科幻","分拣","技术","强悍","提供","领域","做到","专业","robot","突然","情况","为","概念","为了","距离","及时","主角","packages","体验","方面","100","突飞猛进","正式","商业","快","每个","扩大","活跃度","分析","代表","重要","计算","其他","后","课程","完善","一款","站","同时","促使","环境","很多","头发","帮助","大有可为","法律法规","不觉","一张","图中","全球化","这么","只要","借助","关注","服务","突发","当时","广泛","超过","创意","回答","维基","，","各种","快递","手机","的","市场","可为","更为","超声","米","发布","生态系统","控制","俗称","org","无论是","一种","左右","脑海","度","研发","多万","应该","线","长远","数据","针对","怎么样","许可证","之外","数字","逐年","三个","看看","ros","一步","测试","一个","车"],"title":"智能机器人发展与现状","title_tokens":["与","机器","智能","现状","机器人","发展"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_1","text":"智能机器人正在改变着我们的生活，想象这样一种场景。 也许不知不觉的某一天，我们就会发现类似这样的机器人会真实出现在生活当中。 科技的发展日新月异，智能机器人也突飞猛进，伴随机器人发展而生的机器人操作系统，也是机器人重要的发展动力之一。","text_tokens":["，","是","系统","的","生活","不知不觉","也","我们","也许","场景","一天","类似","当中","操作","改变","动力","之一","出现","日新月异","突飞猛进","新月","发展","伴随","一种","这样","重要","正在","智能","。","操作系统"," ","会","机器人","不知","在","科技","猛进","而生","着","真实","突飞","想象","不觉","机器","某","发现","就"],"title":"智能机器人发展与现状","title_tokens":["与","机器","智能","现状","机器人","发展"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_2","text":"提到智能机器人，大家脑海里会映射出什么样的情景呢？ 是不是会有很多科幻电影中变形金刚、大白机器人、星球大战等场景呢？ 智能机器人这个概念，只是一个科幻词汇么？当然不是的，其实在我们身边，已经有越来越多智能机器人出现，我们来看看他们都在哪里？","text_tokens":["么","身边","科幻","，","变形金刚","提到","的","什么样","出","有","里会","大家","是不是","等","？","电影","星球","我们","概念","场景","多","星球大战","映射","当然","出现","其实","呢","都","中","他们","脑海","词汇","什么","智能","不是","只是"," ","会","机器人","大白","在","来","很多","金刚","大战","科幻电影","哪里","已经","机器","、","看看","情景","越来","变形","越来越","这个","一个"],"title":"智能机器人举例","title_tokens":["机器人","机器","智能","举例"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_3","text":"先来看一个大家最熟悉的一个类型——扫地机器人。现在的扫地机器人，除了可以完成扫地、拖地这样一些基本功能之外，还搭载了激光雷达、相机、红外等十几种传感器。 一个全新的扫地机器人虽然是第一次来到你家，但是它可能用到 5 分到 10 分钟时间，很快就可以通过它的传感器对你的家庭环境了如指掌，也就是把实际的家庭环境做成了一张地图，这样他就会知道哪里是卧室，哪里是餐厅，哪里是厨房，不同的区域用多大的风力，用多大的水量来去清扫最为合适，它都会智能化地来做判断。 除此之外，它还得知道怎么样去躲避各种障碍物，比如说家里面的宠物、地上摆放的插线板，各种各样的杂物等等。 所以看似非常小的一个扫地机器人，其实已经是一个很智能化的家用设备了，正在潜移默化地改变着我们的生活。","text_tokens":["先","默化","类型","第一次","一次","看似","也","家","基本功能","还","拖地","你","来看","除了","不同","除此之外","都","障碍物","最","。","感器","时间","激光","分钟","5","哪里","已经","把","非常","但是","激光雷达","做","家用","做成","障碍","躲避","是","地来","通过","完成","它","各种各样","来到","到","怎么","杂物","风力","我们","可以","家庭环境","判断","了如指掌","改变","卧室","最为","实际","地图","用到","雷达","各样","地","比如说","基本功","等等","潜移","潜移默化","家庭","摆放","对","智能","会","红外","你家","机器","、","就","可能","里面","全新","十几种","相机","用多大","设备","基本","分","比如","生活","很","等","几种","大家","传感","一些","熟悉","其实","水量","去","线板","地上","这样","智能化","插","扫地","现在"," ","第一","机器人","得","来","所以","环境","餐厅","着","一张","虽然","清扫","知道","，","小","各种","的","除此","10","了","十几","传感器","他","正在","宠物","功能","区域","怎么样","之外","—","搭载","很快","厨房","就是","合适","一个"],"title":"扫地机器人","title_tokens":["扫地","机器人","机器"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_4","text":"第二个案例，虽然大部分人在生活中不会直接接触，但却和每一个人息息相关，那就是自动化仓储。 这是京东某个实际部署运营的一套自动化的仓库，在里面可以看到各种各样的机器人，比如工业机械臂、移动机器人等等，这套立体仓库当中大量的货架也是自动化的，这就是一个典型的机器人应用场景。 之前有一个关于京东的新闻报道，里边讲到，从我们下单那刻开始，到商品分拣出来放到快递员手上，只需要20分钟。比如我们要买个手机，下单付款，20分钟之后，这个手机已经从这么庞大的仓库中顺利找到，并且完成了包装、打标、分配等一系列工序。这样，我们在绝大部分城市，基本都可以体验到下单之后，当天或者隔天收货的体验，为什么它可以做到如此高效，就是因为背后这一套由机器人组成的自动化系统，借助大数据的分析，甚至可以做到在你下单之前，平台就知道你将要买什么东西。比如说你会按照一个月的频率买米买面，那平台就可以预测到上个月你买的米应该快吃完了，然后就会在距离你家最近的一个仓库里面备货。 当你下单之后，这袋米可能半个小时送到你手上了。","text_tokens":["上个","仓储","为什么","机械","系列","平台","看到","大量","应用","案例","大","商品","也","隔天","货架","当中","一系列","或者","报道","东西","部署","动机","你","典型","大部","都","那","买","这袋","第二","那刻","找到","因为","。","工业","部分","运营","分钟","直接","已经","这","却","在生活中","但","如此","立体仓库","高效","自动","各种各样","是","完成","它","到","移动机器人","庞大","将要","仓库","我们","可以","手上","顺利","场景","开始","绝大部分","移动","完","买个","二个","和","实际","各样","里边","大部分","等等","比如说","半个","关于","自动化","员","下单","付款","会","绝大","打标","在","每","息息相关","闻报","讲","买面","第二个","甚至","一套","立体","机器","、","只","要","你家","臂","就","可能","里面","频率","某个","比如","分拣","基本","当","生活","做到","等","有","不会","相关","距离","体验","吃","包装","预测","然后","中","这是","由","这样","分析","快","送到","这套","一个月","备货"," ","机器人","小时","上个月","虽然","收货","背后","人","这么","这个","借助","组成","知道","，","各种","快递","手机","的","之后","系统","需要","从","工序","了","米","京东","一系","20","之前","出来","城市","什么","新闻","应该","买米","数据","最近","分配","新闻报道","放到","当天","并且","就是","接触","按照","一个"],"title":"自动化仓储","title_tokens":["自动","仓储","自动化"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_5","text":"第三个案例，那就是当今最为热门的技术之一——自动驾驶。 自动驾驶汽车也是典型的移动机器人系统，为了保证绝对安全的驾驶过程，汽车上装配了非常多的传感器，以及极为复杂的控制算法。 视频中我们看到的是华为自动驾驶系统在实际路面上测试的效果，自动驾驶汽车通过多个相机、雷达、超声波，实时构建周围环境的三维信息，不仅可以动态识别路面上的行人车辆、车道线、交通指示灯等，还可以安全完成超车、会车、跟车、转向等重要功能，同时对突发状况也可以及时处理，比如躲避突然出现的车辆、礼让行人等，最终自动行驶入库，把我们安全顺利的送到目的地。 虽然自动驾驶相关的技术和法律法规还在不断完善中，但是相信有一天我们每个人都可以体验自动驾驶的乐趣，而且这一天不会太远。","text_tokens":["当今","及时处理","看到","案例","太远","乐趣","也","法规","动机","还","典型","汽车","都","安全","那","控制算法","热门","。","感器","过程","识别","把","这","非常","第三","华为","但是","构建","算法","第三个","礼让","自动","上","交通","躲避","是","通过","完成","移动机器人","效果","我们","转向","可以","顺利","一天","动态","车道","跟车","声波","多","移动","出现","超声波","最为","和","实际","发状","装配","雷达","突发状况","对","会","目的","在","而且","行人","视频","多个","机器","、","路面","之一","行驶","不断","实时","相机","驾驶","信息","周围","比如","技术","等","有","突然","传感","不会","为了","相关","及时","体验","指示","中","每个","送到","相信","重要","以及"," ","完善","机器人","同时","环境","法律法规","指示灯","虽然","人","突发","保证","状况","，","系统","绝对","的","最终","不仅","法律","车辆","律法","不断完善","复杂","超声","了","周围环境","控制","就是","处理","传感器","三维","功能","线","—","超车","三个","入库","极为","测试","目的地","车"],"title":"自动驾驶","title_tokens":["自动","驾驶"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_6","text":"机器人的发展横跨几十年，经历了三个重要时期。 2000年前，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 2015年之后，智能机器人市场迅速爆发，到2025年，国内人工智能市场有望达到1164亿元，而作为人工智能重要载体的机器人，市场更会达到1463亿元。 行业的快速发展，必将带动大量专业人才的需求，人才缺口也将逐年扩大，2025年，预计国内机器人行业的人才缺口将超过450万，人工智能方面的缺口更会达到1000万。 面对如此严峻的人才需求，国内各高校从2016年起，陆续开设机器人和人工智能专业，为人才的供给提供有力保障。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角。","text_tokens":["1463","带动","迅速","太","人工智能","类型","完全","算机","伺服","应用","大量","大","局部","也","感知","动力","劳动","仿生","拉开序幕","电机","于","缺少","提出","汽车","人才","前夜","丰富","1000","电气","最佳","狗","人才需求","软件","万","人类","载体","。","工业","生产","逐渐","感器","严峻","检测","操作系统","过程","业生","经历","这","十年","工厂","驱动","有望","但是","计算机","450","达到","国内","如此","时代","自动","2015","更会","是","动作","亿元","必将","高","爆发","到","我们","不断丰富","多","开发","出现","人工","最为","和","起","年前","只能","不过","成为","没有","家庭","对","1164","智能","2025","减速","释放","主要","视觉","教器","缺口","机器","、","自主","劳动力","陆续","2000","呈","之一","伺服电机","不断","行业","驾驶","将","面对","设备","有限","有力","技术","需求","各","提供","更","层面","专业","等","传感","状","为","主角","此时","而言","方面","命令","依然","正式","发展","由示","几十年","这是","扩大","高校","保障","工业生产","重要","智能化","计算","开设","后","课程"," ","拉开","机器人","并","环境","执行","帮助","几十","减速机","时期","关注","控制器","服务","超过","专业人才","作为","，","系统","之后","的","市场","ai","从","操控","操作","供给","热点","思考","年","了","横跨","要求","控制","俗称","快速","传感器","井喷","预计","随着","更加","而","序幕","驱动器","数字","逐年","四足","2016","三个","agv","送餐","就是","按照"],"title":"智能机器人发展","title_tokens":["机器人","机器","发展","智能"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_7","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是机器人操作系统。","text_tokens":["尝试","高效","上","，","技术","是","系统","完成","的","层面","问题","可以","操作","复杂","或者","斯坦福大学","如何","开发","越来越","团队","福大","一群","那","重要","给出","智能","大学","不是","。","有志","操作系统","青年","答案","机器人","斯坦福","对于","针对","已经","独立","非常","机器","越来","就是","人","这个","一个"],"title":"机器人操作系统","title_tokens":["操作","机器","系统","操作系统","机器人"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros","text":"2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣、做饭、收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法：既然自己做不到，那为什么不联合所有人一起干呢？如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在这几个图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面，却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS怀揣“提高机器人软件复用率”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。","text_tokens":["为什么","学术","机械","系列","至今","设计","平台","看到","第一次","应用","一次","：","向前","也","自己","家","一系列","率","人形","诞生","个人","一大","动机","性能","条","从中","你","还","不","推动","都","充足","陪","有人","那","软件","既然","实现","找到","应用软件","因为","。","毛巾","而生","代","分钟","5","已经","一切","低","这","一大步","水下","标准","精致","却","真的","做","但是","之内","一起","剪头发","物体","今日","personal","无论","统统","上","同样","是","基于","还是","完成","初期","移动机器人","容易","我们","如果","可以","苹果","零部件","叠","2","联合","复合","多","开发","大步","移动","pr2","同一","和","层面","社区","做饭","分享","原型","没有","衣服","成为","目标","款","最后","在","实验","这款","而且","光靠","台球","个","甚至","别人","聊天","一套","要","机器","、","只","整理","打","就","臂","可能","实验室","想法","其中","强悍","因","更","领域","很","专业","干","等","有","后期","才","大家","robot","有没有","？","2007","为例","效率","一些","熨烫","事情","以叠","向前走","此时","部件","框架","100","发展","身影","中","这样","重要","提高","涉及","玩耍","时至今日","轰动"," ","第一","机器人","一款","并","深知","所以","很多","软件系统","头发","帮助","促使","独立","用","虽然","无聊","做出","”","时候","所有人","图中","研究","圈","只要","这个","服务","组成","繁荣","当时","广泛","柔性","收拾","普遍","外观","，","得以","手机","系统","的","各种","电路","资金","类似","复杂","年","了","横跨","怀揣","不到","呢","一系","无论是","处理","说干就干","快速","他们","出来","什么","肯定","“","功能","用于","几个","复用","—","不想","很快","所有","ros","洗衣","就是","木头","一个"],"title":"ROS的诞生","title_tokens":["ros","诞生","的"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros_1","text":"提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["上市","下来","linux","设计","机制","完全","平台","应用","这些","：","案例","围绕","向前","也","自己","家","以","率","同理","许可","巨人","还","汽车","人才","都","本身","那","已有","软件","嵌入","推进","实现","人类","。","正如","此","时间","工业","部分","特性","windows","友好","多媒体","沉淀","直接","把","模块化","非常","这","做","制造","一起","做成","这里","上","之","各种各样","是","模块","跨平台","到","通信","我们","可以","具备","重新","多","开发","社区","和","自身","各样","分享","特点","简单","全球","核心","目标","进步","对","智能","不是","来讲","会","不要","最后","肩膀","在","c","开发工具","全人类","别人","机器","、","越来","总称","生态系","多项","成果","a","就","越来越","将","公司","b","智慧","比如","生态","技术","更","领域","做到","体系","嵌入式","有","大家","上去","新","缩短","向前走","整合","零","结晶","发展","通常","ros2","中","由","商业","这样","代表","智能化","提高","四大"," ","站","机器人","同时","给","并","集合","来","跑","远","着","很多","促使","宽松","全球化","这个","组成","被","创意","，","各种","系统","的","轮子","明智","商业化","从","尽量","造","全人","支持","采购","新增","工具","了","做法","生态系统","使用","；","他们","ros1","引擎","开源","功能","一家","长远","复用","许可证","产品","ros","多媒体系统","媒体","一步","就是","一个"],"title":"ROS的特点","title_tokens":["ros","特点","的"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros_2","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。","text_tokens":["访问","看到","应用","这些","：","大","维基百科","论坛","国家","查看","问题","增长","张图","浪潮","据库","动力","总体","几年","提出","活跃","来看","不","不同","wiki","都","大部","这一波","人数","浏览","任何","150","万","下载","新鲜","。","不多","部分","起来","已经","这","基本上","非常","这里","数据库","上","是","讨论","趋势","得到","通过","到","我们","可以","上图","多","绝大部分","开发","月","15","最为","社区","和","万左右","大部分","40","等等","全球","index","核心",".","关于","清晰","资源","网站","以上","频繁","绝大","在","各项","棒","每","乐意","无疑","助推","索引","机器","、","越来","存储","差不多","说明","次数","就","访问量","answers","250","越来越","记录","增长速度","最高","两个","其中","比如","基本","根据","很","活动","等","有","参考","大家","日常","？","情况","相关","整合","packages","25","算是","而言","其实","革命","页面","元素","发展","活跃度","中","这是","曲线","快","代表","每个","统计","百科","重要","包","其他","现在","教程"," ","开发者","机器人","给","方式","很多","地域","大有可为","迅猛","维基百","速度","80","排名","上边","人","浏览量","回答","维基","问答","作为","，","各种","新鲜事","的","从","可为","发表","更为","万人","加","了","发布","使用","近几年","呢","；","org","20","快速","用户","左右","总而言之","什么","度","研发","正在","四项","多万","功能","几个","数据","源码","程度","ros","新","就是","一个","discourse"],"title":"ROS的社区","title_tokens":["ros","的","社区"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/","text":"智能机器人开发平台介绍 机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 以操作系统为例，应用最为广泛的ROS系统在不断迭代，不过在智能时代洪流的冲击下，还是涌现出一些问题。 ROS的一些问题 ROS逐渐成为标准，大量机器人应用被贡献到社区，虽然提高了代码的通用性，但却难以发挥硬件的完整性能； 大量应用聚焦在机器人运动控制与定位导航等基础功能，智能化的应用较少； 在软件资源格外丰富的社区中，还缺少系统化的内容，帮助用户快速实现相关资源的复用。 很多开发者都在魔改ROS，去适配自己的机器人，所以机器人的研发成本非常高。从机械选型、系统定制、算法开发到数据闭环，每个过程都要付出高昂的成本，在这么高昂的成本下，做机器人是非常困难的一件事情。 在算法层面，机器人算法仍处于早期阶段，很多感知算法还停留在理论阶段，无法服务与实际场景，机器学习发展迅速，不过对于很多开发者来讲，数据的采集、标注、训练都是一个庞大的工作量，部署运行不仅十分困难，还要消耗大量的算力成本。 智能机器人涉及的领域和方法较多，目前整体的学习成本偏高，想要实现智能化应用的难度就更高，问题的出现，也带来了机遇与挑战。 地平线机器人开发平台 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。这套机器人开发平台的目的是打造软硬协同、极致优化、丰富易用的机器人开发组件与生态，由图中这几个部分组成，我们一一来看下。 平台的底层主要依托于地平线AIOT边缘AI芯片——旭日3和旭日5，内部集成了地平线最先进的伯努利2.0架构的AI 引擎，可提供 5TOPS 以上的等效算力。如此强大的算力支持，保证了智能机器人开发的基础条件。 芯片是基础建设，在此之上更重要的是一系列软件设施，正如我们电脑上的windows和linux，一套优质的操作系统，是上层应用软件开发的必要条件，TogetherROS在ROS系统的基础上，进行了大量的改良和优化，可以为开发者提供高效实用的系统环境。 在此之上，平台还会提供大量的机器人参考算法和应用功能示例，比如常用的建图、定位、导航，还有智能机器人中至关重要的智能化功能，比如一些基础算法，图像分类、图像分割、目标检测等，还有应用功能，人脸检测、人体跟踪、骨骼点检测、手势识别、语音处理等等，提供基于大量数据训练的模型，借助底层AI引擎的支持，可以快速、稳定的实现各种各样的智能应用。 同时平台还会配套一系列加速机器人开发的工具链，比如代码编写工具、系统调试工具、数据标注和训练工具等。 古月居和地平线也会共同打造机器人开发者社区，持续分享技术内容，沉淀更多开发者的智慧，更多机器人产业中的合作伙伴也会陆续加入，共同打造最为丰富的机器人开发者套件，建设智能机器人开发的生态圈。 在这个机器人开发平台之中，最为重要的就是TogetherROS系统了，起到了承上启下、连接各项功能的作用，我们将通过一系列课程为大家深入浅出的介绍。 TogetherROS的特点 在ROS系统庞大社区资源的基础上，结合智能机器人的发展和产业需求，TogetherROS应运而生。 TogetherROS有三个核心特点： 开源兼容，秉承开源精神的力量 TogetherROS和ROS系统一样，也是一套完全开源的系统，所有开发者都可以继续二次开发，接口方面和ROS2完全兼容，ROS2原有的功能也都可以继续复用，已有的机器人代码可以十分便利的迁移过来。 极致性能优化 相比ROS的通用化，TogetherROS更多考虑的是如何充分挖掘底层硬件的性能，比如提高数据传输的效率、增强人工智能处理的能力，在后续的使用案例中，大家可以充分感受到这一点。 丰富易用的软硬件组件 比如各种各样的传感器和开发套件，再比如算法模块、感知应用、机器人功能，还有提高开发效率的各种编程、部署工具。 TogetherROS系统框架 具体展开来看，TogetherROS的系统框架如图所示，其中深蓝色部分为地平线优化、新增的模块，其他是目前复用ROS2中的模块： 在系统通信的中间件部分，保留了ROS2中原本针对不同DDS的通信框架，与ROS2 foxy版本的接口完全兼容，方便复用ROS丰富工具包进行原型验证，在此之上增加了“zero-copy” 零拷贝 的通信机制，降低大数据传输时延和系统资源消耗。 在组件功能部分，TogetherROS提供“hobot CV” 视觉加速库 ，软硬件协同，可以提升CV算子性能、降低系统资源消耗；针对AI模型的推理，封装了“hobot_dnn” 功能包，可以调用底层芯片的AI引擎，简化板端AI开发与部署，释放BPU的算力。可以支持丰富的机器人传感器型号，比如相机、雷达、IMU、GPS等，节省驱动开发的时间，可以聚焦在机器人应用开发上。 除此之外，TogetherROS还会提供丰富的 软件调试和性能调优工具 ，方便用户定位问题和优化系统性能，在具体的行业应用中，还支持最小化和模块化的剪裁，利于部署在资源受限的嵌入式产品中。 总之，TogetherROS出于ROS，又不止于ROS，ROS原有的功能依然继承，重点是借助硬件能力，充分优化系统的性能，提高机器人开发的效率。","text_tokens":["机械","闭环","人工智能","平台","也","问题","如何","来看","嵌入","软硬","应用软件","定位问题","感器","操作系统","时间","条件","检测","通用","5","接口","持续","却","做","深蓝","如此","时代","传输","最小化","上","电脑","基于","模块","涌现","分类","实用","通信","场景","规控","内容","导航","点","出现","_","进行","实际","雷达","加入","成为","原型","代码","迭代","来讲","出于","会","目的","起到","各项","消耗","视觉","一一","易用","一套","训练","2022","行业","中间","将","需求","之上","数据传输","算力","层面","等","嵌入式","为例","一些","框架","零","十分困难","依然","仍","发展","6","ros2","智能化","提高","架构","冲击"," ","机遇","封装","虽然","必要","必要条件","这个","组成","系统化","作为","除此","偏高","下","组件","复杂","非常复杂","验证","新增","了","二次","还要","一系","快速","大脑","包括","开源","—","展开","重点","基础","一样","系列","完全","语音","应用","自己","以","感知","相比","由图","阶段","丰富","继续","已有","库","实现","又","逐渐","过程","付出","加速","标准","驱动","二次开发","具体","copy","算法","底层","先进","连接","动作","承上启下","高","等效","人体","强大","早期","至关","配套","套件","社区","示例","时延","推理","高昂","核心","工作量","释放","主要","aiot","极致","目前","继承","陆续","其中","停留","更","适配","效率","相关","事情","至关重要","标注","处于","迁移","-","中","通用化","少","这套","包","协同","机器人","对于","所以","优化","执行","保留","”","通用性","骨骼","挖掘","伙伴","被","dnn","芯片","系统","介绍","gps","从","古月","支持","理论","操作","年","学习","；","深入浅出","力量","结合","引擎","“","功能","难以","挑战","伯努利","中间件","算子","增强","所有","就是","旭日","困难","togetherros","软件资源","采集","无法","调试","调用","聚焦","：","依托","hobot","稳定","电机","缺少","dds","后续","不同","还有","程式","最","应运而生","软件","定位","想要","。","之中","cv","windows","秉承","这","模块化","非常","高效","还会","是","优质","居","到","打造","可以","不止","上层","开发","人工","合作伙伴","最为","和","降低","总之","分享","特点","感受","工作","一点","以上","智能","5tops","在","便利","、","剪裁","生态圈","不断","分割","涌现出","版本","智慧","比如","生态","原本","有","较","魔","传感","参考","大家","imu","作用","原有","硬件","简化","去","系统资源","选型","发挥","模型","合作","社区资源","涉及","最小","开发者","整体","建设","给","运行","保证","ai","不仅","bpu","考虑","推出","边缘","2.0","共同","foxy","工具","能力","使用","工具包","3","处理","与","用户","传感器","一代","图像","深蓝色","型号","几个","复用","增加","定位导航","产品","定制","格外","产业","如图所示","linux","迅速","完整","过来","运动","机制","大量","再","拷贝","案例","充分","大","一系列","部署","于","性能","还","除此之外","建图","都","人脸","地平线","带来","编写","正如","此","部分","受限","主控","识别","沉淀","可","改","提升","调优","设施","精神","方便","但","软硬件","跟踪","各种各样","还是","通过","链","节省","蓝色","庞大","我们","改良","多","月","洪流","编程","各样","不过","等等","目标","难度","资源","贡献","十分","要","机器","就","全新","方法","集成","信息","相机","深入","技术","提供","领域","为","方面","常用","正式","每个","重要","计算","其他","板端","课程","同时","环境","很多","帮助","利于","这么","借助","服务","广泛","地平","，","内部","各种","的","应运","手势","控制","兼容","研发","所示","一件","数据","针对","之外","据传","三个","现出","ros","zero","成本","一个"],"title":"智能机器人开发平台介绍","title_tokens":["平台","开发","机器","智能","机器人","介绍"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#_1","text":"机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 以操作系统为例，应用最为广泛的ROS系统在不断迭代，不过在智能时代洪流的冲击下，还是涌现出一些问题。","text_tokens":["信息","算法","涌现出","时代","作为","，","平台","各种各样","是","各种","系统","动作","的","：","层面","应用","等","还是","涌现","传感","为例","问题","下","以","感知","操作","一些","复杂","非常复杂","规控","电机","硬件","最为","进行","程式","各样","洪流","不过","传感器","等等","软件","大脑","包括","计算","智能","迭代","。","感器","操作系统"," ","冲击","部分","机器人","数据","在","环境","执行","主控","非常","机器","、","驱动","ros","现出","不断","一个","广泛"],"title":"智能机器人开发平台介绍","title_tokens":["平台","开发","机器","智能","机器人","介绍"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#ros","text":"ROS逐渐成为标准，大量机器人应用被贡献到社区，虽然提高了代码的通用性，但却难以发挥硬件的完整性能； 大量应用聚焦在机器人运动控制与定位导航等基础功能，智能化的应用较少； 在软件资源格外丰富的社区中，还缺少系统化的内容，帮助用户快速实现相关资源的复用。 很多开发者都在魔改ROS，去适配自己的机器人，所以机器人的研发成本非常高。从机械选型、系统定制、算法开发到数据闭环，每个过程都要付出高昂的成本，在这么高昂的成本下，做机器人是非常困难的一件事情。 在算法层面，机器人算法仍处于早期阶段，很多感知算法还停留在理论阶段，无法服务与实际场景，机器学习发展迅速，不过对于很多开发者来讲，数据的采集、标注、训练都是一个庞大的工作量，部署运行不仅十分困难，还要消耗大量的算力成本。 智能机器人涉及的领域和方法较多，目前整体的学习成本偏高，想要实现智能化应用的难度就更高，问题的出现，也带来了机遇与挑战。","text_tokens":["机械","完整","闭环","困难","软件资源","迅速","运动","无法","采集","大量","应用","聚焦","也","问题","自己","感知","部署","缺少","性能","阶段","还","都","丰富","带来","软件","定位","想要","实现","。","逐渐","通用","过程","付出","非常","标准","改","却","做","但","算法","是","高","到","庞大","场景","内容","导航","早期","开发","多","出现","社区","和","实际","高昂","不过","成为","工作","难度","代码","资源","智能","来讲","工作量","贡献","在","消耗","十分","目前","要","机器","、","就","训练","方法","停留","更","适配","领域","算力","层面","等","较","魔","相关","事情","硬件","十分困难","标注","去","仍","处于","选型","发挥","发展","中","每个","少","智能化","提高","涉及"," ","开发者","机器人","整体","机遇","对于","所以","很多","帮助","虽然","通用性","这么","服务","运行","系统化","被","，","系统","的","不仅","偏高","从","下","理论","了","学习","控制","还要","；","快速","与","用户","研发","功能","难以","一件","数据","复用","定位导航","挑战","定制","ros","基础","格外","成本","一个"],"title":"ROS的一些问题","title_tokens":["ros","的","一些","问题"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#_2","text":"2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。这套机器人开发平台的目的是打造软硬协同、极致优化、丰富易用的机器人开发组件与生态，由图中这几个部分组成，我们一一来看下。 平台的底层主要依托于地平线AIOT边缘AI芯片——旭日3和旭日5，内部集成了地平线最先进的伯努利2.0架构的AI 引擎，可提供 5TOPS 以上的等效算力。如此强大的算力支持，保证了智能机器人开发的基础条件。 芯片是基础建设，在此之上更重要的是一系列软件设施，正如我们电脑上的windows和linux，一套优质的操作系统，是上层应用软件开发的必要条件，TogetherROS在ROS系统的基础上，进行了大量的改良和优化，可以为开发者提供高效实用的系统环境。 在此之上，平台还会提供大量的机器人参考算法和应用功能示例，比如常用的建图、定位、导航，还有智能机器人中至关重要的智能化功能，比如一些基础算法，图像分类、图像分割、目标检测等，还有应用功能，人脸检测、人体跟踪、骨骼点检测、手势识别、语音处理等等，提供基于大量数据训练的模型，借助底层AI引擎的支持，可以快速、稳定的实现各种各样的智能应用。 同时平台还会配套一系列加速机器人开发的工具链，比如代码编写工具、系统调试工具、数据标注和训练工具等。 古月居和地平线也会共同打造机器人开发者社区，持续分享技术内容，沉淀更多开发者的智慧，更多机器人产业中的合作伙伴也会陆续加入，共同打造最为丰富的机器人开发者套件，建设智能机器人开发的生态圈。 在这个机器人开发平台之中，最为重要的就是TogetherROS系统了，起到了承上启下、连接各项功能的作用，我们将通过一系列课程为大家深入浅出的介绍。","text_tokens":["linux","系列","togetherros","平台","语音","调试","大量","应用","依托","也","一系列","由图","稳定","于","来看","建图","还有","丰富","最","地平线","人脸","带来","软件","定位","软硬","编写","实现","应用软件","。","此","正如","操作系统","条件","部分","检测","之中","windows","5","识别","沉淀","持续","这","可","加速","设施","算法","底层","如此","先进","高效","跟踪","上","电脑","还会","各种各样","是","基于","优质","居","链","分类","承上启下","等效","通过","打造","人体","强大","实用","我们","改良","可以","上层","内容","多","导航","开发","至关","点","配套","套件","月","合作伙伴","最为","社区","和","示例","进行","各样","加入","分享","等等","目标","以上","代码","智能","5tops","会","目的","在","起到","各项","主要","aiot","极致","一一","易用","一套","机器","、","陆续","生态圈","2022","训练","分割","行业","全新","集成","将","深入","智慧","比如","生态","技术","更","提供","之上","算力","层面","等","参考","连接","大家","作用","为","一些","至关重要","标注","常用","正式","6","中","模型","合作","这套","重要","智能化","架构","协同"," ","开发者","机器人","课程","建设","给","同时","优化","环境","帮助","骨骼","必要","必要条件","借助","伙伴","组成","这个","保证","地平","，","内部","芯片","系统","各种","的","ai","介绍","古月","下","推出","支持","组件","操作","边缘","手势","2.0","共同","年","工具","了","3","一系","深入浅出","处理","快速","与","一代","图像","引擎","功能","几个","数据","—","伯努利","基础","ros","就是","旭日","产业"],"title":"地平线机器人开发平台","title_tokens":["地平线","地平","平台","开发","机器","机器人"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#togetherros","text":"在ROS系统庞大社区资源的基础上，结合智能机器人的发展和产业需求，TogetherROS应运而生。 TogetherROS有三个核心特点： 开源兼容，秉承开源精神的力量 TogetherROS和ROS系统一样，也是一套完全开源的系统，所有开发者都可以继续二次开发，接口方面和ROS2完全兼容，ROS2原有的功能也都可以继续复用，已有的机器人代码可以十分便利的迁移过来。 极致性能优化 相比ROS的通用化，TogetherROS更多考虑的是如何充分挖掘底层硬件的性能，比如提高数据传输的效率、增强人工智能处理的能力，在后续的使用案例中，大家可以充分感受到这一点。 丰富易用的软硬件组件 比如各种各样的传感器和开发套件，再比如算法模块、感知应用、机器人功能，还有提高开发效率的各种编程、部署工具。","text_tokens":["一样","togetherros","过来","人工智能","完全","应用","再","：","案例","充分","也","相比","感知","如何","部署","性能","后续","还有","都","应运而生","丰富","继续","已有","软硬","。","感器","通用","秉承","接口","这","二次开发","精神","底层","算法","软硬件","传输","上","各种各样","是","模块","到","庞大","可以","多","开发","套件","人工","社区","和","编程","各样","特点","感受","核心","一点","代码","资源","智能","在","极致","十分","易用","便利","一套","机器","、","比如","需求","更","数据传输","有","大家","传感","效率","原有","方面","硬件","迁移","发展","ros2","中","通用化","社区资源","提高"," ","开发者","机器人","优化","挖掘","，","各种","系统","的","应运","考虑","组件","工具","能力","二次","使用","兼容","处理","传感器","力量","结合","开源","功能","数据","复用","据传","三个","增强","ros","基础","所有","产业"],"title":"TogetherROS的特点","title_tokens":["特点","的","togetherros"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#togetherros_1","text":"具体展开来看，TogetherROS的系统框架如图所示，其中深蓝色部分为地平线优化、新增的模块，其他是目前复用ROS2中的模块： 在系统通信的中间件部分，保留了ROS2中原本针对不同DDS的通信框架，与ROS2 foxy版本的接口完全兼容，方便复用ROS丰富工具包进行原型验证，在此之上增加了“zero-copy” 零拷贝 的通信机制，降低大数据传输时延和系统资源消耗。 在组件功能部分，TogetherROS提供“hobot CV” 视觉加速库 ，软硬件协同，可以提升CV算子性能、降低系统资源消耗；针对AI模型的推理，封装了“hobot_dnn” 功能包，可以调用底层芯片的AI引擎，简化板端AI开发与部署，释放BPU的算力。可以支持丰富的机器人传感器型号，比如相机、雷达、IMU、GPS等，节省驱动开发的时间，可以聚焦在机器人应用开发上。 除此之外，TogetherROS还会提供丰富的 软件调试和性能调优工具 ，方便用户定位问题和优化系统性能，在具体的行业应用中，还支持最小化和模块化的剪裁，利于部署在资源受限的嵌入式产品中。 总之，TogetherROS出于ROS，又不止于ROS，ROS原有的功能依然继承，重点是借助硬件能力，充分优化系统的性能，提高机器人开发的效率。","text_tokens":["togetherros","完全","机制","调试","调用","聚焦","拷贝","：","应用","充分","大","hobot","问题","部署","于","dds","性能","除此之外","还","不同","来看","丰富","地平线","软件","嵌入","定位","软硬","库","又","。","此","感器","时间","定位问题","部分","cv","受限","接口","加速","模块化","驱动","提升","具体","调优","copy","深蓝","方便","底层","软硬件","传输","最小化","上","还会","是","模块","节省","蓝色","通信","可以","不止","开发","和","降低","进行","时延","推理","_","雷达","总之","原型","资源","出于","在","释放","消耗","视觉","目前","机器","、","剪裁","继承","行业","中间","相机","版本","其中","比如","原本","之上","数据传输","提供","算力","等","嵌入式","传感","imu","效率","为","原有","框架","零","硬件","简化","依然","系统资源","-","ros2","中","模型","包","其他","最小","提高","板端","协同"," ","机器人","优化","封装","保留","”","利于","借助","地平","，","dnn","芯片","系统","的","ai","除此","gps","bpu","支持","组件","验证","新增","foxy","了","工具","能力","工具包","；","兼容","与","用户","传感器","深蓝色","型号","引擎","所示","“","功能","数据","针对","复用","之外","增加","据传","中间件","算子","展开","产品","ros","重点","zero","如图所示"],"title":"TogetherROS系统框架","title_tokens":["系统","框架","togetherros"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/","text":"TogetherROS与ROS性能对比 ROS2 vs ROS1 先来看下两个大版本ROS的系统架构。 在这张图中，左侧是ROS1，右侧是ROS2，两者最明显的变化，就是Master。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery——自发现机制，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的DDS系统。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于共享内存的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了，Linux、windows、MacOS、RTOS都可以。 ROS2系统架构 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个ROS Middleware，简称RMW，也就是制定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 TogetherROS vs ROS2 TogetherROS就是在这样一个ROS2架构的基础上，继续进行了优化，原本DDS通信的部分依然保留，可以适配不同厂家的DDS通信系统，在此之上，针对功能性的组件进行了众多优化和补充，在上一节中我们也给大家介绍了这套框架。 优化之后的TogetherROS系统，在数据传输和AI处理方面，到底有多少提升呢，我们来看具体的对比数据。 通信效率量化对比 先来看下操作系统至关重要的数据通信功能，我们针对ROS中最为常用的大数据传输模式——话题通信进行了测试。 在单元测试中，使用同样的算力平台，分别安装TogetherROS和ROS2系统，然后在其中运行一个话题通信的发布者与订阅者，实现不同数据量的传输。经过数据统计，我们可以看到，在数据通信延时方面，随着数据量的增加，ROS2系统在通信延时、发送端和接收端的CPU占用率上，都会程线性增加，可以预想，在数据量较大的情况下，系统的通信负荷会非常严重。 而在TogetherROS系统中，由于使用了零拷贝的传输机制，传输数据量的增加，并不会导致延时和CPU占用率的增加，极大程度节省了系统资源。 在场景测试中，我们尽量模拟真实机器人的应用，使用TogetherROS和ROS2系统连接了多个相机、雷达和里程计等传感器，作为大量数据的输入来源，继续进行了测试，结果和之前的单元测试类似，ROS2系统此时的CPU占用率已经超过90%，想要运行数据传输之外的应用功能，几乎是不可能的，通信延时也达到了15ms以上，这在某些实时性要求比较高的应用中，是不可接受的。 而在TogetherROS系统中，CPU占用和通信延时也微乎其微，更多系统资源都可以让给应用处理。 CV图像处理量化对比 再来看下智能机器人中视觉感知层面的处理，TogetherROS系统集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 模型推理 在AI处理方面，ROS2原生系统中并没有太多支持，只能依赖社区中的资源，很难充分发挥硬件的算力。 对此，TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 传感器驱动管理 在传感器层面，是大量数据传输的来源，TogetherROS也重点进行了优化，针对常用的传感器类型，系统中内置参数配置、系统调用和内存管理机制，同样是在芯片的硬件层面进行了加速和隔离，保障数据流的稳定生成。 机器人开发工具 机器人开发过程中的性能优化和调试，也是非常繁杂的工作，TogetherROS系统自带火焰图等工具，可以实现系统层面的调优和测试，便于开发者挖掘系统性能。 以上这些都是TogetherROS在ROS系统之上的优化和补充，未来更多特性也会不断迭代推出，让智能机器人的开发更加简单。","text_tokens":["么","先","人工智能","平台","进程","也","张图","问题","时","率","风格","如何","当然","不","来看","软硬","应用层","感器","操作系统","时间","特性","量","5g","接口","乱麻","通信协议","做","这里","传输","一团乱","上","切换","基于","只不过","ceo","严重","通信","场景","较大","2","众多","该","走","进行","实际","只能","雷达","/","例子","没有","简单","代码","迭代","频繁","图","来讲","会","视觉","消耗","而且","开发工具","一套","训练","可能","中间","将","两个","花费","基本","需求","举","之上","安装","数据传输","算力","层面","middleware","等","？","很难","udp","框架","零","其实","依然","打交道","ros2","对此","保障","提高","架构"," ","得","并","封装","国际","话题","这个","作为","交道","下","组件","类似","可选","复杂","不太","数据通","数据通信","了","混合","依赖","而已","呢","最大","滤波","模式","消失","开源","通信接口","随着","模拟","而","左侧","经过","—","者","分发","很快","重点","基础","层","一样","简称","设计","应用","相比","感知","加密","除了","丰富","继续","库","找到","实现","产品开发","过程","master","繁杂","已经","加速","标准","驱动","交给","开发成本","具体","中间层","达到","底层","补充","交付","连接","它","库会","高","自家","如果","至关","发送","社区","倍","推理","明显","不是","接收","每","主要","订阅","请","从而","可选项","收","一节","共享内存","其中","线性","未来","里程","更","图像处理","适配","一团乱麻","广泛应用","效率","熟悉","至关重要","vs","然后","中","统计","opensplice","这套","生成","协同","机器人","对于","所以","优化","畸变","保留","真实","系统集成","opencv","某","哪些","时候","挖掘","不可","dnn","芯片","系统","介绍","量化","帧","尽量","支持","操作","要求","移植","右侧","之前","会程","ros1","变得","写","功能性","引擎","数据流","功能","更加","占用","算子","分别","所有","就是","用率","按照","togetherros","太","无法","调试","调用","自","这些","hobot","另外","稳定","彼此","由于","调教","dds","国际标准","不同","还有","指挥","定义","最","缩放","结果","软件","另","想要","客户","。","cv","适用","windows","这","把","非常","程序","不爽","厂商","单元测试","同样","角色","是","传输数据","诟病","发成","火焰","制定","到","macos","可以","厂家","共享","开发","完","人工","最为","和","降低","协议","极大","参数","间层","到底","工作","以上","简单明了","省略","智能","在","导致","校正","变化","接收端","让给","、","不断","实时","版本","比如","原本","负荷","有","大家","传感","不会","来源","里","此时","硬件","便于","系统资源","只有","发挥","模型","内置","这样","内存","会成","开发者","给","软件系统","延时","实时性","啦","用","轻松","满足","隔离","物","运行","fastrtps","之后","里程计","ai","需要","某些","bpu","更换","客户端","tcp","推出","下边","建立","工具","配置","使用","3","处理","管理机制","与","用户","传感器","选择","减少","图像","原生","肯定","唯一","有且","接受","一家","程度","复用","增加","产品","linux","过来","常","类型","机制","看到","内","大量","再","发","拷贝","充分","大","输入","90%","接入","rmw","部署","于","性能","都","充足","地平线","带来","多倍","两者","此","部分","改","提升","调优","但","软硬件","端","通过","节省","解决","选项","15ms","我们","多","重新","编程","不过","预想","目标","听","微乎其微","资源","听说","占用率","成","自带","符合","rtos","多个","甚至","丢","要","机器","发现","就","多少","方法","集成","信息","相机","公司","提供","做到","不用","突然","比较","情况","为","为了","方面","联网","常用","属性","旋转","商业","每个","重要","其他","cpu","让","完善","discovery","数据量","节点","很多","几乎","能够","单元","一团","只要","借助","广泛","超过","延迟","地平","，","各种","的","高斯","发布","管理","兼容","一种","理器","名字","应该","一行","数据","针对","之外","对比","据传","好","充分发挥","ros","例如","管理器","发布者","测试","成本","一个"],"title":"性能对比","title_tokens":["性能","对比"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#togetherrosros","text":"","text_tokens":[],"title":"TogetherROS与ROS性能对比","title_tokens":["与","对比","togetherros","ros","性能"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#ros2-vs-ros1","text":"先来看下两个大版本ROS的系统架构。 在这张图中，左侧是ROS1，右侧是ROS2，两者最明显的变化，就是Master。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery——自发现机制，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的DDS系统。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于共享内存的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了，Linux、windows、MacOS、RTOS都可以。","text_tokens":["linux","先","一样","机制","内","应用","调用","自","这些","再","大量","大","进程","也","张图","另外","稳定","彼此","dds","不","来看","指挥","都","最","两者","应用层","客户","找到","。","操作系统","windows","master","接口","这","把","乱麻","标准","驱动","通信协议","程序","中间层","但","底层","一团乱","上","连接","角色","是","基于","通过","只不过","它","ceo","库会","选项","macos","通信","如果","我们","可以","共享","至关","开发","和","走","进行","雷达","协议","不过","间层","简单","明显","听","简单明了","频繁","接收","会","成","在","主要","变化","rtos","一套","、","请","从而","可选项","发现","就","中间","方法","信息","将","版本","两个","公司","共享内存","比如","提供","安装","突然","一团乱麻","里","udp","至关重要","只有","打交道","ros2","中","重要","内存","架构","让"," ","得","会成","discovery","完善","节点","封装","很多","哪些","时候","一团","这个","，","系统","的","交道","需要","更换","客户端","下","tcp","下边","操作","类似","可选","复杂","不太","建立","了","依赖","发布","管理","右侧","而已","理器","消失","图像","肯定","ros1","变得","写","通信接口","名字","有且","更加","数据","而","左侧","—","好","ros","所有","管理器","就是","层","一个"],"title":"ROS2 vs ROS1","title_tokens":["ros2","ros1","vs"," "]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#ros2","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个ROS Middleware，简称RMW，也就是制定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。","text_tokens":["么","先","一样","简称","过来","常","设计","无法","应用","发","这些","再","也","问题","相比","率","接入","时","rmw","稳定","如何","部署","于","加密","dds","性能","当然","国际标准","不同","除了","还有","不","都","定义","丰富","最","带来","软件","另","想要","实现","。","产品开发","适用","master","5g","接口","这","把","标准","改","交给","通信协议","做","开发成本","程序","不爽","厂商","底层","这里","切换","交付","是","基于","诟病","发成","制定","解决","通信","我们","如果","可以","自家","场景","厂家","多","重新","开发","完","社区","该","协议","不过","/","例子","简单","目标","代码","省略","听说","频繁","不是","来讲","在","符合","每","变化","多个","丢","要","、","就","收","版本","比如","基本","需求","更","提供","适配","安装","举","层面","middleware","等","不用","广泛应用","？","为","为了","熟悉","udp","联网","其实","属性","然后","ros2","商业","中","每个","这样","opensplice","其他","提高"," ","得","给","对于","并","软件系统","所以","能够","用","轻松","国际","某","满足","物","只要","这个","广泛","延迟","，","fastrtps","系统","各种","的","更换","tcp","类似","了","配置","移植","最大","用户","一种","选择","减少","肯定","ros1","唯一","写","开源","功能","一家","应该","一行","数据","复用","之外","好","产品","ros","就是","成本","按照","一个"],"title":"ROS2系统架构","title_tokens":["ros2","架构","系统"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#togetherros-vs-ros2","text":"TogetherROS就是在这样一个ROS2架构的基础上，继续进行了优化，原本DDS通信的部分依然保留，可以适配不同厂家的DDS通信系统，在此之上，针对功能性的组件进行了众多优化和补充，在上一节中我们也给大家介绍了这套框架。 优化之后的TogetherROS系统，在数据传输和AI处理方面，到底有多少提升呢，我们来看具体的对比数据。","text_tokens":["一节","补充","togetherros","传输","上","，","原本","系统","适配","的","之上","之后","数据传输","ai","介绍","有","大家","也","通信","我们","可以","组件","厂家","框架","方面","dds","了","众多","依然","不同","和","呢","进行","来看","处理","ros2","继续","中","到底","这样","这套","功能性","架构","。","此","功能"," ","部分","在","针对","给","数据","优化","保留","对比","据传","基础","提升","具体","就是","多少","一个"],"title":"TogetherROS vs ROS2","title_tokens":["ros2","vs"," ","togetherros"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_1","text":"先来看下操作系统至关重要的数据通信功能，我们针对ROS中最为常用的大数据传输模式——话题通信进行了测试。 在单元测试中，使用同样的算力平台，分别安装TogetherROS和ROS2系统，然后在其中运行一个话题通信的发布者与订阅者，实现不同数据量的传输。经过数据统计，我们可以看到，在数据通信延时方面，随着数据量的增加，ROS2系统在通信延时、发送端和接收端的CPU占用率上，都会程线性增加，可以预想，在数据量较大的情况下，系统的通信负荷会非常严重。 而在TogetherROS系统中，由于使用了零拷贝的传输机制，传输数据量的增加，并不会导致延时和CPU占用率的增加，极大程度节省了系统资源。 在场景测试中，我们尽量模拟真实机器人的应用，使用TogetherROS和ROS2系统连接了多个相机、雷达和里程计等传感器，作为大量数据的输入来源，继续进行了测试，结果和之前的单元测试类似，ROS2系统此时的CPU占用率已经超过90%，想要运行数据传输之外的应用功能，几乎是不可能的，通信延时也达到了15ms以上，这在某些实时性要求比较高的应用中，是不可接受的。 而在TogetherROS系统中，CPU占用和通信延时也微乎其微，更多系统资源都可以让给应用处理。","text_tokens":["先","togetherros","平台","看到","机制","大量","应用","拷贝","大","输入","90%","也","由于","不同","来看","不","都","继续","结果","想要","实现","。","感器","操作系统","量","已经","这","非常","单元测试","达到","端","传输","上","同样","传输数据","连接","是","节省","高","严重","15ms","通信","我们","可以","场景","较大","多","至关","发送","最为","和","进行","雷达","极大","预想","微乎其微","以上","资源","接收","会","占用率","在","导致","订阅","接收端","多个","机器","、","让给","可能","实时","相机","其中","线性","里程","更","数据传输","安装","算力","负荷","等","传感","不会","情况","来源","比较","此时","零","方面","至关重要","常用","系统资源","然后","ros2","中","统计","重要","cpu"," ","数据量","机器人","并","真实","几乎","延时","单元","实时性","话题","运行","超过","作为","，","不可","系统","里程计","的","某些","尽量","下","操作","类似","数据通","数据通信","了","要求","发布","使用","处理","与","传感器","模式","之前","会程","随着","模拟","功能","接受","占用","数据","针对","而","程度","经过","—","增加","之外","者","据传","分别","ros","发布者","测试","用率","一个"],"title":"通信效率量化对比","title_tokens":["量化","对比","通信","效率"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#cv","text":"再来看下智能机器人中视觉感知层面的处理，TogetherROS系统集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。","text_tokens":["togetherros","应用","再","hobot","感知","风格","率","性能","来看","地平线","缩放","软件","多倍","软硬","库","实现","。","cv","接口","加速","提升","具体","底层","软硬件","上","通过","到","我们","可以","2","开发","降低","编程","进行","倍","资源","智能","在","视觉","消耗","校正","而且","甚至","机器","、","方法","集成","更","做到","层面","等","效率","硬件","便于","常用","系统资源","旋转","中","协同"," ","机器人","畸变","系统集成","opencv","运行","地平","，","芯片","系统","的","帧","下","高斯","了","混合","3","处理","兼容","与","滤波","图像","引擎","对比","算子","分别","例如","测试"],"title":"CV图像处理量化对比","title_tokens":["对比","图像","图像处理","量化","cv","处理"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_2","text":"在AI处理方面，ROS2原生系统中并没有太多支持，只能依赖社区中的资源，很难充分发挥硬件的算力。 对此，TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。","text_tokens":["集成","底层","togetherros","花费","太","人工智能","上","，","dnn","芯片","系统","提供","的","算力","ai","充分","基于","不用","应用","hobot","bpu","支持","可以","很难","调教","多","开发","部署","方面","硬件","了","众多","依赖","人工","使用","社区","和","实际","发挥","只能","处理","ros2","对此","中","模型","推理","没有","充足","保障","原生","这套","资源","库","开源","引擎","智能","。","时间"," ","开发者","在","数据","并","很多","充分发挥","分发","很快","系统集成","啦","就","训练","借助"],"title":"模型推理","title_tokens":["模型","推理"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_3","text":"在传感器层面，是大量数据传输的来源，TogetherROS也重点进行了优化，针对常用的传感器类型，系统中内置参数配置、系统调用和内存管理机制，同样是在芯片的硬件层面进行了加速和隔离，保障数据流的稳定生成。","text_tokens":["togetherros","传输","类型","，","机制","同样","是","大量","数据传输","系统","的","调用","层面","芯片","传感","也","来源","稳定","了","硬件","配置","管理","常用","和","进行","管理机制","中","内置","传感器","参数","保障","生成","数据流","内存","。","感器","数据","在","针对","优化","据传","加速","重点","、","隔离"],"title":"传感器驱动管理","title_tokens":["传感器","驱动","感器","管理","传感"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_4","text":"机器人开发过程中的性能优化和调试，也是非常繁杂的工作，TogetherROS系统自带火焰图等工具，可以实现系统层面的调优和测试，便于开发者挖掘系统性能。 以上这些都是TogetherROS在ROS系统之上的优化和补充，未来更多特性也会不断迭代推出，让智能机器人的开发更加简单。","text_tokens":["补充","togetherros","未来","，","调试","是","之上","系统","火焰","的","这些","层面","更","等","也","可以","推出","多","开发","工具","性能","便于","和","挖掘","都","中","工作","简单","以上","实现","迭代","图","智能","。","让"," ","开发者","机器人","特性","会","自带","过程","在","更加","优化","繁杂","非常","机器","ros","测试","调优","不断"],"title":"机器人开发工具","title_tokens":["开发工具","开发","机器","工具","机器人"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/","text":"TogetherROS应用场景 相比手机、电脑等通用平台，机器人的类型可是千变万化，构建机器人操作系统的难度就远比手机和电脑的操作系统要复杂很多。机器人的主流应用大致可以分为 服务机器人、工业机器人、特种机器人 三个方向，无论是在哪一方向，都会面临很多问题。比如传感器、执行器等器件选型复杂，不同场景下需要的性能和参数都有所不同，这就要求操作系统得兼容尽量多的器件。 不同场景下的计算平台算力和资源差异很大，一般都需要进行定制化的裁剪和优化，这就得有一系列工具便于系统的定制和裁剪。每个场景中的应用功能变化也很大，各种算法的集成和开发要尽量简单，算法基于的数据也在持续迭代，需要一套工具链来提供迭代和升级。 针对各种各样的需求变化，TogetherROS系统都提供了支持。 服务机器人 在服务机器人领域，场景和功能尤其复杂，有家里的扫地机器人，有餐厅里的送餐机器人，有咖啡店里的双臂机器人，还有物流送货的飞行机器人，虽然每一个机器人平台的构型不同，但都需要动态处理多种多样的环境变化，这就需要TogetherROS系统基于大量数据的AI处理和丰富的组件功能支持，快速推动各种功能的落地。 工业机器人 在工业机器人领域，目前的机器人主要以工业机械臂和物流移动机器人形态为主，场景相比服务机器人要标准很多，核心目的是要提高生产效率，这就要求机器人可以长期稳定的运行，同时实时处理各项运动功能，TogetherROS系统可裁剪和性能稳定等特点，都可以符合要求。 特种机器人 而在特种机器人的应用领域，结合了服务和工业场景中的不少特点，机器人形态多变，得动态处理各种复杂场景里的事件，例如火灾、地震、管道等场景，更是会发生很多不可预料的情况，TogetherROS系统中的AI处理可以较好的保障不同环境中的感知效果，同时端云联动，可以实现大量数据的训练和部署，不断提高对复杂环境的处理能力。 可见，TogetherROS系统充分考虑了众多应用场景的需求，不仅可以满足智能机器人开发过程中的每一个环节，也考虑到了机器人未来在产业中的应用效果。","text_tokens":["很大","togetherros","系列","机械","类型","平台","运动","地震","送货","大量","应用","充分","大致","更是","升级","也","问题","以","相比","一系列","稳定","感知","一","动机","部署","性能","不同","环节","咖啡","还有","推动","都","火灾","丰富","实现","。","工业","感器","操作系统","生产","通用","过程","尤其","哪","化","这","持续","可","多变","标准","双臂","构建","但","算法","无论","电脑","差异","各种各样","基于","是","产业","到","移动机器人","效果","为主","可以","预料","场景","动态","千变万化","多","开发","移动","不少","众多","执行器","长期","和","进行","各样","参数","特点","简单","核心","难度","资源","对","智能","迭代","会","目的","在","形态","特种","每","主要","各项","变化","符合","目前","一套","要","机器","、","端云","就","臂","训练","实时","器件","方向","实时处理","不断","集成","构型","未来","比如","需求","提供","领域","面临","算力","等","有","较","传感","效率","情况","里","充分考虑","发生","便于","比","分为","选型","多种","可见","中","每个","保障","落地","计算","提高","扫地","可是"," ","有所不同","机器人","得","同时","管道","优化","很多","远","执行","餐厅","环境","事件","物流","咖啡店","虽然","满足","联动","服务","运行","主流","，","不可","各种","手机","系统","的","多样","ai","需要","不仅","考虑","尽量","下","支持","操作","裁剪","组件","复杂","工具","要求","了","能力","一系","链来","无论是","多种多样","兼容","处理","快速","传感器","结合","有所","飞行","功能","一般","数据","针对","而","应用领域","好","三个","家里","送餐","定制","例如","符合要求","一个"],"title":"应用场景","title_tokens":["应用","场景"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#togetherros","text":"相比手机、电脑等通用平台，机器人的类型可是千变万化，构建机器人操作系统的难度就远比手机和电脑的操作系统要复杂很多。机器人的主流应用大致可以分为 服务机器人、工业机器人、特种机器人 三个方向，无论是在哪一方向，都会面临很多问题。比如传感器、执行器等器件选型复杂，不同场景下需要的性能和参数都有所不同，这就要求操作系统得兼容尽量多的器件。 不同场景下的计算平台算力和资源差异很大，一般都需要进行定制化的裁剪和优化，这就得有一系列工具便于系统的定制和裁剪。每个场景中的应用功能变化也很大，各种算法的集成和开发要尽量简单，算法基于的数据也在持续迭代，需要一套工具链来提供迭代和升级。 针对各种各样的需求变化，TogetherROS系统都提供了支持。","text_tokens":["很大","系列","togetherros","类型","平台","应用","大致","升级","也","问题","相比","一系列","一","性能","不同","都","。","工业","感器","操作系统","通用","哪","化","这","持续","构建","算法","无论","电脑","差异","各种各样","基于","可以","场景","千变万化","多","开发","执行器","和","进行","各样","参数","简单","难度","资源","迭代","会","在","特种","变化","一套","要","机器","、","就","器件","方向","集成","比如","需求","提供","面临","算力","等","有","传感","便于","比","分为","选型","中","每个","计算","可是"," ","有所不同","机器人","得","优化","很多","远","执行","服务","主流","，","各种","手机","系统","的","需要","尽量","下","支持","操作","裁剪","复杂","工具","要求","了","一系","链来","无论是","兼容","传感器","有所","功能","一般","数据","针对","三个","定制"],"title":"TogetherROS应用场景","title_tokens":["应用","场景","togetherros"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_1","text":"在服务机器人领域，场景和功能尤其复杂，有家里的扫地机器人，有餐厅里的送餐机器人，有咖啡店里的双臂机器人，还有物流送货的飞行机器人，虽然每一个机器人平台的构型不同，但都需要动态处理多种多样的环境变化，这就需要TogetherROS系统基于大量数据的AI处理和丰富的组件功能支持，快速推动各种功能的落地。","text_tokens":["但","togetherros","构型","，","平台","送货","大量","基于","系统","领域","的","多样","ai","各种","需要","有","里","支持","组件","场景","动态","复杂","一个","不同","和","咖啡","还有","推动","都","多种多样","处理","多种","丰富","快速","落地","扫地","飞行","。","功能","机器人","在","数据","尤其","每","环境","变化","餐厅","这","物流","家里","送餐","机器","咖啡店","双臂","虽然","就","服务"],"title":"服务机器人","title_tokens":["机器人","机器","服务"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_2","text":"在工业机器人领域，目前的机器人主要以工业机械臂和物流移动机器人形态为主，场景相比服务机器人要标准很多，核心目的是要提高生产效率，这就要求机器人可以长期稳定的运行，同时实时处理各项运动功能，TogetherROS系统可裁剪和性能稳定等特点，都可以符合要求。","text_tokens":["机械","togetherros","，","运动","是","系统","领域","的","等","移动机器人","为主","效率","可以","以","相比","场景","稳定","裁剪","动机","移动","要求","性能","长期","和","都","处理","特点","核心","提高","就","。","工业","生产","功能","机器人","目的","在","形态","同时","各项","主要","很多","运行","符合","符合要求","这","可","目前","物流","要","机器","标准","臂","实时","实时处理","服务"],"title":"工业机器人","title_tokens":["机器人","工业","机器"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_3","text":"而在特种机器人的应用领域，结合了服务和工业场景中的不少特点，机器人形态多变，得动态处理各种复杂场景里的事件，例如火灾、地震、管道等场景，更是会发生很多不可预料的情况，TogetherROS系统中的AI处理可以较好的保障不同环境中的感知效果，同时端云联动，可以实现大量数据的训练和部署，不断提高对复杂环境的处理能力。 可见，TogetherROS系统充分考虑了众多应用场景的需求，不仅可以满足智能机器人开发过程中的每一个环节，也考虑到了机器人未来在产业中的应用效果。","text_tokens":["togetherros","地震","大量","应用","充分","更是","也","感知","部署","不同","环节","火灾","实现","。","工业","过程","多变","到","效果","预料","可以","场景","动态","开发","不少","众多","和","特点","对","智能","会","在","形态","特种","每","机器","、","端云","不断","训练","未来","需求","领域","等","较","情况","里","充分考虑","发生","可见","中","保障","提高"," ","管道","得","机器人","同时","环境","很多","事件","满足","联动","服务","，","不可","各种","系统","的","ai","不仅","考虑","复杂","了","能力","处理","结合","而","数据","应用领域","好","例如","产业","一个"],"title":"特种机器人","title_tokens":["机器人","机器","特种"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/","text":"旭日X3派介绍 TogetherROS是一个软件层面的系统，要想使用它，当然得找一个硬件层面的计算平台，安装之后才能使用啦。 之前我们提到，TogetherROS会基于地平线的AI芯片，充分发挥硬件性能，我们如何使用这颗芯片呢？ 旭日X3派 没问题，地平线已经为我们准备好了，那就是搭载旭日X3芯片的机器人开发板——旭日X3派。 第一眼看上去，大家是否会想到树莓派呢？没错，为了适应开发者的使用习惯，兼容市面上大量已有的模块，旭日X3派的整体外观和接口形态都接近树莓派，不过面向的开发对象以及板卡的计算实力，和树莓派就完全不同了。 类似这些常用的传感器，旭日X3派统统都可以支持，未来还有更多机器人套件会出现在大家身边。 大家可以在这张表中，看到旭日X3派的硬件资源，CPU是四核A53，频率1.2Hz，在系统内还可以进行超频，BPU就是硬件级的AI引擎，这是旭日X3派相比市面上其他开发板，最大的不同，也是核心性能的主要来源，类似于业界常听到的NPU，这里使用的是地平线机器人独有的伯努利2.0架构，可以提供5Tops的等效算力支持。 内存方面，大家可以选择2GB或者4GB的版本，存储使用的是SD卡，我们可以自行选择，只要大于8GB就可以啦。 在多媒体方面，旭日X3派支持硬件级别的H265和H264编解码，常用的图像和视频都可以流畅播放。 接口方面，尽量可以满足我们常用外接设备和开发的需求，这里是一个CSI的相机接口，板载USB有3个，包含1个USB3.0和2个USB2.0，这里是一个板载的调试串口，我们可以通过它获取系统层面的很多调试信息，也可以与板卡进行通信。 板卡上也搭载了有线网络和无线网络，这个有线网口我们可以直接用网线连接到电脑，就可以在电脑上远程登录和板卡通信了，或者连接到路由器，让板卡直接上网，无线网络和蓝牙是一个二合一的模块，我们也可以直接通过wiki，让板卡连接到某个网络中。 显示接口主要是这里的HDMI，如果我们先要看到系统界面，或者后续很多视觉例程的识别效果，都可以通过HDMI外接一个显示器进行显示。 最后还有至关重要的扩展接口，有40个引脚，和树莓派的接口定义一致，什么GPIO、串口、I2C、SPI等等，一应俱全。 这块板卡我们在使用的时候，推荐使用5V3A的电源，通过TypeC线连接到这里供电，官方提供的系统目前是Ubuntu20.04，使用起来和原生系统没有太大差别。 总体来讲， 旭日X3派是一款面向生态开发者的嵌入式AI开发板，接口兼容树莓派，具有5Tops的端侧推理算力，以及4核ARM A53的处理能力。 面对个人开发者，旭日X3派可以让每一位开发者拥有自己的AI开发套件，不再受开发板高昂的价格限制，面对高等院校，使用旭日X3派开发套件探索AI和机器人应用是学习的开始，有助于学生快速入门人工智能与机器人开发，面对产业，旭日X3派以及地平线的AI工具链，可以帮助客户将产品尽快推向市场，快速落地智能机器人方向的解决方案。 旭日X3M芯片 在旭日X3派上，最为核心的当然就是这颗AI芯片了，这是关于芯片的具体信息，供大家参考。 值得一提的是，随着芯片的技术迭代，2023年，地平线将推出X5芯片，比较大的变化是CPU升级到了8核A55，主频提升到1.8GHz，BPU的算力也将达到8Tops，还加入了GPU，以及更多可扩展的接口。 在使用旭日X3派的过程中，大家也可以期待旭日X5派了。 旭日X3派接口 好啦，还是回到旭日X3派的开发接口上来，我们再做一个整理，这些就是我们使用开发板进行智能机器人开发过程中，最为常用的接口啦。 大家目前在树莓派或者其他开发板上使用的绝大部分模块，基本都可以在旭日X3派上复用，同时还有更多智能化的玩法等着大家。 关于40Pin扩展接口的序号排布，大家可以看这里，引脚的序号是从靠近HDMI板卡内测的开始算起，是引脚1，然后依次蛇形计数，分别是1、2、3、4、5，一直到这里是39和40。 上图是40PIN扩展接口的详细定义，有3.3V和5V的电源信号，有I2C、I2S、SPI、UART等通信接口，还有很多可动态配置的GPIO信号，基本可以满足各种各样的机器人开发啦。 好啦，关于旭日X3派这块开发板我们已经了解清楚了，具体该如何使用呢，我们后续操作起来。","text_tokens":["先","h264","有助","人工智能","回到","平台","也","问题","硬件资源","如何","当然","推向","期待","嵌入","感器","实力","5","接口","x3m","做","接近","统统","这里","上","电脑","基于","2gb","模块","尽快","效果","通信","上图","2","a53","探索","出现","该","进行","级别","编解码","起","加入","没有","供电","值得一提的是","迭代","来讲","会","最后","形态","视觉","差别","张表中","串口","a55","将","看","无线网","二合一","面对","基本","需求","安装","算力","层面","嵌入式","等","？","超频","i2c","看上","有线","引脚","看上去","这是","智能化","架构"," ","得","着","高等","线网","蓝牙","这个","外观","类似","计数","俱全","了","3.3","呢","最大","快速","什么","供","通信接口","随着","面上","远程","了解","—","无线","分发","具有","调试信息","1.2","电源","5v3a","完全","应用","升级","获取","自己","8tops","相比","sd","个人","合一","板卡","已有","4gb","序号","过程","面向","没","已经","直接","播放","常听到","具体","达到","找","连接","v","x3","它","对象","等效","x5","如果","蛇形","至关","套件","接口定义","推理","高昂","核心","关于","卡","接设备","路由","8gb","每","主要","流畅","目前","想","登录","四核","方向","未来","更","一位","限制","至关重要","然后","有助于","中","大于","usb","第一","机器人","玩法","时候","扩展","方案","推荐","芯片","系统","介绍","尽量","支持","操作","年","学习","之前","gpu","引擎","搭载","靠近","伯努利","一应俱全","分别","值得","解码","就是","旭日","8","togetherros","太","调试","这些","typec","一应","适应","5v","后续","不同","还有","定义","大部","软件","arm","客户","。","i2s","usb3.0","起来","多媒体","这","40pin","一直","1.8","是从","uart","是","拥有","到","可以","派","动态","开始","开发","网线","人工","板载","主频","官方","最为","和","推向市场","40","大部分","不再","智能","有线网","5tops","绝大","在","路由器","变化","个","、","存储","二合","助于","版本","例程","某个","设备","生态","有","参考","大家","传感","来源","核","上去","解决方案","硬件","算","发挥","落地","内存","内测","gpio","以及","开发者","整体","啦","独有","用","院校","满足","h265","自行","开发板","提到","之后","ubuntu20.04","ai","bpu","ghz","推出","显示器","2.0","工具","能力","配置","使用","3","处理","与","才能","传感器","选择","学生","图像","原生","排布","市面","spi","是否","复用","想到","准备","产品","外","hz","媒体","产业","看到","大量","内","清楚","再","充分","大","听到","高等院校","或者","总体","于","性能","还","wiki","都","地平线","那","口","详细","1","部分","2023","上网","识别","可","提升","界面","一致","各种各样","没错","习惯","通过","还是","链","解决","上来","我们","多","绝大部分","树莓","各样","无线网络","不过","端侧","第一眼","等等","资源","视频","整理","市面上","要","机器","就","这颗","身边","相机","信息","受","频率","技术","提供","比较","为","为了","一眼","方面","常用","显示","依次","重要","计算","其他","cpu","让","一款","同时","很多","帮助","只要","地平","这块","，","39","各种","市场","的","csi","包含","入门","网络","兼容","外接","业界","级","npu","线","hdmi","4","充分发挥","好","价格","信号","usb2.0","一个"],"title":"旭日X3派介绍","title_tokens":["旭日","介绍","派","x3"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3","text":"TogetherROS是一个软件层面的系统，要想使用它，当然得找一个硬件层面的计算平台，安装之后才能使用啦。 之前我们提到，TogetherROS会基于地平线的AI芯片，充分发挥硬件性能，我们如何使用这颗芯片呢？","text_tokens":["这颗","togetherros","地平","，","平台","找","是","提到","系统","安装","的","它","层面","之后","基于","ai","芯片","充分","我们","？","如何","当然","硬件","性能","使用","呢","发挥","地平线","才能","之前","软件","计算","。"," ","得","会","充分发挥","分发","啦","要","想","一个"],"title":"旭日X3派介绍","title_tokens":["旭日","介绍","派","x3"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3_1","text":"没问题，地平线已经为我们准备好了，那就是搭载旭日X3芯片的机器人开发板——旭日X3派。 第一眼看上去，大家是否会想到树莓派呢？没错，为了适应开发者的使用习惯，兼容市面上大量已有的模块，旭日X3派的整体外观和接口形态都接近树莓派，不过面向的开发对象以及板卡的计算实力，和树莓派就完全不同了。 类似这些常用的传感器，旭日X3派统统都可以支持，未来还有更多机器人套件会出现在大家身边。 大家可以在这张表中，看到旭日X3派的硬件资源，CPU是四核A53，频率1.2Hz，在系统内还可以进行超频，BPU就是硬件级的AI引擎，这是旭日X3派相比市面上其他开发板，最大的不同，也是核心性能的主要来源，类似于业界常听到的NPU，这里使用的是地平线机器人独有的伯努利2.0架构，可以提供5Tops的等效算力支持。 内存方面，大家可以选择2GB或者4GB的版本，存储使用的是SD卡，我们可以自行选择，只要大于8GB就可以啦。 在多媒体方面，旭日X3派支持硬件级别的H265和H264编解码，常用的图像和视频都可以流畅播放。 接口方面，尽量可以满足我们常用外接设备和开发的需求，这里是一个CSI的相机接口，板载USB有3个，包含1个USB3.0和2个USB2.0，这里是一个板载的调试串口，我们可以通过它获取系统层面的很多调试信息，也可以与板卡进行通信。 板卡上也搭载了有线网络和无线网络，这个有线网口我们可以直接用网线连接到电脑，就可以在电脑上远程登录和板卡通信了，或者连接到路由器，让板卡直接上网，无线网络和蓝牙是一个二合一的模块，我们也可以直接通过wiki，让板卡连接到某个网络中。 显示接口主要是这里的HDMI，如果我们先要看到系统界面，或者后续很多视觉例程的识别效果，都可以通过HDMI外接一个显示器进行显示。 最后还有至关重要的扩展接口，有40个引脚，和树莓派的接口定义一致，什么GPIO、串口、I2C、SPI等等，一应俱全。 这块板卡我们在使用的时候，推荐使用5V3A的电源，通过TypeC线连接到这里供电，官方提供的系统目前是Ubuntu20.04，使用起来和原生系统没有太大差别。 总体来讲， 旭日X3派是一款面向生态开发者的嵌入式AI开发板，接口兼容树莓派，具有5Tops的端侧推理算力，以及4核ARM A53的处理能力。 面对个人开发者，旭日X3派可以让每一位开发者拥有自己的AI开发套件，不再受开发板高昂的价格限制，面对高等院校，使用旭日X3派开发套件探索AI和机器人应用是学习的开始，有助于学生快速入门人工智能与机器人开发，面对产业，旭日X3派以及地平线的AI工具链，可以帮助客户将产品尽快推向市场，快速落地智能机器人方向的解决方案。","text_tokens":["先","h264","有助","人工智能","也","问题","硬件资源","推向","嵌入","感器","实力","接口","接近","统统","这里","上","电脑","2gb","模块","尽快","效果","通信","2","a53","探索","出现","进行","级别","编解码","没有","供电","来讲","会","最后","形态","视觉","差别","张表中","串口","将","无线网","二合一","面对","需求","算力","层面","嵌入式","？","超频","i2c","看上","有线","引脚","看上去","这是","架构"," ","高等","线网","蓝牙","这个","外观","类似","俱全","了","呢","最大","快速","什么","面上","远程","—","无线","具有","调试信息","1.2","电源","5v3a","完全","应用","获取","自己","相比","sd","个人","合一","板卡","已有","4gb","面向","没","已经","直接","播放","常听到","连接","x3","它","对象","等效","如果","至关","套件","接口定义","推理","高昂","核心","卡","接设备","路由","8gb","每","主要","流畅","目前","登录","四核","方向","未来","更","一位","限制","至关重要","有助于","中","大于","usb","第一","机器人","时候","扩展","方案","推荐","芯片","系统","尽量","支持","学习","引擎","搭载","伯努利","一应俱全","解码","就是","旭日","太","调试","这些","typec","一应","适应","后续","不同","还有","定义","arm","客户","。","usb3.0","起来","多媒体","这","是","拥有","到","可以","派","开始","开发","网线","人工","板载","官方","和","推向市场","40","不再","智能","有线网","5tops","在","路由器","个","、","存储","二合","助于","版本","例程","某个","设备","生态","有","大家","传感","来源","核","上去","解决方案","硬件","落地","内存","gpio","以及","开发者","整体","啦","独有","用","院校","满足","h265","自行","开发板","ubuntu20.04","ai","bpu","显示器","2.0","工具","能力","使用","3","处理","与","传感器","选择","学生","图像","原生","市面","spi","是否","想到","准备","产品","外","hz","媒体","产业","看到","大量","内","大","听到","高等院校","或者","总体","于","性能","还","wiki","都","地平线","那","口","1","上网","识别","界面","一致","没错","习惯","通过","链","解决","我们","多","树莓","无线网络","不过","端侧","第一眼","等等","资源","视频","市面上","要","机器","就","身边","相机","信息","受","频率","提供","为","为了","一眼","方面","常用","显示","重要","计算","其他","cpu","让","一款","很多","帮助","只要","地平","这块","，","市场","的","csi","包含","入门","网络","兼容","外接","业界","级","npu","线","hdmi","4","好","价格","usb2.0","一个"],"title":"旭日X3派","title_tokens":["旭日","派","x3"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3m","text":"在旭日X3派上，最为核心的当然就是这颗AI芯片了，这是关于芯片的具体信息，供大家参考。 值得一提的是，随着芯片的技术迭代，2023年，地平线将推出X5芯片，比较大的变化是CPU升级到了8核A55，主频提升到1.8GHz，BPU的算力也将达到8Tops，还加入了GPU，以及更多可扩展的接口。 在使用旭日X3派的过程中，大家也可以期待旭日X5派了。","text_tokens":["这颗","达到","信息","将","1.8","扩展","地平","上","，","技术","是","芯片","更","x3","的","ai","大","算力","x5","升级","参考","大家","到","比较","核","ghz","推出","bpu","派","也","8tops","可以","年","多","当然","了","主频","最为","还","使用","期待","地平线","加入","这是","中","核心","关于","供","gpu","值得一提的是","迭代","cpu","。","随着","以及"," ","在","2023","过程","变化","接口","可","值得","a55","提升","具体","就是","旭日","8"],"title":"旭日X3M芯片","title_tokens":["旭日","芯片","x3m"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3_2","text":"好啦，还是回到旭日X3派的开发接口上来，我们再做一个整理，这些就是我们使用开发板进行智能机器人开发过程中，最为常用的接口啦。 大家目前在树莓派或者其他开发板上使用的绝大部分模块，基本都可以在旭日X3派上复用，同时还有更多智能化的玩法等着大家。 关于40Pin扩展接口的序号排布，大家可以看这里，引脚的序号是从靠近HDMI板卡内测的开始算起，是引脚1，然后依次蛇形计数，分别是1、2、3、4、5，一直到这里是39和40。 上图是40PIN扩展接口的详细定义，有3.3V和5V的电源信号，有I2C、I2S、SPI、UART等通信接口，还有很多可动态配置的GPIO信号，基本可以满足各种各样的机器人开发啦。 好啦，关于旭日X3派这块开发板我们已经了解清楚了，具体该如何使用呢，我们后续操作起来。","text_tokens":["回到","清楚","再","这些","或者","如何","5v","后续","还有","板卡","定义","大部","都","详细","1","。","序号","部分","过程","i2s","起来","5","接口","已经","可","40pin","做","具体","一直","这里","上","是从","uart","是","各种各样","还是","模块","x3","v","到","上来","通信","我们","可以","上图","派","动态","2","开始","绝大部分","多","开发","树莓","蛇形","最为","和","该","进行","起","各样","大部分","40","关于","智能","绝大","在","整理","目前","机器","、","看","基本","更","等","有","大家","i2c","算","常用","引脚","然后","中","依次","智能化","其他","内测","gpio"," ","机器人","同时","很多","着","玩法","啦","满足","开发板","扩展","这块","，","39","各种","的","操作","计数","了","配置","使用","3.3","3","呢","排布","通信接口","spi","了解","hdmi","复用","4","靠近","好","分别","信号","电源","就是","旭日","一个"],"title":"旭日X3派接口","title_tokens":["旭日","派","x3","接口"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/","text":"TogetherROS系统安装 我们在旭日X3派上安装系统镜像，并进一步完成TogetherROS系统的安装，大家如果手上有旭日X3派开发板的话，建议跟随一起操作。 先来了解一下TogetherROS系统安装的整体流程： 第一步，要完成硬件的准备，我们需要找到一块旭日X3派的开发板，并且准备好电源线、SD卡、读卡器、串口模块等必要的配件，当然还需要有一台操作的电脑啦。 硬件都准备好之后，就可以进入第二步，给旭日X3派下载并安装Ubuntu系统镜像，这是TogetherROS系统运行必要的底层环境。 第三步，就可以开始安装TogetherROS啦。 安装完成后，我们还需要进一步完成一些配置工作，可以也让旭日X3派板卡上的各项功能都运行起来，保证TogetherROS的顺利运行。 最后一步，就是体验TogetherROS出厂自带的一些例程啦，确定一切安装顺利，为后续机器人开发最好准备。 接下来，我们就按照这个流程，开始操作。 硬件准备 先来完成硬件准备： 找到一块旭日X3派的板卡，准备好一套5V3A的电源和TypeC电源线，稍后会连接到这里的电源接口，给板卡供电。 然后准备好一张8GB以上的SD卡和读卡器，下一步我们会在上边烧写系统镜像。 接下来使用一个串口模块，连接旭日X3派和笔记本电脑，便于下一步看到系统镜像的启动信息。 如果大家有网线和HDMI显示器的话，也可以先准备好，在之后的操作中用的上，如果没有也没关系，不影响TogetherROS系统的基本使用。 硬件准备齐全之后，就可以进入第二步了。 安装Ubuntu系统 我们来给旭日X3派安装Ubuntu系统，关于系统镜像和烧写工具，都可以在地平线AI社区中找到。 下载SD卡镜像 首先登录地平线AI社区，点击”产品中心——资源中心“， 进入页面后下拉至”X3派资料包“专区，点击下载其中的”旭日X3派系统镜像“，会有一个压缩包，把它保存到当前电脑桌面。 此外，我们稍后将镜像烧写到SD卡里，需要用到烧写小工具，如果大家电脑上没有合适的工具，可以下拉到”工具“专区，点击下载”烧录 工具rufus\"。 下载完后我们来看一下两个压缩文件中的内容： 其中一个是烧写X3派镜像文件的工具，压缩包中有两个文件，一个是system_sdcard.img文件，是我们稍后会用于烧写SD卡的镜像文件；另一个是disk_nand.img文件，用于烧写旭日X3派中的flash文件，大多数情况下都用不到； 另一个压缩包里是我们稍后用于烧写镜像的rufus工具。 我们把两个压缩包都解压出来，然后把SD卡放进读卡器、插到电脑端 接下来就可以开始烧写SD卡镜像。 烧写SD卡镜像 运行解压出来的烧写工具rufus。启动后需要确认几个参数： 第一个是确定烧写到哪个磁盘上。工具软件会默认搜索当前读取到的SD卡，下图所示磁盘名称，就是演示时插好的16GB的SD卡。 下一步我们点击“选择”，找到需要烧写的镜像文件。演示中已经把需要的system_sdcrd.img文件放在了桌面上，选中它点击“打开”； 下面的内容就可以用默认的配置，点击“开始”会弹出警告告诉我们将把磁盘里的所有文件都清除掉，这没有问题，我们点击“选择“，就开始烧写SD卡镜像了。 进度条显示“准备就绪”后，点击“关闭”，此时你的SD卡镜像就已经烧写完成了，我们把SD卡的读卡器拔出来。 连接串口 接下来把SD卡插到旭日X3派上。 把串口模块连接到电脑的USB上。 连接好串口模块后，为了确保串口已经跟电脑连接成功、并且安装好了驱动，我们可以右键“我的电脑”图标、选择“管理”，在打开的”计算机管理“界面中找到”设备管理器——端口“，检查一下你的USB串口是否已经显示出了对应的设备。演示中的端口号为COM6,说明串口已经成功驱动了。 如果没有看到自己的设备号、或者设备号前有一个叹号或者问号标记，说明你的驱动没有安装好，可以搜索网络上的技术博客，来完成串口模块的驱动安装。 关闭“计算机管理”窗口，接下来就要通过串口与旭日X3派进行连接了。这里我们需要用到一个串口小工具，大家可以使用自己常用的工具。 演示中使用的串口工具是MobaXterm,十分推荐大家使用这个工具，里面集成了开发过程中需要使用的各种小工具，我们后续的串口通讯、SSH网络通讯，都会使用这些工具完成。 打开MobaXterm,点击左上角的\"Session\"； 找到里面的“Serial\"串口选项，点击打开；串口号选择本机连接到旭日X3派的相应端口，演示中为COM6; 波特率选择921600。选项好后点击“OK”。 现在串口已经连接成功了，但当前旭日X3派的板子还没有上电，所以没有任何信息弹出。 我们把电源线与旭日X3派连接好。 可以看到弹出了日志提醒：“当前系统正在启动”。等待系统加载完成。 现在可以看到系统已经加载成功了。 串口登录系统 接下来我们需要登录系统。我们有两个账号可以用来登录： 账号1：用户名为root，密码也为root； 账号2：用户名为storise，密码也为storise； 这里演示使用root用户来登录。输入用户名、密码，回车，需要等待大约1分钟，因为第一次登录需要展开一些系统必要的安装软件，安装好后系统会自动重启。 系统自动重启后，再次使用root用户登录。现在你的UBUNTU系统就已经安装好了。 我们可以使用LINUX系统常用的一些命令行进行查看和设置，比如ls查看当前命令，pwd查看当前路径，还可以使用mkdir命令创建文件夹，比如这里,一个test文件夹就创建成功了。 到这里为止，旭日X3派上的Ubuntu系统就安装成功啦，我们继续下一步。 安装TogetherROS系统 安装TogetherROS系统。 为了达到更好的通信效率，我们后续使用有线网络连接旭日X3派，这里大家可以拿出一根网线，直接连接电脑和旭日X3派的网口。 旭日X3派中出厂已经配置好了静态IP地址，是192.168.1.10，我们将使用的电脑也配置到同一网段即可。 配置有线网络 接下来请大家拿一根网线，连接旭日X3派和电脑。 然后，在电脑端打开控制面板，找到“查看网络状态和任务”。 找到已经连接成功的以太网，点击它； 会弹出一个窗口，我们点击“属性”。 再次弹出窗口，我们双击选择“Internet协议版本4”。 然后会弹出一个配置IP地址的窗口，我们勾选”使用下面的IP地址“。 按照如下信息填入： IP地址：192.168.1.100 子网掩码：255.255.255.0 默认网关：192.168.1.1 我们使用的旭日X3派的板子IP为192.168.1.10，所以IP后三位除了.10和网关.1以外，大家可以选用1-255之间的任意数字，这里使用.100； 填写完在所有窗口点击“确定”，最后关闭窗口。现在网络的配置就完成了，此时电脑端的静态IP就是192.168.1.100,我们通过这个IP与旭日X3派产生连接。 SSH远程登录 我们再次打开MobaXterm软件,点击左上角的\"Session\"，找到里面的\"SSH\",输入 旭日X3派板子的IP192.168.1.10，点击”OK“。 弹出登录窗口，我们用root账户登录：用户名为root，密码为root。这里会弹窗询问是否保存登录密码，如果需要保存就点“YES”，不需要保存就点“NO”。 现在我们就成功通过网络SSH协议登录到了旭日X3派板子上，和之前我们用串口登录的效果几乎是一样的，但现在我们是用网络通讯，所以现在通讯的效率和传输的速度会更高。 配置完成网络通讯后，我们来正式安装TogetherROS。 下载TogetherROS安装包 拷贝安装包 我们打开地平线社区的网站，在“产品中心”页面下拉到“机器人平台”，这里面都是TogetherROS相关的资源。 我们找到其中的\"TogetherROS DEB安装包\"，点击下载到电脑端。大概有300多兆的文件大小，很快就能下载完成。 这里我们先使用DEB安装包，来直接安装编译好的二进制文件。未来课程中我们会介绍如何通过源码编译的方式进行安装。 接下来我们进行TogetherROS镜像文件的复制安装。 安装TogetherROS 首先我们需要把电脑端的TogetherROS镜像文件，拷贝到旭日X3派板端。 大家可以在电脑上右键打开一个终端，并使用scp命令进行文件拷贝，命令格式为：scp + 空格 + .\\ + <要拷贝的文件名> + 用户名 + @ + 旭日X3派的IP地址 + :/ +旭日X3派上的文件目录名。 演示中使用的命令如下： $ scp . \\t ros_debV1_20220607894835.0.deb root@192.169.1.10:/userdata 这样就可以将TogetherROS镜像文件从电脑端拷贝到旭日X3派的userdata目录下。 除了这种拷贝方法，大家还可以使用MobaXterm软件，它提供了一种基于SCP命令的可视化的文件复制方式。 大家可以点击MobaXterm软件页面左侧的“SSH browser”，左边显示的目录就是旭日X3派板子上的文件目录结构。 我们找到板子上对应的userdata文件夹，双击打开它。 使用MobaXterm软件，可以把togetherROS镜像文件从电脑本机上直接拖到板子的文件目录底下。 现在TogetherROS安装包已经传输完成。我们在命令行中进入板子的userdata文件夹下，再确认安装包已经存放到了文件夹。命令行： $ cd /userdata/ $ ls 确认完毕后，我们用LINUX命令行dpkg进行安装，命令格式为:\"dpkg -i <要安装的包的名称>“，大家根据自己实际的版本号进行安装。此处使用命令为： $ dpkg -i tros_debV1_20220607094835.0.deb 等待安装完成，我们用命令“cd /opt\"进入opt文件夹，用ls命令检查一下该路径下的文件，可以看到opt文件夹下有一个tros文件夹，这个文件夹里就是我们刚刚安装好的TogetherROS的所有系统文件了。 如果觉得终端里看不方便，也可以使用MobaXterm软件的可视化浏览器来查看。 大家可以点击/opt/tros文件夹，看看其中的文件结构。 /include文件夹里，是我们后续会用到的关于系统的头文件的调用路径； /lib文件夹里面是库文件； /share文件夹里是安装好的功能包的路径； /src文件夹里是后续会用到的代码； /tools文件夹里是一些小工具。 除此之外，还有很多.bat,.sh脚本文件，它们是用来设置环境变量的。这是因为，你的LINUX系统不知道你安装包的路径在哪，所以需要通过环境变量的脚本来告诉系统，如何找到对应的TogetherROS的功能包、和功能包里的命令工具。 环境变量在我们后续操作里会频繁地使用到，我们会使用到一个”source\"命令来配置环境变量，例如： $ source /opt/tros/setup.bash 运行上面这行命令，就会把当前环境变量设置到系统里去；下次再运行ROS2、TogetherROS指令时，就能找到功能包的路径了。 到这里，TogetherROS也安装完成，下一节我们将对开发板和TogetherROS进行配置。","text_tokens":["先","下来","完毕","平台","算机","debv1","烧","test","也","查看","问题","时","版本号","如何",",","板子","当然","哪个","派板","ip","不","来看","任何","1.10","工具软件","大多","哪","tros","nand","接口","卡里","左上角","告诉","ubuntu","命令行","以太网","进制","一起","环境变","会弹","加载","这里","传输","上","电脑","检查","基于","模块","博客","首先","效果","通信","顺利","打开","2","内容","+","该","_","进行","实际","/","没有","供电","默认","代码","频繁","会","最后","各项","我","串口","pwd","一套","是因为","路径","internet","包里","文件大小","叹","下拉到","将","看","两个","基本","根据","稍后","安装","ip地址","等","它们","ip192.168","刚刚","一些","有线","255","ros2","这是","include","插","现在"," ","disk","并","方式","更好","配件","确定","速度","必要","子网掩码","空格","这个","端口号","知道","脚本","电脑桌","ls","除此","mobaxterm","下","10","电源接口","计算机管理","了","一块","\"",";","source","面上","了解","远程","拷贝到","左侧","读卡器","—","检查一下","很快","编译","展开","电源","网段","复制",":","合适","5v3a","名称","一样","255.255","浏览器","src","能","此处","上电","自己","sd","压缩","系统文件","你","账号","板卡","除了","烧写","解压","继续","没关系","找到","磁盘","因为","库","下次","20220607894835.0","ok","过程","文件夹","分钟","标记","已经","一切","直接","双击","驱动","计算机","达到","底层","专区","这种","连接","serial","完成","x3","它","高","可视","如果","下图","终端","社区","同一","再次","最好","地","压缩包","关于","桌面上","建议","卡","下拉","对","8gb","接下","保存","请","拔出","登录","里面","@","拉到","bash","一节","其中","未来","更","网络通讯","效率","任务","相关","觉得","资料","窗口","影响","-","然后","一根","此外","中","包","usb","com6","下面","$","第一","机器人","来","所以","可视化","流程","flash","二步","面板","share","setup","”",">","上边","填写","推荐","小","本","系统","介绍","从","第一个","对应","操作","齐全","创建","cd","底下","tools","环境变量","；","之前","正在","写","“","功能","用于","关系","放在","所有","就是","旭日","拔出来","按照","弹","255.0","togetherros","波特率","调用","这些","：","就绪","就要","typec","桌面","sh","下拉至","i","后续","session","opt","还有","头文件","软件","另","。","问号","网口","起来","二进制","中用","把","这","点击","bat","第三","好后","root","完后","一台","选用","制面","是","多兆","到","可以","派","scp","开始","开发","网线","userdata","和","状态","协议","参数","工作","以上","网站","20220607094835.0","串","在","大多数","多数","大概","browser","静态","、","波特","进一步","跟随","版本","例程","设备","比如","启动","有","大家","里","压缩文件","此时","掉","即可","出厂","硬件","便于","命令","机上","大小","去","页面","为止","确保","这样","设置","变量","1.1","整体","给","第一步","上面","啦","文件目录","用","lib","中为","运行","开发板","保证","弹出","勾选","地址","件夹","拿","之后","ai","需要","电源线","网络连接","进入","显示器","的话","工具","接下来","配置","使用","不到","端的","与","用户","出来","选择","放进","以太","日志","几个","是否","源码","进度","yes","准备","产品","提醒","921600","并且","口号","第二步","deb","镜像文件","linux","网关","用户名","第一次","看到","一次","拷贝","再","输入","出","里会","sdcrd","产生","或者","笔记本电脑","安装包","还","除此之外","完在","都","地平线","浏览","选中","号","第二","回车","下载","sdcard","1","大约","就点","一下","密码","目录","用来","192.169","mkdir","三步","第三步","界面","rufus","192.168","方便","但","没关","拿出","端","询问","dpkg","自动","通过","300","子网","选项","我们","手上","结构","掩码","no","读卡","用到","左上",".","资源","中有","拖","文件","重启","自带","填入","以外","system","十分","成功","要","机器","前","账户","说明","任意","就","ssh","方法","集成","信息","笔记","之间","技术","存放","提供","16gb","镜像","清除","准备就绪","情况","为","为了","体验","跟","\\","1.100","确认","100","常用","笔记本","属性","正式","显示","上角","右键","中心","户名","计算","后","左边","让","课程","通讯","环境","很多","几乎","一张","等待","图标","t","格式","端口","地平","，","读取","各种","名为","控制面板","的","机","行","搜索","三位","当前","网络","文件名","警告","管理","控制","烧录","一种","理器","如下","所示","进度条","弹窗","hdmi","4","关闭","之外","数字","<","好","指令","相应","storise","img","看看","ros","名","例如","管理器","一步","电脑桌面","演示","一个"],"title":"系统安装","title_tokens":["系统","安装"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros","text":"我们在旭日X3派上安装系统镜像，并进一步完成TogetherROS系统的安装，大家如果手上有旭日X3派开发板的话，建议跟随一起操作。 先来了解一下TogetherROS系统安装的整体流程： 第一步，要完成硬件的准备，我们需要找到一块旭日X3派的开发板，并且准备好电源线、SD卡、读卡器、串口模块等必要的配件，当然还需要有一台操作的电脑啦。 硬件都准备好之后，就可以进入第二步，给旭日X3派下载并安装Ubuntu系统镜像，这是TogetherROS系统运行必要的底层环境。 第三步，就可以开始安装TogetherROS啦。 安装完成后，我们还需要进一步完成一些配置工作，可以也让旭日X3派板卡上的各项功能都运行起来，保证TogetherROS的顺利运行。 最后一步，就是体验TogetherROS出厂自带的一些例程啦，确定一切安装顺利，为后续机器人开发最好准备。 接下来，我们就按照这个流程，开始操作。","text_tokens":["先","下来","togetherros","：","也","sd","当然","还","后续","板卡","都","第二","下载","找到","。","起来","一切","一下","ubuntu","第三","三步","一起","第三步","一台","底层","上","电脑","完成","x3","模块","如果","手上","我们","可以","派","顺利","开始","开发","读卡","最好","工作","建议","卡","最后","在","自带","各项","接下","串口","要","机器","、","进一步","就","跟随","例程","安装","镜像","等","有","大家","为","一些","体验","出厂","硬件","这是","后","让"," ","整体","第一","机器人","给","并","来","第一步","环境","流程","配件","啦","二步","确定","必要","这个","运行","开发板","保证","，","系统","之后","的","需要","电源线","进入","操作","的话","接下来","配置","一块","功能","了解","读卡器","好","准备","电源","并且","一步","就是","旭日","第二步","按照"],"title":"TogetherROS系统安装","title_tokens":["系统","安装","togetherros"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_1","text":"先来完成硬件准备： 找到一块旭日X3派的板卡，准备好一套5V3A的电源和TypeC电源线，稍后会连接到这里的电源接口，给板卡供电。 然后准备好一张8GB以上的SD卡和读卡器，下一步我们会在上边烧写系统镜像。 接下来使用一个串口模块，连接旭日X3派和笔记本电脑，便于下一步看到系统镜像的启动信息。 如果大家有网线和HDMI显示器的话，也可以先准备好，在之后的操作中用的上，如果没有也没关系，不影响TogetherROS系统的基本使用。 硬件准备齐全之后，就可以进入第二步了。","text_tokens":["先","下来","togetherros","看到","：","typec","也","sd","笔记本电脑","不","板卡","烧写","第二","没关系","找到","。","接口","中用","没关","这里","上","电脑","连接","完成","x3","模块","到","我们","如果","可以","派","网线","读卡","和","没有","供电","以上","卡","会","在","8gb","接下","串口","一套","就","信息","笔记","基本","启动","稍后","镜像","有","大家","硬件","便于","影响","笔记本","显示","然后"," ","给","来","二步","一张","上边","，","系统","之后","的","电源线","进入","下","操作","齐全","显示器","电源接口","的话","接下来","了","使用","一块","关系","hdmi","读卡器","好","准备","电源","一步","旭日","第二步","5v3a","一个"],"title":"硬件准备","title_tokens":["硬件","准备"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#ubuntu","text":"我们来给旭日X3派安装Ubuntu系统，关于系统镜像和烧写工具，都可以在地平线AI社区中找到。","text_tokens":["地平","，","系统","安装","x3","烧","镜像","ai","我们","可以","派","工具","社区","和","都","地平线","中","关于","写","找到","。","在","给","来","ubuntu","旭日"],"title":"安装Ubuntu系统","title_tokens":["ubuntu","系统","安装"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#sd","text":"首先登录地平线AI社区，点击”产品中心——资源中心“， 进入页面后下拉至”X3派资料包“专区，点击下载其中的”旭日X3派系统镜像“，会有一个压缩包，把它保存到当前电脑桌面。 此外，我们稍后将镜像烧写到SD卡里，需要用到烧写小工具，如果大家电脑上没有合适的工具，可以下拉到”工具“专区，点击下载”烧录 工具rufus\"。 下载完后我们来看一下两个压缩文件中的内容： 其中一个是烧写X3派镜像文件的工具，压缩包中有两个文件，一个是system_sdcard.img文件，是我们稍后会用于烧写SD卡的镜像文件；另一个是disk_nand.img文件，用于烧写旭日X3派中的flash文件，大多数情况下都用不到； 另一个压缩包里是我们稍后用于烧写镜像的rufus工具。 我们把两个压缩包都解压出来，然后把SD卡放进读卡器、插到电脑端 接下来就可以开始烧写SD卡镜像。","text_tokens":["镜像文件","下来","：","烧","桌面","下拉至","sd","压缩","来看","都","烧写","地平线","解压","另","下载","sdcard","。","大多","nand","把","卡里","一下","点击","rufus","完后","专区","端","上","电脑","是","x3","它","首先","到","我们","如果","可以","派","内容","开始","读卡","社区","_","用到","压缩包","没有",".","资源","下拉","卡","中有","文件","会","保存","接下","大多数","system","多数","、","登录","就","拉到","下拉到","将","两个","其中","稍后","镜像","有","大家","情况","里","压缩文件","资料","页面","然后","此外","中","中心","包","插","后"," ","disk","flash","用","”","地平","，","小","系统","的","电脑桌","ai","需要","进入","下","当前","工具","接下来","不到","；","烧录","\"","出来","放进","写","“","用于","—","读卡器","产品","img","电脑桌面","旭日","合适","一个"],"title":"下载SD卡镜像","title_tokens":["卡","镜像","下载","sd"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#sd_1","text":"运行解压出来的烧写工具rufus。启动后需要确认几个参数： 第一个是确定烧写到哪个磁盘上。工具软件会默认搜索当前读取到的SD卡，下图所示磁盘名称，就是演示时插好的16GB的SD卡。 下一步我们点击“选择”，找到需要烧写的镜像文件。演示中已经把需要的system_sdcrd.img文件放在了桌面上，选中它点击“打开”； 下面的内容就可以用默认的配置，点击“开始”会弹出警告告诉我们将把磁盘里的所有文件都清除掉，这没有问题，我们点击“选择“，就开始烧写SD卡镜像了。 进度条显示“准备就绪”后，点击“关闭”，此时你的SD卡镜像就已经烧写完成了，我们把SD卡的读卡器拔出来。","text_tokens":["名称","镜像文件","：","就绪","烧","出","桌面","问题","时","sdcrd","sd","哪个","你","都","解压","烧写","软件","选中","磁盘","找到","。","工具软件","已经","把","这","点击","告诉","rufus","会弹","上","是","完成","它","到","我们","可以","打开","内容","开始","下图","读卡","_","参数","没有",".","桌面上","默认","拔出来","卡","文件","会","system","拔出","就","将","启动","16gb","镜像","清除","准备就绪","里","此时","掉","确认","显示","中","插","后","下面"," ","第一","用","确定","”","运行","，","读取","的","需要","第一个","下","搜索","当前","工具","了","配置","警告","；","出来","选择","写","所示","“","进度条","面上","几个","进度","关闭","读卡器","好","放在","准备","img","所有","一步","就是","演示","一个"],"title":"烧写SD卡镜像","title_tokens":["烧写","镜像","卡","sd"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_2","text":"接下来把SD卡插到旭日X3派上。 把串口模块连接到电脑的USB上。 连接好串口模块后，为了确保串口已经跟电脑连接成功、并且安装好了驱动，我们可以右键“我的电脑”图标、选择“管理”，在打开的”计算机管理“界面中找到”设备管理器——端口“，检查一下你的USB串口是否已经显示出了对应的设备。演示中的端口号为COM6,说明串口已经成功驱动了。 如果没有看到自己的设备号、或者设备号前有一个叹号或者问号标记，说明你的驱动没有安装好，可以搜索网络上的技术博客，来完成串口模块的驱动安装。 关闭“计算机管理”窗口，接下来就要通过串口与旭日X3派进行连接了。这里我们需要用到一个串口小工具，大家可以使用自己常用的工具。 演示中使用的串口工具是MobaXterm,十分推荐大家使用这个工具，里面集成了开发过程中需要使用的各种小工具，我们后续的串口通讯、SSH网络通讯，都会使用这些工具完成。 打开MobaXterm,点击左上角的\"Session\"； 找到里面的“Serial\"串口选项，点击打开；串口号选择本机连接到旭日X3派的相应端口，演示中为COM6; 波特率选择921600。选项好后点击“OK”。 现在串口已经连接成功了，但当前旭日X3派的板子还没有上电，所以没有任何信息弹出。 我们把电源线与旭日X3派连接好。 可以看到弹出了日志提醒：“当前系统正在启动”。等待系统加载完成。 现在可以看到系统已经加载成功了。","text_tokens":["下来","算机","看到","波特率","这些","：","上电","出","就要","自己","sd","或者",",","板子","你","后续","session","还","都","号","任何","找到","。","问号","ok","过程","标记","已经","把","一下","左上角","点击","驱动","计算机","界面","好后","但","加载","这里","上","电脑","连接","检查","是","通过","模块","x3","博客","完成","serial","到","选项","我们","如果","可以","派","打开","开发","进行","用到","左上","没有","卡","串","会","在","我","接下","十分","串口","成功","前","、","波特","说明","叹","里面","ssh","集成","信息","设备","技术","启动","安装","网络通讯","有","大家","为","为了","跟","窗口","常用","显示","上角","中","确保","右键","插","usb","计算","后","现在","com6"," ","通讯","来","所以","等待","”","中为","图标","端口号","这个","弹出","端口","推荐","，","小","本","各种","系统","的","需要","mobaxterm","电源线","机","对应","搜索","计算机管理","当前","网络","接下来","了","工具","管理","使用","；","\"",";","与","选择","理器","正在","日志","“","是否","关闭","—","检查一下","好","相应","提醒","921600","电源","管理器","并且","口号","旭日","演示","弹","一个"],"title":"连接串口","title_tokens":["串口","连接"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_3","text":"接下来我们需要登录系统。我们有两个账号可以用来登录： 账号1：用户名为root，密码也为root； 账号2：用户名为storise，密码也为storise； 这里演示使用root用户来登录。输入用户名、密码，回车，需要等待大约1分钟，因为第一次登录需要展开一些系统必要的安装软件，安装好后系统会自动重启。 系统自动重启后，再次使用root用户登录。现在你的UBUNTU系统就已经安装好了。 我们可以使用LINUX系统常用的一些命令行进行查看和设置，比如ls查看当前命令，pwd查看当前路径，还可以使用mkdir命令创建文件夹，比如这里,一个test文件夹就创建成功了。 到这里为止，旭日X3派上的Ubuntu系统就安装成功啦，我们继续下一步。","text_tokens":["linux","下来","用户名","第一次","一次","：","输入","test","也","查看",",","账号","你","还","继续","软件","回车","1","因为","。","大约","文件夹","分钟","已经","密码","用来","ubuntu","命令行","mkdir","好后","root","这里","自动","上","x3","到","我们","可以","派","2","和","进行","再次","文件","会","重启","接下","pwd","成功","、","路径","登录","就","两个","比如","安装","有","为","一些","命令","常用","为止","户名","设置","后","现在"," ","第一","来","啦","等待","必要","，","件夹","系统","名为","的","ls","需要","下","创建","当前","接下来","了","使用","；","用户","好","storise","展开","一步","旭日","演示","一个"],"title":"串口登录系统","title_tokens":["串口","系统","登录"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros_1","text":"安装TogetherROS系统。 为了达到更好的通信效率，我们后续使用有线网络连接旭日X3派，这里大家可以拿出一根网线，直接连接电脑和旭日X3派的网口。 旭日X3派中出厂已经配置好了静态IP地址，是192.168.1.10，我们将使用的电脑也配置到同一网段即可。","text_tokens":["达到","将","这里","拿出","togetherros","地址","，","电脑","连接","是","系统","安装","的","x3","ip地址","到","大家","网络连接","效率","通信","我们","可以","也","为了","派","即可","出厂","网络","了","网线","有线","配置","后续","使用","同一","和","一根","中",".","1.10","。"," ","网口","更好","直接","已经","好","静态","网段","旭日","192.168"],"title":"安装TogetherROS系统","title_tokens":["系统","安装","togetherros"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_4","text":"接下来请大家拿一根网线，连接旭日X3派和电脑。 然后，在电脑端打开控制面板，找到“查看网络状态和任务”。 找到已经连接成功的以太网，点击它； 会弹出一个窗口，我们点击“属性”。 再次弹出窗口，我们双击选择“Internet协议版本4”。 然后会弹出一个配置IP地址的窗口，我们勾选”使用下面的IP地址“。 按照如下信息填入： IP地址：192.168.1.100 子网掩码：255.255.255.0 默认网关：192.168.1.1 我们使用的旭日X3派的板子IP为192.168.1.10，所以IP后三位除了.10和网关.1以外，大家可以选用1-255之间的任意数字，这里使用.100； 填写完在所有窗口点击“确定”，最后关闭窗口。现在网络的配置就完成了，此时电脑端的静态IP就是192.168.1.100,我们通过这个IP与旭日X3派产生连接。","text_tokens":["网关","下来","255.255","弹","：","出","查看","产生",",","板子","ip","完在","除了","1","找到","1.10","。","已经","双击","点击","以太网","192.168","会弹","选用","这里","端","制面","电脑","连接","通过","完成","x3","它","子网","我们","可以","派","打开","掩码","网线","和","状态","再次","协议",".","默认","最后","在","填入","接下","以外","成功","静态","请","任意","就","internet","信息","版本","之间","ip地址","大家","为","任务","此时","1.100","窗口","100","属性","-","然后","255","一根","后","现在","下面","1.1"," ","所以","面板","确定","”","子网掩码","这个","填写","勾选","地址","，","控制面板","拿","255.0","的","10","三位","网络","接下来","了","配置","使用","控制","端的","；","与","选择","如下","以太","“","4","关闭","数字","所有","就是","旭日","按照","一个"],"title":"配置有线网络","title_tokens":["网络","有线","配置"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#ssh","text":"我们再次打开MobaXterm软件,点击左上角的\"Session\"，找到里面的\"SSH\",输入 旭日X3派板子的IP192.168.1.10，点击”OK“。 弹出登录窗口，我们用root账户登录：用户名为root，密码为root。这里会弹窗询问是否保存登录密码，如果需要保存就点“YES”，不需要保存就点“NO”。 现在我们就成功通过网络SSH协议登录到了旭日X3派板子上，和之前我们用串口登录的效果几乎是一样的，但现在我们是用网络通讯，所以现在通讯的效率和传输的速度会更高。 配置完成网络通讯后，我们来正式安装TogetherROS。","text_tokens":["一样","togetherros","：","输入","出",",","板子","session","不","软件","找到","1.10","。","就点","ok","密码","左上角","点击","root","但","询问","这里","传输","上","是","通过","完成","x3","高","到","效果","我们","如果","派","打开","no","和","再次","协议","左上",".","会","保存","串口","成功","账户","登录","就","里面","ssh","更","安装","网络通讯","ip192.168","效率","为","窗口","正式","上角","后","现在"," ","通讯","来","所以","几乎","用","速度","”","，","名为","的","需要","mobaxterm","网络","了","配置","\"","用户","之前","“","弹窗","是否","yes","旭日","弹"],"title":"SSH远程登录","title_tokens":["远程","登录","ssh"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros_2","text":"","text_tokens":[],"title":"下载TogetherROS安装包","title_tokens":["安装包","安装","下载","togetherros"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_5","text":"我们打开地平线社区的网站，在“产品中心”页面下拉到“机器人平台”，这里面都是TogetherROS相关的资源。 我们找到其中的\"TogetherROS DEB安装包\"，点击下载到电脑端。大概有300多兆的文件大小，很快就能下载完成。 这里我们先使用DEB安装包，来直接安装编译好的二进制文件。未来课程中我们会介绍如何通过源码编译的方式进行安装。 接下来我们进行TogetherROS镜像文件的复制安装。","text_tokens":["拉到","下拉到","镜像文件","先","下来","这里","端","togetherros","地平","其中","未来","，","平台","电脑","是","能","安装","的","多兆","完成","300","通过","有","介绍","到","镜像","我们","打开","相关","如何","安装包","接下来","使用","社区","大小","页面","进行","\"","都","地平线","中","中心","网站","下拉","资源","找到","下载","“","。","文件","课程"," ","会","机器人","在","来","源码","方式","接下","二进制","大概","直接","好","这","很快","编译","产品","机器","点击","”","复制","进制","就","文件大小","deb","里面"],"title":"拷贝安装包","title_tokens":["安装","安装包","拷贝"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros_3","text":"首先我们需要把电脑端的TogetherROS镜像文件，拷贝到旭日X3派板端。 大家可以在电脑上右键打开一个终端，并使用scp命令进行文件拷贝，命令格式为：scp + 空格 + .\\ + <要拷贝的文件名> + 用户名 + @ + 旭日X3派的IP地址 + :/ +旭日X3派上的文件目录名。 演示中使用的命令如下： $ scp . \\t ros_debV1_20220607894835.0.deb root@192.169.1.10:/userdata 这样就可以将TogetherROS镜像文件从电脑端拷贝到旭日X3派的userdata目录下。 除了这种拷贝方法，大家还可以使用MobaXterm软件，它提供了一种基于SCP命令的可视化的文件复制方式。 大家可以点击MobaXterm软件页面左侧的“SSH browser”，左边显示的目录就是旭日X3派板子上的文件目录结构。 我们找到板子上对应的userdata文件夹，双击打开它。 使用MobaXterm软件，可以把togetherROS镜像文件从电脑本机上直接拖到板子的文件目录底下。 现在TogetherROS安装包已经传输完成。我们在命令行中进入板子的userdata文件夹下，再确认安装包已经存放到了文件夹。命令行： $ cd /userdata/ $ ls 确认完毕后，我们用LINUX命令行dpkg进行安装，命令格式为:\"dpkg -i <要安装的包的名称>“，大家根据自己实际的版本号进行安装。此处使用命令为： $ dpkg -i tros_debV1_20220607094835.0.deb 等待安装完成，我们用命令“cd /opt\"进入opt文件夹，用ls命令检查一下该路径下的文件，可以看到opt文件夹下有一个tros文件夹，这个文件夹里就是我们刚刚安装好的TogetherROS的所有系统文件了。 如果觉得终端里看不方便，也可以使用MobaXterm软件的可视化浏览器来查看。 大家可以点击/opt/tros文件夹，看看其中的文件结构。 /include文件夹里，是我们后续会用到的关于系统的头文件的调用路径； /lib文件夹里面是库文件； /share文件夹里是安装好的功能包的路径； /src文件夹里是后续会用到的代码； /tools文件夹里是一些小工具。 除此之外，还有很多.bat,.sh脚本文件，它们是用来设置环境变量的。这是因为，你的LINUX系统不知道你安装包的路径在哪，所以需要通过环境变量的脚本来告诉系统，如何找到对应的TogetherROS的功能包、和功能包里的命令工具。 环境变量在我们后续操作里会频繁地使用到，我们会使用到一个”source\"命令来配置环境变量，例如： $ source /opt/tros/setup.bash 运行上面这行命令，就会把当前环境变量设置到系统里去；下次再运行ROS2、TogetherROS指令时，就能找到功能包的路径了。 到这里，TogetherROS也安装完成，下一节我们将对开发板和TogetherROS进行配置。","text_tokens":["名称","镜像文件","linux","完毕","togetherros","用户名","浏览器","看到","src","调用","能","拷贝","：","debv1","再","里会","也","查看","sh","自己","时","版本号","如何",",","板子","i","安装包","派板","系统文件","还","opt","不","后续","除了","除此之外","还有","你","头文件","浏览","软件","库","1.10","找到","因为","。","下次","20220607894835.0","文件夹","哪","tros","直接","已经","把","目录","192.169","演示","双击","点击","一下","命令行","bat","用来","告诉","root","方便","环境变","dpkg","端","这里","传输","上","电脑","这种","检查","基于","是","完成","x3","它","通过","首先","可视","到","我们","如果","可以","派","打开","scp","开发","结构","终端","+","userdata","该","_","进行","实际","和","用到","地","/",".","关于","代码","对","频繁","20220607094835.0","拖","文件","会","在","browser","要","是因为","、","路径","就","包里","里面","@","方法","ssh","bash","将","看","版本","一节","其中","根据","存放","提供","安装","ip地址","镜像","有","它们","大家","里","为","刚刚","一些","觉得","\\","命令","机上","确认","去","页面","-","显示","ros2","中","右键","这样","户名","设置","include","包","变量","后","左边","现在","$"," ","并","方式","来","很多","环境","所以","可视化","上面","share","文件目录","setup","用","等待","”","lib",">","空格","这个","运行","开发板","t","格式","知道","脚本","地址","，","小","本","件夹","系统","的","ls","需要","除此","mobaxterm","从","对应","下","进入","行","操作","cd","当前","底下","工具","了","文件名","tools","配置","使用","端的","环境变量","；","\"","source","用户","一种","如下","“","功能","拷贝到","左侧","之外","检查一下","<","好","指令","看看","ros","所有","名","复制",":","这","例如","此处","就是","旭日","deb","一个"],"title":"安装TogetherROS","title_tokens":["安装","togetherros"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/","text":"TogetherROS系统配置 无论是旭日X3派，还是TogetherROS，在正式使用之前，都还需要进行一些必要的配置，完善必要的功能模块，提供完整的算力支持，达到最佳状态。 网络连接 第一个配置，是无线网络连接。 当然，大家也可以直接用网线连接旭日X3派和一个可以上网的路由器，不过更多时候，我们还是会使用无线网络来上网。 我们打开MobaXterm,选择SSH，使用root用户登录板卡；如果之前登录过板卡、还没有关闭的话，也可以继续使用。 现在我们可以通过命令行搜索周边环境有哪些WIFI信号，命令如下： $ sudo nmcli device wifi rescan #扫描当前环境里所有WIFI名称，但扫描结果不会显示 $ nmcli device wifi list #显示扫描到的WIFI名称 $ sudo nmcli device wifi connect <账号> password <密码> #连接WIFI $ sudo vim /etc/network/interfaces #修改DHCP配置 比如，我的办公室里wifi的名称是psmicro,我们就可以使用“sudo nmcli device wifi connect psmicro password <密码>”来连接。 等到终端返回信息“successfully activated\",就说明WIFI连接成功； 我们可以Ping古月居的网址，来检查一下连接。如果能够Ping通，就说明网络已经连接成功，现在就可以成功连接到互联网，进行后续的软件下载和更新了。 网络配置完成后，在后续开发中，大家就可以直接下载或更新各种软件包了。 系统更新 第二个配置，是更新当前旭日X3派所使用的Ubuntu镜像，和在电脑上使用的命令相同。 我们更新一下当前的系统镜像： $ sudo apt update #会按照当前软件源的域名设置去连接远程软件源 $ sudo apt full-upgrade #升级所有可以升级的软件包 弹出如下对话，我们选择“Y”，回车； 这样我们就完成了对系统更新的检查，并安装好了更新包。 CPU调频策略 第三个配置，设置CPU的调频策略，这是一个可选项，大家了解之后，在未来需要使用的时候进行配置即可。 动态调频 $ echo > ondemand /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让系统根据当前负载，动态调整CPU频率 满频模式 $ echo > performance /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让CPU始终以满频，也就1.2GHz的频率工作 打开超频 $ echo 1 > /sys/devices/system/cpu/cpufreq/boost #使CPU以超频，也就是1.5GHz的频率工作 关闭超频 $ echo 0 > /sys/devices/system/cpu/cpufreq/boost 这里CPU频率为，满频模式：1.2GHz，超频模式：1.5GHz。 大家需要注意，默认的系统配置是关闭超频、并且动态调频的配置。这样可以比较好地保证功率最优。 安装ROS2功能包 接下来，还有一个很重要的配置，那就是安装ROS2功能包，我们说TogetherROS是基于ROS2深度优化的，很多模块还是会复用ROS2中的功能，所有ROS2的原生功能也可以支持，这里我们就把ROS2必要的功能包都安装一下，让系统的功能模块更加完整。 熟悉ROS2的同学，应该对这些指令并不陌生，和ROS2官方手册中的安装步骤一致，不过还是建议大家跟着课程的步骤一起来安装一下。 添加ROS2源 第一步我们需要更新系统软件源，并安装必要的下载工具。 $ sudo apt update && sudo apt install curl gnupg lsb-release #更新软件源 $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg #设置ROS2软件源秘钥 $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null #设置ROS2软件源 Attention 大部分国内开发者在这都会遇到同一个问题：网址无法连接。解决方案可以参考古月居官网上的这篇帖子： 《解决”Failed to connect to raw.githubusercontent.com“报错》 安装ROS2包 $ sudo apt update #更新软件源 $ sudo apt install ros-foxy-ros-base ros-foxy-demo-nodes-cpp # 安装ROS2功能包 时间会有些长，需要稍微等待一下。 现在ROS2就安装完成了。 大家可以使用同样的命令，继续安装ROS2中的更多功能包。 这里推荐大家先安装ROS2之后会使用到的编译器，比如python3-colcon-common-extensions。我们后续一些TogetherROS功能包的编译，也会使用python3-colcon-common的命令来安装。 $ sudo apt install python3-colcon-common-extensions # ROS2编译器 另外，我们推荐大家安装一个git工具，大家可以通过它下载GitHub、GitLab上的软件包，我们后续也会用到。安装命令为本小节代码第四行。 $ sudo apt install git # 安装git工具 到这里，我们常用的软件和功能包就安装完成了。我们可以看到，在旭日X3派文件目录/opt底下，除了之前的/tros文件夹外，还多出来一个/ros文件夹，里面就是我们刚才安装好的ros-foxy版本的所有系统文件。 如果大家要使用ROS2的功能包，也需要source里面的.bash或者.bat脚本文件。 建立软链接 为了方便我们在TogetherROS系统李调用ROS2的功能，在TogetherROS里提供了一个叫create_soft_link创建软链接的脚本，它而已通过软链接，把ROS2的环境变量链接到当前TogetherROS的环境包里来。执行以下命令： $ cd /opt/tros ## 使用/opt/tros目录下的create_soft_link.py创建ROS package至TogetherROS的软链接 $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros 这样设置以后，假如你source了TogetherROS的环境变量，那么同样的配置也会对ROS2生效。 好啦，到这里为止，所有必要的配置项我们都做完了，是不是有点迫不及待想要使用TogetherROS了呢？","text_tokens":["下来","先","同一个","successfully","com","也","问题","rescan","(",",","当然","不","时间","tros","&&","假如","demo","命令行","ubuntu","有点","做","环境变","extensions","这里","上","电脑","install","检查","基于","深度","模块","手册","叫","打开","二个","_","进行","/","没有","默认","代码","gpg","http","帖子","会","我","#","upgrade","main","功率","包里","使","无线网","根据","安装","算力","办公室","？","超频","一些","至","过","策略","ros2","这是","更新","现在"," ","软","并","key","colcon","线网","必要","《","调整","脚本","mobaxterm","下","可选","系统软件","以下","了","而已","呢","\"","source","模式","这篇","网址","远程","了解","检查一下","无线","ping","https","为本","编译","1.2",":","名称","nmcli","通","升级","第四","以","报错","系统文件","账号","你","arch","刚才","板卡","除了","继续","达到最佳","activated","keyring","互联","[","文件夹","master","直接","已经","以满频","跟着","统配","py","达到","第三个","performance","连接","说","小节","完成","x3","它","或","如果","dhcp","终端","同一","源","地","对","建议","不是","步骤","路由","接下","list","第二个","可选项","登录","usr","codename","里面","bash","full","未来","release","更","ssl","d","很","相同","那么","keyrings","熟悉","null","迫不及待","-","长","中","多功能","package","包","$","第一","周边","来","优化","执行","share","link","”","by","哪些","时候",">","apt","devices","方案","推荐","域名","稍微","系统","第四行","lsb","第一个","古月","支持","创建","cd","负载","0","底下","1.5","architecture","环境变量","；","之前","“","四行","功能","y","更加","所有","就是","旭日","弹","按照","rosdistro","togetherros","无法","调用","policy0","：","这些","另外","一","soft","后续","opt","还有","大部","结果","软件","想要","。","network","起来","修改","把","这","bat","第三","root","sys","signed","vim","同样","|","是","居","print","到","等到","可以","派","动态","create","开发","完","网线","官方","和","状态","sudo","》","github","不及","大部分","工作","raw","居官","网上","在","路由器","curl","李","、","注意","版本","比如","有","参考","大家","是不是","不会","解决方案","里","tee","o","wifi","即可","包都","nodes","命令","扫描","去","archive","功能模块","为止","这样","设置","变量","开发者","第一步","psmicro","echo","啦","文件目录","用","最优","所","有些","对话","保证","互联网","]","更新包","件夹","之后","需要","网络连接","ghz","遇到","的话","系统配","同学","foxy","工具","接下来","建立","配置","使用","common","dev","用户","软件包","出来","选择","原生","复用","ondemand","os","外","并且","git","deb","满频","秘钥","完整","sources","看到","出","failed","或者","attention","还","都","=","--","那","最佳","回车","第二","##","项","下载","etc","1","to","部分","系统配置","上网","密码","一下","目录","方便","但","国内","无论","dpkg","password","一致","还是","通过","解决","选项","我们","cpufreq","下载工具","多","githubusercontent","无线网络","不过","用到",".","始终","文件","device",")","system","base","成功","要","说明","就","ssh","信息","编译器","链接","频率","以后","生效","提供","镜像","比较","boost","为","为了","packages","connect","联网","常用","正式","显示","对系统","周边环境","interfaces","调频","重要","后","cpu","让","课程","完善","环境","很多","能够","gitlab","python3","gnupg","等待","返回","，","各种","的","update","governor","搜索","当前","网络","org","无论是","陌生","cpp","scaling","如下","应该","办公","添加","关闭","<","好","三个","指令","ros","信号","公室","一步","一个"],"title":"系统配置","title_tokens":["系统配","系统","配置","系统配置","统配"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#togetherros","text":"无论是旭日X3派，还是TogetherROS，在正式使用之前，都还需要进行一些必要的配置，完善必要的功能模块，提供完整的算力支持，达到最佳状态。","text_tokens":["达到","无论","togetherros","完整","，","还是","模块","x3","的","提供","算力","需要","支持","派","一些","配置","使用","还","状态","进行","正式","都","无论是","功能模块","之前","最佳","达到最佳","。","功能","完善","在","旭日","必要"],"title":"TogetherROS系统配置","title_tokens":["togetherros","系统配","系统","配置","系统配置","统配"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_1","text":"第一个配置，是无线网络连接。 当然，大家也可以直接用网线连接旭日X3派和一个可以上网的路由器，不过更多时候，我们还是会使用无线网络来上网。 我们打开MobaXterm,选择SSH，使用root用户登录板卡；如果之前登录过板卡、还没有关闭的话，也可以继续使用。 现在我们可以通过命令行搜索周边环境有哪些WIFI信号，命令如下： $ sudo nmcli device wifi rescan #扫描当前环境里所有WIFI名称，但扫描结果不会显示 $ nmcli device wifi list #显示扫描到的WIFI名称 $ sudo nmcli device wifi connect <账号> password <密码> #连接WIFI $ sudo vim /etc/network/interfaces #修改DHCP配置 比如，我的办公室里wifi的名称是psmicro,我们就可以使用“sudo nmcli device wifi connect psmicro password <密码>”来连接。 等到终端返回信息“successfully activated\",就说明WIFI连接成功； 我们可以Ping古月居的网址，来检查一下连接。如果能够Ping通，就说明网络已经连接成功，现在就可以成功连接到互联网，进行后续的软件下载和更新了。 网络配置完成后，在后续开发中，大家就可以直接下载或更新各种软件包了。","text_tokens":["名称","nmcli","successfully","：","通","也","rescan",",","当然","还","账号","后续","板卡","继续","结果","软件","activated","互联","下载","etc","。","network","上网","修改","直接","已经","密码","一下","命令行","root","但","password","vim","连接","是","检查","还是","通过","x3","居","完成","到","或","我们","如果","可以","等到","派","打开","dhcp","多","开发","网线","终端","和","sudo","进行","无线网络","不过","/","没有","会","路由","在","路由器","我","device","#","list","成功","、","说明","登录","就","ssh","信息","无线网","比如","更","办公室","有","大家","不会","里","connect","wifi","过","联网","命令","扫描","显示","周边环境","中","interfaces","更新","后","现在","$"," ","第一","周边","来","环境","psmicro","能够","用","线网","”","哪些","时候",">","返回","互联网","，","各种","的","mobaxterm","第一个","古月","搜索","的话","当前","网络","了","配置","使用","；","\"","用户","软件包","之前","选择","如下","网址","“","办公","关闭","检查一下","无线","<","ping","所有","信号","公室","旭日","一个"],"title":"网络连接","title_tokens":["网络","网络连接","连接"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_2","text":"第二个配置，是更新当前旭日X3派所使用的Ubuntu镜像，和在电脑上使用的命令相同。 我们更新一下当前的系统镜像： $ sudo apt update #会按照当前软件源的域名设置去连接远程软件源 $ sudo apt full-upgrade #升级所有可以升级的软件包 弹出如下对话，我们选择“Y”，回车； 这样我们就完成了对系统更新的检查，并安装好了更新包。","text_tokens":["full","上","，","电脑","域名","连接","是","弹","系统","完成","x3","的","：","镜像","update","出","升级","检查","相同","我们","可以","派","当前","了","命令","配置","使用","去","二个","和","sudo","；","-","对系统","源","软件包","软件","选择","第二","如下","更新","设置","回车","这样","“","。","$","对话","y"," ","会","远程","在","并","更新包","#","好","安装","第二个","一下","upgrade","ubuntu","所有","”","所","就","旭日","apt","按照"],"title":"系统更新","title_tokens":["更新","系统"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#cpu","text":"第三个配置，设置CPU的调频策略，这是一个可选项，大家了解之后，在未来需要使用的时候进行配置即可。 动态调频 $ echo > ondemand /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让系统根据当前负载，动态调整CPU频率 满频模式 $ echo > performance /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让CPU始终以满频，也就1.2GHz的频率工作 打开超频 $ echo 1 > /sys/devices/system/cpu/cpufreq/boost #使CPU以超频，也就是1.5GHz的频率工作 关闭超频 $ echo 0 > /sys/devices/system/cpu/cpufreq/boost 这里CPU频率为，满频模式：1.2GHz，超频模式：1.5GHz。 大家需要注意，默认的系统配置是关闭超频、并且动态调频的配置。这样可以比较好地保证功率最优。","text_tokens":["满频","policy0","：","也","以","1","。","系统配置","第三","以满频","统配","sys","这里","第三个","performance","是","选项","可以","cpufreq","动态","打开","_","进行","地","/","工作","默认","始终","在","system","#","功率","、","可选项","就","使","注意","频率","未来","根据","大家","比较","boost","为","超频","即可","策略","这是","这样","调频","设置","cpu","$","让"," ","echo","最优","时候",">","保证","devices","调整","，","系统","之后","的","需要","governor","ghz","可选","当前","负载","系统配","0","配置","使用","1.5","模式","scaling","了解","关闭","ondemand","好","三个","1.2","并且","就是","一个"],"title":"CPU调频策略","title_tokens":["cpu","策略","调频"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2","text":"接下来，还有一个很重要的配置，那就是安装ROS2功能包，我们说TogetherROS是基于ROS2深度优化的，很多模块还是会复用ROS2中的功能，所有ROS2的原生功能也可以支持，这里我们就把ROS2必要的功能包都安装一下，让系统的功能模块更加完整。 熟悉ROS2的同学，应该对这些指令并不陌生，和ROS2官方手册中的安装步骤一致，不过还是建议大家跟着课程的步骤一起来安装一下。","text_tokens":["下来","这里","togetherros","完整","一致","，","是","说","基于","安装","的","很","深度","模块","还是","系统","这些","手册","大家","也","我们","支持","可以","熟悉","一","同学","包都","接下来","配置","官方","不","和","还有","陌生","不过","ros2","功能模块","中","那","原生","重要","包","对","建议","就","步骤","。","功能","让","会","更加"," ","应该","课程","复用","接下","优化","很多","并","起来","把","一下","指令","所有","就是","跟着","必要","一个"],"title":"安装ROS2功能包","title_tokens":["ros2","包","安装","功能"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2_1","text":"第一步我们需要更新系统软件源，并安装必要的下载工具。 $ sudo apt update && sudo apt install curl gnupg lsb-release #更新软件源 $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg #设置ROS2软件源秘钥 $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null #设置ROS2软件源 Attention 大部分国内开发者在这都会遇到同一个问题：网址无法连接。解决方案可以参考古月居官网上的这篇帖子： 《解决”Failed to connect to raw.githubusercontent.com“报错》","text_tokens":["rosdistro","秘钥","同一个","sources","com","无法","：","问题","failed","attention","报错","(","arch","大部","都","=","--","软件","keyring","下载","etc","[","to","。","部分","master","这","&&","ubuntu","国内","dpkg","signed","install","连接","|","print","解决","我们","可以","下载工具","开发","githubusercontent","同一","sudo","_","》","源","/","大部分",".","raw","gpg","http","居官","网上","会","帖子","在",")","curl","#","list","main","usr","codename","release","ssl","安装","d","参考","解决方案","tee","keyrings","packages","o","null","connect","-","archive","ros2","更新","设置","$"," ","第一","开发者","并","第一步","key","echo","share","gnupg","by","”",">","必要","apt","《","方案","]","，","系统","的","lsb","update","需要","古月","系统软件","遇到","工具","architecture","\"","org","source","dev","这篇","网址","“","https","os","ros",":","一步","deb","一个"],"title":"添加ROS2源","title_tokens":["ros2","源","添加"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2_2","text":"$ sudo apt update #更新软件源 $ sudo apt install ros-foxy-ros-base ros-foxy-demo-nodes-cpp # 安装ROS2功能包 时间会有些长，需要稍微等待一下。 现在ROS2就安装完成了。 大家可以使用同样的命令，继续安装ROS2中的更多功能包。 这里推荐大家先安装ROS2之后会使用到的编译器，比如python3-colcon-common-extensions。我们后续一些TogetherROS功能包的编译，也会使用python3-colcon-common的命令来安装。 $ sudo apt install python3-colcon-common-extensions # ROS2编译器 另外，我们推荐大家安装一个git工具，大家可以通过它下载GitHub、GitLab上的软件包，我们后续也会用到。安装命令为本小节代码第四行。 $ sudo apt install git # 安装git工具 到这里，我们常用的软件和功能包就安装完成了。我们可以看到，在旭日X3派文件目录/opt底下，除了之前的/tros文件夹外，还多出来一个/ros文件夹，里面就是我们刚才安装好的ros-foxy版本的所有系统文件。 如果大家要使用ROS2的功能包，也需要source里面的.bash或者.bat脚本文件。","text_tokens":["先","togetherros","看到","第四","也","另外","或者","系统文件","后续","opt","还","刚才","除了","继续","软件","下载","。","时间","文件夹","tros","一下","目录","bat","demo","extensions","这里","上","install","同样","小节","通过","完成","它","x3","到","我们","如果","可以","派","多","和","sudo","github","用到","源","/",".","代码","文件","会","在","#","base","要","、","就","里面","bash","编译器","版本","比如","更","安装","大家","一些","nodes","命令","常用","-","ros2","长","中","多功能","更新","包","现在","$"," ","来","colcon","gitlab","python3","文件目录","等待","有些","apt","脚本","推荐","，","稍微","件夹","之后","的","第四行","系统","update","需要","foxy","工具","了","底下","使用","common","source","软件包","之前","cpp","出来","四行","功能","好","为本","编译","ros","外","所有","就是","旭日","git","一个"],"title":"安装ROS2包","title_tokens":["ros2","包","安装"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_3","text":"为了方便我们在TogetherROS系统李调用ROS2的功能，在TogetherROS里提供了一个叫create_soft_link创建软链接的脚本，它而已通过软链接，把ROS2的环境变量链接到当前TogetherROS的环境包里来。执行以下命令： $ cd /opt/tros ## 使用/opt/tros目录下的create_soft_link.py创建ROS package至TogetherROS的软链接 $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros 这样设置以后，假如你source了TogetherROS的环境变量，那么同样的配置也会对ROS2生效。 好啦，到这里为止，所有必要的配置项我们都做完了，是不是有点迫不及待想要使用TogetherROS了呢？","text_tokens":["togetherros","调用","：","也","soft","你","opt","都","--","##","项","想要","。","tros","把","目录","假如","有点","做","方便","py","环境变","这里","同样","通过","它","到","叫","我们","create","完","_","不及","/",".","对","不是","会","在","李","包里","链接","以后","生效","提供","是不是","那么","里","？","为了","至","命令","迫不及待","ros2","为止","这样","package","设置","变量","$"," ","软","来","环境","执行","啦","link","python3","必要","脚本","，","系统","的","下","创建","cd","当前","以下","foxy","了","配置","使用","而已","环境变量","呢","source","功能","好","ros","所有","一个"],"title":"建立软链接","title_tokens":["链接","软","建立"]},{"location":"TogetherROS/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/","text":"TogetherROS示例运行 接下来，我们就在安装配置好TogetherROS的旭日X3派上，试一试系统自带的一些例程，确保整个系统已经可以正常运行。 通信测试 先来测试一下TogetherROS系统的通信功能。 我们需要启动两个终端，分别连接到旭日X3派上，并分别按以下命令配置环境变量。 终端1： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function 终端2： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 接下来，我们用ros2 run命令运行节点： 运行第一个例程： ros2 run example_rclcpp_minimal_publisher publisher_member_function 这是一个用C++写的最小化的发布者程序，其中节点叫publisher_member+function，按回车运行该节点。 可以看到这个节点开始不断循环发布信息，每次发布的信息为字符串形式，内容是“Hello,world! +数字”。 同样，在终端2的命令行窗口，输入以下命令并回车开启订阅者节点。 ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 这个订阅者节点会获取到、并显示出刚才发布者节点发布的信息。 通过这样一个例程，我们验证了两个节点之间的通信没有问题。这这是一个基于DDS的话题通信。 按CTRL+C可以关闭该例程。 通信系统没有问题了，如果你是一个ROS2的开发者，可能对刚才我们使用的ROS2命令比较熟悉，这时你可能也会产生一个问题：我们之前也安装了ROS2系统，那ROS2的原生功能还可以正常运行么？ 我们再来试一试ROS2中自带的一个例程。 和刚才一样打开两个终端，这里我们需要source一下ROS里的环境变量。该环境变量我们刚才已经设置了过软连接，所以配置过程中它也会配置ROS2的功能包路径。 在终端1输入命令： $ source /opt/tros/local_setup.bash 在终端2，也输入同样的命令，配置环境变量的脚本： 接下来运行两个ROS2的节点。 这两个节点的功能包是属于ROS2里的功能包,可以直接调用到。我们来尝试一下输入命令ros2 run，再输入功能包名称，如果按Tab自动补全文件名，说明可以找到对应的这个功能包： ros2 run demo_nodes_cpp talker talker也是一个发布者节点。按回车运行，可以看到终端1的发布者节点以每秒1次的频率发布消息。 同样，我们到终端2中打开订阅者节点： ros2 run demo_nodes_cpp listener 回车运行，很快两个终端间就建立了通讯。 这样就使用ROS2里的例程实现了话题通信连接，只不过这里我们使用的就是ROS2原生的功能包了，而不是TogetherROS的功能。 通信系统已经没问题了，但看上去似乎还不太直观。 目标检测 没问题，接下来，我们就运行一个更为直观的案例——目标检测。 在这个案例中，需要大家找一个USB的相机，连接到旭日X3拍的USB接口上。 在运行这个例程之前，需要确认两点：1.有一个USB相机已经连接到了旭日X3派板子上；2.有一个HDMI的显示器也连接到了旭日X3派板子上，它主要用于显示后续的图像检测的效果。 要确认USB相机已经正确连接到开发板，可以在终端输入命令“ls - dv\"查看当前设备号，默认把USB相机识别为vedio8，如果当前列表里能找到vedio8就说明相机被成功识别到了。 输入以下命令运行例程： $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 代码第一行，02例程的功能是通过相机动态采集图像，并对图像里的目标物体进行实时识别。 代码第二行，我们用python3来运行例程usb_camera_fcos.py，它的目标识别的功能是通过我们板卡中CPU的AI引擎来实现的。 我们输入以上两行代码，就开始驱动相机、并对相机里的图像做动态识别了。 此时如果有连接HDMI的显示器，就可以在显示器里看到动态识别的效果。 我们可以调整USB相机镜头的范围，去拍一些杯子、电脑、显示器等等，都可以把对应的目标物体识别到，并把对应的物体用彩色框给框出来；在框的左上角，就是识别到物体的名称、以及它识别的概率值了。 几个示例程序都可以正常运行了，说明当前的软硬件系统都已经准备就绪，到这里，我们才算是可以正式开始机器人开发了。","text_tokens":["么","下来","先","也","查看","subscriber","问题",",","板子","似乎","正确","不","框出来","软硬","检测","tros","接口","左上角","demo","命令行","做","环境变","这里","包了","最小化","上","电脑","基于","只不过","function","效果","通信","叫","publisher","2","打开","内容","概率","范围","+","该","_","进行","/","没有","默认","代码","会","c","路径","可能","两个","安装","才","物体","？","一些","算是","过","看上","sample","看上去","ros2","这是"," ","软","并","框","world","话题","这个","调整","脚本","ls","验证","以下","了","\"","source","开启","属于","而","—","者","很快","名称","一样","能","获取","以","minimal","你","刚才","板卡","间","两点","找到","实现","过程","member","已经","直接","没","驱动","py","两行","连接","找","x3","它","如果","local","终端","值","示例","rclcpp","对","不是","接下","订阅","主要","框给","bash","其中","形式","包是","熟悉","窗口","-","中","杯子","包","usb","example","$","第一","机器人","来","所以","setup","”","试一试","被","系统","第一个","对应","正常","cd","环境变量","；","之前","引擎","写","拍","“","功能","用于","分别","就是","旭日","togetherros","太","采集","调用","：","就绪","vedio8","dds","后续","opt","。","这","把","程序","按","补全","同样","是","到","可以","派","动态","循环","开始","开发","和","以上","在","整个","app","彩色","、","不断","实时","例程","设备","启动","camera","有","大家","里","上去","此时","nodes","硬件","命令","去","dv","确保","这样","设置","变量","最小","以及","开发者","用","二行","每次","运行","开发板","框出","尝试","字符","ai","需要","显示器","建立","接下来","配置","使用","02","出来","原生","图像","列表","几个","准备","tab","消息","看到","再","案例","输入","出","产生","这时","还","都","那","号","回车","第二","1","识别","一下","直观","但","镜头","软硬件","自动","次","通过","c++","我们","inference","第二行","不过","左上","等等",".","目标","文件","每秒","自带","成功","talker","要","机器","说明","就","信息","相机","频率","之间","比较","listener","准备就绪","为","确认","正式","显示","上角","cpu","通讯","节点","环境","python3","examples","，","的","更为","当前","ctrl","文件名","发布","第一行","fcos","cpp","hello","hdmi","一行","run","关闭","数字","好","!","ros","发布者","测试","字符串","一个"],"title":"示例运行","title_tokens":["示例","运行"]},{"location":"TogetherROS/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#togetherros","text":"接下来，我们就在安装配置好TogetherROS的旭日X3派上，试一试系统自带的一些例程，确保整个系统已经可以正常运行。","text_tokens":["下来","例程","togetherros","上","，","系统","安装","的","x3","我们","可以","派","一些","正常","接下来","配置","确保","就","。","自带","在","接下","整个","已经","好","试一试","旭日","运行"],"title":"TogetherROS示例运行","title_tokens":["示例","运行","togetherros"]},{"location":"TogetherROS/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#_1","text":"先来测试一下TogetherROS系统的通信功能。 我们需要启动两个终端，分别连接到旭日X3派上，并分别按以下命令配置环境变量。 终端1： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function 终端2： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 接下来，我们用ros2 run命令运行节点： 运行第一个例程： ros2 run example_rclcpp_minimal_publisher publisher_member_function 这是一个用C++写的最小化的发布者程序，其中节点叫publisher_member+function，按回车运行该节点。 可以看到这个节点开始不断循环发布信息，每次发布的信息为字符串形式，内容是“Hello,world! +数字”。 同样，在终端2的命令行窗口，输入以下命令并回车开启订阅者节点。 ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 这个订阅者节点会获取到、并显示出刚才发布者节点发布的信息。 通过这样一个例程，我们验证了两个节点之间的通信没有问题。这这是一个基于DDS的话题通信。 按CTRL+C可以关闭该例程。 通信系统没有问题了，如果你是一个ROS2的开发者，可能对刚才我们使用的ROS2命令比较熟悉，这时你可能也会产生一个问题：我们之前也安装了ROS2系统，那ROS2的原生功能还可以正常运行么？ 我们再来试一试ROS2中自带的一个例程。 和刚才一样打开两个终端，这里我们需要source一下ROS里的环境变量。该环境变量我们刚才已经设置了过软连接，所以配置过程中它也会配置ROS2的功能包路径。 在终端1输入命令： $ source /opt/tros/local_setup.bash 在终端2，也输入同样的命令，配置环境变量的脚本： 接下来运行两个ROS2的节点。 这两个节点的功能包是属于ROS2里的功能包,可以直接调用到。我们来尝试一下输入命令ros2 run，再输入功能包名称，如果按Tab自动补全文件名，说明可以找到对应的这个功能包： ros2 run demo_nodes_cpp talker talker也是一个发布者节点。按回车运行，可以看到终端1的发布者节点以每秒1次的频率发布消息。 同样，我们到终端2中打开订阅者节点： ros2 run demo_nodes_cpp listener 回车运行，很快两个终端间就建立了通讯。 这样就使用ROS2里的例程实现了话题通信连接，只不过这里我们使用的就是ROS2原生的功能包了，而不是TogetherROS的功能。 通信系统已经没问题了，但看上去似乎还不太直观。","text_tokens":["名称","么","先","下来","一样","togetherros","太","看到","调用","再","：","输入","出","获取","也","subscriber","问题","以","产生","这时",",","minimal","dds","似乎","你","opt","刚才","还","不","间","那","回车","1","找到","实现","。","过程","member","tros","已经","直接","没","一下","这","demo","命令行","程序","直观","环境变","按","但","这里","补全","包了","自动","最小化","上","次","连接","同样","是","基于","通过","只不过","x3","它","function","到","通信","我们","c++","叫","可以","派","如果","publisher","2","循环","内容","打开","开始","local","开发","终端","+","该","_","和","不过","/","没有",".","rclcpp","对","不是","文件","会","每秒","在","自带","c","接下","订阅","talker","、","说明","路径","就","不断","可能","bash","信息","例程","频率","两个","其中","之间","启动","安装","形式","比较","？","里","为","包是","listener","上去","熟悉","nodes","过","看上","命令","窗口","显示","看上去","ros2","中","这是","这样","设置","变量","包","最小","example","$"," ","第一","开发者","通讯","节点","来","并","环境","软","所以","world","setup","用","”","examples","试一试","话题","每次","这个","运行","尝试","脚本","字符","，","系统","的","需要","第一个","对应","正常","验证","以下","ctrl","建立","接下来","了","文件名","配置","发布","使用","就是","环境变量","source","之前","cpp","原生","写","开启","“","功能","hello","属于","run","而","关闭","数字","者","很快","分别","!","ros","发布者","tab","消息","测试","旭日","字符串","一个"],"title":"通信测试","title_tokens":["测试","通信"]},{"location":"TogetherROS/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#_2","text":"没问题，接下来，我们就运行一个更为直观的案例——目标检测。 在这个案例中，需要大家找一个USB的相机，连接到旭日X3拍的USB接口上。 在运行这个例程之前，需要确认两点：1.有一个USB相机已经连接到了旭日X3派板子上；2.有一个HDMI的显示器也连接到了旭日X3派板子上，它主要用于显示后续的图像检测的效果。 要确认USB相机已经正确连接到开发板，可以在终端输入命令“ls - dv\"查看当前设备号，默认把USB相机识别为vedio8，如果当前列表里能找到vedio8就说明相机被成功识别到了。 输入以下命令运行例程： $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 代码第一行，02例程的功能是通过相机动态采集图像，并对图像里的目标物体进行实时识别。 代码第二行，我们用python3来运行例程usb_camera_fcos.py，它的目标识别的功能是通过我们板卡中CPU的AI引擎来实现的。 我们输入以上两行代码，就开始驱动相机、并对相机里的图像做动态识别了。 此时如果有连接HDMI的显示器，就可以在显示器里看到动态识别的效果。 我们可以调整USB相机镜头的范围，去拍一些杯子、电脑、显示器等等，都可以把对应的目标物体识别到，并把对应的物体用彩色框给框出来；在框的左上角，就是识别到物体的名称、以及它识别的概率值了。 几个示例程序都可以正常运行了，说明当前的软硬件系统都已经准备就绪，到这里，我们才算是可以正式开始机器人开发了。","text_tokens":["名称","下来","采集","看到","能","：","案例","就绪","输入","也","查看","问题","vedio8","板子","正确","后续","板卡","都","号","第二","两点","框出来","软硬","1","找到","实现","。","检测","没","接口","已经","把","识别","左上角","驱动","做","程序","直观","py","两行","镜头","软硬件","这里","上","电脑","找","连接","是","通过","x3","它","到","效果","我们","如果","可以","派","动态","2","开始","开发","概率","范围","inference","终端","值","示例","_","进行","第二行","左上","/","等等","目标",".","默认","代码","对","以上","在","接下","主要","app","彩色","成功","要","机器","、","说明","就","实时","框给","相机","例程","设备","camera","才","物体","有","大家","准备就绪","里","为","一些","此时","算是","硬件","sample","命令","确认","去","-","显示","dv","上角","正式","中","杯子","usb","cpu","$","以及"," ","第一","机器人","并","来","框","python3","用","二行","这个","运行","开发板","框出","被","调整","，","系统","的","ls","ai","需要","对应","更为","正常","显示器","cd","当前","以下","接下来","了","02","第一行","；","\"","fcos","之前","出来","图像","引擎","拍","“","功能","用于","列表","hdmi","一行","几个","—","准备","就是","旭日","一个"],"title":"目标检测","title_tokens":["检测","目标"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/","text":"多节点话题通信 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 编程方法 了解了话题的基本原理，接下来我们就要开始编写代码啦。 创建工作空间 请大家先按照这个流程创建工作空间、下载课程的例程代码，并进行编译。 $ mkdir –p dev_ws/src $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build 运行示例程序 编译成功后，我们尝试运行话题通信的Hello World例程，在这个例程中，我们会先创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_topic_cpp talker $ ros2 run learning_topic_cpp listener 这就是TogetherROS系统中话题通信的方法，依然沿用了ROS2中话题通信的完整流程。 代码解析 发布者的实现方法publisher_member_function.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using namespace std :: chrono_literals ; /* This example creates a subclass of Node and uses std::bind() to register a * member function as a callback from the timer. */ class MinimalPublisher : public rclcpp :: Node { public : MinimalPublisher () : Node ( \"minimal_publisher\" ), count_ ( 0 ) { publisher_ = this -> create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & MinimalPublisher :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, world! \" + std :: to_string ( count_ ++ ); RCLCPP_INFO ( this -> get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者的实现方法subscriber_member_function.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using std :: placeholders :: _1 ; class MinimalSubscriber : public rclcpp :: Node { public : MinimalSubscriber () : Node ( \"minimal_subscriber\" ) { subscription_ = this -> create_subscription < std_msgs :: msg :: String > ( \"topic\" , 10 , std :: bind ( & MinimalSubscriber :: topic_callback , this , _1 )); } private : void topic_callback ( const std_msgs :: msg :: String :: SharedPtr msg ) const { RCLCPP_INFO ( this -> get_logger (), \"I heard: '%s'\" , msg -> data . c_str ()); } rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["下来","先","com","也","查看","subscriber","随处","(",",","似乎","不","来看","本身","传递数据","既然","感器","特性","p","tros","接口","做","本原","在生活中","这里","传输","上","install","渲染","基于","function","creates","heard","通信","叫","publisher","2","–","发出","logger","+","无关","该","_","进行","using","逻辑性","std","/","成为","没有","ms","长宽","chatter","}","bind","代码","会","最后","不知","guyuehome","publishing","c","接收数据","数据结构","#","main","可能","将","看","两个","基本","数据传输","平时","为例","？","一些","callback","依然","沿用","ros2","include"," ","得","并","方式","colcon","小编","world","话题","这个","subclass","组成","知道","英文","作为","魔性","异步","通信模型","类似","10","复杂","了","呢","数量","source","\"",";","namespace","shared","什么","init","了解","者","register","https","str","知识","编译",":","合适","tutorials","名称","一样","根本","src","s","获取","想下","语言","以","minimalpublisher","minimal","某种","你","编程语言","排版","间","实现","因为","[","member","仔细","标准","驱动","收到","public","说","它","千丝万缕","对象","可视","如果","argc","块","local","发送","角度","值","像","示例","接口定义","对","建议","rclcpp","不是","接收","比方","每","订阅","描述","接下","存在","int","想象","优先级","请","想","string","从而","方向","bash","其中","++","更","生活","the","发送数据","-","中","像素","example","数据类型","$","第一","机器人","逻辑","可视化","独立","流程","setup","topic","”","某","时候","人",">","被","sharedptr","系统","从","古月","对应","一篇","创建","cd","this","文章","0","要求","监控","info","杂志","msg","“","功能","用于","关系","区分","make","就是","按照","会先","{","togetherros","太","无法","这些","：","就要","另外","东西","dds","i","opt","还有","定义","最","必然","。","兴趣","literals","subscription","修改","这","把","memory","hpp","桥梁","统一","程序","是从","是","居","到","可以","开始","create","userdata","和","称之为","参数","timerbase","工作","node","as","自然","随处可见","size","spin","在","感兴趣","指","个","、","摇杆","500","a","publish","实时","注意","例程","b","周期","设备","比如","private","有","argv","大家","是不是","传感","里","出去","积木","此时","'","build","硬件","模型","这样","拼接","谁","void","给","联系","char","rgb","啦","get","用","自行","运行","尝试","]","字符","shutdown","之后","优先","需要","某些","的话","同学","接下来","他会","使用","3","后缀","dev","用户","才能","与","传感器","chrono","图像","传递","唯一","return","消息","git","uses","ws","完整","不能","类型","第一次","运动","wall","空间","一次","所谓","再","functional","万缕","画面","之为","适合","基本原理","都","%","=","联系方式","那","号","报社","编写","1","下载","to","较强","不然","公众","一下","mkdir","clone","auto","词","但","拍摄","各种各样","没错","还是","得到","通过","placeholders","中文","我们","多","结构","msgs","编程","各样","等等",".","听","听说","class","固定","文件","成",")","视频","多个","报纸","成功","talker","要","机器","打","一份","of","就","控制指令","方法","相机","信息","感兴","之间","learning","listener","千丝","概念","并不知道","and","&","解析","显示","可见","每个","重要","组织","后","让","课程","message","节点","很多","叫做","原理","timer","只要","t","理解","格式","，","各种","的","微信","gitee","data","from","包含","发布","控制","count","minimalsubscriber","一种","cpp","*","名字","const","应该","hello","数据","run","<","据传","好","指令","!","阅读","ros","挺","发布者","字符串","一个"],"title":"多节点话题通信","title_tokens":["话题","多","节点","通信"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["但","其中","之间","，","各种各样","是","各种","这些","的","千丝万缕","它","有","千丝","万缕","了","各样","间","最","联系方式","一种","传递数据","重要","传递","实现","不是","。","功能","会"," ","机器人","数据","节点","并","方式","联系","独立","机器","桥梁","就是","话题"],"title":"多节点话题通信","title_tokens":["话题","多","节点","通信"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["获取","查看","以","之为","某种","实现","必然","。","一下","这","驱动","桥梁","做","传输","上","拍摄","是","没错","渲染","得到","它","可视","到","我们","可以","称之为","不是","在","视频","存在","要","机器","想","就","a","实时","方向","相机","信息","将","两个","b","之间","设备","数据传输","有","大家","是不是","为例","？","此时","硬件","显示","中","这样"," ","机器人","给","节点","方式","可视化","某","话题","这个","作为","，","的","从","了","监控","用户","才能","图像","传递","功能","关系","数据","据传","ros","一个"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["名称","类型","无法","也","另外","随处","之为","dds","排版","来看","都","本身","号","实现","。","兴趣","特性","公众","把","收到","在生活中","传输","是从","是","基于","居","它","对象","到","叫","如果","可以","发送","角度","和","称之为","/","成为","没有","等等","对","自然","固定","随处可见","接收","会","成","感兴趣","比方","每","订阅","接收数据","报纸","机器","、","打","就","看","感兴","比如","数据传输","生活","有","大家","平时","？","出去","发送数据","可见","模型","这样","组织","数据类型"," ","机器人","节点","叫做","小编","”","话题","这个","格式","，","之后","的","需要","从","古月","微信","类似","的话","文章","了","要求","他会","发布","使用","呢","什么","杂志","名字","“","应该","数据","者","据传","好","知识","发布者","就是","一个"],"title":"发布/订阅模型","title_tokens":["订阅","模型","/","发布"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["一样","再","这些","也","想下","东西","画面","之为","似乎","不","号","1","因为","。","不然","仔细","公众","一下","没错","是","还是","通信","我们","如果","可以","2","多","发送","和","该","称之为","听","对","建议","不是","订阅","存在","想象","报纸","个","多个","要","机器","、","摇杆","优先级","可能","控制指令","注意","有","大家","是不是","里","模型","每个","谁"," ","机器人","节点","并","很多","人","话题","这个","被","知道","，","魔性","的","优先","通信模型","了","发布","控制","3","数量","杂志","唯一","区分","者","指令","ros","挺","发布者","一个"],"title":"多对多通信","title_tokens":["多","对","通信"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["太","第一次","根本","运动","一次","所谓","也","适合","你","不","还有","那","号","报社","。","感器","较强","特性","修改","公众","这","收到","词","传输","是","居","通信","如果","可以","发出","逻辑性","参数","等等","听说","不知","订阅","指","报纸","一份","就","可能","周期","比如","更","有","传感","？","一些","并不知道","后","让"," ","第一","逻辑","叫做","用","某","时候","话题","只要","这个","知道","，","异步","的","某些","古月","一篇","类似","同学","文章","了","发布","控制","传感器","什么","用于","数据","者","指令","阅读","发布者","就是","合适","一个"],"title":"异步通信","title_tokens":["通信","异步"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["一样","不能","也","语言","之为","编程语言","定义","都","既然","。","接口","标准","统一","这里","传输","各种各样","是","说","通过","中文","通信","我们","可以","块","结构","值","像","无关","和","编程","进行","接口定义","各样","称之为","等等","长宽",".","文件","会","最后","成","在","描述","订阅","数据结构","机器","、","就","比如","数据传输","有","概念","积木","中","每个","这样","拼接","像素"," ","得","机器人","节点","方式","rgb","话题","自行","组成","理解","格式","英文","，","各种","系统","的","对应","复杂","包含","了","发布","后缀","与","一种","图像","msg","数据","者","据传","ros","发布者","消息","一个"],"title":"消息接口","title_tokens":["接口","消息"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_7","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。","text_tokens":["下来","，","基本","的","就要","我们","开始","了","接下来","基本原理","编写","代码","。","了解","接下","原理","啦","本原","话题"],"title":"编程方法","title_tokens":["方法","编程"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_8","text":"请大家先按照这个流程创建工作空间、下载课程的例程代码，并进行编译。 $ mkdir –p dev_ws/src $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build","text_tokens":["先","例程","ws","togetherros","，","com","src","空间","的","clone","大家","gitee","创建","–","cd","build","userdata","_","进行","这个","dev","/","工作",".","代码","下载","。","$","课程"," ","guyuehome","并","p","colcon","流程","https","编译","、","mkdir","请",":","git","按照","tutorials"],"title":"创建工作空间","title_tokens":["空间","创建","工作"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_9","text":"编译成功后，我们尝试运行话题通信的Hello World例程，在这个例程中，我们会先创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_topic_cpp talker $ ros2 run learning_topic_cpp listener 这就是TogetherROS系统中话题通信的方法，依然沿用了ROS2中话题通信的完整流程。","text_tokens":["方法","尝试","会先","例程","togetherros","完整","周期","字符","，","类型","install","是","系统","再","的","到","learning","通信","我们","listener","创建","local","了","发送","发布","一个","opt","依然","_","定义","source","沿用","ros2","中","/","cpp","chatter",".","后","“","。","$","接收"," ","hello","在","run","订阅","tros","字符串","者","流程","成功","world","编译","talker","标准","setup","topic","ros","这","”","发布者","从而","string","消息","就是","话题","这个","运行","bash"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_10","text":"发布者的实现方法publisher_member_function.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using namespace std :: chrono_literals ; /* This example creates a subclass of Node and uses std::bind() to register a * member function as a callback from the timer. */ class MinimalPublisher : public rclcpp :: Node { public : MinimalPublisher () : Node ( \"minimal_publisher\" ), count_ ( 0 ) { publisher_ = this -> create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & MinimalPublisher :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, world! \" + std :: to_string ( count_ ++ ); RCLCPP_INFO ( this -> get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者的实现方法subscriber_member_function.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using std :: placeholders :: _1 ; class MinimalSubscriber : public rclcpp :: Node { public : MinimalSubscriber () : Node ( \"minimal_subscriber\" ) { subscription_ = this -> create_subscription < std_msgs :: msg :: String > ( \"topic\" , 10 , std :: bind ( & MinimalSubscriber :: topic_callback , this , _1 )); } private : void topic_callback ( const std_msgs :: msg :: String :: SharedPtr msg ) const { RCLCPP_INFO ( this -> get_logger (), \"I heard: '%s'\" , msg -> data . c_str ()); } rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["{","wall","：","s","subscriber","functional","minimalpublisher","(",",","minimal","i","%","=","1","实现","to","[","literals","subscription","member","memory","hpp","auto","public","function","creates","placeholders","heard","publisher","argc","create","logger","msgs","+","using","_","std","timerbase","/","}","node","ms",".","bind","rclcpp","class","as","size","spin","publishing","c","订阅",")","#","int","main","string","500","a","publish","方法","++","the","private","argv","'","and","callback","&","-","include","void","example"," ","message","char","world","get","topic","timer",">","subclass","t","sharedptr","]","shutdown","的","data","10","from","this","0","发布","info","count","\"",";","chrono","minimalsubscriber","cpp","namespace","shared","*","msg","init","const","hello","<","register","者","return","str","!","make","发布者",":","of","uses"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/","text":"多节点服务通信 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 编程方法 了解了服务通信的原理，接下来我们就要开始编写代码啦，我们尝试通过服务实现一个加法求解器的功能。 运行示例程序 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 我们一起操作下这个例程。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_service_cpp server $ ros2 run learning_service_cpp client 2 3 话题和服务是最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 代码解析 服务器端add_two_ints_server.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <memory> void add ( const std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Request> request, std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Response> response ) { response->sum = request->a + request->b ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Incoming request\\na: %ld\" \" b: %ld\" , request->a, request->b ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"sending back response: [%ld]\" , ( long int ) response->sum ) ; } int main ( int argc, char **argv ) { rclcpp::init ( argc, argv ) ; std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared ( \"add_two_ints_server\" ) ; rclcpp::Service<learning_service_cpp::srv::AddTwoInts>::SharedPtr service = node->create_service<learning_service_cpp::srv::AddTwoInts> ( \"add_two_ints\" , & add ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Ready to add two ints.\" ) ; rclcpp::spin ( node ) ; rclcpp::shutdown () ; } 客户端add_two_ints_client.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <chrono> #include <cstdlib> #include <memory> using namespace std :: chrono_literals ; int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); if ( argc != 3 ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"usage: add_two_ints_client X Y\" ); return 1 ; } std :: shared_ptr < rclcpp :: Node > node = rclcpp :: Node :: make_shared ( \"add_two_ints_client\" ); rclcpp :: Client < learning_service_cpp :: srv :: AddTwoInts >:: SharedPtr client = node -> create_client < learning_service_cpp :: srv :: AddTwoInts > ( \"add_two_ints\" ); auto request = std :: make_shared < learning_service_cpp :: srv :: AddTwoInts :: Request > (); request -> a = atoll ( argv [ 1 ]); request -> b = atoll ( argv [ 2 ]); while ( ! client -> wait_for_service ( 1 s )) { if ( ! rclcpp :: ok ()) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Interrupted while waiting for the service. Exiting.\" ); return 0 ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"service not available, waiting again...\" ); } auto result = client -> async_send_request ( request ); // Wait for the result. if ( rclcpp :: spin_until_future_complete ( node , result ) == rclcpp :: FutureReturnCode :: SUCCESS ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"Sum: %ld\" , result . get () -> sum ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Failed to call service add_two_ints\" ); } rclcpp :: shutdown (); return 0 ; }","text_tokens":["访问","下来","while","也","时","addtwoints","(",",","不","来看","传递数据","感器","usage","tros","接口","一起","在生活中","红色","应答","半天","传输","上","电脑","install","那有","求和","ld","尽快","效果","通信","2","准确","logger","+","using","_","进行","std","成为","/","没有","}","available","代码","会","async","我","视觉","#","main","可能","将","两个","interrupted","物体","等","答","ros2","futurereturncode","include"," ","有所不同","na","并","封装","图像识别","add","服务器","话题","这个","知道","务器","异步","else","通信模型","下","类似","同步","数据通","数据通信","了","future","\"","source",";","namespace","加数","shared","init","了解","一般","—","者","网页","单向",":","越快越好","一样","简称","浏览器","完全","应用","s","获取","相比","srv","你","继续","ints","实现","[","ok","过程","周期性","标准","驱动","具体","收到","这种","高","苹果","前者","argc","local","转圈圈","发送","同步性","示例","核心","对","rclcpp","反馈","接收","waiting","每","订阅","接下","讲","存在","int","bash","sending","其中","wait","更","生活","形式","很","the","越好","变成","圈圈","服务器发送","-","然后","中","$","机器人","所以","一问一答","setup","”","时候","人",">","sharedptr","域名","本","介绍","从","古月","操作","0","要求","response","学习","info","not","而是","加法","之前","好像","求解","request","msg","“","功能","y","反应","make","就是","按照","并不需要","{","无法","这些","：","就要","另外","后续","opt","不同","还有","定义","client","结果","想要","客户","。","literals","问","incoming","hpp","memory","if","但是","程序","一直","宕机","call","cs","ready","同样","是","居","到","可以","上层","开始","create","最为","和","状态","称之为","一对","node","网站","spin","在","、","a","跟随","例程","某个","周期","b","比如","success","当","send","argv","大家","server","传感","long","cstdlib","出去","service","此时","命令","页面","模型","这样","void","给","位置","char","啦","get","运行","尝试","]","shutdown","之后","for","需要","某些","客户端","x","请求","接下来","使用","经常","3","处理","chrono","传感器","展现","图像","传递","唯一","有所","查询","是否","向","return","越快","消息","机制","运动","看到","发","sum","failed","最新","或者","之为","坐标","适合","complete","都","%","=","浏览","编写","1","to","back","部分","error","识别","界面","auto","ptr","until","但","通过","得到","还是","我们","判断","多","again","编程","目标",".","文件","成",")","发给","多个","要","机器","假设","two","就","方法","控制指令","相机","信息","频率","服务器端","之间","希望","常见","提供","两种","learning","为","后者","\\","&","解析","常用","计算","后","课程","节点","叫做","原理","转圈","result","这么","服务","返回","，","各种","的","atoll","...","网络","发布","控制","附近","一种","cpp","*","器","const","exiting","数据","针对","run","<","指令","!","ros","不好","发布者","一个"],"title":"多节点服务通信","title_tokens":["通信","多","节点","服务"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["方法","将","知道","传输","之间","，","这种","机制","异步","无法","本","的","效果","通信","我们","另外","可以","类似","准确","同步","发布","使用","学习","你","常用","答","一种","实现","。"," ","数据","节点","是否","我","订阅","—","讲","问","者","多个","ros","单向","发布者","消息","一起","收到","话题","服务"],"title":"多节点服务通信","title_tokens":["通信","多","节点","服务"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["并不需要","一样","运动","机制","应用","发","另外","最新","或者","你","不同","继续","实现","。","问","识别","驱动","一直","红色","应答","传输","这种","是","通过","得到","高","尽快","到","通信","我们","可以","上层","发送","和","成为","目标","对","反馈","在","我","订阅","发给","机器","跟随","相机","信息","频率","其中","周期","希望","比如","更","形式","物体","变成","service","此时","答","然后","中","模型","这样","课程"," ","有所不同","机器人","节点","并","位置","图像识别","时候","话题","这么","这个","服务","，","的","需要","通信模型","请求","了","发布","使用","而是","附近","之前","图像","好像","有所","查询","数据","单向","ros","按照","一个"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["返回","信息","服务器端","简称","某个","浏览器","上","，","机制","这种","务器","常见","比如","各种","之后","的","形式","生活","很","需要","通过","从","某些","通信","客户端","应答","为","也","我们","域名","操作","或者","此时","请求","发送","服务器发送","你","经常","就是","来看","答","进行","页面","处理","电脑","模型","/","浏览","展现","网站","客户","实现","就","反馈","。"," ","会","在","数据","我","针对","问","并","在生活中","叫做","向","网页","时候","具体","服务器","收到","服务","cs"],"title":"客户端/服务器模型","title_tokens":["模型","/","客户","务器","服务器","服务","客户端"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["越快越好","信息","半天","服务器端","浏览器","，","务器","是","那有","通过","的","越好","到","也","通信","客户端","我们","可以","相比","判断","或者","同步","之为","转圈圈","要求","了","网络","圈圈","你","状态","称之为","浏览","中","没有","客户","。","接收","一般","过程","在","所以","转圈","反应","不好","假设","越快","服务器","一直","话题","可能","宕机","这个","服务","应答"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["但","访问","一样","服务器端","，","比如","务器","完全","是","看到","居","同样","的","大家","古月","客户端","通信","可以","通信模型","一个","不","都","模型","中","没有","网站","唯一","客户","界面","。","并","每","所以","存在","多个","但是","服务器","人","这个","服务"],"title":"一对多通信","title_tokens":["多","一对","通信"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["方法","一样","两个","，","比如","是","还是","这些","的","介绍","大家","也","通信","苹果","我们","变成","类似","请求","了","命令","坐标","srv","一个","使用","后续","和","还有","定义","中","核心","传递数据",".","传递","msg","反馈","。","文件"," ","会","部分","数据","在","给","位置","要","标准","ros","消息","话题","服务"],"title":"服务接口","title_tokens":["接口","服务"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_7","text":"了解了服务通信的原理，接下来我们就要开始编写代码啦，我们尝试通过服务实现一个加法求解器的功能。","text_tokens":["尝试","下来","，","通过","的","就要","通信","我们","开始","了","接下来","一个","加法","编写","代码","求解","实现","器","。","功能","了解","接下","原理","啦","服务"],"title":"编程方法","title_tokens":["方法","编程"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_8","text":"当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 我们一起操作下这个例程。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_service_cpp server $ ros2 run learning_service_cpp client 2 3 话题和服务是最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。","text_tokens":["获取","时","适合","opt","client","结果","ints","想要","客户","。","感器","周期性","tros","识别","一起","收到","应答","传输","install","是","求和","通过","得到","高","到","通信","我们","可以","2","前者","开始","local","发送","最为","同步性","和","_","进行","/",".","目标","反馈","成","视觉","机器","、","two","就","bash","方法","控制指令","将","例程","服务器端","两个","周期","比如","当","提供","更","两种","等","learning","server","传感","出去","service","后者","常用","ros2","计算","后","$"," ","给","节点","并","封装","位置","一问一答","啦","setup","add","”","服务器","话题","这个","服务","，","务器","之后","的","需要","客户端","下","操作","同步","数据通","请求","数据通信","要求","控制","3","source","加法","传感器","cpp","加数","“","数据","针对","run","指令","单向"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_9","text":"服务器端add_two_ints_server.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <memory> void add ( const std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Request> request, std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Response> response ) { response->sum = request->a + request->b ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Incoming request\\na: %ld\" \" b: %ld\" , request->a, request->b ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"sending back response: [%ld]\" , ( long int ) response->sum ) ; } int main ( int argc, char **argv ) { rclcpp::init ( argc, argv ) ; std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared ( \"add_two_ints_server\" ) ; rclcpp::Service<learning_service_cpp::srv::AddTwoInts>::SharedPtr service = node->create_service<learning_service_cpp::srv::AddTwoInts> ( \"add_two_ints\" , & add ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Ready to add two ints.\" ) ; rclcpp::spin ( node ) ; rclcpp::shutdown () ; } 客户端add_two_ints_client.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <chrono> #include <cstdlib> #include <memory> using namespace std :: chrono_literals ; int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); if ( argc != 3 ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"usage: add_two_ints_client X Y\" ); return 1 ; } std :: shared_ptr < rclcpp :: Node > node = rclcpp :: Node :: make_shared ( \"add_two_ints_client\" ); rclcpp :: Client < learning_service_cpp :: srv :: AddTwoInts >:: SharedPtr client = node -> create_client < learning_service_cpp :: srv :: AddTwoInts > ( \"add_two_ints\" ); auto request = std :: make_shared < learning_service_cpp :: srv :: AddTwoInts :: Request > (); request -> a = atoll ( argv [ 1 ]); request -> b = atoll ( argv [ 2 ]); while ( ! client -> wait_for_service ( 1 s )) { if ( ! rclcpp :: ok ()) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Interrupted while waiting for the service. Exiting.\" ); return 0 ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"service not available, waiting again...\" ); } auto result = client -> async_send_request ( request ); // Wait for the result. if ( rclcpp :: spin_until_future_complete ( node , result ) == rclcpp :: FutureReturnCode :: SUCCESS ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"Sum: %ld\" , result . get () -> sum ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Failed to call service add_two_ints\" ); } rclcpp :: shutdown (); return 0 ; }","text_tokens":["{","while","：","sum","s","failed","addtwoints","(",",","srv","complete","client","%","=","ints","客户","1","[","to","back","literals","usage","ok","incoming","error","hpp","memory","if","auto","ptr","ready","until","call","ld","2","argc","create","again","logger","+","using","_","std","/","}","node","available",".","rclcpp","spin","waiting","async",")","#","int","main","two","a","sending","服务器端","b","interrupted","wait","success","send","the","argv","server","learning","long","cstdlib","service","\\","&","-","futurereturncode","include","void"," ","na","char","get","add","服务器",">","result","服务","]","sharedptr","shutdown","务器","atoll","for","else","客户端","...","x","0","response","future","info","not","3","\"",";","chrono","cpp","namespace","shared","*","request","init","const","y","exiting","<","return","!","make",":"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/","text":"多节点动作通信 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 编程方法 相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 运行示例程序 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_action_cpp server $ ros2 run learning_action_cpp client 代码解析 动作的服务器fibonacci_action_server.cpp： #include <inttypes.h> #include <memory> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO(jacobperron): Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionServer : public rclcpp :: Node { public : using Fibonacci = learning_action_cpp :: action :: Fibonacci ; using GoalHandleFibonacci = rclcpp_action :: ServerGoalHandle < Fibonacci > ; explicit MinimalActionServer ( const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : Node ( \"minimal_action_server\" , options ) { using namespace std :: placeholders ; this -> action_server_ = rclcpp_action :: create_server < Fibonacci > ( this -> get_node_base_interface (), this -> get_node_clock_interface (), this -> get_node_logging_interface (), this -> get_node_waitables_interface (), \"fibonacci\" , std :: bind ( & MinimalActionServer :: handle_goal , this , _1 , _2 ), std :: bind ( & MinimalActionServer :: handle_cancel , this , _1 ), std :: bind ( & MinimalActionServer :: handle_accepted , this , _1 )); } private : rclcpp_action :: Server < Fibonacci >:: SharedPtr action_server_ ; rclcpp_action :: GoalResponse handle_goal ( const rclcpp_action :: GoalUUID & uuid , std :: shared_ptr < const Fibonacci :: Goal > goal ) { RCLCPP_INFO ( this -> get_logger (), \"Received goal request with order %d\" , goal -> order ); ( void ) uuid ; // Let's reject sequences that are over 9000 if ( goal -> order > 9000 ) { return rclcpp_action :: GoalResponse :: REJECT ; } return rclcpp_action :: GoalResponse :: ACCEPT_AND_EXECUTE ; } rclcpp_action :: CancelResponse handle_cancel ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Received request to cancel goal\" ); ( void ) goal_handle ; return rclcpp_action :: CancelResponse :: ACCEPT ; } void execute ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Executing goal\" ); rclcpp :: Rate loop_rate ( 1 ); const auto goal = goal_handle -> get_goal (); auto feedback = std :: make_shared < Fibonacci :: Feedback > (); auto & sequence = feedback -> sequence ; sequence . push_back ( 0 ); sequence . push_back ( 1 ); auto result = std :: make_shared < Fibonacci :: Result > (); for ( int i = 1 ; ( i < goal -> order ) && rclcpp :: ok (); ++ i ) { // Check if there is a cancel request if ( goal_handle -> is_canceling ()) { result -> sequence = sequence ; goal_handle -> canceled ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Canceled\" ); return ; } // Update sequence sequence . push_back ( sequence [ i ] + sequence [ i - 1 ]); // Publish feedback goal_handle -> publish_feedback ( feedback ); RCLCPP_INFO ( this -> get_logger (), \"Publish Feedback\" ); loop_rate . sleep (); } // Check if goal is done if ( rclcpp :: ok ()) { result -> sequence = sequence ; goal_handle -> succeed ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Succeeded\" ); } } void handle_accepted ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { using namespace std :: placeholders ; // this needs to return quickly to avoid blocking the executor, so spin up a new thread std :: thread { std :: bind ( & MinimalActionServer :: execute , this , _1 ), goal_handle }. detach (); } }; // class MinimalActionServer int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); auto action_server = std :: make_shared < MinimalActionServer > (); rclcpp :: spin ( action_server ); rclcpp :: shutdown (); return 0 ; } 动作的客户端fibonacci_action_client.cpp： #include <inttypes.h> #include <memory> #include <string> #include <iostream> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO ( jacobperron ) : Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionClient : public rclcpp::Node { public: using Fibonacci = learning_action_cpp::action::Fibonacci ; using GoalHandleFibonacci = rclcpp_action::ClientGoalHandle<Fibonacci> ; explicit MinimalActionClient ( const rclcpp::NodeOptions & node_options = rclcpp::NodeOptions ()) : Node ( \"minimal_action_client\" , node_options ) , goal_done_ ( false ) { this->client_ptr_ = rclcpp_action::create_client<Fibonacci> ( this->get_node_base_interface () , this->get_node_graph_interface () , this->get_node_logging_interface () , this->get_node_waitables_interface () , \"fibonacci\" ) ; this->timer_ = this->create_wall_timer ( std::chrono::milliseconds ( 500 ) , std::bind ( & MinimalActionClient::send_goal, this )) ; } bool is_goal_done () const { return this->goal_done_ ; } void send_goal () { using namespace std::placeholders ; this->timer_->cancel () ; this->goal_done_ = false ; if ( !this->client_ptr_ ) { RCLCPP_ERROR ( this->get_logger () , \"Action client not initialized\" ) ; } if ( !this->client_ptr_->wait_for_action_server ( std::chrono::seconds ( 10 ))) { RCLCPP_ERROR ( this->get_logger () , \"Action server not available after waiting\" ) ; this->goal_done_ = true ; return ; } auto goal_msg = Fibonacci::Goal () ; goal_msg.order = 10 ; RCLCPP_INFO ( this->get_logger () , \"Sending goal\" ) ; auto send_goal_options = rclcpp_action::Client<Fibonacci>::SendGoalOptions () ; send_goal_options.goal_response_callback = std::bind ( & MinimalActionClient::goal_response_callback, this, _1 ) ; send_goal_options.feedback_callback = std::bind ( & MinimalActionClient::feedback_callback, this, _1, _2 ) ; send_goal_options.result_callback = std::bind ( & MinimalActionClient::result_callback, this, _1 ) ; auto goal_handle_future = this->client_ptr_->async_send_goal ( goal_msg, send_goal_options ) ; } private: rclcpp_action::Client<Fibonacci>::SharedPtr client_ptr_ ; rclcpp::TimerBase::SharedPtr timer_ ; bool goal_done_ ; void goal_response_callback ( std::shared_future<GoalHandleFibonacci::SharedPtr> future ) { auto goal_handle = future.get () ; if ( !goal_handle ) { RCLCPP_ERROR ( this->get_logger () , \"Goal was rejected by server\" ) ; } else { RCLCPP_INFO ( this->get_logger () , \"Goal accepted by server, waiting for result\" ) ; } } void feedback_callback ( GoalHandleFibonacci::SharedPtr, const std::shared_ptr<const Fibonacci::Feedback> feedback ) { RCLCPP_INFO ( this->get_logger () , \"Next number in sequence received: %\" PRId32, feedback->sequence.back ()) ; } void result_callback ( const GoalHandleFibonacci::WrappedResult & result ) { this->goal_done_ = true ; switch ( result.code ) { case rclcpp_action::ResultCode::SUCCEEDED: break ; case rclcpp_action::ResultCode::ABORTED: RCLCPP_ERROR ( this->get_logger () , \"Goal was aborted\" ) ; return ; case rclcpp_action::ResultCode::CANCELED: RCLCPP_ERROR ( this->get_logger () , \"Goal was canceled\" ) ; return ; default: RCLCPP_ERROR ( this->get_logger () , \"Unknown result code\" ) ; return ; } RCLCPP_INFO ( this->get_logger () , \"Result received\" ) ; for ( auto number : result.result->sequence ) { RCLCPP_INFO ( this->get_logger () , \"%\" PRId32, number ) ; } } } ; // class MinimalActionClient int main ( int argc, char ** argv ) { rclcpp::init ( argc, argv ) ; auto action_client = std::make_shared<MinimalActionClient> () ; while ( !action_client->is_goal_done ()) { rclcpp::spin_some ( action_client ) ; } rclcpp::shutdown () ; return 0 ; }","text_tokens":["nodeoptions","先","机械","while","送货","也","时","succeeded","(",",","一个","不","jacobperron","既然","应用层","时间","每隔","tros","接口","1s","&&","initialized","告诉","push","reject","上","install","h","基于","模块","通信","场景","2","发出","常常","导航","sendgoaloptions","logger","+","using","_","进行","只能","std","/","例子","没有","简单","}","available","bind","代码","inttypes","会","目的","async","#","main","it","可能","看","两个","需求","action","等","含义","？","feedback","行为","一段","过","callback","其实","ros2","include","现在","once"," ","得","并","let","一边","某一","in","控","服务器","话题","这个","goalhandlefibonacci","随时","知道","务器","check","else","通信模型","下","seconds","眼前","10","复杂","类似","同步","了","future","\"","source","20",";","namespace","shared","什么","通信接口","clientgoalhandle","init","—","者",":","合适","姿态","一样","true","根本","应用","应带","结束","s","毕竟","相比","thread","goalresponse","干什么","minimal","order","30","with","实现","[","又","execute","转个","ok","过程","转","仔细","多少度","具体","收到","executing","达到","底层","public","这种","动作","完成","options","一点一点","canceling","sleep","如果","false","argc","are","local","举个","发送","合成","像","示例","clock","that","对","rclcpp","不是","反馈","waiting","订阅","int","表示","remove","想","string","bash","sending","wait","++","d","the","很","switch","秘密","有没有","next","-","中","iostream","$","机器人","来","执行","part","流程","动","setup","by","was",">","some","上边","被","sharedptr","系统","介绍","就此","从","included","遥控","this","0","response","段时间","不仅仅","info","not","之前","装","needs","request","msg","功能","fibonacci","make","就是","there","loop","{","cancel","调用","这些","：","另外","goaluuid","up","一","相对","i","accepted","opt","定义","client","minimalactionclient","客户","。","就此结束","unknown","起来","logging","这","把","memory","hpp","if","但是","程序","竟然","还会","done","是","到","handle","可以","开始","一段时间","create","interface","和","状态","timerbase","到底","一对","node","after","一点","智能","as","spin","在","整个","code","、","rate","抓取","500","臂","a","publish","实时","例程","某个","周期","比如","当","send","private","有","argv","大家","是不是","server","'","便于","命令","explicit","只有","模型","由","这样","void","sequence","char","get","满足","圈","运行","]","shutdown","prid32","360","之后","for","不仅","需要","客户端","请求","_-","使用","较长","直到","才能","chrono","肯定","进度","return","送餐","aborted","cancelresponse","仅仅","完整","取消","运动","机制","wall","so","再","wrappedresult","当中","number","blocking","坐标","还","都","隐藏","=","%","那","canceled","1","to","servergoalhandle","back","哪里","error","识别","succeed","一下","9000","default","auto","ptr","键盘","没错","placeholders","我们","waitables","多","sequences","编程","用到","rejected","目标",".","detach","class","文件","is",")","多个","base","机器","假设","milliseconds","发现","就","多少","方法","信息","new","服务器端","avoid","分拣","received","accept","learning","goal","概念","and","动图","&","解析","case","graph","旋转","分析","其","后","让","resultcode","同时","节点","转圈","break","timer","result","这么","服务","quickly","理解","，","minimalactionserver","executor","的","update","todo","更为","当前","bool","发布","管理","控制","所处","一种","cpp","度","*","名字","进度条","const","uuid","over","数据","run","<","好","三个","指令","!","ros","发布者","of"],"title":"多节点动作通信","title_tokens":["多","动作","节点","通信"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["被","理解","键盘","某个","完整","上","，","运动","分拣","送货","是","需求","系统","这些","的","应用","机制","动作","不仅","需要","等","很","从","也","通信","我们","另外","可以","含义","概念","场景","遥控","行为","复杂","常常","便于","不仅仅","管理","进行","用到","中","一种","那","简单","目标","对","智能","实现","名字","就","。","功能"," ","会","机器人","这种","目的","在","并","—","识别","好","某一","流程","送餐","机器","、","ros","满足","具体","就是","这么","仅仅","这个","一个"],"title":"多节点动作通信","title_tokens":["多","动作","节点","通信"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["取消","根本","机制","运动","再","结束","当中","还","不","30","。","时间","每隔","转个","ok","过程","哪里","转","这","一下","1s","把","告诉","多少度","是","完成","动作","一点一点","到","通信","我们","如果","可以","发出","开始","一段时间","举个","发送","像","例子","到底","没有","一点","不是","反馈","在","表示","机器","、","假设","想","就","多少","信息","比如","有没有","？","一段","行为","命令","旋转","这样","后","现在","让"," ","得","机器人","并","执行","转圈","控","圈","随时","知道","，","360","的","之后","需要","更为","眼前","10","当前","了","段时间","使用","20","直到","才能","装","肯定","度","进度条","进度","指令","合适","一个"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["达到","姿态","信息","服务器端","机械","周期","，","运动","务器","实时","是","当","动作","的","之后","再","结束","就此","也","通信","客户端","如果","类似","开始","导航","当前","干什么","坐标","发送","使用","一个","控制","和","状态","所处","臂","模型","中","目标","什么","客户","后","就","反馈","。","又","让"," ","就此结束","机器人","同时","过程","整个","起来","执行","一边","动","机器","抓取","想","服务器","收到","可能","这个","服务"],"title":"客户端/服务器模型","title_tokens":["模型","/","客户","务器","服务器","服务","客户端"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["先","一样","服务器端","，","运动","务器","动作","的","完成","有","大家","通信","客户端","下","可以","毕竟","命令","发送","一个","和","都","只能","只有","中","才能","客户","。","机器人","执行","多个","机器","但是","服务器","服务"],"title":"一对多通信","title_tokens":["多","一对","通信"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["，","机制","是","action","动作","的","有","介绍","也","通信","我们","同步","过","使用","进行","定义","中","那","一种","之前",".","既然","通信接口","反馈","。","文件","过程","数据","接口"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["看","底层","竟然","服务器端","两个","周期","，","运动","还会","务器","是","当","调用","再","的","动作","模块","应带","没错","秘密","有","大家","是不是","通信","客户端","下","也","时","应用","请求","动图","命令","发送","其实","使用","发布","就是","和","隐藏","一种","目标","其","应用层","客户","实现","不是","反馈","。"," ","会","基于","过程","来","订阅","仔细","者","三个","表示","服务","机制","发布者","发现","服务器","收到","话题","上边","一个"],"title":"由服务和话题合成","title_tokens":["由","合成","和","话题","服务"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_7","text":"相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["例程","，","动作","的","通信","我们","相比","一","相对","和","较长","之前","分析","。","并","起来","一下","服务","程序","话题","运行"],"title":"编程方法","title_tokens":["方法","编程"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_8","text":"$ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_action_cpp server $ ros2 run learning_action_cpp client","text_tokens":["install","action","server","learning","local","opt","_","client","source","ros2","/","cpp",".","$"," ","run","tros","setup","bash"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_9","text":"动作的服务器fibonacci_action_server.cpp： #include <inttypes.h> #include <memory> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO(jacobperron): Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionServer : public rclcpp :: Node { public : using Fibonacci = learning_action_cpp :: action :: Fibonacci ; using GoalHandleFibonacci = rclcpp_action :: ServerGoalHandle < Fibonacci > ; explicit MinimalActionServer ( const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : Node ( \"minimal_action_server\" , options ) { using namespace std :: placeholders ; this -> action_server_ = rclcpp_action :: create_server < Fibonacci > ( this -> get_node_base_interface (), this -> get_node_clock_interface (), this -> get_node_logging_interface (), this -> get_node_waitables_interface (), \"fibonacci\" , std :: bind ( & MinimalActionServer :: handle_goal , this , _1 , _2 ), std :: bind ( & MinimalActionServer :: handle_cancel , this , _1 ), std :: bind ( & MinimalActionServer :: handle_accepted , this , _1 )); } private : rclcpp_action :: Server < Fibonacci >:: SharedPtr action_server_ ; rclcpp_action :: GoalResponse handle_goal ( const rclcpp_action :: GoalUUID & uuid , std :: shared_ptr < const Fibonacci :: Goal > goal ) { RCLCPP_INFO ( this -> get_logger (), \"Received goal request with order %d\" , goal -> order ); ( void ) uuid ; // Let's reject sequences that are over 9000 if ( goal -> order > 9000 ) { return rclcpp_action :: GoalResponse :: REJECT ; } return rclcpp_action :: GoalResponse :: ACCEPT_AND_EXECUTE ; } rclcpp_action :: CancelResponse handle_cancel ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Received request to cancel goal\" ); ( void ) goal_handle ; return rclcpp_action :: CancelResponse :: ACCEPT ; } void execute ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Executing goal\" ); rclcpp :: Rate loop_rate ( 1 ); const auto goal = goal_handle -> get_goal (); auto feedback = std :: make_shared < Fibonacci :: Feedback > (); auto & sequence = feedback -> sequence ; sequence . push_back ( 0 ); sequence . push_back ( 1 ); auto result = std :: make_shared < Fibonacci :: Result > (); for ( int i = 1 ; ( i < goal -> order ) && rclcpp :: ok (); ++ i ) { // Check if there is a cancel request if ( goal_handle -> is_canceling ()) { result -> sequence = sequence ; goal_handle -> canceled ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Canceled\" ); return ; } // Update sequence sequence . push_back ( sequence [ i ] + sequence [ i - 1 ]); // Publish feedback goal_handle -> publish_feedback ( feedback ); RCLCPP_INFO ( this -> get_logger (), \"Publish Feedback\" ); loop_rate . sleep (); } // Check if goal is done if ( rclcpp :: ok ()) { result -> sequence = sequence ; goal_handle -> succeed ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Succeeded\" ); } } void handle_accepted ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { using namespace std :: placeholders ; // this needs to return quickly to avoid blocking the executor, so spin up a new thread std :: thread { std :: bind ( & MinimalActionServer :: execute , this , _1 ), goal_handle }. detach (); } }; // class MinimalActionServer int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); auto action_server = std :: make_shared < MinimalActionServer > (); rclcpp :: spin ( action_server ); rclcpp :: shutdown (); return 0 ; } 动作的客户端fibonacci_action_client.cpp： #include <inttypes.h> #include <memory> #include <string> #include <iostream> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO ( jacobperron ) : Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionClient : public rclcpp::Node { public: using Fibonacci = learning_action_cpp::action::Fibonacci ; using GoalHandleFibonacci = rclcpp_action::ClientGoalHandle<Fibonacci> ; explicit MinimalActionClient ( const rclcpp::NodeOptions & node_options = rclcpp::NodeOptions ()) : Node ( \"minimal_action_client\" , node_options ) , goal_done_ ( false ) { this->client_ptr_ = rclcpp_action::create_client<Fibonacci> ( this->get_node_base_interface () , this->get_node_graph_interface () , this->get_node_logging_interface () , this->get_node_waitables_interface () , \"fibonacci\" ) ; this->timer_ = this->create_wall_timer ( std::chrono::milliseconds ( 500 ) , std::bind ( & MinimalActionClient::send_goal, this )) ; } bool is_goal_done () const { return this->goal_done_ ; } void send_goal () { using namespace std::placeholders ; this->timer_->cancel () ; this->goal_done_ = false ; if ( !this->client_ptr_ ) { RCLCPP_ERROR ( this->get_logger () , \"Action client not initialized\" ) ; } if ( !this->client_ptr_->wait_for_action_server ( std::chrono::seconds ( 10 ))) { RCLCPP_ERROR ( this->get_logger () , \"Action server not available after waiting\" ) ; this->goal_done_ = true ; return ; } auto goal_msg = Fibonacci::Goal () ; goal_msg.order = 10 ; RCLCPP_INFO ( this->get_logger () , \"Sending goal\" ) ; auto send_goal_options = rclcpp_action::Client<Fibonacci>::SendGoalOptions () ; send_goal_options.goal_response_callback = std::bind ( & MinimalActionClient::goal_response_callback, this, _1 ) ; send_goal_options.feedback_callback = std::bind ( & MinimalActionClient::feedback_callback, this, _1, _2 ) ; send_goal_options.result_callback = std::bind ( & MinimalActionClient::result_callback, this, _1 ) ; auto goal_handle_future = this->client_ptr_->async_send_goal ( goal_msg, send_goal_options ) ; } private: rclcpp_action::Client<Fibonacci>::SharedPtr client_ptr_ ; rclcpp::TimerBase::SharedPtr timer_ ; bool goal_done_ ; void goal_response_callback ( std::shared_future<GoalHandleFibonacci::SharedPtr> future ) { auto goal_handle = future.get () ; if ( !goal_handle ) { RCLCPP_ERROR ( this->get_logger () , \"Goal was rejected by server\" ) ; } else { RCLCPP_INFO ( this->get_logger () , \"Goal accepted by server, waiting for result\" ) ; } } void feedback_callback ( GoalHandleFibonacci::SharedPtr, const std::shared_ptr<const Fibonacci::Feedback> feedback ) { RCLCPP_INFO ( this->get_logger () , \"Next number in sequence received: %\" PRId32, feedback->sequence.back ()) ; } void result_callback ( const GoalHandleFibonacci::WrappedResult & result ) { this->goal_done_ = true ; switch ( result.code ) { case rclcpp_action::ResultCode::SUCCEEDED: break ; case rclcpp_action::ResultCode::ABORTED: RCLCPP_ERROR ( this->get_logger () , \"Goal was aborted\" ) ; return ; case rclcpp_action::ResultCode::CANCELED: RCLCPP_ERROR ( this->get_logger () , \"Goal was canceled\" ) ; return ; default: RCLCPP_ERROR ( this->get_logger () , \"Unknown result code\" ) ; return ; } RCLCPP_INFO ( this->get_logger () , \"Result received\" ) ; for ( auto number : result.result->sequence ) { RCLCPP_INFO ( this->get_logger () , \"%\" PRId32, number ) ; } } } ; // class MinimalActionClient int main ( int argc, char ** argv ) { rclcpp::init ( argc, argv ) ; auto action_client = std::make_shared<MinimalActionClient> () ; while ( !action_client->is_goal_done ()) { rclcpp::spin_some ( action_client ) ; } rclcpp::shutdown () ; return 0 ; }","text_tokens":["nodeoptions","loop","{","while","true","wall","cancel","so","：","s","wrappedresult","goaluuid","thread","succeeded","up","number","goalresponse","(",",","minimal","i","blocking","accepted","order","client","%","=","minimalactionclient","canceled","jacobperron","with","1","客户","to","servergoalhandle","[","back","execute","unknown","ok","error","logging","succeed","memory","hpp","&&","initialized","9000","push","if","default","auto","executing","ptr","reject","public","h","done","动作","placeholders","options","handle","canceling","sleep","waitables","2","argc","false","are","create","sendgoaloptions","sequences","interface","logger","+","using","_","std","timerbase","/","}","node","clock","that",".","bind","detach","rclcpp","available","after","class","as","inttypes","spin","waiting","async","is",")","#","code","int","base","main","it","rate","remove","milliseconds","string","500","a","publish","sending","new","avoid","wait","++","action","send","d","the","switch","received","private","argv","accept","server","learning","goal","feedback","'","and","callback","&","next","explicit","-","case","graph","iostream","include","void","once"," ","resultcode","let","sequence","char","part","in","break","get","timer","by","was","服务器",">","result","some","goalhandlefibonacci","服务","quickly","sharedptr","]","shutdown","prid32","务器","minimalactionserver","check","executor","的","for","update","else","rejected","todo","included","客户端","seconds","10","this","0","response","bool","_-","future","info","not","\"",";","chrono","cpp","namespace","shared","needs","*","request","msg","clientgoalhandle","init","const","uuid","over","<","return","!","fibonacci","make",":","aborted","cancelresponse","of","there"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/","text":"零拷贝数据传输 在传统操作系统的数据传输过程中，系统内部会在磁盘、内存、缓存中多次进行数据拷贝，每次都会占用CPU的资源，数据量小的时候还好，随着数据量的增加，CPU的开销也会持续增加，尤其是在机器人图像数据的应用中 ，经常会发生这种问题，导致CPU都在做数据拷贝，没有时间处理其他的应用功能了，直接的感觉就是处理卡顿。 零拷贝技术 针对这种问题，零拷贝技术应运而生。 零拷贝主要的任务就是避免CPU将数据从一块存储拷贝到另外一块存储，避免让CPU做大量的数据拷贝任务，减少不必要的拷贝，或者让别的组件来做这一类简单的数据传输任务，让CPU解脱出来专注于别的任务。这样就可以让系统资源的利用更加有效。 TogetherROS中就提供了灵活、高效的零拷贝功能，可以显著降低大尺寸数据的通信延时和CPU占用，具体有多显著呢，我们不妨进行一个测试。 TogetherROS零拷贝性能测试 我们使用TogetherROS系统内部集成的性能测试工具——performance_test，来评估下开启零拷贝前后的性能差异，这里我们传输的样本数据量是4M。 未开启零拷贝进行数据传输 $ ros2 run performance_test perf_test --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #未开启 开启零拷贝数据传输： $ ros2 run performance_test perf_test --zero-copy --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #开启 好的，测试已经跑完了，我们把结果放到这里，来分析一下。 在这个测试中，关键有四个指标： 时延，也就是消息从发布者到订阅者的传输时间。不开启零拷贝的情况下，平均为0.004912s，开启零拷贝之后，速度快了差不多40倍，平均为0.000180s。 CPU使用率，表示通信活动所占用的CPU时间，大家可以看这个utime指标，开启零拷贝之后时间有显著的提升，消耗CPU的资源少了。 驻留内存，包括通信过程中分配的内存和共享内存，是这个maxrss中的数据，开启零拷贝之后，占用的内存也更少。 样本统计，包括测试中发送、接收以及丢失的消息数量，是这组数据，依然是开启零拷贝之后性能更好。 通过测试，对于大数据通信来讲，零拷贝在CPU消耗、内存占用以及通信延迟抖动方面的性能都会更好。 这里只是便于大家感受零拷贝技术的效果，具体编程中如何使用零拷贝机制呢？ 编程开发 为了方便大家使用，TogetherROS针对零拷贝功能进行了封装，风格类似ROS2中话题通信的接口，还是话题通信一样的流程，我们只需要修改几个函数就可以实现啦。 运行例程 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run hbmem_pubsub talker $ ros2 run hbmem_pubsub listener 代码解析 发布者publisher_hbmem.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" using namespace std :: chrono_literals ; class MinimalHbmemPublisher : public rclcpp :: Node { public : MinimalHbmemPublisher () : Node ( \"minimal_hbmem_publisher\" ), count_ ( 0 ) { // 创建publisher_hbmem，topic为\"topic\"，QOS为KEEPLAST(10)，以及默认的可靠传输 publisher_ = this -> create_publisher_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 ); // 定时器，每隔40毫秒调用一次timer_callback进行消息发送 timer_ = this -> create_wall_timer ( 40 ms , std :: bind ( & MinimalHbmemPublisher :: timer_callback , this )); } private : // 定时器回调函数 void timer_callback () { // 获取要发送的消息 auto loanedMsg = publisher_ -> borrow_loaned_message (); // 判断消息是否可用，可能出现获取消息失败导致消息不可用的情况 if ( loanedMsg . is_valid ()) { // 引用方式获取实际的消息 auto & msg = loanedMsg . get (); // 获取当前时间，单位为us auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()). count (); // 对消息的index和time_stamp进行赋值 msg . index = count_ ; msg . time_stamp = time_now ; // 打印发送消息 RCLCPP_INFO ( this -> get_logger (), \"message: %d\" , msg . index ); publisher_ -> publish ( std :: move ( loanedMsg )); // 注意，发送后，loanedMsg已不可用 // 计数器加一 count_ ++ ; } else { // 获取消息失败，丢弃该消息 RCLCPP_INFO ( this -> get_logger (), \"Failed to get LoanMessage!\" ); } } // 定时器 rclcpp :: TimerBase :: SharedPtr timer_ ; // hbmem publisher rclcpp :: PublisherHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr publisher_ ; // 计数器 size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者subscriber_hbmem.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" class MinimalHbmemSubscriber : public rclcpp :: Node { public : MinimalHbmemSubscriber () : Node ( \"minimal_hbmem_subscriber\" ) { // 创建subscription_hbmem，topic为\"sample\"，QOS为KEEPLAST(10)，以及默认的可靠传输 // 消息回调函数为topic_callback subscription_ = this -> create_subscription_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 , std :: bind ( & MinimalHbmemSubscriber :: topic_callback , this , std :: placeholders :: _1 )); } private : // 消息回调函数 void topic_callback ( const hbmem_pubsub :: msg :: SampleMessage :: SharedPtr msg ) const { // 注意，msg只能在回调函数中使用，回调函数返回后，该消息就会被释放 // 获取当前时间 auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()) . count (); // 计算延时并打印出来 RCLCPP_INFO ( this -> get_logger (), \"msg %d, time cost %dus\" , msg -> index , time_now - msg -> time_stamp ); } // hbmem subscription rclcpp :: SubscriptionHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemSubscriber > ()); rclcpp :: shutdown (); return 0 ; } 接口汇总 我们整理一下，与ROS2中的话题通信相比，TogetherROS带有零拷贝机制的话题通信接口是这样的。 在发布者中，我们可以使用PublisherHbmem来创建一个发布者对象，然后通过create_publisher_hbmem发布数据，而在订阅者中，SubscriptionHbmem用来创建一个订阅者对象，通过 create_subscription_hbmem订阅需要的数据，至于底层如何完成零拷贝的过程，都交给TogetherROS即可。","text_tokens":["样本","duration","test","也","问题","subscriber","风格","us","如何","(",",","不","感觉","赋值","时间","操作系统","每隔","回调","tros","接口","持续","做","函数","不妨","samplemessage","还好","这里","传输","borrow","install","epoch","效果","通信","不必要","publisher","loanmessage","logger","last","出现","using","_","进行","实际","该","只能","std","/","没有","简单","传统","ms","}","bind","代码","默认","来讲","会","消耗","尺寸","#","单位","hbmem","main","差不多","可能","将","看","数据传输","活动","maxrss","？","零","sample","callback","依然","关键","ros2","include"," ","方式","封装","更好","速度","必要","话题","这个","开销","else","下","组件","类似","10","计数","数据通","数据通信","了","一块","呢","数量","source","\"",";","前后","并打印","namespace","shared","包括","通信接口","开启","init","随着","拷贝到","而","steady","—","定时","者","分配",":","perf","未","一样","解脱","毫秒","depth","这组","应用","试工","显著","s","获取","相比","m","minimal","30","驻留","runtime","磁盘","实现","[","不多","多次","过程","keep","尤其","直接","已经","交给","具体","copy","底层","performance","public","带有","这种","完成","对象","argc","缓存","local","打印","发送","时延","倍","clock","index","rclcpp","对","接收","释放","主要","订阅","int","表示","string","bash","cost","共享内存","minimalhbmempublisher","loanedmsg","++","d","任务","发生","history","-","然后","microseconds","中","统计","少","平均","$","机器人","对于","来","流程","setup","卡顿","topic","时候",">","被","sharedptr","不可","小","系统","从","操作","创建","this","0","info","msg","定时器","功能","更加","since","占用","放到","make","就是","用率","{","togetherros","调用","测试工具","：","另外","opt","应运而生","结果","不必","使用率","。","literals","subscription","修改","这","把","memory","hpp","if","publisherhbmem","高效","加一","dus","避免","差异","是","到","utime","可以","create","共享","开发","完","汇总","和","降低","0.004912","timerbase","40","感受","node","time","size","zero","0.000180","spin","在","导致","keeplast","、","只","存储","publish","注意","例程","private","有","argv","大家","max","即可","便于","系统资源","更少","这样","void","内存","只是","以及","有效","已","跑","char","延时","啦","get","用","所","每次","运行","丢弃","]","shutdown","之后","subscriptionhbmem","需要","4m","工具","经常","使用","处理","与","chrono","出来","减少","图像","几个","是否","增加","return","别的","专注","消息","机制","wall","valid","大量","一次","拷贝","大","failed","functional","或者","于","性能","都","%","=","--","stamp","1","to","move","一下","用来","提升","auto","方便","通过","还是","placeholders","我们","判断","多","编程",".","资源","抖动","class","一类","now","is",")","整理","talker","要","机器","就","计数器","集成","可靠","技术","提供","listener","情况","为","为了","四个","方面","&","解析","100","array4m","快","分析","其他","计算","后","cpu","灵活","让","数据量","指标","message","cast","timer","qos","丢失","返回","t","minimalhbmemsubscriber","延迟","r","，","内部","的","应运","利用","失败","当前","发布","引用","count","pubsub","cpp","*","评估","const","数据","针对","run","loaned","可用","reliable","<","据传","好","!","至于","发布者","测试","一个"],"title":"零拷贝数据传输","title_tokens":["据传","传输","零","数据传输","拷贝","数据"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_1","text":"在传统操作系统的数据传输过程中，系统内部会在磁盘、内存、缓存中多次进行数据拷贝，每次都会占用CPU的资源，数据量小的时候还好，随着数据量的增加，CPU的开销也会持续增加，尤其是在机器人图像数据的应用中 ，经常会发生这种问题，导致CPU都在做数据拷贝，没有时间处理其他的应用功能了，直接的感觉就是处理卡顿。","text_tokens":["开销","还好","传输","，","小","这种","内部","是","应用","系统","数据传输","的","拷贝","也","问题","操作","缓存","发生","了","经常","进行","都","处理","中","没有","传统","图像","功能","感觉","资源","其他","磁盘","内存","cpu","随着","。","时间","操作系统","会","多次","占用","数据量","机器人","数据","在","过程","尤其"," ","增加","导致","据传","直接","持续","机器","、","卡顿","做","时候","就是","每次"],"title":"零拷贝数据传输","title_tokens":["据传","传输","零","数据传输","拷贝","数据"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_2","text":"针对这种问题，零拷贝技术应运而生。 零拷贝主要的任务就是避免CPU将数据从一块存储拷贝到另外一块存储，避免让CPU做大量的数据拷贝任务，减少不必要的拷贝，或者让别的组件来做这一类简单的数据传输任务，让CPU解脱出来专注于别的任务。这样就可以让系统资源的利用更加有效。 TogetherROS中就提供了灵活、高效的零拷贝功能，可以显著降低大尺寸数据的通信延时和CPU占用，具体有多显著呢，我们不妨进行一个测试。","text_tokens":["togetherros","解脱","大量","拷贝","大","显著","问题","另外","或者","于","应运而生","不必","。","这","做","具体","不妨","高效","传输","这种","避免","测试","通信","我们","可以","不必要","多","和","降低","进行","简单","资源","一类","主要","尺寸","、","存储","就","将","技术","数据传输","提供","有","任务","零","系统资源","中","这样","cpu","灵活","让"," ","有效","来","延时","必要","，","系统","的","应运","利用","从","组件","了","一块","呢","出来","减少","功能","更加","拷贝到","占用","数据","针对","据传","别的","专注","就是","一个"],"title":"零拷贝技术","title_tokens":["拷贝","零","技术"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#togetherros","text":"我们使用TogetherROS系统内部集成的性能测试工具——performance_test，来评估下开启零拷贝前后的性能差异，这里我们传输的样本数据量是4M。 未开启零拷贝进行数据传输 $ ros2 run performance_test perf_test --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #未开启 开启零拷贝数据传输： $ ros2 run performance_test perf_test --zero-copy --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #开启 好的，测试已经跑完了，我们把结果放到这里，来分析一下。 在这个测试中，关键有四个指标： 时延，也就是消息从发布者到订阅者的传输时间。不开启零拷贝的情况下，平均为0.004912s，开启零拷贝之后，速度快了差不多40倍，平均为0.000180s。 CPU使用率，表示通信活动所占用的CPU时间，大家可以看这个utime指标，开启零拷贝之后时间有显著的提升，消耗CPU的资源少了。 驻留内存，包括通信过程中分配的内存和共享内存，是这个maxrss中的数据，开启零拷贝之后，占用的内存也更少。 样本统计，包括测试中发送、接收以及丢失的消息数量，是这组数据，依然是开启零拷贝之后性能更好。 通过测试，对于大数据通信来讲，零拷贝在CPU消耗、内存占用以及通信延迟抖动方面的性能都会更好。 这里只是便于大家感受零拷贝技术的效果，具体编程中如何使用零拷贝机制呢？","text_tokens":["perf","未","样本","togetherros","depth","机制","这组","测试工具","拷贝","：","试工","大","test","显著","s","也","如何","m","性能","不","都","--","30","结果","使用率","驻留","runtime","1","。","不多","时间","过程","keep","已经","把","一下","提升","具体","copy","这里","performance","传输","差异","是","通过","测试","到","效果","通信","我们","utime","可以","共享","last","完","发送","和","_","进行","时延","0.004912","倍","编程","40","感受","资源","抖动","来讲","接收","会","0.000180","在","订阅","消耗","#","表示","、","差不多","集成","看","共享内存","技术","数据传输","活动","有","大家","maxrss","情况","max","为","？","四个","零","方面","便于","依然","100","history","-","关键","ros2","更少","array4m","中","快","少","分析","统计","平均","内存","cpu","只是","$","以及"," ","数据量","指标","对于","来","跑","更好","速度","所","这个","丢失","延迟","r","，","内部","系统","之后","的","从","下","10","4m","数据通","工具","了","数据通信","发布","使用","就是","呢","数量","前后","包括","开启","评估","占用","数据","run","—","reliable","者","据传","好","分配","放到","发布者","消息","zero","用率"],"title":"TogetherROS零拷贝性能测试","title_tokens":["togetherros","零","性能","拷贝","测试"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_3","text":"为了方便大家使用，TogetherROS针对零拷贝功能进行了封装，风格类似ROS2中话题通信的接口，还是话题通信一样的流程，我们只需要修改几个函数就可以实现啦。","text_tokens":["一样","togetherros","，","还是","拷贝","的","需要","大家","通信","我们","可以","为了","风格","类似","零","了","使用","进行","ros2","中","实现","。","功能","几个","针对","封装","修改","接口","流程","啦","只","就","函数","话题","方便"],"title":"编程开发","title_tokens":["编程","开发"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_4","text":"$ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run hbmem_pubsub talker $ ros2 run hbmem_pubsub listener","text_tokens":["ros2","tros","pubsub","/",".","hbmem","local","setup","install","talker","run","listener","$","opt","_","source"," ","bash"],"title":"运行例程","title_tokens":["运行","例程"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_5","text":"发布者publisher_hbmem.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" using namespace std :: chrono_literals ; class MinimalHbmemPublisher : public rclcpp :: Node { public : MinimalHbmemPublisher () : Node ( \"minimal_hbmem_publisher\" ), count_ ( 0 ) { // 创建publisher_hbmem，topic为\"topic\"，QOS为KEEPLAST(10)，以及默认的可靠传输 publisher_ = this -> create_publisher_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 ); // 定时器，每隔40毫秒调用一次timer_callback进行消息发送 timer_ = this -> create_wall_timer ( 40 ms , std :: bind ( & MinimalHbmemPublisher :: timer_callback , this )); } private : // 定时器回调函数 void timer_callback () { // 获取要发送的消息 auto loanedMsg = publisher_ -> borrow_loaned_message (); // 判断消息是否可用，可能出现获取消息失败导致消息不可用的情况 if ( loanedMsg . is_valid ()) { // 引用方式获取实际的消息 auto & msg = loanedMsg . get (); // 获取当前时间，单位为us auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()). count (); // 对消息的index和time_stamp进行赋值 msg . index = count_ ; msg . time_stamp = time_now ; // 打印发送消息 RCLCPP_INFO ( this -> get_logger (), \"message: %d\" , msg . index ); publisher_ -> publish ( std :: move ( loanedMsg )); // 注意，发送后，loanedMsg已不可用 // 计数器加一 count_ ++ ; } else { // 获取消息失败，丢弃该消息 RCLCPP_INFO ( this -> get_logger (), \"Failed to get LoanMessage!\" ); } } // 定时器 rclcpp :: TimerBase :: SharedPtr timer_ ; // hbmem publisher rclcpp :: PublisherHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr publisher_ ; // 计数器 size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者subscriber_hbmem.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" class MinimalHbmemSubscriber : public rclcpp :: Node { public : MinimalHbmemSubscriber () : Node ( \"minimal_hbmem_subscriber\" ) { // 创建subscription_hbmem，topic为\"sample\"，QOS为KEEPLAST(10)，以及默认的可靠传输 // 消息回调函数为topic_callback subscription_ = this -> create_subscription_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 , std :: bind ( & MinimalHbmemSubscriber :: topic_callback , this , std :: placeholders :: _1 )); } private : // 消息回调函数 void topic_callback ( const hbmem_pubsub :: msg :: SampleMessage :: SharedPtr msg ) const { // 注意，msg只能在回调函数中使用，回调函数返回后，该消息就会被释放 // 获取当前时间 auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()) . count (); // 计算延时并打印出来 RCLCPP_INFO ( this -> get_logger (), \"msg %d, time cost %dus\" , msg -> index , time_now - msg -> time_stamp ); } // hbmem subscription rclcpp :: SubscriptionHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["{","毫秒","wall","valid","调用","一次","duration","：","获取","subscriber","failed","functional","us","(",",","minimal","%","=","stamp","1","to","[","赋值","时间","literals","每隔","回调","subscription","move","memory","hpp","if","函数","auto","samplemessage","publisherhbmem","public","传输","加一","borrow","dus","placeholders","epoch","publisher","判断","argc","create","loanmessage","logger","出现","打印","发送","using","_","进行","实际","和","该","只能","std","timerbase","/","40","}","node","ms","time",".","bind","默认","rclcpp","clock","对","class","index","size","会","spin","导致","在","now","is","订阅",")","keeplast","#","释放","int","单位","hbmem","main","要","string","就","publish","可能","计数器","cost","注意","minimalhbmempublisher","可靠","loanedmsg","++","d","private","argv","情况","为","sample","callback","&","-","microseconds","中","include","void","计算","后","以及"," ","message","cast","已","方式","char","延时","get","topic","timer","用","qos",">","返回","t","丢弃","被","minimalhbmemsubscriber","sharedptr","]","shutdown","，","不可","的","else","subscriptionhbmem","创建","失败","10","计数","this","当前","0","发布","引用","info","使用","count","\"",";","并打印","chrono","pubsub","出来","cpp","namespace","shared","*","msg","init","定时器","const","since","是否","steady","loaned","可用","定时","<","者","return","!","make","发布者",":","消息"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_6","text":"我们整理一下，与ROS2中的话题通信相比，TogetherROS带有零拷贝机制的话题通信接口是这样的。 在发布者中，我们可以使用PublisherHbmem来创建一个发布者对象，然后通过create_publisher_hbmem发布数据，而在订阅者中，SubscriptionHbmem用来创建一个订阅者对象，通过 create_subscription_hbmem订阅需要的数据，至于底层如何完成零拷贝的过程，都交给TogetherROS即可。","text_tokens":["publisherhbmem","底层","togetherros","，","带有","机制","是","通过","拷贝","的","完成","对象","subscriptionhbmem","需要","通信","我们","可以","相比","创建","publisher","create","如何","零","即可","发布","使用","_","都","然后","ros2","与","中","这样","通信接口","。"," ","在","数据","来","而","订阅","subscription","过程","者","接口","整理","一下","hbmem","用来","至于","交给","发布者","话题","一个"],"title":"接口汇总","title_tokens":["汇总","接口"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/","text":"分布式通信配置 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如在这款机器人系统中，就有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用旭日派作为控制器，主要实现传感器驱动、电机控制、AI应用等功能，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个计算平台之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过TogehterROS都已经为我们准备好了，我们只需要在每一个计算上配置好TogehterROS或者ROS2的环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下分布式系统的魅力。 分布式网络搭建 旭日派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function # 旭日派端 $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function # PC端 神奇的事情就这样发生了，旭日X3派上安装的是TogetherROS，我的电脑上安装的是ROS2，他们只要处于同一网络中，就可以实现通信了，感觉就像在一个电脑里一样。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和旭日X3派端中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 话题分布式通信 之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 以话题通信为例，旭日派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串，我们看下效果如何。 $ ros2 run learning_topic_cpp talker # 旭日派端 $ ros2 run learning_topic_cpp listener # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，我们几乎不需要任何配置，代码也不需要做任何修改，一切都会变得如此轻松。","text_tokens":["放","下来","一样","togetherros","系列","同一个","平台","算机","运动","完全","小组","应用","无法","这些","机制","：","也","subscriber","问题","以","毕竟","一系列","或者","压力","位于","attention","笔记本电脑","一","电机","如何","minimal","适合","还","你","不同","典型","不","都","=","带来","任何","两者","感觉","互联","编写","实现","。","感器","member","起来","神奇","修改","已经","布式","直接","这","一下","非常","局域网","桥接","没","一切","驱动","有点","命令行","做","具体","简而言之","计算机","相互","拆解","方便","派端","如此","端","传输","上","电脑","这种","连接","是","完成","x3","function","测试","到","效果","通信","如果","减轻","可以","叫","派","我们","publisher","多","开发","结构","出现","像","于是","和","同一","_","实际","用到","不过","加入","虚拟机","感受","互通","没有","分布","分布式","代码","资源","rclcpp","智能","中有","频繁","不是","会","在","我","每","消耗","这款","主要","变化","接下","#","id","多个","个","订阅","talker","机器","全都","、","只","带领","繁多","请","之一","就","分组","可能","方法","信息","将","笔记","看","例程","一句","两个","之间","希望","比如","原本","提供","安装","等","有","较","传感","大家","比较","情况","里","？","上去","为","为例","任务","事情","listener","分布式系统","框架","而言","发生","即可","看上","命令","搭建","处于","笔记本","任务分配","看上去","your","ros2","此外","中","由","确保","局域","这样","计算","togehterros","后","$"," ","虚拟","机器人","局域网络","节点","并","环境","很多","几乎","打通","world","啦","卡顿","用","topic","轻松","所","examples",">","话题","上边","只要","运行","组成","控制器","learning","作为","字符","，","小","各种","系统","的","ai","需要","下","类似","则","遇到","复杂","pc","计算能力","了","监控","能力","接下来","配置","经常","网络","控制","使用","呢","发布","而是","一系","处理","才能","他们","传感器","如","模式","之前","cpp","岂","什么","变得","体积","功能","远程","hello","数据","run","是否","采用","<","者","好","分配","放在","export","准备","魅力","ros","挺","不够","发布者","并且","domain","就是","旭日","字符串","一个"],"title":"分布式通信配置","title_tokens":["布式","分布","分布式","配置","通信"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。","text_tokens":["将","上","，","算机","平台","系统","这些","的","等","到","情况","里","如果","可以","减轻","？","任务","遇到","压力","分布式系统","多","计算能力","出现","能力","经常","任务分配","处理","中","分布","岂","分布式","计算","智能","实现","不是","。","功能","会"," ","机器人","运行","多个","布式","分配","放在","这","机器","全都","、","卡顿","不够","繁多","就是","计算机","拆解","一个"],"title":"分布式通信配置","title_tokens":["布式","分布","分布式","配置","通信"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_2","text":"什么叫分布式？ 机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如在这款机器人系统中，就有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用旭日派作为控制器，主要实现传感器驱动、电机控制、AI应用等功能，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个计算平台之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过TogehterROS都已经为我们准备好了，我们只需要在每一个计算上配置好TogehterROS或者ROS2的环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下分布式系统的魅力。","text_tokens":["放","下来","平台","算机","运动","完全","应用","这些","毕竟","或者","位于","压力","笔记本电脑","一","电机","适合","还","不同","典型","不","都","任何","实现","。","感器","起来","已经","布式","这","非常","驱动","有点","做","计算机","相互","方便","传输","上","电脑","这种","是","到","叫","减轻","通信","可以","我们","派","多","开发","结构","于是","不过","感受","分布","分布式","资源","在","每","消耗","这款","主要","变化","接下","机器","、","只","带领","之一","就","可能","信息","将","笔记","两个","之间","比如","原本","等","有","较","传感","大家","比较","？","上去","为","任务","框架","分布式系统","看上","笔记本","看上去","ros2","此外","中","由","计算","togehterros"," ","机器人","节点","环境","上边","控制器","组成","作为","，","小","各种","系统","的","ai","需要","下","复杂","了","监控","接下来","配置","控制","传感器","什么","体积","功能","远程","数据","采用","好","分配","准备","魅力","挺","并且","就是","旭日","一个"],"title":"分布式通信","title_tokens":["分布","分布式","通信","布式"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_3","text":"旭日派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function # 旭日派端 $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function # PC端 神奇的事情就这样发生了，旭日X3派上安装的是TogetherROS，我的电脑上安装的是ROS2，他们只要处于同一网络中，就可以实现通信了，感觉就像在一个电脑里一样。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["下来","一样","togetherros","同一个","平台","算机","小组","无法","也","subscriber","问题","attention","minimal","你","不","都","带来","感觉","互联","实现","。","member","神奇","修改","已经","直接","一下","桥接","局域网","这","命令行","做","具体","简而言之","计算机","派端","端","上","电脑","连接","是","完成","x3","function","到","效果","通信","我们","如果","可以","派","publisher","像","同一","和","_","不过","虚拟机","互通","rclcpp","中有","会","在","我","接下","#","个","请","就","分组","将","两个","之间","希望","安装","？","里","为","事情","而言","发生","命令","处于","ros2","中","局域","确保","这样","计算","后","$"," ","虚拟","局域网络","并","很多","打通","用","所","examples","话题","只要","，","的","需要","pc","网络","了","接下来","能力","配置","使用","呢","而是","他们","如","模式","什么","run","测试","旭日","一个"],"title":"分布式网络搭建","title_tokens":["布式","分布","分布式","网络","搭建"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_4","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和旭日X3派端中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["派端","将","一样","一句","同一个","，","机制","算机","电脑","小组","无法","提供","的","x3","：","到","通信","问题","我们","可以","如果","类似","则","即可","了","配置","处于","同一","和","_",">","不同","旭日","your","=","ros2","加入","中","才能","这样","两者","计算","实现","。","$"," ","在","<","没","id","分配","export","ros","domain","就","计算机","分组","一个"],"title":"分布式网络分组","title_tokens":["布式","分布","分布式","网络","分组"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_5","text":"之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 以话题通信为例，旭日派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串，我们看下效果如何。 $ ros2 run learning_topic_cpp talker # 旭日派端 $ ros2 run learning_topic_cpp listener # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，我们几乎不需要任何配置，代码也不需要做任何修改，一切都会变得如此轻松。","text_tokens":["系列","也","问题","以","一系列","如何","不","都","任何","编写","。","修改","直接","布式","一切","做","派端","如此","端","电脑","效果","通信","我们","可以","派","开发","_","实际","用到","没有","分布","分布式","代码","频繁","会","在","订阅","#","talker","机器","方法","看","例程","learning","为例","？","情况","listener","ros2","中","$"," ","机器人","几乎","world","啦","topic","轻松","话题","作为","字符","，","的","需要","下","类似","pc","网络","了","发布","使用","配置","呢","一系","之前","cpp","变得","hello","是否","run","者","好","ros","发布者","测试","旭日","字符串"],"title":"话题分布式通信","title_tokens":["布式","分布","分布式","话题","通信"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/","text":"数字输入与输出 数字输入与输出是最常用的一种外设通信方式，虽然每一个端口只有0和1两种状态，但却可以组合出各种各样的变化。 数字输入与输出原理 数字输入与输出，也称为通用输入输出，全称是General-purpose input/output，大部分情况下，我们都会用简称GPIO GPIO的功能，主要是指这个管脚可以作为数字信号的输入或者输出使用，到底是输入还是输出呢，这需要我们使用系统寄存器来进行配置。 当GPIO被设置为输入模式时，就可以读取这个管脚上的电平高低，从而实现读取外部信号的功能，比如外部按键的信号，就是这样读取的。 当GPIO被设置为输出模式时，我们就可以主动改变管脚的电平高低了，这样就能通过电平的变化，控制外部的设备，比如点亮或者熄灭一个LED灯。 除此之外，一些IO口还可以配置成其他功能，比如PWM输出，串口通信等等。 关于旭日X3派的管脚定义，大家可以参考这张图，他会显示每个管脚具体可以实现什么功能。 这里需要说明一点，旭日X3派的管脚序号定义有三种编码方式： 第一种就是Board编码，这种就是按照主板上管脚排针编号，分别对应1~40号排针。 第二种就是BCM编码，这种方式是参考 Broadcom SOC 的通道编号，侧重CPU寄存器，在使用BCM库或者使用python编程时，常采用的一种编码方式。 第三种就是X3编码，可以理解为是旭日X3派自己的编码方式，在使用旭日派自己的驱动库编程时，会使用到这种编码。 大家在后续编程开发中，需要结合函数接口的说明，使用对应的引脚编号，不然可能会出现意料之外的问题。 引脚复用配置工具 虽然从硬件上看，扩展出来的引脚只有40个，不过大部分引脚还可以配置成多种功能，这样延伸出来变化可就多了，那如何配置引脚的不同功能呢？ 我们可以使用旭日X3派中提供的srpi-config工具进行配置。 直接在终端中输入这个指令，就可以看到这样的窗口，okay配置对应管脚为专用功能，disabled配置对应管脚为GPIO模式，按照自己的需要进行配置即可，配置完成后重启才会生效。 了解了GPIO的概念，接下来我们就要开始编程啦。 数字输入编程 首先我们来看下最基本的数字输入测试，读取一个按键的状态。 硬件接线 我们将按键的一边连接到旭日X3派的38号引脚上，这是一个GPIO的接口，另一边连接到39号引脚，也就是GND。 原理很简单，按键没按下时，导线是断开的，GPIO是默认的状态，按键按下后，导线就会导通，GPIO的状态变成了GND。 这样，我们就可以通过电平的变化，知道按键的状态啦。 运行例程 我们不妨来运行一下，看下实际效果是不是这样。 $ sudo python3 simple_input.py 我们将一个按键开关接到对应的管脚上， 然后连接到旭日X3PI当中，运行刚才的程序。之后我们按下或是松开按键时，他都会打印出对应的电平变化。 按下显示的就是LOW，也就是低电平，松开就是HIGH，也就是高电平。 代码解析 数字输入的功能实现啦，我们来看下代码是如何实现的。 simple_input.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 input_pin = 38 # BOARD 编码 38 def main (): prev_value = None # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输入模式 GPIO . setup ( input_pin , GPIO . IN ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : # 读取管脚电平 value = GPIO . input ( input_pin ) if value != prev_value : if value == GPIO . HIGH : value_str = \"HIGH\" else : value_str = \"LOW\" print ( \"Value read from pin {} : {} \" . format ( input_pin , value_str )) prev_value = value time . sleep ( 1 ) finally : GPIO . cleanup () if __name__ == '__main__' : main () 我们在Python中需要引入X3Pi的GPIO库，从而使用对应的GPIO功能。 主函数里首先需要定义了一个变量来存储这个管脚的电平信号。 进行初始化，设置管脚的编码模式为BOARD模式，之后定义输入用的管脚，这里使用的是BOARD编码，因为他是第38个管脚，所以为38号。 之后的话就会进入到循环当中，这样的一个函数就可以读出当前的电平值。 没有按下按键的时候，38管脚和GND是断开的，他就是高电平，按下按键时，就和GND导通了，这个管脚就会编程低电平。 如果电平值和上一次存储的不一致，后面的判断就会判断出是升高还是降低，最后会把结果打印出来。 松开按键时同理。 数字输出编程 GPIO不止有输入功能，还有输出功能，大家应该经常看到电子设别上的LED灯吧，这就是典型的IO输出控制的设备，我们也来试一试。 硬件接线 我们将一个LED灯的正极连接到了2号引脚，这是5V电源，用来给LED供电的，不过LED电阻小，为了不至于烧坏，我们最好还是在电路中串联一个电阻来限制电流大小。 接下来，当LED的负极接到GND，也就是电源的0V上时，LED两边会因为有电势差而被点亮；当LED的负极也连接到高电平，也就是5V的时候，会因为两边没有电势差，也就不会被点亮。 这个负极的电平信号我们就用GPIO来输出，所以我们把LED的负极连接到任意的GPIO引脚上，比如38号，将这个引脚设置为输出模式，当输出高电平时，灯就会熄灭，输出低电平，灯就会被点亮。 把这两个动作放到一个循环中，就可以实现闪烁的功能啦。 运行示例程序 快来运行例程试一试吧，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行程序，就可以看到这个LED就会开始闪烁了。 $ sudo python3 simple_input.py 代码解析 simple_out.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 output_pin = 38 # BOARD 编码 38 def main (): # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输出模式，并且初始化为高电平 GPIO . setup ( output_pin , GPIO . OUT , initial = GPIO . HIGH ) # 记录当前管脚状态 curr_value = GPIO . HIGH print ( \"Starting demo now! Press CTRL+C to exit\" ) try : # 间隔1秒时间，循环控制LED灯亮灭 while True : time . sleep ( 1 ) GPIO . output ( output_pin , curr_value ) curr_value ^= GPIO . HIGH finally : GPIO . cleanup () if __name__ == '__main__' : main () 数字输入与输出集成 学习了GPIO的输入与输出功能后，我们就可以做一些自动化的功能了。 硬件接线 比如我们同时连接一个按键和LED灯，尝试实现按键被按下，灯被点亮，松开，灯熄灭，这样的功能。 运行示例程序 我们通过这个例程来试一试效果如何？ $ sudo python3 button_led.py 我们来看一下具体的操作，同样的，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。按下按键后，就可以看到LED被点亮了，松开之后，LED就熄灭了。 代码解析 button_led.py #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道： # 36号作为输出，可以点亮一个LED # 38号作为输入，可以接一个按钮 led_pin = 36 # BOARD 编码 36 but_pin = 38 # BOARD 编码 38 # 禁用警告信息 GPIO . setwarnings ( False ) def main (): prev_value = None # Pin Setup: GPIO . setmode ( GPIO . BOARD ) # BOARD pin-numbering scheme GPIO . setup ( led_pin , GPIO . OUT ) # LED pin set as output GPIO . setup ( but_pin , GPIO . IN ) # Button pin set as input # Initial state for LEDs: GPIO . output ( led_pin , GPIO . LOW ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : curr_value = GPIO . input ( but_pin ) if curr_value != prev_value : GPIO . output ( led_pin , curr_value ) prev_value = curr_value print ( \"Outputting {} to Pin {} \" . format ( curr_value , led_pin )) time . sleep ( 1 ) finally : GPIO . cleanup () # cleanup all GPIO if __name__ == '__main__' : main () 基本的配置还是一样的，引入基本的库，然后设置为BOARD模式，然后初始化两个管脚，一个用来读取按键的通断，一个用来控制LED的亮灭，之后只需要判断按键的状态来做出对应的控制LED的动作就可以了。","text_tokens":["下来","while","熄灭","也","张图","问题","时","如何","(",",","不","来看","低电平","numbering","意料","时间","通用","state","接口","scheme","初始","demo","却","做","函数","不妨","这里","上","pin","首先","效果","通信","2","broadcom","出现","+","_","进行","实际","/","}","简单","没有","供电","默认","代码","第一种","会","最后","c","#","串口","main","可能","记录","看","将","两个","基本","才","？","一些","电阻","引脚","实际效果","bin","0v","这是","format","另一边"," ","方式","一边","gnd","in","虽然","做出","数字信号","这个","知道","作为","导通","else","除此","电路","下","了","串联","呢","\"","模式","什么","他","了解","而","采用","读出","str","管脚",":","电源","simple","主","一样","press","简称","starting","true","能","38","自己","disabled","刚才","典型","库","实现","因为","序号","env","接线","直接","没","驱动","具体","py","这种","连接","输出","完成","x3","动作","sleep","如果","false","通断","改变","led","打印","引入","终端","值","两边","示例","cleanup","禁用","延伸","最好","关于","外设","不是","board","exit","每","主要","接下","从而","主动","usr","意料之外","srpi","很","变成","限制","上时","实物","input","窗口","高低","-","然后","多种","中","排针","$","第一","来","所以","编号","setup","第三种","时候","试一试","扩展","被","升高","小","系统","从","对应","操作","0","学习","purpose","；","outputting","结合","功能","python","灯亮","电势","分别","放到","开关","旭日","按键","就是","general","按照","config","{","leds","间隔","：","finally","编码","就要","hobot","5v","后续","不同","还有","定义","大部","最","结果","import","none","36","。","try","def","正极","这","把","第三","if","程序","按","通道","三种","同样","是","print","到","电子","可以","派","不止","循环","开始","称为","开发","和","状态","sudo","降低","大部分","到底","40","time","一点","as","电平","在","__","变化","指","个","只","存储","x3pi","例程","设备","比如","当","设别","有","参考","大家","是不是","不会","里","'","curr","即可","button","硬件","set","大小","吧","只有","setwarnings","low","这样","设置","第二种","变量","gpio","高电平","给","出是","啦","用","运行","尝试","bcm","之后","for","需要","进入","all","的话","工具","接下来","他会","配置","使用","经常","out","pwm","与","出来","点亮","okay","专用","松开","秒","不至于","复用","并且","prev","~","value","soc","常","看到","一次","全称","输入","出","initial","当中","同理","或者","name","除此之外","还","都","=","口","那","号","第二","1","high","to","部分","不然","可","一下","用来","但","导线","按钮","setmode","自动","一致","各种各样","还是","通过","电流","二种","输入输出","我们","负极","判断","多","接","电势差","^","编程","各样","不过","等等",".","自动化","read","编码方式","初始化","重启","成","寄存","按下","now",")","主板","后面","说明","任意","就","烧坏","集成","信息","生效","提供","两种","情况","为","概念","为了","会导通","output","解析","闪烁","常用","断开","io","显示","快","每个","其他","后","cpu","but","同时","接到","原理","python3","理解","端口","，","读取","各种","39","的","或是","灯","第","寄存器","from","当前","ctrl","警告","控制","亮","一种","侧重","组合","灭","应该","之外","数字","指令","!","至于","信号","外部","测试","一个"],"title":"数字输入与输出","title_tokens":["输入","与","输出","数字"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_1","text":"数字输入与输出是最常用的一种外设通信方式，虽然每一个端口只有0和1两种状态，但却可以组合出各种各样的变化。","text_tokens":["但","端口","，","各种各样","是","各种","输出","的","两种","输入","出","通信","可以","0","常用","和","状态","只有","各样","最","与","一种","组合","1","外设","。","方式","每","变化","数字","虽然","却","一个"],"title":"数字输入与输出","title_tokens":["输入","与","输出","数字"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_2","text":"数字输入与输出，也称为通用输入输出，全称是General-purpose input/output，大部分情况下，我们都会用简称GPIO GPIO的功能，主要是指这个管脚可以作为数字信号的输入或者输出使用，到底是输入还是输出呢，这需要我们使用系统寄存器来进行配置。 当GPIO被设置为输入模式时，就可以读取这个管脚上的电平高低，从而实现读取外部信号的功能，比如外部按键的信号，就是这样读取的。 当GPIO被设置为输出模式时，我们就可以主动改变管脚的电平高低了，这样就能通过电平的变化，控制外部的设备，比如点亮或者熄灭一个LED灯。 除此之外，一些IO口还可以配置成其他功能，比如PWM输出，串口通信等等。 关于旭日X3派的管脚定义，大家可以参考这张图，他会显示每个管脚具体可以实现什么功能。 这里需要说明一点，旭日X3派的管脚序号定义有三种编码方式： 第一种就是Board编码，这种就是按照主板上管脚排针编号，分别对应1~40号排针。 第二种就是BCM编码，这种方式是参考 Broadcom SOC 的通道编号，侧重CPU寄存器，在使用BCM库或者使用python编程时，常采用的一种编码方式。 第三种就是X3编码，可以理解为是旭日X3派自己的编码方式，在使用旭日派自己的驱动库编程时，会使用到这种编码。 大家在后续编程开发中，需要结合函数接口的说明，使用对应的引脚编号，不然可能会出现意料之外的问题。","text_tokens":["soc","简称","常","熄灭","能","全称","：","输入","编码","也","张图","自己","问题","时","或者","除此之外","还","后续","定义","大部","都","general","口","号","第二","1","实现","库","意料","。","序号","部分","通用","不然","~","接口","这","第三","驱动","具体","函数","这里","通道","上","三种","这种","是","输出","还是","通过","x3","二种","输入输出","到","通信","我们","可以","派","broadcom","改变","led","称为","开发","出现","进行","编程","旭日","/","大部分","到底","等等","40","一点","关于","编码方式","第一种","board","会","电平","成","寄存","在","主要","变化","主板","指","串口","从而","主动","说明","就","可能","设备","比如","意料之外","当","有","参考","大家","情况","为","一些","input","output","高低","引脚","-","io","显示","中","每个","这样","排针","设置","第二种","其他","cpu","gpio"," ","第一","来","方式","编号","用","第三种","数字信号","这个","被","bcm","理解","作为","，","读取","系统","的","需要","灯","除此","对应","下","寄存器","了","他会","配置","使用","控制","pwm","呢","purpose","与","一种","模式","什么","点亮","侧重","结合","功能","python","之外","采用","数字","分别","信号","管脚","外部","就是","按键","按照","一个"],"title":"数字输入与输出原理","title_tokens":["与","原理","数字","输出","输入"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_3","text":"虽然从硬件上看，扩展出来的引脚只有40个，不过大部分引脚还可以配置成多种功能，这样延伸出来变化可就多了，那如何配置引脚的不同功能呢？ 我们可以使用旭日X3派中提供的srpi-config工具进行配置。 直接在终端中输入这个指令，就可以看到这样的窗口，okay配置对应管脚为专用功能，disabled配置对应管脚为GPIO模式，按照自己的需要进行配置即可，配置完成后重启才会生效。 了解了GPIO的概念，接下来我们就要开始编程啦。","text_tokens":["下来","config","看到","输入","就要","自己","如何","disabled","还","不同","大部","那","。","部分","直接","可","上","完成","x3","我们","可以","派","开始","多","终端","进行","编程","延伸","不过","40","大部分","重启","会","成","在","接下","变化","个","就","看","srpi","生效","提供","才","？","为","概念","即可","硬件","窗口","引脚","-","只有","多种","中","这样","后","gpio"," ","啦","虽然","这个","扩展","，","的","需要","从","对应","工具","了","接下来","配置","使用","呢","出来","模式","okay","专用","功能","了解","指令","管脚","旭日","按照"],"title":"引脚复用配置工具","title_tokens":["工具","引脚","配置","复用"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_4","text":"首先我们来看下最基本的数字输入测试，读取一个按键的状态。","text_tokens":["下","数字","，","基本","测试","按键","读取","。","的","首先","输入","来看","状态","最","一个","我们"],"title":"数字输入编程","title_tokens":["输入","编程","数字"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_5","text":"我们将按键的一边连接到旭日X3派的38号引脚上，这是一个GPIO的接口，另一边连接到39号引脚，也就是GND。 原理很简单，按键没按下时，导线是断开的，GPIO是默认的状态，按键按下后，导线就会导通，GPIO的状态变成了GND。 这样，我们就可以通过电平的变化，知道按键的状态啦。","text_tokens":["导线","将","知道","上","，","连接","是","39","通过","的","x3","38","很","到","也","我们","下","可以","派","时","变成","会导通","了","引脚","断开","状态","旭日","这是","号","简单","这样","默认","后","就","。","gpio","另一边"," ","电平","按下","一边","原理","变化","接口","gnd","没","啦","就是","按键","一个","按"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_6","text":"我们不妨来运行一下，看下实际效果是不是这样。 $ sudo python3 simple_input.py 我们将一个按键开关接到对应的管脚上， 然后连接到旭日X3PI当中，运行刚才的程序。之后我们按下或是松开按键时，他都会打印出对应的电平变化。 按下显示的就是LOW，也就是低电平，松开就是HIGH，也就是高电平。","text_tokens":["simple","看","将","x3pi","上","，","连接","之后","的","或是","出","到","是不是","效果","我们","下","对应","也","时","当中","input","打印","一个","刚才","就是","sudo","实际","实际效果","_","然后","旭日","程序","都","显示","low","这样",".","py","他","松开","high","不是","。","$"," ","会","高电平","电平","来","按下","低电平","接到","变化","一下","python3","管脚","开关","按键","运行","不妨"],"title":"运行例程","title_tokens":["运行","例程"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_7","text":"数字输入的功能实现啦，我们来看下代码是如何实现的。 simple_input.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 input_pin = 38 # BOARD 编码 38 def main (): prev_value = None # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输入模式 GPIO . setup ( input_pin , GPIO . IN ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : # 读取管脚电平 value = GPIO . input ( input_pin ) if value != prev_value : if value == GPIO . HIGH : value_str = \"HIGH\" else : value_str = \"LOW\" print ( \"Value read from pin {} : {} \" . format ( input_pin , value_str )) prev_value = value time . sleep ( 1 ) finally : GPIO . cleanup () if __name__ == '__main__' : main () 我们在Python中需要引入X3Pi的GPIO库，从而使用对应的GPIO功能。 主函数里首先需要定义了一个变量来存储这个管脚的电平信号。 进行初始化，设置管脚的编码模式为BOARD模式，之后定义输入用的管脚，这里使用的是BOARD编码，因为他是第38个管脚，所以为38号。 之后的话就会进入到循环当中，这样的一个函数就可以读出当前的电平值。 没有按下按键的时候，38管脚和GND是断开的，他就是高电平，按下按键时，就和GND导通了，这个管脚就会编程低电平。 如果电平值和上一次存储的不一致，后面的判断就会判断出是升高还是降低，最后会把结果打印出来。 松开按键时同理。","text_tokens":["simple","value","主","press","{","starting","while","true","一次","：","38","输入","finally","编码","hobot","时","当中","同理","如何","(",",","name","不","来看","低电平","定义","=","结果","import","none","号","1","实现","to","high","库","因为","。","try","def","env","把","初始","demo","if","函数","py","这里","setmode","通道","上","一致","是","print","pin","还是","首先","到","sleep","我们","如果","可以","判断","循环","打印","引入","+","值","和","_","cleanup","进行","编程","降低","/","}","time","没有",".","代码","read","as","board","exit","初始化","会","电平","最后","在","now","c","__",")","按下","#","个","main","后面","存储","从而","就","usr","x3pi","里","为","'","input","硬件","断开","bin","low","中","这样","设置","变量","gpio","format"," ","高电平","出是","来","所以","编号","gnd","in","啦","python3","setup","用","时候","这个","升高","，","读取","导通","之后","的","else","需要","对应","下","第","进入","from","的话","当前","ctrl","了","使用","\"","出来","模式","他","松开","功能","python","读出","数字","str","!","信号","管脚",":","就是","按键","prev","一个"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_8","text":"GPIO不止有输入功能，还有输出功能，大家应该经常看到电子设别上的LED灯吧，这就是典型的IO输出控制的设备，我们也来试一试。","text_tokens":["上","，","看到","设备","设别","输出","的","输入","有","灯","电子","大家","也","我们","不止","led","经常","典型","吧","还有","控制","io","。","gpio","功能","应该","来","这","试一试","就是"],"title":"数字输出编程","title_tokens":["输出","编程","数字"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_9","text":"我们将一个LED灯的正极连接到了2号引脚，这是5V电源，用来给LED供电的，不过LED电阻小，为了不至于烧坏，我们最好还是在电路中串联一个电阻来限制电流大小。 接下来，当LED的负极接到GND，也就是电源的0V上时，LED两边会因为有电势差而被点亮；当LED的负极也连接到高电平，也就是5V的时候，会因为两边没有电势差，也就不会被点亮。 这个负极的电平信号我们就用GPIO来输出，所以我们把LED的负极连接到任意的GPIO引脚上，比如38号，将这个引脚设置为输出模式，当输出高电平时，灯就会熄灭，输出低电平，灯就会被点亮。 把这两个动作放到一个循环中，就可以实现闪烁的功能啦。","text_tokens":["下来","熄灭","38","也","时","5v","低电平","号","实现","因为","。","正极","把","这","用来","上","连接","还是","电流","输出","动作","到","我们","可以","负极","2","循环","led","电势差","两边","不过","最好","没有","供电","会","电平","在","接下","任意","就","烧坏","将","两个","比如","当","有","不会","为","为了","限制","电阻","上时","闪烁","大小","引脚","0v","中","这是","设置","gpio"," ","高电平","给","来","所以","接到","gnd","啦","用","时候","这个","被","，","小","的","灯","电路","了","接下来","串联","；","模式","点亮","功能","不至于","而","电势","至于","信号","电源","放到","就是","一个"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_10","text":"快来运行例程试一试吧，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行程序，就可以看到这个LED就会开始闪烁了。 $ sudo python3 simple_input.py","text_tokens":["simple","将","x3pi","例程","，","看到","连接","完成","的","到","可以","led","开始","实物","了","input","闪烁","刚才","吧","sudo","_","程序","这个","然后","快","设置",".","py","就","。","$","会"," ","来","python3","试一试","按照","运行"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_11","text":"simple_out.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 output_pin = 38 # BOARD 编码 38 def main (): # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输出模式，并且初始化为高电平 GPIO . setup ( output_pin , GPIO . OUT , initial = GPIO . HIGH ) # 记录当前管脚状态 curr_value = GPIO . HIGH print ( \"Starting demo now! Press CTRL+C to exit\" ) try : # 间隔1秒时间，循环控制LED灯亮灭 while True : time . sleep ( 1 ) GPIO . output ( output_pin , curr_value ) curr_value ^= GPIO . HIGH finally : GPIO . cleanup () if __name__ == '__main__' : main ()","text_tokens":["simple","value","press","starting","while","true","间隔","：","38","finally","编码","hobot","initial","(",",","name","定义","=","import","1","high","to","时间","try","def","env","初始","demo","if","py","setmode","通道","输出","pin","print","sleep","循环","led","+","^","_","状态","cleanup","/","time",".","as","board","初始化","exit","电平","now","c","__",")","#","main","usr","记录","为","'","curr","output","硬件","bin","设置","gpio"," ","高电平","编号","python3","setup","，","的","当前","ctrl","out","使用","控制","\"","模式","灭","秒","灯亮","!","管脚",":","并且"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_12","text":"学习了GPIO的输入与输出功能后，我们就可以做一些自动化的功能了。","text_tokens":["与","可以","一些","自动","，","自动化","后","就","了","输出","。","gpio","的","功能","学习","输入","做","我们"],"title":"数字输入与输出集成","title_tokens":["与","集成","数字","输出","输入"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_13","text":"比如我们同时连接一个按键和LED灯，尝试实现按键被按下，灯被点亮，松开，灯熄灭，这样的功能。","text_tokens":["尝试","被","，","比如","连接","熄灭","的","灯","我们","下","led","和","这样","点亮","松开","实现","。","功能","同时","按键","一个","按"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_14","text":"我们通过这个例程来试一试效果如何？ $ sudo python3 button_led.py 我们来看一下具体的操作，同样的，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。按下按键后，就可以看到LED被点亮了，松开之后，LED就熄灭了。","text_tokens":["被","将","x3pi","例程","，","看到","同样","连接","熄灭","按照","通过","完成","的","之后","到","效果","？","我们","可以","操作","led","如何","button","实物","了","刚才","来看","_","sudo","程序","然后",".","设置","点亮","松开","后","就","。","$"," ","来","按下","运行","一下","python3","具体","试一试","按键","这个","py"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_15","text":"button_led.py #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道： # 36号作为输出，可以点亮一个LED # 38号作为输入，可以接一个按钮 led_pin = 36 # BOARD 编码 36 but_pin = 38 # BOARD 编码 38 # 禁用警告信息 GPIO . setwarnings ( False ) def main (): prev_value = None # Pin Setup: GPIO . setmode ( GPIO . BOARD ) # BOARD pin-numbering scheme GPIO . setup ( led_pin , GPIO . OUT ) # LED pin set as output GPIO . setup ( but_pin , GPIO . IN ) # Button pin set as input # Initial state for LEDs: GPIO . output ( led_pin , GPIO . LOW ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : curr_value = GPIO . input ( but_pin ) if curr_value != prev_value : GPIO . output ( led_pin , curr_value ) prev_value = curr_value print ( \"Outputting {} to Pin {} \" . format ( curr_value , led_pin )) time . sleep ( 1 ) finally : GPIO . cleanup () # cleanup all GPIO if __name__ == '__main__' : main () 基本的配置还是一样的，引入基本的库，然后设置为BOARD模式，然后初始化两个管脚，一个用来读取按键的通断，一个用来控制LED的亮灭，之后只需要判断按键的状态来做出对应的控制LED的动作就可以了。","text_tokens":["value","leds","press","{","starting","while","一样","true","：","38","输入","finally","编码","hobot","initial","(",",","name","numbering","定义","=","import","号","none","1","库","36","to","。","try","def","env","state","scheme","初始","用来","demo","if","py","按钮","setmode","通道","输出","pin","print","还是","动作","sleep","可以","false","通断","判断","led","接","引入","+","_","禁用","cleanup","状态","/","}","time",".","as","board","exit","初始化","now","c","__",")","#","main","只","就","usr","信息","两个","基本","为","'","curr","button","output","set","input","-","bin","setwarnings","然后","low","设置","gpio","format"," ","but","来","in","python3","setup","做出","作为","，","读取","之后","的","for","需要","对应","all","ctrl","了","out","使用","警告","配置","控制","\"","亮","outputting","模式","点亮","灭","!","管脚",":","按键","prev","一个"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/","text":"PWM脉冲宽度调制 我们已经可以用GPIO控制LED灯一闪一闪亮晶晶了，这样只有亮和灭的状态似乎还是太简单了，能不能对LED的亮度进行调整呢？ 当然没问题，这就要用到接下来学习的PWM脉冲宽度调制了。 PWM脉冲宽度调制原理 在GPIO的数字输入和输出模式中，只有高低电平，高电平一般是3.3V或者5V，低电平就是0V，如果我想要一个折中一点的电压怎么办呢？PWM大家了解一下。 PWM，全称是脉冲宽度调制 ， 是一种对模拟信号电平进行数字编码的方法，通过高分辨率计数器，调制出一定占空比的方波，通过这种方式对模拟信号的电平进行编码。 通俗点来说，如果我们有一个10W的灯泡，在一个小时中亮了半个小时，那我们宏观来看，它在这一个小时中的功率就是5W，这样就相当于是它的电压被降低了。而我们还可以通过改变这一个小时中，灯泡被点亮的时长，来等效出不同的电压。 然后，我们把一个小时缩短为很小的一个时间，到达一定的微分程度，表现出来的就是电压的变化，而这个很小的时间，就是PWM频率的倒数，被点亮的时间在这个很小的时间中所占的百分比就叫做占空比。 这里大家也要注意，虽然PWM在尽力呈现出模拟信号的样子，但本质还是数字信号，因为在给定的某一任何时刻，引脚只能高电平或者低电平。 通过PWM技术，可以让数字电路产生类似模拟信号的效果，从而实现类似的无级控制，比如风扇的转速，或者屏幕的亮度，很多都是通过PWM技术实现的调节。 PWM编程 接下来我们就来试一试，通过PWM让一个LED实现不同亮度的变化，也就是我们常见的呼吸灯了。 硬件接线 还是用这个LED灯，一端连接电阻，再到5V高电平的引脚，另外一端，接到33号引脚的PWM接口。 运行示例程序 大家先来运行例程，看看效果如何。 $ sudo python3 simple_pwm.py 我们来看一下实物的操作，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。就可以看到这样的一个呼吸灯的效果了。 代码解析 simple_pwm.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 支持PWM的管脚: 32 and 33, 在使用PWM时，必须确保该管脚没有被其他功能占用 output_pin = 33 def main (): # Pin Setup: # Board pin-numbering scheme GPIO . setmode ( GPIO . BOARD ) # 支持的频率范围： 48KHz ~ 192MHz p = GPIO . PWM ( output_pin , 48000 ) # 初始占空比 25%， 先每0.25秒增加5%占空比，达到100%之后再每0.25秒减少5%占空比 val = 25 incr = 5 p . ChangeDutyCycle ( val ) p . start ( val ) print ( \"PWM running. Press CTRL+C to exit.\" ) try : while True : time . sleep ( 0.25 ) if val >= 100 : incr = - incr if val <= 0 : incr = - incr val += incr p . ChangeDutyCycle ( val ) finally : p . stop () GPIO . cleanup () if __name__ == '__main__' : main () 一样的引入GPIO的库，然后设置管脚编码模式为BOARD，然后创建一个PWM的实例化对象p，同时设置他的频率，之后就可以通过ChangeDutyCycle来改变他的占空比，在循环当中，占空比大于等于100时，就会以5%的梯度减小；当小于等于0时，就会以5%的梯度增大。","text_tokens":["下来","先","while","也","风扇","问题","时","如何",",","(","当然","似乎","低电平","来看","numbering","电压","任何","何时","时间","占空比","p","5","接口","scheme","初始","一闪","呼吸","这里","pin","怎么","效果","点","时刻","范围","晶晶","高分辨率","+","该","_","进行","只能","/","没有","简单","代码","会","我","c","#","main","功率","必须","将","48khz","屏幕","百分比","宽度","数字电路","？","样子","无级","电阻","相当","changedutycycle","引脚","bin","0v"," ","方式","宏观","虽然","呈现出","一定","数字信号","这个","调整","电路","类似","计数","了","3.3","呢","\"","模式","他","模拟","了解","一般","高分","而","管脚",":","实例","simple","一样","press","true","数字电","能","分辨率","5%","以","任何时刻","刚才","尽力","192mhz","库","实现","因为","env","接线","已经","没","微分","等于","数字编码","小于","py","达到","这种","连接","输出","v","它","完成","对象","高","等效","当于","sleep","如果","改变","led","引入","示例","cleanup","半个","对","board","exit","接下","每","从而","usr","一端","辨率","实物","-","然后","中","大于","来说","$","来","setup","百分","某","试一试",">","被","到达","支持","操作","创建","0","学习","；","功能","0.25","占用","val","就是","按照","太","：","finally","编码","就要","hobot","另外","通俗","一","5v","不同","倒数","import","想要","。","表现","start","try","def","本质","这","把","很小","if","程序","是","print","梯度","到","可以","循环","48000","和","状态","降低","sudo","time","一点","as","10w","电平","在","__","变化","减小","灯一闪","25%","x3pi","注意","例程","比如","调节","当","incr","呈现","有","大家","缩短","'","25","模拟信号","怎么办","硬件","脉冲","只有","确保","这样","设置","方波","gpio","高电平","小时","用","中亮","运行","转速","之后","stop","33","接下来","使用","pwm","出来","减少","点亮","秒","程度","增加","running","~","5w","亮晶晶","不能","看到","再","全称","输入","出","32","产生","当中","或者","给定","name","还","都","=","那","号","占","to","折中","化","一下","但","调制","setmode","还是","通过","我们","中所","编程","用到","亮度",".",")","要","就","计数器","灯泡","方法","频率","常见","技术","为","分辨","and","output","增大","解析","100","其他","让","同时","时长","很多","原理","叫做","接到","python3","，","的","100%","灯","ctrl","控制","相当于","亮","一种","灭","数字","<","现出","看看","!","信号","一个"],"title":"PWM脉冲宽度调制","title_tokens":["调制","pwm","脉冲","宽度"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm","text":"我们已经可以用GPIO控制LED灯一闪一闪亮晶晶了，这样只有亮和灭的状态似乎还是太简单了，能不能对LED的亮度进行调整呢？ 当然没问题，这就要用到接下来学习的PWM脉冲宽度调制了。","text_tokens":["下来","调整","太","不能","调制","，","还是","能","的","宽度","就要","我们","？","可以","问题","led","当然","了","似乎","接下来","晶晶","学习","控制","和","状态","进行","呢","只有","亮","用到","亮度","pwm","脉冲","这样","简单","灭","对","。","gpio"," ","接下","已经","没","这","一闪","用","灯一闪","亮晶晶"],"title":"PWM脉冲宽度调制","title_tokens":["调制","pwm","脉冲","宽度"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm_1","text":"在GPIO的数字输入和输出模式中，只有高低电平，高电平一般是3.3V或者5V，低电平就是0V，如果我想要一个折中一点的电压怎么办呢？PWM大家了解一下。 PWM，全称是脉冲宽度调制 ， 是一种对模拟信号电平进行数字编码的方法，通过高分辨率计数器，调制出一定占空比的方波，通过这种方式对模拟信号的电平进行编码。 通俗点来说，如果我们有一个10W的灯泡，在一个小时中亮了半个小时，那我们宏观来看，它在这一个小时中的功率就是5W，这样就相当于是它的电压被降低了。而我们还可以通过改变这一个小时中，灯泡被点亮的时长，来等效出不同的电压。 然后，我们把一个小时缩短为很小的一个时间，到达一定的微分程度，表现出来的就是电压的变化，而这个很小的时间，就是PWM频率的倒数，被点亮的时间在这个很小的时间中所占的百分比就叫做占空比。 这里大家也要注意，虽然PWM在尽力呈现出模拟信号的样子，但本质还是数字信号，因为在给定的某一任何时刻，引脚只能高电平或者低电平。 通过PWM技术，可以让数字电路产生类似模拟信号的效果，从而实现类似的无级控制，比如风扇的转速，或者屏幕的亮度，很多都是通过PWM技术实现的调节。","text_tokens":["数字电","分辨率","全称","输入","出","编码","也","风扇","产生","任何时刻","或者","通俗","给定","一","5v","还","不同","低电平","来看","尽力","都","倒数","那","电压","任何","占","想要","何时","因为","实现","。","表现","时间","本质","占空比","折中","一下","这","把","微分","很小","数字编码","但","这里","调制","这种","是","输出","v","通过","它","还是","高","等效","当于","怎么","效果","如果","我们","可以","改变","中所","点","时刻","高分辨率","和","降低","进行","只能","亮度","半个","一点","对","10w","电平","在","我","变化","要","功率","从而","就","计数器","灯泡","方法","注意","频率","屏幕","比如","技术","调节","百分比","宽度","呈现","有","数字电路","大家","？","样子","为","分辨","缩短","模拟信号","无级","怎么办","相当","辨率","引脚","脉冲","只有","然后","0v","中","这样","来说","方波","gpio","让"," ","高电平","小时","来","方式","时长","很多","叫做","宏观","虽然","百分","呈现出","某","一定","数字信号","中亮","这个","转速","被","到达","，","的","电路","类似","计数","了","3.3","pwm","呢","控制","相当于","一种","出来","模式","点亮","模拟","了解","一般","高分","而","程度","数字","现出","信号","就是","一个","5w"],"title":"PWM脉冲宽度调制原理","title_tokens":["原理","调制","宽度","pwm","脉冲"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm_2","text":"接下来我们就来试一试，通过PWM让一个LED实现不同亮度的变化，也就是我们常见的呼吸灯了。","text_tokens":["下来","，","常见","通过","的","灯","也","我们","led","接下来","了","不同","pwm","就是","亮度","实现","就","。","让","来","接下","变化","试一试","呼吸","一个"],"title":"PWM编程","title_tokens":["pwm","编程"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_1","text":"还是用这个LED灯，一端连接电阻，再到5V高电平的引脚，另外一端，接到33号引脚的PWM接口。","text_tokens":["，","连接","还是","再","的","灯","到","另外","33","led","电阻","5v","引脚","pwm","号","。","高电平","电平","接到","接口","用","这个","一端"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_2","text":"大家先来运行例程，看看效果如何。 $ sudo python3 simple_pwm.py 我们来看一下实物的操作，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。就可以看到这样的一个呼吸灯的效果了。","text_tokens":["simple","先","将","x3pi","例程","，","看到","连接","完成","的","灯","到","大家","效果","我们","可以","操作","如何","实物","了","一个","刚才","pwm","_","sudo","来看","然后","这样",".","设置","就","。","$"," ","来","运行","一下","python3","看看","程序","呼吸","按照","py"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_3","text":"simple_pwm.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 支持PWM的管脚: 32 and 33, 在使用PWM时，必须确保该管脚没有被其他功能占用 output_pin = 33 def main (): # Pin Setup: # Board pin-numbering scheme GPIO . setmode ( GPIO . BOARD ) # 支持的频率范围： 48KHz ~ 192MHz p = GPIO . PWM ( output_pin , 48000 ) # 初始占空比 25%， 先每0.25秒增加5%占空比，达到100%之后再每0.25秒减少5%占空比 val = 25 incr = 5 p . ChangeDutyCycle ( val ) p . start ( val ) print ( \"PWM running. Press CTRL+C to exit.\" ) try : while True : time . sleep ( 0.25 ) if val >= 100 : incr = - incr if val <= 0 : incr = - incr val += incr p . ChangeDutyCycle ( val ) finally : p . stop () GPIO . cleanup () if __name__ == '__main__' : main () 一样的引入GPIO的库，然后设置管脚编码模式为BOARD，然后创建一个PWM的实例化对象p，同时设置他的频率，之后就可以通过ChangeDutyCycle来改变他的占空比，在循环当中，占空比大于等于100时，就会以5%的梯度减小；当小于等于0时，就会以5%的梯度增大。","text_tokens":["simple","先","一样","press","while","true","再","：","5%","finally","32","编码","hobot","以","时","当中","(",",","name","numbering","=","import","192mhz","库","to","。","start","try","def","env","占空比","p","5","化","scheme","初始","等于","if","小于","py","达到","setmode","print","pin","通过","梯度","对象","sleep","可以","循环","改变","48000","范围","引入","+","该","_","cleanup","/","没有","time",".","as","board","exit","会","在","c","每","__",")","#","main","减小","必须","就","usr","25%","48khz","频率","当","incr","为","'","25","and","output","增大","changedutycycle","100","-","bin","然后","确保","大于","设置","其他","gpio"," ","同时","来","python3","setup",">","被","，","之后","的","100%","stop","支持","创建","33","ctrl","0","使用","pwm","；","\"","模式","减少","他","秒","功能","0.25","占用","增加","running","<","val","!","管脚",":","实例","~","一个"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/","text":"UART串口通信 现在的传感器和执行器种类越来越多，需要和控制器传输的数据也是多种多样，只用GPIO来控制和读取的话，只有0和1的状态，未免还是有点麻烦，各种各样的通信方法也层出不穷，UART串口通信绝对是最为常用的一种。 串口通信原理 串行通信是一种通讯协议，也可以简称为串口，可以理解为数据是串成一串的，所以也就只能一位一位的发送，这样传输的速度虽然受到了限制，但是对硬件线路的要求小，只需要一对传输线，一个发送，一个接收，就可以实现双向通信了。 一般情况下，串口模块发送数据的管脚叫做TX，接收数据的管脚叫做RX。发送端发过去的数据，需要对方串口模块的接收端来接收，所以一侧发送端的TX需要连接到另外一侧的接收端RX，接收和发送在两方看来是相对的，所以我们接线的时候，要记住永远是TX引脚连接到RX引脚，接反了数据就传输不了了。 硬件连接 接下来，我们就尝试通过一个串口模块来实现电脑和旭日X3Pi的串口通信。 在接线方面，我们先交叉连接串口模块和旭日X3Pi的RX、TX，同时为了让两边具有相同的参考电平，还要将两者的GND连接到一起，然后再把串口模块连接到电脑就可以了。 运行示例程序 接下来就可以运行串口通信的例程了。 $ sudo python3 test_serial.py 实物接线完成后，在旭日X3派的终端中输入指令启动例程，很快就可以在终端中看到串口向外发送的数据了。 在串口连接的电脑中打开一个串口软件，用来接收和发送数据，设置好端口和波特率，就能看到旭日X3派发过来的数据了。我们再使用电脑的串口软件尝试下发送数据给旭日X3派，输入1234，点击发送，可以看到，X3Pi的终端这边也成功的接收到了数据并且打印出来了。 代码解析 test_serial.py： #!/usr/bin/env python3 import sys import os import time # 导入python串口库 import serial import serial.tools.list_ports def serialTest (): print ( \"List of enabled UART:\" ) os . system ( 'ls /dev/tty[a-zA-Z]*' ) uart_dev = input ( \"请输入需要测试的串口设备名:\" ) baudrate = input ( \"请输入波特率(9600,19200,38400,57600,115200,921600):\" ) try : ser = serial . Serial ( uart_dev , int ( baudrate ), timeout = 1 ) # 1s timeout except Exception as e : print ( \"open serial failed! \\n \" ) print ( ser ) print ( \"Starting demo now! Press CTRL+C to exit\" ) while True : test_data = \"AA55\" write_num = ser . write ( test_data . encode ( 'UTF-8' )) print ( \"Send: \" , test_data ) received_data = ser . read ( write_num ) . decode ( 'UTF-8' ) if received_data : print ( \"Recv: \" , received_data ) time . sleep ( 1 ) ser . close () return 0 if __name__ == '__main__' : if serialTest () != 0 : print ( \"Serial test failed!\" ) else : print ( \"Serial test success!\" ) X3Pi这边如果要使用串口，直接使用serial库就可以了，这里我们先调用系统的库，打印出当前有哪些串口，然后手动输入选择串口的设备名，再输入串口的波特率，就可以进项串口的初始化了，初始化成功之后就会进入循环。 循环中，X3Pi会每隔一秒发送一次AA55，同时还会判断是否接收到了数据，如果接收到了数据也会打印出来。","text_tokens":["下来","先","while","test","也","(",",","一个","接反","感器","每隔","1s","初始","demo","有点","recv","一起","这里","手动","传输","电脑","模块","通信","打开","一串","+","线路","_","只能","/","close","代码","会","c","接收数据","#","串口","main","种类","将","引脚","bin","9600","现在","看来"," ","端发","gnd","虽然","速度","19200","记住","控制器","绝对","多样","ls","except","else","下","tx","了","还要","\"","ser","一般","很快","具有","管脚","ports",":","1234","press","简称","starting","true","write","能","baudrate","库","实现","[","串行","env","接线","直接","py","连接","serial","完成","x3","sleep","如果","打印","发送","终端","两边","示例","对","接收","exit","接下","list","int","请","n","越来越","usr","相同","一位","限制","发送数据","实物","input","-","然后","多种","中","$","来","所以","执行","哪些","时候","num","e","小","系统","enabled","进项","0","要求","tools","python","旭日","8","115200","波特率","调用","：","两方","导入","另外","相对","对方","软件","import","。","try","def","把","点击","utf","if","但是","程序","sys","还会","uart","是","print","到","过去","可以","派","循环","最为","和","状态","sudo","协议","一对","time","派发","as","双向","电平","未免","在","__","接收端","麻烦","、","只","越来","波特","a","受到","x3pi","例程","设备","success","启动","send","有","参考","传感","'","硬件","只有","这样","设置","gpio","给","38400","rx","运行","尝试","]","之后","需要","进入","的话","永远","接下来","使用","端的","多种多样","dev","向外","一秒","传感器","出来","选择","是否","return","os","921600","并且","传输线","过来","不了","看到","一次","再","open","输入","出","failed","57600","name","=","两者","层出不穷","1","to","serialtest","z","用来","各种各样","aa55","还是","通过","串成","我们","判断","多","执行器","各样",".","read","初始化","encode","now",")","system","成功","要","就","方法","za","decode","只用","received","交叉","情况","为","为了","方面","\\","解析","常用","exception","后","让","通讯","同时","原理","叫做","python3","这边","理解","端口","，","读取","各种","的","data","当前","ctrl","一侧","控制","tty","一种","timeout","*","数据","好","指令","双向通信","!","名","测试","of"],"title":"UART异步串口通信","title_tokens":["异步","通信","串口","uart"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#uart","text":"现在的传感器和执行器种类越来越多，需要和控制器传输的数据也是多种多样，只用GPIO来控制和读取的话，只有0和1的状态，未免还是有点麻烦，各种各样的通信方法也层出不穷，UART串口通信绝对是最为常用的一种。","text_tokens":["方法","传输","，","各种各样","是","读取","只用","还是","的","多样","各种","uart","需要","绝对","传感","也","通信","多","的话","0","执行器","控制","和","状态","最为","常用","多种多样","只有","多种","各样","一种","传感器","层出不穷","1","现在","。","gpio","感器","数据","未免","来","执行","麻烦","串口","种类","有点","越来","越来越","控制器"],"title":"UART串口通信","title_tokens":["串口","通信","uart"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_1","text":"串行通信是一种通讯协议，也可以简称为串口，可以理解为数据是串成一串的，所以也就只能一位一位的发送，这样传输的速度虽然受到了限制，但是对硬件线路的要求小，只需要一对传输线，一个发送，一个接收，就可以实现双向通信了。 一般情况下，串口模块发送数据的管脚叫做TX，接收数据的管脚叫做RX。发送端发过去的数据，需要对方串口模块的接收端来接收，所以一侧发送端的TX需要连接到另外一侧的接收端RX，接收和发送在两方看来是相对的，所以我们接线的时候，要记住永远是TX引脚连接到RX引脚，接反了数据就传输不了了。","text_tokens":["简称","不了","两方","也","另外","相对","对方","实现","接反","。","串行","接线","但是","传输","连接","是","模块","到","串成","通信","过去","我们","可以","一串","发送","线路","和","只能","协议","一对","对","双向","接收","在","接收数据","接收端","串口","要","只","就","受到","情况","为","一位","限制","发送数据","硬件","引脚","这样","看来"," ","通讯","端发","来","所以","叫做","虽然","速度","rx","时候","记住","理解","，","小","的","需要","下","永远","tx","一侧","了","要求","端的","一种","一般","数据","双向通信","管脚","传输线","一个"],"title":"串口通信原理","title_tokens":["串口","原理","通信"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_2","text":"接下来，我们就尝试通过一个串口模块来实现电脑和旭日X3Pi的串口通信。 在接线方面，我们先交叉连接串口模块和旭日X3Pi的RX、TX，同时为了让两边具有相同的参考电平，还要将两者的GND连接到一起，然后再把串口模块连接到电脑就可以了。","text_tokens":["尝试","下来","x3pi","先","将","，","电脑","连接","通过","模块","的","再","交叉","参考","相同","到","通信","我们","可以","为了","tx","方面","接下来","了","两边","和","还要","然后","两者","实现","。","让"," ","电平","同时","在","一起","来","接下","接线","gnd","串口","把","具有","、","rx","就","旭日","一个"],"title":"硬件连接","title_tokens":["硬件","连接"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_3","text":"接下来就可以运行串口通信的例程了。 $ sudo python3 test_serial.py 实物接线完成后，在旭日X3派的终端中输入指令启动例程，很快就可以在终端中看到串口向外发送的数据了。 在串口连接的电脑中打开一个串口软件，用来接收和发送数据，设置好端口和波特率，就能看到旭日X3派发过来的数据了。我们再使用电脑的串口软件尝试下发送数据给旭日X3派，输入1234，点击发送，可以看到，X3Pi的终端这边也成功的接收到了数据并且打印出来了。","text_tokens":["尝试","下来","x3pi","例程","端口","过来","，","看到","连接","电脑","serial","启动","波特率","完成","的","x3","能","再","输入","test","到","也","通信","我们","下","可以","派","打开","发送数据","实物","接下来","了","打印","发送","终端","一个","使用","和","_","sudo","向外","中","出来","软件",".","py","设置","后","派发","。","$","接收"," ","在","数据","接线","接下","给","好","串口","很快","指令","python3","用来","成功","点击","这边","波特","并且","就","旭日","1234","运行"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_4","text":"test_serial.py： #!/usr/bin/env python3 import sys import os import time # 导入python串口库 import serial import serial.tools.list_ports def serialTest (): print ( \"List of enabled UART:\" ) os . system ( 'ls /dev/tty[a-zA-Z]*' ) uart_dev = input ( \"请输入需要测试的串口设备名:\" ) baudrate = input ( \"请输入波特率(9600,19200,38400,57600,115200,921600):\" ) try : ser = serial . Serial ( uart_dev , int ( baudrate ), timeout = 1 ) # 1s timeout except Exception as e : print ( \"open serial failed! \\n \" ) print ( ser ) print ( \"Starting demo now! Press CTRL+C to exit\" ) while True : test_data = \"AA55\" write_num = ser . write ( test_data . encode ( 'UTF-8' )) print ( \"Send: \" , test_data ) received_data = ser . read ( write_num ) . decode ( 'UTF-8' ) if received_data : print ( \"Recv: \" , received_data ) time . sleep ( 1 ) ser . close () return 0 if __name__ == '__main__' : if serialTest () != 0 : print ( \"Serial test failed!\" ) else : print ( \"Serial test success!\" ) X3Pi这边如果要使用串口，直接使用serial库就可以了，这里我们先调用系统的库，打印出当前有哪些串口，然后手动输入选择串口的设备名，再输入串口的波特率，就可以进项串口的初始化了，初始化成功之后就会进入循环。 循环中，X3Pi会每隔一秒发送一次AA55，同时还会判断是否接收到了数据，如果接收到了数据也会打印出来。","text_tokens":["115200","先","press","starting","while","true","波特率","write","调用","一次","再","：","open","输入","test","出","也","导入","failed","57600","(",",","name","=","baudrate","import","库","1","[","to","。","每隔","try","def","env","serialtest","z","直接","1s","初始","utf","demo","if","recv","sys","py","这里","手动","还会","uart","serial","aa55","print","到","sleep","如果","我们","可以","判断","循环","打印","发送","+","_","/","close","time",".","read","as","接收","exit","初始化","会","encode","now","c","__",")","system","#","list","int","串口","成功","main","要","波特","请","n","就","a","usr","x3pi","设备","za","decode","success","send","received","有","'","input","\\","-","bin","exception","然后","中","9600"," ","同时","python3","38400","这边","19200","哪些","num","]","e","，","系统","之后","的","ls","except","else","需要","enabled","进项","进入","data","当前","ctrl","0","tools","了","使用","\"","dev","tty","一秒","出来","选择","timeout","*","ser","数据","是否","python","return","!","os","名","ports",":","921600","测试","of","8"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/","text":"SPI同步串行通信 UART串口通信中的数据只能一位一位的传输，如果数据量比较大的时候，传输速率会受到很大影响，此时我们就可以考虑使用同步串行通信了，比如SPI。 SPI通信原理 SPI，全称是Serial Peripheral Interface，也就是串行外设接口，同样是一种通信协议，在很多芯片中都有集成。 相比之前学习的UART串口通信，他多了两根线，其中一个是时钟信号，另一个是设备使能信号，用来控制设备是否启用，所以也产生了主从设备的概念。 MISO ：Master Input Slave Output，主设备数据输入，从设备数据输出； MOSI ：Master Output Slave Input，主设备数据输出，从设备数据输入； SCLK ：Serial Clock，时钟信号，由主设备产生； CS ：Chip Select，从设备使能信号，由主设备控制。 这样，在一组SPI通信的系统中，可以连接多个设备，想要和哪个设备通信时，就使能这个设备，除能其他设备。 我们在开发中常见的SPI设备会有一些传感器，还有电阻屏之类的。 硬件连线 在SPI的通信中，有一个管脚负责发送，另外一个管脚负责接收，如果我们把同一组SPI的发送和接收接到一起，岂不是能接收到自己发送的数据吗？ 我们不妨来试一试，这里使用一个跳线帽直接把19，21两个SPI的通信管脚短接。 运行示例程序 大家来运行例程，看看会发生什么？ $ sudo python3 test_spi.py 在旭日X3派的终端中，输入运行例程的指令，接下来我们就可以看到通过SPI传输并收到的数据啦，相当于是左手传递给右手，自己给自己循环传输数据了。 代码解析 test_spi.py： #!/usr/bin/env python3 import sys import os import time # 导入spidev模块 import spidev def BytesToHex ( Bytes ): return '' . join ([ \"0x %02X \" % x for x in Bytes ]) . strip () def spidevTest (): # 设置spi的bus号（0, 1, 2）和片选(0, 1) spi_bus = input ( \"Please input SPI bus num:\" ) spi_device = input ( \"Please input SPI cs num:\" ) # 创建spidev类的对象以访问基于spidev的Python函数。 spi = spidev . SpiDev () # 打开spi总线句柄 spi . open ( int ( spi_bus ), int ( spi_device )) # 设置 spi 频率为 12MHz spi . max_speed_hz = 12000000 print ( \"Starting demo now! Press CTRL+C to exit\" ) # 发送 [0x55, 0xAA], 接收的数据应该也是 [0x55, 0xAA] try : while True : resp = spi . xfer2 ([ 0x55 , 0xAA ]) print ( BytesToHex ( resp )) time . sleep ( 1 ) except KeyboardInterrupt : spi . close () if __name__ == '__main__' : print ( \"List of enabled spi controllers:\" ) os . system ( 'ls /dev/spidev*' ) spidevTest () 在python中使用spidev这个库，初始化X3Pi的SPI，之后使用xerf2发送数据，同时接收数据，并打印出来，会发现打印出来的就是我们发送的。","text_tokens":["访问","主","下来","很大","press","starting","while","true","看到","同","能","类","全称","：","strip","大","输入","test","open","0x55","跳线","也","导入","总线","另外","自己","以","相比","产生","时","(",",","name","哪个","右手","启用","还有","传输速率","都","%","=","import","另","号","想要","1","库","[","to","。","speed","串行","感器","try","def","env","master","两根","接口","直接","使能","把","初始","用来","demo","if","通信协议","12000000","一起","程序","收到","函数","sys","py","cs","不妨","这里","xfer2","传输","同样","uart","是","serial","输出","连接","x3","通过","传输数据","模块","对象","基于","print","到","当于","通信","如果","我们","可以","sleep","派","02x","打开","2","循环","之类","多","开发","interface","速率","打印","发送","终端","+","和","示例","sudo","_","只能","协议","/","close","time","clock",".","代码","外设","keyboardinterrupt","不是","一组","接收","会","exit","初始化","在","由主","接下","device",")","now","短接","#","c","int","多个","串口","list","system","slave","main","句柄","of","发现","时钟","就","usr","受到","集成","使","x3pi","例程","bytes","两个","其中","左手","设备","常见","比如","频率","miso","主从","有","传感","大家","比较","？","max","为","概念","一些","一位","'","此时","发生","电阻","相当","除能","发送数据","input","output","硬件","连线","解析","影响","select","bin","中","这样","设置","其他","负责","$","21","12mhz"," ","数据量","同时","给","来","所以","并","很多","接到","原理","controllers","in","spidevtest","啦","python3","接收数据","bus","sclk","please","时候","试一试","num","屏","这个","运行","__","chip","resp","]","，","芯片","系统","之后","的","except","for","ls","xerf2","bytestohex","）","（","从","考虑","enabled","join","创建","19","同步","x","mosi","0","ctrl","了","接下来","使用","学习","控制","片选","；","\"","相当于","dev","并打印","一种","之前","传感器","出来","0x","岂","什么","他","传递","*","帽","0xaa","吗","spi","线","应该","数据","是否","python","return","指令","!","peripheral","看看","os","信号","管脚","spidev",":","hz","就是","旭日","一个"],"title":"SPI同步串行通信","title_tokens":["spi","同步","串行","通信"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#spi","text":"UART串口通信中的数据只能一位一位的传输，如果数据量比较大的时候，传输速率会受到很大影响，此时我们就可以考虑使用同步串行通信了，比如SPI。","text_tokens":["受到","很大","传输","，","比如","uart","的","大","考虑","比较","通信","如果","我们","可以","一位","此时","同步","了","速率","影响","使用","传输速率","只能","中","。","串行","会","spi","数据量","数据","串口","时候","就"],"title":"SPI同步串行通信","title_tokens":["spi","同步","串行","通信"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#spi_1","text":"SPI，全称是Serial Peripheral Interface，也就是串行外设接口，同样是一种通信协议，在很多芯片中都有集成。 相比之前学习的UART串口通信，他多了两根线，其中一个是时钟信号，另一个是设备使能信号，用来控制设备是否启用，所以也产生了主从设备的概念。 MISO ：Master Input Slave Output，主设备数据输入，从设备数据输出； MOSI ：Master Output Slave Input，主设备数据输出，从设备数据输入； SCLK ：Serial Clock，时钟信号，由主设备产生； CS ：Chip Select，从设备使能信号，由主设备控制。 这样，在一组SPI通信的系统中，可以连接多个设备，想要和哪个设备通信时，就使能这个设备，除能其他设备。 我们在开发中常见的SPI设备会有一些传感器，还有电阻屏之类的。","text_tokens":["主","能","全称","：","输入","也","相比","产生","时","哪个","启用","还有","都","另","想要","。","串行","感器","master","两根","接口","使能","用来","通信协议","cs","同样","uart","serial","是","输出","连接","通信","我们","可以","之类","多","开发","interface","和","协议","clock","外设","一组","会","在","由主","多个","串口","slave","时钟","就","集成","使","其中","设备","常见","miso","主从","有","传感","概念","一些","电阻","除能","input","output","select","中","这样","其他"," ","所以","很多","sclk","屏","这个","chip","，","芯片","系统","的","从","mosi","了","学习","控制","；","一种","之前","传感器","他","spi","线","数据","是否","peripheral","信号","就是","一个"],"title":"SPI通信原理","title_tokens":["spi","原理","通信"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_1","text":"在SPI的通信中，有一个管脚负责发送，另外一个管脚负责接收，如果我们把同一组SPI的发送和接收接到一起，岂不是能接收到自己发送的数据吗？ 我们不妨来试一试，这里使用一个跳线帽直接把19，21两个SPI的通信管脚短接。","text_tokens":["这里","两个","，","同","能","的","有","到","跳线","通信","我们","另外","如果","自己","？","19","发送","使用","和","中","岂","帽","不是","负责","吗","。","接收","一组"," ","spi","21","在","数据","来","接到","短接","直接","把","管脚","试一试","一起","一个","不妨"],"title":"硬件连线","title_tokens":["硬件","连线"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_2","text":"大家来运行例程，看看会发生什么？ $ sudo python3 test_spi.py 在旭日X3派的终端中，输入运行例程的指令，接下来我们就可以看到通过SPI传输并收到的数据啦，相当于是左手传递给右手，自己给自己循环传输数据了。","text_tokens":["下来","例程","传输","左手","，","看到","传输数据","是","通过","x3","的","输入","test","当于","大家","？","我们","可以","自己","派","循环","发生","相当","接下来","了","终端","右手","_","sudo","相当于","中","什么",".","传递","。","$"," ","会","spi","在","数据","来","接下","并","给","运行","指令","python3","啦","看看","收到","就","旭日","py"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_3","text":"test_spi.py： #!/usr/bin/env python3 import sys import os import time # 导入spidev模块 import spidev def BytesToHex ( Bytes ): return '' . join ([ \"0x %02X \" % x for x in Bytes ]) . strip () def spidevTest (): # 设置spi的bus号（0, 1, 2）和片选(0, 1) spi_bus = input ( \"Please input SPI bus num:\" ) spi_device = input ( \"Please input SPI cs num:\" ) # 创建spidev类的对象以访问基于spidev的Python函数。 spi = spidev . SpiDev () # 打开spi总线句柄 spi . open ( int ( spi_bus ), int ( spi_device )) # 设置 spi 频率为 12MHz spi . max_speed_hz = 12000000 print ( \"Starting demo now! Press CTRL+C to exit\" ) # 发送 [0x55, 0xAA], 接收的数据应该也是 [0x55, 0xAA] try : while True : resp = spi . xfer2 ([ 0x55 , 0xAA ]) print ( BytesToHex ( resp )) time . sleep ( 1 ) except KeyboardInterrupt : spi . close () if __name__ == '__main__' : print ( \"List of enabled spi controllers:\" ) os . system ( 'ls /dev/spidev*' ) spidevTest () 在python中使用spidev这个库，初始化X3Pi的SPI，之后使用xerf2发送数据，同时接收数据，并打印出来，会发现打印出来的就是我们发送的。","text_tokens":["访问","press","starting","while","true","类","：","open","strip","keyboardinterrupt","0x55","test","总线","导入","也","以","(",",","name","%","=","import","号","1","库","[","to","。","speed","try","def","env","初始","demo","if","12000000","函数","sys","py","cs","xfer2","是","基于","print","模块","对象","sleep","我们","02x","打开","2","打印","发送","+","和","_","/","close","time",".","接收","exit","初始化","会","在","now","device","c",")","__","#","list","system","int","接收数据","main","句柄","发现","usr","x3pi","bytes","频率","max","为","'","发送数据","input","bin","中","设置","12mhz"," ","同时","controllers","in","spidevtest","python3","bus","please","num","这个","resp","]","，","之后","的","except","for","ls","xerf2","bytestohex","）","（","enabled","join","创建","x","ctrl","0","使用","片选","\"","dev","并打印","出来","0x","*","0xaa","spi","应该","数据","python","return","!","os","spidev",":","hz","就是","of"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/","text":"I2C同步串行通信 SPI通信虽然功能更强大了，但是需要4根线做连接，还是有点复杂，接下来I2C的连线就简单很多了。 I2C通信原理 I2C也是一种常用的串行通信方式，和SPI一样可以连接多个设备，重点是它只需要两根线就可以完成。 不过他的两根线和UART不同，不全是传输数据用的，I2C中的一根线是时钟线，另一根才是传输数据的，这根线可以双向的传输数据。 I2C通信中可以有多个主设备或者从设备，只要能通过地址找到彼此的位置即可。 主器件用于启动总线传送数据，并产生时钟给各种从机，此时任何被寻址的器件均被认为是从机。在总线上主和从、发和收的关系不是恒定的，而取决于此时数据传送方向。如果主机要发送数据给从机，主机首先得找到从机的地址，然后主动发送数据过去，最后也得由主机终止数据传送；如果主机要接收从机的数据，同样由主机得找到从机的地址，然后主机接收从器件发送的数据，最后由主机终止接收过程。 因为I2C的特性，使用I2C的设备比SPI多很多，比如图中的紫外线传感器，陀螺仪之类的，都是使用I2C进行通信的。 硬件接线 我们找来一个常用的陀螺仪模块，按照这里的接线图连接到旭日X3派的40PIN接口上，这里除了I2C通信的两根线之外，另外两根是电源线，负责给这个模块供电的，让它正常工作起来。 运行示例程序 接线是挺简单的，我们继续来运行这个例程，看下能否收到数据。 $ sudo python3 mpu6500_i2c.py 在终端启动例程，很快就可以看到通过I2C读取到了大量传感器的数据，这些就是陀螺仪模块的原始数据，收到之后我们就可以进行结算处理啦，这就是我们后续机器人开发的需要解决的问题了。 代码解析 mpu6500_i2c.py： #!/usr/bin/env python3 import smbus , time def MPU6050_start (): # alter sample rate (stability) samp_rate_div = 0 # sample rate = 8 kHz/(1+samp_rate_div) bus . write_byte_data ( MPU6050_ADDR , SMPLRT_DIV , samp_rate_div ) time . sleep ( 0.1 ) # reset all sensors bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x00 ) time . sleep ( 0.1 ) # power management and crystal settings bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x01 ) time . sleep ( 0.1 ) #Write to Configuration register bus . write_byte_data ( MPU6050_ADDR , CONFIG , 0 ) time . sleep ( 0.1 ) #Write to Gyro configuration register gyro_config_sel = [ 0b00000 , 0b010000 , 0b10000 , 0b11000 ] # byte registers gyro_config_vals = [ 250.0 , 500.0 , 1000.0 , 2000.0 ] # degrees/sec gyro_indx = 0 bus . write_byte_data ( MPU6050_ADDR , GYRO_CONFIG , int ( gyro_config_sel [ gyro_indx ])) time . sleep ( 0.1 ) #Write to Accel configuration register accel_config_sel = [ 0b00000 , 0b01000 , 0b10000 , 0b11000 ] # byte registers accel_config_vals = [ 2.0 , 4.0 , 8.0 , 16.0 ] # g (g = 9.81 m/s^2) accel_indx = 0 bus . write_byte_data ( MPU6050_ADDR , ACCEL_CONFIG , int ( accel_config_sel [ accel_indx ])) time . sleep ( 0.1 ) # interrupt register (related to overflow of data [FIFO]) bus . write_byte_data ( MPU6050_ADDR , INT_ENABLE , 1 ) time . sleep ( 0.1 ) return gyro_config_vals [ gyro_indx ], accel_config_vals [ accel_indx ] def read_raw_bits ( register ): # read accel and gyro values high = bus . read_byte_data ( MPU6050_ADDR , register ) low = bus . read_byte_data ( MPU6050_ADDR , register + 1 ) # combine higha and low for unsigned bit value value = (( high << 8 ) | low ) # convert to +- value if ( value > 32768 ): value -= 65536 return value def mpu6050_conv (): # raw acceleration bits acc_x = read_raw_bits ( ACCEL_XOUT_H ) acc_y = read_raw_bits ( ACCEL_YOUT_H ) acc_z = read_raw_bits ( ACCEL_ZOUT_H ) # raw temp bits ## t_val = read_raw_bits(TEMP_OUT_H) # uncomment to read temp # raw gyroscope bits gyro_x = read_raw_bits ( GYRO_XOUT_H ) gyro_y = read_raw_bits ( GYRO_YOUT_H ) gyro_z = read_raw_bits ( GYRO_ZOUT_H ) #convert to acceleration in g and gyro dps a_x = ( acc_x / ( 2.0 ** 15.0 )) * accel_sens a_y = ( acc_y / ( 2.0 ** 15.0 )) * accel_sens a_z = ( acc_z / ( 2.0 ** 15.0 )) * accel_sens w_x = ( gyro_x / ( 2.0 ** 15.0 )) * gyro_sens w_y = ( gyro_y / ( 2.0 ** 15.0 )) * gyro_sens w_z = ( gyro_z / ( 2.0 ** 15.0 )) * gyro_sens ## temp = ((t_val)/333.87)+21.0 # uncomment and add below in return return a_x , a_y , a_z , w_x , w_y , w_z # MPU6050 Registers MPU6050_ADDR = 0x68 PWR_MGMT_1 = 0x6B SMPLRT_DIV = 0x19 CONFIG = 0x1A GYRO_CONFIG = 0x1B ACCEL_CONFIG = 0x1C INT_ENABLE = 0x38 ACCEL_XOUT_H = 0x3B ACCEL_YOUT_H = 0x3D ACCEL_ZOUT_H = 0x3F TEMP_OUT_H = 0x41 GYRO_XOUT_H = 0x43 GYRO_YOUT_H = 0x45 GYRO_ZOUT_H = 0x47 # start I2C driver bus = smbus . SMBus ( 0 ) # start comm with i2c bus gyro_sens , accel_sens = MPU6050_start () # instantiate gyro/accel while True : print ( mpu6050_conv ()) 这里我们看一下怎么使用I2C和陀螺仪通信来获取信息。主体上有三个大的函数，而这三个函数的功能都比较单一，第一个函数通过给陀螺仪发送数据来进行初始化的设置，比如配置陀螺仪的电源寄存器，加速度寄存器等；第二个函数则是从陀螺仪读取数据；第三个函数则是将读取到的函数进行计算，从而变成真正的加速度等信息。 具体的读写操作可以看下面的代码片段，也是直接调用函数指定地址和数据就好了。 这里我们也能看到几个关键的参数，比如陀螺仪MPU6050的地址是0x68，通过这个地址才能确认到陀螺仪的存在，然后进行初始化，初始化完成之后进入循环，不停的将数据打印出来。","text_tokens":["smbus","下来","while","调用函数","21.0","也","问题","accel","这根","settings","(",",","一个","gyro","conv","任何","1000.0","感器","特性","接口","16.0","初始","有点","紫外线","做","函数","这里","取决于","传输","上","h","模块","首先","获取信息","怎么","通信","2","0x6b","+","二个","_","进行","/","简单","供电","代码","最后","#","power","主体","reset","传送","看","将","才","等","i2c","fifo","连线","sample","比","15.0","关键","bin","pwr","接线图","0x01","0x38"," ","得","并","方式","in","虽然","速度","add","temp","这个","higha","真正","能否","认为","interrupt","下","8.0","复杂","0b010000","同步","了","500.0","他","0b01000","而","smplrt","register","很快","根线","重点","电源",":","读写","sens","related","主","一样","true","0x3b","write","能","65536","s","总线","values","获取","mpu6050","m","除了","继续","with","上主","找到","终止","因为","[","加速度","串行","过程","env","接线","直接","加速","具体","收到","py","addr","第三个","连接","找","333.87","完成","它","x3","寻址","强大","sleep","如果","yout","打印","发送","终端","示例","bits","gyroscope","acc","不是","driver","接收","接下","存在","int","alter","第二个","从而","主动","usr","+-","方向","更","恒定","sensors","变成","发送数据","0x1b","-","陀螺","然后","一根","中","从机","负责","下面","$","第一","机器人","来","sec","bus","below",">","被","indx","从","第一个","convert","操作","正常","0x43","enable","0","；","功能","用于","关系","y","0x19","0.1","val","结算","vals","acceleration","就是","旭日","按照","8","samp","config","overflow","原始数据","调用","这些","：","另外","彼此","后续","不同","import","另","。","0x41","start","def","combine","起来","0x3f","mgmt","32768","这","40pin","第三","if","但是","程序","单一","是从","uart","是","传输数据","同样","|","print","到","过去","可以","派","循环","unsigned","开发","registers","和","sudo","参数","工作","time","raw","双向","在","crystal","byte","、","只","rate","时钟","a","不停","例程","设备","比如","启动","有","传感","0b10000","0x47","uncomment","此时","即可","硬件","low","由","设置","给","位置","sel","啦","用","运行","]","地址","之后","for","需要","电源线","进入","all","则","2.0","0x68","x","configuration","接下来","out","使用","配置","4.0","不全是","处理","才能","传感器","出来","紫外","发和收","xout","spi","几个","return","0x00","degrees","0x3d","mpu6500","value","看到","大量","g","w","取决","大","250.0","产生","或者","instantiate","外线","都","=","2000.0","##","第二","读取数据","传送数据","1","to","high","z","两根","一下","0x1c","还是","通过","解决","我们","之类","zout","多","^","不过","div",".","read","0b11000","初始化","寄存",")","陀螺仪","多个","khz","要","机器","bit","就","器件","信息","线图","主机","stability","比较","comm","and","解析","dps","确认","常用","0b00000","计算","取信","让","很多","原理","0x45","原始","读写操作","python3","图中","只要","t","，","读取","各种","的","management","机","均","寄存器","data","指定","0x1a","一种","*","线","数据","4","之外","<","好","三个","9.81","!","挺","片段","of"],"title":"I2C同步串行通信","title_tokens":["i2c","同步","串行","通信"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#i2c","text":"SPI通信虽然功能更强大了，但是需要4根线做连接，还是有点复杂，接下来I2C的连线就简单很多了。","text_tokens":["下来","，","连接","更","还是","的","需要","强大","通信","i2c","复杂","了","接下来","连线","简单","。","功能","spi","4","接下","很多","根线","虽然","有点","但是","做","就"],"title":"I2C同步串行通信","title_tokens":["i2c","同步","串行","通信"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#i2c_1","text":"I2C也是一种常用的串行通信方式，和SPI一样可以连接多个设备，重点是它只需要两根线就可以完成。 不过他的两根线和UART不同，不全是传输数据用的，I2C中的一根线是时钟线，另一根才是传输数据的，这根线可以双向的传输数据。 I2C通信中可以有多个主设备或者从设备，只要能通过地址找到彼此的位置即可。 主器件用于启动总线传送数据，并产生时钟给各种从机，此时任何被寻址的器件均被认为是从机。在总线上主和从、发和收的关系不是恒定的，而取决于此时数据传送方向。如果主机要发送数据给从机，主机首先得找到从机的地址，然后主动发送数据过去，最后也得由主机终止数据传送；如果主机要接收从机的数据，同样由主机得找到从机的地址，然后主机接收从器件发送的数据，最后由主机终止接收过程。 因为I2C的特性，使用I2C的设备比SPI多很多，比如图中的紫外线传感器，陀螺仪之类的，都是使用I2C进行通信的。","text_tokens":["主","一样","能","取决","也","总线","产生","彼此","或者","这根","不同","外线","都","任何","另","传送数据","上主","找到","终止","因为","。","串行","感器","特性","过程","两根","紫外线","取决于","传输","连接","uart","是","传输数据","通过","完成","它","是从","同样","寻址","首先","通信","如果","过去","可以","之类","多","发送","和","进行","不过","不是","双向","接收","最后","在","陀螺仪","多个","要","、","只","主动","时钟","就","传送","器件","方向","设备","主机","比如","启动","才","有","传感","i2c","恒定","此时","即可","发送数据","比","常用","陀螺","然后","一根","中","由","从机"," ","得","给","并","方式","位置","很多","用","图中","只要","被","认为","地址","，","各种","的","需要","从","机","均","使用","不全是","；","一种","传感器","紫外","发和收","他","用于","关系","spi","线","数据","而","重点"],"title":"I2C通信原理","title_tokens":["i2c","原理","通信"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_1","text":"我们找来一个常用的陀螺仪模块，按照这里的接线图连接到旭日X3派的40PIN接口上，这里除了I2C通信的两根线之外，另外两根是电源线，负责给这个模块供电的，让它正常工作起来。","text_tokens":["这里","线图","上","，","找","连接","是","模块","的","x3","它","到","电源线","通信","我们","另外","i2c","派","正常","常用","除了","陀螺","这个","工作","接线图","供电","负责","。","让","线","给","接线","来","之外","起来","陀螺仪","两根","接口","40pin","电源","旭日","按照","一个"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_2","text":"接线是挺简单的，我们继续来运行这个例程，看下能否收到数据。 $ sudo python3 mpu6500_i2c.py 在终端启动例程，很快就可以看到通过I2C读取到了大量传感器的数据，这些就是陀螺仪模块的原始数据，收到之后我们就可以进行结算处理啦，这就是我们后续机器人开发的需要解决的问题了。","text_tokens":["mpu6500","看","例程","能否","，","看到","原始数据","是","启动","通过","读取","的","大量","这些","模块","之后","需要","解决","到","传感","我们","下","可以","i2c","问题","开发","了","终端","后续","就是","sudo","_","进行","陀螺","处理","继续","传感器","简单",".","py","。","$","感器"," ","机器人","数据","在","来","接线","陀螺仪","原始","很快","啦","python3","这","结算","机器","挺","就","收到","这个","运行"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_3","text":"mpu6500_i2c.py： #!/usr/bin/env python3 import smbus , time def MPU6050_start (): # alter sample rate (stability) samp_rate_div = 0 # sample rate = 8 kHz/(1+samp_rate_div) bus . write_byte_data ( MPU6050_ADDR , SMPLRT_DIV , samp_rate_div ) time . sleep ( 0.1 ) # reset all sensors bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x00 ) time . sleep ( 0.1 ) # power management and crystal settings bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x01 ) time . sleep ( 0.1 ) #Write to Configuration register bus . write_byte_data ( MPU6050_ADDR , CONFIG , 0 ) time . sleep ( 0.1 ) #Write to Gyro configuration register gyro_config_sel = [ 0b00000 , 0b010000 , 0b10000 , 0b11000 ] # byte registers gyro_config_vals = [ 250.0 , 500.0 , 1000.0 , 2000.0 ] # degrees/sec gyro_indx = 0 bus . write_byte_data ( MPU6050_ADDR , GYRO_CONFIG , int ( gyro_config_sel [ gyro_indx ])) time . sleep ( 0.1 ) #Write to Accel configuration register accel_config_sel = [ 0b00000 , 0b01000 , 0b10000 , 0b11000 ] # byte registers accel_config_vals = [ 2.0 , 4.0 , 8.0 , 16.0 ] # g (g = 9.81 m/s^2) accel_indx = 0 bus . write_byte_data ( MPU6050_ADDR , ACCEL_CONFIG , int ( accel_config_sel [ accel_indx ])) time . sleep ( 0.1 ) # interrupt register (related to overflow of data [FIFO]) bus . write_byte_data ( MPU6050_ADDR , INT_ENABLE , 1 ) time . sleep ( 0.1 ) return gyro_config_vals [ gyro_indx ], accel_config_vals [ accel_indx ] def read_raw_bits ( register ): # read accel and gyro values high = bus . read_byte_data ( MPU6050_ADDR , register ) low = bus . read_byte_data ( MPU6050_ADDR , register + 1 ) # combine higha and low for unsigned bit value value = (( high << 8 ) | low ) # convert to +- value if ( value > 32768 ): value -= 65536 return value def mpu6050_conv (): # raw acceleration bits acc_x = read_raw_bits ( ACCEL_XOUT_H ) acc_y = read_raw_bits ( ACCEL_YOUT_H ) acc_z = read_raw_bits ( ACCEL_ZOUT_H ) # raw temp bits ## t_val = read_raw_bits(TEMP_OUT_H) # uncomment to read temp # raw gyroscope bits gyro_x = read_raw_bits ( GYRO_XOUT_H ) gyro_y = read_raw_bits ( GYRO_YOUT_H ) gyro_z = read_raw_bits ( GYRO_ZOUT_H ) #convert to acceleration in g and gyro dps a_x = ( acc_x / ( 2.0 ** 15.0 )) * accel_sens a_y = ( acc_y / ( 2.0 ** 15.0 )) * accel_sens a_z = ( acc_z / ( 2.0 ** 15.0 )) * accel_sens w_x = ( gyro_x / ( 2.0 ** 15.0 )) * gyro_sens w_y = ( gyro_y / ( 2.0 ** 15.0 )) * gyro_sens w_z = ( gyro_z / ( 2.0 ** 15.0 )) * gyro_sens ## temp = ((t_val)/333.87)+21.0 # uncomment and add below in return return a_x , a_y , a_z , w_x , w_y , w_z # MPU6050 Registers MPU6050_ADDR = 0x68 PWR_MGMT_1 = 0x6B SMPLRT_DIV = 0x19 CONFIG = 0x1A GYRO_CONFIG = 0x1B ACCEL_CONFIG = 0x1C INT_ENABLE = 0x38 ACCEL_XOUT_H = 0x3B ACCEL_YOUT_H = 0x3D ACCEL_ZOUT_H = 0x3F TEMP_OUT_H = 0x41 GYRO_XOUT_H = 0x43 GYRO_YOUT_H = 0x45 GYRO_ZOUT_H = 0x47 # start I2C driver bus = smbus . SMBus ( 0 ) # start comm with i2c bus gyro_sens , accel_sens = MPU6050_start () # instantiate gyro/accel while True : print ( mpu6050_conv ()) 这里我们看一下怎么使用I2C和陀螺仪通信来获取信息。主体上有三个大的函数，而这三个函数的功能都比较单一，第一个函数通过给陀螺仪发送数据来进行初始化的设置，比如配置陀螺仪的电源寄存器，加速度寄存器等；第二个函数则是从陀螺仪读取数据；第三个函数则是将读取到的函数进行计算，从而变成真正的加速度等信息。 具体的读写操作可以看下面的代码片段，也是直接调用函数指定地址和数据就好了。 这里我们也能看到几个关键的参数，比如陀螺仪MPU6050的地址是0x68，通过这个地址才能确认到陀螺仪的存在，然后进行初始化，初始化完成之后进入循环，不停的将数据打印出来。","text_tokens":["mpu6500","value","smbus","samp","config","overflow","while","true","0x3b","看到","write","调用函数","g","调用","w","65536","：","21.0","能","0x3d","大","s","250.0","values","获取","也","mpu6050","accel","settings","(",",","m","一个","instantiate","gyro","都","=","conv","import","2000.0","##","第二","读取数据","with","1","1000.0","to","[","high","0x41","。","start","加速度","def","env","combine","0x3f","z","mgmt","32768","直接","一下","16.0","这","初始","加速","第三","if","具体","函数","py","addr","0x1c","这里","第三个","上","单一","h","是从","|","是","333.87","print","通过","完成","获取信息","到","怎么","sleep","我们","通信","可以","2","循环","zout","unsigned","yout","0x6b","发送","打印","+","registers","^","和","_","进行","二个","div","bits","参数","/","time","gyroscope",".","代码","raw","read","acc","driver","0b11000","初始化","crystal","寄存",")","#","power","陀螺仪","int","存在","alter","byte","主体","khz","第二个","rate","从而","bit","reset","usr","a","就","+-","不停","信息","看","将","比如","stability","等","有","比较","i2c","0b10000","sensors","变成","0x47","uncomment","comm","fifo","发送数据","and","sample","0x1b","dps","15.0","确认","-","bin","陀螺","关键","low","0b00000","然后","pwr","设置","计算","取信","0x01","下面","0x38"," ","第一","给","来","sel","sec","0x45","in","读写操作","python3","bus","速度","add","below",">","temp","这个","higha","t","真正","]","地址","，","读取","之后","的","indx","for","interrupt","management","第一个","进入","all","convert","寄存器","data","8.0","则","操作","2.0","0b010000","0x68","x","configuration","0x43","enable","0","指定","了","out","使用","配置","4.0","；","0x1a","才能","500.0","出来","*","功能","xout","y","0b01000","0x19","而","数据","几个","0.1","smplrt","register","<","val","return","0x00","三个","好","9.81","!","vals","acceleration","电源",":","读写","片段","degrees","sens","related","of","8"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/","text":"USB外设驱动 在电脑上，我们最常用的接口之一，应该就是USB了，相比之前讲到的外设通信方法，USB更加复杂，速度也更快。 USB通信原理 USB不仅是我们生活中最常用的一种接口，也是一种串行总线的通讯方式。他类似于UART，有两根线用来传输数据。 而且USB还有专门的接口规范，比如我们常听说的USB Type A、Type C。例如这里列出来的USB口，打印机常用的B口，手机上用的C口，都是标准的USB接口。 USB的接口规范，使用广泛，很多成熟的外设都是采用的USB接口。 摄像头驱动 比如USB摄像头。 硬件接线 这里我们使用一个USB摄像头，通过一个相机驱动把它跑起来，并且可以看到图像数据。 方法有很多中，TogetherROS兼容ROS2的所有功能，那我们就先试试ROS2中的标准方法，在旭日X3PI上直接安装一个usb_cam功能包。 ROS2相机驱动 安装与配置 首先安装ROS2的相机驱动包： # 安装功能包 $ sudo apt install ros-foxy-usb-cam 安装好之后，为了让系统能够找到该功能包，需要进入tros的目录，建立对应的软连接。 # 建立软连接 $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 因为旭日X3Pi可以连接csi摄像头，设备名占用了video0-7，所以外接的USB摄像头会被自动分配到video8，我们需要在ROS2的功能包中修改一下设备号。 # 修改配置文件 $ cd /opt/tros/share/usb_cam/config $ sudo vim params.yaml 然后给这个设备添加权限，最后再设置TogetherROS的环境变量就可以使用啦。 # 添加可执行权限 $ sudo chmod 777 /dev/video8 # 添加环境变量 $ source /opt/tros/local_setup.bash 运行相机驱动 我们来试一试。 $ ros2 launch usb_cam demo_launch.py #启动相机，X3Pi $ ros2 run rqt_image_view rqt_image_view #查看图像，PC 这里直接在X3Pi中启动usb_cam的launch文件，然后再启动一个能和他通信的Ubuntu桌面系统，打开rqt_image_view，选择对应的话题，就可以看到图像了。也就是说明我们成功的用TROS驱动了这个USB摄像头。 TogetherROS相机驱动 除此之外，TogetherROS中也提供了USB摄像头的驱动节点，连接摄像头之后，直接设置设备的权限和TogetherROS的环境变量就可以使用了。 $ source /opt/tros/local_setup.bash $ sudo chmod 777 /dev/video8 $ ros2 launch hobot_usb_cam hobot_usb_cam.launch.py 之后可以再打开一个新的终端，输入对应的指令，然后启动websocket这个节点，就可以把image这个话题的数据发送到网页了。 $ source /opt/tros/local_setup.bash $ cd /opt/tros/lib/websocket/webservice $ sudo chmod +x ./sbin/nginx $ sudo ./sbin/nginx -p . $ ros2 run websocket websocket --ros-args -p image_topic: = /image -p image_type: = mjpeg -p only_show_image: = true 这时我们直接打开在通一个局域网下的浏览器，输入X3Pi的地址，就可以进去到一个网页，点击左上方web端展示即可看到USB摄像头的实时画面。 激光雷达驱动 移动机器人中常用的激光雷达大多也是USB借口的，比如这款rplidar。 安装与配置 如果我们想把它跑起来，同样需要一个驱动包，大家可以在工作空间中下载雷达的驱动包，然后进行编译。编译完成后，添加环境变量就可以使用这个功能包了。 # 下载源码 $ mkdir -p catkin_ws/src $ cd ~/catkin_ws/src $ git clone -b ros2 https://github.com/slamtec/rplidar_ros.git # 编译 $ cd ~/catkin_ws $ colcon build --symlink-install # 添加环境变量 $ source ~/catkin_ws/install/setup.bash # 添加权限 $ sudo chmod 777 /dev/ttyUSB0 还要记得给激光雷达的USB口设置对应的权限。 运行激光雷达驱动 驱动安装好之后，就可以启动雷达了。 在旭日X3派的终端中，运行启动激光雷达的launch文件。 $ ros2 launch rplidar_ros2 rplidar_launch.py #启动雷达，X3PI $ ros2 run rviz2 rviz2 #查看点云，PC 启动成功后，我们在电脑端的Ubuntu系统中，在ros2环境下打开rviz2，然后将世界坐标系改为laser，然后添加LaserScan的可视化选项，并且把Reliability Policy的选项改为System Default，此时就可以看到激光雷达的点云数据了。","text_tokens":["sbin","先","借口","com","laser","也","查看","改为","动机","就是说","左上方","讲到","大多","p","tros","接口","chmod","demo","ubuntu","view","环境变","这里","包了","传输","上","电脑","install","首先","通信","打开","video8","+","该","_","进行","雷达","/","会","列出来","最后","c","这款","而且","#","将","安装","发送到","摄像头","进去","ros2","送到"," ","软","方式","colcon","rviz2","only","速度","话题","包中","这个","除此","下","类似","复杂","pc","了","还要","source","专门","他","采用","https","分配","编译","网页",":","新","浏览器","true","src","能","通","总线","相比","params","laserscan","规范","找到","因为","串行","接线","policy","直接","标准","驱动","py","show","连接","完成","它","x3","可视","如果","rplidar","catkin","local","移动","打印","发送","终端","也就是说","外设","image","想","之一","bash","更","reliability","生活","-","然后","中","局域","包","usb","$","机器人","来","所以","执行","可视化","link","web","share","cam","setup","topic","坐标系","试一试","apt","被","系统","试试","对应","cd","环境变量","slamtec","之前","功能","更加","占用","列出","所有","就是","旭日","config","togetherros","：","yaml","hobot","桌面","记得","点云","世界","soft","opt","还有","最","777","。","起来","修改","把","点击","激光雷达","上方","args","vim","同样","uart","是","传输数据","到","可以","派","create","rqt","和","sudo","github","工作","在","、","a","实时","mjpeg","x3pi","b","设备","比如","启动","有","像头","大家","成熟","此时","即可","build","硬件","印机","设置","变量","给","跑","啦","用","ttyusb0","lib","运行","地址","之后","明","不仅","需要","进入","websocket","x","foxy","建立","权限","配置","使用","端的","dev","与","出来","选择","图像","源码","并且","git","~","ws","常","看到","空间","再","打印机","输入","上用","画面","这时","于","坐标","symlink","除此之外","都","=","--","浏览","口","那","号","下载","video0","激光","两根","目录","一下","可","用来","局域网","mkdir","default","clone","端","自动","通过","移动机器人","选项","我们","展示","摄像","左上",".","听说","文件","system","成功","机器","type","就","7","配置文件","方法","相机","提供","为了","常用","快","后","让","通讯","节点","环境","很多","原理","能够","串行总线","python3","再启动","launch","广泛","，","手机","的","csi","兼容","外接","一种","应该","线","数据","添加","run","之外","nginx","好","webservice","指令","ros","例如","名","一个"],"title":"USB外设驱动","title_tokens":["驱动","usb","外设"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#usb","text":"在电脑上，我们最常用的接口之一，应该就是USB了，相比之前讲到的外设通信方法，USB更加复杂，速度也更快。","text_tokens":["方法","上","电脑","，","更","的","也","通信","我们","相比","复杂","了","常用","最","快","之前","usb","外设","讲到","。","更加","应该","在","接口","速度","之一","就是"],"title":"USB外设驱动","title_tokens":["驱动","usb","外设"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#usb_1","text":"USB不仅是我们生活中最常用的一种接口，也是一种串行总线的通讯方式。他类似于UART，有两根线用来传输数据。 而且USB还有专门的接口规范，比如我们常听说的USB Type A、Type C。例如这里列出来的USB口，打印机常用的B口，手机上用的C口，都是标准的USB接口。 USB的接口规范，使用广泛，很多成熟的外设都是采用的USB接口。","text_tokens":["这里","传输","b","常","，","比如","uart","是","传输数据","手机","生活","的","打印机","不仅","有","上用","总线","也","我们","成熟","类似","于","打印","使用","规范","常用","还有","都","最","中","一种","出来","专门","口","印机","usb","他","听说","外设","。","串行"," ","通讯","线","列出来","数据","列出","c","方式","采用","很多","而且","两根","接口","串行总线","用来","标准","、","例如","type","a","广泛"],"title":"USB通信原理","title_tokens":["原理","usb","通信"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_1","text":"比如USB摄像头。","text_tokens":["usb","比如","摄像","。","摄像头","像头"],"title":"摄像头驱动","title_tokens":["驱动","摄像","摄像头","像头"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_2","text":"这里我们使用一个USB摄像头，通过一个相机驱动把它跑起来，并且可以看到图像数据。 方法有很多中，TogetherROS兼容ROS2的所有功能，那我们就先试试ROS2中的标准方法，在旭日X3PI上直接安装一个usb_cam功能包。","text_tokens":["方法","相机","先","x3pi","这里","togetherros","上","，","看到","通过","安装","它","的","有","试试","摄像头","像头","我们","可以","摄像","使用","_","兼容","ros2","中","那","图像","包","usb","。","功能"," ","数据","在","跑","起来","很多","直接","把","标准","cam","驱动","所有","并且","就","旭日","一个"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#ros2","text":"","text_tokens":[],"title":"ROS2相机驱动","title_tokens":["ros2","相机","驱动"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_3","text":"首先安装ROS2的相机驱动包： # 安装功能包 $ sudo apt install ros-foxy-usb-cam 安装好之后，为了让系统能够找到该功能包，需要进入tros的目录，建立对应的软连接。 # 建立软连接 $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 因为旭日X3Pi可以连接csi摄像头，设备名占用了video0-7，所以外接的USB摄像头会被自动分配到video8，我们需要在ROS2的功能包中修改一下设备号。 # 修改配置文件 $ cd /opt/tros/share/usb_cam/config $ sudo vim params.yaml 然后给这个设备添加权限，最后再设置TogetherROS的环境变量就可以使用啦。 # 添加可执行权限 $ sudo chmod 777 /dev/video8 # 添加环境变量 $ source /opt/tros/local_setup.bash","text_tokens":["config","togetherros","再","：","yaml","params","soft","opt","--","号","777","找到","因为","。","video0","tros","修改","目录","一下","可","chmod","驱动","py","环境变","自动","vim","install","连接","首先","到","我们","可以","create","video8","local","摄像","该","sudo","_","/",".","文件","会","最后","在","#","就","7","配置文件","bash","相机","x3pi","设备","安装","摄像头","像头","为了","-","然后","ros2","设置","包","usb","变量","$","让"," ","给","软","所以","环境","执行","能够","啦","python3","link","share","cam","setup","包中","apt","这个","被","，","系统","之后","的","需要","进入","对应","cd","csi","foxy","建立","了","权限","配置","使用","环境变量","source","dev","外接","功能","占用","添加","好","分配","ros","名","旭日"],"title":"安装与配置","title_tokens":["与","安装","配置"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_4","text":"我们来试一试。 $ ros2 launch usb_cam demo_launch.py #启动相机，X3Pi $ ros2 run rqt_image_view rqt_image_view #查看图像，PC 这里直接在X3Pi中启动usb_cam的launch文件，然后再启动一个能和他通信的Ubuntu桌面系统，打开rqt_image_view，选择对应的话题，就可以看到图像了。也就是说明我们成功的用TROS驱动了这个USB摄像头。","text_tokens":["相机","x3pi","这里","，","看到","启动","能","系统","的","明","摄像头","像头","桌面","查看","我们","通信","对应","可以","打开","pc","了","摄像","一个","rqt","就是","和","_","就是说","然后","也就是说","ros2","中","选择","图像",".","usb","他","就","。","$","文件"," ","在","run","来","image","tros","#","直接","成功","再启动","cam","launch","demo","ubuntu","用","驱动","view","试一试","话题","这个","py"],"title":"运行相机驱动","title_tokens":["驱动","相机","运行"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#togetherros","text":"除此之外，TogetherROS中也提供了USB摄像头的驱动节点，连接摄像头之后，直接设置设备的权限和TogetherROS的环境变量就可以使用了。 $ source /opt/tros/local_setup.bash $ sudo chmod 777 /dev/video8 $ ros2 launch hobot_usb_cam hobot_usb_cam.launch.py 之后可以再打开一个新的终端，输入对应的指令，然后启动websocket这个节点，就可以把image这个话题的数据发送到网页了。 $ source /opt/tros/local_setup.bash $ cd /opt/tros/lib/websocket/webservice $ sudo chmod +x ./sbin/nginx $ sudo ./sbin/nginx -p . $ ros2 run websocket websocket --ros-args -p image_topic: = /image -p image_type: = mjpeg -p only_show_image: = true 这时我们直接打开在通一个局域网下的浏览器，输入X3Pi的地址，就可以进去到一个网页，点击左上方web端展示即可看到USB摄像头的实时画面。","text_tokens":["sbin","togetherros","浏览器","true","看到","再","通","输入","hobot","也","画面","这时","除此之外","opt","=","--","浏览","左上方","777","。","p","tros","直接","把","局域网","chmod","点击","驱动","py","环境变","上方","args","端","show","连接","到","我们","可以","打开","local","video8","展示","摄像","发送","终端","+","和","_","sudo","左上","/",".","在","image","type","就","实时","bash","mjpeg","x3pi","设备","启动","提供","发送到","摄像头","像头","进去","即可","-","然后","ros2","中","局域","送到","设置","变量","usb","$"," ","节点","环境","web","setup","cam","launch","topic","only","lib","话题","这个","地址","，","之后","的","除此","对应","下","cd","websocket","x","了","权限","使用","环境变量","source","dev","数据","run","之外","nginx","webservice","指令","网页","ros",":","新","一个"],"title":"TogetherROS相机驱动","title_tokens":["驱动","相机","togetherros"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_5","text":"移动机器人中常用的激光雷达大多也是USB借口的，比如这款rplidar。","text_tokens":["借口","，","比如","是","的","移动机器人","也","rplidar","动机","移动","常用","雷达","中","usb","。","机器人","激光","大多","这款","机器","激光雷达"],"title":"激光雷达驱动","title_tokens":["驱动","激光","激光雷达","雷达"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_6","text":"如果我们想把它跑起来，同样需要一个驱动包，大家可以在工作空间中下载雷达的驱动包，然后进行编译。编译完成后，添加环境变量就可以使用这个功能包了。 # 下载源码 $ mkdir -p catkin_ws/src $ cd ~/catkin_ws/src $ git clone -b ros2 https://github.com/slamtec/rplidar_ros.git # 编译 $ cd ~/catkin_ws $ colcon build --symlink-install # 添加环境变量 $ source ~/catkin_ws/install/setup.bash # 添加权限 $ sudo chmod 777 /dev/ttyUSB0 还要记得给激光雷达的USB口设置对应的权限。","text_tokens":["ws","com","src","空间","记得","symlink","--","口","下载","777","。","激光","p","起来","把","chmod","驱动","mkdir","激光雷达","clone","环境变","包了","install","同样","完成","它","如果","我们","可以","catkin","rplidar","_","进行","sudo","github","雷达","/","工作",".","在","#","想","就","bash","b","大家","build","-","然后","ros2","中","设置","包","变量","usb","后","$"," ","给","跑","环境","colcon","setup","ttyusb0","这个","，","的","需要","对应","cd","权限","使用","环境变量","还要","slamtec","source","dev","功能","添加","源码","https","编译","ros",":","git","~","一个"],"title":"安装与配置","title_tokens":["与","安装","配置"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_7","text":"驱动安装好之后，就可以启动雷达了。 在旭日X3派的终端中，运行启动激光雷达的launch文件。 $ ros2 launch rplidar_ros2 rplidar_launch.py #启动雷达，X3PI $ ros2 run rviz2 rviz2 #查看点云，PC 启动成功后，我们在电脑端的Ubuntu系统中，在ros2环境下打开rviz2，然后将世界坐标系改为laser，然后添加LaserScan的可视化选项，并且把Reliability Policy的选项改为System Default，此时就可以看到激光雷达的点云数据了。","text_tokens":["x3pi","将","，","电脑","看到","启动","系统","安装","之后","x3","的","可视","reliability","laser","选项","查看","我们","下","可以","派","laserscan","打开","pc","rplidar","点云","世界","改为","此时","了","坐标","终端","端的","_","然后","雷达","ros2","中",".","py","后","。","$","文件"," ","激光","在","run","添加","policy","环境","数据","system","#","可视化","好","成功","把","rviz2","launch","驱动","ubuntu","坐标系","default","并且","激光雷达","就","旭日","运行"],"title":"运行激光雷达驱动","title_tokens":["驱动","激光雷达","激光","运行","雷达"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/","text":"机器视觉介绍 机器视觉概念 机器视觉， 就是用计算机来模拟人的视觉功能，但这并不仅仅是人眼的简单延伸，更重要的是像人脑一样，可以从客观事物的图像中提取信息，进行处理并加以理解，最终用于实际检测、控制等场景。 获取图像信息相对简单，但想让机器人理解图像中千变万化的物品，就难上加难了。 为了解决这一系列复杂的问题，机器视觉也是一个涉猎广泛的交叉学科，横跨人工智能、神经生物学、物理学、计算机科学、图像处理、模式识别等诸多领域。时至今日，在各个领域中，都有大量开发者或组织参与其中，也积累了众多技术，不过依然还有很多问题亟待解决，就像我们对自己大脑的研究也只是冰山一角一样，机器视觉的研究也将会是一个长久的工作。 机器视觉相关的关键技术也有不少，比如视觉图像的采集和信号处理，这个过程主要是通过传感器硬件采集外部光信号的过程，光信号最终会转变成数字电路的信号，便于下一步的处理；类似左边图片中看到的效果，获取图像之后，更重要的是要识别图像中的物体、确定物体的位置、或者检测物品的变化，这就要用到模式识别或者机器学习等技术，这个部分也是当今机器视觉研究的重点。 和人类的两只眼睛不同，机器用于获取图像的传感器种类较为丰富，可以是一个摄像头，也可以是两个摄像头，还可以是三个、四个、很多个摄像头，不仅可以获取颜色信息，还可以通过红外相机获取深度或者能量信息，这可比人眼获取的信息丰富多了，当然，这也会对后期的处理带来不同的计算压力。 在工业领域，机器视觉系统已经被广泛用于自动检验、工件加工、装配自动化以及生产过程控制等工作。随着机器人的快速发展和应用，机器视觉也逐渐应用于农业机器人、AMR物流机器人、服务机器人、无人驾驶汽车等各种机器人，活跃在农场、物流、仓储、交通、医院等多种环境中。 机器视觉流程 人类视觉擅长于对复杂、非结构化的场景进行定性解释，但机器视觉凭借速度、精度和可重复性等优势，非常适合对结构化场景进行定量测量。 一般来讲，典型的机器视觉系统可以分为如图所示的三个部分：图像采集、图像分析和控制输出。 图像采集注重对原始光学信号的采样，是整个视觉系统的传感部分，核心是相机和相关的配件。 其中光源用于照明待检测的物体，并突显其特征，便于让相机能够更好的捕捉图像。光源是影响机器视觉系统成像质量的重要因素，好的光源和照明效果对机器视觉判断影响很大。当前，机器视觉的光源已经突破人眼的可见光范围，其光谱范围跨越红外光（IR）、可见光、紫外光（UV）乃至X射线波段，可实现更精细和更广泛的检测范围，以及特殊成像需求。 相机被喻为机器视觉系统的“眼睛”，承担着图像信息采集的重要任务。图像传感器又是相机的核心元器件，主要有CCD和CMOS两种类型，其工作原理是将相机镜头接收到的光学信号转化成数字信号。选择合适的相机是机器视觉系统设计的重要环节，不仅直接决定了采集图像的质量和速度，同时也与整个系统的运行模式相关。 图像处理系统接收到相机传来的数字图像之后，通过各种软件算法进行图像特征提取、特征分析和数据标定，最后进行判断。这是各种视觉算法研究最为集中的部分，从传统的模式识别算法，到当前热门的各种机器学习方法，都是为了更好的让机器理解环境。 对于人来讲，识别某一个物体是苹果似乎理所当然，但是对于机器人来讲，就需要提取各种各样不同种类、颜色、形状的苹果特征，然后训练得到一个苹果的“模型”，再通过这个模型对实时图像做匹配，从而分析面前这个东西到底是不是苹果。 在机器人系统中，视觉识别的结果最终要和机器人的某些行为绑定，也就是第三个部分——控制输出，包含I/O接口、运动控制、可视化显示等。当图像处理系统完成图像分析后，将判断的结果发给机器人控制系统，接下来机器人完成运动控制。比如视觉识别到了抓取目标的位置，通过IO口控制夹爪完成抓取和放置，过程中识别的结果和运动的状态，都可以在上位机中显示，方便我们监控。 就机器视觉而言，在这三个部分中，图像分析占据了绝对的核心，涉及的方法、使用的各种开源软件或者框架非常多，这也是我们后续开发的重点，TogetherROS中提供了大量的算法、工具和功能支持。 旭日X3派配置 了解了机器视觉的基本原理和流程，相信大家对视觉应用已经充满了期待，我们这就准备开始。 后续课程中，我们将继续在旭日X3派的开发板上，使用TogetherROS实现各种各样的视觉例程，不过我们得先找到一个相机，比如usb相机或者MIPI接口配套的相机模块，然后连接到开发板对应的接口上。 电脑和开发板之前通过网线连接，便于我们查看视觉处理的结果，速度更快。 如果有HDMI屏幕的话，也可以准备好，稍后需要使用的时候插上查看结果，如果没有的话，也没有影响，后续我们会使用一套网络传输工具，通过板卡的IP地址，就可以看到图像处理的实时状态啦。 USB相机图像采集 关于相机的驱动，请大家也再确认一下，这是后续视觉处理的基础。 如果是USB相机的话，可以参考这个过程验证下是否可以顺利看到图像。 # 旭日X3派 $ sudo apt install ros-foxy-usb-cam $ cd /opt/tros $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros $ source /opt/tros/local_setup.bash $ ros2 launch usb_cam demo_launch.py # 修改params.yaml配置文件中的设备号 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view MIPI相机图像采集 如果使用的是MIPI相机的话，可以参考这个流程驱动相机并显示图像。 # 旭日X3派 $ source /opt/tros/local_setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p video_device: = F37 -p image_width: = 960 -p image_height: = 540 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view 为了提高图像的编码和传输效率，我们建议大家使用MIPI接口的相机，后续应用功能我们也会以该相机为主。","text_tokens":["下来","先","至今","人工智能","算机","也","查看","问题","压力","精细","当然","放置","似乎","活跃","环节","540","汽车","期待","模式识别","数字图像","生产","感器","检测","特征提取","p","tros","mipi","接口","夹","demo","质量","做","view","本原","传输","上","电脑","install","深度","模块","提取","效果","为主","顺利","场景","范围","众多","该","插上","进行","实际","_","亟待","/","没有","简单","传统","来讲","会","最后","视觉","难上加难","#","一套","种类","诸多","训练","神经","将","检验","两个","屏幕","基本","需求","农场","稍后","转化","ip地址","物体","等","后期","数字电路","摄像头","行为","框架","依然","关键","发展","ros2","这是","形状","提高","乃至"," ","得","并","紫外光","更好","重复性","着","配件","确定","速度","控制系统","积累","数字信号","这个","传来","红外光","绝对","最终","电路","下","匹配","类似","复杂","pc","验证","能量","定量","了","横跨","一系","source","快速","光","转变","模式","大脑","人眼","开源","集中","模拟","随着","了解","一般","—","涉猎","重点","医院","基础","工件",":","合适","一样","仓储","系列","很大","数字电","设计","射线","应用","科学","获取","自己","以","params","测量","典型","板卡","丰富","农业","继续","实现","找到","较为","又","工业","逐渐","一般来讲","过程","已经","直接","驱动","计算机","py","算法","第三个","连接","输出","完成","x3","可视","理学","f37","或","苹果","如果","可见光","local","配套","事物","像","延伸","核心","关于","对","特征","建议","不是","接收","定性","接下","主要","image","红外","video","从而","想","元器","请","成像","bash","驾驶","其中","ccd","加工","更","图像处理","绑定","效率","变成","任务","相关","生物学","影响","光学","爪","-","然后","多种","中","待","相信","usb","时至今日","$","机器人","对于","来","可视化","非常适合","流程","link","物理","setup","cam","”","某","时候","人","apt","被","突破","系统","介绍","从","解释","对应","支持","cd","监控","不仅仅","学习","；","之前","“","功能","用于","波段","就是","旭日","当今","togetherros","结构化","采集","：","yaml","编码","就要","客观事物","眼睛","东西","相对","i","soft","突显","后续","opt","不同","还有","冰山一角","结果","软件","人类","热门","。","修改","这","非常","化成","第三","喻为","但是","今日","args","学科","是","到","可以","派","开始","create","开发","网线","人工","最为","rqt","和","光源","重要环节","状态","sudo","装配","到底","工作","width","智能","交叉学科","在","整个","变化","amr","个","长于","各个","凭借","、","抓取","实时","例程","照明","设备","比如","当","可重复性","有","参考","传感","像头","是不是","大家","o","而言","光谱","硬件","便于","擅长","分为","模型","涉及","只是","计算机科学","以及","开发者","位置","理所当然","啦","用","物品","研究","ir","运行","开发板","特征分析","地址","之后","不仅","承担","需要","某些","充满","重复","的话","foxy","工具","接下来","配置","使用","uv","处理","与","两只","传感器","选择","紫外","图像","是否","准备","加以","客观","占据","非","如图所示","仅仅","类型","看到","运动","大量","再","一系列","cmos","或者","信号处理","于","适合","冰山","还","捕捉","基本原理","都","=","--","关键技术","口","图片","带来","号","机中","部分","元器件","物理学","识别","跨越","可","一下","标定","方便","但","镜头","自动","交通","各种各样","通过","得到","长久","解决","因素","我们","判断","千变万化","颜色","可比","多","结构","不少","摄像","各样","用到","不过","目标",".","自动化","决定","文件","height","转化成","device","发给","要","机器","人脑","精度","就","配置文件","采样","器件","生物","复性","方法","信息","相机","特殊","960","技术","提供","领域","两种","交叉","概念","为了","四个","参与","确认","显示","io","可见","快","分析","重要","其","计算","组织","后","左边","让","课程","同时","擅长于","亟待解决","环境","很多","原理","原始","能够","物流","python3","launch","面前","服务","广泛","优势","理解","，","各种","的","无人","一角","）","（","当前","包含","网络","控制","注重","上位","转变成","无人驾驶","所示","hdmi","各个领域","数据","run","数字","好","三个","x射线","ros","信号","一步","外部","一个"],"title":"机器视觉介绍","title_tokens":["视觉","介绍","机器"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_1","text":"","text_tokens":[],"title":"机器视觉介绍","title_tokens":["视觉","介绍","机器"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_2","text":"机器视觉， 就是用计算机来模拟人的视觉功能，但这并不仅仅是人眼的简单延伸，更重要的是像人脑一样，可以从客观事物的图像中提取信息，进行处理并加以理解，最终用于实际检测、控制等场景。 获取图像信息相对简单，但想让机器人理解图像中千变万化的物品，就难上加难了。 为了解决这一系列复杂的问题，机器视觉也是一个涉猎广泛的交叉学科，横跨人工智能、神经生物学、物理学、计算机科学、图像处理、模式识别等诸多领域。时至今日，在各个领域中，都有大量开发者或组织参与其中，也积累了众多技术，不过依然还有很多问题亟待解决，就像我们对自己大脑的研究也只是冰山一角一样，机器视觉的研究也将会是一个长久的工作。 机器视觉相关的关键技术也有不少，比如视觉图像的采集和信号处理，这个过程主要是通过传感器硬件采集外部光信号的过程，光信号最终会转变成数字电路的信号，便于下一步的处理；类似左边图片中看到的效果，获取图像之后，更重要的是要识别图像中的物体、确定物体的位置、或者检测物品的变化，这就要用到模式识别或者机器学习等技术，这个部分也是当今机器视觉研究的重点。 和人类的两只眼睛不同，机器用于获取图像的传感器种类较为丰富，可以是一个摄像头，也可以是两个摄像头，还可以是三个、四个、很多个摄像头，不仅可以获取颜色信息，还可以通过红外相机获取深度或者能量信息，这可比人眼获取的信息丰富多了，当然，这也会对后期的处理带来不同的计算压力。 在工业领域，机器视觉系统已经被广泛用于自动检验、工件加工、装配自动化以及生产过程控制等工作。随着机器人的快速发展和应用，机器视觉也逐渐应用于农业机器人、AMR物流机器人、服务机器人、无人驾驶汽车等各种机器人，活跃在农场、物流、仓储、交通、医院等多种环境中。","text_tokens":["当今","一样","至今","系列","仓储","人工智能","数字电","算机","采集","看到","大量","应用","科学","就要","客观事物","获取","问题","也","自己","一系列","眼睛","或者","压力","信号处理","相对","于","当然","冰山","还","不同","活跃","还有","汽车","冰山一角","都","丰富","农业","关键技术","图片","带来","人类","模式识别","较为","。","工业","感器","生产","逐渐","检测","部分","过程","物理学","识别","已经","这","计算机","但","今日","自动","学科","交通","是","深度","通过","提取","长久","解决","理学","或","效果","我们","可以","场景","千变万化","颜色","可比","开发","多","众多","事物","不少","人工","摄像","像","和","进行","实际","延伸","用到","不过","亟待","装配","工作","简单","对","自动化","智能","交叉学科","会","在","视觉","主要","变化","难上加难","amr","红外","个","各个","要","机器","、","种类","人脑","诸多","想","就","生物","神经","信息","将","相机","检验","驾驶","两个","其中","比如","技术","加工","农场","更","图像处理","领域","物体","等","有","交叉","数字电路","传感","像头","摄像头","后期","为了","变成","四个","相关","生物学","硬件","便于","依然","参与","关键","发展","多种","中","重要","计算","时至今日","组织","左边","只是","计算机科学","外部","让"," ","开发者","机器人","以及","并","来","亟待解决","很多","位置","环境","物流","物理","用","确定","物品","积累","研究","人","这个","服务","广泛","被","理解","，","各种","系统","之后","的","无人","最终","不仅","一角","电路","从","下","类似","复杂","能量","了","横跨","不仅仅","学习","控制","一系","；","处理","快速","光","传感器","模式","转变","大脑","图像","转变成","两只","人眼","无人驾驶","模拟","随着","功能","用于","各个领域","数字","涉猎","三个","加以","重点","医院","信号","工件","一步","客观","就是","仅仅","一个"],"title":"机器视觉概念","title_tokens":["视觉","概念","机器"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_3","text":"人类视觉擅长于对复杂、非结构化的场景进行定性解释，但机器视觉凭借速度、精度和可重复性等优势，非常适合对结构化场景进行定量测量。 一般来讲，典型的机器视觉系统可以分为如图所示的三个部分：图像采集、图像分析和控制输出。 图像采集注重对原始光学信号的采样，是整个视觉系统的传感部分，核心是相机和相关的配件。 其中光源用于照明待检测的物体，并突显其特征，便于让相机能够更好的捕捉图像。光源是影响机器视觉系统成像质量的重要因素，好的光源和照明效果对机器视觉判断影响很大。当前，机器视觉的光源已经突破人眼的可见光范围，其光谱范围跨越红外光（IR）、可见光、紫外光（UV）乃至X射线波段，可实现更精细和更广泛的检测范围，以及特殊成像需求。 相机被喻为机器视觉系统的“眼睛”，承担着图像信息采集的重要任务。图像传感器又是相机的核心元器件，主要有CCD和CMOS两种类型，其工作原理是将相机镜头接收到的光学信号转化成数字信号。选择合适的相机是机器视觉系统设计的重要环节，不仅直接决定了采集图像的质量和速度，同时也与整个系统的运行模式相关。 图像处理系统接收到相机传来的数字图像之后，通过各种软件算法进行图像特征提取、特征分析和数据标定，最后进行判断。这是各种视觉算法研究最为集中的部分，从传统的模式识别算法，到当前热门的各种机器学习方法，都是为了更好的让机器理解环境。 对于人来讲，识别某一个物体是苹果似乎理所当然，但是对于机器人来讲，就需要提取各种各样不同种类、颜色、形状的苹果特征，然后训练得到一个苹果的“模型”，再通过这个模型对实时图像做匹配，从而分析面前这个东西到底是不是苹果。 在机器人系统中，视觉识别的结果最终要和机器人的某些行为绑定，也就是第三个部分——控制输出，包含I/O接口、运动控制、可视化显示等。当图像处理系统完成图像分析后，将判断的结果发给机器人控制系统，接下来机器人完成运动控制。比如视觉识别到了抓取目标的位置，通过IO口控制夹爪完成抓取和放置，过程中识别的结果和运动的状态，都可以在上位机中显示，方便我们监控。 就机器视觉而言，在这三个部分中，图像分析占据了绝对的核心，涉及的方法、使用的各种开源软件或者框架非常多，这也是我们后续开发的重点，TogetherROS中提供了大量的算法、工具和功能支持。","text_tokens":["下来","很大","togetherros","结构化","类型","采集","射线","设计","运动","大量","再","：","也","眼睛","cmos","或者","东西","精细","测量","当然","似乎","适合","i","突显","捕捉","放置","典型","环节","不同","后续","都","结果","口","软件","人类","实现","模式识别","热门","又","。","数字图像","感器","一般来讲","机中","部分","检测","元器件","过程","特征提取","已经","跨越","直接","可","识别","非常","接口","夹","标定","这","化成","第三","质量","喻为","但是","合适","做","方便","但","镜头","算法","第三个","各种各样","是","输出","通过","得到","提取","完成","可视","因素","到","效果","苹果","我们","可以","场景","判断","可见光","颜色","多","开发","结构","范围","最为","和","光源","进行","重要环节","各样","状态","/","到底","工作","传统","核心","目标","对","特征","不是","来讲","决定","位置","接收","定性","最后","在","转化成","接下","视觉","整个","主要","红外","发给","长于","要","机器","、","凭借","种类","抓取","从而","精度","元器","就","训练","成像","采样","器件","实时","复性","方法","相机","信息","将","特殊","占据","其中","照明","ccd","比如","需求","更","图像处理","转化","当","两种","提供","物体","可重复性","等","有","绑定","传感","是不是","为了","行为","任务","相关","框架","o","而言","光谱","便于","影响","光学","擅长","分为","爪","显示","然后","io","可见","模型","待","这是","中","分析","其","重要","形状","涉及","后","乃至","以及","让"," ","机器人","同时","擅长于","并","紫外光","环境","更好","对于","重复性","着","原理","原始","非常适合","能够","理所当然","配件","可视化","控制系统","速度","”","某","数字信号","研究","人","ir","面前","这个","优势","广泛","运行","被","理解","传来","特征分析","突破","，","红外光","各种","系统","之后","的","绝对","最终","不仅","承担","）","（","解释","从","需要","某些","支持","匹配","复杂","重复","当前","包含","定量","工具","了","接下来","监控","使用","学习","控制","注重","uv","处理","与","上位","传感器","选择","模式","紫外","图像","人眼","开源","集中","所示","“","功能","用于","一般","数据","—","波段","数字","好","三个","x射线","重点","信号","就是","非","如图所示","一个"],"title":"机器视觉流程","title_tokens":["视觉","流程","机器"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#x3","text":"了解了机器视觉的基本原理和流程，相信大家对视觉应用已经充满了期待，我们这就准备开始。 后续课程中，我们将继续在旭日X3派的开发板上，使用TogetherROS实现各种各样的视觉例程，不过我们得先找到一个相机，比如usb相机或者MIPI接口配套的相机模块，然后连接到开发板对应的接口上。 电脑和开发板之前通过网线连接，便于我们查看视觉处理的结果，速度更快。 如果有HDMI屏幕的话，也可以准备好，稍后需要使用的时候插上查看结果，如果没有的话，也没有影响，后续我们会使用一套网络传输工具，通过板卡的IP地址，就可以看到图像处理的实时状态啦。","text_tokens":["先","togetherros","看到","应用","也","查看","或者","后续","基本原理","板卡","期待","继续","结果","实现","找到","。","mipi","已经","接口","这","本原","传输","上","电脑","连接","各种各样","通过","模块","x3","到","我们","如果","可以","派","开始","开发","配套","网线","和","插上","状态","各样","不过","没有","对","会","在","视觉","一套","机器","就","实时","相机","将","例程","屏幕","基本","比如","更","稍后","图像处理","ip地址","有","大家","便于","影响","然后","中","快","相信","usb","课程"," ","得","原理","流程","啦","速度","时候","开发板","地址","，","各种","的","需要","充满","对应","的话","网络","了","工具","使用","处理","之前","图像","了解","hdmi","好","准备","旭日","一个"],"title":"旭日X3派配置","title_tokens":["旭日","派","x3","配置"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#usb","text":"关于相机的驱动，请大家也再确认一下，这是后续视觉处理的基础。 如果是USB相机的话，可以参考这个过程验证下是否可以顺利看到图像。 # 旭日X3派 $ sudo apt install ros-foxy-usb-cam $ cd /opt/tros $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros $ source /opt/tros/local_setup.bash $ ros2 launch usb_cam demo_launch.py # 修改params.yaml配置文件中的设备号 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view","text_tokens":["看到","再","yaml","也","params","soft","后续","opt","--","号","。","过程","tros","修改","一下","demo","驱动","view","py","install","是","x3","如果","可以","顺利","派","create","local","rqt","sudo","_","/","关于",".","文件","image","视觉","#","请","配置文件","bash","相机","设备","参考","大家","确认","-","ros2","中","这是","usb","$"," ","python3","link","setup","cam","launch","apt","这个","，","的","下","pc","cd","验证","的话","foxy","配置","source","处理","图像","是否","run","基础","ros","旭日"],"title":"USB相机图像采集","title_tokens":["图像","相机","usb","采集"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#mipi","text":"如果使用的是MIPI相机的话，可以参考这个流程驱动相机并显示图像。 # 旭日X3派 $ source /opt/tros/local_setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p video_device: = F37 -p image_width: = 960 -p image_height: = 540 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view 为了提高图像的编码和传输效率，我们建议大家使用MIPI接口的相机，后续应用功能我们也会以该相机为主。","text_tokens":["相机","args","传输","960","，","是","应用","的","x3","编码","参考","f37","大家","效率","如果","我们","可以","也","派","为了","以","为主","pc","的话","local","foxy","后续","使用","opt","540","rqt","_","和","-","显示","source","=","ros2","--","该","/","width","图像",".","提高","建议","。","$","功能"," ","会","height","run","并","p","device","tros","mipi","#","image","接口","流程","setup","cam","驱动","ros","video",":","view","旭日","这个","bash"],"title":"MIPI相机图像采集","title_tokens":["图像","mipi","相机","采集"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/","text":"CV图像加速处理 OpenCV是一个著名的机器视觉处理库，相信大家都有听过，这个库中有很多图像处理的基础算法，比如灰度变化、图像滤波等，不过这个库为了保证较好的通用性，主要通过软件实现各种算法，TogetherROS对此作了大量优化，我们一起来看看。 TogetherROS视觉加速 TogetherROS系统中集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 效果这么好，具体该如何使用呢？ 高斯滤波 我们先来看下图像处理中常用的高斯滤波算法，OpenCV和hobotcv，正面PK一下，我们也看看在程序中如何使用hobotcv的图像处理加速算法。 运行示例程序 $ cd /opt/tros/hobotcv_gaussian/sample $ ./build.sh $ cd output $ ./run.sh 代码解析 hobotcv_sample.cpp： // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include <algorithm> #include <chrono> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <utility> #include \"hobotcv_gaussian_blur.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" void analyse_result ( cv :: Mat & out_filter , cv :: Mat & cls_filter , std :: string flag_name ) { auto start_time = std :: chrono :: steady_clock :: now (); std :: cout << \"\" << std :: endl ; std :: cout << \"analyse_result start \" << std :: endl ; std :: cout << \"---------\" << flag_name << std :: endl ; std :: cout << \"out_filter type:\" << out_filter . type () << \",cols:\" << out_filter . cols << \",rows:\" << out_filter . rows << \",channel:\" << out_filter . channels () << std :: endl ; std :: cout << \"cls_filter type:\" << cls_filter . type () << \",cols:\" << cls_filter . cols << \",rows:\" << cls_filter . rows << \",channel:\" << cls_filter . channels () << std :: endl ; double minvalue , maxvalue ; cv :: Point mixIdx , maxIdx ; cv :: minMaxLoc ( out_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"out_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"out_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"out_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: minMaxLoc ( cls_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"cls_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"cls_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"cls_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: Mat mat_diff = cv :: abs ( out_filter - cls_filter ); cv :: Scalar sum_error = cv :: sum ( mat_diff >= 1 ); cv :: Scalar mean_error = cv :: sum ( mat_diff ) / ( mat_diff . rows * mat_diff . cols ); cv :: minMaxLoc ( mat_diff , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"\" << std :: endl ; std :: cout << \"diff diff diff\" << std :: endl ; std :: cout << \"mat_diff minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"mat_diff min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"mat_diff max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; std :: cout << \"\" << std :: endl ; std :: cout << \"error sum:\" << sum_error [ 0 ] << \",max:\" << maxvalue << \",mean_error:\" << mean_error [ 0 ] << std :: endl ; int time_used_ms_end = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: steady_clock :: now () - start_time ) . count (); std :: cout << \"analyse_result,time_used_ms_end:\" << time_used_ms_end << std :: endl ; std :: cout << \"analyse_result end \" << std :: endl ; std :: cout << \"\" << std :: endl ; } int main () { int32_t ret = -1 ; HobotGaussianBlurParam blur_param ; HOBOTCV_INITIALIZE_GAUSSIAN_BLUR_PARAM ( & blur_param ); HobotCVGaussianBlurHandle handle ; ret = HobotCVGaussianBlurCreate ( blur_param , & handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurCreate failed, error msg:%d \\n \" , ret ); return -1 ; } for ( int i = 0 ; i < 5 ; i ++ ) { std :: string m_tof_file_s = \"images/frame1_\" + std :: to_string ( i ) + \".png\" ; std :: cout << \"===================\" << std :: endl ; std :: cout << \"image name :\" << m_tof_file_s << std :: endl ; cv :: Mat src = cv :: imread ( m_tof_file_s , CV_16UC1 ); cv :: Mat dst ; cv :: medianBlur ( src , src , 3 ); auto start_time_infe = std :: chrono :: steady_clock :: now (); ret = HobotCVGaussianBlurProcess ( handle , & src , & dst ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurProcess failed, error msg:%d \\n \" , ret ); return -1 ; } int infe_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_infe ). count (); std :: cout << \"infe cost time:\" << infe_time << std :: endl ; auto start_time_gauss = std :: chrono :: steady_clock :: now (); cv :: Mat gaussian_tof ; cv :: GaussianBlur ( src , gaussian_tof , cv :: Size ( 3 , 3 ), 0 , 0 , cv :: BORDER_REPLICATE ); int guss_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_gauss ). count (); std :: cout << \"guss_time cost time:\" << guss_time << std :: endl ; float save_rate = float (( guss_time * 1.0 - infe_time * 1.0 ) / guss_time ); std :: cout << \"hobotcv save rate:\" << save_rate << std :: endl ; analyse_result ( dst , gaussian_tof , \"GaussianBlur\" ); std :: cout << \"-------------------------\" << std :: endl ; std :: cout << \"\" << std :: endl ; } ret = HobotCVGaussianBlurDestroy ( handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurDestroy failed, error msg:%d \\n \" , ret ); return -1 ; } return 0 ; } 图像裁剪与缩放 再来看另外一个案例，图像的裁剪与缩放，比如这样一幅图片，我们尝试剪裁左上角的一小块图像出来，或者对裁剪的某一块图像放大来看看。 运行示例程序 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/hobot_cv/config/ . $ ros2 run hobot_cv example 代码解析 // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include \"include/hobotcv_imgproc.h\" #include \"include/utils.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/core/types.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/opencv.hpp\" #include <fstream> #include <string> #include <chrono> #include <iostream> void writeImg ( cv :: Mat & mat , std :: string imgfile ) { cv :: Mat img_bgr ; cv :: cvtColor ( mat , img_bgr , cv :: COLOR_YUV2BGR_NV12 ); cv :: imwrite ( imgfile , img_bgr ); } int main () { std :: string image_file = \"config/test.jpg\" ; cv :: Mat bgr_mat = cv :: imread ( image_file , cv :: IMREAD_COLOR ); auto src_height = bgr_mat . rows ; auto src_width = bgr_mat . cols ; cv :: Mat srcmat_nv12 ; BGRToNv12 ( bgr_mat , srcmat_nv12 ); auto dst_height = src_height / 2 ; auto dst_width = src_width / 2 ; cv :: Mat dstmat_nv12 ( dst_height * 3 / 2 , dst_width , CV_8UC1 ); auto before_resize = std :: chrono :: system_clock :: now (); auto ret = hobot_cv :: hobotcv_resize ( srcmat_nv12 , src_height , src_width , dstmat_nv12 , dst_height , dst_width ); auto after_resize = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_resize - before_resize ). count (); if ( 0 == ret ) { std :: cout << \"resize finish, time: \" << interval << \"ms\" << std :: endl ; } writeImg ( dstmat_nv12 , \"./resize.jpg\" ); auto before_crop = std :: chrono :: system_clock :: now (); auto cropmat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , 200 , 200 , cv :: Range ( 0 , 200 ), cv :: Range ( 0 , 200 )); auto after_crop = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_crop - before_crop ). count (); std :: cout << \"crop finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropmat , \"./crop.jpg\" ); auto before_cropResize = std :: chrono :: system_clock :: now (); auto cropResizemat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , src_height , src_width , cv :: Range ( 200 , 400 ), cv :: Range ( 200 , 400 )); auto after_cropResize = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_cropResize - before_cropResize ). count (); std :: cout << \"cropResize finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropResizemat , \"./cropResize.jpg\" ); return 0 ; }","text_tokens":["2021","先","duration","test","也","风格","率","如何","(",",","minmaxloc","一个","来看","软硬","400","通用","tros","5","algorithm","接口","左上角","inc","mixidx","int32","上","h","without","---------","效果","tof","2","+","images","该","_","进行","std","/","}","ms","代码","放大","c","视觉","消耗","而且","#","nv12","main","reproduced","float","used","be","blur","等","reserved","？","core","过","sample","ros2","对此","include","trade","1.0","mean"," ","gauss","in","这个","medianblur","hobotcvgaussianblurhandle","下","裁剪","了","混合","呢","一块","\"",";","source","滤波","maxidx","gaussianblur","steady","基础","cropmat",":","express","src","应用","double","s","disclosed","ret","copyright","m","iterator","库","实现","[","copied","加速","具体","算法","底层","initialize","resize","or","示例","倍","fstream","clock","对","utility","any","image","主要","-------------------------","int","string","n","endl","cost","bash","16uc1","writeimg","cropresize","++","secrets","更","图像处理","d","the","效率","maxvalue","-","microseconds","中","iostream","queue","相信","example","bgr","$","协同","来","畸变","优化","part","8uc1","setup","opencv","by","某","通用性",">","utils","png","芯片","系统","contains","帧","finish","cd","this","0","purpose","200","引擎","msg","y","cols","gaussian","算子","分别","yuv2bgr","作","opencv2","config","{","togetherros","cropresizemat","：","pk","hobot","sh","另外","一","owned","cls","i","opt","缩放","著名","软件","。","start","cv","起来","一小","hpp","if","程序","是","一幅","到","handle","可以","cout","range","information","param","开发","和","降低","analyse","width","time","after","types","imgcodecs","size","replicate","在","校正","变化","、","剪裁","rate","jpg","transmitted","bgrtonv12","rows","比如","灰度","horizon","有","较","material","大家","written","max","build","硬件","便于","系统资源","imgproc","permission","这样","work","void","before","flag","cp","lib","运行","保证","infe","尝试","]","way","dstmat","for","abs","all","x","out","使用","3","处理","与","chrono","出来","图像","color","return","imread","hobotcvgaussianblurprocess","min","hobotcvgaussianblurcreate","小块","interval","大量","再","mat","案例","sum","failed","confidential","或者","name","性能","都","%","=","地平线","图片","多倍","1","to","error","file","一下","提升","channel","iomanip","auto","软硬件","通过","border","我们","minvalue","crop","no","diff","编程","不过","左上",".","听","资源","height","now","is",")","system","frame1","甚至","机器","milliseconds","type","方法","集成","dst","imwrite","做到","为了","and","\\","output","robotics","解析","&","常用","scalar","上角","旋转","cvtcolor","库中","map","cast","一小块","channels","很多","point","printf","hobotcv","result","这么","imgfile","t","filter","地平","r","，","hobotgaussianblurparam","各种","的","正面","end","hobotcvgaussianblurdestroy","高斯","count","兼容","cpp","*","rights","guss","run","may","对比","<","好","img","看看","例如","proprietary","save","测试","srcmat","of"],"title":"CV图像处理加速","title_tokens":["图像","加速","图像处理","cv","处理"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#cv","text":"OpenCV是一个著名的机器视觉处理库，相信大家都有听过，这个库中有很多图像处理的基础算法，比如灰度变化、图像滤波等，不过这个库为了保证较好的通用性，主要通过软件实现各种算法，TogetherROS对此作了大量优化，我们一起来看看。","text_tokens":["保证","算法","togetherros","，","比如","是","灰度","图像处理","通过","的","各种","作","大量","等","有","较","大家","我们","为了","一","过","了","都","处理","不过","对此","著名","滤波","软件","库中","相信","图像","听","库","实现","。","通用","视觉","很多","变化","主要","优化","起来","好","机器","、","基础","opencv","看看","通用性","这个","一个"],"title":"CV图像加速处理","title_tokens":["图像","加速","cv","处理"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#togetherros","text":"TogetherROS系统中集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 效果这么好，具体该如何使用呢？","text_tokens":["togetherros","应用","hobot","风格","率","如何","性能","地平线","缩放","软件","多倍","软硬","库","实现","。","cv","接口","加速","提升","具体","底层","软硬件","上","通过","到","效果","我们","可以","2","开发","该","降低","编程","进行","倍","资源","在","视觉","消耗","校正","而且","甚至","、","方法","集成","更","做到","等","效率","？","硬件","便于","常用","系统资源","旋转","中","协同"," ","畸变","opencv","这么","运行","地平","，","芯片","系统","的","帧","高斯","了","混合","使用","3","呢","处理","兼容","与","滤波","图像","引擎","对比","好","算子","分别","例如","测试"],"title":"TogetherROS视觉加速","title_tokens":["视觉","加速","togetherros"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_1","text":"我们先来看下图像处理中常用的高斯滤波算法，OpenCV和hobotcv，正面PK一下，我们也看看在程序中如何使用hobotcv的图像处理加速算法。","text_tokens":["先","算法","，","图像处理","的","pk","也","我们","下","正面","高斯","如何","使用","和","常用","来看","处理","中","滤波","图像","。","在","一下","加速","看看","hobotcv","opencv","程序"],"title":"高斯滤波","title_tokens":["高斯","滤波"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_2","text":"$ cd /opt/tros/hobotcv_gaussian/sample $ ./build.sh $ cd output $ ./run.sh","text_tokens":["tros","gaussian","/","cd",".","build","hobotcv","output","sample","$","opt","sh","_","run"," "],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_3","text":"hobotcv_sample.cpp： // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include <algorithm> #include <chrono> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <utility> #include \"hobotcv_gaussian_blur.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" void analyse_result ( cv :: Mat & out_filter , cv :: Mat & cls_filter , std :: string flag_name ) { auto start_time = std :: chrono :: steady_clock :: now (); std :: cout << \"\" << std :: endl ; std :: cout << \"analyse_result start \" << std :: endl ; std :: cout << \"---------\" << flag_name << std :: endl ; std :: cout << \"out_filter type:\" << out_filter . type () << \",cols:\" << out_filter . cols << \",rows:\" << out_filter . rows << \",channel:\" << out_filter . channels () << std :: endl ; std :: cout << \"cls_filter type:\" << cls_filter . type () << \",cols:\" << cls_filter . cols << \",rows:\" << cls_filter . rows << \",channel:\" << cls_filter . channels () << std :: endl ; double minvalue , maxvalue ; cv :: Point mixIdx , maxIdx ; cv :: minMaxLoc ( out_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"out_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"out_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"out_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: minMaxLoc ( cls_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"cls_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"cls_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"cls_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: Mat mat_diff = cv :: abs ( out_filter - cls_filter ); cv :: Scalar sum_error = cv :: sum ( mat_diff >= 1 ); cv :: Scalar mean_error = cv :: sum ( mat_diff ) / ( mat_diff . rows * mat_diff . cols ); cv :: minMaxLoc ( mat_diff , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"\" << std :: endl ; std :: cout << \"diff diff diff\" << std :: endl ; std :: cout << \"mat_diff minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"mat_diff min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"mat_diff max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; std :: cout << \"\" << std :: endl ; std :: cout << \"error sum:\" << sum_error [ 0 ] << \",max:\" << maxvalue << \",mean_error:\" << mean_error [ 0 ] << std :: endl ; int time_used_ms_end = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: steady_clock :: now () - start_time ) . count (); std :: cout << \"analyse_result,time_used_ms_end:\" << time_used_ms_end << std :: endl ; std :: cout << \"analyse_result end \" << std :: endl ; std :: cout << \"\" << std :: endl ; } int main () { int32_t ret = -1 ; HobotGaussianBlurParam blur_param ; HOBOTCV_INITIALIZE_GAUSSIAN_BLUR_PARAM ( & blur_param ); HobotCVGaussianBlurHandle handle ; ret = HobotCVGaussianBlurCreate ( blur_param , & handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurCreate failed, error msg:%d \\n \" , ret ); return -1 ; } for ( int i = 0 ; i < 5 ; i ++ ) { std :: string m_tof_file_s = \"images/frame1_\" + std :: to_string ( i ) + \".png\" ; std :: cout << \"===================\" << std :: endl ; std :: cout << \"image name :\" << m_tof_file_s << std :: endl ; cv :: Mat src = cv :: imread ( m_tof_file_s , CV_16UC1 ); cv :: Mat dst ; cv :: medianBlur ( src , src , 3 ); auto start_time_infe = std :: chrono :: steady_clock :: now (); ret = HobotCVGaussianBlurProcess ( handle , & src , & dst ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurProcess failed, error msg:%d \\n \" , ret ); return -1 ; } int infe_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_infe ). count (); std :: cout << \"infe cost time:\" << infe_time << std :: endl ; auto start_time_gauss = std :: chrono :: steady_clock :: now (); cv :: Mat gaussian_tof ; cv :: GaussianBlur ( src , gaussian_tof , cv :: Size ( 3 , 3 ), 0 , 0 , cv :: BORDER_REPLICATE ); int guss_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_gauss ). count (); std :: cout << \"guss_time cost time:\" << guss_time << std :: endl ; float save_rate = float (( guss_time * 1.0 - infe_time * 1.0 ) / guss_time ); std :: cout << \"hobotcv save rate:\" << save_rate << std :: endl ; analyse_result ( dst , gaussian_tof , \"GaussianBlur\" ); std :: cout << \"-------------------------\" << std :: endl ; std :: cout << \"\" << std :: endl ; } ret = HobotCVGaussianBlurDestroy ( handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurDestroy failed, error msg:%d \\n \" , ret ); return -1 ; } return 0 ; }","text_tokens":["2021","opencv2","hobotcvgaussianblurcreate","{","express","src","double","duration","：","mat","sum","s","disclosed","failed","ret","confidential","copyright","owned","(",",","cls","name","i","m","minmaxloc","iterator","%","=","1","[","to","start","cv","copied","5","error","algorithm","file","min","hpp","if","channel","iomanip","inc","auto","mixidx","int32","h","without","initialize","---------","border","handle","tof","cout","information","or","param","minvalue","no","diff","+","images","analyse","_","std","/","}","fstream","time","clock",".","ms","imgcodecs","size","replicate","utility","any","c","is","now",")","image","#","-------------------------","frame1","int","main","rate","milliseconds","reproduced","string","type","n","transmitted","float","endl","cost","16uc1","used","be","rows","dst","++","secrets","blur","d","the","horizon","material","reserved","written","max","core","and","\\","sample","robotics","&","maxvalue","imgproc","-","scalar","microseconds","iostream","permission","queue","map","work","include","void","trade","1.0","mean"," ","cast","channels","gauss","flag","part","in","point","printf","hobotcv","by",">","result","t","medianblur","infe","filter","]","png","hobotcvgaussianblurhandle","hobotgaussianblurparam","way","contains","for","abs","all","end","hobotcvgaussianblurdestroy","this","x","0","out","3","count","purpose","\"",";","chrono","cpp","*","msg","maxidx","rights","y","cols","guss","gaussianblur","steady","gaussian","may","<","return","imread","proprietary",":","save","hobotcvgaussianblurprocess","of"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_4","text":"再来看另外一个案例，图像的裁剪与缩放，比如这样一幅图片，我们尝试剪裁左上角的一小块图像出来，或者对裁剪的某一块图像放大来看看。","text_tokens":["尝试","小块","，","比如","再","的","案例","一幅","我们","另外","裁剪","或者","来看","一块","上角","左上","与","缩放","图片","这样","出来","图像","对","。","放大","一小块","来","一小","左上角","剪裁","看看","某","一个"],"title":"图像裁剪与缩放","title_tokens":["图像","与","裁剪","缩放"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_5","text":"$ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/hobot_cv/config/ . $ ros2 run hobot_cv example","text_tokens":["config","r","hobot","opt","_","-","source","ros2","/",".","example","$"," ","cv","run","tros","setup","cp","lib","bash"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_6","text":"// Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include \"include/hobotcv_imgproc.h\" #include \"include/utils.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/core/types.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/opencv.hpp\" #include <fstream> #include <string> #include <chrono> #include <iostream> void writeImg ( cv :: Mat & mat , std :: string imgfile ) { cv :: Mat img_bgr ; cv :: cvtColor ( mat , img_bgr , cv :: COLOR_YUV2BGR_NV12 ); cv :: imwrite ( imgfile , img_bgr ); } int main () { std :: string image_file = \"config/test.jpg\" ; cv :: Mat bgr_mat = cv :: imread ( image_file , cv :: IMREAD_COLOR ); auto src_height = bgr_mat . rows ; auto src_width = bgr_mat . cols ; cv :: Mat srcmat_nv12 ; BGRToNv12 ( bgr_mat , srcmat_nv12 ); auto dst_height = src_height / 2 ; auto dst_width = src_width / 2 ; cv :: Mat dstmat_nv12 ( dst_height * 3 / 2 , dst_width , CV_8UC1 ); auto before_resize = std :: chrono :: system_clock :: now (); auto ret = hobot_cv :: hobotcv_resize ( srcmat_nv12 , src_height , src_width , dstmat_nv12 , dst_height , dst_width ); auto after_resize = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_resize - before_resize ). count (); if ( 0 == ret ) { std :: cout << \"resize finish, time: \" << interval << \"ms\" << std :: endl ; } writeImg ( dstmat_nv12 , \"./resize.jpg\" ); auto before_crop = std :: chrono :: system_clock :: now (); auto cropmat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , 200 , 200 , cv :: Range ( 0 , 200 ), cv :: Range ( 0 , 200 )); auto after_crop = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_crop - before_crop ). count (); std :: cout << \"crop finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropmat , \"./crop.jpg\" ); auto before_cropResize = std :: chrono :: system_clock :: now (); auto cropResizemat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , src_height , src_width , cv :: Range ( 200 , 400 ), cv :: Range ( 200 , 400 )); auto after_cropResize = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_cropResize - before_cropResize ). count (); std :: cout << \"cropResize finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropResizemat , \"./cropResize.jpg\" ); return 0 ; }","text_tokens":["2021","opencv2","config","{","interval","cropresizemat","express","src","duration","mat","test","hobot","disclosed","ret","confidential","copyright","owned","(",",","=","400","cv","copied","file","hpp","if","inc","auto","h","without","resize","cout","2","information","or","range","crop","no","_","std","/","width","}","fstream","clock","after",".","types","time","ms","imgcodecs","any","height","c","is","image",")","system","#","nv12","now","int","main","milliseconds","reproduced","jpg","string","transmitted","endl","bgrtonv12","used","be","writeimg","rows","dst","cropresize","secrets","imwrite","the","horizon","material","reserved","written","core","and","robotics","&","imgproc","-","cvtcolor","iostream","permission","work","include","void","before","trade","bgr"," ","cast","part","in","8uc1","hobotcv","opencv","by",">","utils","imgfile","way","contains","dstmat","for","all","finish","this","0","3","count","purpose","\"",";","chrono","200","color","*","rights","cols","may","<","return","yuv2bgr","imread","img","cropmat","proprietary",":","srcmat","of"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/","text":"模型推理框架 智能机器人与机器学习是紧密相连的，机器学习又可以分成数据采集、标注、训练、推理等环节，其中数据的训练需要消耗大量算力，适合在服务器或者云端进行，不过训练好的模型可是要部署到机器人端进行推理运算的，所以模型推理的效率如何，直接决定了机器人视觉处理的效率，这刚好是TogetherROS所擅长的地方。 Hobot DNN模型推理库 TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 hobot_dnn是在地平线X3开发板上利用BPU处理器实现AI推理功能，基于地平线EasyDNN和ROS2 Node进行二次开发，为应用开发提供更简单易用的模型集成开发接口，包括模型管理、基于模型描述的输入处理及结果解析，以及模型输出内存分配管理等功能。 关于hobot_dnn的使用逻辑流程如这张图所示，供大家参考，我们后续也会通过具体的案例解释代码的实现过程。 算法与应用库 在Hobot DNN模型推理库的基础上，地平线还提供了一套基于TogetherROS系统的AI算法包，称为BOXs，这样我们就不需要从零构建算法，基于这些标准而高效的算法，可以更关注应用层面的APP开发。 从这张图中我们可以看到，这套AI算法包中包含两大块，一个是基础算法，一个是应用算法。 基础算法中主要是图像分类、语义分割和目标检测这些常用的算法，应用层面就会基于这些算法和某些场景，动态实现更为复杂的人体识别、骨骼点识别、手势识别等具体的功能，这些模块就可以和机器人运功功能直接结合，节省了我们开发AI视觉部分的时间。 模型推理测试 这套模型推理和算法库的效果如何呢？ 我们先来体验一个TogetherROS系统自带的案例，识别这张图片中的人，以及每个人的骨骼关键点。 # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。config中为example使用的模型，回灌使用的本地图片 $ cp -r /opt/tros/lib/dnn_node_example/config/ . # 使用本地jpg格式图片通过同步模式进行回环预测，并存储渲染后的图片 $ ros2 launch dnn_node_example hobot_dnn_node_example_feedback.launch.py","text_tokens":["先","lib","config","togetherros","人工智能","采集","看到","大量","应用","这些","拷贝","案例","输入","出","hobot","也","张图","调教","或者","如何","部署","适合","后续","还","环节","不","opt","运功","充足","地平线","结果","图片","库","实现","又","。","时间","检测","部分","过程","地方","tros","直接","接口","刚好","这","识别","标准","二次开发","具体","构建","py","底层","算法","端","高效","上","是","基于","输出","通过","x3","分类","模块","节省","渲染","分成","到","人体","效果","我们","可以","场景","动态","本地","称为","开发","点","众多","人工","和","_","进行","实际","推理","示例","不过","/","node","简单","关于","目标","代码",".","智能","决定","文件","会","在","自带","描述","消耗","视觉","app","主要","#","易用","一套","要","机器","、","存储","jpg","路径","就","训练","配置文件","分割","bash","集成","运算","花费","其中","更","提供","安装","算力","层面","等","不用","参考","大家","效率","？","为","boxs","feedback","框架","体验","零","紧密","解析","标注","常用","擅长","easydnn","关键","-","预测","ros2","模型","中","每个","这样","保障","这套","包","内存","后","可是","example","$","以及"," ","开发者","机器人","逻辑","来","所以","环境","很多","并","处理器","流程","啦","系统集成","setup","launch","云端","cp","骨骼","所","服务器","人","中为","相连","包中","借助","服务","开发板","关注","运行","格式","地平","r","，","dnn","务器","关键点","芯片","系统","的","ai","利用","需要","bpu","解释","从","某些","回灌","更为","手势","复杂","同步","包含","了","二次","配置","使用","学习","管理","两大块","呢","source","处理","与","语义","如","模式","理器","回环","图像","包括","供","开源","引擎","结合","这张","所示","功能","数据","而","大块","好","很快","分配","基础","测试","及","一个"],"title":"模型推理框架","title_tokens":["模型","框架","推理"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_1","text":"智能机器人与机器学习是紧密相连的，机器学习又可以分成数据采集、标注、训练、推理等环节，其中数据的训练需要消耗大量算力，适合在服务器或者云端进行，不过训练好的模型可是要部署到机器人端进行推理运算的，所以模型推理的效率如何，直接决定了机器人视觉处理的效率，这刚好是TogetherROS所擅长的地方。","text_tokens":["运算","端","togetherros","其中","，","采集","务器","是","大量","的","算力","等","分成","需要","到","效率","可以","或者","如何","部署","紧密","了","适合","标注","学习","环节","擅长","进行","推理","不过","处理","与","模型","智能","可是","又","决定","。","机器人","数据","在","所以","消耗","视觉","地方","直接","好","刚好","这","要","机器","、","云端","所","服务器","训练","相连","服务"],"title":"模型推理框架","title_tokens":["模型","框架","推理"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#hobot-dnn","text":"TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 hobot_dnn是在地平线X3开发板上利用BPU处理器实现AI推理功能，基于地平线EasyDNN和ROS2 Node进行二次开发，为应用开发提供更简单易用的模型集成开发接口，包括模型管理、基于模型描述的输入处理及结果解析，以及模型输出内存分配管理等功能。 关于hobot_dnn的使用逻辑流程如这张图所示，供大家参考，我们后续也会通过具体的案例解释代码的实现过程。","text_tokens":["togetherros","人工智能","应用","案例","输入","hobot","也","张图","调教","部署","后续","充足","地平线","结果","库","实现","。","时间","过程","接口","这","二次开发","具体","底层","上","是","基于","输出","通过","x3","我们","可以","开发","众多","人工","和","_","实际","进行","推理","node","简单","关于","代码","智能","会","在","描述","易用","、","就","训练","集成","花费","更","提供","算力","等","不用","参考","大家","为","解析","easydnn","ros2","模型","中","保障","这套","内存","以及"," ","开发者","逻辑","很多","处理器","流程","啦","系统集成","借助","开发板","地平","dnn","，","芯片","系统","的","ai","利用","bpu","解释","了","二次","使用","管理","处理","如","理器","包括","供","开源","引擎","所示","功能","数据","很快","分配","及"],"title":"Hobot DNN模型推理库","title_tokens":["模型","dnn","库"," ","hobot","推理"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_2","text":"在Hobot DNN模型推理库的基础上，地平线还提供了一套基于TogetherROS系统的AI算法包，称为BOXs，这样我们就不需要从零构建算法，基于这些标准而高效的算法，可以更关注应用层面的APP开发。 从这张图中我们可以看到，这套AI算法包中包含两大块，一个是基础算法，一个是应用算法。 基础算法中主要是图像分类、语义分割和目标检测这些常用的算法，应用层面就会基于这些算法和某些场景，动态实现更为复杂的人体识别、骨骼点识别、手势识别等具体的功能，这些模块就可以和机器人运功功能直接结合，节省了我们开发AI视觉部分的时间。","text_tokens":["togetherros","看到","应用","这些","hobot","张图","还","不","运功","地平线","库","实现","。","时间","检测","部分","识别","直接","这","标准","具体","构建","算法","高效","上","是","基于","模块","节省","分类","人体","我们","可以","场景","动态","称为","开发","点","和","推理","目标","会","在","主要","app","视觉","一套","机器","、","就","分割","更","提供","层面","等","boxs","零","常用","模型","中","这样","这套","包"," ","机器人","骨骼","包中","关注","地平","dnn","，","系统","的","ai","需要","从","某些","更为","手势","复杂","包含","了","两大块","语义","图像","结合","功能","而","大块","基础","一个"],"title":"算法与应用库","title_tokens":["与","算法","库","应用"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_3","text":"这套模型推理和算法库的效果如何呢？ 我们先来体验一个TogetherROS系统自带的案例，识别这张图片中的人，以及每个人的骨骼关键点。 # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。config中为example使用的模型，回灌使用的本地图片 $ cp -r /opt/tros/lib/dnn_node_example/config/ . # 使用本地jpg格式图片通过同步模式进行回环预测，并存储渲染后的图片 $ ros2 launch dnn_node_example hobot_dnn_node_example_feedback.launch.py","text_tokens":["先","config","togetherros","拷贝","案例","出","hobot","如何","opt","图片","库","。","tros","识别","py","算法","渲染","通过","效果","我们","本地","和","示例","_","进行","推理","/","node",".","文件","自带","#","存储","jpg","路径","配置文件","bash","安装","？","feedback","体验","关键","-","预测","ros2","模型","中","每个","这套","后","example","$","以及"," ","来","并","环境","setup","launch","cp","骨骼","lib","人","中为","运行","格式","r","，","dnn","关键点","系统","的","需要","从","回灌","同步","配置","使用","呢","source","模式","回环","这张","一个"],"title":"模型推理测试","title_tokens":["测试","模型","推理"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/","text":"图像物体分类 接下来我们继续学习基于Hobot CNN模型推理库之上的视觉应用。 机器人要感知周边环境，那就得确定看到的图像中都有什么，比如地上有一只猫，旁边有一个桌子之类的，这个猫和桌子就是具体的物体分类啦。 图像分类原理 如果是人来识别一只猫的话，似乎再简单不过了，无论黑猫、白猫还是花猫，我们一眼就可以看出来。 不过这件事对于机器人来讲可没有那么简单，为了能够让机器准确识别一只猫，无数学者可是研究了几十年啊，虽然还赶不上人类的智慧，但是这件事已经没有那么遥不可及了。 比如说我们要让机器识别图像中有一只猫，我们就得先教会机器什么是猫，对此我们就得把各种各样猫的照片给计算机看，目的就是让机器学习，看的越多，识别的也就越准。 我们那里找这么多猫的图片呢？ 大家可能听说过一个著名的视觉对象数据库——ImageNet，里边有超过1400万张标注过的图像，2万多个类别，我们就可以利用这个庞大的数据库，找到很多猫的照片。 然后就搭建神经网络，把这些数据放进去训练了，调教出一套比较好的识别模型。 接下来把这套模型部署到机器人上，之后每当有一幅图像收到之后，就传到这个模型中，也就是模型推理，推理的结果就是类似这样的数据，概率最大的，也就是机器识别到的物体啦。 关于机器学习，理论众多，大家可以学习专门的课程，我们课上还是重点讲解在TogetherROS中的实现方法。 编程开发方法 我们来看这样一张图片，大家很快就可以发现这是一只斑马。 运行示例程序 我们如何用机器来识别它呢，大家先来运行这个案例，这是基于ImageNet数据集训练的模型，可以识别1000种常见的物体，我们看一下效果如何？ $ cd /app/ai_inference/01_basic_sample/ $ sudo python3 ./test_mobilenetv1.py 代码解析 test_mobilenetv1.py： #!/usr/bin/env python3 from hobot_dnn import pyeasy_dnn as dnn import numpy as np import cv2 def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_BGR2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] if __name__ == '__main__' : # test classification result models = dnn . load ( '../models/mobilenetv1_224x224_nv12.bin' ) # test input and output properties print ( \"=\" * 10 , \"inputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) print ( \"inputs[0] name is:\" , models [ 0 ] . inputs [ 0 ] . name ) print ( \"=\" * 10 , \"outputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . outputs [ 0 ] . properties ) print ( \"outputs[0] name is:\" , models [ 0 ] . outputs [ 0 ] . name ) # 打开图片 img_file = cv2 . imread ( './zebra_cls.jpg' ) # 把图片缩放到模型的输入尺寸 # 获取算法模型的输入tensor 的尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) des_dim = ( w , h ) resized_data = cv2 . resize ( img_file , des_dim , interpolation = cv2 . INTER_AREA ) nv12_data = bgr2nv12_opencv ( resized_data ) # 模型推理 outputs = models [ 0 ] . forward ( nv12_data ) print ( \"=\" * 10 , \"Get output[0] numpy data\" , \"=\" * 10 ) print ( \"output[0] buffer numpy info: \" ) print ( \"shape: \" , outputs [ 0 ] . buffer . shape ) print ( \"dtype: \" , outputs [ 0 ] . buffer . dtype ) # print(\"First 10 results:\", outputs[0].buffer[0][:10]) # 从输出结果中得到值最大的那个序号，比如 zebra 就是第 340 个值，应该大于 0.99 print ( \"=\" * 10 , \"Classification result\" , \"=\" * 10 ) assert np . argmax ( outputs [ 0 ] . buffer ) == 340 # 输出类别序号和预测概率值 print ( \"cls id: %d Confidence: %f \" % ( np . argmax ( outputs [ 0 ] . buffer ), outputs [ 0 ] . buffer [ 0 ][ np . argmax ( outputs [ 0 ] . buffer )])) Mobilenetv2物体分类 用图片进行识别不太过瘾，毕竟是静态的图像，没问题，TogetherROS中还提供了实时物体分类的案例，我们继续来体验一下。 为了实时显示视觉识别的效果，这里我们需要启动TogetherROS中的一个web服务器，它会把视觉识别的实时效果，通过网络传输出来，我们直接在浏览器中就可以看到结果啦。也是便于我们开发调试的一个重要工具。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . 运行例程： $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/mobilenetv2workconfig.json image_width: = 480 image_height: = 272 在浏览器中登录192.168.1.10，就可以看到分类效果啦：","text_tokens":["sbin","下来","先","学者","算机","传到","yuv420p","神经网","test","也","问题","据库","如何","(",",","似乎","i420","来看","area","dtype","results","1.10","nchw","p","tros","forward","&&","chmod","事","这里","传输","上","webserver","h","基于","分类","白猫","效果","打开","2","一只","准确","概率","那个","众多","+","_","就可以看","进行","里边","/","没有","简单","代码","来讲","目的","花猫","无数","视觉","尺寸","#","nv12","一套","main","训练","可能","神经","看","集","之上","类别","物体","？","进去","224x224","过","sample","interpolation","bin","resized","预测","ros2","对此","这是","inputs","可是"," ","得","几十","确定","虽然","hw","服务器","inter","这个","务器","缩","else","类似","10","不太","了","cnn","呢","\"","source","最大","专门","什么","classification","basic","—","很快","重点","bgr2yuv",":","种","浏览器","应用","340","shape","01","获取","感知","毕竟","旁边","benchmark","继续","runtime","库","找到","实现","[","越","序号","env","zeros","已经","没","直接","具体","计算机","收到","py","算法","黑猫","imagenet","找","输出","它","对象","zebra","resize","如果","那里","值","示例","推理","models","关于","接下","image","des","登录","usr","mobilenetv2workconfig","bash","d","那么","input","标注","-","然后","中","几十年","地上","np","大于","这套","example","$","机器人","周边","越准","对于","来","share","web","setup","properties","opencv","不可","dnn","从","啊","理论","cd","0","pyeasy","学习","info","y","放到","就是","config","..","togetherros","调试","这些","：","hobot","调教","个值","cls","opt","load","著名","结果","import","人类","。","f","过瘾","def","人来","每当","把","十年","if","但是","程序","数据库","是","print","一幅","到","pro","可以","开发","480","和","sudo","width","讲解","node","json","as","多猫","神经网络","在","__","app","mobilenetv1","id","bgr2nv12","静态","、","jpg","实时","例程","智慧","layout","比如","启动","有","大家","like","'","万多","reshape","便于","搭建","赶不上","模型","桌子","1400","这样","给","啦","get","用","cp","研究","lib","运行","]","斑马","之后","ai","需要","的话","websocket","x","272","工具","接下来","3","uv","assert","出来","放进","图像","color","万多个","return","imread","first","tensor","transpose","看到","w","再","案例","输入","出","教会","部署","name","outputs","还","都","%","1000","=","浏览","那","图片","猫","1","识别","file","可","一下","192.168","无论","各种各样","还是","得到","通过","庞大","我们","之类","多","inference","planar","编程","0.99","各样","不过","比如说",".","听说","中有","height","is",")","多个","它会","要","机器","type","发现","就","方法","常见","提供","mobilenetv2","比较","为了","体验","一眼","and","output","解析","放进去","显示","周边环境","cvtcolor","重要","计算","buffer","让","课程","环境","很多","原理","能够","packed","python3","一张","launch","result","这么","服务","超过","r","，","argmax","各种","的","利用","遥不可及","第","data","from","网络","confidence","照片","课上","*","万张","这件","numpy","应该","数据","4","nginx","dim","好","webservice","cv2","!","img","开发方法","一个"],"title":"图像物体分类","title_tokens":["图像","分类","物体"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_1","text":"接下来我们继续学习基于Hobot CNN模型推理库之上的视觉应用。 机器人要感知周边环境，那就得确定看到的图像中都有什么，比如地上有一只猫，旁边有一个桌子之类的，这个猫和桌子就是具体的物体分类啦。","text_tokens":["下来","，","看到","比如","基于","之上","应用","的","分类","物体","有","hobot","我们","感知","一只","之类","接下来","cnn","学习","就是","和","旁边","推理","都","继续","模型","周边环境","那","中","地上","图像","什么","猫","桌子","库","。"," ","得","机器人","周边","接下","视觉","环境","啦","要","机器","确定","具体","就","这个","一个"],"title":"图像物体分类","title_tokens":["图像","分类","物体"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_2","text":"如果是人来识别一只猫的话，似乎再简单不过了，无论黑猫、白猫还是花猫，我们一眼就可以看出来。 不过这件事对于机器人来讲可没有那么简单，为了能够让机器准确识别一只猫，无数学者可是研究了几十年啊，虽然还赶不上人类的智慧，但是这件事已经没有那么遥不可及了。 比如说我们要让机器识别图像中有一只猫，我们就得先教会机器什么是猫，对此我们就得把各种各样猫的照片给计算机看，目的就是让机器学习，看的越多，识别的也就越准。 我们那里找这么多猫的图片呢？ 大家可能听说过一个著名的视觉对象数据库——ImageNet，里边有超过1400万张标注过的图像，2万多个类别，我们就可以利用这个庞大的数据库，找到很多猫的照片。 然后就搭建神经网络，把这些数据放进去训练了，调教出一套比较好的识别模型。 接下来把这套模型部署到机器人上，之后每当有一幅图像收到之后，就传到这个模型中，也就是模型推理，推理的结果就是类似这样的数据，概率最大的，也就是机器识别到的物体啦。 关于机器学习，理论众多，大家可以学习专门的课程，我们课上还是重点讲解在TogetherROS中的实现方法。","text_tokens":["先","下来","学者","togetherros","算机","传到","再","这些","神经网","出","也","教会","据库","调教","部署","似乎","还","著名","图片","结果","猫","人类","找到","实现","越","。","人来","每当","识别","已经","可","把","十年","但是","计算机","事","收到","无论","黑猫","数据库","上","imagenet","找","各种各样","是","还是","对象","一幅","白猫","到","庞大","如果","我们","可以","那里","2","一只","准确","多","概率","众多","就可以看","各样","推理","不过","里边","没有","简单","比如说","讲解","关于","听说","中有","来讲","多猫","神经网络","目的","花猫","在","无数","视觉","接下","多个","一套","要","机器","、","就","训练","可能","方法","神经","看","智慧","比如","类别","物体","有","大家","比较","那么","？","进去","为了","万多","一眼","过","搭建","标注","赶不上","放进去","然后","对此","模型","几十年","中","1400","这样","这套","计算","可是","让"," ","得","机器人","课程","给","对于","越准","很多","能够","啦","几十","虽然","研究","这么","这个","超过","，","不可","各种","之后","的","利用","啊","遥不可及","理论","类似","的话","网络","了","接下来","学习","照片","呢","最大","课上","出来","专门","放进","图像","什么","万张","万多个","这件","数据","—","好","重点","就是","一个"],"title":"图像分类原理","title_tokens":["图像","原理","分类"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_3","text":"我们来看这样一张图片，大家很快就可以发现这是一只斑马。","text_tokens":["可以","这是","图片","这样","一只","很快","，","一张","斑马","。","发现","就","来看","大家","我们"],"title":"编程开发方法","title_tokens":["方法","编程","开发","开发方法"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_4","text":"我们如何用机器来识别它呢，大家先来运行这个案例，这是基于ImageNet数据集训练的模型，可以识别1000种常见的物体，我们看一下效果如何？ $ cd /app/ai_inference/01_basic_sample/ $ sudo python3 ./test_mobilenetv1.py","text_tokens":["先","种","看","集","，","imagenet","常见","基于","它","案例","的","物体","ai","test","01","大家","效果","我们","？","可以","cd","如何","inference","sample","呢","_","sudo","1000","模型","这是","/",".","py","$"," ","basic","数据","来","app","mobilenetv1","识别","一下","python3","机器","用","训练","这个","运行"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_5","text":"test_mobilenetv1.py： #!/usr/bin/env python3 from hobot_dnn import pyeasy_dnn as dnn import numpy as np import cv2 def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_BGR2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] if __name__ == '__main__' : # test classification result models = dnn . load ( '../models/mobilenetv1_224x224_nv12.bin' ) # test input and output properties print ( \"=\" * 10 , \"inputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) print ( \"inputs[0] name is:\" , models [ 0 ] . inputs [ 0 ] . name ) print ( \"=\" * 10 , \"outputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . outputs [ 0 ] . properties ) print ( \"outputs[0] name is:\" , models [ 0 ] . outputs [ 0 ] . name ) # 打开图片 img_file = cv2 . imread ( './zebra_cls.jpg' ) # 把图片缩放到模型的输入尺寸 # 获取算法模型的输入tensor 的尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) des_dim = ( w , h ) resized_data = cv2 . resize ( img_file , des_dim , interpolation = cv2 . INTER_AREA ) nv12_data = bgr2nv12_opencv ( resized_data ) # 模型推理 outputs = models [ 0 ] . forward ( nv12_data ) print ( \"=\" * 10 , \"Get output[0] numpy data\" , \"=\" * 10 ) print ( \"output[0] buffer numpy info: \" ) print ( \"shape: \" , outputs [ 0 ] . buffer . shape ) print ( \"dtype: \" , outputs [ 0 ] . buffer . dtype ) # print(\"First 10 results:\", outputs[0].buffer[0][:10]) # 从输出结果中得到值最大的那个序号，比如 zebra 就是第 340 个值，应该大于 0.99 print ( \"=\" * 10 , \"Classification result\" , \"=\" * 10 ) assert np . argmax ( outputs [ 0 ] . buffer ) == 340 # 输出类别序号和预测概率值 print ( \"cls id: %d Confidence: %f \" % ( np . argmax ( outputs [ 0 ] . buffer ), outputs [ 0 ] . buffer [ 0 ][ np . argmax ( outputs [ 0 ] . buffer )]))","text_tokens":["..","transpose","yuv420p","w","：","340","shape","test","输入","hobot","获取","个值","(",",","name","cls","i420","outputs","area","load","=","%","dtype","results","结果","图片","import","1","[","序号","f","nchw","def","env","zeros","file","把","forward","if","py","算法","h","print","输出","得到","zebra","resize","pro","打开","2","概率","那个","值","和","_","planar","0.99","推理","models","/","width",".","as","height","image","__",")","mobilenetv1","#","nv12","is","尺寸","des","id","bgr2nv12","main","jpg","type","usr","layout","比如","类别","d","like","224x224","'","reshape","and","input","output","interpolation","bin","resized","预测","cvtcolor","模型","中","np","大于","inputs","buffer"," ","packed","python3","get","properties","opencv","hw","result","inter","]","dnn","，","缩","argmax","的","else","从","第","data","10","from","0","pyeasy","confidence","info","3","uv","\"","最大","assert","color","*","classification","y","numpy","应该","4","dim","return","cv2","imread","!","img","bgr2yuv","first","tensor","放到",":","就是"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#mobilenetv2","text":"用图片进行识别不太过瘾，毕竟是静态的图像，没问题，TogetherROS中还提供了实时物体分类的案例，我们继续来体验一下。 为了实时显示视觉识别的效果，这里我们需要启动TogetherROS中的一个web服务器，它会把视觉识别的实时效果，通过网络传输出来，我们直接在浏览器中就可以看到结果啦。也是便于我们开发调试的一个重要工具。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . 运行例程： $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/mobilenetv2workconfig.json image_width: = 480 image_height: = 272 在浏览器中登录192.168.1.10，就可以看到分类效果啦：","text_tokens":["sbin","config","togetherros","浏览器","看到","调试","：","案例","hobot","也","问题","毕竟","还","opt","benchmark","=","继续","浏览","图片","结果","runtime","1.10","。","过瘾","p","tros","识别","没","直接","一下","把","&&","file","chmod","192.168","py","这里","传输","webserver","是","通过","分类","效果","我们","可以","开发","480","+","_","进行","/","width","node",".","json","height","在","image","视觉","#","它会","静态","登录","就","实时","mobilenetv2workconfig","bash","例程","启动","提供","物体","为了","体验","便于","-","显示","ros2","中","重要","example","$"," ","来","啦","share","web","setup","用","launch","cp","lib","服务器","服务","运行","r","，","dnn","务器","的","需要","不太","cd","websocket","x","272","网络","了","工具","source","出来","图像","nginx","webservice",":","一个"],"title":"Mobilenetv2物体分类","title_tokens":["mobilenetv2","分类","物体"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/","text":"动态目标检测 图像物体分类重在分析图像中存在的物体是什么，便于机器理解看到的环境信息，另外一种场景，机器不仅要识别某一物体，还要知道这个物体所在的位置，当物体在运动时，更要快速连续的跟踪，这就是目标检测，重在分析识别到物体在图像中的位置。 目标检测原理 假设我们要识别图像中这只狗的位置，以最为常用的YOLO算法为例，它会运用单个卷积神经网络(CNN) ，将图像分成网格，并预测每个网格的对象概率和边界框。 比如，对于这个图像，Yolo的CNN网络将输入的图片分割成7x7的网格，然后每个网格负责去检测那些中心点落在该格子内的目标，比如，小狗这个目标的中心点在左下角的网格中，那该网格就负责预测狗这个对象。 每个网格中将有多个边界框，在训练时，我们希望每个对象只有一个边界框，比如最终只有一个边界框把这只狗包起来。因此，我们根据哪个边界框与之前标注的重叠度最高，预测对象的位置和概率。 最终包围对象的边界框，就是识别的结果，使用四个描述符进行说明： 边界框的中心位置 边界框的高度 边界框的宽度 识别到对象所属的类 这样就完成了对目标的实时检测，拿到目标的信息之后，就可以进行后续的机器人行为控制了。 我们对目标检测系统运行速度的要求一般都比较高，可以实时处理视频流，比如车辆行驶的动态监测、自然环境中的目标识别，有着非常广泛的应用价值。 回到TogetherROS和旭日X3派的开发板，我们来看下这套软硬件结合的目标检测系统，效率如何。 MIPI相机目标检测 接下来，我们要利用MIPI相机，动态识别图像中各种各样的物体以及他们所在的位置，推理过程使用的是基于COCO数据集训练的80个类别，也就是可以识别80种常用的物体位置。 运行例程 $ cd /app/ai_inference/03_mipi_camera_sample/ $ python3 ./mipi_camera.py 代码解析 mipi_camera.py： #!/usr/bin/env python3 import numpy as np import cv2 import colorsys # Camera API libs from hobot_vio import libsrcampy as srcampy from hobot_dnn import pyeasy_dnn as dnn # detection model class names def get_classes (): return np . array ([ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" , \"bus\" , \"train\" , \"truck\" , \"boat\" , \"traffic light\" , \"fire hydrant\" , \"stop sign\" , \"parking meter\" , \"bench\" , \"bird\" , \"cat\" , \"dog\" , \"horse\" , \"sheep\" , \"cow\" , \"elephant\" , \"bear\" , \"zebra\" , \"giraffe\" , \"backpack\" , \"umbrella\" , \"handbag\" , \"tie\" , \"suitcase\" , \"frisbee\" , \"skis\" , \"snowboard\" , \"sports ball\" , \"kite\" , \"baseball bat\" , \"baseball glove\" , \"skateboard\" , \"surfboard\" , \"tennis racket\" , \"bottle\" , \"wine glass\" , \"cup\" , \"fork\" , \"knife\" , \"spoon\" , \"bowl\" , \"banana\" , \"apple\" , \"sandwich\" , \"orange\" , \"broccoli\" , \"carrot\" , \"hot dog\" , \"pizza\" , \"donut\" , \"cake\" , \"chair\" , \"couch\" , \"potted plant\" , \"bed\" , \"dining table\" , \"toilet\" , \"tv\" , \"laptop\" , \"mouse\" , \"remote\" , \"keyboard\" , \"cell phone\" , \"microwave\" , \"oven\" , \"toaster\" , \"sink\" , \"refrigerator\" , \"book\" , \"clock\" , \"vase\" , \"scissors\" , \"teddy bear\" , \"hair drier\" , \"toothbrush\" ]) def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_RGB2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] def postprocess ( model_output , model_hw_shape , origin_image = None , origin_img_shape = None , score_threshold = 0.5 , nms_threshold = 0.6 , dump_image = False ): input_height = model_hw_shape [ 0 ] input_width = model_hw_shape [ 1 ] if origin_image is not None : origin_image_shape = origin_image . shape [ 0 : 2 ] else : origin_image_shape = origin_img_shape prediction_bbox = decode ( outputs = model_output , score_threshold = score_threshold , origin_shape = origin_image_shape , input_size = 512 ) prediction_bbox = nms ( prediction_bbox , iou_threshold = nms_threshold ) prediction_bbox = np . array ( prediction_bbox ) topk = min ( prediction_bbox . shape [ 0 ], 1000 ) if topk != 0 : idx = np . argpartition ( prediction_bbox [ ... , 4 ], - topk )[ - topk :] prediction_bbox = prediction_bbox [ idx ] if dump_image and origin_image is not None : draw_bboxs ( origin_image , prediction_bbox ) return prediction_bbox def draw_bboxs ( image , bboxes , gt_classes_index = None , classes = get_classes ()): \"\"\"draw the bboxes in the original image \"\"\" num_classes = len ( classes ) image_h , image_w , channel = image . shape hsv_tuples = [( 1.0 * x / num_classes , 1. , 1. ) for x in range ( num_classes )] colors = list ( map ( lambda x : colorsys . hsv_to_rgb ( * x ), hsv_tuples )) colors = list ( map ( lambda x : ( int ( x [ 0 ] * 255 ), int ( x [ 1 ] * 255 ), int ( x [ 2 ] * 255 )), colors )) fontScale = 0.5 bbox_thick = int ( 0.6 * ( image_h + image_w ) / 600 ) for i , bbox in enumerate ( bboxes ): coor = np . array ( bbox [: 4 ], dtype = np . int32 ) if gt_classes_index == None : class_index = int ( bbox [ 5 ]) score = bbox [ 4 ] else : class_index = gt_classes_index [ i ] score = 1 bbox_color = colors [ class_index ] c1 , c2 = ( coor [ 0 ], coor [ 1 ]), ( coor [ 2 ], coor [ 3 ]) cv2 . rectangle ( image , c1 , c2 , bbox_color , bbox_thick ) classes_name = classes [ class_index ] bbox_mess = ' %s : %.2f ' % ( classes_name , score ) t_size = cv2 . getTextSize ( bbox_mess , 0 , fontScale , thickness = bbox_thick // 2 )[ 0 ] cv2 . rectangle ( image , c1 , ( c1 [ 0 ] + t_size [ 0 ], c1 [ 1 ] - t_size [ 1 ] - 3 ), bbox_color , - 1 ) cv2 . putText ( image , bbox_mess , ( c1 [ 0 ], c1 [ 1 ] - 2 ), cv2 . FONT_HERSHEY_SIMPLEX , fontScale , ( 0 , 0 , 0 ), bbox_thick // 2 , lineType = cv2 . LINE_AA ) print ( \" {} is in the picture with confidence: {:.4f} , bbox: {} \" . format ( classes_name , score , coor )) # cv2.imwrite(\"demo.jpg\", image) return image def decode ( outputs , score_threshold , origin_shape , input_size = 512 ): def _distance2bbox ( points , distance ): x1 = points [ ... , 0 ] - distance [ ... , 0 ] y1 = points [ ... , 1 ] - distance [ ... , 1 ] x2 = points [ ... , 0 ] + distance [ ... , 2 ] y2 = points [ ... , 1 ] + distance [ ... , 3 ] return np . stack ([ x1 , y1 , x2 , y2 ], - 1 ) def _scores ( cls , ce ): cls = 1 / ( 1 + np . exp ( - cls )) ce = 1 / ( 1 + np . exp ( - ce )) return np . sqrt ( ce * cls ) def _bbox ( bbox , stride , origin_shape , input_size ): h , w = bbox . shape [ 1 : 3 ] yv , xv = np . meshgrid ( np . arange ( h ), np . arange ( w )) xy = ( np . stack (( yv , xv ), 2 ) + 0.5 ) * stride bbox = _distance2bbox ( xy , bbox ) # opencv read, shape[1] is w, shape[0] is h scale_w = origin_shape [ 1 ] / input_size scale_h = origin_shape [ 0 ] / input_size scale = max ( origin_shape [ 0 ], origin_shape [ 1 ]) / input_size # origin img is pad resized #bbox = bbox * scale # origin img is resized bbox = bbox * [ scale_w , scale_h , scale_w , scale_h ] return bbox bboxes = list () strides = [ 8 , 16 , 32 , 64 , 128 ] for i in range ( len ( strides )): cls = outputs [ i ] . buffer bbox = outputs [ i + 5 ] . buffer ce = outputs [ i + 10 ] . buffer scores = _scores ( cls , ce ) classes = np . argmax ( scores , axis =- 1 ) classes = np . reshape ( classes , [ - 1 , 1 ]) max_score = np . max ( scores , axis =- 1 ) max_score = np . reshape ( max_score , [ - 1 , 1 ]) bbox = _bbox ( bbox , strides [ i ], origin_shape , input_size ) bbox = np . reshape ( bbox , [ - 1 , 4 ]) pred_bbox = np . concatenate ([ bbox , max_score , classes ], axis = 1 ) index = pred_bbox [ ... , 4 ] > score_threshold pred_bbox = pred_bbox [ index ] bboxes . append ( pred_bbox ) return np . concatenate ( bboxes ) def nms ( bboxes , iou_threshold , sigma = 0.3 , method = 'nms' ): def bboxes_iou ( boxes1 , boxes2 ): boxes1 = np . array ( boxes1 ) boxes2 = np . array ( boxes2 ) boxes1_area = ( boxes1 [ ... , 2 ] - boxes1 [ ... , 0 ]) * \\ ( boxes1 [ ... , 3 ] - boxes1 [ ... , 1 ]) boxes2_area = ( boxes2 [ ... , 2 ] - boxes2 [ ... , 0 ]) * \\ ( boxes2 [ ... , 3 ] - boxes2 [ ... , 1 ]) left_up = np . maximum ( boxes1 [ ... , : 2 ], boxes2 [ ... , : 2 ]) right_down = np . minimum ( boxes1 [ ... , 2 :], boxes2 [ ... , 2 :]) inter_section = np . maximum ( right_down - left_up , 0.0 ) inter_area = inter_section [ ... , 0 ] * inter_section [ ... , 1 ] union_area = boxes1_area + boxes2_area - inter_area ious = np . maximum ( 1.0 * inter_area / union_area , np . finfo ( np . float32 ) . eps ) return ious classes_in_img = list ( set ( bboxes [:, 5 ])) best_bboxes = [] for cls in classes_in_img : cls_mask = ( bboxes [:, 5 ] == cls ) cls_bboxes = bboxes [ cls_mask ] while len ( cls_bboxes ) > 0 : max_ind = np . argmax ( cls_bboxes [:, 4 ]) best_bbox = cls_bboxes [ max_ind ] best_bboxes . append ( best_bbox ) cls_bboxes = np . concatenate ( [ cls_bboxes [: max_ind ], cls_bboxes [ max_ind + 1 :]]) iou = bboxes_iou ( best_bbox [ np . newaxis , : 4 ], cls_bboxes [:, : 4 ]) weight = np . ones (( len ( iou ),), dtype = np . float32 ) assert method in [ 'nms' , 'soft-nms' ] if method == 'nms' : iou_mask = iou > iou_threshold weight [ iou_mask ] = 0.0 if method == 'soft-nms' : weight = np . exp ( - ( 1.0 * iou ** 2 / sigma )) cls_bboxes [:, 4 ] = cls_bboxes [:, 4 ] * weight score_mask = cls_bboxes [:, 4 ] > 0. cls_bboxes = cls_bboxes [ score_mask ] return best_bboxes def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) if __name__ == '__main__' : models = dnn . load ( '../models/fcos_512x512_nv12.bin' ) # 打印输入 tensor 的属性 print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) # 打印输出 tensor 的属性 print ( len ( models [ 0 ] . outputs )) for output in models [ 0 ] . outputs : print_properties ( output . properties ) # 获取 Camera 句柄 cam = srcampy . Camera () # 打开 f37 摄像头，并且把输出突出缩小成算法模型的输入尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) # 打开 F37, 初始化视频 pipeline 0 ，设置帧率30fps，缩放图像为 512 x 512 cam . open_cam ( 0 , 1 , 30 , w , h ) # Get HDMI display object disp = srcampy . Display () # For the meaning of parameters, please refer to the relevant documents of HDMI display disp . display ( 0 , 1920 , 1080 ) input_shape = ( h , w ) while True : # 从相机获取分辨率为 512x512 的nv12格式的图像数据， 参数 2 代表从硬件模块IPU中获取 img = cam . get_img ( 2 , 512 , 512 ) # 把图像数据转成 numpy 数据类型 img = np . frombuffer ( img , dtype = np . uint8 ) # 模型推理 outputs = models [ 0 ] . forward ( img ) # 对算法结果进行过滤，去掉执行度低的检测框，计算检测框的交并比去除冗余框，把检测框的坐标还原到原图位置上 prediction_bbox = postprocess ( outputs , input_shape , origin_img_shape = ( 1080 , 1920 )) # 从新获取一张图像，大小缩放成与显示器的分辨率一样的 1920 x 1080, 并且转换成 bgr格式，方便进行绘图操作 origin_image = cam . get_img ( 2 , 1920 , 1080 ) origin_nv12 = np . frombuffer ( origin_image , dtype = np . uint8 ) . reshape ( 1620 , 1920 ) origin_bgr = cv2 . cvtColor ( origin_nv12 , cv2 . COLOR_YUV420SP2BGR ) # 把算法运行后得到的物体检测框绘制到图像上 box_bgr = draw_bboxs ( origin_bgr , prediction_bbox ) # X3 的HDMI输出模块的输入图像格式需要是NV12的，所以需要先把bgr格式转成NV12 box_nv12 = bgr2nv12_opencv ( box_bgr ) # 把 NV12 格式的图像输出给显示器 disp . set_img ( box_nv12 . tobytes ()) cam . close_cam () USB相机目标检测 如果大家手上没有MIPI接口的相机，使用USB相机也可以实现同样的功能。 运行例程 $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 动态目标检测 大家如果没有HDMI显示器的话，也没有问题，刚才的例程，也可以这样来运行，我们通过统一网络环境中的浏览器就可以动态看到结果啦。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/fcosworkconfig.json image_width: = 480 image_height: = 272","text_tokens":["sbin","下来","先","while","x1","回到","hot","yuv420p","original","神经网","surfboard","xv","也","问题","时","spoon","率","%.","mask","(","如何",",","sink","哪个","tuples","i420","drier","来看","bottle","area","dtype","落","软硬","检测","nchw","font","p","tros","mipi","teddy","5","接口","forward","初始","&&","rectangle","chmod","demo","book","30fps","int32","上","webserver","h","冗余","基于","模块","分类","bench","airplane","分成","coor","场景","best","2","打开","axis","nms","概率","价值","0.6","+","distance","xy","该","_","进行","转换","/","close","}","没有","idx","ipu","代码","fork","hair","glove","potted","car","尺寸","#","nv12","main","训练","神经","将","集","根据","类别","缩小","物体","宽度","摄像头","为例","行为","lambda","cup","sample","比","parameters","bin","255","预测","resized","ros2","skateboard","ind","inputs","tie","1.0","format"," ","并","框","某一","in","meaning","速度","gettextsize","hw","80","inter","这个","单个","知道","更要","最终","else","下","libsrcampy","10","section","了","cnn","还要","所在","\"","source","快速","什么","y2","包围","7x7","一般","cow","fontscale","输出模块","描述符","bbox","yolo","y1",":","新","绘制","skis","种","一样","strides","浏览器","train","true","应用","finfo","类","分辨率","line","shape","s","获取","以","bboxs","newaxis","donut","刚才","benchmark","30","toaster","suitcase","1920","with","ious","实现","[","小狗","meter","runtime","过程","env","zeros","aa","转","documents","motorcycle","去掉","py","laptop","算法","origin","bicycle","绘图","输出","完成","x3","对象","高","zebra","f37","如果","kite","boxes1","racket","false","打印","sigma","推理","right","models","clock","index","对","c2","描述","接下","image","左下","list","存在","int","0.3","512x512","weight","ce","pad","box","行驶","usr","实时处理","cake","bash","boxes2","mouse","the","效率","union","辨率","input","下角","标注","linetype","-","然后","toothbrush","ball","中","float32","np","snowboard","这套","包","usb","remote","负责","bgr","$","carrot","数据类型","example","机器人","对于","来","所以","执行","share","setup","bus","cam","properties","opencv","refrigerator","转成","num",">","bowl","cat","draw","dnn","系统","boat","eps","从","帧","操作","cd","0","要求","stride","0.0","pyeasy","not","exp","score","dump","之前","结合","detection","orange","api","distance2bbox","y","gt","功能","连续","bed","append","coco","method","array","就是","旭日","8","config","{","togetherros","..","tobytes","1620","：","thick","hobot","另外","hydrant","重在","tv","up","cls","fcosworkconfig","i","soft","后续","opt","load","缩放","结果","狗","import","none","simplex","。","def","起来","libs","stack","这","把","非常","bat","if","统一","sqrt","enumerate","keyboard","left","同样","plant","是","rgb2yuv","print","disp","2f","到","relevant","microwave","pro","可以","派","动态","range","开发","480","最为","和","classes","参数","所属","width","node","json","dining","as","自然","size","神经网络","在","len","arange","__","app","个","sign","bgr2nv12","scores","giraffe","、","只","高度","thickness","jpg","实时","分割","监测","例程","layout","比如","yv","启动","当","vase","dog","camera","有","c1","like","sheep","像头","大家","max","'","reshape","硬件","set","便于","去","threshold","couch","大小","只有","srcampy","模型","elephant","这样","设置","meshgrid","postprocess","以及","handbag","给","位置","concatenate","rgb","chair","啦","get","bear","please","cp","小成","mess","lib","打印输出","运行","开发板","argpartition","frombuffer","]","之后","ai","stop","不仅","for","需要","车辆","sandwich","tennis","显示器","x","的话","websocket","272","自然环境","接下来","02","使用","down","3","uv","assert","refer","处理","与","iou","他们","图像","color","视频流","512","wine","中心点","light","pipeline","return","原图","parking","x2","tensor","person","umbrella","并且","topk","min","128","transpose","phone","类型","换成","看到","运动","puttext","内","w","prediction","open","输入","vio","32","运用","name","坐标","outputs","uint8","都","%","=","1000","sports","浏览","图片","因此","1","缩小成","to","卷积","重叠","pred","cell","0.5","识别","低","file","knife","channel","转换成","frisbee","方便","软硬件","scale","跟踪","那该","各种各样","picture","得到","通过","pizza","我们","手上","左下角","hershey","names","inference","glass","摄像","planar","各样","拿到","中将","bboxes","1080","目标",".","class","read","初始化","maximum","成","height","图像格式","is",")","table","视频","scissors","它会","多个","yuv420sp2bgr","要","机器","traffic","假设","句柄","说明","type","of","就","信息","相机","最高","过滤","格子","希望","truck","decode","object","imwrite","03","比较","为","四个","分辨","and","output","\\","解析","常用","属性","突出","显示","cvtcolor","每个","分析","中心","代表","map","计算","后","buffer","边界","banana","环境","原理","oven","packed","python3","broccoli","16","一张","launch","apple","backpack","还原","hsv","baseball","广泛","colorsys","t","服务","理解","格式","4f","交","r","，","64","argmax","各种","ones","的","利用","...","data","from","去除","网格","网络","minimum","confidence","控制","fcos","一种","度","bird","*","display","numpy","fire","hdmi","数据","4","有着","nginx","model","points","600","horse","webservice","那些","cv2","toilet","!","img","colors","一个"],"title":"动态目标检测","title_tokens":["检测","目标","动态"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_1","text":"图像物体分类重在分析图像中存在的物体是什么，便于机器理解看到的环境信息，另外一种场景，机器不仅要识别某一物体，还要知道这个物体所在的位置，当物体在运动时，更要快速连续的跟踪，这就是目标检测，重在分析识别到物体在图像中的位置。","text_tokens":["信息","理解","知道","跟踪","，","看到","运动","是","当","更要","的","分类","物体","不仅","到","另外","时","场景","重在","便于","还要","所在","快速","中","一种","分析","图像","什么","目标","。","检测","在","环境","位置","连续","存在","识别","某一","这","要","机器","就是","这个"],"title":"动态目标检测","title_tokens":["检测","目标","动态"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_2","text":"假设我们要识别图像中这只狗的位置，以最为常用的YOLO算法为例，它会运用单个卷积神经网络(CNN) ，将图像分成网格，并预测每个网格的对象概率和边界框。 比如，对于这个图像，Yolo的CNN网络将输入的图片分割成7x7的网格，然后每个网格负责去检测那些中心点落在该格子内的目标，比如，小狗这个目标的中心点在左下角的网格中，那该网格就负责预测狗这个对象。 每个网格中将有多个边界框，在训练时，我们希望每个对象只有一个边界框，比如最终只有一个边界框把这只狗包起来。因此，我们根据哪个边界框与之前标注的重叠度最高，预测对象的位置和概率。 最终包围对象的边界框，就是识别的结果，使用四个描述符进行说明： 边界框的中心位置 边界框的高度 边界框的宽度 识别到对象所属的类 这样就完成了对目标的实时检测，拿到目标的信息之后，就可以进行后续的机器人行为控制了。 我们对目标检测系统运行速度的要求一般都比较高，可以实时处理视频流，比如车辆行驶的动态监测、自然环境中的目标识别，有着非常广泛的应用价值。 回到TogetherROS和旭日X3派的开发板，我们来看下这套软硬件结合的目标检测系统，效率如何。","text_tokens":["togetherros","回到","内","应用","类","：","神经网","输入","运用","以","时","(","如何","哪个","后续","来看","都","结果","图片","狗","落","因此","软硬","小狗","。","卷积","重叠","检测","起来","识别","这","把","非常","算法","软硬件","那该","完成","x3","对象","高","分成","到","我们","可以","派","动态","左下角","概率","开发","价值","最为","和","该","进行","所属","拿到","中将","目标","对","自然","神经网络","成","在","描述",")","左下","视频","它会","多个","要","机器","、","只","假设","高度","说明","就","行驶","训练","实时","分割","实时处理","监测","神经","信息","将","最高","格子","比如","希望","根据","宽度","有","为例","比较","效率","行为","四个","硬件","下角","去","标注","常用","只有","然后","预测","中","每个","这样","中心","这套","包","负责"," ","边界","机器人","对于","并","框","位置","环境","速度","这个","运行","广泛","单个","开发板","，","系统","之后","的","最终","车辆","下","网格","网络","了","要求","自然环境","cnn","使用","控制","处理","与","之前","图像","度","结合","包围","7x7","视频流","一般","描述符","有着","yolo","中心点","那些","就是","旭日","一个"],"title":"目标检测原理","title_tokens":["检测","目标","原理"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#mipi","text":"接下来，我们要利用MIPI相机，动态识别图像中各种各样的物体以及他们所在的位置，推理过程使用的是基于COCO数据集训练的80个类别，也就是可以识别80种常用的物体位置。","text_tokens":["相机","下来","种","集","，","各种各样","是","各种","基于","类别","的","利用","物体","也","我们","可以","动态","接下来","使用","所在","常用","各样","推理","中","他们","图像","。","以及","过程","数据","接下","位置","mipi","识别","个","要","coco","就是","80","训练"],"title":"MIPI相机目标检测","title_tokens":["检测","目标","mipi","相机"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_3","text":"$ cd /app/ai_inference/03_mipi_camera_sample/ $ python3 ./mipi_camera.py","text_tokens":["app","mipi","/","cd",".","python3","inference","sample","$","03","ai"," ","camera","_","py"],"title":"运行例程","title_tokens":["运行","例程"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_4","text":"mipi_camera.py： #!/usr/bin/env python3 import numpy as np import cv2 import colorsys # Camera API libs from hobot_vio import libsrcampy as srcampy from hobot_dnn import pyeasy_dnn as dnn # detection model class names def get_classes (): return np . array ([ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" , \"bus\" , \"train\" , \"truck\" , \"boat\" , \"traffic light\" , \"fire hydrant\" , \"stop sign\" , \"parking meter\" , \"bench\" , \"bird\" , \"cat\" , \"dog\" , \"horse\" , \"sheep\" , \"cow\" , \"elephant\" , \"bear\" , \"zebra\" , \"giraffe\" , \"backpack\" , \"umbrella\" , \"handbag\" , \"tie\" , \"suitcase\" , \"frisbee\" , \"skis\" , \"snowboard\" , \"sports ball\" , \"kite\" , \"baseball bat\" , \"baseball glove\" , \"skateboard\" , \"surfboard\" , \"tennis racket\" , \"bottle\" , \"wine glass\" , \"cup\" , \"fork\" , \"knife\" , \"spoon\" , \"bowl\" , \"banana\" , \"apple\" , \"sandwich\" , \"orange\" , \"broccoli\" , \"carrot\" , \"hot dog\" , \"pizza\" , \"donut\" , \"cake\" , \"chair\" , \"couch\" , \"potted plant\" , \"bed\" , \"dining table\" , \"toilet\" , \"tv\" , \"laptop\" , \"mouse\" , \"remote\" , \"keyboard\" , \"cell phone\" , \"microwave\" , \"oven\" , \"toaster\" , \"sink\" , \"refrigerator\" , \"book\" , \"clock\" , \"vase\" , \"scissors\" , \"teddy bear\" , \"hair drier\" , \"toothbrush\" ]) def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_RGB2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] def postprocess ( model_output , model_hw_shape , origin_image = None , origin_img_shape = None , score_threshold = 0.5 , nms_threshold = 0.6 , dump_image = False ): input_height = model_hw_shape [ 0 ] input_width = model_hw_shape [ 1 ] if origin_image is not None : origin_image_shape = origin_image . shape [ 0 : 2 ] else : origin_image_shape = origin_img_shape prediction_bbox = decode ( outputs = model_output , score_threshold = score_threshold , origin_shape = origin_image_shape , input_size = 512 ) prediction_bbox = nms ( prediction_bbox , iou_threshold = nms_threshold ) prediction_bbox = np . array ( prediction_bbox ) topk = min ( prediction_bbox . shape [ 0 ], 1000 ) if topk != 0 : idx = np . argpartition ( prediction_bbox [ ... , 4 ], - topk )[ - topk :] prediction_bbox = prediction_bbox [ idx ] if dump_image and origin_image is not None : draw_bboxs ( origin_image , prediction_bbox ) return prediction_bbox def draw_bboxs ( image , bboxes , gt_classes_index = None , classes = get_classes ()): \"\"\"draw the bboxes in the original image \"\"\" num_classes = len ( classes ) image_h , image_w , channel = image . shape hsv_tuples = [( 1.0 * x / num_classes , 1. , 1. ) for x in range ( num_classes )] colors = list ( map ( lambda x : colorsys . hsv_to_rgb ( * x ), hsv_tuples )) colors = list ( map ( lambda x : ( int ( x [ 0 ] * 255 ), int ( x [ 1 ] * 255 ), int ( x [ 2 ] * 255 )), colors )) fontScale = 0.5 bbox_thick = int ( 0.6 * ( image_h + image_w ) / 600 ) for i , bbox in enumerate ( bboxes ): coor = np . array ( bbox [: 4 ], dtype = np . int32 ) if gt_classes_index == None : class_index = int ( bbox [ 5 ]) score = bbox [ 4 ] else : class_index = gt_classes_index [ i ] score = 1 bbox_color = colors [ class_index ] c1 , c2 = ( coor [ 0 ], coor [ 1 ]), ( coor [ 2 ], coor [ 3 ]) cv2 . rectangle ( image , c1 , c2 , bbox_color , bbox_thick ) classes_name = classes [ class_index ] bbox_mess = ' %s : %.2f ' % ( classes_name , score ) t_size = cv2 . getTextSize ( bbox_mess , 0 , fontScale , thickness = bbox_thick // 2 )[ 0 ] cv2 . rectangle ( image , c1 , ( c1 [ 0 ] + t_size [ 0 ], c1 [ 1 ] - t_size [ 1 ] - 3 ), bbox_color , - 1 ) cv2 . putText ( image , bbox_mess , ( c1 [ 0 ], c1 [ 1 ] - 2 ), cv2 . FONT_HERSHEY_SIMPLEX , fontScale , ( 0 , 0 , 0 ), bbox_thick // 2 , lineType = cv2 . LINE_AA ) print ( \" {} is in the picture with confidence: {:.4f} , bbox: {} \" . format ( classes_name , score , coor )) # cv2.imwrite(\"demo.jpg\", image) return image def decode ( outputs , score_threshold , origin_shape , input_size = 512 ): def _distance2bbox ( points , distance ): x1 = points [ ... , 0 ] - distance [ ... , 0 ] y1 = points [ ... , 1 ] - distance [ ... , 1 ] x2 = points [ ... , 0 ] + distance [ ... , 2 ] y2 = points [ ... , 1 ] + distance [ ... , 3 ] return np . stack ([ x1 , y1 , x2 , y2 ], - 1 ) def _scores ( cls , ce ): cls = 1 / ( 1 + np . exp ( - cls )) ce = 1 / ( 1 + np . exp ( - ce )) return np . sqrt ( ce * cls ) def _bbox ( bbox , stride , origin_shape , input_size ): h , w = bbox . shape [ 1 : 3 ] yv , xv = np . meshgrid ( np . arange ( h ), np . arange ( w )) xy = ( np . stack (( yv , xv ), 2 ) + 0.5 ) * stride bbox = _distance2bbox ( xy , bbox ) # opencv read, shape[1] is w, shape[0] is h scale_w = origin_shape [ 1 ] / input_size scale_h = origin_shape [ 0 ] / input_size scale = max ( origin_shape [ 0 ], origin_shape [ 1 ]) / input_size # origin img is pad resized #bbox = bbox * scale # origin img is resized bbox = bbox * [ scale_w , scale_h , scale_w , scale_h ] return bbox bboxes = list () strides = [ 8 , 16 , 32 , 64 , 128 ] for i in range ( len ( strides )): cls = outputs [ i ] . buffer bbox = outputs [ i + 5 ] . buffer ce = outputs [ i + 10 ] . buffer scores = _scores ( cls , ce ) classes = np . argmax ( scores , axis =- 1 ) classes = np . reshape ( classes , [ - 1 , 1 ]) max_score = np . max ( scores , axis =- 1 ) max_score = np . reshape ( max_score , [ - 1 , 1 ]) bbox = _bbox ( bbox , strides [ i ], origin_shape , input_size ) bbox = np . reshape ( bbox , [ - 1 , 4 ]) pred_bbox = np . concatenate ([ bbox , max_score , classes ], axis = 1 ) index = pred_bbox [ ... , 4 ] > score_threshold pred_bbox = pred_bbox [ index ] bboxes . append ( pred_bbox ) return np . concatenate ( bboxes ) def nms ( bboxes , iou_threshold , sigma = 0.3 , method = 'nms' ): def bboxes_iou ( boxes1 , boxes2 ): boxes1 = np . array ( boxes1 ) boxes2 = np . array ( boxes2 ) boxes1_area = ( boxes1 [ ... , 2 ] - boxes1 [ ... , 0 ]) * \\ ( boxes1 [ ... , 3 ] - boxes1 [ ... , 1 ]) boxes2_area = ( boxes2 [ ... , 2 ] - boxes2 [ ... , 0 ]) * \\ ( boxes2 [ ... , 3 ] - boxes2 [ ... , 1 ]) left_up = np . maximum ( boxes1 [ ... , : 2 ], boxes2 [ ... , : 2 ]) right_down = np . minimum ( boxes1 [ ... , 2 :], boxes2 [ ... , 2 :]) inter_section = np . maximum ( right_down - left_up , 0.0 ) inter_area = inter_section [ ... , 0 ] * inter_section [ ... , 1 ] union_area = boxes1_area + boxes2_area - inter_area ious = np . maximum ( 1.0 * inter_area / union_area , np . finfo ( np . float32 ) . eps ) return ious classes_in_img = list ( set ( bboxes [:, 5 ])) best_bboxes = [] for cls in classes_in_img : cls_mask = ( bboxes [:, 5 ] == cls ) cls_bboxes = bboxes [ cls_mask ] while len ( cls_bboxes ) > 0 : max_ind = np . argmax ( cls_bboxes [:, 4 ]) best_bbox = cls_bboxes [ max_ind ] best_bboxes . append ( best_bbox ) cls_bboxes = np . concatenate ( [ cls_bboxes [: max_ind ], cls_bboxes [ max_ind + 1 :]]) iou = bboxes_iou ( best_bbox [ np . newaxis , : 4 ], cls_bboxes [:, : 4 ]) weight = np . ones (( len ( iou ),), dtype = np . float32 ) assert method in [ 'nms' , 'soft-nms' ] if method == 'nms' : iou_mask = iou > iou_threshold weight [ iou_mask ] = 0.0 if method == 'soft-nms' : weight = np . exp ( - ( 1.0 * iou ** 2 / sigma )) cls_bboxes [:, 4 ] = cls_bboxes [:, 4 ] * weight score_mask = cls_bboxes [:, 4 ] > 0. cls_bboxes = cls_bboxes [ score_mask ] return best_bboxes def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) if __name__ == '__main__' : models = dnn . load ( '../models/fcos_512x512_nv12.bin' ) # 打印输入 tensor 的属性 print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) # 打印输出 tensor 的属性 print ( len ( models [ 0 ] . outputs )) for output in models [ 0 ] . outputs : print_properties ( output . properties ) # 获取 Camera 句柄 cam = srcampy . Camera () # 打开 f37 摄像头，并且把输出突出缩小成算法模型的输入尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) # 打开 F37, 初始化视频 pipeline 0 ，设置帧率30fps，缩放图像为 512 x 512 cam . open_cam ( 0 , 1 , 30 , w , h ) # Get HDMI display object disp = srcampy . Display () # For the meaning of parameters, please refer to the relevant documents of HDMI display disp . display ( 0 , 1920 , 1080 ) input_shape = ( h , w ) while True : # 从相机获取分辨率为 512x512 的nv12格式的图像数据， 参数 2 代表从硬件模块IPU中获取 img = cam . get_img ( 2 , 512 , 512 ) # 把图像数据转成 numpy 数据类型 img = np . frombuffer ( img , dtype = np . uint8 ) # 模型推理 outputs = models [ 0 ] . forward ( img ) # 对算法结果进行过滤，去掉执行度低的检测框，计算检测框的交并比去除冗余框，把检测框的坐标还原到原图位置上 prediction_bbox = postprocess ( outputs , input_shape , origin_img_shape = ( 1080 , 1920 )) # 从新获取一张图像，大小缩放成与显示器的分辨率一样的 1920 x 1080, 并且转换成 bgr格式，方便进行绘图操作 origin_image = cam . get_img ( 2 , 1920 , 1080 ) origin_nv12 = np . frombuffer ( origin_image , dtype = np . uint8 ) . reshape ( 1620 , 1920 ) origin_bgr = cv2 . cvtColor ( origin_nv12 , cv2 . COLOR_YUV420SP2BGR ) # 把算法运行后得到的物体检测框绘制到图像上 box_bgr = draw_bboxs ( origin_bgr , prediction_bbox ) # X3 的HDMI输出模块的输入图像格式需要是NV12的，所以需要先把bgr格式转成NV12 box_nv12 = bgr2nv12_opencv ( box_bgr ) # 把 NV12 格式的图像输出给显示器 disp . set_img ( box_nv12 . tobytes ()) cam . close_cam ()","text_tokens":["先","while","x1","hot","yuv420p","original","surfboard","xv","spoon","率","%.","mask","(",",","sink","tuples","i420","drier","area","bottle","dtype","检测","nchw","font","mipi","teddy","5","forward","初始","rectangle","demo","book","30fps","int32","上","h","冗余","模块","bench","airplane","coor","best","2","打开","axis","nms","0.6","+","distance","xy","_","进行","转换","/","close","}","idx","ipu","fork","hair","glove","potted","car","尺寸","#","nv12","main","缩小","物体","摄像头","lambda","cup","比","parameters","bin","255","resized","skateboard","ind","inputs","tie","1.0","format"," ","并","框","in","meaning","gettextsize","hw","inter","else","libsrcampy","10","section","\"","y2","cow","fontscale","输出模块","bbox","y1",":","新","绘制","skis","一样","strides","train","true","finfo","分辨率","line","shape","s","获取","bboxs","newaxis","donut","30","toaster","suitcase","1920","with","ious","[","meter","env","zeros","aa","转","documents","motorcycle","去掉","py","laptop","算法","origin","bicycle","绘图","输出","x3","zebra","f37","kite","boxes1","racket","false","打印","sigma","推理","right","models","clock","index","c2","对","image","list","int","0.3","512x512","weight","ce","pad","box","usr","cake","boxes2","mouse","the","union","辨率","input","linetype","-","toothbrush","ball","float32","中","np","snowboard","remote","bgr","carrot","数据类型","所以","执行","bus","cam","properties","opencv","refrigerator","转成","num",">","bowl","cat","draw","dnn","boat","eps","从","帧","操作","0","stride","0.0","pyeasy","not","exp","score","dump","detection","orange","api","distance2bbox","y","gt","bed","append","method","array","8","{","..","tobytes","1620","：","thick","hobot","hydrant","tv","up","cls","i","soft","load","缩放","结果","import","none","simplex","def","libs","stack","把","bat","if","sqrt","enumerate","keyboard","left","plant","rgb2yuv","是","print","disp","2f","relevant","到","microwave","pro","range","classes","参数","width","dining","as","size","len","arange","__","sign","scores","bgr2nv12","giraffe","thickness","jpg","layout","yv","vase","dog","camera","c1","like","sheep","像头","max","'","reshape","硬件","set","threshold","大小","couch","srcampy","模型","elephant","设置","meshgrid","postprocess","handbag","给","位置","concatenate","rgb","chair","get","bear","please","小成","mess","打印输出","运行","argpartition","frombuffer","]","for","stop","需要","sandwich","tennis","显示器","x","down","3","uv","assert","refer","与","iou","图像","color","512","wine","light","pipeline","return","原图","parking","x2","tensor","person","umbrella","并且","min","128","topk","transpose","phone","类型","换成","puttext","w","prediction","open","输入","vio","32","name","坐标","outputs","uint8","%","=","1000","sports","1","缩小成","to","pred","cell","0.5","低","knife","channel","转换成","frisbee","方便","scale","picture","得到","pizza","hershey","names","glass","摄像","planar","bboxes","1080",".","class","read","初始化","maximum","height","成","图像格式","is",")","table","视频","scissors","yuv420sp2bgr","traffic","句柄","type","相机","过滤","truck","decode","object","imwrite","为","分辨","and","output","\\","属性","突出","显示","cvtcolor","代表","map","计算","后","buffer","banana","oven","packed","python3","broccoli","16","一张","apple","backpack","还原","hsv","baseball","colorsys","t","格式","4f","交","64","，","argmax","ones","的","...","data","from","去除","minimum","confidence","fcos","度","bird","*","display","numpy","fire","hdmi","数据","4","model","points","600","horse","cv2","toilet","!","img","colors","of"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#usb","text":"如果大家手上没有MIPI接口的相机，使用USB相机也可以实现同样的功能。","text_tokens":["可以","mipi","相机","没有","接口","，","usb","实现","同样","如果","。","的","功能","使用","大家","也","手上"],"title":"USB相机目标检测","title_tokens":["检测","目标","相机","usb"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_5","text":"$ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py","text_tokens":["app","/","cd",".","python3","usb","inference","sample","$","02","ai"," ","camera","_","fcos","py"],"title":"运行例程","title_tokens":["运行","例程"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_6","text":"大家如果没有HDMI显示器的话，也没有问题，刚才的例程，也可以这样来运行，我们通过统一网络环境中的浏览器就可以动态看到结果啦。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/fcosworkconfig.json image_width: = 480 image_height: = 272","text_tokens":["sbin","config","浏览器","看到","hobot","也","问题","fcosworkconfig","opt","刚才","benchmark","=","浏览","结果","runtime","。","p","tros","file","&&","chmod","统一","py","webserver","通过","我们","如果","可以","动态","480","+","_","/","width","没有","node",".","json","height","image","#","就","bash","例程","启动","大家","-","显示","ros2","中","这样","example","$"," ","来","环境","啦","share","setup","launch","cp","lib","服务","运行","r","，","dnn","的","显示器","cd","的话","websocket","x","272","网络","source","hdmi","nginx","webservice",":"],"title":"动态目标检测","title_tokens":["检测","目标","动态"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/","text":"人体检测与跟踪 不知道大家有没有玩过类似XBOX的体感游戏机，上边会有一个相机，动态识别我们的动作，比如跳舞、打球，是不是还挺神奇的，这就是人体检测与跟踪的应用。 TogetherROS中也集成了一套类似的算法，可以识别人体、人头、人脸、人手等一系列关键点，我们来体验一下。 编程开发方法 先来看一个人体识别的基础应用，我们驱动相机后，实时采样视觉信息，然后再通过检测算法，识别每一幅图片中人体位置，并把识别的结果保存成一张图片，便于我们查看。 运行例程 # 下载例程代码（与之前课程下载的代码一致） $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build # 终端1，运行相机 $ source /opt/tros/setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p out_format: = nv12 -p image_width: = 960 -p image_height: = 544 -p video_device: = F37 # 终端2，运行例程 $ source /opt/tros/setup.bash $ source ./install/local_setup.bash $ mkdir -p config && cp -r /opt/tros/lib/dnn_node_example/config/multitask_body_kps_960x544.hbm config/ $ ros2 run cpp_dnn_demo cpp_dnn_demo --ros-args -p image: = config/test.jpg 代码解析 #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" #include \"dnn_node/dnn_node.h\" #include \"dnn_node/util/image_proc.h\" #include \"sensor_msgs/msg/image.hpp\" using namespace hobot :: dnn_node ; class BodyDetNode : public DnnNode { public : BodyDetNode ( const std :: string & node_name = \"body_det\" , const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : DnnNode ( node_name , options ) { // 获取模型输入图片的尺寸，包括图片的宽model_input_width_和高model_input_height ，用于模型前处理 if ( Init () != 0 || GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ) < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Node init fail!\" ); } //创建图片消息的subscriber，订阅的topic为”/image_raw”，消息类型为sensor_msgs::msg::Image。订阅到的图片用于算法模型推理 ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( \"/image_raw\" , 10 , std :: bind ( & BodyDetNode :: FeedImg , this , std :: placeholders :: _1 )); } ~ BodyDetNode () override {} void FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr msg ); protected : int SetNodePara () override { if ( ! dnn_node_para_ptr_ ) return -1 ; //指定模型推理使用的模型文件名和模型名 dnn_node_para_ptr_ -> model_file = \"config/multitask_body_kps_960x544.hbm\" ; dnn_node_para_ptr_ -> model_name = \"multitask_body_kps_960x544\" ; //指定模型输出的人体框的解析方法，其中人体框输出索引为box_output_index_ //使用的解析方法为hobot_dnn预定义的检测框解析方法FaceHandDetectionOutputParser。 std :: shared_ptr < OutputParser > box_out_parser = std :: make_shared < FaceHandDetectionOutputParser > (); dnn_node_para_ptr_ -> output_parsers_ . emplace_back ( std :: make_pair ( box_output_index_ , box_out_parser ) ); return 0 ; } int PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) override ; private : int model_input_width_ = -1 ; int model_input_height_ = -1 ; const int32_t box_output_index_ = 1 ; sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg_ ; rclcpp :: Subscription < sensor_msgs :: msg :: Image >:: ConstSharedPtr ros_img_subscription_ = nullptr ; }; //输出模型结果，并将结果渲染到图片后保存在本地 int BodyDetNode::PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( node_output -> outputs . empty () || static_cast < int32_t > ( node_output -> outputs . size ()) < box_output_index_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid outputs\" ); return -1 ; } auto * filter2d_result = dynamic_cast < Filter2DResult *> ( node_output -> outputs [ box_output_index_ ]. get ()); if ( ! filter2d_result ) return -1 ; std :: stringstream ss ; ss << \"img encoding: \" << img_msg_ -> encoding << \", stamp: \" << img_msg_ -> header . stamp . sec << \",\" << img_msg_ -> header . stamp . nanosec << \" \\n out box size: \" << filter2d_result -> boxes . size () << \" \\n \" ; cv :: Mat nv12 ( img_msg_ -> height * 3 / 2 , img_msg_ -> width , CV_8UC1 , const_cast < char *> ( reinterpret_cast < const char *> ( img_msg_ -> data . data ()))); cv :: Mat bgr ; cv :: cvtColor ( nv12 , bgr , CV_YUV2BGR_NV12 ); for ( auto & rect : filter2d_result -> boxes ) { ss << \"rect: \" << rect . left << \" \" << rect . top << \" \" << rect . right << \" \" << rect . bottom << \" \\n \" ; // 图片渲染 cv :: rectangle ( bgr , cv :: Point ( rect . left , rect . top ), cv :: Point ( rect . right , rect . bottom ), cv :: Scalar ( 255 , 0 , 0 ), 3 ); } std :: string result_image = \"render_\" + std :: to_string ( img_msg_ -> header . stamp . sec ) + \".\" + std :: to_string ( img_msg_ -> header . stamp . nanosec ) + \".jpg\" ; ss << \"Render img to file: \" << result_image ; RCLCPP_INFO ( rclcpp :: get_logger ( \"example\" ), \"%s\" , ss . str (). c_str ()); cv :: imwrite ( result_image , bgr ); return 0 ; } //将nv12格式的图片转成模型输入的数据类型DNNInput后，输入给推理任务 void BodyDetNode::FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg ) return ; if ( \"nv12\" != img_msg -> encoding ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Only support nv12 img encoding!\" ); return ; } img_msg_ = img_msg ; // 创建模型输入数据 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { ImageProc :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ )}; // 运行推理，DnnNode基类中定义并实现的启动推理接口。 Run ( inputs ); } int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < BodyDetNode > ()); rclcpp :: shutdown (); return 0 ; } 人体检测与跟踪 结果保存成图片，虽然便于保留数据，但是不利于动态看到效果，我们不如再来实时动态效果显示。 在这个案例中，我们在之前人体识别的基础上，进一步实现了人体部位的识别和骨骼、眼神等关键点的识别，比如头、脸、身体、手掌、眼睛。 识别的结果同样是通过浏览器来进行查看。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . $ ros2 launch /opt/tros/share/mono2d_body_detection/launch/hobot_mono2d_body_detection.launch.py","text_tokens":["nodeoptions","sbin","先","reinterpret","com","test","也","查看","subscriber","(",",","宽","不","来看","检测","override","p","tros","mipi","接口","&&","rectangle","chmod","demo","top","int32","上","webserver","install","h","渲染","效果","2","imageproc","logger","+","using","_","进行","std","/","pair","没有","}","bind","代码","会","guyuehome","c","视觉","尺寸","#","nv12","不利","一套","索引","main","将","nanosec","等","empty","ss","身体","core","预定","关键","255","ros2","include","inputs","format"," ","部位","并","框","colcon","义","only","虽然","这个","知道","sensor","类似","10","fail","了","一系","\"","source",";","namespace","shared","打球","包括","init","https","str","基础","render",":","tutorials","系列","浏览器","src","应用","s","获取","实现","[","rect","转","驱动","头","人头","基类","py","算法","public","输出","动作","高","options","f37","人体","xbox","argc","local","终端","para","推理","static","right","index","rclcpp","body","不是","support","保存","每","image","订阅","int","box","video","string","n","bash","其中","有没有","facehanddetectionoutputparser","任务","544","input","getmodelinputsize","-","然后","中","example","bgr","$","数据类型","multitask","来","sec","保留","share","8uc1","setup","cam","topic","”","960x544","骨骼",">","上边","dnn","创建","cd","this","不利于","0","info","之前","detection","msg","用于","constsharedptr","yuv2bgr","make","det","就是","dnnnode","opencv2","config","{","togetherros","hobot","眼睛","kps","opt","定义","结果","。","subscription","cv","神奇","这","把","hpp","if","但是","不如","left","args","同样","|","是","vector","一幅","到","可以","动态","util","setnodepara","create","开发","bodydetnode","userdata","和","parser","width","node","raw","imgcodecs","header","size","spin","在","encoding","、","jpg","进一步","手掌","实时","例程","比如","emplace","启动","parsers","private","有","argv","大家","是不是","游戏","build","便于","imgproc","模型","bottom","filter2d","void","postprocess","给","跳舞","位置","char","游戏机","get","cp","lib","运行","]","shutdown","关键点","for","nullptr","玩过","websocket","x","out","使用","3","dev","处理","与","outputparser","return","消息","git","~","hbm","getnv12pyramidfromnv12img","ws","类型","看到","再","mat","案例","输入","一系列","name","filter2dresult","outputs","还","%","人脸","--","=","浏览","图片","stamp","下载","1","to","back","error","识别","file","一下","mkdir","clone","auto","ptr","跟踪","一致","通过","invalid","placeholders","我们","本地","msgs","编程","dnnnodeoutput",".","class","mono2d","文件","成","height","device",")","前","采样","方法","集成","相机","信息","960","眼神","imwrite","为","stringstream","体验","output","\\","&","解析","显示","scalar","动态效果","cvtcolor","后","课程","cast","feedimg","dnninput","point","一张","launch","利于","result","服务","t","dynamic","格式","r","，","的","）","（","gitee","data","指定","文件名","脸","cpp","体感","*","const","proc","数据","run","nginx","人手","model","<","webservice","!","img","ros","boxes","挺","开发方法","名","protected","一步","一个"],"title":"人体检测与跟踪","title_tokens":["跟踪","检测","人体","与"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_1","text":"不知道大家有没有玩过类似XBOX的体感游戏机，上边会有一个相机，动态识别我们的动作，比如跳舞、打球，是不是还挺神奇的，这就是人体检测与跟踪的应用。 TogetherROS中也集成了一套类似的算法，可以识别人体、人头、人脸、人手等一系列关键点，我们来体验一下。","text_tokens":["集成","相机","算法","知道","togetherros","跟踪","系列","，","比如","关键点","应用","动作","的","等","有","大家","是不是","有没有","我们","人体","也","可以","游戏","一系列","类似","玩过","xbox","动态","体验","了","还","不","一系","关键","人脸","与","中","没有","打球","体感","不是","。","会"," ","检测","跳舞","来","神奇","人手","游戏机","识别","这","一下","一套","、","挺","就是","上边","人头","一个"],"title":"人体检测与跟踪","title_tokens":["跟踪","检测","人体","与"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_2","text":"先来看一个人体识别的基础应用，我们驱动相机后，实时采样视觉信息，然后再通过检测算法，识别每一幅图片中人体位置，并把识别的结果保存成一张图片，便于我们查看。","text_tokens":["相机","先","信息","算法","，","应用","通过","再","的","一幅","人体","查看","我们","便于","来看","然后","中","结果","图片","后","。","检测","成","并","每","视觉","位置","保存","识别","把","一张","基础","驱动","实时","采样","一个"],"title":"编程开发方法","title_tokens":["方法","编程","开发","开发方法"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_3","text":"# 下载例程代码（与之前课程下载的代码一致） $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build # 终端1，运行相机 $ source /opt/tros/setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p out_format: = nv12 -p image_width: = 960 -p image_height: = 544 -p video_device: = F37 # 终端2，运行例程 $ source /opt/tros/setup.bash $ source ./install/local_setup.bash $ mkdir -p config && cp -r /opt/tros/lib/dnn_node_example/config/multitask_body_kps_960x544.hbm config/ $ ros2 run cpp_dnn_demo cpp_dnn_demo --ros-args -p image: = config/test.jpg","text_tokens":["hbm","config","ws","togetherros","com","src","test","kps","opt","=","--","下载","1","p","tros","mipi","&&","demo","mkdir","clone","args","一致","install","f37","2","local","终端","userdata","_","/","width","node",".","代码","body","guyuehome","height","image","device","#","nv12","video","jpg","bash","相机","例程","960","544","build","-","ros2","example","$","format","课程"," ","multitask","colcon","setup","cam","cp","960x544","lib","运行","r","，","dnn","的","）","（","gitee","cd","out","source","dev","与","之前","cpp","run","https","ros",":","git","tutorials"],"title":"运行例程","title_tokens":["运行","例程"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_4","text":"#include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" #include \"dnn_node/dnn_node.h\" #include \"dnn_node/util/image_proc.h\" #include \"sensor_msgs/msg/image.hpp\" using namespace hobot :: dnn_node ; class BodyDetNode : public DnnNode { public : BodyDetNode ( const std :: string & node_name = \"body_det\" , const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : DnnNode ( node_name , options ) { // 获取模型输入图片的尺寸，包括图片的宽model_input_width_和高model_input_height ，用于模型前处理 if ( Init () != 0 || GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ) < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Node init fail!\" ); } //创建图片消息的subscriber，订阅的topic为”/image_raw”，消息类型为sensor_msgs::msg::Image。订阅到的图片用于算法模型推理 ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( \"/image_raw\" , 10 , std :: bind ( & BodyDetNode :: FeedImg , this , std :: placeholders :: _1 )); } ~ BodyDetNode () override {} void FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr msg ); protected : int SetNodePara () override { if ( ! dnn_node_para_ptr_ ) return -1 ; //指定模型推理使用的模型文件名和模型名 dnn_node_para_ptr_ -> model_file = \"config/multitask_body_kps_960x544.hbm\" ; dnn_node_para_ptr_ -> model_name = \"multitask_body_kps_960x544\" ; //指定模型输出的人体框的解析方法，其中人体框输出索引为box_output_index_ //使用的解析方法为hobot_dnn预定义的检测框解析方法FaceHandDetectionOutputParser。 std :: shared_ptr < OutputParser > box_out_parser = std :: make_shared < FaceHandDetectionOutputParser > (); dnn_node_para_ptr_ -> output_parsers_ . emplace_back ( std :: make_pair ( box_output_index_ , box_out_parser ) ); return 0 ; } int PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) override ; private : int model_input_width_ = -1 ; int model_input_height_ = -1 ; const int32_t box_output_index_ = 1 ; sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg_ ; rclcpp :: Subscription < sensor_msgs :: msg :: Image >:: ConstSharedPtr ros_img_subscription_ = nullptr ; }; //输出模型结果，并将结果渲染到图片后保存在本地 int BodyDetNode::PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( node_output -> outputs . empty () || static_cast < int32_t > ( node_output -> outputs . size ()) < box_output_index_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid outputs\" ); return -1 ; } auto * filter2d_result = dynamic_cast < Filter2DResult *> ( node_output -> outputs [ box_output_index_ ]. get ()); if ( ! filter2d_result ) return -1 ; std :: stringstream ss ; ss << \"img encoding: \" << img_msg_ -> encoding << \", stamp: \" << img_msg_ -> header . stamp . sec << \",\" << img_msg_ -> header . stamp . nanosec << \" \\n out box size: \" << filter2d_result -> boxes . size () << \" \\n \" ; cv :: Mat nv12 ( img_msg_ -> height * 3 / 2 , img_msg_ -> width , CV_8UC1 , const_cast < char *> ( reinterpret_cast < const char *> ( img_msg_ -> data . data ()))); cv :: Mat bgr ; cv :: cvtColor ( nv12 , bgr , CV_YUV2BGR_NV12 ); for ( auto & rect : filter2d_result -> boxes ) { ss << \"rect: \" << rect . left << \" \" << rect . top << \" \" << rect . right << \" \" << rect . bottom << \" \\n \" ; // 图片渲染 cv :: rectangle ( bgr , cv :: Point ( rect . left , rect . top ), cv :: Point ( rect . right , rect . bottom ), cv :: Scalar ( 255 , 0 , 0 ), 3 ); } std :: string result_image = \"render_\" + std :: to_string ( img_msg_ -> header . stamp . sec ) + \".\" + std :: to_string ( img_msg_ -> header . stamp . nanosec ) + \".jpg\" ; ss << \"Render img to file: \" << result_image ; RCLCPP_INFO ( rclcpp :: get_logger ( \"example\" ), \"%s\" , ss . str (). c_str ()); cv :: imwrite ( result_image , bgr ); return 0 ; } //将nv12格式的图片转成模型输入的数据类型DNNInput后，输入给推理任务 void BodyDetNode::FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg ) return ; if ( \"nv12\" != img_msg -> encoding ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Only support nv12 img encoding!\" ); return ; } img_msg_ = img_msg ; // 创建模型输入数据 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { ImageProc :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ )}; // 运行推理，DnnNode基类中定义并实现的启动推理接口。 Run ( inputs ); } int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < BodyDetNode > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["dnnnode","nodeoptions","opencv2","hbm","config","{","reinterpret","getnv12pyramidfromnv12img","类型","mat","输入","s","hobot","获取","subscriber","(","name",",","宽","filter2dresult","kps","outputs","定义","%","=","结果","图片","stamp","1","实现","[","to","。","back","override","检测","rect","subscription","cv","error","转","file","接口","hpp","rectangle","if","auto","ptr","top","基类","left","算法","public","int32","h","|","渲染","输出","vector","invalid","高","placeholders","options","到","人体","util","本地","setnodepara","2","argc","create","imageproc","bodydetnode","logger","msgs","+","using","_","和","para","推理","parser","static","right","std","/","width","}","node","index","pair",".","bind","dnnnodeoutput","rclcpp","imgcodecs","body","class","raw","size","header","文件","support","spin","height","成","在","保存","image","订阅",")","尺寸","#","nv12","c","int","索引","encoding","前","main","box","jpg","string","n","方法","将","其中","emplace","启动","parsers","imwrite","nanosec","private","argv","empty","为","facehanddetectionoutputparser","ss","stringstream","任务","core","input","output","&","解析","\\","预定","getmodelinputsize","imgproc","-","scalar","255","模型","cvtcolor","bottom","中","filter2d","include","void","inputs","后","example","bgr","postprocess","数据类型"," ","multitask","cast","给","并","框","sec","feedimg","char","义","get","8uc1","point","topic","dnninput","only","”","960x544",">","result","运行","t","dynamic","格式","]","sensor","shutdown","dnn","，","的","for","nullptr","创建","data","10","this","fail","指定","0","文件名","out","使用","info","3","\"",";","处理","namespace","shared","outputparser","包括","*","msg","init","const","用于","proc","constsharedptr","数据","run","model","<","return","str","yuv2bgr","!","img","ros","boxes","名","make",":","det","protected","消息","render","~"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_5","text":"结果保存成图片，虽然便于保留数据，但是不利于动态看到效果，我们不如再来实时动态效果显示。 在这个案例中，我们在之前人体识别的基础上，进一步实现了人体部位的识别和骨骼、眼神等关键点的识别，比如头、脸、身体、手掌、眼睛。 识别的结果同样是通过浏览器来进行查看。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . $ ros2 launch /opt/tros/share/mono2d_body_detection/launch/hobot_mono2d_body_detection.launch.py","text_tokens":["sbin","config","浏览器","看到","再","案例","hobot","查看","眼睛","opt","浏览","结果","图片","实现","。","p","tros","识别","&&","chmod","但是","不如","头","py","上","webserver","同样","是","通过","人体","效果","我们","动态","+","和","_","进行","/",".","body","mono2d","成","在","保存","#","不利","、","进一步","手掌","实时","bash","例程","眼神","比如","启动","等","身体","便于","关键","显示","-","动态效果","ros2","中","$"," ","部位","来","保留","share","setup","虽然","launch","cp","利于","骨骼","lib","这个","服务","运行","r","，","关键点","的","cd","不利于","websocket","x","了","source","脸","之前","detection","数据","nginx","webservice","基础","一步"],"title":"人体检测与跟踪","title_tokens":["跟踪","检测","人体","与"]}]}