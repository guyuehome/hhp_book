{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。 本教程将会以旭日X3派为平台，介绍地平线机器人开发平台的使用原理与方法。 教程链接汇总 旭日X3派开发板使用手册： https://developer.horizon.ai/api/v1/fileData/documents_pi/index.html 机器人开发平台使用手册： https://developer.horizon.ai/api/v1/fileData/TogetherROS/index.html 视频课程： https://class.guyuehome.com/all/10284445/19617453 图文教程： https://hhp.guyuehome.com/ 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/92 博客泡圈： https://www.guyuehome.com/","text_tokens":["circledetail","环境","链接","www","包括","开发","操作系统","教程","19617453","博客","传感","all","class","引言","机器","操作","在","带来","https","介绍","等等","月","是","等","6","地平","层面","将会","给","更","主控","硬件","执行","汇总","horizon","documents","开发板","部分","复杂",":","作为","pi","92","算法","推出","原理","filedata","手册","工具","程式","api","developer","使用","信息","，","问答","hhp","2022","bubble","图文","进行","：","计算","本","正式","派","的","使用手册","泡圈","v1","各种","年","10284445","机器人","方法","一个","."," ","驱动","平台","com","与","。","多","大脑","id","感器","地平线","togetherros","感知","规控","/","全新","index","ai","数据","guyuehome","非常","为","课程","各种各样","_","动作","电机","非常复杂","html","视频","行业","软件","一代","系统","以","x3","传感器","旭日","帮助","各样","、"],"title":"**引言**","title_tokens":["引言","*"]},{"location":"#_1","text":"机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。 本教程将会以旭日X3派为平台，介绍地平线机器人开发平台的使用原理与方法。","text_tokens":["环境","包括","开发","操作系统","教程","传感","机器","操作","在","带来","介绍","等等","月","是","等","6","地平","层面","将会","给","更","主控","硬件","执行","部分","复杂","作为","算法","推出","原理","工具","程式","使用","信息","，","2022","进行","：","计算","本","正式","派","的","各种","年","机器人","方法","一个"," ","驱动","平台","与","。","多","大脑","感器","地平线","感知","规控","全新","数据","非常","为","各种各样","动作","电机","非常复杂","行业","软件","一代","系统","以","x3","传感器","旭日","帮助","各样","、"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"旭日X3派开发板使用手册： https://developer.horizon.ai/api/v1/fileData/documents_pi/index.html 机器人开发平台使用手册： https://developer.horizon.ai/api/v1/fileData/TogetherROS/index.html 视频课程： https://class.guyuehome.com/all/10284445/19617453 图文教程： https://hhp.guyuehome.com/ 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/92 博客泡圈： https://www.guyuehome.com/","text_tokens":["togetherros","bubble","图文","：","circledetail","/","派","www","index","horizon","ai","documents","开发","19617453","教程","博客","guyuehome","all","课程","使用手册","泡圈","v1","开发板","_","10284445","机器人","class",":",".","机器","pi","92"," ","https","filedata","手册","平台","com","api","developer","html","视频","使用","问答","旭日","x3","id","hhp"],"title":"教程链接汇总","title_tokens":["教程","汇总","链接"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["法律","努力","内容","提供","网站","www","未来","培养","包括","其它","万字","责任","致力","课件","开发","不","公司","微控","或","模式","传播","请","销售","机器","上述","复制","创新","企业","但","1000","累积","违反","是","等","及","镜像","实践","书面","华语","未经","限于","高质量","赋能","图书","@","合作","明者","精锋","产品","地区","超过","合法","《","创建","不得","究其","古月","质量","人才培养","联系","依法","如需","声明","追究","（","致力于","高质","拥有","使用","用户","120","出版","，","畅销","声明者","构建","生态","许可","作品","版权","本","进行","万人","上","的","知名","交流","一体","建立","仅限","年","所有","机器人","."," ","至今","平台","com","高校","交流学习","2011","授权","社区","与","源码","。","将","通过","）","有权","科技","校企","brand","均","+","学习","ai","追究其","学习者","武汉","guyuehome","有限公司","为","课程","面向未来","集","居","和","众多","对本","小时","优质","捆绑","抄录","面向","》","任何","个人","人才","有限","线上","视频","修改","学","法律责任","单位","被","ros","、"],"title":"关于我们","title_tokens":["关于","我们"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["努力","内容","提供","www","未来","培养","万字","致力","开发","模式","机器","创新","企业","1000","累积","是","等","及","实践","华语","高质量","赋能","图书","合作","地区","超过","《","创建","古月","质量","人才培养","（","致力于","高质","用户","120","出版","，","畅销","构建","生态","万人","的","知名","交流","一体","建立","年","机器人","."," ","至今","平台","com","高校","交流学习","2011","社区","与","。","通过","）","校企","+","学习","ai","学习者","guyuehome","为","课程","面向未来","集","居","众多","小时","优质","面向","》","人才","线上","视频","ros","、"],"title":"学机器人，上古月居","title_tokens":["古月","机器","学","，","居","机器人","上"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["法律","网站","包括","其它","责任","课件","不","公司","微控","或","传播","请","销售","上述","复制","但","违反","等","镜像","书面","未经","限于","@","明者","精锋","产品","合法","不得","究其","古月","联系","依法","如需","声明","追究","拥有","使用","用户","，","声明者","许可","作品","版权","本","进行","的","仅限","所有","."," ","com","授权","与","源码","。","将","有权","科技","brand","均","学习","追究其","武汉","guyuehome","有限公司","为","课程","和","居","对本","捆绑","抄录","任何","个人","有限","视频","修改","法律责任","单位","被","、"],"title":"版权声明","title_tokens":["声明","版权"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/","text":"智能机器人发展与现状 智能机器人正在改变着我们的生活，想象这样一种场景。 也许不知不觉的某一天，我们就会发现类似这样的机器人会真实出现在生活当中。 科技的发展日新月异，智能机器人也突飞猛进，伴随机器人发展而生的机器人操作系统，也是机器人重要的发展动力之一。 智能机器人举例 提到智能机器人，大家脑海里会映射出什么样的情景呢？ 是不是会有很多科幻电影中变形金刚、大白机器人、星球大战等场景呢？ 智能机器人这个概念，只是一个科幻词汇么？当然不是的，其实在我们身边，已经有越来越多智能机器人出现，我们来看看他们都在哪里？ 扫地机器人 先来看一个大家最熟悉的一个类型——扫地机器人。现在的扫地机器人，除了可以完成扫地、拖地这样一些基本功能之外，还搭载了激光雷达、相机、红外等十几种传感器。 一个全新的扫地机器人虽然是第一次来到你家，但是它可能用到 5 分到 10 分钟时间，很快就可以通过它的传感器对你的家庭环境了如指掌，也就是把实际的家庭环境做成了一张地图，这样他就会知道哪里是卧室，哪里是餐厅，哪里是厨房，不同的区域用多大的风力，用多大的水量来去清扫最为合适，它都会智能化地来做判断。 除此之外，它还得知道怎么样去躲避各种障碍物，比如说家里面的宠物、地上摆放的插线板，各种各样的杂物等等。 所以看似非常小的一个扫地机器人，其实已经是一个很智能化的家用设备了，正在潜移默化地改变着我们的生活。 自动化仓储 第二个案例，虽然大部分人在生活中不会直接接触，但却和每一个人息息相关，那就是自动化仓储。 这是京东某个实际部署运营的一套自动化的仓库，在里面可以看到各种各样的机器人，比如工业机械臂、移动机器人等等，这套立体仓库当中大量的货架也是自动化的，这就是一个典型的机器人应用场景。 之前有一个关于京东的新闻报道，里边讲到，从我们下单那刻开始，到商品分拣出来放到快递员手上，只需要20分钟。比如我们要买个手机，下单付款，20分钟之后，这个手机已经从这么庞大的仓库中顺利找到，并且完成了包装、打标、分配等一系列工序。这样，我们在绝大部分城市，基本都可以体验到下单之后，当天或者隔天收货的体验，为什么它可以做到如此高效，就是因为背后这一套由机器人组成的自动化系统，借助大数据的分析，甚至可以做到在你下单之前，平台就知道你将要买什么东西。比如说你会按照一个月的频率买米买面，那平台就可以预测到上个月你买的米应该快吃完了，然后就会在距离你家最近的一个仓库里面备货。 当你下单之后，这袋米可能半个小时送到你手上了。 自动驾驶 第三个案例，那就是当今最为热门的技术之一——自动驾驶。 自动驾驶汽车也是典型的移动机器人系统，为了保证绝对安全的驾驶过程，汽车上装配了非常多的传感器，以及极为复杂的控制算法。 视频中我们看到的是华为自动驾驶系统在实际路面上测试的效果，自动驾驶汽车通过多个相机、雷达、超声波，实时构建周围环境的三维信息，不仅可以动态识别路面上的行人车辆、车道线、交通指示灯等，还可以安全完成超车、会车、跟车、转向等重要功能，同时对突发状况也可以及时处理，比如躲避突然出现的车辆、礼让行人等，最终自动行驶入库，把我们安全顺利的送到目的地。 虽然自动驾驶相关的技术和法律法规还在不断完善中，但是相信有一天我们每个人都可以体验自动驾驶的乐趣，而且这一天不会太远。 智能机器人发展 机器人的发展横跨几十年，经历了三个重要时期。 2000年前，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 2015年之后，智能机器人市场迅速爆发，到2025年，国内人工智能市场有望达到1164亿元，而作为人工智能重要载体的机器人，市场更会达到1463亿元。 行业的快速发展，必将带动大量专业人才的需求，人才缺口也将逐年扩大，2025年，预计国内机器人行业的人才缺口将超过450万，人工智能方面的缺口更会达到1000万。 面对如此严峻的人才需求，国内各高校从2016年起，陆续开设机器人和人工智能专业，为人才的供给提供有力保障。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角。 机器人操作系统 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是机器人操作系统。 ROS的诞生 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣、做饭、收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法：既然自己做不到，那为什么不联合所有人一起干呢？如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在这几个图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面，却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS怀揣“提高机器人软件复用率”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 ROS的特点 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。","text_tokens":["跟车","”","转向","自己","什么","一步","环境","不会","自主","c","预测","自身","还是","却","嵌入式","几种","万","之前","市场","创意","操作系统","教程","三维","棒","闻报","开发者","今日","甚至","专业人才","公司","新鲜","控制器","目的地","统计","举例","地域","大白","核心","日新月异","机制","在","许可证","但","插","大步","全球化","下单","四足","车辆","等","更加","带动","运营","新闻报道","声波","着","做","参考","发表","2016","保障","潜移","里会","斯坦福大学","电气","上个","于","越来","同理","进步","超过","嵌入","重要","福大","其实","不过","卧室","基本","一个月","潜移默化","地上","迅速","苹果","出现","零部件","据库","这么","上市","是不是","科幻电影","可为","不想","元素","真实","叠","10","送到","，","在生活中","光靠","问题","人","地图","地来","劳动力","东西","时至今日","助推","这套","动机","完","情况","活动","人数","厨房","同一","程度","水下","集合","家用","多万","应用软件","活跃","扫地","几个","做法","到","干","星球","区域","最终","缺口","不断完善","跑","5","？","劳动",".","出","给出","映射","2","目标","通信","动态","加","技术","更会","发布","我们","总而言之","有","买个","放到","源码","。","载体","有志","通过","激光","推动","得到","1164","身影","各","维基百","科技","台球","突飞","初期","一天","并","大战","index","ai","2025","支持","研发","毛巾","新","开发工具","基本功能","课程","由示","如何","和","小时","上边","上个月","驾驶","来看","做到","人形","随着","庞大","日常","就是","而","百科","立体","没有","四大","以","及时","第三个","为了","动力","通常","地","提供","送餐","这是","躲避","关于","体验","不仅","真的","逐年","沉淀","乐趣","绝对","一切","热门","简单","传感","大学","对","京东","当时","很多","计算机","生态系","乐意","当然","度","扩大","而生","操作","快递","也许","分","词汇","要","看看","等等","层面","起","既然","领域","智慧","餐厅","他们","所有人","都","二个","买面","增长","基本上","商品","针对","产品","测试","拖地","预计","提出","几十","成果","后期","差不多","物体","想法","时候","斯坦福","十年","怀揣","推进","安全","快速","及时处理","相信","变形","陪","工序","存储","场景","熟悉","减速","某","类似","工具","超声","使用","打标","信息","重新","基于","严峻","问答","完善","释放","线","红外","构建","可能","最高","第一次","许可","以及","做饭","数据库","国内","此时","指示灯","wiki","移动","张图","肩膀","正式","家庭环境","他","的","“","如果","算是","呢","接触","宠物","应用","别人","仿生","聊天","自动化","视觉","personal","机器人","大","逐渐","有人","城市","学术","正如","媒体","远","讨论","也","员","超声波","迅猛"," ","至今","驱动","机械","发展","这一波","增长速度","摆放","特点","高校","分析","金刚","同样","无论","与","普遍","最佳","原型","怎么样","了","全人","感器","减速机","robot","其中","借助","诞生","备货","感知","来讲","最","拉开","它","这","全人类","其他","情景","状况","分钟","上去","里边","报道","驱动器","数字","数据","专业","实时","多项","拉开序幕","呈","工业生产","周围环境","成为","陆续","顺利","缩短","同时","具备","最近","不知","很","b","电机","人才","后","必将","会","代","除此之外","尽量","做出","软件","移动机器人","不觉","传感器","帮助","被","收拾","新闻","2000","、","一起","这里","之","不同","仓储","达到","网站","来","分享","那","做成","供给","图中","一些","绝大","不","尝试","绝大部分","设计","ros2","搭载","有没有","容易","开始","机器","每个","清晰","；","起来","付款","法规","最后","linux","华为","页面","法律法规","40","是","你","1463","狗","高效","距离","当","交通","井喷","案例","玩耍","商业","从","剪头发","资金","引擎","面对","—","之外","discourse","研究","清扫","下来","商业化","关注","已经","默化","应该","大部分","衣服","新鲜事","发现","找到","部件","洗衣","用","answers","大有可为","一系","将要","得","软件系统","条","只能","革命","吃","分拣","发状","250","作为","长远","查看","索引","方式","算法","保证","一大","无论是","复用","横跨","检测","统统","仓库","每","代表","除了","判断","用户","越来越","轰动","相机","方面","用于","趋势","来到","伴随","现在","合适","极为","外观","生态","手上","用到","向前","时代","圈","突然","联合","装配","模块化","：","万人","米","某个","造","什么样","整理","排名","一种","20","熨烫","不知不觉","完全","状","模块","基本功","第三","事情","因","跨平台","访问","各种","packages","站","巨人","科幻","里面","这袋","宽松","为例","一家","时间","平台","智能","电影","工业","有力","除此","下载","浪潮","三个","浏览","多","将","一大步","包","可以","pr2","几年","自动","所以","近几年","局部","相关","行驶","按照","只是","几十年","杂物","高","半个","主角","a","业生","左右","围绕","正在","15","虽然","家庭","已有","俗称","然后","只","类型","更为","广泛","改变","效率","从中","25","收货","头发","买米","生态系统","小","四项","生活","人类","需要","任何","而言","结晶","设备","无聊","礼让","行业","并且","系统","超车","用多大","提到","生产","背后","ros","法律","实现","100","识别","障碍物","功能","算机","星球大战","得以","浏览量","特性","明智","复合","大家","对于","实验","打","不要","不断","年前","前夜","青年","开发","框架","时期","出来","快","激光雷达","答案","太远","2015","太","柔性","息息相关","之后","曲线","很快","包装","整合","新月","突发状况","频繁","汽车","根据","1000","看到","隔天","无疑","不多","现状","制造","月","国家","多个","以叠","windows","完成","工厂","当中","才","体系","还","80","更","给","上图","十几","标准","控制算法","零","执行","缺少","要求","深知","访问量","论坛","哪里","伺服","序幕","电路","维基","目的","性能","第一","怎么","服务","木头","本身","车","涉及","比如","org","新增","两个","指示","之一","活跃度","那刻","线板","而且","想象","部分","复杂","多媒体系统","全球","之内","操控","这个","450","说明","回答","路面","不到","开源","先","实际","采购","当今","一张","一次","繁荣","总称","周围","亿元","人才需求","直接","典型","过程","部署","买","人工","货架","但是","计算","团队","突发","或者","热点","2007","肯定","就","你家","控制","上","提高","家","为什么","个","了如指掌","智能化","手机","身边","大部","伺服电机","万左右","障碍","猛进","需求","年","促使","所有","因为","爆发","主要","这款","强悍","一个","大量","处理","中","向前走","这样","最为","第二","立体仓库","命令","轮子","友好","入库","么","知道","水量","分配","款","思考","社区","此","以上","臂","人工智能","次数","如此","独立","一系列","频率","丰富","记录","多媒体","律法","依然","150","看似","一款","率","全新","经历","说干就干","开设","风力","教器","行人","比如说","十几种","精致","ros1","各项","脑海","非常","第二个","为","一套","低","各种各样","变形金刚","实验室","有望","资源","动作","雷达","只要","总体","把","一群","由","突飞猛进","充足","概念","维基百科","个人","agv","系列","不是","讲","组成","不断丰富","有限","视频","速度","去","效果","车道","各样","这些","当天"],"title":"智能机器人发展与现状","title_tokens":["现状","机器","与","发展","智能","机器人"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_1","text":"智能机器人正在改变着我们的生活，想象这样一种场景。 也许不知不觉的某一天，我们就会发现类似这样的机器人会真实出现在生活当中。 科技的发展日新月异，智能机器人也突飞猛进，伴随机器人发展而生的机器人操作系统，也是机器人重要的发展动力之一。","text_tokens":["科技","突飞","一天","就","一种","发现","不知不觉","正在","的","操作系统","重要","之一","猛进","想象","改变","机器人","机器","而生","也","出现","日新月异","操作","这样"," ","在","新月","生活","也许","不知","发展","突飞猛进","智能","真实","场景","会","某","我们","类似","是","，","系统","。","不觉","当中","着","伴随","动力"],"title":"智能机器人发展与现状","title_tokens":["现状","机器","与","发展","智能","机器人"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_2","text":"提到智能机器人，大家脑海里会映射出什么样的情景呢？ 是不是会有很多科幻电影中变形金刚、大白机器人、星球大战等场景呢？ 智能机器人这个概念，只是一个科幻词汇么？当然不是的，其实在我们身边，已经有越来越多智能机器人出现，我们来看看他们都在哪里？","text_tokens":["里会","星球大战","什么","只是","来","已经","哪里","什么样","情景","大家","大战","越来","的","其实","脑海","呢","身边","很多","星球","变形金刚","机器人","当然","机器","？","科幻","中","出","变形","大白"," ","这个","映射","是不是","科幻电影","在","概念","智能","不是","会","电影","场景","一个","词汇","我们","看看","有","金刚","等","越来越","，","么","多","提到","出现","他们","、","都"],"title":"智能机器人举例","title_tokens":["智能","机器人","举例","机器"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_3","text":"先来看一个大家最熟悉的一个类型——扫地机器人。现在的扫地机器人，除了可以完成扫地、拖地这样一些基本功能之外，还搭载了激光雷达、相机、红外等十几种传感器。 一个全新的扫地机器人虽然是第一次来到你家，但是它可能用到 5 分到 10 分钟时间，很快就可以通过它的传感器对你的家庭环境了如指掌，也就是把实际的家庭环境做成了一张地图，这样他就会知道哪里是卧室，哪里是餐厅，哪里是厨房，不同的区域用多大的风力，用多大的水量来去清扫最为合适，它都会智能化地来做判断。 除此之外，它还得知道怎么样去躲避各种障碍物，比如说家里面的宠物、地上摆放的插线板，各种各样的杂物等等。 所以看似非常小的一个扫地机器人，其实已经是一个很智能化的家用设备了，正在潜移默化地改变着我们的生活。","text_tokens":["障碍物","功能","地","不同","环境","来","躲避","大家","做成","几种","一些","传感","对","激光雷达","搭载","机器","很快","分","插","等等","是","你","等","完成","着","做","餐厅","还","—","都","潜移","十几","之外","清扫","已经","默化","哪里","第一","怎么","比如","拖地","其实","得","卧室","线板","基本","潜移默化","地上","熟悉","除了","10","判断","先","实际","一张","一次","，","相机","来到","现在","红外","合适","可能","地图","第一次","用到","地来","但是","厨房","家庭环境","他","就","你家","家用","家","的","扫地","基本功","了如指掌","智能化","到","宠物","区域","障碍","各种","机器人","5","一个","里面","也","这样"," ","时间","最为","智能","除此","摆放","我们","知道","水量","。","怎么样","了","可以","通过","激光","感器","所以","最","它","杂物","看似","全新","分钟","风力","正在","比如说","十几种","虽然","家庭","非常","基本功能","各种各样","类型","改变","雷达","来看","小","把","很","生活","会","设备","就是","除此之外","去","传感器","用多大","各样","、"],"title":"扫地机器人","title_tokens":["机器人","机器","扫地"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_4","text":"第二个案例，虽然大部分人在生活中不会直接接触，但却和每一个人息息相关，那就是自动化仓储。 这是京东某个实际部署运营的一套自动化的仓库，在里面可以看到各种各样的机器人，比如工业机械臂、移动机器人等等，这套立体仓库当中大量的货架也是自动化的，这就是一个典型的机器人应用场景。 之前有一个关于京东的新闻报道，里边讲到，从我们下单那刻开始，到商品分拣出来放到快递员手上，只需要20分钟。比如我们要买个手机，下单付款，20分钟之后，这个手机已经从这么庞大的仓库中顺利找到，并且完成了包装、打标、分配等一系列工序。这样，我们在绝大部分城市，基本都可以体验到下单之后，当天或者隔天收货的体验，为什么它可以做到如此高效，就是因为背后这一套由机器人组成的自动化系统，借助大数据的分析，甚至可以做到在你下单之前，平台就知道你将要买什么东西。比如说你会按照一个月的频率买米买面，那平台就可以预测到上个月你买的米应该快吃完了，然后就会在距离你家最近的一个仓库里面备货。 当你下单之后，这袋米可能半个小时送到你手上了。","text_tokens":["仓储","什么","不会","这是","关于","体验","预测","却","那","之前","绝大","闻报","出来","快","甚至","当天","京东","绝大部分","开始","息息相关","之后","机器","包装","快递","在","付款","但","看到","要","隔天","等等","下单","是","你","等","运营","高效","距离","新闻报道","当","案例","完成","当中","从","都","二个","买面","已经","应该","大部分","上个","找到","商品","比如","一系","将要","那刻","部分","基本","一个月","吃","分拣","这个","这么","工序","仓库","每","场景","送到","实际","打标","，","在生活中","人","可能","手上","直接","典型","东西","部署","买","这套","动机","完","货架","米","某个","移动","或者","就","你家","20","的","为什么","手机","到","接触","应用","大部","自动化","各种","机器人","因为","大","城市","一个","里面","大量","也","员","中","这样"," ","这袋","机械","第二","平台","工业","立体仓库","我们","有","分析","买个","放到","分配","知道","。","了","可以","臂","自动","如此","一系列","频率","借助","相关","备货","按照","它","这","半个","分钟","里边","报道","数据","比如说","虽然","第二个","然后","只","一套","和","各种各样","小时","上个月","顺利","收货","买米","做到","最近","生活","由","需要","庞大","系列","讲","组成","会","就是","并且","立体","移动机器人","系统","各样","背后","新闻","、"],"title":"自动化仓储","title_tokens":["自动","自动化","仓储"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_5","text":"第三个案例，那就是当今最为热门的技术之一——自动驾驶。 自动驾驶汽车也是典型的移动机器人系统，为了保证绝对安全的驾驶过程，汽车上装配了非常多的传感器，以及极为复杂的控制算法。 视频中我们看到的是华为自动驾驶系统在实际路面上测试的效果，自动驾驶汽车通过多个相机、雷达、超声波，实时构建周围环境的三维信息，不仅可以动态识别路面上的行人车辆、车道线、交通指示灯等，还可以安全完成超车、会车、跟车、转向等重要功能，同时对突发状况也可以及时处理，比如躲避突然出现的车辆、礼让行人等，最终自动行驶入库，把我们安全顺利的送到目的地。 虽然自动驾驶相关的技术和法律法规还在不断完善中，但是相信有一天我们每个人都可以体验自动驾驶的乐趣，而且这一天不会太远。","text_tokens":["法律","识别","跟车","功能","转向","环境","不会","躲避","体验","不仅","那","乐趣","不断","绝对","热门","三维","传感","对","太远","目的地","机器","每个","在","突发状况","法规","汽车","看到","华为","法律法规","是","车辆","等","多个","交通","案例","声波","完成","还","—","都","控制算法","目的","车","比如","测试","重要","指示","之一","而且","复杂","安全","发状","及时处理","相信","出现","算法","保证","路面","送到","超声","实际","当今","信息","，","相机","周围","完善","线","极为","构建","人","典型","以及","过程","指示灯","突然","动机","装配","但是","移动","突发","控制","上","的","第三","最终","不断完善","机器人","也","中","超声波","处理"," ","最为","动态","技术","我们","有","三个","入库","。","多","了","可以","通过","感器","自动","相关","行驶","律法","这","一天","状况","行人","实时","虽然","非常","和","周围环境","雷达","顺利","驾驶","同时","把","会","就是","视频","礼让","移动机器人","系统","效果","超车","传感器","车道","及时","第三个","为了","、"],"title":"自动驾驶","title_tokens":["自动","驾驶"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_6","text":"机器人的发展横跨几十年，经历了三个重要时期。 2000年前，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 2015年之后，智能机器人市场迅速爆发，到2025年，国内人工智能市场有望达到1164亿元，而作为人工智能重要载体的机器人，市场更会达到1463亿元。 行业的快速发展，必将带动大量专业人才的需求，人才缺口也将逐年扩大，2025年，预计国内机器人行业的人才缺口将超过450万，人工智能方面的缺口更会达到1000万。 面对如此严峻的人才需求，国内各高校从2016年起，陆续开设机器人和人工智能专业，为人才的供给提供有力保障。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角。","text_tokens":["算机","提供","送餐","达到","自主","环境","这是","供给","逐年","万","年前","不断","前夜","市场","开发","操作系统","时期","传感","专业人才","对","计算机","2015","太","控制器","之后","机器","扩大","操作","汽车","1000","是","四足","1463","更加","等","带动","狗","层面","工厂","井喷","起","从","面对","2016","保障","更","执行","缺少","要求","关注","伺服","电气","序幕","于","服务","超过","重要","预计","提出","几十","不过","之一","十年","只能","快速","迅速","操控","作为","出现","450","横跨","检测","减速","，","方面","严峻","亿元","释放","人才需求","劳动力","过程","国内","此时","时代","人工","计算","但是","热点","正式","控制","完全","状","的","智能化","到","应用","伺服电机","仿生","需求","缺口","年","视觉","机器人","逐渐","大","爆发","主要","劳动","大量","也"," ","最为","驱动","发展","智能","工业","有力","技术","更会","命令","我们","高校","三个","最佳","。","多","思考","了","载体","将","人工智能","减速机","感器","自动","1164","如此","局部","各","丰富","感知","几十年","按照","依然","拉开","这","高","主角","并","业生","经历","驱动器","ai","数字","教器","2025","开设","专业","家庭","俗称","拉开序幕","呈","工业生产","由示","为","课程","和","类型","有望","成为","陆续","动作","驾驶","人类","随着","而言","电机","后","agv","设备","必将","不断丰富","有限","人才","就是","而","行业","软件","没有","系统","传感器","帮助","生产","2000","、","动力"],"title":"智能机器人发展","title_tokens":["智能","机器人","发展","机器"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_7","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是机器人操作系统。","text_tokens":["团队","已经","斯坦福大学","或者","对于","那","越来","上","针对","青年","的","开发","操作系统","重要","福大","大学","非常","尝试","答案","如何","斯坦福","机器人","复杂","机器","一个","这个","操作","给出","一群","智能","不是","技术","就是","是","越来越","，","高效","系统","。","层面","完成","可以","有志","问题","人","独立"],"title":"机器人操作系统","title_tokens":["机器","操作系统","操作","系统","机器人"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros","text":"2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣、做饭、收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法：既然自己做不到，那为什么不联合所有人一起干呢？如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在这几个图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面，却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS怀揣“提高机器人软件复用率”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。","text_tokens":["实现","100","功能","”","得以","自己","什么","分享","真的","还是","大家","那","实验","打","图中","却","一些","复合","一切","开发","框架","出来","不","甚至","今日","当时","很多","设计","有没有","容易","柔性","机器","而生","很快","在","最后","要","看到","大步","你","是","等","以叠","玩耍","完成","既然","层面","领域","剪头发","做","资金","才","他们","还","—","所有人","都","更","标准","研究","深知","已经","衣服","电路","性能","第一","服务","找到","木头","涉及","洗衣","用","部件","重要","一系","后期","物体","想法","时候","条","软件系统","而且","怀揣","复杂","之内","快速","这个","苹果","零部件","陪","一大","无论是","不想","复用","横跨","统统","不到","叠","类似","繁荣","一次","基于","，","轰动","用于","光靠","可能","外观","第一次","向前","做饭","时至今日","此时","圈","联合","动机","：","但是","同一","移动","2007","水下","肯定","就","熨烫","整理","上","提高","家","的","应用软件","个","为什么","几个","如果","“","事情","手机","因","干","呢","应用","别人","聊天","各种","年","personal","所有","机器人","因为","促使","有人","学术","这款","强悍","5","一个","？","也","处理","向前走","中","这样"," ","为例","至今","机械","2","目标","发展","平台","我们","有","同样","无论","社区","款","普遍","。","原型","一大步","了","多","可以","pr2","臂","robot","推动","独立","一系列","其中","所以","身影","诞生","台球","一起","一款","这","初期","率","并","分钟","说干就干","精致","专业","虽然","毛巾","低","只","一套","和","实验室","广泛","成为","效率","从中","头发","只要","人形","很","充足","个人","系列","组成","无聊","就是","代","做出","软件","没有","移动机器人","系统","帮助","收拾","ros","、"],"title":"ROS的诞生","title_tokens":["ros","的","诞生"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros_1","text":"提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["通常","实现","功能","之","一步","自己","特性","明智","分享","来","c","自身","大家","那","做成","不要","沉淀","嵌入式","创意","开发","简单","公司","对","设计","ros2","很多","生态系","机器","整合","核心","机制","；","在","许可证","linux","最后","汽车","全球化","制造","是","windows","智慧","案例","商业","领域","从","引擎","做","着","体系","还","他们","给","都","更","零","下来","商业化","越来","同理","本身","进步","比如","产品","新增","嵌入","成果","全球","多媒体系统","部分","推进","这个","长远","上市","、","代表","复用","工具","开源","采购","使用","总称","重新","越来越","，","生态","许可","直接","向前","模块化","：","造","肩膀","集合","提高","就","上","完全","家","的","模块","做法","智能化","跨平台","到","应用","别人","各种","促使","跑","机器人","远","站","正如","媒体","巨人","一个","向前走","也","中","宽松","这样"," ","一家","时间","通信","目标","发展","平台","智能","工业","技术","我们","轮子","有","特点","友好","社区","。","将","多","了","此","可以","全人","来讲","多媒体","全人类","这","率","并","a","上去","围绕","ros1","支持","新","已有","开发工具","多项","非常","和","各种各样","缩短","同时","具备","做到","生态系统","把","人类","由","b","人才","结晶","不是","会","组成","就是","尽量","软件","四大","系统","以","被","各样","这些","ros","这里","一起"],"title":"ROS的特点","title_tokens":["特点","ros","的"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros_2","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。","text_tokens":["功能","不同","什么","网站","浏览量","这是","关于","大家","万","开发","教程","绝大","棒","开发者","快","不","绝大部分","很多","新鲜","乐意","度","统计","地域","曲线","机器","每个","核心","整合","；","起来","在","频繁","根据","看到","无疑","页面","等等","不多","月","40","国家","是","等","从","参考","80","发表","给","都","上图","discourse","增长","基本上","访问量","论坛","已经","大部分","维基","新鲜事","越来","org","比如","answers","大有可为","重要","其实","提出","两个","差不多","活跃度","全球","基本","部分","快速","250","革命","查看","作为","索引","据库","方式","说明","回答","代表","可为","存储","元素","每","使用","用户","越来越","，","问答","趋势","现在","问题","最高","人","数据库","助推","wiki","情况","：","活动","人数","万人","张图","程度","就","排名","20","上","多万","活跃","的","几个","算是","到","呢","应用","万左右","访问","大部","各种","packages","清晰","机器人","大","？","讨论",".","中","一个","迅猛"," ","最为","这一波","发展","加","增长速度","发布","我们","下载","总而言之","有","浪潮","浏览","社区","源码","。","包","几年","了","多","可以","以上","次数","通过","得到","其中","近几年","维基百","相关","记录","150","其他","这","index","左右","正在","研发","数据","各项","15","新","非常","和","更为","资源","上边","25","总体","来看","四项","很","日常","任何","维基百科","而言","就是","速度","百科","这些","ros","这里","、","动力"],"title":"ROS的社区","title_tokens":["ros","的","社区"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/","text":"智能机器人开发平台介绍 机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 以操作系统为例，应用最为广泛的ROS系统在不断迭代，不过在智能时代洪流的冲击下，还是涌现出一些问题。 ROS的一些问题 ROS逐渐成为标准，大量机器人应用被贡献到社区，虽然提高了代码的通用性，但却难以发挥硬件的完整性能；同时，大量应用聚焦在机器人运动控制与定位导航等基础功能，智能化的应用较少；此外，在软件资源格外丰富的社区中，还缺少系统化的内容，帮助用户快速实现相关资源的复用。 很多开发者都在魔改ROS，去适配自己的机器人，所以机器人的研发成本非常高。从机械选型、系统定制、算法开发到数据闭环，每个过程都要付出高昂的成本，在这么高昂的成本下，做机器人是非常困难的一件事情。 在算法层面，机器人算法仍处于早期阶段，很多感知算法还停留在理论阶段，无法服务与实际场景，机器学习发展迅速，不过对于很多开发者来讲，数据的采集、标注、训练都是一个庞大的工作量，部署运行不仅十分困难，还要消耗大量的算力成本。 智能机器人涉及的领域和方法较多，目前整体的学习成本偏高，想要实现智能化应用的难度就更高，问题的出现，也带来了机遇与挑战。 地平线机器人开发平台 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。 这套机器人开发平添的目的是打造软硬协同、极致优化、丰富易用的机器人开发组件与生态，由图中这几个部分组成，我们一一来看下。 平台的底层主要依托于地平线AIOT边缘AI芯片——旭日3和旭日5，内部集成了地平线最先进的伯努利2.0架构的AI 引擎，可提供 5TOPS 以上的等效算力。 如此强大的算力支持，保证了智能机器人开发的基础条件。 芯片是基础建设，在此之上更重要的是一系列软件设施，重点就是我们课程的主角——TogetherROS机器人操作系统。 正如我们电脑上的windows和linux，一套优质的操作系统，是上层应用软件开发的必要条件，TogetherROS在ROS系统的基础上，进行了大量的改良和优化，可以为开发者提供高效实用的系统环境。 在此之上，平台还会提供大量的机器人参考算法和应用功能示例，比如常用的建图、定位、导航，还有智能机器人中至关重要的智能化功能，比如一些基础算法，图像分类、图像分割、目标检测等，还有应用功能，人脸检测、人体跟踪、骨骼点检测、手势识别、语音处理等等，提供基于大量数据训练的模型，借助底层AI引擎的支持，可以快速、稳定的实现各种各样的智能应用。 同时平台还会配套一系列加速机器人开发的工具链，比如代码编写工具、系统调试工具、数据标注和训练工具等。 古月居和地平线也会共同打造机器人开发者社区，持续分享技术内容，沉淀更多开发者的智慧，更多机器人产业中的合作伙伴也会陆续加入，共同打造最为丰富的机器人开发者套件，建设智能机器人开发的生态圈。 在这个机器人开发平台之中，最为重要的就是TogetherROS系统了，起到了承上启下、连接各项功能的作用，我们将通过一系列课程为大家深入浅出的介绍。 TogetherROS的特点 在ROS系统庞大社区资源的基础上，结合智能机器人的发展和产业需求，TogetherROS应运而生。 TogetherROS有三个核心特点： 开源兼容，秉承开源精神的力量 TogetherROS和ROS系统一样，也是一套完全开源的系统，所有开发者都可以继续二次开发，接口方面和ROS2完全兼容，ROS2原有的功能也都可以继续复用，已有的机器人代码可以十分便利的迁移过来。 极致性能优化 相比ROS的通用化，TogetherROS更多考虑的是如何充分挖掘底层硬件的性能，比如提高数据传输的效率、增强人工智能处理的能力，在后续的使用案例中，大家可以充分感受到这一点。 丰富易用的软硬件组件 比如各种各样的传感器和开发套件，再比如算法模块、感知应用、机器人功能，还有提高开发效率的各种编程、部署工具。 TogetherROS系统框架 具体展开来看，TogetherROS的系统框架如图所示，其中深蓝色部分为地平线优化、新增的模块，其他是目前复用ROS2中的模块： 在系统通信的中间件部分，保留了ROS2中原本针对不同DDS的通信框架，与ROS2 foxy版本的接口完全兼容，方便复用ROS丰富工具包进行原型验证，在此之上增加了“zero-copy” 零拷贝 的通信机制，降低大数据传输时延和系统资源消耗。 在组件功能部分，TogetherROS提供“hobot CV” 视觉加速库 ，软硬件协同，可以提升CV算子性能、降低系统资源消耗；针对AI模型的推理，封装了“hobot_dnn” 功能包，可以调用底层芯片的AI引擎，简化板端AI开发与部署，释放BPU的算力。可以支持丰富的机器人传感器型号，比如相机、雷达、IMU、GPS等，节省驱动开发的时间，可以聚焦在机器人应用开发上。 除此之外，TogetherROS还会提供丰富的软件调试和性能调优工具，方便用户定位问题和优化系统性能，在具体的行业应用中，还支持最小化和模块化的剪裁，利于部署在资源受限的嵌入式产品中。 总之，TogetherROS出于ROS，又不止于ROS，ROS原有的功能依然继承，重点是借助硬件能力，充分优化系统的性能，提高机器人开发的效率。","text_tokens":["深入浅出","内容","”","自己","建设","增加","环境","调用","配套","还是","却","还有","等效","嵌入式","下","操作系统","分类","开发者","软硬件","平添","边缘","核心","机制","稳定","在","但","过来","总之","等","必要条件","通用","深入","做","参考","工具包","合作伙伴","上层","于","后续","嵌入","重要","原本","传输","不过","结合","拷贝","迅速","foxy","出现","这么","至关重要","程式","十分困难","原有","，","运动","简化","copy","问题","人脸","这套","型号","推理","出于","应用软件","几个","社区资源","闭环","到","困难","建图","套件","5","链","aiot","继续","通信","目标","技术","我们","有","。","大脑","通过","聚焦","togetherros","感受","ai","研发","支持","时延","完整","课程","如何","和","数据传输","格外","优质","共同","停留","付出","来看","电脑","-","庞大","持续","就是","架构","手势","分割","以","旭日","早期","标注","一一","伙伴","精神","节省","难度","hobot","提供","便利","不仅","沉淀","传感","易用","很多","集成","贡献","操作","验证","成本","要","等等","层面","领域","条件","智慧","降低","所示","阶段","都","十分","洪流","兼容","挖掘","合作","针对","产品","应运","秉承","dnn","快速","通用化","推出","再","产业","场景","发挥","工具","增强","整体","接口","使用","信息","基于","加入","适配","释放","无法","2022","加速","zero","版本","正式","还会","强大","的","一点","展开","“","一件","板端","应用","视觉","机器人","逐渐","二次开发","大","正如","训练","方法","也"," ","驱动","冲击","机械","发展","调试","特点","之上","深蓝","与","原型","了","感器","其中","借助","感知","来讲","最","由图","受限","其他","这","3","2.0","数据","人体","imu","一样","成为","陆续","优化","cv","同时","迁移","导航","电机","模型","涌现","非常复杂","会","最小","除此之外","软件","考虑","传感器","帮助","被","骨骼","定制","、","不同","现出","分享","起到","处于","包括","一些","深蓝色","ros2","机器","每个","难以","；","带来","linux","介绍","定位问题","是","6","少","高效","必要","案例","基础","从","引擎","—","之外","机遇","硬件","不止","一系","利于","相比","古月","作为","算法","保证","复用","检测","依托","先进","用户","方面","相机","极致","生态","改","gps","时代","模块化","进行","：","示例","至关","算子","完全","模块","二次","可","事情","剪裁","各种","提升","作用","为例","时间","平台","智能","除此","dds","常用","三个","多","将","包","设施","可以","所以","相关","高","主角","语音","又","高昂","代码","虽然","已有","工作量","广泛","系统化","力量","_","效率","连接","迭代","行业","封装","库","系统","定位","偏高","ros","运行","通用性","实现","识别","功能","能力","蓝色","对于","大家","不断","开发","框架","底层","方便","最小化","软硬","充分","中间","月","涌现出","承上启下","芯片","地平","windows","bpu","还","更","给","标准","主控","应运而生","零","执行","缺少","选型","性能","目的","服务","软件资源","涉及","比如","新增","采集","部分","复杂","较","这个","组件","调优","算力","开源","实际","据传","继承","过程","部署","人工","计算","中间件","提高","定位导航","控制","就","上","智能化","工作","如图所示","仍","生态圈","需求","年","所有","目前","主要","一个","大量","处理","中","最为","重点","协同","编写","社区","改良","编程","保留","以上","此","人工智能","伯努利","挑战","如此","还要","一系列","地平线","5tops","丰富","规控","打造","依然","系统资源","想要","全新","内部","学习","图像","各项","之中","跟踪","非常","理论","为","一套","各种各样","居","资源","动作","雷达","魔","消耗","实用","系列","组成","点","一代","去","具体","各样","此外"],"title":"智能机器人开发平台介绍","title_tokens":["开发","机器","介绍","平台","智能","机器人"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#_1","text":"机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 以操作系统为例，应用最为广泛的ROS系统在不断迭代，不过在智能时代洪流的冲击下，还是涌现出一些问题。","text_tokens":["时代","主控","感知","现出","硬件","进行","：","环境","计算","执行","规控","洪流","还是","包括","下","一些","不断","的","数据","操作系统","传感","非常","不过","应用","各种各样","各种","广泛","部分","机器人","复杂","动作","一个","机器","作为","操作","迭代"," ","为例","算法","最为","驱动","在","冲击","电机","平台","智能","涌现","非常复杂","程式","等等","问题","是","涌现出","信息","等","，","软件","系统","。","以","传感器","大脑","层面","各样","感器","ros","、"],"title":"智能机器人开发平台介绍","title_tokens":["开发","机器","介绍","平台","智能","机器人"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#ros","text":"ROS逐渐成为标准，大量机器人应用被贡献到社区，虽然提高了代码的通用性，但却难以发挥硬件的完整性能；同时，大量应用聚焦在机器人运动控制与定位导航等基础功能，智能化的应用较少；此外，在软件资源格外丰富的社区中，还缺少系统化的内容，帮助用户快速实现相关资源的复用。 很多开发者都在魔改ROS，去适配自己的机器人，所以机器人的研发成本非常高。从机械选型、系统定制、算法开发到数据闭环，每个过程都要付出高昂的成本，在这么高昂的成本下，做机器人是非常困难的一件事情。 在算法层面，机器人算法仍处于早期阶段，很多感知算法还停留在理论阶段，无法服务与实际场景，机器学习发展迅速，不过对于很多开发者来讲，数据的采集、标注、训练都是一个庞大的工作量，部署运行不仅十分困难，还要消耗大量的算力成本。 智能机器人涉及的领域和方法较多，目前整体的学习成本偏高，想要实现智能化应用的难度就更高，问题的出现，也带来了机遇与挑战。","text_tokens":["通用性","实现","难度","功能","内容","自己","处于","不仅","对于","却","下","开发","开发者","很多","贡献","机器","每个","难以","；","成本","在","带来","但","要","是","等","少","通用","层面","领域","基础","从","做","阶段","还","更","都","标准","机遇","硬件","十分","缺少","选型","性能","服务","软件资源","涉及","不过","采集","较","快速","迅速","出现","这么","算法","复用","场景","发挥","十分困难","算力","整体","实际","用户","，","运动","适配","无法","问题","改","过程","部署","提高","定位导航","控制","就","的","智能化","事情","闭环","到","一件","工作","应用","仍","困难","机器人","逐渐","目前","训练","方法","大量","一个","也","中"," ","机械","发展","智能","社区","与","。","多","了","挑战","聚焦","还要","所以","丰富","相关","感知","来讲","高","想要","学习","高昂","代码","研发","数据","虽然","非常","理论","完整","工作量","和","系统化","成为","资源","格外","停留","同时","付出","魔","消耗","庞大","导航","软件","去","系统","定位","早期","标注","偏高","帮助","被","定制","ros","、","运行","此外"],"title":"ROS的一些问题","title_tokens":["问题","ros","的","一些"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#_2","text":"2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。 这套机器人开发平添的目的是打造软硬协同、极致优化、丰富易用的机器人开发组件与生态，由图中这几个部分组成，我们一一来看下。 平台的底层主要依托于地平线AIOT边缘AI芯片——旭日3和旭日5，内部集成了地平线最先进的伯努利2.0架构的AI 引擎，可提供 5TOPS 以上的等效算力。 如此强大的算力支持，保证了智能机器人开发的基础条件。 芯片是基础建设，在此之上更重要的是一系列软件设施，重点就是我们课程的主角——TogetherROS机器人操作系统。 正如我们电脑上的windows和linux，一套优质的操作系统，是上层应用软件开发的必要条件，TogetherROS在ROS系统的基础上，进行了大量的改良和优化，可以为开发者提供高效实用的系统环境。 在此之上，平台还会提供大量的机器人参考算法和应用功能示例，比如常用的建图、定位、导航，还有智能机器人中至关重要的智能化功能，比如一些基础算法，图像分类、图像分割、目标检测等，还有应用功能，人脸检测、人体跟踪、骨骼点检测、手势识别、语音处理等等，提供基于大量数据训练的模型，借助底层AI引擎的支持，可以快速、稳定的实现各种各样的智能应用。 同时平台还会配套一系列加速机器人开发的工具链，比如代码编写工具、系统调试工具、数据标注和训练工具等。 古月居和地平线也会共同打造机器人开发者社区，持续分享技术内容，沉淀更多开发者的智慧，更多机器人产业中的合作伙伴也会陆续加入，共同打造最为丰富的机器人开发者套件，建设智能机器人开发的生态圈。 在这个机器人开发平台之中，最为重要的就是TogetherROS系统了，起到了承上启下、连接各项功能的作用，我们将通过一系列课程为大家深入浅出的介绍。","text_tokens":["实现","深入浅出","识别","功能","内容","提供","建设","环境","分享","起到","配套","大家","还有","等效","沉淀","下","一些","开发","操作系统","底层","分类","开发者","易用","集成","软硬","机器","平添","边缘","操作","稳定","在","带来","linux","介绍","等等","月","是","等","6","必要条件","承上启下","芯片","高效","地平","windows","层面","条件","必要","基础","智慧","引擎","参考","深入","—","给","更","合作伙伴","上层","目的","于","合作","比如","重要","一系","部分","快速","古月","这个","至关重要","推出","算法","组件","保证","检测","产业","依托","工具","算力","先进","基于","，","加入","极致","人脸","生态","2022","加速","这套","进行","示例","正式","至关","还会","上","强大","应用软件","的","几个","可","智能化","应用","生态圈","各种","年","建图","机器人","套件","主要","正如","5","大量","训练","处理","中","aiot","链","也"," ","作用","最为","目标","平台","智能","技术","我们","重点","常用","调试","之上","协同","编写","与","改良","社区","。","多","将","了","以上","此","设施","可以","通过","伯努利","如此","一系列","地平线","togetherros","5tops","借助","丰富","最","打造","由图","这","主角","3","语音","全新","内部","2.0","图像","代码","ai","支持","数据","各项","之中","跟踪","为","课程","一套","人体","和","各种各样","居","优质","优化","共同","陆续","同时","来看","电脑","连接","实用","导航","模型","系列","组成","会","持续","就是","行业","架构","手势","软件","分割","点","一代","系统","一一","旭日","定位","标注","帮助","各样","骨骼","伙伴","ros","、"],"title":"地平线机器人开发平台","title_tokens":["地平线","开发","机器","地平","平台","机器人"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#togetherros","text":"在ROS系统庞大社区资源的基础上，结合智能机器人的发展和产业需求，TogetherROS应运而生。 TogetherROS有三个核心特点： 开源兼容，秉承开源精神的力量 TogetherROS和ROS系统一样，也是一套完全开源的系统，所有开发者都可以继续二次开发，接口方面和ROS2完全兼容，ROS2原有的功能也都可以继续复用，已有的机器人代码可以十分便利的迁移过来。 极致性能优化 相比ROS的通用化，TogetherROS更多考虑的是如何充分挖掘底层硬件的性能，比如提高数据传输的效率、增强人工智能处理的能力，在后续的使用案例中，大家可以充分感受到这一点。 丰富易用的软硬件组件 比如各种各样的传感器和开发套件，再比如算法模块、感知应用、机器人功能，还有提高开发效率的各种编程、部署工具。","text_tokens":["功能","能力","便利","大家","还有","开发","底层","传感","开发者","易用","软硬件","ros2","软硬","机器","核心","在","充分","过来","是","通用","案例","基础","更","都","应运而生","十分","硬件","兼容","性能","挖掘","比如","应运","后续","传输","结合","秉承","相比","通用化","算法","再","组件","复用","产业","工具","增强","开源","接口","使用","原有","，","方面","据传","极致","部署","人工","：","提高","上","完全","的","模块","一点","社区资源","二次","到","应用","需求","各种","所有","机器人","二次开发","套件","也","处理","中","继续"," ","发展","智能","特点","有","三个","社区","编程","。","多","可以","人工智能","感器","togetherros","丰富","感知","这","感受","代码","数据","已有","一套","如何","和","各种各样","一样","资源","力量","数据传输","优化","效率","迁移","庞大","考虑","系统","传感器","各样","ros","、","精神"],"title":"TogetherROS的特点","title_tokens":["togetherros","特点","的"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#togetherros_1","text":"具体展开来看，TogetherROS的系统框架如图所示，其中深蓝色部分为地平线优化、新增的模块，其他是目前复用ROS2中的模块： 在系统通信的中间件部分，保留了ROS2中原本针对不同DDS的通信框架，与ROS2 foxy版本的接口完全兼容，方便复用ROS丰富工具包进行原型验证，在此之上增加了“zero-copy” 零拷贝 的通信机制，降低大数据传输时延和系统资源消耗。 在组件功能部分，TogetherROS提供“hobot CV” 视觉加速库 ，软硬件协同，可以提升CV算子性能、降低系统资源消耗；针对AI模型的推理，封装了“hobot_dnn” 功能包，可以调用底层芯片的AI引擎，简化板端AI开发与部署，释放BPU的算力。可以支持丰富的机器人传感器型号，比如相机、雷达、IMU、GPS等，节省驱动开发的时间，可以聚焦在机器人应用开发上。 除此之外，TogetherROS还会提供丰富的软件调试和性能调优工具，方便用户定位问题和优化系统性能，在具体的行业应用中，还支持最小化和模块化的剪裁，利于部署在资源受限的嵌入式产品中。 总之，TogetherROS出于ROS，又不止于ROS，ROS原有的功能依然继承，重点是借助硬件能力，充分优化系统的性能，提高机器人开发的效率。","text_tokens":["hobot","功能","”","不同","提供","增加","能力","蓝色","调用","嵌入式","框架","深蓝色","开发","方便","底层","传感","软硬件","ros2","最小化","软硬","机器","机制","验证","；","在","充分","中间","定位问题","总之","是","等","芯片","地平","降低","引擎","所示","bpu","还","之外","工具包","零","硬件","兼容","不止","性能","于","针对","比如","产品","新增","嵌入","原本","传输","拷贝","利于","部分","dnn","foxy","组件","复用","调优","工具","算力","接口","原有","用户","，","简化","据传","相机","copy","释放","问题","继承","gps","zero","加速","部署","模块化","版本","进行","：","中间件","型号","推理","提高","还会","算子","完全","上","出于","的","模块","展开","“","板端","应用","如图所示","剪裁","视觉","大","提升","目前","机器人","中"," ","时间","驱动","通信","除此","调试","dds","重点","之上","协同","深蓝","保留","与","。","原型","包","了","此","可以","感器","聚焦","其中","togetherros","地平线","借助","丰富","依然","系统资源","受限","其他","又","ai","支持","数据","时延","为","和","imu","数据传输","资源","_","优化","效率","雷达","cv","来看","-","消耗","模型","行业","最小","封装","除此之外","软件","库","系统","定位","具体","传感器","ros","、","节省"],"title":"TogetherROS系统框架","title_tokens":["togetherros","框架","系统"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/","text":"TogetherROS与ROS性能对比 ROS2 vs ROS1 先来看下两个大版本ROS的系统架构。 在这张图中，左侧是ROS1，右侧是ROS2，两者最明显的变化，就是Master。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery——自发现机制，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的DDS系统。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于共享内存的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了，Linux、windows、MacOS、RTOS都可以。 ROS2系统架构 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个ROS Middleware，简称RMW，也就是制定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 TogetherROS vs ROS2 TogetherROS就是在这样一个ROS2架构的基础上，继续进行了优化，原本DDS通信的部分依然保留，可以适配不同厂家的DDS通信系统，在此之上，针对功能性的组件进行了众多优化和补充，在上一节中我们也给大家介绍了这套框架。 优化之后的TogetherROS系统，在数据传输和AI处理方面，到底有多少提升呢，我们来看具体的对比数据。 通信效率量化对比 先来看下操作系统至关重要的数据通信功能，我们针对ROS中最为常用的大数据传输模式——话题通信进行了测试。 在单元测试中，使用同样的算力平台，分别安装TogetherROS和ROS2系统，然后在其中运行一个话题通信的发布者与订阅者，实现不同数据量的传输。经过数据统计，我们可以看到，在数据通信延时方面，随着数据量的增加，ROS2系统在通信延时、发送端和接收端的CPU占用率上，都会程线性增加，可以预想，在数据量较大的情况下，系统的通信负荷会非常严重。 而在TogetherROS系统中，由于使用了零拷贝的传输机制，传输数据量的增加，并不会导致延时和CPU占用率的增加，极大程度节省了系统资源。 在场景测试中，我们尽量模拟真实机器人的应用，使用TogetherROS和ROS2系统连接了多个相机、雷达和里程计等传感器，作为大量数据的输入来源，继续进行了测试，结果和之前的单元测试类似，ROS2系统此时的CPU占用率已经超过90%，想要运行数据传输之外的应用功能，几乎是不可能的，通信延时也达到了15ms以上，这在某些实时性要求比较高的应用中，是不可接受的。 而在TogetherROS系统中，CPU占用和通信延时也微乎其微，更多系统资源都可以让给应用处理。 CV图像处理量化对比 再来看下智能机器人中视觉感知层面的处理，TogetherROS系统集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 模型推理 在AI处理方面，ROS2原生系统中并没有太多支持，只能依赖社区中的资源，很难充分发挥硬件的算力。 对此，TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 传感器驱动管理 在传感器层面，是大量数据传输的来源，TogetherROS也重点进行了优化，针对常用的传感器类型，系统中内置参数配置、系统调用和内存管理机制，同样是在芯片的硬件层面进行了加速和隔离，保障数据流的稳定生成。 机器人开发工具 机器人开发过程中的性能优化和调试，也是非常繁杂的工作，TogetherROS系统自带火焰图等工具，可以实现系统层面的调优和测试，便于开发者挖掘系统性能。 以上这些都是TogetherROS在ROS系统之上的优化和补充，未来更多特性也会不断迭代推出，让智能机器人的开发更加简单。","text_tokens":["15ms","增加","不会","调用","彼此","开发成本","还有","下","负荷","之前","操作系统","只不过","开发者","公司","极大","软硬件","解决","甚至","统计","机制","稳定","在","但","过来","移植","不可","听说","从而","更加","等","微乎其微","打交道","分发","opensplice","常","一行","做","接受","保障","延时","线性","于","量化","单元","超过","重要","原本","其实","厂商","传输","不过","拷贝","物","基本","管理机制","至关重要","话题","真实","依赖","由于","，","协议","例子","问题","充分发挥","这套","完","情况","程度","推理","传输数据","自家","建立","到","一团乱","隔离","变化","？","继续","通信","共享内存","目标","2","发布","我们","有","两者","。","通过","安装","用率","不爽","togetherros","倍","发布者","通信协议","对比","并","轻松","自带","ai","支持","开发工具","多少","如何","和","数据传输","应用层","ceo","经过","消失","来看","做到","结果","随着","预想","就是","而","架构","一节","没有","为了","诟病","节省","hobot","提供","不太","严重","较大","联网","未来","不用","简单","传感","rtos","很多","而已","集成","请","者","当然","操作","成本","数据流","让给","端","要","角色","听","层面","降低","都","国际","兼容","很难","挖掘","量","例如","针对","产品","测试","时候","dnn","层","滤波","推出","再","调教","几乎","厂家","熟悉","场景","发挥","类似","某","实时性","工具","接口","使用","信息","重新","基于","完善","适配","无法","可能","到底","加速","此时","版本","导致","张图","属性","的","如果","订阅","左侧","呢","应用","客户端","占用","视觉","大","机器人","单元测试","方法","训练","混合","也"," ","驱动","共享","调试","国际标准","之上","同样","与","广泛应用","了","只有","感器","其中","借助","内","middleware","感知","来讲","最","最大","它","这","其他","产品开发","3","切换","数据","实时","一样","优化","会程","cv","乱麻","模型","会","能够","校正","尽量","软件","占用率","哪些","传感器","便于","这里","、","数据量","走","不同","达到","交道","不","繁杂","ros2","设计","模式","90%","分别","机器","每个","接收端","啦","会成","名字","linux","带来","介绍","让","discovery","自","有且","多倍","间层","是","程序","好","商业","基础","引擎","发成","—","之外","简单明了","硬件","简称","已经","应该","理器","输入","一团乱麻","发现","找到","fastrtps","可选项","适用","用","符合","得","收","软件系统","右侧","相比","只能","补充","作为","可选","复用","每","除了","另外","客户","发送","内存","用户","方面","相机","原生","加密","改","突然","进行","明显","指挥","至关","udp","一种","交付","算子","高斯","制定","各种","提升","一家","时间","模拟","功能性","平台","智能","dds","常用","cpu","将","多","举","可以","5g","所以","图像处理","管理","按照","master","/","高","一团","里","代码","帧","然后","类型","众多","广泛","效率","连接","迭代","需要","接收","封装","库","系统","rmw","生成","选项","ros","运行","实现","功能","特性","接入","对于","省略","大家","opencv","不断","tcp","开发","框架","底层","太","更换","之后","软硬","很快","畸变","频繁","来源","充分","看到","中间","变得","写","管理器","成","该","多个","芯片","windows","地平","bpu","缩放","更","给","标准","零","要求","图","性能","比如","两个","另","而且","部分","复杂","这个","火焰","参数","下边","组件","调优","减少","交给","算力","开源","先","实际","据传","系统集成","过程","部署","人工","肯定","就","提高","上","丢","数据通信","工作","满足","需求","所有","对此","主要","配置","一个","大量","处理","中","这样","最为","定义","选择","通信接口","里程","某些","节点","重点","协同","保留","么","社区","编程","发","此","以上","人工智能","地平线","丰富","依然","系统资源","时","唯一","想要","花费","率","图像","ros1","进程","非常","为","一套","资源","风格","雷达","数据通","只要","把","消耗","内置","充足","不是","macos","vs","比较","里程计","延迟","具体","库会","这些","旋转","中间层"],"title":"性能对比","title_tokens":["性能","对比"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#togetherrosros","text":"","text_tokens":[],"title":"TogetherROS与ROS性能对比","title_tokens":["togetherros","与","对比","性能","ros"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#ros2-vs-ros1","text":"先来看下两个大版本ROS的系统架构。 在这张图中，左侧是ROS1，右侧是ROS2，两者最明显的变化，就是Master。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery——自发现机制，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的DDS系统。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于共享内存的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了，Linux、windows、MacOS、RTOS都可以。","text_tokens":["走","提供","不太","调用","彼此","交道","下","tcp","开发","操作系统","只不过","底层","简单","rtos","公司","不","ros2","而已","很多","请","更换","操作","机制","会成","稳定","在","名字","频繁","linux","让","discovery","但","自","角色","中间","有且","变得","听","间层","写","是","管理器","程序","从而","更加","成","打交道","好","windows","—","都","标准","简单明了","理器","一团乱麻","发现","找到","可选项","比如","重要","两个","不过","得","时候","右侧","复杂","层","这个","可选","至关重要","再","下边","、","类似","依赖","另外","接口","先","客户","内存","信息","基于","，","协议","完善","突然","版本","进行","明显","张图","指挥","至关","肯定","udp","就","上","的","如果","建立","左侧","应用","一团乱","客户端","所有","大","变化","主要","方法","一个","大量","也","中"," ","驱动","共享","通信","共享内存","通信接口","节点","我们","发布","dds","两者","。","将","了","可以","通过","安装","只有","内","管理","最","master","它","这","通信协议","一团","里","图像","ros1","数据","进程","一套","和","一样","应用层","ceo","雷达","消失","来看","乱麻","连接","把","需要","接收","会","macos","就是","而","封装","架构","哪些","系统","库会","选项","这些","ros","中间层"],"title":"ROS2 vs ROS1","title_tokens":["ros1","vs","ros2"," "]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#ros2","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个ROS Middleware，简称RMW，也就是制定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。","text_tokens":["实现","功能","提供","不同","接入","联网","对于","省略","还有","不用","开发成本","tcp","开发","简单","底层","不","解决","ros2","设计","当然","更换","每个","稳定","成本","在","频繁","带来","过来","要","移植","听说","写","是","程序","等","该","多个","好","opensplice","层面","常","商业","一行","做","发成","更","都","给","标准","之外","简称","国际","应该","性能","于","fastrtps","比如","适用","用","产品","其实","厂商","不过","符合","收","物","软件系统","得","另","基本","相比","这个","再","复用","厂家","减少","每","场景","交给","除了","类似","某","熟悉","接口","先","开源","用户","重新","基于","，","协议","例子","适配","问题","无法","加密","改","部署","版本","完","属性","udp","就","一种","肯定","丢","提高","交付","的","自家","如果","应用","制定","满足","需求","各种","变化","配置","一个","？","也","中","这样"," ","一家","定义","选择","通信","目标","诟病","我们","dds","国际标准","社区","么","。","多","广泛应用","了","发","可以","5g","安装","举","不爽","所以","丰富","middleware","来讲","最","按照","时","master","最大","/","这","其他","唯一","通信协议","想要","率","并","产品开发","代码","切换","轻松","ros1","数据","然后","为","如何","广泛","一样","只要","把","不是","能够","就是","软件","系统","延迟","rmw","这些","为了","ros","这里","、"],"title":"ROS2系统架构","title_tokens":["ros2","架构","系统"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#togetherros-vs-ros2","text":"TogetherROS就是在这样一个ROS2架构的基础上，继续进行了优化，原本DDS通信的部分依然保留，可以适配不同厂家的DDS通信系统，在此之上，针对功能性的组件进行了众多优化和补充，在上一节中我们也给大家介绍了这套框架。 优化之后的TogetherROS系统，在数据传输和AI处理方面，到底有多少提升呢，我们来看具体的对比数据。","text_tokens":["togetherros","功能","这套","不同","进行","依然","对比","大家","上","ai","针对","的","框架","数据","原本","传输","多少","呢","ros2","和","众多","数据传输","部分","优化","提升","之后","一个","补充","也","中","处理","继续","这样","在"," ","来看","组件","介绍","通信","厂家","功能性","就是","dds","我们","有","架构","之上","一节","，","方面","保留","据传","系统","。","具体","了","适配","基础","可以","此","到底","给"],"title":"TogetherROS vs ROS2","title_tokens":["togetherros","vs"," ","ros2"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_1","text":"先来看下操作系统至关重要的数据通信功能，我们针对ROS中最为常用的大数据传输模式——话题通信进行了测试。 在单元测试中，使用同样的算力平台，分别安装TogetherROS和ROS2系统，然后在其中运行一个话题通信的发布者与订阅者，实现不同数据量的传输。经过数据统计，我们可以看到，在数据通信延时方面，随着数据量的增加，ROS2系统在通信延时、发送端和接收端的CPU占用率上，都会程线性增加，可以预想，在数据量较大的情况下，系统的通信负荷会非常严重。 而在TogetherROS系统中，由于使用了零拷贝的传输机制，传输数据量的增加，并不会导致延时和CPU占用率的增加，极大程度节省了系统资源。 在场景测试中，我们尽量模拟真实机器人的应用，使用TogetherROS和ROS2系统连接了多个相机、雷达和里程计等传感器，作为大量数据的输入来源，继续进行了测试，结果和之前的单元测试类似，ROS2系统此时的CPU占用率已经超过90%，想要运行数据传输之外的应用功能，几乎是不可能的，通信延时也达到了15ms以上，这在某些实时性要求比较高的应用中，是不可接受的。 而在TogetherROS系统中，CPU占用和通信延时也微乎其微，更多系统资源都可以让给应用处理。","text_tokens":["实现","功能","不同","15ms","增加","达到","不会","严重","较大","下","负荷","之前","操作系统","传感","极大","不","ros2","模式","者","统计","90%","分别","机器","操作","机制","接收端","在","来源","让给","端","看到","不可","是","等","多个","微乎其微","接受","—","更","都","之外","零","要求","已经","延时","线性","输入","量","针对","测试","单元","超过","重要","传输","拷贝","作为","至关重要","话题","几乎","真实","场景","算力","类似","由于","实时性","先","使用","发送","，","方面","据传","相机","可能","此时","节省","进行","情况","数据量","导致","程度","至关","传输数据","上","的","数据通信","订阅","应用","占用","大","机器人","单元测试","一个","大量","也","中","处理","继续"," ","最为","模拟","通信","平台","里程","某些","发布","我们","cpu","常用","同样","与","。","多","了","以上","可以","用率","安装","感器","其中","togetherros","系统资源","这","发布者","想要","高","并","数据","实时","非常","然后","和","数据传输","资源","会程","雷达","数据通","经过","来看","连接","结果","随着","接收","会","预想","而","尽量","占用率","比较","系统","里程计","传感器","ros","、","运行"],"title":"通信效率量化对比","title_tokens":["效率","量化","通信","对比"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#cv","text":"再来看下智能机器人中视觉感知层面的处理，TogetherROS系统集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。","text_tokens":["实现","hobot","下","opencv","开发","底层","甚至","软硬件","集成","软硬","分别","机器","畸变","在","多倍","等","芯片","地平","层面","降低","引擎","缩放","更","硬件","兼容","性能","例如","测试","而且","滤波","再","接口","，","系统集成","加速","进行","算子","上","的","高斯","到","应用","视觉","机器人","提升","方法","混合","处理","中"," ","2","智能","我们","常用","协同","与","编程","。","了","可以","通过","togetherros","地平线","感知","系统资源","倍","对比","率","3","图像","帧","资源","风格","效率","cv","来看","做到","消耗","校正","软件","库","系统","便于","具体","旋转","、","运行"],"title":"CV图像处理量化对比","title_tokens":["量化","图像处理","cv","处理","对比","图像"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_2","text":"在AI处理方面，ROS2原生系统中并没有太多支持，只能依赖社区中的资源，很难充分发挥硬件的算力。 对此，TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。","text_tokens":["togetherros","借助","hobot","部署","这套","提供","硬件","人工","花费","很难","并","推理","不用","就","上","ai","的","支持","开发","数据","底层","开发者","应用","ros2","很多","和","太","众多","资源","集成","只能","对此","dnn","训练","很快","处理","中","啦","在"," ","时间","调教","充足","充分","模型","智能","发挥","算力","依赖","开源","实际","使用","基于","，","方面","社区","没有","分发","系统","。","多","库","了","芯片","可以","原生","引擎","bpu","人工智能","保障","系统集成","充分发挥"],"title":"模型推理","title_tokens":["推理","模型"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_3","text":"在传感器层面，是大量数据传输的来源，TogetherROS也重点进行了优化，针对常用的传感器类型，系统中内置参数配置、系统调用和内存管理机制，同样是在芯片的硬件层面进行了加速和隔离，保障数据流的稳定生成。","text_tokens":["togetherros","加速","管理","硬件","进行","调用","针对","的","数据","传感","传输","保障","和","类型","隔离","数据传输","优化","管理机制","配置","大量","也","中","机制","参数","数据流","在","稳定","内置","来源","重点","常用","是","内存","同样","，","据传","芯片","系统","。","传感器","层面","了","生成","感器","、"],"title":"传感器驱动管理","title_tokens":["管理","传感","传感器","驱动","感器"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_4","text":"机器人开发过程中的性能优化和调试，也是非常繁杂的工作，TogetherROS系统自带火焰图等工具，可以实现系统层面的调优和测试，便于开发者挖掘系统性能。 以上这些都是TogetherROS在ROS系统之上的优化和补充，未来更多特性也会不断迭代推出，让智能机器人的开发更加简单。","text_tokens":["togetherros","过程","实现","特性","图","未来","性能","挖掘","自带","不断","的","测试","开发","简单","开发者","繁杂","非常","工作","和","优化","机器人","机器","补充","也","中","火焰","迭代"," ","在","推出","让","调优","智能","会","工具","调试","是","等","之上","，","更加","系统","。","多","层面","便于","以上","可以","这些","ros","更","都"],"title":"机器人开发工具","title_tokens":["开发","机器","开发工具","工具","机器人"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/","text":"TogetherROS应用场景 相比手机、电脑等通用平台，机器人的类型可是千变万化，构建机器人操作系统的难度就远比手机和电脑的操作系统要复杂很多。机器人的主流应用大致可以分为服务机器人、工业机器人、特种机器人三个方向，无论是在哪一方向，都会面临很多问题。比如传感器、执行器等器件选型复杂，不同场景下需要的性能和参数都有所不同，这就要求操作系统得兼容尽量多的器件。 不同场景下的计算平台算力和资源差异很大，一般都需要进行定制化的裁剪和优化，这就得有一系列工具便于系统的定制和裁剪。每个场景中的应用功能变化也很大，各种算法的集成和开发要尽量简单，算法基于的数据也在持续迭代，需要一套工具链来提供迭代和升级。 针对各种各样的需求变化，TogetherROS系统都提供了支持。 服务机器人 在服务机器人领域，场景和功能尤其复杂，有家里的扫地机器人，有餐厅里的送餐机器人，有咖啡店里的双臂机器人，还有物流送货的飞行机器人，虽然每一个机器人平台的构型不同，但都需要动态处理多种多样的环境变化，这就需要TogetherROS系统基于大量数据的AI处理和丰富的组件功能支持，快速推动各种功能的落地。 工业机器人 在工业机器人领域，目前的机器人主要以工业机械臂和物流移动机器人形态为主，场景相比服务机器人要标准很多，核心目的是要提高生产效率，这就要求机器人可以长期稳定的运行，同时实时处理各项运动功能，TogetherROS系统可裁剪和性能稳定等特点，都可以符合要求。 特种机器人 而在特种机器人的应用领域，结合了服务和工业场景中的不少特点，机器人形态多变，得动态处理各种复杂场景里的事件，例如火灾、地震、管道等场景，更是会发生很多不可预料的情况，TogetherROS系统中的AI处理可以较好的保障不同环境中的感知效果，同时端云联动，可以实现大量数据的训练和部署，不断提高对复杂环境的处理能力。 可见，TogetherROS系统充分考虑了众多应用场景的需求，不仅可以满足智能机器人开发过程中的每一个环节，也考虑到了机器人未来在产业中的应用效果。","text_tokens":["实现","难度","功能","能力","不同","提供","送餐","链来","环境","不仅","未来","还有","火灾","下","不断","管道","不少","开发","操作系统","简单","传感","可是","对","很多","特种","长期","主流","有所不同","集成","多种多样","实时处理","应用领域","机器","操作","每个","核心","为主","多样","稳定","在","但","充分","要","不可","一般","是","等","好","通用","地震","领域","餐厅","多种","都","保障","标准","执行","面临","要求","选型","兼容","性能","目的","多变","服务","例如","咖啡","针对","比如","方向","一系","符合","结合","得","发生","复杂","较","相比","化","快速","端云","参数","算法","无论是","组件","产业","每","场景","工具","算力","咖啡店","联动","差异","形态","基于","，","运动","可见","构建","问题","过程","部署","动机","进行","飞行","计算","情况","移动","分为","符合要求","提高","就","裁剪","家里","的","扫地","可","手机","尤其","到","应用","满足","需求","各种","更是","机器人","构型","远","变化","目前","主要","训练","千变万化","一个","大量","也","中","处理"," ","机械","平台","动态","工业","智能","环节","有所","特点","有","三个","无论","。","多","了","可以","臂","感器","推动","一系列","升级","togetherros","丰富","哪","感知","送货","这","事件","里","比","ai","器件","支持","数据","各项","虽然","实时","一套","物流","很大","一","和","类型","各种各样","双臂","资源","众多","优化","效率","落地","大致","充分考虑","同时","电脑","迭代","需要","系列","持续","会","预料","而","尽量","考虑","移动机器人","系统","以","效果","传感器","便于","执行器","生产","各样","定制","、","运行"],"title":"应用场景","title_tokens":["场景","应用"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#togetherros","text":"相比手机、电脑等通用平台，机器人的类型可是千变万化，构建机器人操作系统的难度就远比手机和电脑的操作系统要复杂很多。机器人的主流应用大致可以分为服务机器人、工业机器人、特种机器人三个方向，无论是在哪一方向，都会面临很多问题。比如传感器、执行器等器件选型复杂，不同场景下需要的性能和参数都有所不同，这就要求操作系统得兼容尽量多的器件。 不同场景下的计算平台算力和资源差异很大，一般都需要进行定制化的裁剪和优化，这就得有一系列工具便于系统的定制和裁剪。每个场景中的应用功能变化也很大，各种算法的集成和开发要尽量简单，算法基于的数据也在持续迭代，需要一套工具链来提供迭代和升级。 针对各种各样的需求变化，TogetherROS系统都提供了支持。","text_tokens":["难度","功能","不同","提供","链来","下","开发","操作系统","简单","传感","可是","很多","特种","主流","有所不同","集成","机器","操作","每个","在","要","一般","等","通用","都","执行","面临","要求","选型","兼容","性能","服务","针对","比如","方向","一系","得","复杂","相比","化","参数","算法","无论是","场景","工具","算力","差异","基于","，","构建","问题","进行","计算","分为","就","裁剪","的","手机","应用","需求","各种","机器人","远","变化","千变万化","也","中"," ","平台","工业","有所","有","三个","无论","。","多","了","可以","感器","一系列","升级","togetherros","哪","这","比","器件","支持","数据","一套","很大","一","和","类型","各种各样","资源","优化","大致","电脑","迭代","需要","系列","持续","会","尽量","系统","传感器","便于","执行器","各样","定制","、"],"title":"TogetherROS应用场景","title_tokens":["togetherros","场景","应用"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_1","text":"在服务机器人领域，场景和功能尤其复杂，有家里的扫地机器人，有餐厅里的送餐机器人，有咖啡店里的双臂机器人，还有物流送货的飞行机器人，虽然每一个机器人平台的构型不同，但都需要动态处理多种多样的环境变化，这就需要TogetherROS系统基于大量数据的AI处理和丰富的组件功能支持，快速推动各种功能的落地。","text_tokens":["togetherros","丰富","功能","不同","送餐","飞行","环境","送货","这","还有","里","就","服务","咖啡","ai","家里","的","支持","扫地","数据","虽然","尤其","物流","和","双臂","各种","机器人","复杂","构型","多种多样","变化","快速","落地","机器","一个","处理","大量","多样","在","组件","需要","但","平台","动态","每","场景","咖啡店","有","基于","，","系统","。","领域","餐厅","推动","多种","都"],"title":"服务机器人","title_tokens":["机器人","机器","服务"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_2","text":"在工业机器人领域，目前的机器人主要以工业机械臂和物流移动机器人形态为主，场景相比服务机器人要标准很多，核心目的是要提高生产效率，这就要求机器人可以长期稳定的运行，同时实时处理各项运动功能，TogetherROS系统可裁剪和性能稳定等特点，都可以符合要求。","text_tokens":["togetherros","标准","功能","动机","要求","移动","这","符合要求","目的","提高","就","性能","服务","裁剪","的","各项","实时","可","符合","物流","很多","和","长期","机器人","目前","相比","效率","主要","实时处理","机器","核心","同时","为主","稳定","处理","在","都","机械","工业","场景","要","特点","是","形态","等","，","运动","移动机器人","系统","以","。","领域","可以","臂","生产","运行"],"title":"工业机器人","title_tokens":["机器人","工业","机器"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_3","text":"而在特种机器人的应用领域，结合了服务和工业场景中的不少特点，机器人形态多变，得动态处理各种复杂场景里的事件，例如火灾、地震、管道等场景，更是会发生很多不可预料的情况，TogetherROS系统中的AI处理可以较好的保障不同环境中的感知效果，同时端云联动，可以实现大量数据的训练和部署，不断提高对复杂环境的处理能力。 可见，TogetherROS系统充分考虑了众多应用场景的需求，不仅可以满足智能机器人开发过程中的每一个环节，也考虑到了机器人未来在产业中的应用效果。","text_tokens":["实现","能力","不同","环境","不仅","未来","火灾","不断","管道","不少","开发","对","很多","特种","应用领域","机器","在","充分","不可","等","好","地震","领域","保障","多变","服务","例如","结合","得","发生","复杂","较","端云","产业","每","场景","联动","形态","，","可见","过程","部署","情况","提高","的","到","应用","满足","需求","各种","更是","机器人","训练","大量","一个","处理","中","也"," ","动态","工业","智能","环节","特点","。","了","可以","togetherros","感知","事件","里","ai","数据","和","众多","充分考虑","同时","会","预料","而","考虑","系统","效果","、"],"title":"特种机器人","title_tokens":["机器人","特种","机器"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/","text":"旭日X3派介绍 TogetherROS是一个软件层面的系统，要想使用它，当然得找一个硬件层面的计算平台，安装之后才能使用啦。 之前我们提到，TogetherROS会基于地平线的AI芯片，充分发挥硬件性能，我们如何使用这颗芯片呢？ 旭日X3派 没问题，地平线已经为我们准备好了，那就是搭载旭日X3芯片的机器人开发板——旭日X3派。 第一眼看上去，大家是否会想到树莓派呢？没错，为了适应开发者的使用习惯，兼容市面上大量已有的模块，旭日X3派的整体外观和接口形态都接近树莓派，不过面向的开发对象以及板卡的计算实力，和树莓派就完全不同了。 类似这些常用的传感器，旭日X3派统统都可以支持，未来还有更多机器人套件会出现在大家身边。 大家可以在这张表中，看到旭日X3派的硬件资源，CPU是四核A53，频率1.2Hz，在系统内还可以进行超频，BPU就是硬件级的AI引擎，这是旭日X3派相比市面上其他开发板，最大的不同，也是核心性能的主要来源，类似于业界常听到的NPU，这里使用的是地平线机器人独有的伯努利2.0架构，可以提供5Tops的等效算力支持。 内存方面，大家可以选择2GB或者4GB的版本，存储使用的是SD卡，我们可以自行选择，只要大于8GB就可以啦。 在多媒体方面，旭日X3派支持硬件级别的H265和H264编解码，常用的图像和视频都可以流畅播放。 接口方面，尽量可以满足我们常用外接设备和开发的需求，这里是一个CSI的相机接口，板载USB有3个，包含1个USB3.0和2个USB2.0，这里是一个板载的调试串口，我们可以通过它获取系统层面的很多调试信息，也可以与板卡进行通信。 板卡上也搭载了有线网络和无线网络，这个有线网口我们可以直接用网线连接到电脑，就可以在电脑上远程登录和板卡通信了，或者连接到路由器，让板卡直接上网，无线网络和蓝牙是一个二合一的模块，我们也可以直接通过wiki，让板卡连接到某个网络中。 显示接口主要是这里的HDMI，如果我们先要看到系统界面，或者后续很多视觉例程的识别效果，都可以通过HDMI外接一个显示器进行显示。 最后还有至关重要的扩展接口，有40个引脚，和树莓派的接口定义一致，什么GPIO、串口、I2C、SPI等等，一应俱全。 这块板卡我们在使用的时候，推荐使用5V3A的电源，通过TypeC线连接到这里供电，官方提供的系统目前是Ubuntu20.04，使用起来和原生系统没有太大差别。 总体来讲， 旭日X3派是一款面向生态开发者的嵌入式AI开发板，接口兼容树莓派，具有5Tops的端侧推理算力，以及4核ARM A53的处理能力。 面对个人开发者，旭日X3派可以让每一位开发者拥有自己的AI开发套件，不再受开发板高昂的价格限制，面对高等院校，使用旭日X3派开发套件探索AI和机器人应用是学习的开始，有助于学生快速入门人工智能与机器人开发，面对产业，旭日X3派以及地平线的AI工具链，可以帮助客户将产品尽快推向市场，快速落地智能机器人方向的解决方案。 旭日X3M芯片 在旭日X3派上，最为核心的当然就是这颗AI芯片了，这是关于芯片的具体信息，供大家参考。 值得一提的是，随着芯片的技术迭代，2023年，地平线将推出X5芯片，比较大的变化是CPU升级到了8核A55，主频提升到1.8GHz，BPU的算力也将达到8Tops，还加入了GPU，以及更多可扩展的接口。 在使用旭日X3派的过程中，大家也可以期待旭日X5派了。 旭日X3派接口 好啦，还是回到旭日X3派的开发接口上来，我们再做一个整理，这些就是我们使用开发板进行智能机器人开发过程中，最为常用的接口啦。 大家目前在树莓派或者其他开发板上使用的绝大部分模块，基本都可以在旭日X3派上复用，同时还有更多智能化的玩法等着大家。 关于40Pin扩展接口的序号排布，大家可以看这里，引脚的序号是从靠近HDMI板卡内测的开始算起，是引脚1，然后依次蛇形计数，分别是1、2、3、4、5，一直到这里是39和40。 这张图片是40PIN扩展接口的详细定义，有3.3V和5V的电源信号，有I2C、I2S、SPI、UART等通信接口，还有很多可动态配置的GPIO信号，基本可以满足各种各样的机器人开发啦。 好啦，关于旭日X3派这块开发板我们已经了解清楚了，具体该如何使用呢，我们操作起来。","text_tokens":["有线网","自己","什么","没","还是","还有","等效","嵌入式","之前","市场","40pin","开发者","解决","i2s","是从","二合","核心","在","1","自行","流畅","板载","高等","等","分发","着","参考","做","依次","靠近","习惯","听到","路由器","于","后续","hdmi","嵌入","重要","1.8","面上","显示","不过","是否","基本","图片","有线","x5","排布","出现","usb","至关重要","，","电源","口","问题","充分发挥","看","推理","spi","到","详细","套件","变化","5","？","链","上网","npu","2","通信","动态","arm","技术","我们","有","。","通过","安装","引脚","togetherros","获取","四核","ai","支持","i2c","h264","如何","和","一眼","落地","官方","一位","电脑","随着","一致","就是","架构","没有","旭日","这颗","为了","信号","3.3","提供","业界","主频","级","5v","这是","关于","未来","助于","传感","大于","很多","准备","gpio","当然","操作","无线","串口","这张","要","网络","这块","等等","具有","了解","值得","5v3a","层面","起","v","有助于","都","市面","兼容","产品","时候","接近","4","清楚","核","快速","推出","再","存储","推向","产业","发挥","工具","类似","整体","接口","使用","信息","基于","加入","合一","线","看上去","typec","以及","wiki","版本","一应","尽快","的","如果","呢","应用","视觉","机器人","大","张表中","媒体","供电","包含","也","俱全"," ","限制","硬件资源","调试","路由","界面","2023","与","了","有助","感器","值得一提的是","内","来讲","回到","最大","它","这","其他","3","上去","2gb","2.0","网线","受","学生","8tops","端侧","算","序号","板卡","同时","会","推荐","方案","usb2.0","尽量","软件","找","x3","传感器","远程","帮助","这里","、","不同","达到","对象","编解码","级别","那","院校","例程","绝大","绝大部分","搭载","开始","分别","机器","啦","起来","最后","介绍","让","ghz","40","调试信息","是","好","引擎","面对","—","硬件","常听到","已经","大部分","用","方向","推向市场","usb3.0","得","相比","实力","统统","复用","蓝牙","每","客户","内存","方面","相机","原生","外观","生态","无线网","超频","高等院校","进行","8gb","某个","线网","供","至关","整理","完全","模块","可","各种","提升","登录","平台","csi","智能","cpu","常用","39","多","一应俱全","将","可以","8","高昂","已有","然后","探索","连接","迭代","设备","没错","系统","独有","提到","卡","hz","差别","识别","能力","玩法","二合一","大家","解决方案","开发","太","ubuntu20.04","之后","上来","来源","充分","计数","看到","该","芯片","地平","bpu","还","更","第一眼","显示器","无线网络","性能","第一","才能","不再","适应","开发板","部分","sd","外接","1.2","这个","树莓","蛇形","算力","拥有","h265","先","想到","形态","价格","直接","过程","gpu","人工","计算","外","或者","派","就","上","播放","个","接设备","智能化","身边","大部","满足","需求","年","目前","主要","配置","想","一个","大量","处理","中","最为","看上","定义","选择","uart","通信接口","扩展","人工智能","伯努利","市面上","升级","频率","地平线","一直","5tops","多媒体","一款","期待","接口定义","学习","图像","a53","入门","为","4gb","a55","各种各样","资源","只要","总体","内测","面向","个人","视频","解码","比较","效果","具体","各样","x3m","这些"],"title":"旭日X3派介绍","title_tokens":["旭日","介绍","x3","派"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3","text":"TogetherROS是一个软件层面的系统，要想使用它，当然得找一个硬件层面的计算平台，安装之后才能使用啦。 之前我们提到，TogetherROS会基于地平线的AI芯片，充分发挥硬件性能，我们如何使用这颗芯片呢？","text_tokens":["togetherros","地平线","硬件","计算","它","性能","才能","之前","ai","的","呢","得","如何","当然","之后","想","一个","？","啦"," ","充分","平台","要","会","发挥","我们","使用","是","基于","软件","，","找","芯片","系统","。","地平","层面","分发","提到","这颗","安装","充分发挥"],"title":"旭日X3派介绍","title_tokens":["旭日","介绍","x3","派"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3_1","text":"没问题，地平线已经为我们准备好了，那就是搭载旭日X3芯片的机器人开发板——旭日X3派。 第一眼看上去，大家是否会想到树莓派呢？没错，为了适应开发者的使用习惯，兼容市面上大量已有的模块，旭日X3派的整体外观和接口形态都接近树莓派，不过面向的开发对象以及板卡的计算实力，和树莓派就完全不同了。 类似这些常用的传感器，旭日X3派统统都可以支持，未来还有更多机器人套件会出现在大家身边。 大家可以在这张表中，看到旭日X3派的硬件资源，CPU是四核A53，频率1.2Hz，在系统内还可以进行超频，BPU就是硬件级的AI引擎，这是旭日X3派相比市面上其他开发板，最大的不同，也是核心性能的主要来源，类似于业界常听到的NPU，这里使用的是地平线机器人独有的伯努利2.0架构，可以提供5Tops的等效算力支持。 内存方面，大家可以选择2GB或者4GB的版本，存储使用的是SD卡，我们可以自行选择，只要大于8GB就可以啦。 在多媒体方面，旭日X3派支持硬件级别的H265和H264编解码，常用的图像和视频都可以流畅播放。 接口方面，尽量可以满足我们常用外接设备和开发的需求，这里是一个CSI的相机接口，板载USB有3个，包含1个USB3.0和2个USB2.0，这里是一个板载的调试串口，我们可以通过它获取系统层面的很多调试信息，也可以与板卡进行通信。 板卡上也搭载了有线网络和无线网络，这个有线网口我们可以直接用网线连接到电脑，就可以在电脑上远程登录和板卡通信了，或者连接到路由器，让板卡直接上网，无线网络和蓝牙是一个二合一的模块，我们也可以直接通过wiki，让板卡连接到某个网络中。 显示接口主要是这里的HDMI，如果我们先要看到系统界面，或者后续很多视觉例程的识别效果，都可以通过HDMI外接一个显示器进行显示。 最后还有至关重要的扩展接口，有40个引脚，和树莓派的接口定义一致，什么GPIO、串口、I2C、SPI等等，一应俱全。 这块板卡我们在使用的时候，推荐使用5V3A的电源，通过TypeC线连接到这里供电，官方提供的系统目前是Ubuntu20.04，使用起来和原生系统没有太大差别。 总体来讲， 旭日X3派是一款面向生态开发者的嵌入式AI开发板，接口兼容树莓派，具有5Tops的端侧推理算力，以及4核ARM A53的处理能力。 面对个人开发者，旭日X3派可以让每一位开发者拥有自己的AI开发套件，不再受开发板高昂的价格限制，面对高等院校，使用旭日X3派开发套件探索AI和机器人应用是学习的开始，有助于学生快速入门人工智能与机器人开发，面对产业，旭日X3派以及地平线的AI工具链，可以帮助客户将产品尽快推向市场，快速落地智能机器人方向的解决方案。","text_tokens":["有线网","自己","什么","没","还有","等效","嵌入式","市场","开发者","解决","二合","核心","在","1","自行","流畅","板载","高等","习惯","听到","路由器","于","后续","hdmi","嵌入","重要","面上","显示","不过","是否","有线","出现","usb","至关重要","，","电源","口","问题","推理","spi","到","套件","？","链","上网","npu","2","通信","arm","我们","有","。","通过","引脚","获取","四核","ai","支持","i2c","h264","和","一眼","落地","官方","一位","电脑","一致","就是","架构","没有","旭日","为了","提供","业界","级","这是","未来","助于","传感","大于","很多","准备","gpio","无线","串口","网络","要","这块","等等","具有","5v3a","层面","有助于","都","市面","兼容","产品","时候","接近","4","核","快速","存储","推向","产业","工具","类似","整体","接口","使用","信息","合一","线","看上去","typec","以及","wiki","版本","一应","尽快","的","如果","呢","应用","视觉","机器人","大","张表中","媒体","供电","包含","也","俱全"," ","限制","硬件资源","调试","路由","界面","与","了","有助","感器","内","来讲","最大","其他","这","它","3","上去","2gb","2.0","网线","受","学生","端侧","板卡","会","推荐","方案","usb2.0","尽量","x3","传感器","远程","帮助","这里","、","不同","对象","编解码","级别","那","院校","例程","搭载","开始","机器","啦","起来","最后","让","40","调试信息","是","好","引擎","面对","—","硬件","常听到","已经","用","方向","推向市场","usb3.0","相比","实力","统统","蓝牙","每","客户","内存","方面","相机","原生","外观","生态","无线网","超频","高等院校","进行","8gb","某个","线网","至关","完全","模块","登录","csi","智能","cpu","常用","多","一应俱全","将","可以","高昂","已有","探索","连接","设备","没错","系统","独有","卡","hz","差别","识别","能力","二合一","大家","解决方案","开发","太","ubuntu20.04","来源","看到","芯片","地平","bpu","还","更","第一眼","显示器","无线网络","性能","第一","不再","适应","开发板","sd","外接","1.2","这个","树莓","算力","拥有","h265","先","想到","形态","价格","直接","人工","计算","外","或者","派","就","上","播放","个","接设备","身边","满足","需求","目前","主要","大量","一个","处理","中","看上","定义","选择","扩展","人工智能","伯努利","市面上","频率","地平线","5tops","多媒体","一款","学习","接口定义","图像","a53","入门","为","4gb","资源","只要","总体","面向","个人","视频","解码","效果","这些"],"title":"旭日X3派","title_tokens":["旭日","x3","派"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3m","text":"在旭日X3派上，最为核心的当然就是这颗AI芯片了，这是关于芯片的具体信息，供大家参考。 值得一提的是，随着芯片的技术迭代，2023年，地平线将推出X5芯片，比较大的变化是CPU升级到了8核A55，主频提升到1.8GHz，BPU的算力也将达到8Tops，还加入了GPU，以及更多可扩展的接口。 在使用旭日X3派的过程中，大家也可以期待旭日X5派了。","text_tokens":["地平线","过程","8","gpu","达到","主频","这是","期待","关于","派","大家","供","上","ai","的","1.8","8tops","可","到","a55","年","大","提升","当然","变化","核","x5","核心","也","中","迭代","在"," ","最为","推出","ghz","随着","技术","算力","就是","cpu","接口","扩展","是","使用","信息","，","2023","比较","加入","芯片","值得","。","旭日","x3","了","具体","这颗","地平","将","参考","bpu","多","可以","还","值得一提的是","更","升级","以及"],"title":"旭日X3M芯片","title_tokens":["旭日","芯片","x3m"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3_2","text":"好啦，还是回到旭日X3派的开发接口上来，我们再做一个整理，这些就是我们使用开发板进行智能机器人开发过程中，最为常用的接口啦。 大家目前在树莓派或者其他开发板上使用的绝大部分模块，基本都可以在旭日X3派上复用，同时还有更多智能化的玩法等着大家。 关于40Pin扩展接口的序号排布，大家可以看这里，引脚的序号是从靠近HDMI板卡内测的开始算起，是引脚1，然后依次蛇形计数，分别是1、2、3、4、5，一直到这里是39和40。 这张图片是40PIN扩展接口的详细定义，有3.3V和5V的电源信号，有I2C、I2S、SPI、UART等通信接口，还有很多可动态配置的GPIO信号，基本可以满足各种各样的机器人开发啦。 好啦，关于旭日X3派这块开发板我们已经了解清楚了，具体该如何使用呢，我们操作起来。","text_tokens":["信号","3.3","玩法","5v","关于","还是","大家","还有","开发","绝大","40pin","绝大部分","很多","i2s","gpio","开始","是从","分别","机器","操作","啦","起来","在","上来","1","这张","计数","这块","40","了解","是","等","该","好","起","v","着","依次","做","靠近","更","都","已经","大部分","hdmi","开发板","4","部分","基本","图片","清楚","排布","树莓","再","复用","蛇形","接口","使用","，","电源","过程","看","进行","或者","派","整理","上","的","模块","可","智能化","spi","到","呢","大部","详细","满足","各种","机器人","目前","配置","5","一个","中"," ","最为","定义","2","uart","通信","智能","通信接口","动态","我们","常用","有","扩展","39","。","多","了","可以","引脚","一直","回到","其他","3","i2c","算","然后","如何","和","各种各样","序号","板卡","同时","内测","就是","旭日","x3","具体","各样","这些","这里","、"],"title":"旭日X3派接口","title_tokens":["旭日","接口","x3","派"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/","text":"TogetherROS系统安装 我们在旭日X3派上安装系统镜像，并进一步完成TogetherROS系统的安装，大家如果手上有开发板的话，建议跟随课程一起操作。 先来了解一下TogetherROS系统安装的整体流程： 第一步，要完成硬件的准备，我们需要找到一块旭日X3派的开发板，并且准备好电源线、SD卡、读卡器、串口模块等必要的配件，当然还需要有一台操作的电脑啦。 硬件都准备好之后，就可以进入第二步，给旭日X3派下载并安装Ubuntu系统镜像，这是TogetherROS系统运行必要的底层环境。 第三步，就可以开始安装TogetherROS啦。 安装完成后，我们还需要进一步完成一些配置工作，可以也让旭日X3派板卡上的各项功能都运行起来，保证TogetherROS的顺利运行。 最后一步，就是体验TogetherROS出厂自带的一些例程啦，确定一切安装顺利，为后续机器人开发最好准备。 接下来，我们就按照这个流程，开始操作。 硬件准备 先来完成硬件准备： 找到一块旭日X3派的板卡，准备好一套5V3A的电源和TypeC电源线，稍后会连接到这里的电源接口，给板卡供电。 然后准备好一张8GB以上的SD卡和读卡器，下一步我们会在上边烧写系统镜像。 接下来使用一个串口模块，连接旭日X3派和笔记本电脑，便于下一步看到系统镜像的启动信息。 如果大家有网线和HDMI显示器的话，也可以先准备好，在之后的操作中用的上，如果没有也没关系，不影响TogetherROS系统的基本使用。 硬件准备齐全之后，就可以进入第二步了。 安装Ubuntu系统 我们来给旭日X3派安装Ubuntu系统，关于系统镜像和烧写工具，都可以在地平线AI社区中找到。 下载SD卡镜像 首先登录地平线AI社区，点击”产品中心——资源中心“， 进入页面后下拉至”X3派资料包“专区，点击下载其中的”旭日X3派系统镜像“，会有一个压缩包，把它保存到当前电脑桌面。 此外，我们稍后将镜像烧写到SD卡里，需要用到烧写小工具，如果大家电脑上没有合适的工具，可以下拉到”工具“专区，点击下载”烧录 工具rufus\"。 下载完后我们来看一下两个压缩文件中的内容： 其中一个是烧写X3派镜像文件的工具，压缩包中有两个文件，一个是system_sdcard.img文件，是我们稍后会用于烧写SD卡的镜像文件；另一个是disk_nand.img文件，用于烧写旭日X3派中的flash文件，大多数情况下都用不到； 另一个压缩包里是我们稍后用于烧写镜像的rufus工具。 我们把两个压缩包都解压出来，然后把SD卡放进读卡器、插到电脑端 接下来就可以开始烧写SD卡镜像。 烧写SD卡镜像 运行解压出来的烧写工具rufus。启动后需要确认几个参数： 第一个是确定烧写到哪个磁盘上。工具软件会默认搜索当前读取到的SD卡，下图所示磁盘名称，就是演示时插好的16GB的SD卡。 下一步我们点击“选择”，找到需要烧写的镜像文件。演示中已经把需要的system_sdcrd.img文件放在了桌面上，选中它点击“打开”； 下面的内容就可以用默认的配置，点击“开始”会弹出警告告诉我们将把磁盘里的所有文件都清除掉，这没有问题，我们点击“选择“，就开始烧写SD卡镜像了。 进度条显示“准备就绪”后，点击“关闭”，此时你的SD卡镜像就已经烧写完成了，我们把SD卡的读卡器拔出来。 连接串口 接下来把SD卡插到旭日X3派上。 把串口模块连接到电脑的USB上。 连接好串口模块后，为了确保串口已经跟电脑连接成功、并且安装好了驱动，我们可以右键“我的电脑”图标、选择“管理”，在打开的”计算机管理“界面中找到”设备管理器——端口“，检查一下你的USB串口是否已经显示出了对应的设备。演示中的端口号为COM6,说明串口已经成功驱动了。 如果没有看到自己的设备号、或者设备号前有一个叹号或者问号标记，说明你的驱动没有安装好，可以搜索网络上的技术博客，来完成串口模块的驱动安装。 关闭“计算机管理”窗口，接下来就要通过串口与旭日X3派进行连接了。这里我们需要用到一个串口小工具，大家可以使用自己常用的工具。 演示中使用的串口工具是MobaXterm,十分推荐大家使用这个工具，里面集成了开发过程中需要使用的各种小工具，我们后续的串口通讯、SSH网络通讯，都会使用这些工具完成。 打开MobaXterm,点击左上角的\"Session\"； 找到里面的“Serial\"串口选项，点击打开；串口号选择本机连接到旭日X3派的相应端口，演示中为COM6; 波特率选择921600。选项好后点击“OK”。 现在串口已经连接成功了，但当前旭日X3派的板子还没有上电，所以没有任何信息弹出。 我们把电源线与旭日X3派连接好。 可以看到弹出了日志提醒：“当前系统正在启动”。等待系统加载完成。 现在可以看到系统已经加载成功了。 串口登录系统 接下来我们需要登录系统。我们有两个账号可以用来登录： 账号1：用户名为root，密码也为root； 账号2：用户名为storise，密码也为storise； 这里演示使用root用户来登录。输入用户名、密码，回车，需要等待大约1分钟，因为第一次登录需要展开一些系统必要的安装软件，安装好后系统会自动重启。 系统自动重启后，再次使用root用户登录。现在你的UBUNTU系统就已经安装好了。 我们可以使用LINUX系统常用的一些命令行进行查看和设置，比如ls查看当前命令，pwd查看当前路径，还可以使用mkdir命令创建文件夹，比如这里,一个test文件夹就创建成功了。 到这里为止，旭日X3派上的Ubuntu系统就安装成功啦，我们继续下一步。 安装TogetherROS系统 安装TogetherROS系统。 为了达到更好的通信效率，我们后续使用有线网络连接旭日X3派，这里大家可以拿出一根网线，直接连接电脑和旭日X3派的网口。 旭日X3派中出厂已经配置好了静态IP地址，是192.168.1.10，我们将使用的电脑也配置到同一网段即可。 配置有线网络 接下来请大家拿一根网线，连接旭日X3派和电脑。 然后，在电脑端打开控制面板，找到“查看网络状态和任务”。 找到已经连接成功的以太网，点击它； 会弹出一个窗口，我们点击“属性”。 再次弹出窗口，我们双击选择“Internet协议版本4”。 然后会弹出一个配置IP地址的窗口，我们勾选”使用下面的IP地址“。 按照如下信息填入： IP地址：192.168.1.100 子网掩码：255.255.255.0 默认网关：192.168.1.1 我们使用的旭日X3派的板子IP为192.168.1.10，所以IP后三位除了.10和网关.1以外，大家可以选用1-255之间的任意数字，这里使用.100； 填写完在所有窗口点击“确定”，最后关闭窗口。现在网络的配置就完成了，此时电脑端的静态IP就是192.168.1.100,我们通过这个IP与旭日X3派产生连接。 SSH远程登录 我们再次打开MobaXterm软件,点击左上角的\"Session\"，找到里面的\"SSH\",输入 旭日X3派板子的IP192.168.1.10，点击”OK“。 弹出登录窗口，我们用root账户登录：用户名为root，密码为root。这里会弹窗询问是否保存登录密码，如果需要保存就点“YES”，不需要保存就点“NO”。 现在我们就成功通过网络SSH协议登录到了旭日X3派板子上，和之前我们用串口登录的效果几乎是一样的，但现在我们是用网络通讯，所以现在通讯的效率和传输的速度会更高。 配置完成网络通讯后，我们来正式安装TogetherROS。 下载TogetherROS安装包 拷贝安装包 我们打开地平线社区的网站，在“产品中心”页面下拉到“机器人平台”，这里面都是TogetherROS相关的资源。 我们找到其中的\"TogetherROS DEB安装包\"，点击下载到电脑端。大概有300多兆的文件大小，很快就能下载完成。 这里我们先使用DEB安装包，来直接安装编译好的二进制文件。未来课程中我们会介绍如何通过源码编译的方式进行安装。 接下来我们进行TogetherROS镜像文件的复制安装。 安装TogetherROS 首先我们需要把电脑端的TogetherROS镜像文件，拷贝到旭日X3派板端。 大家可以在电脑上右键打开一个终端，并使用scp命令进行文件拷贝，命令格式为：scp + 空格 + .\\ + <要拷贝的文件名> + 用户名 + @ + 旭日X3派的IP地址 + :/ +旭日X3派上的文件目录名。 演示中使用的命令如下： $ scp . \\t ros_debV1_20220607894835.0.deb root@192.169.1.10:/userdata 这样就可以将TogetherROS镜像文件从电脑端拷贝到旭日X3派的userdata目录下。 除了这种拷贝方法，大家还可以使用MobaXterm软件，它提供了一种基于SCP命令的可视化的文件复制方式。 大家可以点击MobaXterm软件页面左侧的“SSH browser”，左边显示的目录就是旭日X3派板子上的文件目录结构。 我们找到板子上对应的userdata文件夹，双击打开它。 使用MobaXterm软件，可以把togetherROS镜像文件从电脑本机上直接拖到板子的文件目录底下。 现在TogetherROS安装包已经传输完成。我们在命令行中进入板子的userdata文件夹下，再确认安装包已经存放到了文件夹。命令行： $ cd /userdata/ $ ls 确认完毕后，我们用LINUX命令行dpkg进行安装，命令格式为:\"dpkg -i <要安装的包的名称>“，大家根据自己实际的版本号进行安装。此处使用命令为： $ dpkg -i tros_debV1_20220607094835.0.deb 等待安装完成，我们用命令“cd /opt\"进入opt文件夹，用ls命令检查一下该路径下的文件，可以看到opt文件夹下有一个tros文件夹，这个文件夹里就是我们刚刚安装好的TogetherROS的所有系统文件了。 如果觉得终端里看不方便，也可以使用MobaXterm软件的可视化浏览器来查看。 大家可以点击/opt/tros文件夹，看看其中的文件结构。 /include文件夹里，是我们后续会用到的关于系统的头文件的调用路径； /lib文件夹里面是库文件； /share文件夹里是安装好的功能包的路径； /src文件夹里是后续会用到的代码； /tools文件夹里是一些小工具。 除此之外，还有很多.bat,.sh脚本文件，它们是用来设置环境变量的。这是因为，你的LINUX系统不知道你安装包的路径在哪，所以需要通过环境变量的脚本来告诉系统，如何找到对应的TogetherROS的功能包、和功能包里的命令工具。 环境变量在我们后续操作里会频繁地使用到，我们会使用到一个”source\"命令来配置环境变量，例如： $ source /opt/tros/setup.bash 运行上面这行命令，就会把当前环境变量设置到系统里去；下次再运行ROS2、TogetherROS指令时，就能找到功能包的路径了。 到这里，TogetherROS也安装完成，下一节我们将对开发板和TogetherROS进行配置。","text_tokens":["flash","内容","”","叹","一步","自己","环境","可视","调用","还有","电脑桌面","好后","下","1.10","之前","流程","博客","完在","在","1","但","storise","插","准备就绪","include","读取","255.0","左边","等","拉到","结构","镜像","相应","面板","前","号","里会","第一步","系统文件","跟","多兆","端的","后续","文件","hdmi","文件夹","root","opt","面上","账户","传输","名","显示","拷贝","是否","基本","有线",":","重启","usb","路径","10","1.1","掉","左上角","，","电源","解压","浏览器","打开","协议","问题","看","情况","同一","\"","压缩","bash","下拉至","几个","到","ssh","拷贝到","一块","影响","拿出",".","计算机管理","上角","出","继续","192.168","制面","警告","2","通信","回车","技术","我们","弹","有","scp","中心","源码","。",";","通过","安装","t","哪个","sh","togetherros","网口","setup","接下","确保","版本号","并","dpkg","src","自带","session","ai","环境变","编译","环境变量","课程","如何","和","工具软件","选用","tros","上边","多数","电脑","来看","-","任意","问号","桌面","就是","以太网",">","一节","下次","没有","旭日","填写","地址","为了","磁盘","左上","中用","地","提供","为止","这是","笔记本电脑","ls","关于","体验","笔记本","拖","未来","255.255","一切","对","很多","准备","计算机","配件","的话","集成","请","以太","当然","询问","操作","串口","端","debv1","第一个","要","网络","名为","看看","一台","检查一下","了解","图标","提醒","5v3a","所示","下拉到","20220607894835.0","都","端口号","十分","大小","例如","sdcrd","产品","rufus","上面","桌面上","电源接口","创建","4","我","yes","专区","再","几乎","工具","com6","pwd","整体","命令行","接口","使用","16gb","信息","基于","放在","二进制","typec","第一次","文件大小","$","此时","i","跟随","空格","版本","属性","cd","正式","成功","掩码","弹窗","默认","的","放进","“","如果","展开","左侧","share","机器人","双击","供电","方法","也"," ","第二步","驱动","演示","密码","ip","通讯","界面","与","进制","internet","了","其中","脚本","\\","建议","确定","点击","卡里","产生","右键","三步","它","这","窗口","是因为","关闭","分钟",",","网线","数字","指令","电源线","mkdir","一样","对应","顺利","板卡","文件目录","首先","设置","后","921600","最好","会","推荐","除此之外","serial","软件","x3","便于","远程","这里","一起","、","状态","任务","system","达到","网站","来","一下","拿","就点","出厂","目录","一些","能","例程","不","ros2","电脑桌","下面","网络通讯","开始","ip192.168","机器","啦","完后","起来","；","复制","linux","最后","介绍","让","件夹","页面","是","你","之间","觉得","好","必要","完毕","从","—","img","tools","标记","之外","硬件","下来","已经","终端","理器","@","输入","找到","用","派板","关系","压缩文件","如下","查看","方式","保证","接下来","第三步","账号","再次","browser","除了","清除","就要","用户","用于","静态","ip地址","资料","ok","现在","合适","手上","用到","烧","：","进行","8gb","mobaxterm","进一步","稍后","一种","模块","第三","网关","各种","一根","三位","里面","读卡器","登录","平台","除此","下载","常用","户名","存放","即可","更好","浏览","lib","300","包","将","可以","自动","所以","ubuntu","没关系","管理","相关","刚刚","按照","/","日志","高","+","里","代码","子网","正在","网段","拔出来","然后","这种","nand","_","效率","网络连接","选中","1.100","连接","小","需要","任何","userdata","设备","以外","大概","文件名","并且","齐全","压缩包","库","系统","变量","进入","卡","选项","ros","运行","弹出","100","算机","功能","大多","端口","大家","sdcard","下图","开发","底层","方便","出来","deb","之后","很快","启动","进度","中有","安装包","频繁","上电","根据","看到","bat","写","管理器","该","255","地平","完成","下拉","进度条","还","给","更","口号","笔记","显示器","勾选","第一","比如","读卡","两个","另","用户名","开发板","sd","行","这个","参数","说明","不到","20220607094835.0","先","填入","实际","一张","一次","拔出","就绪","机上","它们","直接","过程","本","计算","test","192.169","或者","名称","派","头文件","就","控制","上","<","底下","用来","镜像文件","工作","没关","可视化","所有","disk","因为","配置","一个","中","等待","这样","此处","选择","第二","命令","格式","加载","社区","知道","以上","会弹","地平线","控制面板","哪","波特","确认","时","中为","检查","各项","二步","板子","为","一套","机","告诉","source","资源","当前","大约","包里","搜索","大多数","保存","烧写","烧录","把","子网掩码","波特率","速度","no","串","去","效果","这些","此外"],"title":"系统安装","title_tokens":["安装","系统"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros","text":"我们在旭日X3派上安装系统镜像，并进一步完成TogetherROS系统的安装，大家如果手上有开发板的话，建议跟随课程一起操作。 先来了解一下TogetherROS系统安装的整体流程： 第一步，要完成硬件的准备，我们需要找到一块旭日X3派的开发板，并且准备好电源线、SD卡、读卡器、串口模块等必要的配件，当然还需要有一台操作的电脑啦。 硬件都准备好之后，就可以进入第二步，给旭日X3派下载并安装Ubuntu系统镜像，这是TogetherROS系统运行必要的底层环境。 第三步，就可以开始安装TogetherROS啦。 安装完成后，我们还需要进一步完成一些配置工作，可以也让旭日X3派板卡上的各项功能都运行起来，保证TogetherROS的顺利运行。 最后一步，就是体验TogetherROS出厂自带的一些例程啦，确定一切安装顺利，为后续机器人开发最好准备。 接下来，我们就按照这个流程，开始操作。","text_tokens":["功能","一步","环境","来","一下","这是","体验","大家","出厂","一些","例程","开发","流程","一切","底层","准备","配件","的话","开始","当然","之后","机器","操作","啦","起来","在","串口","最后","让","要","一台","了解","等","好","镜像","必要","完成","还","给","都","第一步","硬件","下来","第一","找到","后续","读卡","开发板","sd","这个","保证","接下来","第三步","整体","先","，","电源","手上","跟随","：","进一步","派","就","上","的","模块","第三","如果","工作","一块","机器人","配置","也"," ","第二步","读卡器","第二","我们","下载","有","。","可以","安装","togetherros","ubuntu","接下","建议","确定","按照","一起","三步","并","自带","各项","二步","为","课程","电源线","顺利","板卡","电脑","需要","后","最好","就是","并且","系统","旭日","x3","进入","卡","、","运行"],"title":"TogetherROS系统安装","title_tokens":["togetherros","安装","系统"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_1","text":"先来完成硬件准备： 找到一块旭日X3派的板卡，准备好一套5V3A的电源和TypeC电源线，稍后会连接到这里的电源接口，给板卡供电。 然后准备好一张8GB以上的SD卡和读卡器，下一步我们会在上边烧写系统镜像。 接下来使用一个串口模块，连接旭日X3派和笔记本电脑，便于下一步看到系统镜像的启动信息。 如果大家有网线和HDMI显示器的话，也可以先准备好，在之后的操作中用的上，如果没有也没关系，不影响TogetherROS系统的基本使用。 硬件准备齐全之后，就可以进入第二步了。","text_tokens":["中用","一步","来","笔记本电脑","笔记本","大家","下","不","准备","的话","之后","操作","启动","在","串口","看到","好","5v3a","镜像","完成","给","笔记","硬件","下来","显示器","找到","读卡","hdmi","电源接口","显示","基本","关系","sd","接下来","接口","先","使用","一张","信息","，","电源","typec","：","8gb","派","稍后","就","上","的","模块","如果","到","没关","一块","影响","供电","一个","也"," ","第二步","读卡器","第二","我们","有","。","了","以上","可以","togetherros","接下","没关系","网线","二步","然后","一套","电源线","和","上边","板卡","烧写","连接","电脑","会","齐全","没有","系统","旭日","x3","便于","进入","卡","这里"],"title":"硬件准备","title_tokens":["硬件","准备"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#ubuntu","text":"我们来给旭日X3派安装Ubuntu系统，关于系统镜像和烧写工具，都可以在地平线AI社区中找到。","text_tokens":["地平线","ubuntu","烧","来","关于","派","找到","ai","和","中","在","工具","我们","写","，","社区","系统","镜像","旭日","x3","地平","。","可以","安装","给","都"],"title":"安装Ubuntu系统","title_tokens":["ubuntu","系统","安装"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#sd","text":"首先登录地平线AI社区，点击”产品中心——资源中心“， 进入页面后下拉至”X3派资料包“专区，点击下载其中的”旭日X3派系统镜像“，会有一个压缩包，把它保存到当前电脑桌面。 此外，我们稍后将镜像烧写到SD卡里，需要用到烧写小工具，如果大家电脑上没有合适的工具，可以下拉到”工具“专区，点击下载”烧录 工具rufus\"。 下载完后我们来看一下两个压缩文件中的内容： 其中一个是烧写X3派镜像文件的工具，压缩包中有两个文件，一个是system_sdcard.img文件，是我们稍后会用于烧写SD卡的镜像文件；另一个是disk_nand.img文件，用于烧写旭日X3派中的flash文件，大多数情况下都用不到； 另一个压缩包里是我们稍后用于烧写镜像的rufus工具。 我们把两个压缩包都解压出来，然后把SD卡放进读卡器、插到电脑端 接下来就可以开始烧写SD卡镜像。","text_tokens":["flash","内容","”","system","一下","大多","大家","电脑桌面","下","sdcard","出来","电脑桌","开始","完后","；","中有","端","插","页面","写","是","拉到","地平","镜像","下拉","下拉到","—","img","都","下来","产品","用","rufus","文件","读卡","两个","另","sd","压缩文件","专区","接下来","不到","工具","用于","，","解压","资料","合适","用到","烧","：","情况","\"","压缩","派","稍后","下拉至","就","上","的","放进","“","如果","到","镜像文件","disk","一个",".","中"," ","读卡器","登录","下载","我们","有","社区","中心","。","包","将","可以","其中","地平线","接下","点击","卡里","它","里","ai","然后","nand","资源","当前","_","多数","大多数","保存","烧写","电脑","烧录","小","首先","把","来看","需要","后","会","桌面","压缩包","没有","系统","x3","旭日","进入","卡","、","此外"],"title":"下载SD卡镜像","title_tokens":["镜像","sd","下载","卡"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#sd_1","text":"运行解压出来的烧写工具rufus。启动后需要确认几个参数： 第一个是确定烧写到哪个磁盘上。工具软件会默认搜索当前读取到的SD卡，下图所示磁盘名称，就是演示时插好的16GB的SD卡。 下一步我们点击“选择”，找到需要烧写的镜像文件。演示中已经把需要的system_sdcrd.img文件放在了桌面上，选中它点击“打开”； 下面的内容就可以用默认的配置，点击“开始”会弹出警告告诉我们将把磁盘里的所有文件都清除掉，这没有问题，我们点击“选择“，就开始烧写SD卡镜像了。 进度条显示“准备就绪”后，点击“关闭”，此时你的SD卡镜像就已经烧写完成了，我们把SD卡的读卡器拔出来。","text_tokens":["内容","”","一步","system","下","下图","出来","下面","准备","开始","启动","；","进度","第一个","插","准备就绪","写","读取","是","你","好","镜像","进度条","完成","所示","img","都","已经","第一","找到","sdcrd","用","读卡","rufus","文件","桌面上","面上","显示","sd","参数","工具","清除","16gb","掉","拔出","解压","，","放在","打开","就绪","问题","此时","烧","：","名称","就","上","默认","的","几个","“","到","镜像文件","所有","配置","一个",".","中","出"," ","警告","读卡器","演示","选择","我们","。","将","了","可以","哪个","会弹","确认","确定","点击","时","它","这","关闭","里","拔出来","告诉","工具软件","_","当前","搜索","选中","烧写","把","需要","后","会","桌面","就是","软件","没有","卡","磁盘","运行"],"title":"烧写SD卡镜像","title_tokens":["镜像","烧写","sd","卡"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_2","text":"接下来把SD卡插到旭日X3派上。 把串口模块连接到电脑的USB上。 连接好串口模块后，为了确保串口已经跟电脑连接成功、并且安装好了驱动，我们可以右键“我的电脑”图标、选择“管理”，在打开的”计算机管理“界面中找到”设备管理器——端口“，检查一下你的USB串口是否已经显示出了对应的设备。演示中的端口号为COM6,说明串口已经成功驱动了。 如果没有看到自己的设备号、或者设备号前有一个叹号或者问号标记，说明你的驱动没有安装好，可以搜索网络上的技术博客，来完成串口模块的驱动安装。 关闭“计算机管理”窗口，接下来就要通过串口与旭日X3派进行连接了。这里我们需要用到一个串口小工具，大家可以使用自己常用的工具。 演示中使用的串口工具是MobaXterm,十分推荐大家使用这个工具，里面集成了开发过程中需要使用的各种小工具，我们后续的串口通讯、SSH网络通讯，都会使用这些工具完成。 打开MobaXterm,点击左上角的\"Session\"； 找到里面的“Serial\"串口选项，点击打开；串口号选择本机连接到旭日X3派的相应端口，演示中为COM6; 波特率选择921600。选项好后点击“OK”。 现在串口已经连接成功了，但当前旭日X3派的板子还没有上电，所以没有任何信息弹出。 我们把电源线与旭日X3派连接好。 可以看到弹出了日志提醒：“当前系统正在启动”。等待系统加载完成。 现在可以看到系统已经加载成功了。","text_tokens":["弹出","算机","”","叹","自己","来","一下","端口","大家","好后","博客","开发","计算机","网络通讯","集成","启动","；","在","串口","但","上电","插","看到","网络","检查一下","管理器","你","图标","是","提醒","好","完成","相应","—","还","都","前","口号","号","端口号","标记","跟","十分","下来","已经","理器","找到","后续","显示","是否","我","sd","这个","usb","说明","接下来","工具","com6","就要","使用","左上角","信息","，","电源","打开","ok","现在","用到","过程","进行","本","计算","：","mobaxterm","或者","\"","派","成功","上","的","模块","“","如果","到","ssh","各种","计算机管理","一个","里面","中","出","上角","等待"," ","驱动","选择","演示","技术","我们","常用","弹","有","通讯","加载","界面","与","。","了","可以","通过","安装",";","所以","选项","接下","管理","波特","点击","确保","右键","日志","窗口","中为","关闭",",","检查","session","正在","板子","为","电源线","机","对应","当前","搜索","电脑","连接","小","把","问号","需要","任何","波特率","后","921600","设备","推荐","会","并且","serial","串","没有","系统","旭日","x3","卡","这些","为了","这里","、","左上"],"title":"连接串口","title_tokens":["串口","连接"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_3","text":"接下来我们需要登录系统。我们有两个账号可以用来登录： 账号1：用户名为root，密码也为root； 账号2：用户名为storise，密码也为storise； 这里演示使用root用户来登录。输入用户名、密码，回车，需要等待大约1分钟，因为第一次登录需要展开一些系统必要的安装软件，安装好后系统会自动重启。 系统自动重启后，再次使用root用户登录。现在你的UBUNTU系统就已经安装好了。 我们可以使用LINUX系统常用的一些命令行进行查看和设置，比如ls查看当前命令，pwd查看当前路径，还可以使用mkdir命令创建文件夹，比如这里,一个test文件夹就创建成功了。 到这里为止，旭日X3派上的Ubuntu系统就安装成功啦，我们继续下一步。","text_tokens":["一步","为止","来","ls","好后","下","一些","啦","；","linux","1","storise","件夹","名为","你","好","必要","还","下来","已经","输入","第一","比如","文件","文件夹","root","两个","用户名","创建","重启","查看","路径","再次","接下来","账号","pwd","命令行","使用","用户","一次","，","现在","第一次","进行","：","test","派","就","成功","上","的","展开","用来","到","因为","一个","也","等待","继续"," ","演示","2","登录","回车","密码","我们","命令","户名","常用","有","。","了","可以","安装","自动","ubuntu","接下","分钟",",","为","mkdir","和","大约","当前","需要","设置","后","会","软件","系统","旭日","x3","这里","、"],"title":"串口登录系统","title_tokens":["串口","登录","系统"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros_1","text":"安装TogetherROS系统。 为了达到更好的通信效率，我们后续使用有线网络连接旭日X3派，这里大家可以拿出一根网线，直接连接电脑和旭日X3派的网口。 旭日X3派中出厂已经配置好了静态IP地址，是192.168.1.10，我们将使用的电脑也配置到同一网段即可。","text_tokens":["togetherros","网口","达到","已经","同一","派","大家","出厂","1.10","网线","的","后续","网段","到","和","一根","效率","网络连接","有线","配置","拿出",".","也","中","192.168","连接","电脑"," ","通信","网络","我们","使用","是","即可","更好","，","静态","系统","。","旭日","x3","好","了","可以","ip地址","安装","将","地址","为了","这里","直接"],"title":"安装TogetherROS系统","title_tokens":["togetherros","系统","安装"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_4","text":"接下来请大家拿一根网线，连接旭日X3派和电脑。 然后，在电脑端打开控制面板，找到“查看网络状态和任务”。 找到已经连接成功的以太网，点击它； 会弹出一个窗口，我们点击“属性”。 再次弹出窗口，我们双击选择“Internet协议版本4”。 然后会弹出一个配置IP地址的窗口，我们勾选”使用下面的IP地址“。 按照如下信息填入： IP地址：192.168.1.100 子网掩码：255.255.255.0 默认网关：192.168.1.1 我们使用的旭日X3派的板子IP为192.168.1.10，所以IP后三位除了.10和网关.1以外，大家可以选用1-255之间的任意数字，这里使用.100； 填写完在所有窗口点击“确定”，最后关闭窗口。现在网络的配置就完成了，此时电脑端的静态IP就是192.168.1.100,我们通过这个IP与旭日X3派产生连接。","text_tokens":["100","任务","”","拿","大家","1.10","255.255","完在","下面","请","以太","；","在","最后","1","端","网络","255.0","之间","255","完成","面板","下来","已经","勾选","端的","找到","4","如下","查看","这个","接下来","再次","除了","10","1.1","填入","使用","信息","，","静态","ip地址","打开","协议","现在","此时","版本","：","属性","派","就","控制","成功","掩码","默认","的","“","网关","一根","所有","三位","配置","双击","一个",".","制面","出","192.168"," ","选择","我们","ip","弹","与","。","internet","了","可以","通过","会弹","所以","控制面板","接下","确定","点击","按照","产生","它","窗口","关闭",",","网线","数字","子网","板子","然后","为","和","选用","1.100","连接","电脑","-","任意","子网掩码","后","以外","就是","以太网","旭日","x3","填写","地址","这里","状态"],"title":"配置有线网络","title_tokens":["网络","配置","有线"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#ssh","text":"我们再次打开MobaXterm软件,点击左上角的\"Session\"，找到里面的\"SSH\",输入 旭日X3派板子的IP192.168.1.10，点击”OK“。 弹出登录窗口，我们用root账户登录：用户名为root，密码为root。这里会弹窗询问是否保存登录密码，如果需要保存就点“YES”，不需要保存就点“NO”。 现在我们就成功通过网络SSH协议登录到了旭日X3派板子上，和之前我们用串口登录的效果几乎是一样的，但现在我们是用网络通讯，所以现在通讯的效率和传输的速度会更高。 配置完成网络通讯后，我们来正式安装TogetherROS。","text_tokens":["”","来","就点","1.10","之前","不","网络通讯","ip192.168","询问","串口","但","网络","名为","是","完成","更","输入","找到","用","root","账户","传输","是否","yes","几乎","再次","左上角","用户","，","打开","协议","ok","现在","：","mobaxterm","\"","正式","派","就","成功","上","弹窗","的","“","如果","到","ssh","配置","里面",".","上角","出"," ","登录","密码","我们","弹","通讯","。","了","通过","安装","所以","togetherros","点击","窗口","高",",","session","板子","为","和","一样","效率","保存","需要","后","会","速度","no","软件","效果","旭日","x3","这里","左上"],"title":"SSH远程登录","title_tokens":["ssh","远程","登录"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros_2","text":"","text_tokens":[],"title":"下载TogetherROS安装包","title_tokens":["togetherros","安装","下载","安装包"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_5","text":"我们打开地平线社区的网站，在“产品中心”页面下拉到“机器人平台”，这里面都是TogetherROS相关的资源。 我们找到其中的\"TogetherROS DEB安装包\"，点击下载到电脑端。大概有300多兆的文件大小，很快就能下载完成。 这里我们先使用DEB安装包，来直接安装编译好的二进制文件。未来课程中我们会介绍如何通过源码编译的方式进行安装。 接下来我们进行TogetherROS镜像文件的复制安装。","text_tokens":["地平线","togetherros","文件大小","接下","相关","”","点击","网站","进行","来","下来","这","\"","多兆","未来","就","大小","找到","能","的","产品","文件","“","编译","镜像","到","镜像文件","课程","源码","deb","如何","资源","机器人","机器","里面","很快","中","电脑","复制","在"," ","安装包","方式","介绍","端","接下来","平台","会","页面","我们","下载","大概","有","先","是","使用","拉到","，","社区","中心","300","好","地平","打开","。","下拉","完成","进制","二进制","安装","通过","下拉到","这里","直接","都","其中"],"title":"拷贝安装包","title_tokens":["拷贝","安装","安装包"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros_3","text":"首先我们需要把电脑端的TogetherROS镜像文件，拷贝到旭日X3派板端。 大家可以在电脑上右键打开一个终端，并使用scp命令进行文件拷贝，命令格式为：scp + 空格 + .\\ + <要拷贝的文件名> + 用户名 + @ + 旭日X3派的IP地址 + :/ +旭日X3派上的文件目录名。 演示中使用的命令如下： $ scp . \\t ros_debV1_20220607894835.0.deb root@192.169.1.10:/userdata 这样就可以将TogetherROS镜像文件从电脑端拷贝到旭日X3派的userdata目录下。 除了这种拷贝方法，大家还可以使用MobaXterm软件，它提供了一种基于SCP命令的可视化的文件复制方式。 大家可以点击MobaXterm软件页面左侧的“SSH browser”，左边显示的目录就是旭日X3派板子上的文件目录结构。 我们找到板子上对应的userdata文件夹，双击打开它。 使用MobaXterm软件，可以把togetherROS镜像文件从电脑本机上直接拖到板子的文件目录底下。 现在TogetherROS安装包已经传输完成。我们在命令行中进入板子的userdata文件夹下，再确认安装包已经存放到了文件夹。命令行： $ cd /userdata/ $ ls 确认完毕后，我们用LINUX命令行dpkg进行安装，命令格式为:\"dpkg -i <要安装的包的名称>“，大家根据自己实际的版本号进行安装。此处使用命令为： $ dpkg -i tros_debV1_20220607094835.0.deb 等待安装完成，我们用命令“cd /opt\"进入opt文件夹，用ls命令检查一下该路径下的文件，可以看到opt文件夹下有一个tros文件夹，这个文件夹里就是我们刚刚安装好的TogetherROS的所有系统文件了。 如果觉得终端里看不方便，也可以使用MobaXterm软件的可视化浏览器来查看。 大家可以点击/opt/tros文件夹，看看其中的文件结构。 /include文件夹里，是我们后续会用到的关于系统的头文件的调用路径； /lib文件夹里面是库文件； /share文件夹里是安装好的功能包的路径； /src文件夹里是后续会用到的代码； /tools文件夹里是一些小工具。 除此之外，还有很多.bat,.sh脚本文件，它们是用来设置环境变量的。这是因为，你的LINUX系统不知道你安装包的路径在哪，所以需要通过环境变量的脚本来告诉系统，如何找到对应的TogetherROS的功能包、和功能包里的命令工具。 环境变量在我们后续操作里会频繁地使用到，我们会使用到一个”source\"命令来配置环境变量，例如： $ source /opt/tros/setup.bash 运行上面这行命令，就会把当前环境变量设置到系统里去；下次再运行ROS2、TogetherROS指令时，就能找到功能包的路径了。 到这里，TogetherROS也安装完成，下一节我们将对开发板和TogetherROS进行配置。","text_tokens":["功能","”","提供","地","自己","环境","来","可视","一下","调用","ls","关于","拖","大家","还有","1.10","目录","下","一些","能","开发","方便","不","对","很多","ros2","deb","操作","；","复制","在","安装包","linux","频繁","端","根据","debv1","要","件夹","看到","bat","看看","页面","include","检查一下","左边","是","你","该","觉得","结构","镜像","完毕","好","完成","从","还","20220607894835.0","tools","之外","里会","系统文件","已经","终端","端的","@","找到","例如","用","后续","文件","文件夹","root","opt","上面","派板","传输","名","显示","拷贝","用户名","开发板",":","如下","行","这个","查看","方式","再","路径","browser","除了","20220607094835.0","工具","命令行","使用","实际","用户","基于","，","ip地址","打开","浏览器","机上","现在","它们","直接","用到","$","i","看","空格","版本","进行","：","本","mobaxterm","cd","192.169","\"","名称","bash","派","头文件","就","一种","上","的","“","<","如果","底下","用来","左侧","镜像文件","ssh","到","拷贝到","可视化","所有","share","因为","配置","方法","双击","一个",".","也","中","等待","里面","这样"," ","此处","演示","除此","我们","命令","户名","格式","有","存放","scp","浏览","lib","知道","。","将","包","了","可以","通过","安装","t","其中","togetherros","sh","脚本","所以","setup","\\","刚刚","哪","确认","点击","右键","/","它","这","是因为","时","版本号","并","dpkg","+","src","里",",","代码","检查","板子","指令","环境变","环境变量","为","这种","告诉","如何","和","source","_","对应","tros","当前","包里","文件目录","电脑","-","首先","把","小","需要","userdata","后","设置","会","就是","文件名","除此之外",">","一节","软件","下次","库","系统","变量","旭日","x3","进入","去","地址","ros","这里","、","运行"],"title":"安装TogetherROS","title_tokens":["togetherros","安装"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/","text":"TogetherROS系统配置 无论是旭日X3派，还是TogetherROS，在正式使用之前，都还需要进行一些必要的配置，完善必要的功能模块，提供完整的算力支持，达到最佳状态。 网络连接 第一个配置，是无线网络连接。 当然，大家也可以直接用网线连接旭日X3派和一个可以上网的路由器，不过更多时候，我们还是会使用无线网络来上网。 我们打开MobaXterm,选择SSH，使用root用户登录板卡；如果之前登录过板卡、还没有关闭的话，也可以继续使用。 现在我们可以通过命令行搜索周边环境有哪些WIFI信号，命令如下： $ sudo nmcli device wifi rescan #扫描当前环境里所有WIFI名称，但扫描结果不会显示 $ nmcli device wifi list #显示扫描到的WIFI名称 $ sudo nmcli device wifi connect <账号> password <密码> #连接WIFI $ sudo vim /etc/network/interfaces #修改DHCP配置 比如，我的办公室里wifi的名称是psmicro,我们就可以使用“sudo nmcli device wifi connect psmicro password <密码>”来连接。 等到终端返回信息“successfully activated\",就说明WIFI连接成功； 我们可以Ping古月居的网址，来检查一下连接。如果能够Ping通，就说明网络已经连接成功，现在就可以成功连接到互联网，进行后续的软件下载和更新了。 网络配置完成后，在后续开发中，大家就可以直接下载或更新各种软件包了。 系统更新 第二个配置，是更新当前旭日X3派所使用的Ubuntu镜像，和在电脑上使用的命令相同。 我们更新一下当前的系统镜像： $ sudo apt update #会按照当前软件源的域名设置去连接远程软件源 $ sudo apt full-upgrade #升级所有可以升级的软件包 弹出如下对话，我们选择“Y”，回车； 这样我们就完成了对系统更新的检查，并安装好了更新包。 CPU调频策略 第三个配置，设置CPU的调频策略，这是一个可选项，大家了解之后，在未来需要使用的时候进行配置即可。 动态调频 $ echo > ondemand /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让系统根据当前负载，动态调整CPU频率 满频模式 $ echo > performance /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让CPU始终以满频，也就1.2GHz的频率工作 打开超频 $ echo 1 > /sys/devices/system/cpu/cpufreq/boost #使CPU以超频，也就是1.5GHz的频率工作 关闭超频 $ echo 0 > /sys/devices/system/cpu/cpufreq/boost 这里CPU频率为，满频模式：1.2GHz，超频模式：1.5GHz。 大家需要注意，默认的系统配置是关闭超频、并且动态调频的配置。这样可以比较好地保证功率最优。 安装ROS2功能包 接下来，还有一个很重要的配置，那就是安装ROS2功能包，我们说TogetherROS是基于ROS2深度优化的，很多模块还是会复用ROS2中的功能，所有ROS2的原生功能也可以支持，这里我们就把ROS2必要的功能包都安装一下，让系统的功能模块更加完整。 熟悉ROS2的同学，应该对这些指令并不陌生，和ROS2官方手册中的安装步骤一致，不过还是建议大家跟着课程的步骤一起来安装一下。 添加ROS2源 第一步我们需要更新系统软件源，并安装必要的下载工具。 $ sudo apt update && sudo apt install curl gnupg lsb-release #更新软件源 $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg #设置ROS2软件源秘钥 $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null #设置ROS2软件源 Attention 大部分国内开发者在这都会遇到同一个问题：网址无法连接。解决方案可以参考古月居官网上的这篇帖子： 《解决”Failed to connect to raw.githubusercontent.com“报错》 安装ROS2包 $ sudo apt update #更新软件源 $ sudo apt install ros-foxy-ros-base ros-foxy-demo-nodes-cpp # 安装ROS2功能包 时间会有些长，需要稍微等待一下。 现在ROS2就安装完成了。 大家可以使用同样的命令，继续安装ROS2中的更多功能包。 这里推荐大家先安装ROS2之后会使用到的编译器，比如python3-colcon-common-extensions。我们后续一些TogetherROS功能包的编译，也会使用python3-colcon-common的命令来安装。 $ sudo apt install python3-colcon-common-extensions # ROS2编译器 另外，我们推荐大家安装一个git工具，大家可以通过它下载GitHub、GitLab上的软件包，我们后续也会用到。安装命令为本小节代码第四行。 $ sudo apt install git # 安装git工具 到这里，我们常用的软件和功能包就安装完成了。我们可以看到，在旭日X3派文件目录/opt底下，除了之前的/tros文件夹外，还多出来一个/ros文件夹，里面就是我们刚才安装好的ros-foxy版本的所有系统文件。 如果大家要使用ROS2的功能包，也需要source里面的.bash或者.bat脚本文件。 建立软链接 为了方便我们在TogetherROS系统李调用ROS2的功能，在TogetherROS里提供了一个叫create_soft_link创建软链接的脚本，它而已通过软链接，把ROS2的环境变量链接到当前TogetherROS的环境包里来。执行以下命令： $ cd /opt/tros ## 使用/opt/tros目录下的create_soft_link.py创建ROS package至TogetherROS的软链接 $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros 这样设置以后，假如你source了TogetherROS的环境变量，那么同样的配置也会对ROS2生效。 好啦，到这里为止，所有必要的配置项我们都做完了，是不是有点迫不及待想要使用TogetherROS了呢？","text_tokens":["那么","”","一步","环境","不会","过","链接","调用","还是","还有","o","(","下","之前","failed","开发者",")","所","深度","解决","create","策略","在","1","但","调频","demo","更新","更加","功能模块","镜像","参考","第四","做","第一步","系统文件","路由器","后续","文件","文件夹","root","重要","opt","显示","不过","《","lsb","为本",":","foxy","attention","governor","是不是","]","git","update","，","interfaces","打开","问题","功率","假如","四行","完","同一","\"","bash","长","周边","wifi","signed","稍微","建立","到","ssh","|","互联",".","gpg","？","出","继续","上网","公室","迫不及待","居官","回车","动态","始终","我们","弹","有","。","通过","安装","togetherros","接下","编译器","keyring","archive","并","dpkg","第四行","以满频","软件包","支持","base","环境变","编译","环境变量","完整","课程","null","和","curl","usr","tros","官方","电脑","报错","-","结果","》","一致","就是",">","没有","以","旭日","第三个","为了","install","信号","#","full","提供","地","为止","dev","这是","联网","未来","下载工具","soft","对","key","cpp","很多","而已","源","或","的话","秘钥","arch","有些","当然","无线","第一个","网络","要","检查一下","了解","都","二个","boost","扫描","##","创建","时候","[","architecture","我","叫","device","熟悉","工具","colcon","命令行","使用","信息","基于","完善","无法","域名","$","network","policy0","国内","版本","以后","cd","正式","codename","成功","默认","的","“","如果","呢","password","办公室","share","也"," ","etc","密码","路由","同样","无论","以下","sys","最佳","os","了","脚本","建议","keyrings","performance","它","这","activated","关闭",",","网线","帖子","指令","软","包都","tee","优化","对话","板卡","print","common","github","文件目录","很","devices","设置","后","会","能够","推荐","方案","修改","网址","py","软件","哪些","返回","x3","远程","这篇","githubusercontent","这里","、","状态","rescan","ping","system","达到","来","一下","=","rosdistro","那","小节","目录","一些","y","不","ros2","生效","模式","nodes","达到最佳","啦","；","起来","package","https","ghz","让","李","件夹","sources","是","你","好","必要","至","下来","已经","步骤","应该","终端","大部分","项","可选项","用","古月","如下","可选","无论是","保证","复用","手册","接下来","账号","除了","另外","对系统","用户","多功能","现在","原生","添加","互联网","用到","无线网","connect","超频","进行","：","successfully","dhcp","mobaxterm","nmcli","线网","模块","list","第三","各种","packages","相同","里面","时间","说","登录","by","upgrade","下载","cpu","常用","三个","即可","系统软件","多","包","可以","ubuntu","按照","master","/","&&","通","cpufreq","里","代码","main","遇到","to","一","scaling","0","_","网络连接","陌生","最优","连接","需要","apt","release","更新包","同一个","--","周边环境","并且","系统","变量","选项","ros","ssl","ondemand","功能","vim","大家","不及","解决方案","开发","方便","出来","deb","raw","之后","根据","看到","bat","统配","等到","有点","完成","还","更","extensions","执行","无线网络","第一","org","比如","部分","1.2","满频","sudo","说明","负载","算力","先","echo","gnupg","1.5","直接","外","或者","名称","派","就","d","上","<","gitlab","底下","网上","工作","大部","所有","配置","一个","系统配置","中","等待","这样","link","选择","注意","第二","com","命令","http","升级","频率","python3","想要","办公","检查","psmicro","第二个","为","居","系统配","source","当前","调整","包里","搜索","刚才","跟着","同学","把","不是","使","比较","去","这些"],"title":"系统配置","title_tokens":["配置","系统配置","系统","系统配","统配"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#togetherros","text":"无论是旭日X3派，还是TogetherROS，在正式使用之前，都还需要进行一些必要的配置，完善必要的功能模块，提供完整的算力支持，达到最佳状态。","text_tokens":["togetherros","功能","提供","进行","达到","正式","还是","派","一些","之前","的","模块","支持","完整","配置","达到最佳","在","无论是","需要","算力","使用","无论","，","功能模块","最佳","必要","旭日","x3","完善","。","还","状态","都"],"title":"TogetherROS系统配置","title_tokens":["togetherros","配置","系统配置","系统","系统配","统配"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_1","text":"第一个配置，是无线网络连接。 当然，大家也可以直接用网线连接旭日X3派和一个可以上网的路由器，不过更多时候，我们还是会使用无线网络来上网。 我们打开MobaXterm,选择SSH，使用root用户登录板卡；如果之前登录过板卡、还没有关闭的话，也可以继续使用。 现在我们可以通过命令行搜索周边环境有哪些WIFI信号，命令如下： $ sudo nmcli device wifi rescan #扫描当前环境里所有WIFI名称，但扫描结果不会显示 $ nmcli device wifi list #显示扫描到的WIFI名称 $ sudo nmcli device wifi connect <账号> password <密码> #连接WIFI $ sudo vim /etc/network/interfaces #修改DHCP配置 比如，我的办公室里wifi的名称是psmicro,我们就可以使用“sudo nmcli device wifi connect psmicro password <密码>”来连接。 等到终端返回信息“successfully activated\",就说明WIFI连接成功； 我们可以Ping古月居的网址，来检查一下连接。如果能够Ping通，就说明网络已经连接成功，现在就可以成功连接到互联网，进行后续的软件下载和更新了。 网络配置完成后，在后续开发中，大家就可以直接下载或更新各种软件包了。","text_tokens":["信号","rescan","#","”","ping","环境","来","过","不会","一下","vim","联网","还是","大家","之前","开发","或","的话","当然","；","无线","在","但","第一个","网络","检查一下","等到","是","更新","完成","还","更","已经","终端","无线网络","路由器","扫描","第一","用","比如","后续","root","显示","不过","时候","我","古月","如下","device","sudo","说明","账号","命令行","使用","用户","信息","，","interfaces","打开","现在","互联网","直接","$","network","无线网","connect","successfully","：","进行","dhcp","mobaxterm","nmcli","\"","名称","线网","派","就","成功","周边","wifi","的","list","“","如果","<","到","ssh","password","办公室","各种","所有","互联","配置","一个","也","中","继续","上网"," ","选择","公室","登录","etc","密码","我们","路由","命令","下载","有","。","多","了","可以","通过","/","activated","关闭","通",",","办公","网线","里","检查","软件包","psmicro","和","居","当前","搜索","板卡","连接","结果","后","会","能够","修改","周边环境","网址",">","软件","没有","哪些","返回","旭日","x3","、"],"title":"网络连接","title_tokens":["网络连接","网络","连接"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_2","text":"第二个配置，是更新当前旭日X3派所使用的Ubuntu镜像，和在电脑上使用的命令相同。 我们更新一下当前的系统镜像： $ sudo apt update #会按照当前软件源的域名设置去连接远程软件源 $ sudo apt full-upgrade #升级所有可以升级的软件包 弹出如下对话，我们选择“Y”，回车； 这样我们就完成了对系统更新的检查，并安装好了更新包。","text_tokens":["$","二个","ubuntu","#","full","”","好","：","按照","一下","派","并","就","上","检查","软件包","的","“","y","所","第二个","和","源","当前","相同","所有","对话","配置","如下","出","电脑","sudo","在"," ","连接","-","；","选择","这样","第二","apt","设置","回车","会","更新包","upgrade","命令","我们","弹","使用","是","更新","对系统","update","，","软件","去","系统","镜像","旭日","x3","。","远程","可以","完成","了","安装","域名","升级"],"title":"系统更新","title_tokens":["更新","系统"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#cpu","text":"第三个配置，设置CPU的调频策略，这是一个可选项，大家了解之后，在未来需要使用的时候进行配置即可。 动态调频 $ echo > ondemand /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让系统根据当前负载，动态调整CPU频率 满频模式 $ echo > performance /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让CPU始终以满频，也就1.2GHz的频率工作 打开超频 $ echo 1 > /sys/devices/system/cpu/cpufreq/boost #使CPU以超频，也就是1.5GHz的频率工作 关闭超频 $ echo 0 > /sys/devices/system/cpu/cpufreq/boost 这里CPU频率为，满频模式：1.2GHz，超频模式：1.5GHz。 大家需要注意，默认的系统配置是关闭超频、并且动态调频的配置。这样可以比较好地保证功率最优。","text_tokens":["ondemand","#","地","system","这是","大家","未来","模式","之后","策略","在","ghz","让","1","调频","根据","统配","了解","是","好","boost","可选项","时候","1.2","满频","可选","governor","保证","负载","使用","echo","，","1.5","打开","功率","$","policy0","超频","进行","：","就","默认","的","第三","工作","配置","一个","也","系统配置","这样"," ","注意","动态","始终","cpu","三个","即可","sys","。","可以","频率","选项","performance","/","关闭","cpufreq","以满频","为","scaling","系统配","0","_","当前","调整","最优","devices","需要","设置","就是","并且",">","使","比较","系统","以","第三个","这里","、"],"title":"CPU调频策略","title_tokens":["策略","调频","cpu"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2","text":"接下来，还有一个很重要的配置，那就是安装ROS2功能包，我们说TogetherROS是基于ROS2深度优化的，很多模块还是会复用ROS2中的功能，所有ROS2的原生功能也可以支持，这里我们就把ROS2必要的功能包都安装一下，让系统的功能模块更加完整。 熟悉ROS2的同学，应该对这些指令并不陌生，和ROS2官方手册中的安装步骤一致，不过还是建议大家跟着课程的步骤一起来安装一下。","text_tokens":["togetherros","接下","功能","建议","下来","一下","步骤","应该","还是","并","那","还有","大家","就","的","模块","支持","重要","指令","包都","深度","对","完整","不","不过","ros2","很多","课程","和","一","所有","优化","陌生","官方","配置","一个","也","中","跟着","起来","同学"," ","把","很","让","说","复用","接下来","手册","会","熟悉","一致","我们","就是","是","更加","基于","，","功能模块","系统","必要","包","。","可以","原生","安装","这些","这里"],"title":"安装ROS2功能包","title_tokens":["包","ros2","功能","安装"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2_1","text":"第一步我们需要更新系统软件源，并安装必要的下载工具。 $ sudo apt update && sudo apt install curl gnupg lsb-release #更新软件源 $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg #设置ROS2软件源秘钥 $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null #设置ROS2软件源 Attention 大部分国内开发者在这都会遇到同一个问题：网址无法连接。解决方案可以参考古月居官网上的这篇帖子： 《解决”Failed to connect to raw.githubusercontent.com“报错》","text_tokens":["install","#","”","一步","=","dev","rosdistro","下载工具","o","(","解决方案","开发","failed","开发者",")","key","解决","ros2","deb","源","raw","秘钥","arch","在","https","sources","更新","必要","参考","都","第一步","githubusercontent","大部分","第一","org","《","lsb","[","architecture","部分","古月",":","attention","sudo","]","工具","echo","update","，","gnupg","问题","无法","$","国内","connect","：","同一","\"","codename","d","的","signed","list","“","|","网上","大部","packages","share",".","gpg","一个"," ","by","etc","居官","com","下载","我们","系统软件","。","os","可以","安装","http","ubuntu","keyrings","keyring","master","/","这","&&","archive","并","dpkg","帖子","main","遇到","to","null","curl","usr","source","_","tee","print","连接","报错","-","需要","》","apt","设置","release","会","方案","同一个","--","网址",">","软件","系统","这篇","ros","ssl"],"title":"添加ROS2源","title_tokens":["源","ros2","添加"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2_2","text":"$ sudo apt update #更新软件源 $ sudo apt install ros-foxy-ros-base ros-foxy-demo-nodes-cpp # 安装ROS2功能包 时间会有些长，需要稍微等待一下。 现在ROS2就安装完成了。 大家可以使用同样的命令，继续安装ROS2中的更多功能包。 这里推荐大家先安装ROS2之后会使用到的编译器，比如python3-colcon-common-extensions。我们后续一些TogetherROS功能包的编译，也会使用python3-colcon-common的命令来安装。 $ sudo apt install python3-colcon-common-extensions # ROS2编译器 另外，我们推荐大家安装一个git工具，大家可以通过它下载GitHub、GitLab上的软件包，我们后续也会用到。安装命令为本小节代码第四行。 $ sudo apt install git # 安装git工具 到这里，我们常用的软件和功能包就安装完成了。我们可以看到，在旭日X3派文件目录/opt底下，除了之前的/tros文件夹外，还多出来一个/ros文件夹，里面就是我们刚才安装好的ros-foxy版本的所有系统文件。 如果大家要使用ROS2的功能包，也需要source里面的.bash或者.bat脚本文件。","text_tokens":["install","#","功能","来","一下","大家","小节","目录","一些","之前","出来","cpp","ros2","源","有些","nodes","之后","在","看到","件夹","要","bat","demo","更新","好","完成","第四","还","更","extensions","系统文件","比如","后续","文件","文件夹","opt","为本","foxy","sudo","colcon","工具","除了","另外","git","先","使用","update","，","多功能","现在","用到","$","四行","版本","外","bash","或者","派","长","就","上","的","如果","gitlab","稍微","底下","到","所有","一个","里面","也","中","等待","继续","."," ","时间","命令","我们","下载","常用","同样","。","包","多","了","可以","通过","安装","脚本","python3","togetherros","编译器","它","/","第四行","代码","软件包","base","编译","和","source","tros","common","github","文件目录","刚才","-","需要","apt","会","推荐","就是","软件","系统","旭日","x3","ros","这里","、"],"title":"安装ROS2包","title_tokens":["包","ros2","安装"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_3","text":"为了方便我们在TogetherROS系统李调用ROS2的功能，在TogetherROS里提供了一个叫create_soft_link创建软链接的脚本，它而已通过软链接，把ROS2的环境变量链接到当前TogetherROS的环境包里来。执行以下命令： $ cd /opt/tros ## 使用/opt/tros目录下的create_soft_link.py创建ROS package至TogetherROS的软链接 $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros 这样设置以后，假如你source了TogetherROS的环境变量，那么同样的配置也会对ROS2生效。 好啦，到这里为止，所有必要的配置项我们都做完了，是不是有点迫不及待想要使用TogetherROS了呢？","text_tokens":["那么","功能","提供","环境","来","调用","链接","为止","不及","目录","下","soft","方便","对","ros2","而已","生效","create","啦","package","在","李","你","有点","好","必要","做","至","都","执行","项","##","opt","创建","叫","foxy","是不是","使用","，","假如","$","完","：","以后","cd","的","到","呢","所有","配置","一个",".","也","？","link"," ","这样","迫不及待","我们","命令","同样","以下","。","了","通过","脚本","togetherros","python3","它","/","想要","里","软","环境变","环境变量","source","_","当前","tros","包里","把","设置","不是","会","--","py","系统","变量","为了","ros","这里"],"title":"建立软链接","title_tokens":["软","链接","建立"]},{"location":"TogetherROS/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/","text":"TogetherROS示例运行 接下来，我们就在安装配置好TogetherROS的旭日X3派上，试一试系统自带的一些例程，确保整个系统已经可以正常运行。 通信测试 先来测试一下TogetherROS系统的通信功能。 我们需要启动两个终端，分别连接到旭日X3派上，并分别按以下命令配置环境变量。 终端1： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function 终端2： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 接下来，我们用ros2 run命令运行节点： 运行第一个例程： ros2 run example_rclcpp_minimal_publisher publisher_member_function 这是一个用C++写的最小化的发布者程序，其中节点叫publisher_member+function，按回车运行该节点。 可以看到这个节点开始不断循环发布信息，每次发布的信息为字符串形式，内容是“Hello,world! +数字”。 同样，在终端2的命令行窗口，输入以下命令并回车开启订阅者节点。 ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 这个订阅者节点会获取到、并显示出刚才发布者节点发布的信息。 通过这样一个例程，我们验证了两个节点之间的通信没有问题。这这是一个基于DDS的话题通信。 按CTRL+C可以关闭该例程。 通信系统没有问题了，如果你是一个ROS2的开发者，可能对刚才我们使用的ROS2命令比较熟悉，这时你可能也会产生一个问题：我们之前也安装了ROS2系统，那ROS2的原生功能还可以正常运行么？ 我们再来试一试ROS2中自带的一个例程。 和刚才一样打开两个终端，这里我们需要source一下ROS里的环境变量。该环境变量我们刚才已经设置了过软连接，所以配置过程中它也会配置ROS2的功能包路径。 在终端1输入命令： $ source /opt/tros/local_setup.bash 在终端2，也输入同样的命令，配置环境变量的脚本： 接下来运行两个ROS2的节点。 这两个节点的功能包是属于ROS2里的功能包,可以直接调用到。我们来尝试一下输入命令ros2 run，再输入功能包名称，如果按Tab自动补全文件名，说明可以找到对应的这个功能包： ros2 run demo_nodes_cpp talker talker也是一个发布者节点。按回车运行，可以看到终端1的发布者节点以每秒1次的频率发布消息。 同样，我们到终端2中打开订阅者节点： ros2 run demo_nodes_cpp listener 回车运行，很快两个终端间就建立了通讯。 这样就使用ROS2里的例程实现了话题通信连接，只不过这里我们使用的就是ROS2原生的功能包了，而不是TogetherROS的功能。 通信系统已经没问题了，但看上去似乎还不太直观。 目标检测 没问题，接下来，我们就运行一个更为直观的案例——目标检测。 在这个案例中，需要大家找一个USB的相机，连接到旭日X3拍的USB接口上。 在运行这个例程之前，需要确认两点：1.有一个USB相机已经连接到了旭日X3派板子上；2.有一个HDMI的显示器也连接到了旭日X3派板子上，它主要用于显示后续的图像检测的效果。 要确认USB相机已经正确连接到开发板，可以在终端输入命令“ls - dv\"查看当前设备号，默认把USB相机识别为vedio8，如果当前列表里能找到vedio8就说明相机被成功识别到了。 输入以下命令运行例程： $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 代码第一行，02例程的功能是通过相机动态采集图像，并对图像里的目标物体进行实时识别。 代码第二行，我们用python3来运行例程usb_camera_fcos.py，它的目标识别的功能是通过我们板卡中CPU的AI引擎来实现的。 我们输入以上两行代码，就开始驱动相机、并对相机里的图像做动态识别了。 此时如果有连接HDMI的显示器，就可以在显示器里看到动态识别的效果。 我们可以调整USB相机镜头的范围，去拍一些杯子、电脑、显示器等等，都可以把对应的目标物体识别到，并把对应的物体用彩色框给框出来；在框的左上角，就是识别到物体的名称、以及它识别的概率值了。 几个示例程序都可以正常运行了，说明当前的软硬件系统都已经准备就绪，到这里，我们才算是可以正式开始机器人开发了。","text_tokens":["内容","”","环境","过","调用","没","c","之前","只不过","开发者","软硬件","似乎","在","1","但","准备就绪","demo","每次","一行","做","号","间","开启","world","后续","文件","hdmi","opt","显示","不过","usb","话题","路径","左上角","，","每秒","打开","问题","bash","\"","几个","sample","建立","到",".","？","上角","出","通信","2","!","目标","回车","动态","发布","我们","杯子","有","function","框","。","按","通过","安装","app","togetherros","setup","接下","循环","获取","确保","发布者","并","自带","ai","环境变","环境变量","和","tros","dv","这时","电脑","-","rclcpp","就是","而","范围","没有","以","旭日","publisher","左上","概率","这是","ls","列表","对","第一行","cpp","准备","者","验证","talker","第一个","要","example","等等","minimal","都","正确","ctrl","测试","物体","叫","再","熟悉","命令行","接口","使用","信息","基于","看上去","可能","以及","$","此时","cd","正式","成功","默认","的","inference","“","如果","算是","订阅","机器人","也"," ","驱动","通讯","直观","同样","以下","了","其中","脚本","产生","它","这","窗口","关闭",",","上去","数字","字符串","实时","软","一样","对应","板卡","设置","会","最小","py","listener","找","x3","彩色","被","这里","、","local","来","一下","那","一些","能","例程","消息","尝试","不","两点","ros2","hello","开始","nodes","分别","机器","；","框给","程序","是","你","之间","好","案例","引擎","—","硬件","下来","已经","终端","输入","找到","两行","用","c++","镜头","属于","查看","检测","接下来","用于","相机","camera","原生","进行","：","示例","值","正常","dds","cpu","包","可以","自动","所以","/","+","里","包了","代码","第二行","更为","_","二行","连接","vedio8","需要","设备","文件名","系统","变量","ros","运行","实现","识别","功能","框出","大家","不断","开发","出来","太","最小化","软硬","很快","启动","subscriber","看到","写","该","才","还","包是","显示器","次","试一试","02","第一","两个","开发板","采集","这个","说明","member","补全","先","tab","就绪","拍","字符","直接","fcos","过程","名称","派","就","上","examples","整个","配置","主要","一个","中","这样","看上","第二","节点","命令","么","以上","频率","python3","确认","形式","图像","板子","为","source","当前","调整","刚才","框出来","把","不是","run","比较","去","效果"],"title":"示例运行","title_tokens":["运行","示例"]},{"location":"TogetherROS/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#togetherros","text":"接下来，我们就在安装配置好TogetherROS的旭日X3派上，试一试系统自带的一些例程，确保整个系统已经可以正常运行。","text_tokens":["togetherros","接下","下来","已经","确保","派","试一试","就","一些","自带","上","的","例程","整个","配置","在","接下来","正常","我们","，","好","系统","旭日","x3","。","可以","安装","运行"],"title":"TogetherROS示例运行","title_tokens":["togetherros","运行","示例"]},{"location":"TogetherROS/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#_1","text":"先来测试一下TogetherROS系统的通信功能。 我们需要启动两个终端，分别连接到旭日X3派上，并分别按以下命令配置环境变量。 终端1： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function 终端2： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 接下来，我们用ros2 run命令运行节点： 运行第一个例程： ros2 run example_rclcpp_minimal_publisher publisher_member_function 这是一个用C++写的最小化的发布者程序，其中节点叫publisher_member+function，按回车运行该节点。 可以看到这个节点开始不断循环发布信息，每次发布的信息为字符串形式，内容是“Hello,world! +数字”。 同样，在终端2的命令行窗口，输入以下命令并回车开启订阅者节点。 ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 这个订阅者节点会获取到、并显示出刚才发布者节点发布的信息。 通过这样一个例程，我们验证了两个节点之间的通信没有问题。这这是一个基于DDS的话题通信。 按CTRL+C可以关闭该例程。 通信系统没有问题了，如果你是一个ROS2的开发者，可能对刚才我们使用的ROS2命令比较熟悉，这时你可能也会产生一个问题：我们之前也安装了ROS2系统，那ROS2的原生功能还可以正常运行么？ 我们再来试一试ROS2中自带的一个例程。 和刚才一样打开两个终端，这里我们需要source一下ROS里的环境变量。该环境变量我们刚才已经设置了过软连接，所以配置过程中它也会配置ROS2的功能包路径。 在终端1输入命令： $ source /opt/tros/local_setup.bash 在终端2，也输入同样的命令，配置环境变量的脚本： 接下来运行两个ROS2的节点。 这两个节点的功能包是属于ROS2里的功能包,可以直接调用到。我们来尝试一下输入命令ros2 run，再输入功能包名称，如果按Tab自动补全文件名，说明可以找到对应的这个功能包： ros2 run demo_nodes_cpp talker talker也是一个发布者节点。按回车运行，可以看到终端1的发布者节点以每秒1次的频率发布消息。 同样，我们到终端2中打开订阅者节点： ros2 run demo_nodes_cpp listener 回车运行，很快两个终端间就建立了通讯。 这样就使用ROS2里的例程实现了话题通信连接，只不过这里我们使用的就是ROS2原生的功能包了，而不是TogetherROS的功能。 通信系统已经没问题了，但看上去似乎还不太直观。","text_tokens":["实现","功能","内容","”","local","环境","来","一下","过","调用","这是","没","c","那","不断","之前","例程","开发","只不过","开发者","消息","尝试","对","不","cpp","ros2","hello","似乎","太","最小化","开始","者","nodes","分别","很快","启动","验证","subscriber","在","talker","1","但","第一个","看到","example","写","demo","程序","是","每次","你","该","minimal","之间","还","下来","间","开启","ctrl","已经","包是","终端","次","试一试","world","第一","输入","找到","用","测试","c++","文件","opt","两个","显示","不过","叫","属于","这个","说明","话题","再","member","路径","接下来","补全","熟悉","命令行","先","使用","信息","基于","，","tab","每秒","打开","字符","看上去","原生","问题","可能","直接","$","过程","：","bash","名称","派","就","上","的","“","如果","订阅","examples","建立","到","配置",".","一个","也","？","出","中","这样"," ","看上","通信","2","!","回车","正常","节点","我们","命令","发布","dds","通讯","直观","同样","以下","function","么","。","包","按","了","可以","通过","安装","自动","其中","togetherros","所以","setup","脚本","接下","频率","循环","获取","产生","/","这","发布者","形式","窗口","它","并","关闭","+",",","里","上去","包了","自带","数字","字符串","软","环境变","环境变量","为","和","source","tros","_","一样","对应","刚才","这时","连接","需要","rclcpp","设置","不是","会","就是","run","文件名","最小","而","listener","比较","没有","系统","变量","旭日","x3","以","publisher","ros","这里","、","运行"],"title":"通信测试","title_tokens":["通信","测试"]},{"location":"TogetherROS/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#_2","text":"没问题，接下来，我们就运行一个更为直观的案例——目标检测。 在这个案例中，需要大家找一个USB的相机，连接到旭日X3拍的USB接口上。 在运行这个例程之前，需要确认两点：1.有一个USB相机已经连接到了旭日X3派板子上；2.有一个HDMI的显示器也连接到了旭日X3派板子上，它主要用于显示后续的图像检测的效果。 要确认USB相机已经正确连接到开发板，可以在终端输入命令“ls - dv\"查看当前设备号，默认把USB相机识别为vedio8，如果当前列表里能找到vedio8就说明相机被成功识别到了。 输入以下命令运行例程： $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 代码第一行，02例程的功能是通过相机动态采集图像，并对图像里的目标物体进行实时识别。 代码第二行，我们用python3来运行例程usb_camera_fcos.py，它的目标识别的功能是通过我们板卡中CPU的AI引擎来实现的。 我们输入以上两行代码，就开始驱动相机、并对相机里的图像做动态识别了。 此时如果有连接HDMI的显示器，就可以在显示器里看到动态识别的效果。 我们可以调整USB相机镜头的范围，去拍一些杯子、电脑、显示器等等，都可以把对应的目标物体识别到，并把对应的物体用彩色框给框出来；在框的左上角，就是识别到物体的名称、以及它识别的概率值了。 几个示例程序都可以正常运行了，说明当前的软硬件系统都已经准备就绪，到这里，我们才算是可以正式开始机器人开发了。","text_tokens":["实现","识别","功能","概率","来","框出","没","ls","大家","一些","之前","能","列表","例程","开发","出来","两点","对","第一行","软硬件","准备","开始","软硬","机器","；","在","1","要","看到","准备就绪","等等","框给","是","程序","案例","一行","引擎","做","才","—","都","号","正确","硬件","下来","已经","终端","显示器","02","输入","第一","找到","两行","后续","用","hdmi","镜头","显示","物体","开发板","采集","这个","查看","usb","说明","检测","接下来","接口","左上角","用于","，","相机","camera","就绪","拍","问题","fcos","以及","$","此时","进行","：","示例","cd","\"","名称","正式","派","就","值","成功","上","默认","的","inference","几个","“","如果","sample","算是","到","机器人","主要","一个",".","也","中","上角"," ","驱动","2","目标","第二","动态","正常","我们","命令","cpu","杯子","有","直观","以下","框","。","了","以上","可以","通过","app","python3","接下","确认","它","/","并","里","图像","代码","ai","第二行","板子","实时","为","更为","_","当前","二行","调整","对应","板卡","dv","连接","电脑","-","框出来","把","vedio8","需要","设备","就是","py","范围","找","去","系统","效果","旭日","x3","彩色","被","这里","、","运行","左上"],"title":"目标检测","title_tokens":["目标","检测"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/","text":"多节点话题通信 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 编程方法 了解了话题的基本原理，接下来我们就要开始编写代码啦。 创建工作空间 请大家先按照这个流程创建工作空间、下载课程的例程代码，并进行编译。 $ mkdir –p dev_ws/src $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build 运行示例程序 编译成功后，我们尝试运行话题通信的Hello World例程，在这个例程中，我们会先创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_topic_cpp talker $ ros2 run learning_topic_cpp listener 这就是TogetherROS系统中话题通信的方法，依然沿用了ROS2中话题通信的完整流程。 代码解析 发布者的实现方法publisher_member_function.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using namespace std :: chrono_literals ; /* This example creates a subclass of Node and uses std::bind() to register a * member function as a callback from the timer. */ class MinimalPublisher : public rclcpp :: Node { public : MinimalPublisher () : Node ( \"minimal_publisher\" ), count_ ( 0 ) { publisher_ = this -> create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & MinimalPublisher :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, world! \" + std :: to_string ( count_ ++ ); RCLCPP_INFO ( this -> get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者的实现方法subscriber_member_function.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using std :: placeholders :: _1 ; class MinimalSubscriber : public rclcpp :: Node { public : MinimalSubscriber () : Node ( \"minimal_subscriber\" ) { subscription_ = this -> create_subscription < std_msgs :: msg :: String > ( \"topic\" , 10 , std :: bind ( & MinimalSubscriber :: topic_callback , this , _1 )); } private : void topic_callback ( const std_msgs :: msg :: String :: SharedPtr msg ) const { RCLCPP_INFO ( this -> get_logger (), \"I heard: '%s'\" , msg -> data . c_str ()); } rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["”","什么","可视","c","还是","还有","(","of","publish","流程","拼接",")","他会","gitee","似乎","是从","create","wall","在","literals","creates","1","但","memory","自行","data","听说","include","从而","%","文章","结构","做","号","subclass","info","间","world","传递数据","文件","opt","重要","传输","自然","显示","渲染","基本","chrono",":","话题","是不是","]","随处可见","10","git","报纸","，","在生活中","运动","报社","比方","区分","void","人","placeholders","仔细","积木","东西","看","bash","\"","一份","本原","到","较强","？",".","通信","2","using","!","某种","发布","我们","语言","有","根本","function","。",";","通过","t","得到","togetherros","setup","接下","获取","发布者","千丝万缕","uses","并","编程语言","src","++","像","logger","编译","p","完整","课程","和","数据传输","tros","message","词","rgb","来看","后缀","-","之为","rclcpp","所谓","as","就是",">","没有","以","publisher","想下","install","解析","#","不然","dev","argv","通信模型","传感","对","cpp","很多","const","的话","者","请","class","–","talker","sharedptr","要","等等","听","example","了解","谁","minimal","既然","callback","都","必然","string","tutorials","创建","时候","[","叫","叫做","node","原理","再","存在","colcon","某","类似","接口","使用","信息","基于","可见","无法","可能","优先级","第一次","$","统一","此时","中文","i","*","cd","成功","的","return","“","如果","订阅","get","呢","auto","机器人","方法","learning","包含","也","块"," ","驱动","500","与","str","了","感器","其中","clone","建议","阅读","最","它","这","minimalpublisher","3","描述","平时","{",",","字符串","数据","实时","指令","传递","mkdir","一样","成为","对应","namespace","不知","b","s","模型","桥梁","后","会","修改","listener","传感器","被","挺","这里","、","万缕","固定","local","一下","对象","=","publishing","那","一些","'","例程","不","消息","尝试","小编","ros2","hello","开始","机器","收到","每个","啦","count","名字","最后","长宽","让","https","&","init","是","你","程序","之间","the","好","从","size","会先","硬件","下来","应该","functional","数量","称之为","用","方向","数据结构","魔性","得","沿用","数据类型","关系","古月","联系","空间","查看","作为","方式","并不知道","topic","接下来","timerbase","每","就要","int","另外","发送","用户","用于","英文","相机","发出","画面","合适","msgs","进行","：","示例","控制指令","值","一种","指","各种","微信","为例","说","argc","兴趣","下载","dds","监控","subscription","无关","多","将","可以","按照","/","千丝","异步","+","a","里","代码","像素","main","to","出去","类型","理解","公众","_","0","逻辑","感兴","public","生活","msg","需要","接收","基本原理","userdata","设备","没错","系统","bind","ros","运行","实现","功能","}","from","特性","大家","打","不能","太","感兴趣","之后","subscriber","成","register","多个","该","private","hpp","给","优先","更","标准","要求","逻辑性","char","组织","第一","才能","chatter","本身","heard","比如","timer","两个","minimalsubscriber","想象","复杂","这个","随处","适合","参数","member","先","一次","据传","摇杆","字符","发送数据","杂志","shared","ms","名称","拍摄","就","控制","上","个","<","周期","工作","this","可视化","知识","因为","shutdown","想","一个","中","这样","定义","接收数据","注意","com","某些","节点","格式","编写","build","编程","知道","std","独立","and","角度","依然","唯一","接口定义","图像","guyuehome","各种各样","居","一篇","source","ws","只要","同学","把","概念","不是","组成","spin","视频","run","排版","make","联系方式","各样","这些"],"title":"多节点话题通信","title_tokens":["多","通信","节点","话题"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["实现","万缕","功能","最","间","它","千丝万缕","千丝","并","一种","传递数据","的","数据","重要","传递","各种各样","各种","机器人","联系","机器","方式"," ","话题","但","桥梁","不是","会","节点","就是","有","是","之间","，","。","了","联系方式","各样","这些","独立","其中"],"title":"多节点话题通信","title_tokens":["多","通信","节点","话题"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["实现","功能","一下","可视","大家","机器","在","要","是","之间","从","做","给","必然","硬件","才能","称之为","两个","传输","方向","显示","渲染","关系","这个","查看","作为","方式","是不是","话题","存在","某","信息","用户","相机","，","据传","此时","拍摄","就","上","的","到","可视化","机器人","想","？","一个","中","这样","为例"," ","驱动","某种","节点","我们","有","监控","。","将","了","可以","得到","获取","它","这","a","图像","数据","实时","传递","数据传输","之为","b","桥梁","不是","设备","视频","没错","以","ros"],"title":"通信模型","title_tokens":["通信模型","通信","模型"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["实现","固定","”","什么","特性","对象","大家","打","对","小编","他会","的话","是从","者","感兴趣","之后","机器","收到","名字","等等","是","成","文章","好","从","都","号","要求","应该","组织","本身","称之为","比如","传输","自然","数据类型","叫","叫做","古月","这个","随处","话题","每","类似","随处可见","另外","发送","使用","报纸","基于","，","在生活中","据传","可见","发送数据","比方","无法","杂志","看","名称","就","的","“","如果","订阅","到","呢","机器人","知识","？","一个","也","微信","这样"," ","接收数据","兴趣","发布","节点","dds","有","格式","。","了","可以","角度","/","它","发布者","平时","数据","出去","和","类型","居","数据传输","公众","成为","来看","感兴","把","生活","之为","需要","模型","接收","会","就是","排版","没有","、"],"title":"发布/订阅模型","title_tokens":["模型","/","订阅","发布"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["想下","一下","不然","还是","大家","通信模型","不","对","很多","似乎","者","机器","每个","1","要","听","是","多个","该","谁","优先","号","数量","称之为","魔性","想象","这个","再","是不是","话题","存在","发送","报纸","，","摇杆","画面","区分","人","可能","优先级","仔细","杂志","东西","控制指令","控制","的","个","如果","订阅","机器人","因为","一个","也"," ","通信","2","注意","发布","我们","节点","有","知道","。","多","了","可以","建议","发布者","唯一","3","并","里","指令","和","公众","一样","之为","模型","不是","没错","被","挺","这些","ros","、"],"title":"多对多通信","title_tokens":["多","对","通信"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["什么","特性","那","还有","一些","传感","不","太","者","收到","让","听说","等等","是","你","文章","更","号","逻辑性","第一","比如","用","传输","时候","叫做","古月","这个","适合","参数","并不知道","话题","类似","某","报纸","一次","用于","，","运动","发出","报社","合适","可能","第一次","一份","就","控制","的","如果","订阅","周期","指","较强","一个","？","也"," ","通信","某些","发布","有","根本","知道","。","了","可以","感器","阅读","这","发布者","异步","数据","指令","居","一篇","公众","逻辑","词","只要","同学","不知","所谓","后","就是","修改","传感器"],"title":"异步通信","title_tokens":["异步","通信"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["拼接","消息","不能","者","机器","每个","在","最后","长宽","自行","等等","是","成","结构","既然","都","标准","称之为","比如","文件","传输","数据结构","得","复杂","方式","话题","接口","，","英文","据传","积木","统一","中文","进行","就","值","一种","的","订阅","各种","机器人","一个","包含","也","中",".","块","这样"," ","定义","通信","说","发布","语言","我们","节点","格式","有","无关","与","编程","。","了","可以","通过","发布者","描述","编程语言","接口定义","图像","像","像素","数据","和","各种各样","理解","数据传输","对应","一样","rgb","后缀","之为","msg","概念","组成","会","系统","各样","ros","这里","、"],"title":"消息接口","title_tokens":["接口","消息"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_7","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。","text_tokens":["接下","下来","代码","的","本原","开始","基本","啦","原理","话题","基本原理","接下来","就要","我们","了解","，","编写","。","了"],"title":"编程方法","title_tokens":["编程","方法"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_8","text":"请大家先按照这个流程创建工作空间、下载课程的例程代码，并进行编译。 $ mkdir –p dev_ws/src $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build","text_tokens":["$","clone","togetherros","进行","按照","dev","/","cd","并","大家","src","代码","tutorials","的","例程","流程","guyuehome","编译","p","gitee","工作","课程","mkdir","创建","_","请","–","ws","空间",":","这个","."," ","https","userdata","com","colcon","下载","git","先","，","build","。","、"],"title":"创建工作空间","title_tokens":["工作","空间","创建"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_9","text":"编译成功后，我们尝试运行话题通信的Hello World例程，在这个例程中，我们会先创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_topic_cpp talker $ ros2 run learning_topic_cpp listener 这就是TogetherROS系统中话题通信的方法，依然沿用了ROS2中话题通信的完整流程。","text_tokens":["$","标准","setup","install","togetherros","”","会先","local","依然","/","这","发布者","bash","world","chatter","成功","string","的","例程","字符串","流程","“","opt","订阅","编译","尝试","消息","周期","到","cpp","ros2","hello","创建","完整","类型","沿用","source","tros","_","者","方法","一个",".","这个","中","learning"," ","在","talker","话题","定义","再","通信","topic","接收","后","发布","我们","就是","run","发送","是","listener","从而","，","系统","。","了","字符","ros","运行"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_10","text":"发布者的实现方法publisher_member_function.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using namespace std :: chrono_literals ; /* This example creates a subclass of Node and uses std::bind() to register a * member function as a callback from the timer. */ class MinimalPublisher : public rclcpp :: Node { public : MinimalPublisher () : Node ( \"minimal_publisher\" ), count_ ( 0 ) { publisher_ = this -> create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & MinimalPublisher :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, world! \" + std :: to_string ( count_ ++ ); RCLCPP_INFO ( this -> get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者的实现方法subscriber_member_function.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using std :: placeholders :: _1 ; class MinimalSubscriber : public rclcpp :: Node { public : MinimalSubscriber () : Node ( \"minimal_subscriber\" ) { subscription_ = this -> create_subscription < std_msgs :: msg :: String > ( \"topic\" , 10 , std :: bind ( & MinimalSubscriber :: topic_callback , this , _1 )); } private : void topic_callback ( const std_msgs :: msg :: String :: SharedPtr msg ) const { RCLCPP_INFO ( this -> get_logger (), \"I heard: '%s'\" , msg -> data . c_str ()); } rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["实现","#","}","from","=","publishing","argv","c","(","of","'","publish",")","cpp","hello","const","者","class","create","wall","count","subscriber","literals","creates","memory","sharedptr","1","data","&","include","example","init","register","%","minimal","the","private","callback","hpp","size","subclass","info","functional","char","world","string","heard","timer","[","minimalsubscriber","chrono",":","node","member","topic","timerbase","]","10","int","void","placeholders","i","msgs","shared","：","*","ms","\"","的","return","<","订阅","get","auto","this","shutdown","方法","."," ","using","!","argc","发布","500","subscription","function","std","str",";","t","and","/","发布者","uses","minimalpublisher","{","a",",","+","++","logger","main","to","namespace","_","0","message","-","public","msg","s","rclcpp","as","spin",">","make","bind","publisher"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/","text":"多节点服务通信 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 编程方法 了解了服务通信的原理，接下来我们就要开始编写代码啦，我们尝试通过服务实现一个加法求解器的功能。 运行示例程序 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 我们一起操作下这个例程。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_service_cpp server $ ros2 run learning_service_cpp client 2 3 话题和服务是最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 代码解析 服务器端add_two_ints_server.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <memory> void add ( const std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Request> request, std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Response> response ) { response->sum = request->a + request->b ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Incoming request\\na: %ld\" \" b: %ld\" , request->a, request->b ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"sending back response: [%ld]\" , ( long int ) response->sum ) ; } int main ( int argc, char **argv ) { rclcpp::init ( argc, argv ) ; std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared ( \"add_two_ints_server\" ) ; rclcpp::Service<learning_service_cpp::srv::AddTwoInts>::SharedPtr service = node->create_service<learning_service_cpp::srv::AddTwoInts> ( \"add_two_ints\" , & add ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Ready to add two ints.\" ) ; rclcpp::spin ( node ) ; rclcpp::shutdown () ; } 客户端add_two_ints_client.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <chrono> #include <cstdlib> #include <memory> using namespace std :: chrono_literals ; int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); if ( argc != 3 ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"usage: add_two_ints_client X Y\" ); return 1 ; } std :: shared_ptr < rclcpp :: Node > node = rclcpp :: Node :: make_shared ( \"add_two_ints_client\" ); rclcpp :: Client < learning_service_cpp :: srv :: AddTwoInts >:: SharedPtr client = node -> create_client < learning_service_cpp :: srv :: AddTwoInts > ( \"add_two_ints\" ); auto request = std :: make_shared < learning_service_cpp :: srv :: AddTwoInts :: Request > (); request -> a = atoll ( argv [ 1 ]); request -> b = atoll ( argv [ 2 ]); while ( ! client -> wait_for_service ( 1 s )) { if ( ! rclcpp :: ok ()) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Interrupted while waiting for the service. Exiting.\" ); return 0 ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"service not available, waiting again...\" ); } auto result = client -> async_send_request ( request ); // Wait for the result. if ( rclcpp :: spin_until_future_complete ( node , result ) == rclcpp :: FutureReturnCode :: SUCCESS ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"Sum: %ld\" , result . get () -> sum ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Failed to call service add_two_ints\" ); } rclcpp :: shutdown (); return 0 ; }","text_tokens":["”","后者","还是","还有","(","下","之前","failed",")","有所不同","create","机制","同步","核心","在","literals","器","但","memory","1","一般","include","应答","等","%","一问一答","send","service","info","发给","反馈","上层","不好","传递数据","后续","文件","opt","futurereturncode","传输","是否","红色","chrono",":","苹果","答","这么","话题","]","，","运动","在生活中","浏览器","void","人","error","until","bash","\"","waiting","一对","到","位置","服务器","附近",".","继续","转圈圈","通信","目标","2","using","!","发布","我们","。",";","通过","得到","setup","接下","two","获取","发布者","并","坐标","两种","logger","课程","和","tros","来看","电脑","-","结果","之为","rclcpp","就是",">","sum","没有","future","求和","install","解析","#","提供","while","argv","通信模型","cstdlib","again","传感","对","cpp","const","...","者","操作","sharedptr","那有","网络","要","了解","都","针对","并不需要","物体","ptr","时候","[","我","叫做","node","原理","存在","类似","接口","interrupted","使用","信息","越快越好","无法","可能","域名","$","此时","跟随","add","*","加法","越好","尽快","的","return","“","订阅","get","auto","应用","客户端","视觉","机器人","atoll","方法","learning","也"," ","驱动","有所","同样","界面","了","感器","其中","\\","图像识别","3","ready",",","{","数据","指令","传递","一样","成为","namespace","很","网页","b","s","模型","exiting","后","not","会","返回","传感器","、","状态","一起","不同","local","网站","=","cs","例程","y","消息","不","尝试","ros2","开始","收到","机器","啦","最新","介绍","usage","&","页面","init","你","是","程序","之间","the","当","从","—","下来","简称","前者","服务器发送","查询","称之为","希望","long","相比","古月","response","server","available","接下来","每","就要","判断","int","另外","客户","发送","相机","ok","进行","：","示例","某个","单向","控制指令","for","准确","问","一种","完全","反应","访问","各种","argc","常用","浏览","宕机","多","将","可以","所以","按照","incoming","半天","/","高","异步","+","a","代码","main","to","然后","这种","出去","0","_","sending","圈圈","生活","需要","msg","接收","addtwoints","服务器端","封装","ros","运行","实现","back","识别","功能","}","大家","client","ints","向","success","result","周期性","越快","之后","async","看到","成","多个","hpp","更","给","标准","要求","char","服务","比如","x","两个","部分","这个","适合","call","经常","request","if","过程","常见","本","shared","但是","计算","或者","求解","就","控制","上","加数","<","变成","数据通信","周期","else","shutdown","一个","处理","中","这样","最为","定义","假设","某些","节点","命令","srv","编写","编程","知道","std","发","一直","频率","wait","时","展现","形式","转圈","唯一","想要","学习","同步性","图像","为","居","source","而是","complete","数据通","好像","na","务器","讲","spin","run","ld","效果","make","具体","这些","请求"],"title":"多节点服务通信","title_tokens":["多","通信","节点","服务"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["实现","本","单向","发布者","准确","异步","问","学习","一种","服务","的","数据","订阅","传输","消息","这种","是否","我","者","方法","收到","机制","同步","答"," ","话题","通信","讲","发布","节点","我们","另外","常用","类似","使用","你","多个","之间","，","知道","效果","将","。","可以","无法","ros","—","一起"],"title":"多节点服务通信","title_tokens":["多","通信","节点","服务"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["实现","识别","不同","通信模型","之前","对","有所不同","机器","机制","在","最新","是","你","应答","更","service","发给","反馈","上层","查询","服务","比如","希望","传输","并不需要","物体","时候","红色","我","这个","这么","答","话题","另外","发送","使用","信息","，","相机","运动","此时","跟随","单向","或者","问","尽快","的","订阅","变成","到","周期","位置","应用","机器人","附近","一个","中","继续","这样"," ","驱动","通信","目标","发布","节点","我们","有所","。","发","了","可以","通过","得到","一直","频率","其中","图像识别","按照","形式","高","并","图像","数据","然后","课程","这种","和","一样","成为","而是","好像","需要","模型","请求","ros"],"title":"通信模型","title_tokens":["通信模型","通信","模型"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["实现","此时","常见","进行","网站","反馈","简称","/","某个","形式","或者","服务器发送","展现","问","并","cs","就","上","服务","针对","的","比如","数据","向","为","这种","时候","客户端","服务器","各种","我","叫做","之后","收到","操作","机制","处理","也","来看","答"," ","在","电脑","生活","很","需要","通信","务器","模型","网页","某些","会","我们","就是","服务器端","客户","发送","页面","你","信息","应答","浏览","，","在生活中","浏览器","。","返回","具体","经常","从","通过","请求","域名"],"title":"客户端/服务器模型","title_tokens":["客户","/","务器","模型","客户端","服务器","服务"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["所以","过程","要求","半天","越好","转圈","或者","服务","不好","称之为","的","到","反应","客户端","服务器","越快","相比","圈圈","这个","中","也","同步","在","话题","之为","转圈圈","通信","务器","假设","那有","接收","网络","一般","判断","服务器端","客户","我们","你","是","信息","浏览","应答","，","宕机","没有","浏览器","。","越快越好","了","可以","通过","可能","状态","一直"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["所以","网站","但是","唯一","并","大家","通信模型","服务","完全","比如","的","不","访问","居","客户端","一样","服务器","古月","一个","这个","中","通信","务器","模型","但","存在","每","看到","服务器端","客户","是","多个","，","同样","界面","没有","。","可以","人","都"],"title":"一对多通信","title_tokens":["多","一对","通信"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["标准","反馈","还是","坐标","大家","还有","服务","传递数据","的","比如","数据","文件","后续","变成","两个","传递","消息","位置","和","一样","部分","方法","一个",".","核心","苹果","中","也"," ","在","话题","定义","msg","通信","介绍","要","会","类似","命令","srv","我们","使用","是","，","。","了","这些","请求","ros","给"],"title":"服务接口","title_tokens":["接口","服务"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_7","text":"了解了服务通信的原理，接下来我们就要开始编写代码啦，我们尝试通过服务实现一个加法求解器的功能。","text_tokens":["实现","接下","功能","下来","加法","求解","代码","服务","的","尝试","开始","一个","啦","原理","通信","器","接下来","就要","我们","了解","，","编写","。","了","通过"],"title":"编程方法","title_tokens":["编程","方法"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_8","text":"当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 我们一起操作下这个例程。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_service_cpp server $ ros2 run learning_service_cpp client 2 3 话题和服务是最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。","text_tokens":["install","识别","”","提供","local","后者","client","下","ints","例程","传感","cpp","ros2","开始","周期性","之后","收到","操作","机器","啦","同步","成","是","应答","等","当","一问一答","给","更","service","反馈","要求","前者","服务","针对","比如","opt","两个","传输","这个","适合","server","话题","、","客户","发送","，","$","add","进行","计算","加法","单向","控制指令","bash","就","控制","加数","的","“","数据通信","到","周期","位置","客户端","服务器","视觉","方法",".","learning"," ","最为","2","通信","目标","节点","我们","常用","。","将","可以","通过","感器","得到","setup","two","获取","时","/","想要","高","3","并","同步性","两种","数据","指令","出去","和","source","_","tros","数据通","结果","需要","务器","后","服务器端","run","封装","求和","传感器","请求","一起"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_9","text":"服务器端add_two_ints_server.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <memory> void add ( const std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Request> request, std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Response> response ) { response->sum = request->a + request->b ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Incoming request\\na: %ld\" \" b: %ld\" , request->a, request->b ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"sending back response: [%ld]\" , ( long int ) response->sum ) ; } int main ( int argc, char **argv ) { rclcpp::init ( argc, argv ) ; std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared ( \"add_two_ints_server\" ) ; rclcpp::Service<learning_service_cpp::srv::AddTwoInts>::SharedPtr service = node->create_service<learning_service_cpp::srv::AddTwoInts> ( \"add_two_ints\" , & add ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Ready to add two ints.\" ) ; rclcpp::spin ( node ) ; rclcpp::shutdown () ; } 客户端add_two_ints_client.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <chrono> #include <cstdlib> #include <memory> using namespace std :: chrono_literals ; int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); if ( argc != 3 ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"usage: add_two_ints_client X Y\" ); return 1 ; } std :: shared_ptr < rclcpp :: Node > node = rclcpp :: Node :: make_shared ( \"add_two_ints_client\" ); rclcpp :: Client < learning_service_cpp :: srv :: AddTwoInts >:: SharedPtr client = node -> create_client < learning_service_cpp :: srv :: AddTwoInts > ( \"add_two_ints\" ); auto request = std :: make_shared < learning_service_cpp :: srv :: AddTwoInts :: Request > (); request -> a = atoll ( argv [ 1 ]); request -> b = atoll ( argv [ 2 ]); while ( ! client -> wait_for_service ( 1 s )) { if ( ! rclcpp :: ok ()) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Interrupted while waiting for the service. Exiting.\" ); return 0 ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"service not available, waiting again...\" ); } auto result = client -> async_send_request ( request ); // Wait for the result. if ( rclcpp :: spin_until_future_complete ( node , result ) == rclcpp :: FutureReturnCode :: SUCCESS ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"Sum: %ld\" , result . get () -> sum ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Failed to call service add_two_ints\" ); } rclcpp :: shutdown (); return 0 ; }","text_tokens":["back","#","}","=","while","argv","client","(","ints","cstdlib","again","failed","y",")","success","cpp","const","result","...","create","async","literals","usage","memory","sharedptr","1","&","include","init","%","the","hpp","send","service","info","char","服务","futurereturncode","x","long","ptr","[","chrono",":","response","server","node","available","]","int","客户","interrupted","call","ok","void","error","request","if","add","shared","：","*","until","\"","for","return","waiting","<","get","auto","客户端","服务器","else","shutdown","atoll",".","learning"," ","2","using","!","argc","srv","std",";","two","\\","incoming","wait","/","3","ready",",","{","a","+","logger","main","to","namespace","_","0","complete","sending","-","na","b","务器","rclcpp","s","exiting","not","spin","addtwoints","服务器端",">","sum","ld","future","make"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/","text":"多节点动作通信 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 编程方法 相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 运行示例程序 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_action_cpp server $ ros2 run learning_action_cpp client 代码解析 动作的服务器fibonacci_action_server.cpp： #include <inttypes.h> #include <memory> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO(jacobperron): Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionServer : public rclcpp :: Node { public : using Fibonacci = learning_action_cpp :: action :: Fibonacci ; using GoalHandleFibonacci = rclcpp_action :: ServerGoalHandle < Fibonacci > ; explicit MinimalActionServer ( const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : Node ( \"minimal_action_server\" , options ) { using namespace std :: placeholders ; this -> action_server_ = rclcpp_action :: create_server < Fibonacci > ( this -> get_node_base_interface (), this -> get_node_clock_interface (), this -> get_node_logging_interface (), this -> get_node_waitables_interface (), \"fibonacci\" , std :: bind ( & MinimalActionServer :: handle_goal , this , _1 , _2 ), std :: bind ( & MinimalActionServer :: handle_cancel , this , _1 ), std :: bind ( & MinimalActionServer :: handle_accepted , this , _1 )); } private : rclcpp_action :: Server < Fibonacci >:: SharedPtr action_server_ ; rclcpp_action :: GoalResponse handle_goal ( const rclcpp_action :: GoalUUID & uuid , std :: shared_ptr < const Fibonacci :: Goal > goal ) { RCLCPP_INFO ( this -> get_logger (), \"Received goal request with order %d\" , goal -> order ); ( void ) uuid ; // Let's reject sequences that are over 9000 if ( goal -> order > 9000 ) { return rclcpp_action :: GoalResponse :: REJECT ; } return rclcpp_action :: GoalResponse :: ACCEPT_AND_EXECUTE ; } rclcpp_action :: CancelResponse handle_cancel ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Received request to cancel goal\" ); ( void ) goal_handle ; return rclcpp_action :: CancelResponse :: ACCEPT ; } void execute ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Executing goal\" ); rclcpp :: Rate loop_rate ( 1 ); const auto goal = goal_handle -> get_goal (); auto feedback = std :: make_shared < Fibonacci :: Feedback > (); auto & sequence = feedback -> sequence ; sequence . push_back ( 0 ); sequence . push_back ( 1 ); auto result = std :: make_shared < Fibonacci :: Result > (); for ( int i = 1 ; ( i < goal -> order ) && rclcpp :: ok (); ++ i ) { // Check if there is a cancel request if ( goal_handle -> is_canceling ()) { result -> sequence = sequence ; goal_handle -> canceled ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Canceled\" ); return ; } // Update sequence sequence . push_back ( sequence [ i ] + sequence [ i - 1 ]); // Publish feedback goal_handle -> publish_feedback ( feedback ); RCLCPP_INFO ( this -> get_logger (), \"Publish Feedback\" ); loop_rate . sleep (); } // Check if goal is done if ( rclcpp :: ok ()) { result -> sequence = sequence ; goal_handle -> succeed ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Succeeded\" ); } } void handle_accepted ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { using namespace std :: placeholders ; // this needs to return quickly to avoid blocking the executor, so spin up a new thread std :: thread { std :: bind ( & MinimalActionServer :: execute , this , _1 ), goal_handle }. detach (); } }; // class MinimalActionServer int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); auto action_server = std :: make_shared < MinimalActionServer > (); rclcpp :: spin ( action_server ); rclcpp :: shutdown (); return 0 ; } 动作的客户端fibonacci_action_client.cpp： #include <inttypes.h> #include <memory> #include <string> #include <iostream> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO ( jacobperron ) : Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionClient : public rclcpp::Node { public: using Fibonacci = learning_action_cpp::action::Fibonacci ; using GoalHandleFibonacci = rclcpp_action::ClientGoalHandle<Fibonacci> ; explicit MinimalActionClient ( const rclcpp::NodeOptions & node_options = rclcpp::NodeOptions ()) : Node ( \"minimal_action_client\" , node_options ) , goal_done_ ( false ) { this->client_ptr_ = rclcpp_action::create_client<Fibonacci> ( this->get_node_base_interface () , this->get_node_graph_interface () , this->get_node_logging_interface () , this->get_node_waitables_interface () , \"fibonacci\" ) ; this->timer_ = this->create_wall_timer ( std::chrono::milliseconds ( 500 ) , std::bind ( & MinimalActionClient::send_goal, this )) ; } bool is_goal_done () const { return this->goal_done_ ; } void send_goal () { using namespace std::placeholders ; this->timer_->cancel () ; this->goal_done_ = false ; if ( !this->client_ptr_ ) { RCLCPP_ERROR ( this->get_logger () , \"Action client not initialized\" ) ; } if ( !this->client_ptr_->wait_for_action_server ( std::chrono::seconds ( 10 ))) { RCLCPP_ERROR ( this->get_logger () , \"Action server not available after waiting\" ) ; this->goal_done_ = true ; return ; } auto goal_msg = Fibonacci::Goal () ; goal_msg.order = 10 ; RCLCPP_INFO ( this->get_logger () , \"Sending goal\" ) ; auto send_goal_options = rclcpp_action::Client<Fibonacci>::SendGoalOptions () ; send_goal_options.goal_response_callback = std::bind ( & MinimalActionClient::goal_response_callback, this, _1 ) ; send_goal_options.feedback_callback = std::bind ( & MinimalActionClient::feedback_callback, this, _1, _2 ) ; send_goal_options.result_callback = std::bind ( & MinimalActionClient::result_callback, this, _1 ) ; auto goal_handle_future = this->client_ptr_->async_send_goal ( goal_msg, send_goal_options ) ; } private: rclcpp_action::Client<Fibonacci>::SharedPtr client_ptr_ ; rclcpp::TimerBase::SharedPtr timer_ ; bool goal_done_ ; void goal_response_callback ( std::shared_future<GoalHandleFibonacci::SharedPtr> future ) { auto goal_handle = future.get () ; if ( !goal_handle ) { RCLCPP_ERROR ( this->get_logger () , \"Goal was rejected by server\" ) ; } else { RCLCPP_INFO ( this->get_logger () , \"Goal accepted by server, waiting for result\" ) ; } } void feedback_callback ( GoalHandleFibonacci::SharedPtr, const std::shared_ptr<const Fibonacci::Feedback> feedback ) { RCLCPP_INFO ( this->get_logger () , \"Next number in sequence received: %\" PRId32, feedback->sequence.back ()) ; } void result_callback ( const GoalHandleFibonacci::WrappedResult & result ) { this->goal_done_ = true ; switch ( result.code ) { case rclcpp_action::ResultCode::SUCCEEDED: break ; case rclcpp_action::ResultCode::ABORTED: RCLCPP_ERROR ( this->get_logger () , \"Goal was aborted\" ) ; return ; case rclcpp_action::ResultCode::CANCELED: RCLCPP_ERROR ( this->get_logger () , \"Goal was canceled\" ) ; return ; default: RCLCPP_ERROR ( this->get_logger () , \"Unknown result code\" ) ; return ; } RCLCPP_INFO ( this->get_logger () , \"Result received\" ) ; for ( auto number : result.result->sequence ) { RCLCPP_INFO ( this->get_logger () , \"%\" PRId32, number ) ; } } } ; // class MinimalActionClient int main ( int argc, char ** argv ) { rclcpp::init ( argc, argv ) ; auto action_client = std::make_shared<MinimalActionClient> () ; while ( !action_client->is_goal_done ()) { rclcpp::spin_some ( action_client ) ; } rclcpp::shutdown () ; return 0 ; }","text_tokens":["举个","included","什么","过","调用","(","下","一段","之前","of","publish","流程",")","iostream","create","wall","机制","同步","loop","在","memory","1","include","等","%","it","send","some","info","反馈","seconds","结束","jacobperron","文件","opt","其实","wrappedresult","chrono",":","这么","话题","是不是","remove","]","accepted","10","update","，","运动","例子","void","placeholders","error","仔细","switch","看","bash","\"","waiting","一对","到","executing","服务器","？",".","姿态","通信","目标","using","2","!","发布","我们","有","根本","随时","。","let",";","was","setup","发布者","并","坐标","++","像","over","logger","graph","base","完整","多少","minimalactionclient","logging","和","tros","上边","prid32","应用层","-","rclcpp","as","就是","直到",">","once","没有","future","多少度","install","sequences","解析","#","360","送餐","while","就此结束","argv","accept","不仅","通信模型","is","简单","对","抓取","cpp","const","bool","者","class","度","minimalactionserver","fibonacci","sharedptr","minimal","既然","callback","done","都","一边","sequence","quickly","string","case","detach","options","ptr","转","应带","rate","[","node","再","aborted","场景","类似","接口","使用","信息","基于","cancelresponse","可能","到底","$","i","todo","*","某一","还会","的","一点","return","如果","其","succeeded","订阅","get","auto","应用","with","code","客户端","键盘","received","机器人","canceling","方法","explicit","learning","也"," ","机械","含义","动图","500","一点一点","分析","canceled","check","了","只有","每隔","这","goal","{",",","数据","指令","实时","一样","namespace","cancel","clock","同时","很","s","模型","导航","后","not","会","default","便于","被","状态","、","true","goalhandlefibonacci","local","达到","来","一下","=","那","'","例程","_-","不","ros2","有没有","clientgoalhandle","开始","30","干什么","机器","收到","名字","起来","介绍","让","that","h","&","init","是","程序","the","当","好","executor","合成","从","取消","—","秘密","number","interface","发现","旋转","goaluuid","所处","得","只能","相比","分拣","response","server","next","available","timerbase","int","另外","客户","发送","发出","ok","现在","合适","用到","圈","action","break","进行","：","示例","某个","for","一种","20","模块","servergoalhandle","时间","by","智能","argc","milliseconds","reject","三个","多","可以","管理","/","&&","又","+","a","代码","main","to","这种","一","更为","理解","仅仅","_","0","sending","1s","public","需要","msg","服务器端","false","没错","系统","bind","ros","new","goalresponse","运行","unknown","实现","back","识别","功能","}","blocking","大家","client","底层","result","遥控","之后","装","succeed","async","进度","段时间","不仅仅","多个","private","完成","进度条","当中","hpp","还","nodeoptions","push","执行","哪里","控","char","after","目的","才能","服务","比如","timer","两个","up","inttypes","waitables","复杂","feedback","隐藏","这个","rejected","表示","毕竟","先","较长","request","if","过程","avoid","shared","但是","一段时间","肯定","就","控制","d","上","initialized","<","周期","整个","满足","this","需求","else","shutdown","9000","常常","想","一个","中","相对","这样","定义","假设","in","通信接口","节点","命令","编程","知道","眼前","std","handle","uuid","order","转个","臂","resultcode","so","and","there","wait","送货","时","转圈","part","动","行为","告诉","are","source","当前","execute","动作","sleep","thread","needs","把","由","概念","务器","就此","不是","spin","run","make","具体","sendgoaloptions","竟然","这些","请求"],"title":"多节点动作通信","title_tokens":["多","通信","节点","动作"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["实现","识别","管理","功能","送餐","进行","送货","某一","某个","不仅","并","那","目的","就","一种","上","的","流程","简单","对","完整","这种","应用","行为","满足","需求","键盘","仅仅","理解","遥控","机器人","复杂","动作","常常","分拣","一个","机器","机制","中","也","这个","这么"," ","在","名字","很","需要","不仅仅","目标","通信","概念","含义","智能","场景","会","我们","就是","另外","是","等","，","运动","系统","。","好","具体","便于","被","从","可以","这些","ros","—","、","用到"],"title":"多节点动作通信","title_tokens":["多","通信","节点","动作"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["举个","360","一下","一段","不","有没有","开始","30","度","之后","装","机器","机制","进度","在","段时间","让","是","完成","进度条","当中","取消","还","执行","反馈","结束","哪里","控","才能","比如","得","转","再","表示","10","发送","使用","信息","，","运动","发出","例子","ok","现在","合适","到底","过程","圈","一段时间","肯定","就","20","的","一点","如果","到","机器人","想","？","一个","这样"," ","时间","通信","假设","我们","命令","一点一点","根本","随时","知道","眼前","。","了","可以","转个","每隔","这","转圈","并","像","指令","多少","行为","告诉","更为","当前","动作","1s","把","需要","后","不是","直到","没有","多少度","旋转","、"],"title":"通信模型","title_tokens":["通信模型","通信","模型"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["过程","一边","什么","执行","达到","反馈","结束","就此结束","坐标","又","就","控制","服务","动","的","如果","实时","所处","周期","抓取","整个","和","客户端","服务器","开始","当前","机器人","动作","干什么","之后","想","机器","一个","也","同时","中","起来","收到"," ","这个","姿态","再","机械","让","务器","模型","目标","导航","后","通信","就此","类似","服务器端","客户","发送","使用","是","信息","，","运动","当","。","臂","可能","状态"],"title":"客户端/服务器模型","title_tokens":["客户","/","务器","模型","客户端","服务器","服务"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["执行","但是","大家","下","才能","服务","的","和","客户端","一样","服务器","机器人","动作","只能","一个","机器","中","通信","务器","毕竟","命令","服务器端","客户","有","发送","先","多个","，","运动","。","完成","可以","只有","都"],"title":"一对多通信","title_tokens":["多","一对","通信"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["过程","action","进行","反馈","过","那","一种","之前","的","数据","文件","动作",".","也","同步","机制","中","定义","介绍","通信","通信接口","我们","接口","有","使用","是","，","。","既然"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["实现","过程","看","秘密","反馈","来","调用","时","发布者","大家","下","还会","发现","服务","一种","的","模块","其","底层","其实","两个","订阅","周期","应用","和","客户端","服务器","应带","上边","者","动作","应用层","隐藏","一个","收到","也","机制"," ","再","是不是","话题","通信","目标","务器","表示","不是","会","发布","命令","就是","动图","客户","有","发送","是","使用","三个","服务器端","没错","，","运动","基于","当","。","竟然","请求","仔细"],"title":"由服务和话题合成","title_tokens":["话题","由","合成","和","服务"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_7","text":"相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["一下","并","之前","服务","的","例程","一","和","动作","相比","相对","起来","话题","通信","我们","程序","分析","，","。","较长","运行"],"title":"编程方法","title_tokens":["编程","方法"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_8","text":"$ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_action_cpp server $ ros2 run learning_action_cpp client","text_tokens":["$","install","setup","action","local","/","bash","client","opt","cpp","ros2","source","_","tros",".","learning","server"," ","run"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_9","text":"动作的服务器fibonacci_action_server.cpp： #include <inttypes.h> #include <memory> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO(jacobperron): Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionServer : public rclcpp :: Node { public : using Fibonacci = learning_action_cpp :: action :: Fibonacci ; using GoalHandleFibonacci = rclcpp_action :: ServerGoalHandle < Fibonacci > ; explicit MinimalActionServer ( const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : Node ( \"minimal_action_server\" , options ) { using namespace std :: placeholders ; this -> action_server_ = rclcpp_action :: create_server < Fibonacci > ( this -> get_node_base_interface (), this -> get_node_clock_interface (), this -> get_node_logging_interface (), this -> get_node_waitables_interface (), \"fibonacci\" , std :: bind ( & MinimalActionServer :: handle_goal , this , _1 , _2 ), std :: bind ( & MinimalActionServer :: handle_cancel , this , _1 ), std :: bind ( & MinimalActionServer :: handle_accepted , this , _1 )); } private : rclcpp_action :: Server < Fibonacci >:: SharedPtr action_server_ ; rclcpp_action :: GoalResponse handle_goal ( const rclcpp_action :: GoalUUID & uuid , std :: shared_ptr < const Fibonacci :: Goal > goal ) { RCLCPP_INFO ( this -> get_logger (), \"Received goal request with order %d\" , goal -> order ); ( void ) uuid ; // Let's reject sequences that are over 9000 if ( goal -> order > 9000 ) { return rclcpp_action :: GoalResponse :: REJECT ; } return rclcpp_action :: GoalResponse :: ACCEPT_AND_EXECUTE ; } rclcpp_action :: CancelResponse handle_cancel ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Received request to cancel goal\" ); ( void ) goal_handle ; return rclcpp_action :: CancelResponse :: ACCEPT ; } void execute ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Executing goal\" ); rclcpp :: Rate loop_rate ( 1 ); const auto goal = goal_handle -> get_goal (); auto feedback = std :: make_shared < Fibonacci :: Feedback > (); auto & sequence = feedback -> sequence ; sequence . push_back ( 0 ); sequence . push_back ( 1 ); auto result = std :: make_shared < Fibonacci :: Result > (); for ( int i = 1 ; ( i < goal -> order ) && rclcpp :: ok (); ++ i ) { // Check if there is a cancel request if ( goal_handle -> is_canceling ()) { result -> sequence = sequence ; goal_handle -> canceled ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Canceled\" ); return ; } // Update sequence sequence . push_back ( sequence [ i ] + sequence [ i - 1 ]); // Publish feedback goal_handle -> publish_feedback ( feedback ); RCLCPP_INFO ( this -> get_logger (), \"Publish Feedback\" ); loop_rate . sleep (); } // Check if goal is done if ( rclcpp :: ok ()) { result -> sequence = sequence ; goal_handle -> succeed ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Succeeded\" ); } } void handle_accepted ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { using namespace std :: placeholders ; // this needs to return quickly to avoid blocking the executor, so spin up a new thread std :: thread { std :: bind ( & MinimalActionServer :: execute , this , _1 ), goal_handle }. detach (); } }; // class MinimalActionServer int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); auto action_server = std :: make_shared < MinimalActionServer > (); rclcpp :: spin ( action_server ); rclcpp :: shutdown (); return 0 ; } 动作的客户端fibonacci_action_client.cpp： #include <inttypes.h> #include <memory> #include <string> #include <iostream> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO ( jacobperron ) : Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionClient : public rclcpp::Node { public: using Fibonacci = learning_action_cpp::action::Fibonacci ; using GoalHandleFibonacci = rclcpp_action::ClientGoalHandle<Fibonacci> ; explicit MinimalActionClient ( const rclcpp::NodeOptions & node_options = rclcpp::NodeOptions ()) : Node ( \"minimal_action_client\" , node_options ) , goal_done_ ( false ) { this->client_ptr_ = rclcpp_action::create_client<Fibonacci> ( this->get_node_base_interface () , this->get_node_graph_interface () , this->get_node_logging_interface () , this->get_node_waitables_interface () , \"fibonacci\" ) ; this->timer_ = this->create_wall_timer ( std::chrono::milliseconds ( 500 ) , std::bind ( & MinimalActionClient::send_goal, this )) ; } bool is_goal_done () const { return this->goal_done_ ; } void send_goal () { using namespace std::placeholders ; this->timer_->cancel () ; this->goal_done_ = false ; if ( !this->client_ptr_ ) { RCLCPP_ERROR ( this->get_logger () , \"Action client not initialized\" ) ; } if ( !this->client_ptr_->wait_for_action_server ( std::chrono::seconds ( 10 ))) { RCLCPP_ERROR ( this->get_logger () , \"Action server not available after waiting\" ) ; this->goal_done_ = true ; return ; } auto goal_msg = Fibonacci::Goal () ; goal_msg.order = 10 ; RCLCPP_INFO ( this->get_logger () , \"Sending goal\" ) ; auto send_goal_options = rclcpp_action::Client<Fibonacci>::SendGoalOptions () ; send_goal_options.goal_response_callback = std::bind ( & MinimalActionClient::goal_response_callback, this, _1 ) ; send_goal_options.feedback_callback = std::bind ( & MinimalActionClient::feedback_callback, this, _1, _2 ) ; send_goal_options.result_callback = std::bind ( & MinimalActionClient::result_callback, this, _1 ) ; auto goal_handle_future = this->client_ptr_->async_send_goal ( goal_msg, send_goal_options ) ; } private: rclcpp_action::Client<Fibonacci>::SharedPtr client_ptr_ ; rclcpp::TimerBase::SharedPtr timer_ ; bool goal_done_ ; void goal_response_callback ( std::shared_future<GoalHandleFibonacci::SharedPtr> future ) { auto goal_handle = future.get () ; if ( !goal_handle ) { RCLCPP_ERROR ( this->get_logger () , \"Goal was rejected by server\" ) ; } else { RCLCPP_INFO ( this->get_logger () , \"Goal accepted by server, waiting for result\" ) ; } } void feedback_callback ( GoalHandleFibonacci::SharedPtr, const std::shared_ptr<const Fibonacci::Feedback> feedback ) { RCLCPP_INFO ( this->get_logger () , \"Next number in sequence received: %\" PRId32, feedback->sequence.back ()) ; } void result_callback ( const GoalHandleFibonacci::WrappedResult & result ) { this->goal_done_ = true ; switch ( result.code ) { case rclcpp_action::ResultCode::SUCCEEDED: break ; case rclcpp_action::ResultCode::ABORTED: RCLCPP_ERROR ( this->get_logger () , \"Goal was aborted\" ) ; return ; case rclcpp_action::ResultCode::CANCELED: RCLCPP_ERROR ( this->get_logger () , \"Goal was canceled\" ) ; return ; default: RCLCPP_ERROR ( this->get_logger () , \"Unknown result code\" ) ; return ; } RCLCPP_INFO ( this->get_logger () , \"Result received\" ) ; for ( auto number : result.result->sequence ) { RCLCPP_INFO ( this->get_logger () , \"%\" PRId32, number ) ; } } } ; // class MinimalActionClient int main ( int argc, char ** argv ) { rclcpp::init ( argc, argv ) ; auto action_client = std::make_shared<MinimalActionClient> () ; while ( !action_client->is_goal_done ()) { rclcpp::spin_some ( action_client ) ; } rclcpp::shutdown () ; return 0 ; }","text_tokens":["true","sequences","back","#","goalhandlefibonacci","included","}","blocking","=","while","argv","accept","client","(","of","'","publish","_-","is",")","cpp","iostream","const","bool","result","clientgoalhandle","class","create","wall","minimalactionserver","succeed","async","fibonacci","loop","memory","1","sharedptr","that","h","&","include","init","%","it","minimal","the","executor","private","callback","done","hpp","send","nodeoptions","push","some","info","seconds","number","char","interface","after","sequence","jacobperron","quickly","服务","string","case","detach","goaluuid","options","timer","up","ptr","inttypes","wrappedresult","[","waitables","rate","chrono","feedback",":","node","server","response","rejected","next","available","timerbase","remove","]","aborted","accepted","10","int","客户","update","ok","cancelresponse","void","placeholders","error","request","if","avoid","i","switch","action","todo","break","shared","：","*","\"","for","d","initialized","的","return","waiting","<","succeeded","get","executing","auto","with","code","this","客户端","服务器","else","received","servergoalhandle","shutdown","9000","canceling","explicit",".","learning"," ","2","using","!","by","in","argc","milliseconds","500","reject","canceled","check","order","std","handle","uuid","let",";","resultcode","was","so","and","there","wait","/","goal","part","&&","{",",","a","++","+","over","logger","graph","main","to","base","minimalactionclient","logging","are","namespace","_","cancel","0","execute","动作","prid32","clock","sleep","sending","thread","-","public","needs","msg","务器","rclcpp","s","not","as","spin","default","false",">","once","future","make","sendgoaloptions","bind","unknown","new","goalresponse"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/","text":"零拷贝数据传输 在传统操作系统的数据传输过程中，系统内部会在磁盘、内存、缓存中多次进行数据拷贝，每次都会占用CPU的资源，数据量小的时候还好，随着数据量的增加，CPU的开销也会持续增加，尤其是在机器人图像数据的应用中 ，经常会发生这种问题，导致CPU都在做数据拷贝，没有时间处理其他的应用功能了，直接的感觉就是处理卡顿。 零拷贝技术 针对这种问题，零拷贝技术应运而生。 零拷贝主要的任务就是避免CPU将数据从一块存储拷贝到另外一块存储，避免让CPU做大量的数据拷贝任务，减少不必要的拷贝，或者让别的组件来做这一类简单的数据传输任务，让CPU解脱出来专注于别的任务。这样就可以让系统资源的利用更加有效。 TogetherROS中就提供了灵活、高效的零拷贝功能，可以显著降低大尺寸数据的通信延时和CPU占用，具体有多显著呢，我们不妨进行一个测试。 TogetherROS零拷贝性能测试 我们使用TogetherROS系统内部集成的性能测试工具——performance_test，来评估下开启零拷贝前后的性能差异，这里我们传输的样本数据量是4M。 未开启零拷贝进行数据传输 $ ros2 run performance_test perf_test --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #未开启 开启零拷贝数据传输： $ ros2 run performance_test perf_test --zero-copy --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #开启 好的，测试已经跑完了，我们把结果放到这里，来分析一下。 在这个测试中，关键有四个指标： 时延，也就是消息从发布者到订阅者的传输时间。不开启零拷贝的情况下，平均为0.004912s，开启零拷贝之后，速度快了差不多40倍，平均为0.000180s。 CPU使用率，表示通信活动所占用的CPU时间，大家可以看这个utime指标，开启零拷贝之后时间有显著的提升，消耗CPU的资源少了。 驻留内存，包括通信过程中分配的内存和共享内存，是这个maxrss中的数据，开启零拷贝之后，占用的内存也更少。 样本统计，包括测试中发送、接收以及丢失的消息数量，是这组数据，依然是开启零拷贝之后性能更好。 通过测试，对于大数据通信来讲，零拷贝在CPU消耗、内存占用以及通信延迟抖动方面的性能都会更好。 这里只是便于大家感受零拷贝技术的效果，具体编程中如何使用零拷贝机制呢？ 编程开发 为了方便大家使用，TogetherROS针对零拷贝功能进行了封装，风格类似ROS2中话题通信的接口，还是话题通信一样的流程，我们只需要修改几个函数就可以实现啦。 运行例程 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run hbmem_pubsub talker $ ros2 run hbmem_pubsub listener 代码解析 发布者publisher_hbmem.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" using namespace std :: chrono_literals ; class MinimalHbmemPublisher : public rclcpp :: Node { public : MinimalHbmemPublisher () : Node ( \"minimal_hbmem_publisher\" ), count_ ( 0 ) { // 创建publisher_hbmem，topic为\"topic\"，QOS为KEEPLAST(10)，以及默认的可靠传输 publisher_ = this -> create_publisher_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 ); // 定时器，每隔40毫秒调用一次timer_callback进行消息发送 timer_ = this -> create_wall_timer ( 40 ms , std :: bind ( & MinimalHbmemPublisher :: timer_callback , this )); } private : // 定时器回调函数 void timer_callback () { // 获取要发送的消息 auto loanedMsg = publisher_ -> borrow_loaned_message (); // 判断消息是否可用，可能出现获取消息失败导致消息不可用的情况 if ( loanedMsg . is_valid ()) { // 引用方式获取实际的消息 auto & msg = loanedMsg . get (); // 获取当前时间，单位为us auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()). count (); // 对消息的index和time_stamp进行赋值 msg . index = count_ ; msg . time_stamp = time_now ; // 打印发送消息 RCLCPP_INFO ( this -> get_logger (), \"message: %d\" , msg . index ); publisher_ -> publish ( std :: move ( loanedMsg )); // 注意，发送后，loanedMsg已不可用 // 计数器加一 count_ ++ ; } else { // 获取消息失败，丢弃该消息 RCLCPP_INFO ( this -> get_logger (), \"Failed to get LoanMessage!\" ); } } // 定时器 rclcpp :: TimerBase :: SharedPtr timer_ ; // hbmem publisher rclcpp :: PublisherHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr publisher_ ; // 计数器 size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者subscriber_hbmem.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" class MinimalHbmemSubscriber : public rclcpp :: Node { public : MinimalHbmemSubscriber () : Node ( \"minimal_hbmem_subscriber\" ) { // 创建subscription_hbmem，topic为\"sample\"，QOS为KEEPLAST(10)，以及默认的可靠传输 // 消息回调函数为topic_callback subscription_ = this -> create_subscription_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 , std :: bind ( & MinimalHbmemSubscriber :: topic_callback , this , std :: placeholders :: _1 )); } private : // 消息回调函数 void topic_callback ( const hbmem_pubsub :: msg :: SampleMessage :: SharedPtr msg ) const { // 注意，msg只能在回调函数中使用，回调函数返回后，该消息就会被释放 // 获取当前时间 auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()) . count (); // 计算延时并打印出来 RCLCPP_INFO ( this -> get_logger (), \"msg %d, time cost %dus\" , msg -> index , time_now - msg -> time_stamp ); } // hbmem subscription rclcpp :: SubscriptionHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemSubscriber > ()); rclcpp :: shutdown (); return 0 ; } 接口汇总 我们整理一下，与ROS2中的话题通信相比，TogetherROS带有零拷贝机制的话题通信接口是这样的。 在发布者中，我们可以使用PublisherHbmem来创建一个发布者对象，然后通过create_publisher_hbmem发布数据，而在订阅者中，SubscriptionHbmem用来创建一个订阅者对象，通过 create_subscription_hbmem订阅需要的数据，至于底层如何完成零拷贝的过程，都交给TogetherROS即可。","text_tokens":["评估","赋值","增加","调用","stamp","还是","(","下","publish","流程","操作系统","failed",")","所","pubsub","至于","create","统计","wall","尺寸","定时","机制","在","literals","1","memory","不可","include","每次","更加","%","做","info","开启","延时","r","汇总","minimalhbmempublisher","于","卡顿","opt","传输","拷贝","发生","是否","显著","chrono",":","出现","话题","不妨","]","10","，","copy","void","问题","placeholders","microseconds","看","完","情况","活动","bash","\"","有效","几个","sample","到","拷贝到","一块","跑","？",".","开销","通信","共享内存","using","!","技术","发布","我们","有","放到","。","引用",";","用率","通过","t","togetherros","setup","samplemessage","获取","reliable","倍","发布者","感受","index","++","logger","时延","subscriptionhbmem","如何","和","数据传输","tros","指标","message","move","-","结果","随着","rclcpp","持续","cost","就是","未","而",">","duration","专注","没有","单位","平均","publisher","为了","minimalhbmemsubscriber","磁盘","install","解析","#","提供","计数器","argv","前后","加一","is","简单","对","cpp","const","多次","集成","者","class","操作","talker","sharedptr","要","0.000180","minimal","降低","callback","time","回调","都","loanmessage","string","针对","应运","测试","差不多","创建","时候","[","keep","这组","node","丢失","存储","工具","类似","接口","使用","失败","释放","可能","cast","以及","$","zero","*","导致","默认","的","depth","更少","return","订阅","尤其","呢","auto","应用","get","占用","last","机器人","大","也"," ","now","共享","maxrss","不必要","m","分析","与","了","每隔","来讲","利用","使用率","performance","其他","这","{",",","数据","namespace","一样","dus","clock","解脱","s","可靠","后","会","修改","listener","返回","便于","被","since","这里","、","数据量","keeplast","任务","local","来","一下","=","对象","包括","例程","消息","不","ros2","30","机器","啦","count","让","&","4m","init","40","是","少","高效","好","必要","从","—","size","已经","functional","数量","函数","用","只能","相比","方式","topic","timerbase","判断","int","另外","发送","差异","内存","方面","borrow","进行","：","并打印","整理","感觉","可用","带有","提升","0.004912","时间","argc","cpu","样本","utime","subscription","即可","更好","将","多","loaned","runtime","可以","缓存","灵活","只是","/","代码","us","main","to","然后","这种","只","0","_","测试工具","小","public","steady","需要","msg","接收","--","封装","系统","bind","不必","运行","实现","100","打印","功能","}","传统","别的","大家","对于","开发","方便","底层","出来","快","之后","valid","subscriber","hbmem","计数","四个","不多","抖动","一类","该","private","完成","max","hpp","应运而生","零","char","性能","timer","这个","array4m","组件","表示","减少","交给","实际","一次","据传","驻留","经常","直接","loanedmsg","if","过程","shared","ms","test","计算","或者","试工","就","d","丢弃","<","数据通信","用来","还好","this","perf","else","shutdown","主要","大量","一个","处理","中","这样","已","注意","通信接口","分配","编程","std","关键","qos","依然","系统资源","毫秒","内部","图像","定时器","为","source","资源","当前","避免","风格","数据通","publisherhbmem","把","消耗","history","spin","run","速度","epoch","效果","延迟","具体","make"],"title":"零拷贝数据传输","title_tokens":["数据","零","据传","传输","拷贝","数据传输"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_1","text":"在传统操作系统的数据传输过程中，系统内部会在磁盘、内存、缓存中多次进行数据拷贝，每次都会占用CPU的资源，数据量小的时候还好，随着数据量的增加，CPU的开销也会持续增加，尤其是在机器人图像数据的应用中 ，经常会发生这种问题，导致CPU都在做数据拷贝，没有时间处理其他的应用功能了，直接的感觉就是处理卡顿。","text_tokens":["过程","功能","增加","进行","数据量","导致","传统","其他","内部","图像","卡顿","感觉","的","数据","操作系统","传输","尤其","这种","应用","拷贝","还好","发生","时候","数据传输","多次","占用","资源","机器人","机器","操作","也","中","处理","开销","在","小"," ","时间","随着","持续","会","就是","cpu","是","内存","每次","，","直接","据传","没有","系统","。","经常","了","做","问题","磁盘","、","都","缓存"],"title":"零拷贝数据传输","title_tokens":["数据","零","据传","传输","拷贝","数据传输"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_2","text":"针对这种问题，零拷贝技术应运而生。 零拷贝主要的任务就是避免CPU将数据从一块存储拷贝到另外一块存储，避免让CPU做大量的数据拷贝任务，减少不必要的拷贝，或者让别的组件来做这一类简单的数据传输任务，让CPU解脱出来专注于别的任务。这样就可以让系统资源的利用更加有效。 TogetherROS中就提供了灵活、高效的零拷贝功能，可以显著降低大尺寸数据的通信延时和CPU占用，具体有多显著呢，我们不妨进行一个测试。","text_tokens":["任务","功能","提供","来","别的","简单","出来","尺寸","让","更加","一类","高效","必要","降低","从","做","应运而生","零","延时","于","针对","应运","测试","传输","拷贝","显著","组件","不妨","存储","减少","另外","，","据传","问题","进行","或者","就","有效","的","呢","拷贝到","一块","占用","大","主要","大量","一个","中","这样"," ","通信","不必要","技术","我们","cpu","有","。","将","多","了","可以","togetherros","灵活","利用","系统资源","这","数据","这种","和","数据传输","资源","避免","解脱","就是","专注","系统","具体","不必","、"],"title":"零拷贝技术","title_tokens":["零","技术","拷贝"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#togetherros","text":"我们使用TogetherROS系统内部集成的性能测试工具——performance_test，来评估下开启零拷贝前后的性能差异，这里我们传输的样本数据量是4M。 未开启零拷贝进行数据传输 $ ros2 run performance_test perf_test --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #未开启 开启零拷贝数据传输： $ ros2 run performance_test perf_test --zero-copy --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #开启 好的，测试已经跑完了，我们把结果放到这里，来分析一下。 在这个测试中，关键有四个指标： 时延，也就是消息从发布者到订阅者的传输时间。不开启零拷贝的情况下，平均为0.004912s，开启零拷贝之后，速度快了差不多40倍，平均为0.000180s。 CPU使用率，表示通信活动所占用的CPU时间，大家可以看这个utime指标，开启零拷贝之后时间有显著的提升，消耗CPU的资源少了。 驻留内存，包括通信过程中分配的内存和共享内存，是这个maxrss中的数据，开启零拷贝之后，占用的内存也更少。 样本统计，包括测试中发送、接收以及丢失的消息数量，是这组数据，依然是开启零拷贝之后性能更好。 通过测试，对于大数据通信来讲，零拷贝在CPU消耗、内存占用以及通信延迟抖动方面的性能都会更好。 这里只是便于大家感受零拷贝技术的效果，具体编程中如何使用零拷贝机制呢？","text_tokens":["评估","100","#","来","一下","大家","对于","前后","包括","下","消息","不","快","所","ros2","30","集成","者","统计","之后","机制","在","1","4m","四个","不多","40","是","抖动","0.000180","少","好","从","max","—","都","零","开启","已经","r","性能","数量","测试","传输","差不多","拷贝","显著","keep","这组","这个","丢失","array4m","、","表示","工具","10","发送","使用","差异","内存","，","方面","据传","copy","驻留","以及","$","过程","zero","看","进行","：","test","完","情况","活动","试工","的","depth","更少","订阅","数据通信","到","呢","perf","占用","last","跑","提升","大","？","也","中","0.004912"," ","时间","共享","通信","共享内存","maxrss","m","技术","发布","我们","cpu","样本","utime","有","分析","更好","放到","分配","编程","。","了","runtime","可以","用率","通过","关键","togetherros","来讲","reliable","使用率","依然","只是","performance","倍","发布者","感受","内部","数据","时延","为","如何","和","数据传输","_","指标","资源","数据通","测试工具","-","把","结果","消耗","s","接收","history","会","就是","run","未","--","速度","系统","效果","延迟","便于","具体","平均","这里","数据量"],"title":"TogetherROS零拷贝性能测试","title_tokens":["togetherros","测试","零","拷贝","性能"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_3","text":"为了方便大家使用，TogetherROS针对零拷贝功能进行了封装，风格类似ROS2中话题通信的接口，还是话题通信一样的流程，我们只需要修改几个函数就可以实现啦。","text_tokens":["togetherros","实现","功能","零","进行","还是","大家","就","函数","针对","的","流程","几个","方便","只","拷贝","ros2","一样","风格","中","啦","话题","需要","通信","类似","我们","修改","接口","使用","封装","，","。","了","可以","为了"],"title":"编程开发","title_tokens":["编程","开发"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_4","text":"$ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run hbmem_pubsub talker $ ros2 run hbmem_pubsub listener","text_tokens":["$","install","setup","run","listener",".","local","opt"," ","hbmem","talker","/","pubsub","bash","_","ros2","source","tros"],"title":"运行例程","title_tokens":["例程","运行"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_5","text":"发布者publisher_hbmem.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" using namespace std :: chrono_literals ; class MinimalHbmemPublisher : public rclcpp :: Node { public : MinimalHbmemPublisher () : Node ( \"minimal_hbmem_publisher\" ), count_ ( 0 ) { // 创建publisher_hbmem，topic为\"topic\"，QOS为KEEPLAST(10)，以及默认的可靠传输 publisher_ = this -> create_publisher_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 ); // 定时器，每隔40毫秒调用一次timer_callback进行消息发送 timer_ = this -> create_wall_timer ( 40 ms , std :: bind ( & MinimalHbmemPublisher :: timer_callback , this )); } private : // 定时器回调函数 void timer_callback () { // 获取要发送的消息 auto loanedMsg = publisher_ -> borrow_loaned_message (); // 判断消息是否可用，可能出现获取消息失败导致消息不可用的情况 if ( loanedMsg . is_valid ()) { // 引用方式获取实际的消息 auto & msg = loanedMsg . get (); // 获取当前时间，单位为us auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()). count (); // 对消息的index和time_stamp进行赋值 msg . index = count_ ; msg . time_stamp = time_now ; // 打印发送消息 RCLCPP_INFO ( this -> get_logger (), \"message: %d\" , msg . index ); publisher_ -> publish ( std :: move ( loanedMsg )); // 注意，发送后，loanedMsg已不可用 // 计数器加一 count_ ++ ; } else { // 获取消息失败，丢弃该消息 RCLCPP_INFO ( this -> get_logger (), \"Failed to get LoanMessage!\" ); } } // 定时器 rclcpp :: TimerBase :: SharedPtr timer_ ; // hbmem publisher rclcpp :: PublisherHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr publisher_ ; // 计数器 size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者subscriber_hbmem.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" class MinimalHbmemSubscriber : public rclcpp :: Node { public : MinimalHbmemSubscriber () : Node ( \"minimal_hbmem_subscriber\" ) { // 创建subscription_hbmem，topic为\"sample\"，QOS为KEEPLAST(10)，以及默认的可靠传输 // 消息回调函数为topic_callback subscription_ = this -> create_subscription_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 , std :: bind ( & MinimalHbmemSubscriber :: topic_callback , this , std :: placeholders :: _1 )); } private : // 消息回调函数 void topic_callback ( const hbmem_pubsub :: msg :: SampleMessage :: SharedPtr msg ) const { // 注意，msg只能在回调函数中使用，回调函数返回后，该消息就会被释放 // 获取当前时间 auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()) . count (); // 计算延时并打印出来 RCLCPP_INFO ( this -> get_logger (), \"msg %d, time cost %dus\" , msg -> index , time_now - msg -> time_stamp ); } // hbmem subscription rclcpp :: SubscriptionHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["keeplast","赋值","#","打印","}","计数器","=","调用","argv","stamp","(","加一","publish","failed","is",")","消息","出来","对","pubsub","cpp","const","者","class","create","wall","定时","valid","count","subscriber","在","hbmem","literals","memory","sharedptr","1","计数","要","不可","&","include","init","40","%","该","minimal","private","time","callback","hpp","回调","size","info","延时","functional","loanmessage","minimalhbmempublisher","char","函数","string","用","timer","传输","创建","是否","[","chrono","只能",":","node","出现","方式","topic","timerbase","]","10","判断","int","发送","实际","使用","一次","，","失败","borrow","释放","void","可能","placeholders","cast","loanedmsg","if","以及","microseconds","进行","：","ms","情况","*","shared","计算","导致","并打印","\"","d","就","丢弃","默认","的","可用","return","<","sample","订阅","get","auto","this","else","shutdown",".","中"," ","now","时间","已","using","注意","!","argc","发布","subscription","std","引用","loaned",";","t","每隔","qos","samplemessage","获取","/","发布者","毫秒","index","{",",","++","us","logger","main","to","定时器","subscriptionhbmem","为","和","namespace","_","message","0","当前","dus","clock","publisherhbmem","move","-","public","steady","msg","rclcpp","可靠","后","会","spin","cost","epoch",">","duration","返回","make","单位","被","bind","publisher","minimalhbmemsubscriber","since"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_6","text":"我们整理一下，与ROS2中的话题通信相比，TogetherROS带有零拷贝机制的话题通信接口是这样的。 在发布者中，我们可以使用PublisherHbmem来创建一个发布者对象，然后通过create_publisher_hbmem发布数据，而在订阅者中，SubscriptionHbmem用来创建一个订阅者对象，通过 create_subscription_hbmem订阅需要的数据，至于底层如何完成零拷贝的过程，都交给TogetherROS即可。","text_tokens":["togetherros","过程","零","来","一下","对象","发布者","整理","的","数据","底层","订阅","subscriptionhbmem","用来","然后","ros2","拷贝","带有","创建","如何","_","者","至于","create","相比","publisherhbmem","一个","机制","中","这样"," ","在","hbmem","话题","需要","通信","通信接口","交给","发布","我们","接口","而","使用","是","subscription","即可","，","与","。","完成","可以","通过","publisher","都"],"title":"接口汇总","title_tokens":["接口","汇总"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/","text":"分布式通信配置 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如在这款机器人系统中，就有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用旭日派作为控制器，主要实现传感器驱动、电机控制、AI应用等功能，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个计算平台之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过TogehterROS都已经为我们准备好了，我们只需要在每一个计算上配置好TogehterROS或者ROS2的环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下分布式系统的魅力。 分布式网络搭建 旭日派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function # 旭日派端 $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function # PC端 神奇的事情就这样发生了，旭日X3派上安装的是TogetherROS，我的电脑上安装的是ROS2，他们只要处于同一网络中，就可以实现通信了，感觉就像在一个电脑里一样。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和旭日X3派端中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 话题分布式通信 之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 以话题通信为例，旭日派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串，我们看下效果如何。 $ ros2 run learning_topic_cpp talker # 旭日派端 $ ros2 run learning_topic_cpp listener # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，我们几乎不需要任何配置，代码也不需要做任何修改，一切都会变得如此轻松。","text_tokens":["实现","算机","#","功能","能力","任务","不同","提供","什么","环境","一下","=","笔记本电脑","分组","处于","没","笔记本","局域","大家","分布式","下","桥接","之前","例程","框架","开发","一切","方便","传感","不","全都","任务分配","所","cpp","ros2","准备","很多","计算机","hello","控制器","模式","请","者","机器","岂","机制","啦","起来","subscriber","在","中有","带来","talker","频繁","端","网络","export","搭建","变得","是","你","等","多个","之间","minimal","有点","结构","压力","好","完成","于是","做","他们","还","都","简而言之","笔记","小组","下来","已经","pc","world","才能","卡顿","比如","用","测试","原本","希望","两个","不够","相互","传输","之一","不过","虚拟","一系","发生","your","是否","我","叫","复杂","较","作为","出现","适合","attention","采用","话题","member","topic","接下来","几乎","每","毕竟","类似","命令行","使用","实际","信息","，","放在","运动","加入","经常","字符","看上去","系列","问题","可能","无法","直接","典型","用到","$","位于","看","情况","：","计算","同一","放","或者","派","就","控制","上","完全","感觉","分布式系统","的","个","domain","如果","<","事情","examples","订阅","到","呢","应用","计算能力","虚拟机","各种","互联","机器人","打通","变化","配置","这款","主要","一个","？","处理","中","减轻","也","这样"," ","拆解","为例","看上","驱动","通信","平台","智能","节点","体积","我们","命令","发布","有","监控","即可","publisher","function","两者","分配","编写","。","将","多","了","可以","派端","安装","魅力","感器","id","如此","一系列","togetherros","局域网","接下","神奇","确保","这","发布者","感受","并","带领","里","分布","上去","像","代码","ai","轻松","字符串","遇到","数据","如","一句","非常","为","这种","只","一","局域网络","和","如何","learning","一样","资源","_","上边","布式","而是","则","只要","电脑","连接","小","消耗","由","需要","任何","电机","而言","后","不是","会","组成","rclcpp","togehterros","就是","修改","同一个","run","并且",">","listener","繁多","比较","没有","系统","效果","旭日","传感器","远程","具体","x3","以","挺","方法","这些","互通","ros","、","运行","此外"],"title":"分布式通信配置","title_tokens":["配置","通信","分布式","分布","布式"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。","text_tokens":["实现","算机","功能","能力","任务","情况","计算","这","里","分布","分布式","卡顿","上","分布式系统","的","遇到","如果","全都","不够","到","任务分配","计算能力","计算机","机器人","布式","机器","一个","处理","出现","中","岂","减轻","拆解","？"," ","平台","智能","不是","会","就是","等","多个","，","放在","繁多","分配","系统","压力","将","经常","多","。","可以","这些","、","运行"],"title":"分布式通信配置","title_tokens":["配置","通信","分布式","分布","布式"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_2","text":"什么叫分布式？ 机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如在这款机器人系统中，就有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用旭日派作为控制器，主要实现传感器驱动、电机控制、AI应用等功能，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个计算平台之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过TogehterROS都已经为我们准备好了，我们只需要在每一个计算上配置好TogehterROS或者ROS2的环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下分布式系统的魅力。","text_tokens":["实现","算机","功能","任务","不同","什么","环境","笔记本电脑","笔记本","大家","分布式","下","框架","开发","方便","传感","不","ros2","准备","计算机","控制器","机器","起来","在","是","等","之间","有点","结构","压力","好","于是","做","还","都","笔记","下来","已经","比如","原本","两个","传输","相互","之一","不过","叫","复杂","较","作为","适合","采用","接下来","每","毕竟","信息","，","运动","看上去","可能","典型","位于","计算","放","或者","派","就","控制","上","完全","分布式系统","的","到","应用","各种","机器人","变化","这款","主要","配置","？","一个","中","减轻"," ","看上","驱动","通信","平台","节点","体积","我们","有","监控","分配","。","将","多","了","可以","魅力","感器","接下","这","感受","带领","上去","分布","ai","数据","非常","为","这种","只","一","资源","上边","布式","电脑","小","消耗","由","需要","任何","电机","组成","togehterros","就是","并且","比较","系统","旭日","传感器","远程","挺","这些","、","此外"],"title":"分布式通信","title_tokens":["通信","分布式","分布","布式"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_3","text":"旭日派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function # 旭日派端 $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function # PC端 神奇的事情就这样发生了，旭日X3派上安装的是TogetherROS，我的电脑上安装的是ROS2，他们只要处于同一网络中，就可以实现通信了，感觉就像在一个电脑里一样。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["实现","算机","#","能力","什么","一下","分组","处于","局域","桥接","所","不","ros2","很多","计算机","模式","请","subscriber","在","中有","带来","端","网络","你","是","之间","minimal","完成","做","他们","都","简而言之","小组","下来","已经","pc","用","测试","希望","两个","虚拟","不过","发生","我","attention","话题","member","接下来","命令行","使用","，","问题","无法","直接","$","计算","同一","派","就","上","感觉","的","个","如果","事情","examples","到","呢","虚拟机","互联","打通","配置","一个","？","也","中","这样"," ","通信","平台","我们","命令","function","。","将","了","派端","可以","安装","togetherros","局域网","接下","神奇","确保","这","并","里","像","如","为","局域网络","和","一样","_","而是","只要","电脑","连接","需要","rclcpp","而言","后","会","修改","同一个","run","效果","旭日","具体","x3","publisher","互通"],"title":"分布式网络搭建","title_tokens":["网络","分布式","分布","布式","搭建"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_4","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和旭日X3派端中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["$","实现","算机","提供","不同","小组","：","计算","=","同一","分组","没","处于","就","才能","的","domain","<","如果","一句","到","无法","ros2","your","计算机","和","一样","_","则","配置","一个","机制","中","电脑","这样","在"," ","通信","export","类似","我们","同一个",">","即可","，","加入","两者","分配","。","旭日","x3","了","将","可以","派端","id","问题","ros"],"title":"分布式网络分组","title_tokens":["分组","网络","分布式","分布","布式"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_5","text":"之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 以话题通信为例，旭日派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串，我们看下效果如何。 $ ros2 run learning_topic_cpp talker # 旭日派端 $ ros2 run learning_topic_cpp listener # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，我们几乎不需要任何配置，代码也不需要做任何修改，一切都会变得如此轻松。","text_tokens":["#","分布式","下","之前","例程","开发","一切","不","cpp","ros2","hello","者","机器","啦","在","talker","频繁","端","网络","变得","好","做","都","pc","world","测试","一系","是否","作为","话题","topic","几乎","类似","使用","实际","，","字符","问题","直接","用到","$","看","情况","派","的","订阅","呢","机器人","配置","方法","？","learning","也","中"," ","为例","通信","发布","我们","编写","。","了","可以","派端","如此","一系列","发布者","分布","代码","轻松","字符串","如何","_","布式","电脑","需要","任何","系列","会","修改","run","listener","没有","以","旭日","效果","ros"],"title":"话题分布式通信","title_tokens":["话题","通信","分布式","分布","布式"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/","text":"数字输入与输出 数字输入与输出是最常用的一种外设通信方式，虽然每一个端口只有0和1两种状态，但却可以组合出各种各样的变化。 数字输入与输出原理 数字输入与输出，也称为通用输入输出，全称是General-purpose input/output，大部分情况下，我们都会用简称GPIO GPIO的功能，主要是指这个管脚可以作为数字信号的输入或者输出使用，到底是输入还是输出呢，这需要我们使用系统寄存器来进行配置。 当GPIO被设置为输入模式时，就可以读取这个管脚上的电平高低，从而实现读取外部信号的功能，比如外部按键的信号，就是这样读取的。 当GPIO被设置为输出模式时，我们就可以主动改变管脚的电平高低了，这样就能通过电平的变化，控制外部的设备，比如点亮或者熄灭一个LED灯。 除此之外，一些IO口还可以配置成其他功能，比如PWM输出，串口通信等等。 关于旭日X3派的管脚定义，大家可以参考这张图，他会显示每个管脚具体可以实现什么功能。 这里需要说明一点，旭日X3派的管脚序号定义有三种编码方式： 第一种就是Board编码，这种就是按照主板上管脚排针编号，分别对应1~40号排针。 第二种就是BCM编码，这种方式是参考 Broadcom SOC 的通道编号，侧重CPU寄存器，在使用BCM库或者使用python编程时，常采用的一种编码方式。 第三种就是X3编码，可以理解为是旭日X3派自己的编码方式，在使用旭日派自己的驱动库编程时，会使用到这种编码。 大家在后续编程开发中，需要结合函数接口的说明，使用对应的引脚编号，不然可能会出现意料之外的问题。 引脚复用配置工具 虽然从硬件上看，扩展出来的引脚只有40个，不过大部分引脚还可以配置成多种功能，这样延伸出来变化可就多了，那如何配置引脚的不同功能呢？ 我们可以使用旭日X3派中提供的srpi-config工具进行配置。 直接在终端中输入这个指令，就可以看到这样的窗口，okay配置对应管脚为专用功能，disabled配置对应管脚为GPIO模式，按照自己的需要进行配置即可，配置完成后重启才会生效。 了解了GPIO的概念，接下来我们就要开始编程啦。 数字输入编程 首先我们来看下最基本的数字输入测试，读取一个按键的状态。 硬件接线 我们将按键的一边连接到旭日X3派的38号引脚上，这是一个GPIO的接口，另一边连接到39号引脚，也就是GND。 原理很简单，按键没按下时，导线是断开的，GPIO是默认的状态，按键按下后，导线就会导通，GPIO的状态变成了GND。 这样，我们就可以通过电平的变化，知道按键的状态啦。 运行例程 我们不妨来运行一下，看下实际效果是不是这样。 $ sudo python3 simple_input.py 我们将一个按键开关接到对应的管脚上， 然后连接到旭日X3PI当中，运行刚才的程序。之后我们按下或是松开按键时，他都会打印出对应的电平变化。 按下显示的就是LOW，也就是低电平，松开就是HIGH，也就是高电平。 代码解析 数字输入的功能实现啦，我们来看下代码是如何实现的。 simple_input.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 input_pin = 38 # BOARD 编码 38 def main (): prev_value = None # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输入模式 GPIO . setup ( input_pin , GPIO . IN ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : # 读取管脚电平 value = GPIO . input ( input_pin ) if value != prev_value : if value == GPIO . HIGH : value_str = \"HIGH\" else : value_str = \"LOW\" print ( \"Value read from pin {} : {} \" . format ( input_pin , value_str )) prev_value = value time . sleep ( 1 ) finally : GPIO . cleanup () if __name__ == '__main__' : main () 我们在Python中需要引入X3Pi的GPIO库，从而使用对应的GPIO功能。 主函数里首先需要定义了一个变量来存储这个管脚的电平信号。 进行初始化，设置管脚的编码模式为BOARD模式，之后定义输入用的管脚，这里使用的是BOARD编码，因为他是第38个管脚，所以为38号。 之后的话就会进入到循环当中，这样的一个函数就可以读出当前的电平值。 没有按下按键的时候，38管脚和GND是断开的，他就是高电平，按下按键时，就和GND导通了，这个管脚就会编程低电平。 如果电平值和上一次存储的不一致，后面的判断就会判断出是升高还是降低，最后会把结果打印出来。 松开按键时同理。 数字输出编程 GPIO不止有输入功能，还有输出功能，大家应该经常看到电子设别上的LED灯吧，这就是典型的IO输出控制的设备，我们也来试一试。 硬件接线 我们将一个LED灯的正极连接到了2号引脚，这是5V电源，用来给LED供电的，不过LED电阻小，为了不至于烧坏，我们最好还是在电路中串联一个电阻来限制电流大小。 接下来，当LED的负极接到GND，也就是电源的0V上时，LED两边会因为有电势差而被点亮；当LED的负极也连接到高电平，也就是5V的时候，会因为两边没有电势差，也就不会被点亮。 这个负极的电平信号我们就用GPIO来输出，所以我们把LED的负极连接到任意的GPIO引脚上，比如38号，将这个引脚设置为输出模式，当输出高电平时，灯就会熄灭，输出低电平，灯就会被点亮。 把这两个动作放到一个循环中，就可以实现闪烁的功能啦。 运行示例程序 快来运行例程试一试吧，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行程序，就可以看到这个LED就会开始闪烁了。 $ sudo python3 simple_input.py 代码解析 simple_out.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 output_pin = 38 # BOARD 编码 38 def main (): # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输出模式，并且初始化为高电平 GPIO . setup ( output_pin , GPIO . OUT , initial = GPIO . HIGH ) # 记录当前管脚状态 curr_value = GPIO . HIGH print ( \"Starting demo now! Press CTRL+C to exit\" ) try : # 间隔1秒时间，循环控制LED灯亮灭 while True : time . sleep ( 1 ) GPIO . output ( output_pin , curr_value ) curr_value ^= GPIO . HIGH finally : GPIO . cleanup () if __name__ == '__main__' : main () 数字输入与输出集成 学习了GPIO的输入与输出功能后，我们就可以做一些自动化的功能了。 硬件接线 比如我们同时连接一个按键和LED灯，尝试实现按键被按下，灯被点亮，松开，灯熄灭，这样的功能。 运行示例程序 我们通过这个例程来试一试效果如何？ $ sudo python3 button_led.py 我们来看一下具体的操作，同样的，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。按下按键后，就可以看到LED被点亮了，松开之后，LED就熄灭了。 代码解析 button_led.py #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道： # 36号作为输出，可以点亮一个LED # 38号作为输入，可以接一个按钮 led_pin = 36 # BOARD 编码 36 but_pin = 38 # BOARD 编码 38 # 禁用警告信息 GPIO . setwarnings ( False ) def main (): prev_value = None # Pin Setup: GPIO . setmode ( GPIO . BOARD ) # BOARD pin-numbering scheme GPIO . setup ( led_pin , GPIO . OUT ) # LED pin set as output GPIO . setup ( but_pin , GPIO . IN ) # Button pin set as input # Initial state for LEDs: GPIO . output ( led_pin , GPIO . LOW ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : curr_value = GPIO . input ( but_pin ) if curr_value != prev_value : GPIO . output ( led_pin , curr_value ) prev_value = curr_value print ( \"Outputting {} to Pin {} \" . format ( curr_value , led_pin )) time . sleep ( 1 ) finally : GPIO . cleanup () # cleanup all GPIO if __name__ == '__main__' : main () 基本的配置还是一样的，引入基本的库，然后设置为BOARD模式，然后初始化两个管脚，一个用来读取按键的通断，一个用来控制LED的亮灭，之后只需要判断按键的状态来做出对应的控制LED的动作就可以了。","text_tokens":["自己","什么","不会","没","c","还是","却","还有","(","下","意料之外","36",")","他会","秒","state","至于","上时","okay","starting","在","1","但","demo","读取","从而","编码","^","通用","set","常","参考","做","号","output","press","同理","后续","第三种","显示","不过","结合","基本","二种",":","重启","出现","采用","是不是","不妨","亮","串联","，","电源","负极","口","问题","看","numbering","情况","value","\"","pwm","到","变化","？",".","出","禁用","警告","通信","2","!","初始","我们","有","0v","放到","。","按","通过","引脚","setup","主板","接下","循环","两种","如何","和","usr","import","专用","来看","x3pi","-","任意","结果","bin","as","一致","就是","而","寄存器","间隔","没有","旭日","为了","hobot","信号","解析","#","提供","实物","不然","5v","while","这是","接线","关于","简单","all","gpio","的话","集成","电流","none","操作","串口","接","电阻","~","等等","了解","time","降低","都","电势","一边","ctrl","排针","灭","大小","吧","测试","exit","时候","或是","simple","原理","存储","工具","按钮","接口","使用","信息","try","接到","可能","到底","bcm","$","称为","侧重","张图","他","第二种","全称","的","默认","一点","编码方式","如果","组合","呢","outputting","自动化","供电","也"," ","now","驱动","限制","format","外设","松开","同样","与","str","了","只有","不至于","curr","出是","最","外部","其他","这","窗口",",","{","setwarnings","数字","指令","熄灭","引入","scheme","一样","对应","序号","print","同时","首先","很","设置","后","会","最好","py","除此之外","做出","x3","initial","被","leds","这里","状态","true","不同","来","一下","=","那","一些","高低","能","'","例程","def","不","尝试","灯亮","三种","导通","生效","模式","config","开始","分别","每个","啦","；","最后","prev","实际效果","40","是","程序","开关","当","从","多种","high","之外","led","硬件","下来","简称","应该","大部分","终端","不止","purpose","输入","函数","用","作为","方式","复用","通道","接下来","每","就要","判断","通断","out","设别","38","env","进行","：","示例","for","按下","值","一种","第一种","按键","第三","可","gnd","general","指","各种","python","时间","除此","cpu","常用","即可","39","多","将","可以","自动","所以","升高","灯","按照","高电平","cleanup","/","setmode","disabled","+","里","代码","低电平","main","to","虽然","然后","第","这种","只","理解","0","_","改变","连接","小","导线","需要","闪烁","设备","主","false","并且","finally","库","系统","变量","进入","运行","输出","实现","打印","功能","}","from","端口","电平","大家","会导通","开发","读出","button","出来","快","之后","输入输出","name","看到","成","完成","当中","才","主动","还","给","电路","but","试一试","第一","比如","两个","部分","编号","pin","这个","sudo","说明","实际","一次","经常","直接","if","典型","或者","延伸","派","就","控制","上","电势差","个","另一边","变成","用来","烧坏","数字信号","大部","电子","else","因为","主要","配置","一个","中","这样","broadcom","定义","io","第二","in","read","__","扩展","两边","编程","知道","寄存","python3","记录","input","管脚","时","学习","low","为","soc","各种各样","初始化","当前","动作","sleep","刚才","把","srpi","概念","后面","不是","点亮","正极","断开","board","效果","具体","各样","意料"],"title":"数字输入与输出","title_tokens":["输出","数字","与","输入"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_1","text":"数字输入与输出是最常用的一种外设通信方式，虽然每一个端口只有0和1两种状态，但却可以组合出各种各样的变化。","text_tokens":["输出","最","端口","却","输入","一种","两种","数字","的","虽然","组合","和","各种各样","0","各种","变化","一个","出","方式","通信","1","但","每","常用","是","外设","，","与","。","可以","各样","只有","状态"],"title":"数字输入与输出","title_tokens":["输出","数字","与","输入"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_2","text":"数字输入与输出，也称为通用输入输出，全称是General-purpose input/output，大部分情况下，我们都会用简称GPIO GPIO的功能，主要是指这个管脚可以作为数字信号的输入或者输出使用，到底是输入还是输出呢，这需要我们使用系统寄存器来进行配置。 当GPIO被设置为输入模式时，就可以读取这个管脚上的电平高低，从而实现读取外部信号的功能，比如外部按键的信号，就是这样读取的。 当GPIO被设置为输出模式时，我们就可以主动改变管脚的电平高低了，这样就能通过电平的变化，控制外部的设备，比如点亮或者熄灭一个LED灯。 除此之外，一些IO口还可以配置成其他功能，比如PWM输出，串口通信等等。 关于旭日X3派的管脚定义，大家可以参考这张图，他会显示每个管脚具体可以实现什么功能。 这里需要说明一点，旭日X3派的管脚序号定义有三种编码方式： 第一种就是Board编码，这种就是按照主板上管脚排针编号，分别对应1~40号排针。 第二种就是BCM编码，这种方式是参考 Broadcom SOC 的通道编号，侧重CPU寄存器，在使用BCM库或者使用python编程时，常采用的一种编码方式。 第三种就是X3编码，可以理解为是旭日X3派自己的编码方式，在使用旭日派自己的驱动库编程时，会使用到这种编码。 大家在后续编程开发中，需要结合函数接口的说明，使用对应的引脚编号，不然可能会出现意料之外的问题。","text_tokens":["输出","实现","信号","功能","自己","什么","来","不然","电平","关于","还是","大家","下","一些","高低","能","开发","意料之外","他会","三种","gpio","模式","输入输出","分别","每个","在","串口","1","~","等等","40","读取","是","成","从而","编码","当","通用","常","参考","主动","还","都","号","之外","led","output","简称","排针","大部分","purpose","输入","第一","函数","用","比如","后续","第三种","显示","结合","部分","二种","编号","这个","作为","出现","方式","说明","采用","通道","接口","使用","，","口","问题","可能","到底","bcm","情况","进行","：","称为","侧重","张图","或者","派","pwm","就","控制","一种","上","第一种","第二种","全称","的","按键","一点","编码方式","第三","到","数字信号","呢","general","大部","指","变化","主要","配置","一个","也","中","这样"," ","python","broadcom","定义","驱动","通信","io","第二","除此","我们","cpu","有","与","编程","。","了","可以","通过","引脚","寄存","灯","主板","按照","input","管脚","时","/","这","外部","其他","数字","熄灭","为","这种","soc","理解","对应","改变","序号","-","需要","设置","会","设备","点亮","就是","board","寄存器","除此之外","库","系统","旭日","x3","具体","被","意料","这里"],"title":"数字输入与输出原理","title_tokens":["输出","数字","与","原理","输入"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_3","text":"虽然从硬件上看，扩展出来的引脚只有40个，不过大部分引脚还可以配置成多种功能，这样延伸出来变化可就多了，那如何配置引脚的不同功能呢？ 我们可以使用旭日X3派中提供的srpi-config工具进行配置。 直接在终端中输入这个指令，就可以看到这样的窗口，okay配置对应管脚为专用功能，disabled配置对应管脚为GPIO模式，按照自己的需要进行配置即可，配置完成后重启才会生效。 了解了GPIO的概念，接下来我们就要开始编程啦。","text_tokens":["功能","不同","提供","自己","那","出来","gpio","生效","config","模式","开始","okay","啦","在","看到","40","了解","成","完成","从","才","还","多种","硬件","下来","大部分","终端","输入","不过","部分","重启","这个","接下来","工具","就要","使用","，","直接","看","进行","延伸","派","就","上","的","个","可","呢","大部","变化","配置","？","中","这样"," ","我们","扩展","即可","编程","。","多","了","可以","只有","引脚","接下","按照","管脚","窗口","disabled","虽然","指令","为","如何","对应","专用","-","需要","srpi","概念","后","会","旭日","x3"],"title":"引脚复用配置工具","title_tokens":["配置","复用","引脚","工具"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_4","text":"首先我们来看下最基本的数字输入测试，读取一个按键的状态。","text_tokens":["数字","读取","的","测试","一个","按键","，","最","来看","首先","。","状态","基本","输入","下","我们"],"title":"数字输入编程","title_tokens":["编程","数字","输入"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_5","text":"我们将按键的一边连接到旭日X3派的38号引脚上，这是一个GPIO的接口，另一边连接到39号引脚，也就是GND。 原理很简单，按键没按下时，导线是断开的，GPIO是默认的状态，按键按下后，导线就会导通，GPIO的状态变成了GND。 这样，我们就可以通过电平的变化，知道按键的状态啦。","text_tokens":["号","一边","时","这是","没","电平","派","按下","就","下","上","会导通","默认","按键","的","简单","另一边","变成","到","gnd","gpio","变化","一个","也","啦","连接","这样"," ","原理","很","导线","状态","后","38","我们","就是","断开","接口","是","，","知道","39","。","将","旭日","x3","按","了","可以","通过","引脚"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_6","text":"我们不妨来运行一下，看下实际效果是不是这样。 $ sudo python3 simple_input.py 我们将一个按键开关接到对应的管脚上， 然后连接到旭日X3PI当中，运行刚才的程序。之后我们按下或是松开按键时，他都会打印出对应的电平变化。 按下显示的就是LOW，也就是低电平，松开就是HIGH，也就是高电平。","text_tokens":["$","python3","high","也","打印","看","input","来","一下","管脚","时","高电平","电平","按下","他","下","上","低电平","按键","的","low","然后","到","显示","_","对应","变化","之后",".","一个","刚才","或是","都","sudo","这样"," ","simple","连接","是不是","不妨","x3pi","出","不是","会","我们","实际效果","就是","py","实际","程序","松开","，","开关","效果","。","将","接到","旭日","当中","运行"],"title":"运行例程","title_tokens":["例程","运行"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_7","text":"数字输入的功能实现啦，我们来看下代码是如何实现的。 simple_input.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 input_pin = 38 # BOARD 编码 38 def main (): prev_value = None # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输入模式 GPIO . setup ( input_pin , GPIO . IN ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : # 读取管脚电平 value = GPIO . input ( input_pin ) if value != prev_value : if value == GPIO . HIGH : value_str = \"HIGH\" else : value_str = \"LOW\" print ( \"Value read from pin {} : {} \" . format ( input_pin , value_str )) prev_value = value time . sleep ( 1 ) finally : GPIO . cleanup () if __name__ == '__main__' : main () 我们在Python中需要引入X3Pi的GPIO库，从而使用对应的GPIO功能。 主函数里首先需要定义了一个变量来存储这个管脚的电平信号。 进行初始化，设置管脚的编码模式为BOARD模式，之后定义输入用的管脚，这里使用的是BOARD编码，因为他是第38个管脚，所以为38号。 之后的话就会进入到循环当中，这样的一个函数就可以读出当前的电平值。 没有按下按键的时候，38管脚和GND是断开的，他就是高电平，按下按键时，就和GND导通了，这个管脚就会编程低电平。 如果电平值和上一次存储的不一致，后面的判断就会判断出是升高还是降低，最后会把结果打印出来。 松开按键时同理。","text_tokens":["实现","true","hobot","信号","#","功能","打印","}","from","来","=","while","c","电平","还是","(","下","'","读出","def",")","不","出来","导通","gpio","模式","的话","之后","starting","none","name","啦","在","最后","prev","1","demo","读取","是","编码","从而","time","当中","降低","high","号","硬件","ctrl","press","输入","函数","同理","用","exit","时候",":","pin","编号","这个","simple","存储","通道","判断","使用","一次","try","，","38","if","env","进行","：","value","\"","按下","他","就","值","上","的","按键","个","如果","到","gnd","else","因为",".","一个","中","这样"," ","now","python","定义","!","初始","in","read","format","我们","__","松开","编程","。","str","了","可以","python3","所以","setup","升高","循环","出是","input","高电平","cleanup","管脚","时","/","setmode",",","+","{","里","代码","数字","低电平","main","to","引入","low","第","为","如何","和","usr","import","_","对应","初始化","当前","print","sleep","来看","x3pi","首先","把","结果","需要","后面","bin","设置","会","as","一致","断开","就是","board","主","py","finally","库","没有","变量","进入","这里"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_8","text":"GPIO不止有输入功能，还有输出功能，大家应该经常看到电子设别上的LED灯吧，这就是典型的IO输出控制的设备，我们也来试一试。","text_tokens":["输出","led","灯","功能","来","应该","这","不止","大家","试一试","还有","输入","控制","上","的","吧","电子","gpio","也","io","看到","设备","就是","我们","有","，","。","经常","设别","典型"],"title":"数字输出编程","title_tokens":["输出","数字","编程"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_9","text":"我们将一个LED灯的正极连接到了2号引脚，这是5V电源，用来给LED供电的，不过LED电阻小，为了不至于烧坏，我们最好还是在电路中串联一个电阻来限制电流大小。 接下来，当LED的负极接到GND，也就是电源的0V上时，LED两边会因为有电势差而被点亮；当LED的负极也连接到高电平，也就是5V的时候，会因为两边没有电势差，也就不会被点亮。 这个负极的电平信号我们就用GPIO来输出，所以我们把LED的负极连接到任意的GPIO引脚上，比如38号，将这个引脚设置为输出模式，当输出高电平时，灯就会熄灭，输出低电平，灯就会被点亮。 把这两个动作放到一个循环中，就可以实现闪烁的功能啦。","text_tokens":["输出","实现","信号","功能","不会","来","5v","这是","电平","还是","gpio","模式","至于","电流","上时","啦","；","在","电阻","当","给","号","led","电势","下来","电路","大小","用","比如","两个","不过","时候","这个","接下来","串联","，","电源","负极","接到","38","就","上","电势差","的","用来","到","烧坏","gnd","因为","供电","一个","也","中"," ","2","限制","我们","0v","有","两边","放到","。","将","了","可以","不至于","引脚","所以","灯","接下","循环","高电平","时","这","低电平","熄灭","为","动作","连接","任意","小","把","设置","正极","最好","会","点亮","闪烁","就是","而","没有","被","为了"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_10","text":"快来运行例程试一试吧，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行程序，就可以看到这个LED就会开始闪烁了。 $ sudo python3 simple_input.py","text_tokens":["$","python3","led","实物","按照","input","来","试一试","就","例程","吧","的","快","然后","到","_","开始",".","刚才","这个","连接","x3pi"," ","sudo","simple","设置","看到","会","闪烁","py","程序","，","。","将","完成","了","可以","运行"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_11","text":"simple_out.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 output_pin = 38 # BOARD 编码 38 def main (): # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输出模式，并且初始化为高电平 GPIO . setup ( output_pin , GPIO . OUT , initial = GPIO . HIGH ) # 记录当前管脚状态 curr_value = GPIO . HIGH print ( \"Starting demo now! Press CTRL+C to exit\" ) try : # 间隔1秒时间，循环控制LED灯亮灭 while True : time . sleep ( 1 ) GPIO . output ( output_pin , curr_value ) curr_value ^= GPIO . HIGH finally : GPIO . cleanup () if __name__ == '__main__' : main ()","text_tokens":["输出","true","hobot","#","=","while","c","电平","(","'","def",")","灯亮","秒","gpio","模式","starting","name","1","demo","编码","^","time","high","led","output","硬件","ctrl","press","灭","exit",":","pin","编号","simple","通道","使用","try","，","out","38","if","env","：","value","\"","控制","的","."," ","now","时间","定义","!","初始","__","curr","python3","setup","记录","循环","高电平","cleanup","管脚","/","setmode",",","+","main","to","为","import","usr","_","初始化","当前","print","sleep","bin","设置","as","board","py","并且","间隔","finally","initial","状态"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_12","text":"学习了GPIO的输入与输出功能后，我们就可以做一些自动化的功能了。","text_tokens":["输出","的","功能","就","，","与","。","一些","了","自动化","可以","做","后","gpio","自动","学习","输入","我们"],"title":"数字输入与输出集成","title_tokens":["输出","数字","与","输入","集成"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_13","text":"比如我们同时连接一个按键和LED灯，尝试实现按键被按下，灯被点亮，松开，灯熄灭，这样的功能。","text_tokens":["实现","led","灯","功能","下","比如","按键","的","熄灭","尝试","和","一个","同时","连接","这样","点亮","我们","松开","，","。","按","被"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_14","text":"我们通过这个例程来试一试效果如何？ $ sudo python3 button_led.py 我们来看一下具体的操作，同样的，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。按下按键后，就可以看到LED被点亮了，松开之后，LED就熄灭了。","text_tokens":["$","python3","led","实物","按照","来","一下","按下","试一试","就","例程","的","按键","熄灭","button","然后","到","如何","_","之后","？",".","这个","操作","刚才","sudo","来看"," ","连接","x3pi","设置","后","看到","点亮","我们","py","程序","松开","同样","，","效果","将","具体","完成","。","可以","通过","被","了","运行"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_15","text":"button_led.py #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道： # 36号作为输出，可以点亮一个LED # 38号作为输入，可以接一个按钮 led_pin = 36 # BOARD 编码 36 but_pin = 38 # BOARD 编码 38 # 禁用警告信息 GPIO . setwarnings ( False ) def main (): prev_value = None # Pin Setup: GPIO . setmode ( GPIO . BOARD ) # BOARD pin-numbering scheme GPIO . setup ( led_pin , GPIO . OUT ) # LED pin set as output GPIO . setup ( but_pin , GPIO . IN ) # Button pin set as input # Initial state for LEDs: GPIO . output ( led_pin , GPIO . LOW ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : curr_value = GPIO . input ( but_pin ) if curr_value != prev_value : GPIO . output ( led_pin , curr_value ) prev_value = curr_value print ( \"Outputting {} to Pin {} \" . format ( curr_value , led_pin )) time . sleep ( 1 ) finally : GPIO . cleanup () # cleanup all GPIO if __name__ == '__main__' : main () 基本的配置还是一样的，引入基本的库，然后设置为BOARD模式，然后初始化两个管脚，一个用来读取按键的通断，一个用来控制LED的亮灭，之后只需要判断按键的状态来做出对应的控制LED的动作就可以了。","text_tokens":["输出","true","hobot","#","}","来","=","while","c","还是","(","'","36","button",")","def","all","gpio","state","模式","之后","starting","none","name","接","prev","1","demo","读取","编码","set","time","号","led","output","ctrl","press","but","输入","灭","exit","两个","基本",":","pin","作为","通道","按钮","通断","判断","亮","使用","信息","try","，","out","38","if","env","numbering","：","value","\"","for","就","控制","的","按键","用来","outputting","配置",".","一个","禁用"," ","警告","now","定义","!","初始","in","format","__","。","了","可以","curr","python3","setup","input","cleanup","管脚","/","setmode","setwarnings",",","+","{","main","to","scheme","引入","low","然后","为","只","import","usr","一样","_","初始化","对应","动作","print","sleep","-","需要","bin","设置","点亮","as","board","false","py","做出","finally","库","initial","leds","状态"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/","text":"PWM脉冲宽度调制 我们已经可以用GPIO控制LED灯一闪一闪亮晶晶了，这样只有亮和灭的状态似乎还是太简单了，能不能对LED的亮度进行调整呢？ 当然没问题，这就要用到接下来学习的PWM脉冲宽度调制了。 PWM脉冲宽度调制原理 在GPIO的数字输入和输出模式中，只有高低电平，高电平一般是3.3V或者5V，低电平就是0V，如果我想要一个折中一点的电压怎么办呢？PWM大家了解一下。 PWM，全称是脉冲宽度调制 ， 是一种对模拟信号电平进行数字编码的方法，通过高分辨率计数器，调制出一定占空比的方波，通过这种方式对模拟信号的电平进行编码。 通俗点来说，如果我们有一个10W的灯泡，在一个小时中亮了半个小时，那我们宏观来看，它在这一个小时中的功率就是5W，这样就相当于是它的电压被降低了。而我们还可以通过改变这一个小时中，灯泡被点亮的时长，来等效出不同的电压。 然后，我们把一个小时缩短为很小的一个时间，到达一定的微分程度，表现出来的就是电压的变化，而这个很小的时间，就是PWM频率的倒数，被点亮的时间在这个很小的时间中所占的百分比就叫做占空比。 这里大家也要注意，虽然PWM在尽力呈现出模拟信号的样子，但本质还是数字信号，因为在给定的某一任何时刻，引脚只能高电平或者低电平。 通过PWM技术，可以让数字电路产生类似模拟信号的效果，从而实现类似的无级控制，比如风扇的转速，或者屏幕的亮度，很多都是通过PWM技术实现的调节。 PWM编程 接下来我们就来试一试，通过PWM让一个LED实现不同亮度的变化，也就是我们常见的呼吸灯了。 硬件接线 还是用这个LED灯，一端连接电阻，再到5V高电平的引脚，另外一端，接到33号引脚的PWM接口。 运行示例程序 大家先来运行例程，看看效果如何。 $ sudo python3 simple_pwm.py 我们来看一下实物的操作，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。就可以看到这样的一个呼吸灯的效果了。 代码解析 simple_pwm.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 支持PWM的管脚: 32 and 33, 在使用PWM时，必须确保该管脚没有被其他功能占用 output_pin = 33 def main (): # Pin Setup: # Board pin-numbering scheme GPIO . setmode ( GPIO . BOARD ) # 支持的频率范围： 48KHz ~ 192MHz p = GPIO . PWM ( output_pin , 48000 ) # 初始占空比 25%， 先每0.25秒增加5%占空比，达到100%之后再每0.25秒减少5%占空比 val = 25 incr = 5 p . ChangeDutyCycle ( val ) p . start ( val ) print ( \"PWM running. Press CTRL+C to exit.\" ) try : while True : time . sleep ( 0.25 ) if val >= 100 : incr = - incr if val <= 0 : incr = - incr val += incr p . ChangeDutyCycle ( val ) finally : p . stop () GPIO . cleanup () if __name__ == '__main__' : main () 一样的引入GPIO的库，然后设置管脚编码模式为BOARD，然后创建一个PWM的实例化对象p，同时设置他的频率，之后就可以通过ChangeDutyCycle来改变他的占空比，在循环当中，占空比大于等于100时，就会以5%的梯度减小；当小于等于0时，就会以5%的梯度增大。","text_tokens":["增加","没","c","实例","还是","等效","(","相当于",")","亮晶晶","似乎","秒","100%","在","但","一般","编码","从而","表现","无级","号","output","press","化",":","必须","亮","，","给定","问题","亮度","功率","numbering","一定","程度","\"","48000","pwm","占空比","任何时刻","到","相当","变化","5","？",".","出","呈现出","风扇","!","初始","技术","我们","0v","有","。","通过","屏幕","引脚","setup","接下","循环","脉冲","宽度","确保","支持","p","到达","如何","和","usr","import","小时","转速","来看","x3pi","电压","-","bin","as","就是","而",">","范围","没有","以","hobot","信号","3.3","解析","#","实物","计数器","5v","while","接线","简单","对","大于","方波","很多","gpio","当然","running","操作","要","电阻","看看","~","了解","本质","v","降低","time","都","ctrl","灭","exit","中亮","创建","我","叫做","simple","原理","再","某","类似","呼吸","接口","使用","try","接到","$","中所","占","高分","他","全称","的","一点","如果","呢","占用","折中","方法","也"," ","何时","了","只有","高分辨率","尽力","产生","其他","它","这",",","数字","scheme","引入","0.25","等于","分辨率","一样","print","缩短","来说","同时","设置","会","py","被","这里","状态","true","32","不同","现出","达到","来","一下","=","对象","呈现","那","能","'","例程","def","192mhz","模式","48khz","；","让","很小","梯度","是","程序","val","当","led","倒数","硬件","数字电","下来","已经","start","输入","用","调节","只能","方式","接下来","每","就要","另外","用到","env","进行","：","示例","一种","样子","小于","增大","时间","模拟","怎么办","减小","10w","时刻","将","灯一闪","可以","灯","按照","高电平","分辨","cleanup","/","模拟信号","高","半个","setmode","+","代码","低电平","main","to","虽然","然后","这种","一","0","_","改变","25","连接","百分","任何","宏观","finally","库","运行","输出","实现","100","功能","33","电平","大家","出来","不能","太","之后","name","计数","看到","incr","该","完成","当中","还","时长","通俗","25%","电路","试一试","怎么","比如","pin","这个","stop","sudo","减少","先","一端","if","常见","一闪","晶晶","或者","就","控制","<","数字信号","百分比","因为","一个","中","这样","调制","注意","灯泡","__","数字编码","当于","编程","频率","python3","and","数字电路","管脚","时","想要","5%","学习","为","调整","sleep","刚才","把","微分","点亮","changedutycycle","board","点","效果","辨率","5w"],"title":"PWM脉冲宽度调制","title_tokens":["调制","脉冲","pwm","宽度"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm","text":"我们已经可以用GPIO控制LED灯一闪一闪亮晶晶了，这样只有亮和灭的状态似乎还是太简单了，能不能对LED的亮度进行调整呢？ 当然没问题，这就要用到接下来学习的PWM脉冲宽度调制了。","text_tokens":["led","接下","进行","脉冲","下来","宽度","一闪","已经","这","晶晶","没","还是","学习","灭","控制","pwm","能","用","的","简单","不能","对","亮晶晶","呢","和","似乎","gpio","太","调整","当然","？","这样"," ","调制","接下来","就要","我们","问题","亮","，","。","灯一闪","了","可以","只有","亮度","状态","用到"],"title":"PWM脉冲宽度调制","title_tokens":["调制","脉冲","pwm","宽度"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm_1","text":"在GPIO的数字输入和输出模式中，只有高低电平，高电平一般是3.3V或者5V，低电平就是0V，如果我想要一个折中一点的电压怎么办呢？PWM大家了解一下。 PWM，全称是脉冲宽度调制 ， 是一种对模拟信号电平进行数字编码的方法，通过高分辨率计数器，调制出一定占空比的方波，通过这种方式对模拟信号的电平进行编码。 通俗点来说，如果我们有一个10W的灯泡，在一个小时中亮了半个小时，那我们宏观来看，它在这一个小时中的功率就是5W，这样就相当于是它的电压被降低了。而我们还可以通过改变这一个小时中，灯泡被点亮的时长，来等效出不同的电压。 然后，我们把一个小时缩短为很小的一个时间，到达一定的微分程度，表现出来的就是电压的变化，而这个很小的时间，就是PWM频率的倒数，被点亮的时间在这个很小的时间中所占的百分比就叫做占空比。 这里大家也要注意，虽然PWM在尽力呈现出模拟信号的样子，但本质还是数字信号，因为在给定的某一任何时刻，引脚只能高电平或者低电平。 通过PWM技术，可以让数字电路产生类似模拟信号的效果，从而实现类似的无级控制，比如风扇的转速，或者屏幕的亮度，很多都是通过PWM技术实现的调节。","text_tokens":["输出","实现","信号","3.3","不同","现出","计数器","来","5v","一下","电平","呈现","大家","那","还是","等效","相当于","出来","对","方波","很多","gpio","模式","在","让","很小","但","计数","要","一般","了解","是","编码","从而","表现","无级","本质","v","降低","还","都","倒数","时长","数字电","通俗","电路","输入","怎么","比如","中亮","调节","我","叫做","只能","这个","方式","某","类似","，","给定","亮度","功率","中所","占","进行","高分","一定","程度","或者","pwm","占空比","一种","就","样子","控制","全称","的","一点","如果","任何时刻","呢","数字信号","折中","百分比","因为","相当","变化","方法","一个","？","也","中","出","呈现出","这样"," ","风扇","时间","调制","模拟","怎么办","注意","技术","我们","灯泡","0v","数字编码","有","10w","当于","时刻","何时","。","了","可以","通过","只有","屏幕","高分辨率","引脚","频率","尽力","数字电路","脉冲","宽度","高电平","分辨","产生","它","这","模拟信号","高","想要","半个","数字","低电平","虽然","然后","为","这种","分辨率","到达","一","和","小时","改变","转速","缩短","来说","来看","电压","把","百分","微分","任何","宏观","点亮","就是","而","点","效果","辨率","被","这里","5w"],"title":"PWM脉冲宽度调制原理","title_tokens":["脉冲","宽度","原理","调制","pwm"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm_2","text":"接下来我们就来试一试，通过PWM让一个LED实现不同亮度的变化，也就是我们常见的呼吸灯了。","text_tokens":["实现","led","接下","灯","不同","常见","下来","来","试一试","pwm","就","的","变化","一个","也","让","接下来","我们","就是","呼吸","，","。","了","通过","亮度"],"title":"PWM编程","title_tokens":["pwm","编程"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_1","text":"还是用这个LED灯，一端连接电阻，再到5V高电平的引脚，另外一端，接到33号引脚的PWM接口。","text_tokens":["号","led","灯","33","高电平","5v","电平","还是","pwm","用","的","到","这个","连接","再","电阻","另外","接口","，","。","接到","一端","引脚"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_2","text":"大家先来运行例程，看看效果如何。 $ sudo python3 simple_pwm.py 我们来看一下实物的操作，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。就可以看到这样的一个呼吸灯的效果了。","text_tokens":["$","python3","灯","实物","按照","来","一下","大家","pwm","就","例程","的","然后","到","如何","_",".","操作","刚才","一个","sudo","来看"," ","simple","连接","x3pi","这样","设置","看到","看看","我们","呼吸","先","py","程序","，","效果","。","将","完成","了","可以","运行"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_3","text":"simple_pwm.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 支持PWM的管脚: 32 and 33, 在使用PWM时，必须确保该管脚没有被其他功能占用 output_pin = 33 def main (): # Pin Setup: # Board pin-numbering scheme GPIO . setmode ( GPIO . BOARD ) # 支持的频率范围： 48KHz ~ 192MHz p = GPIO . PWM ( output_pin , 48000 ) # 初始占空比 25%， 先每0.25秒增加5%占空比，达到100%之后再每0.25秒减少5%占空比 val = 25 incr = 5 p . ChangeDutyCycle ( val ) p . start ( val ) print ( \"PWM running. Press CTRL+C to exit.\" ) try : while True : time . sleep ( 0.25 ) if val >= 100 : incr = - incr if val <= 0 : incr = - incr val += incr p . ChangeDutyCycle ( val ) finally : p . stop () GPIO . cleanup () if __name__ == '__main__' : main () 一样的引入GPIO的库，然后设置管脚编码模式为BOARD，然后创建一个PWM的实例化对象p，同时设置他的频率，之后就可以通过ChangeDutyCycle来改变他的占空比，在循环当中，占空比大于等于100时，就会以5%的梯度减小；当小于等于0时，就会以5%的梯度增大。","text_tokens":["true","hobot","100","#","32","功能","33","增加","达到","来","=","对象","while","实例","c","(","'","def",")","大于","192mhz","秒","gpio","100%","模式","48khz","之后","running","name","；","在","梯度","~","incr","val","编码","该","当","time","当中","output","ctrl","start","press","25%","exit","创建","化",":","pin","stop","必须","simple","再","减少","每","先","使用","try","，","if","env","numbering","：","\"","48000","pwm","占空比","他","就","的","<","小于","增大","占用","5",".","一个"," ","!","初始","减小","__","。","可以","通过","频率","python3","setup","and","循环","cleanup","管脚","时","/","确保","其他","setmode",",","5%","+","支持","main","to","scheme","引入","0.25","p","然后","为","等于","import","usr","0","_","一样","改变","25","print","sleep","同时","-","bin","设置","changedutycycle","as","会","board","py",">","范围","没有","finally","库","以","被"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/","text":"UART串口通信 现在的传感器和执行器种类越来越多，需要和控制器传输的数据也是多种多样，只用GPIO来控制和读取的话，只有0和1的状态，未免还是有点麻烦，各种各样的通信方法也层出不穷，UART串口通信绝对是最为常用的一种。 串口通信原理 串行通信是一种通讯协议，也可以简称为串口，可以理解为数据是串成一串的，所以也就只能一位一位的发送，这样传输的速度虽然受到了限制，但是对硬件线路的要求小，只需要一对传输线，一个发送，一个接收，就可以实现双向通信了。 一般情况下，串口模块发送数据的管脚叫做TX，接收数据的管脚叫做RX。发送端发过去的数据，需要对方串口模块的接收端来接收，所以一侧发送端的TX需要连接到另外一侧的接收端RX，接收和发送在两方看来是相对的，所以我们接线的时候，要记住永远是TX引脚连接到RX引脚，接反了数据就传输不了了。 硬件连接 接下来，我们就尝试通过一个串口模块来实现电脑和旭日X3Pi的串口通信。 在接线方面，我们先交叉连接串口模块和旭日X3Pi的RX、TX，同时为了让两边具有相同的参考电平，还要将两者的GND连接到一起，然后再把串口模块连接到电脑就可以了。 运行示例程序 接下来就可以运行串口通信的例程了。 $ sudo python3 test_serial.py 实物接线完成后，在旭日X3派的终端中输入指令启动例程，很快就可以在终端中看到串口向外发送的数据了。 在串口连接的电脑中打开一个串口软件，用来接收和发送数据，设置好端口和波特率，就能看到旭日X3派发过来的数据了。我们再使用电脑的串口软件尝试下发送数据给旭日X3派，输入1234，点击发送，可以看到，X3Pi的终端这边也成功的接收到了数据并且打印出来了。 代码解析 test_serial.py： #!/usr/bin/env python3 import sys import os import time # 导入python串口库 import serial import serial.tools.list_ports def serialTest (): print ( \"List of enabled UART:\" ) os . system ( 'ls /dev/tty[a-zA-Z]*' ) uart_dev = input ( \"请输入需要测试的串口设备名:\" ) baudrate = input ( \"请输入波特率(9600,19200,38400,57600,115200,921600):\" ) try : ser = serial . Serial ( uart_dev , int ( baudrate ), timeout = 1 ) # 1s timeout except Exception as e : print ( \"open serial failed! \\n \" ) print ( ser ) print ( \"Starting demo now! Press CTRL+C to exit\" ) while True : test_data = \"AA55\" write_num = ser . write ( test_data . encode ( 'UTF-8' )) print ( \"Send: \" , test_data ) received_data = ser . read ( write_num ) . decode ( 'UTF-8' ) if received_data : print ( \"Recv: \" , received_data ) time . sleep ( 1 ) ser . close () return 0 if __name__ == '__main__' : if serialTest () != 0 : print ( \"Serial test failed!\" ) else : print ( \"Serial test success!\" ) X3Pi这边如果要使用串口，直接使用serial库就可以了，这里我们先调用系统的库，打印出当前有哪些串口，然后手动输入选择串口的设备名，再输入串口的波特率，就可以进项串口的初始化了，初始化成功之后就会进入循环。 循环中，X3Pi会每隔一秒发送一次AA55，同时还会判断是否接收到了数据，如果接收到了数据也会打印出来。","text_tokens":["调用","c","还是","(","下","of","failed",")","recv","控制器","派发","starting","串成","57600","在","tty","1","过来","data","端发","一般","demo","读取","一串","参考","send","press","端的","越来","传输","名","是否",":","close","]","，","对方","交叉","打开","协议","ports","情况","\"","rx","一对","到","9600",".","出","通信","!","初始","我们","有","两者","。","通过","引脚","接下","循环","和","usr","import","aa55","一位","电脑","x3pi","-","bin","exception","as","旭日","为了","只用","解析","#","实物","dev","while","接线","ls","绝对","传感","对","gpio","的话","请","write","串口","要","具有","time","ctrl","测试","exit","e","时候","[","叫做","原理","再","层出不穷","使用","try","双向","种类","open","$","19200","麻烦","*","成功","还会","的","return","如果","1234","received","except","方法","也"," ","now","限制","通讯","sys","os","了","感器","只有","每隔","传输线","\\","进项","点击","手动",",","数据","指令","print","同时","设置","后","921600","会","py","serial","软件","哪些","x3","传感器","这里","两方","、","一起","状态","true","system","来","=","tx","能","'","例程","def","尝试","一侧","enabled","接收端","多样","让","是","程序","双向通信","好","串行","看来","多种","tools","38400","硬件","下来","简称","终端","输入","线路","只能","接反","永远","接下来","serialtest","判断","int","另外","发送","越来越","方面","现在","env","：","示例","一种","模块","list","gnd","各种","相同","python","常用","多","将","可以","向外","所以","8","/","+","a","代码","未免","main","to","虽然","然后","只","理解","0","_","这边","1s","连接","小","需要","接收","timeout","设备","并且","za","记住","baudrate","库","系统","进入","执行器","运行","实现","打印","受到","电平","端口","不了","出来","success","多种多样","之后","很快","启动","z","name","看到","有点","完成","decode","给","执行","要求","过去","utf","sudo","先","一次","发送数据","num","直接","if","但是","test","n","派","就","控制","用来","else","一秒","一个","中","相对","这样","最为","选择","uart","接收数据","115200","read","__","两边","还要","python3","ser","波特","input","管脚","为","各种各样","初始化","当前","sleep","把","波特率","速度","encode","导入","各样"],"title":"UART异步串口通信","title_tokens":["异步","通信","uart","串口"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#uart","text":"现在的传感器和执行器种类越来越多，需要和控制器传输的数据也是多种多样，只用GPIO来控制和读取的话，只有0和1的状态，未免还是有点麻烦，各种各样的通信方法也层出不穷，UART串口通信绝对是最为常用的一种。","text_tokens":["执行","麻烦","来","还是","控制","一种","越来","未免","的","绝对","数据","传感","传输","感器","只有","和","各种各样","gpio","0","各种","控制器","的话","多种多样","方法","也","多样","最为","串口","状态","需要","1","通信","uart","层出不穷","常用","读取","是","越来越","，","有点","。","多","传感器","执行器","现在","各样","种类","只用","多种"],"title":"UART串口通信","title_tokens":["串口","通信","uart"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_1","text":"串行通信是一种通讯协议，也可以简称为串口，可以理解为数据是串成一串的，所以也就只能一位一位的发送，这样传输的速度虽然受到了限制，但是对硬件线路的要求小，只需要一对传输线，一个发送，一个接收，就可以实现双向通信了。 一般情况下，串口模块发送数据的管脚叫做TX，接收数据的管脚叫做RX。发送端发过去的数据，需要对方串口模块的接收端来接收，所以一侧发送端的TX需要连接到另外一侧的接收端RX，接收和发送在两方看来是相对的，所以我们接线的时候，要记住永远是TX引脚连接到RX引脚，接反了数据就传输不了了。","text_tokens":["实现","受到","来","接线","tx","下","不了","对","一侧","串成","接收端","在","串口","要","端发","一般","是","双向通信","串行","看来","一串","硬件","要求","简称","端的","过去","传输","线路","时候","只能","叫做","接反","永远","另外","发送","，","对方","协议","双向","发送数据","情况","但是","rx","就","一种","的","模块","一对","到","一个","也","相对","这样"," ","通信","接收数据","限制","我们","通讯","。","了","可以","引脚","所以","传输线","管脚","数据","虽然","为","只","和","理解","一位","连接","小","需要","接收","速度","记住","两方"],"title":"串口通信原理","title_tokens":["串口","通信","原理"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_2","text":"接下来，我们就尝试通过一个串口模块来实现电脑和旭日X3Pi的串口通信。 在接线方面，我们先交叉连接串口模块和旭日X3Pi的RX、TX，同时为了让两边具有相同的参考电平，还要将两者的GND连接到一起，然后再把串口模块连接到电脑就可以了。","text_tokens":["实现","接下","下来","来","一起","接线","电平","tx","rx","就","的","模块","尝试","到","然后","gnd","和","相同","一个","同时","电脑","x3pi"," ","在","连接","串口","再","把","通信","让","接下来","我们","先","具有","两边","，","方面","交叉","两者","还要","。","旭日","将","了","可以","通过","参考","为了","、"],"title":"硬件连接","title_tokens":["硬件","连接"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_3","text":"接下来就可以运行串口通信的例程了。 $ sudo python3 test_serial.py 实物接线完成后，在旭日X3派的终端中输入指令启动例程，很快就可以在终端中看到串口向外发送的数据了。 在串口连接的电脑中打开一个串口软件，用来接收和发送数据，设置好端口和波特率，就能看到旭日X3派发过来的数据了。我们再使用电脑的串口软件尝试下发送数据给旭日X3派，输入1234，点击发送，可以看到，X3Pi的终端这边也成功的接收到了数据并且打印出来了。","text_tokens":["$","python3","也","接下","打印","波特","实物","点击","下来","test","接线","终端","端口","派","就","输入","下","成功","能","的","例程","数据","指令","出来","用来","尝试","1234","到","和","_","这边","派发",".","很快","启动","中","一个","sudo","连接"," ","在","电脑","串口","再","x3pi","通信","过来","接下来","接收","后","看到","设置","波特率","我们","py","发送","使用","并且","serial","，","软件","好","。","旭日","x3","了","完成","可以","打开","发送数据","向外","给","运行"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_4","text":"test_serial.py： #!/usr/bin/env python3 import sys import os import time # 导入python串口库 import serial import serial.tools.list_ports def serialTest (): print ( \"List of enabled UART:\" ) os . system ( 'ls /dev/tty[a-zA-Z]*' ) uart_dev = input ( \"请输入需要测试的串口设备名:\" ) baudrate = input ( \"请输入波特率(9600,19200,38400,57600,115200,921600):\" ) try : ser = serial . Serial ( uart_dev , int ( baudrate ), timeout = 1 ) # 1s timeout except Exception as e : print ( \"open serial failed! \\n \" ) print ( ser ) print ( \"Starting demo now! Press CTRL+C to exit\" ) while True : test_data = \"AA55\" write_num = ser . write ( test_data . encode ( 'UTF-8' )) print ( \"Send: \" , test_data ) received_data = ser . read ( write_num ) . decode ( 'UTF-8' ) if received_data : print ( \"Recv: \" , received_data ) time . sleep ( 1 ) ser . close () return 0 if __name__ == '__main__' : if serialTest () != 0 : print ( \"Serial test failed!\" ) else : print ( \"Serial test success!\" ) X3Pi这边如果要使用串口，直接使用serial库就可以了，这里我们先调用系统的库，打印出当前有哪些串口，然后手动输入选择串口的设备名，再输入串口的波特率，就可以进项串口的初始化了，初始化成功之后就会进入循环。 循环中，X3Pi会每隔一秒发送一次AA55，同时还会判断是否接收到了数据，如果接收到了数据也会打印出来。","text_tokens":["true","#","打印","system","=","dev","while","调用","ls","c","(","of","'","failed","def",")","success","出来","recv","请","之后","starting","57600","enabled","z","name","write","串口","tty","1","要","data","demo","time","decode","send","38400","tools","ctrl","press","输入","测试","exit","e","名","是否","[",":","utf","close","再","]","serialtest","判断","int","先","使用","发送","一次","try","，","open","num","直接","if","19200","env","ports","：","test","*","\"","n","就","成功","还会","的","list","return","如果","到","else","received","except","9600",".","一秒","也","中","出"," ","python","now","选择","uart","!","115200","初始","read","我们","__","有","sys","。","os","了","可以","每隔","python3","ser","\\","进项","波特","8","循环","手动","input","/",",","a","+","main","to","数据","然后","import","usr","0","_","这边","当前","初始化","print","sleep","aa55","同时","1s","x3pi","-","需要","接收","bin","波特率","921600","设备","timeout","exception","as","会","py","za","serial","encode","baudrate","导入","库","系统","哪些","进入","这里"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/","text":"SPI同步串行通信 UART串口通信中的数据只能一位一位的传输，如果数据量比较大的时候，传输速率会受到很大影响，此时我们就可以考虑使用同步串行通信了，比如SPI。 SPI通信原理 SPI，全称是Serial Peripheral Interface，也就是串行外设接口，同样是一种通信协议，在很多芯片中都有集成。 相比之前学习的UART串口通信，他多了两根线，其中一个是时钟信号，另一个是设备使能信号，用来控制设备是否启用，所以也产生了主从设备的概念。 MISO ：Master Input Slave Output，主设备数据输入，从设备数据输出； MOSI ：Master Output Slave Input，主设备数据输出，从设备数据输入； SCLK ：Serial Clock，时钟信号，由主设备产生； CS ：Chip Select，从设备使能信号，由主设备控制。 这样，在一组SPI通信的系统中，可以连接多个设备，想要和哪个设备通信时，就使能这个设备，除能其他设备。 我们在开发中常见的SPI设备会有一些传感器，还有电阻屏之类的。 硬件连线 在SPI的通信中，有一个管脚负责发送，另外一个管脚负责接收，如果我们把同一组SPI的发送和接收接到一起，岂不是能接收到自己发送的数据吗？ 我们不妨来试一试，这里使用一个跳线帽直接把19，21两个SPI的通信管脚短接。 运行示例程序 大家来运行例程，看看会发生什么？ $ sudo python3 test_spi.py 在旭日X3派的终端中，输入运行例程的指令，接下来我们就可以看到通过SPI传输并收到的数据啦，相当于是左手传递给右手，自己给自己循环传输数据了。 代码解析 test_spi.py： #!/usr/bin/env python3 import sys import os import time # 导入spidev模块 import spidev def BytesToHex ( Bytes ): return '' . join ([ \"0x %02X \" % x for x in Bytes ]) . strip () def spidevTest (): # 设置spi的bus号（0, 1, 2）和片选(0, 1) spi_bus = input ( \"Please input SPI bus num:\" ) spi_device = input ( \"Please input SPI cs num:\" ) # 创建spidev类的对象以访问基于spidev的Python函数。 spi = spidev . SpiDev () # 打开spi总线句柄 spi . open ( int ( spi_bus ), int ( spi_device )) # 设置 spi 频率为 12MHz spi . max_speed_hz = 12000000 print ( \"Starting demo now! Press CTRL+C to exit\" ) # 发送 [0x55, 0xAA], 接收的数据应该也是 [0x55, 0xAA] try : while True : resp = spi . xfer2 ([ 0x55 , 0xAA ]) print ( BytesToHex ( resp )) time . sleep ( 1 ) except KeyboardInterrupt : spi . close () if __name__ == '__main__' : print ( \"List of enabled spi controllers:\" ) os . system ( 'ls /dev/spidev*' ) spidevTest () 在python中使用spidev这个库，初始化X3Pi的SPI，之后使用xerf2发送数据，同时接收数据，并打印出来，会发现打印出来的就是我们发送的。","text_tokens":["输出","true","信号","解析","#","打印","自己","什么","受到","system","来","=","对象","while","dev","c","ls","大家","还有","21","cs","(","一些","之前","能","相当于","'","例程","of","开发","strip","传感","短接","def",")","出来","slave","很多","传输速率","集成","之后","starting","收到","岂","同步","；","负责","啦","在","bytes","name","串口","enabled","1","电阻","连线","看到","看看","demo","是","程序","%","多个","芯片","19","串行","please","time","从","max","给","都","帽","号","output","硬件","下来","xfer2","ctrl","应该","终端","press","xerf2","interface","试一试","12000000","输入","使能","函数","发现","比如","exit","句柄","x","启用","传输","两个","片选","另","发生","时候","是否","创建","controllers","[","只能","相比","类",":","左手","这个","device","sudo","close","原理","不妨","接下来","]","（","之类","两根","int","另外","接口","发送","使用","时钟","基于","，","try","打开","协议","接到","线","miso","发送数据","open","num","keyboardinterrupt","同","直接","if","$","env","此时","常见","右手","：","test","*","示例","并打印","\"","for","派","peripheral","他","就","一种","控制","吗","传输数据","全称","的","模块","return","list","如果","spi","用来","到","访问","一组","chip","大","except","相当","影响","屏","一个","？","也","中",".","这样"," ","python","now","resp","通信","uart","!","2","12mhz","in","初始","接收数据","我们","__","有","外设","speed","跳线","同样","spidevtest","当于","sys","。","多","os","了","可以","通过","）","哪个","感器","0xaa","其中","所以","python3","02x","频率","接下","由主","循环","0x55","input","产生","master","时","其他","管脚","一起","/","通信协议","想要","0x","并",",","学习","总线","+","代码","spidev","数据","to","main","指令","传递","为","很大","除能","和","usr","import","0","_","初始化","bytestohex","clock","print","sleep","select","一位","bus","同时","连接","x3pi","把","概念","主从","接收","bin","设置","不是","会","设备","就是","主","py","使","serial","sclk","比较","考虑","mosi","系统","导入","速率","传感器","旭日","x3","join","以","库","hz","这里","数据量","运行"],"title":"SPI同步串行通信","title_tokens":["同步","通信","spi","串行"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#spi","text":"UART串口通信中的数据只能一位一位的传输，如果数据量比较大的时候，传输速率会受到很大影响，此时我们就可以考虑使用同步串行通信了，比如SPI。","text_tokens":["此时","受到","就","的","比如","数据","如果","传输","spi","很大","时候","传输速率","大","只能","影响","一位","中","同步","串口","通信","uart","会","我们","使用","，","比较","考虑","串行","速率","。","了","可以","数据量"],"title":"SPI同步串行通信","title_tokens":["同步","通信","spi","串行"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#spi_1","text":"SPI，全称是Serial Peripheral Interface，也就是串行外设接口，同样是一种通信协议，在很多芯片中都有集成。 相比之前学习的UART串口通信，他多了两根线，其中一个是时钟信号，另一个是设备使能信号，用来控制设备是否启用，所以也产生了主从设备的概念。 MISO ：Master Input Slave Output，主设备数据输入，从设备数据输出； MOSI ：Master Output Slave Input，主设备数据输出，从设备数据输入； SCLK ：Serial Clock，时钟信号，由主设备产生； CS ：Chip Select，从设备使能信号，由主设备控制。 这样，在一组SPI通信的系统中，可以连接多个设备，想要和哪个设备通信时，就使能这个设备，除能其他设备。 我们在开发中常见的SPI设备会有一些传感器，还有电阻屏之类的。","text_tokens":["输出","信号","还有","cs","一些","之前","能","开发","传感","slave","很多","集成","；","在","串口","电阻","是","多个","芯片","串行","从","都","output","interface","输入","使能","启用","另","是否","相比","这个","之类","两根","接口","时钟","，","协议","线","miso","常见","：","peripheral","他","就","一种","控制","全称","的","spi","用来","一组","chip","屏","一个","也","中","这样"," ","通信","uart","我们","有","外设","同样","。","多","了","可以","哪个","感器","其中","所以","由主","input","产生","master","时","其他","通信协议","想要","学习","数据","除能","和","clock","select","连接","概念","主从","设备","会","就是","主","使","serial","sclk","mosi","系统","传感器"],"title":"SPI通信原理","title_tokens":["通信","spi","原理"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_1","text":"在SPI的通信中，有一个管脚负责发送，另外一个管脚负责接收，如果我们把同一组SPI的发送和接收接到一起，岂不是能接收到自己发送的数据吗？ 我们不妨来试一试，这里使用一个跳线帽直接把19，21两个SPI的通信管脚短接。","text_tokens":["帽","自己","来","管脚","一起","试一试","21","吗","能","的","数据","如果","短接","spi","两个","到","一组","和","一个","？","岂","中","负责","在"," ","把","不妨","通信","接收","不是","我们","另外","有","发送","使用","跳线","，","直接","19","。","接到","这里","同"],"title":"硬件连线","title_tokens":["硬件","连线"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_2","text":"大家来运行例程，看看会发生什么？ $ sudo python3 test_spi.py 在旭日X3派的终端中，输入运行例程的指令，接下来我们就可以看到通过SPI传输并收到的数据啦，相当于是左手传递给右手，自己给自己循环传输数据了。","text_tokens":["$","python3","接下","循环","自己","什么","右手","test","来","下来","终端","派","大家","并","输入","就","传输数据","相当于","例程","的","数据","指令","spi","传输","传递","发生","_","相当","？",".","收到","中","啦","sudo","左手"," ","在","接下来","看到","会","看看","我们","py","是","，","当于","。","旭日","x3","了","可以","通过","给","运行"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_3","text":"test_spi.py： #!/usr/bin/env python3 import sys import os import time # 导入spidev模块 import spidev def BytesToHex ( Bytes ): return '' . join ([ \"0x %02X \" % x for x in Bytes ]) . strip () def spidevTest (): # 设置spi的bus号（0, 1, 2）和片选(0, 1) spi_bus = input ( \"Please input SPI bus num:\" ) spi_device = input ( \"Please input SPI cs num:\" ) # 创建spidev类的对象以访问基于spidev的Python函数。 spi = spidev . SpiDev () # 打开spi总线句柄 spi . open ( int ( spi_bus ), int ( spi_device )) # 设置 spi 频率为 12MHz spi . max_speed_hz = 12000000 print ( \"Starting demo now! Press CTRL+C to exit\" ) # 发送 [0x55, 0xAA], 接收的数据应该也是 [0x55, 0xAA] try : while True : resp = spi . xfer2 ([ 0x55 , 0xAA ]) print ( BytesToHex ( resp )) time . sleep ( 1 ) except KeyboardInterrupt : spi . close () if __name__ == '__main__' : print ( \"List of enabled spi controllers:\" ) os . system ( 'ls /dev/spidev*' ) spidevTest () 在python中使用spidev这个库，初始化X3Pi的SPI，之后使用xerf2发送数据，同时接收数据，并打印出来，会发现打印出来的就是我们发送的。","text_tokens":["true","#","打印","system","=","对象","while","dev","c","ls","(","cs","of","'","strip","def",")","出来","之后","starting","bytes","name","enabled","在","1","demo","是","%","please","time","max","号","xfer2","ctrl","应该","press","xerf2","12000000","函数","发现","exit","句柄","x","片选","controllers","创建","[","类",":","device","这个","close","]","（","int","发送","使用","基于","try","，","打开","发送数据","open","num","keyboardinterrupt","if","env","：","test","*","并打印","\"","for","的","模块","return","list","spi","访问","except",".","也","中"," ","python","now","resp","2","接收数据","!","12mhz","初始","in","我们","__","speed","spidevtest","sys","。","os","）","0xaa","频率","python3","02x","0x55","input","0x","/",",","总线","+","spidev","数据","to","main","为","和","import","usr","0","_","初始化","bytestohex","print","sleep","bus","同时","x3pi","接收","bin","设置","会","就是","py","join","导入","库","以","hz"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/","text":"I2C同步串行通信 SPI通信虽然功能更强大了，但是需要4根线做连接，还是有点复杂，接下来I2C的连线就简单很多了。 I2C通信原理 I2C也是一种常用的串行通信方式，和SPI一样可以连接多个设备，重点是它只需要两根线就可以完成。 不过他的两根线和UART不同，不全是传输数据用的，I2C中的一根线是时钟线，另一根才是传输数据的，这根线可以双向的传输数据。 I2C通信中可以有多个主设备或者从设备，只要能通过地址找到彼此的位置即可。 主器件用于启动总线传送数据，并产生时钟给各种从机，此时任何被寻址的器件均被认为是从机。在总线上主和从、发和收的关系不是恒定的，而取决于此时数据传送方向。如果主机要发送数据给从机，主机首先得找到从机的地址，然后主动发送数据过去，最后也得由主机终止数据传送；如果主机要接收从机的数据，同样由主机得找到从机的地址，然后主机接收从器件发送的数据，最后由主机终止接收过程。 因为I2C的特性，使用I2C的设备比SPI多很多，比如图中的紫外线传感器，陀螺仪之类的，都是使用I2C进行通信的。 硬件接线 我们找来一个常用的陀螺仪模块，按照这里的接线图连接到旭日X3派的40PIN接口上，这里除了I2C通信的两根线之外，另外两根是电源线，负责给这个模块供电的，让它正常工作起来。 运行示例程序 接线是挺简单的，我们继续来运行这个例程，看下能否收到数据。 $ sudo python3 mpu6500_i2c.py 在终端启动例程，很快就可以看到通过I2C读取到了大量传感器的数据，这些就是陀螺仪模块的原始数据，收到之后我们就可以进行结算处理啦，这就是我们后续机器人开发的需要解决的问题了。 代码解析 mpu6500_i2c.py： #!/usr/bin/env python3 import smbus , time def MPU6050_start (): # alter sample rate (stability) samp_rate_div = 0 # sample rate = 8 kHz/(1+samp_rate_div) bus . write_byte_data ( MPU6050_ADDR , SMPLRT_DIV , samp_rate_div ) time . sleep ( 0.1 ) # reset all sensors bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x00 ) time . sleep ( 0.1 ) # power management and crystal settings bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x01 ) time . sleep ( 0.1 ) #Write to Configuration register bus . write_byte_data ( MPU6050_ADDR , CONFIG , 0 ) time . sleep ( 0.1 ) #Write to Gyro configuration register gyro_config_sel = [ 0b00000 , 0b010000 , 0b10000 , 0b11000 ] # byte registers gyro_config_vals = [ 250.0 , 500.0 , 1000.0 , 2000.0 ] # degrees/sec gyro_indx = 0 bus . write_byte_data ( MPU6050_ADDR , GYRO_CONFIG , int ( gyro_config_sel [ gyro_indx ])) time . sleep ( 0.1 ) #Write to Accel configuration register accel_config_sel = [ 0b00000 , 0b01000 , 0b10000 , 0b11000 ] # byte registers accel_config_vals = [ 2.0 , 4.0 , 8.0 , 16.0 ] # g (g = 9.81 m/s^2) accel_indx = 0 bus . write_byte_data ( MPU6050_ADDR , ACCEL_CONFIG , int ( accel_config_sel [ accel_indx ])) time . sleep ( 0.1 ) # interrupt register (related to overflow of data [FIFO]) bus . write_byte_data ( MPU6050_ADDR , INT_ENABLE , 1 ) time . sleep ( 0.1 ) return gyro_config_vals [ gyro_indx ], accel_config_vals [ accel_indx ] def read_raw_bits ( register ): # read accel and gyro values high = bus . read_byte_data ( MPU6050_ADDR , register ) low = bus . read_byte_data ( MPU6050_ADDR , register + 1 ) # combine higha and low for unsigned bit value value = (( high << 8 ) | low ) # convert to +- value if ( value > 32768 ): value -= 65536 return value def mpu6050_conv (): # raw acceleration bits acc_x = read_raw_bits ( ACCEL_XOUT_H ) acc_y = read_raw_bits ( ACCEL_YOUT_H ) acc_z = read_raw_bits ( ACCEL_ZOUT_H ) # raw temp bits ## t_val = read_raw_bits(TEMP_OUT_H) # uncomment to read temp # raw gyroscope bits gyro_x = read_raw_bits ( GYRO_XOUT_H ) gyro_y = read_raw_bits ( GYRO_YOUT_H ) gyro_z = read_raw_bits ( GYRO_ZOUT_H ) #convert to acceleration in g and gyro dps a_x = ( acc_x / ( 2.0 ** 15.0 )) * accel_sens a_y = ( acc_y / ( 2.0 ** 15.0 )) * accel_sens a_z = ( acc_z / ( 2.0 ** 15.0 )) * accel_sens w_x = ( gyro_x / ( 2.0 ** 15.0 )) * gyro_sens w_y = ( gyro_y / ( 2.0 ** 15.0 )) * gyro_sens w_z = ( gyro_z / ( 2.0 ** 15.0 )) * gyro_sens ## temp = ((t_val)/333.87)+21.0 # uncomment and add below in return return a_x , a_y , a_z , w_x , w_y , w_z # MPU6050 Registers MPU6050_ADDR = 0x68 PWR_MGMT_1 = 0x6B SMPLRT_DIV = 0x19 CONFIG = 0x1A GYRO_CONFIG = 0x1B ACCEL_CONFIG = 0x1C INT_ENABLE = 0x38 ACCEL_XOUT_H = 0x3B ACCEL_YOUT_H = 0x3D ACCEL_ZOUT_H = 0x3F TEMP_OUT_H = 0x41 GYRO_XOUT_H = 0x43 GYRO_YOUT_H = 0x45 GYRO_ZOUT_H = 0x47 # start I2C driver bus = smbus . SMBus ( 0 ) # start comm with i2c bus gyro_sens , accel_sens = MPU6050_start () # instantiate gyro/accel while True : print ( mpu6050_conv ()) 这里我们看一下怎么使用I2C和陀螺仪通信来获取信息。主体上有三个大的函数，而这三个函数的功能都比较单一，第一个函数通过给陀螺仪发送数据来进行初始化的设置，比如配置陀螺仪的电源寄存器，加速度寄存器等；第二个函数则是从陀螺仪读取数据；第三个函数则是将读取到的函数进行计算，从而变成真正的加速度等信息。 具体的读写操作可以看下面的代码片段，也是直接调用函数指定地址和数据就好了。 这里我们也能看到几个关键的参数，比如陀螺仪MPU6050的地址是0x68，通过这个地址才能确认到陀螺仪的存在，然后进行初始化，初始化完成之后进入循环，不停的将数据打印出来。","text_tokens":["reset","conv","0x1a","调用","彼此","加速度","还是","0b10000","(","下","of","40pin",")","解决","dps","是从","同步","在","1","连线","data","不全是","smbus","读取","等","从而","^","做","div","单一","后续","0x3f","传输","不过",":","]","0x47","，","电源","0b00000","问题","看","value","获取信息","0.1","主机","传输数据","vals","陀螺","几个","500.0","sample","khz","spi","到","位置","|",".","继续","通信","2","!","初始","unsigned","333.87","overflow","我们","有","。","从机","通过","t","0x45","接下","0x38","indx","获取","fifo","driver","指定","循环","sens","均","并","i2c","xout","结算","和","usr","import","addr","-","终止","instantiate","sec","陀螺仪","bin","就是","而","寄存器",">","旭日","寻址","第三个","地址","解析","#","convert","while","接线","0b010000","恒定","读写","简单","传感","all","很多","操作","负责","write","degrees","mpu6500","要","第一个","接线图","time","0x43","都","二个","##","传送数据","0x01","crystal","0b11000","真正","acceleration","65536","[","4","rate","上主","原理","21.0","yout","存在","之类","接口","使用","信息","片段","8.0","线","双向","读取数据","$","加速","此时","add","*","他","传送","250.0","取决于","强大","的","return","如果","with","mgmt","机器人","sensors","大","供电","management","也","线图"," ","不停","m","zout","同样","了","感器","产生","它","这",",","外线","2.0","比","器件","0x3b","数据","电源线","一样","print","smplrt","bus","首先","mpu6050","s","设置","pwr","py","找","x3","传感器","被","挺","认为","这里","、","true","不同","来","=","一下","图中","gyroscope","能","例程","y","def","下面","config","0x41","收到","机器","啦","；","起来","最后","让","related","h","是","程序","val","0x19","好","串行","temp","从","high","之外","uncomment","硬件","下来","start","终端","power","sel","函数","找到","0x00","用","方向","得","关系","higha","方式","这根","根线","接下来","除了","两根","int","另外","发送","用于","原始数据","发和收","out","env","byte","进行","：","示例","for","accel","一种","g","模块","第三","1000.0","各种","一根","configuration","正常","读写操作","常用","三个","即可","多","将","可以","settings","+-","stability","8","按照","/","能否","+","a","w","代码","to","虽然","然后","只","0x1c","0","_","16.0","连接","需要","任何","接收","设备","主","紫外线","进入","enable","运行","打印","功能","特性","bits","开发","出来","raw","紫外","之后","很快","启动","z","9.81","0x1b","combine","看到","register","原始","多个","有点","完成","才","主动","更","给","gyro","调用函数","过去","怎么","第一","才能","比如","x","另","复杂","这个","bit","sudo","参数","时钟","comm","32768","发送数据","samp","if","直接","过程","取决","但是","计算","或者","派","就","上","registers","<","变成","15.0","工作","因为","配置","一个","大量","处理","中","uart","acc","第二","in","read","重点","0x6b","关键","python3","0x68","寄存","and","确认","总线","0b01000","low","0x3d","第二个","机","interrupt","初始化","主体","则","sleep","取信","只要","alter","由","2000.0","不是","values","速度","below","4.0","比较","具体","这些"],"title":"I2C同步串行通信","title_tokens":["i2c","同步","通信","串行"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#i2c","text":"SPI通信虽然功能更强大了，但是需要4根线做连接，还是有点复杂，接下来I2C的连线就简单很多了。","text_tokens":["接下","功能","但是","下来","还是","就","强大","的","i2c","虽然","简单","spi","很多","4","复杂","连接","根线","需要","通信","接下来","连线","，","有点","。","了","做","更"],"title":"I2C同步串行通信","title_tokens":["i2c","同步","通信","串行"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#i2c_1","text":"I2C也是一种常用的串行通信方式，和SPI一样可以连接多个设备，重点是它只需要两根线就可以完成。 不过他的两根线和UART不同，不全是传输数据用的，I2C中的一根线是时钟线，另一根才是传输数据的，这根线可以双向的传输数据。 I2C通信中可以有多个主设备或者从设备，只要能通过地址找到彼此的位置即可。 主器件用于启动总线传送数据，并产生时钟给各种从机，此时任何被寻址的器件均被认为是从机。在总线上主和从、发和收的关系不是恒定的，而取决于此时数据传送方向。如果主机要发送数据给从机，主机首先得找到从机的地址，然后主动发送数据过去，最后也得由主机终止数据传送；如果主机要接收从机的数据，同样由主机得找到从机的地址，然后主机接收从器件发送的数据，最后由主机终止接收过程。 因为I2C的特性，使用I2C的设备比SPI多很多，比如图中的紫外线传感器，陀螺仪之类的，都是使用I2C进行通信的。","text_tokens":["不同","特性","彼此","图中","恒定","能","传感","很多","紫外","是从","启动","；","在","最后","要","不全是","是","多个","串行","完成","从","才","主动","给","都","过去","找到","用","传送数据","比如","传输","方向","不过","另","得","关系","上主","方式","这根","之类","两根","发送","时钟","使用","用于","，","发和收","线","双向","发送数据","过程","此时","取决","进行","或者","他","就","一种","传输数据","传送","主机","取决于","的","陀螺","如果","spi","位置","各种","一根","因为","也","中"," ","通信","uart","重点","常用","有","即可","同样","。","多","可以","通过","从机","感器","产生","它","均","并","总线","外线","比","器件","数据","i2c","然后","只","机","和","一样","只要","连接","首先","终止","由","需要","陀螺仪","任何","接收","不是","设备","主","而","紫外线","传感器","寻址","被","地址","认为","、"],"title":"I2C通信原理","title_tokens":["i2c","通信","原理"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_1","text":"我们找来一个常用的陀螺仪模块，按照这里的接线图连接到旭日X3派的40PIN接口上，这里除了I2C通信的两根线之外，另外两根是电源线，负责给这个模块供电的，让它正常工作起来。","text_tokens":["之外","按照","来","它","接线","派","上","的","模块","陀螺","i2c","40pin","到","工作","电源线","供电","一个","这个","负责","线图","连接","起来","陀螺仪","通信","让","正常","除了","两根","我们","接线图","常用","接口","另外","是","，","电源","找","。","旭日","x3","线","这里","给"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_2","text":"接线是挺简单的，我们继续来运行这个例程，看下能否收到数据。 $ sudo python3 mpu6500_i2c.py 在终端启动例程，很快就可以看到通过I2C读取到了大量传感器的数据，这些就是陀螺仪模块的原始数据，收到之后我们就可以进行结算处理啦，这就是我们后续机器人开发的需要解决的问题了。","text_tokens":["$","python3","机器","看","进行","来","这","接线","终端","能否","就","下","的","例程","数据","陀螺","i2c","模块","简单","传感","后续","开发","到","结算","解决","_","机器人","之后","收到",".","这个","启动","很快","继续","sudo"," ","在","大量","处理","啦","需要","陀螺仪","mpu6500","看到","这些","我们","就是","问题","py","读取","是","原始","原始数据","，","。","传感器","了","可以","通过","挺","感器","运行"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_3","text":"mpu6500_i2c.py： #!/usr/bin/env python3 import smbus , time def MPU6050_start (): # alter sample rate (stability) samp_rate_div = 0 # sample rate = 8 kHz/(1+samp_rate_div) bus . write_byte_data ( MPU6050_ADDR , SMPLRT_DIV , samp_rate_div ) time . sleep ( 0.1 ) # reset all sensors bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x00 ) time . sleep ( 0.1 ) # power management and crystal settings bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x01 ) time . sleep ( 0.1 ) #Write to Configuration register bus . write_byte_data ( MPU6050_ADDR , CONFIG , 0 ) time . sleep ( 0.1 ) #Write to Gyro configuration register gyro_config_sel = [ 0b00000 , 0b010000 , 0b10000 , 0b11000 ] # byte registers gyro_config_vals = [ 250.0 , 500.0 , 1000.0 , 2000.0 ] # degrees/sec gyro_indx = 0 bus . write_byte_data ( MPU6050_ADDR , GYRO_CONFIG , int ( gyro_config_sel [ gyro_indx ])) time . sleep ( 0.1 ) #Write to Accel configuration register accel_config_sel = [ 0b00000 , 0b01000 , 0b10000 , 0b11000 ] # byte registers accel_config_vals = [ 2.0 , 4.0 , 8.0 , 16.0 ] # g (g = 9.81 m/s^2) accel_indx = 0 bus . write_byte_data ( MPU6050_ADDR , ACCEL_CONFIG , int ( accel_config_sel [ accel_indx ])) time . sleep ( 0.1 ) # interrupt register (related to overflow of data [FIFO]) bus . write_byte_data ( MPU6050_ADDR , INT_ENABLE , 1 ) time . sleep ( 0.1 ) return gyro_config_vals [ gyro_indx ], accel_config_vals [ accel_indx ] def read_raw_bits ( register ): # read accel and gyro values high = bus . read_byte_data ( MPU6050_ADDR , register ) low = bus . read_byte_data ( MPU6050_ADDR , register + 1 ) # combine higha and low for unsigned bit value value = (( high << 8 ) | low ) # convert to +- value if ( value > 32768 ): value -= 65536 return value def mpu6050_conv (): # raw acceleration bits acc_x = read_raw_bits ( ACCEL_XOUT_H ) acc_y = read_raw_bits ( ACCEL_YOUT_H ) acc_z = read_raw_bits ( ACCEL_ZOUT_H ) # raw temp bits ## t_val = read_raw_bits(TEMP_OUT_H) # uncomment to read temp # raw gyroscope bits gyro_x = read_raw_bits ( GYRO_XOUT_H ) gyro_y = read_raw_bits ( GYRO_YOUT_H ) gyro_z = read_raw_bits ( GYRO_ZOUT_H ) #convert to acceleration in g and gyro dps a_x = ( acc_x / ( 2.0 ** 15.0 )) * accel_sens a_y = ( acc_y / ( 2.0 ** 15.0 )) * accel_sens a_z = ( acc_z / ( 2.0 ** 15.0 )) * accel_sens w_x = ( gyro_x / ( 2.0 ** 15.0 )) * gyro_sens w_y = ( gyro_y / ( 2.0 ** 15.0 )) * gyro_sens w_z = ( gyro_z / ( 2.0 ** 15.0 )) * gyro_sens ## temp = ((t_val)/333.87)+21.0 # uncomment and add below in return return a_x , a_y , a_z , w_x , w_y , w_z # MPU6050 Registers MPU6050_ADDR = 0x68 PWR_MGMT_1 = 0x6B SMPLRT_DIV = 0x19 CONFIG = 0x1A GYRO_CONFIG = 0x1B ACCEL_CONFIG = 0x1C INT_ENABLE = 0x38 ACCEL_XOUT_H = 0x3B ACCEL_YOUT_H = 0x3D ACCEL_ZOUT_H = 0x3F TEMP_OUT_H = 0x41 GYRO_XOUT_H = 0x43 GYRO_YOUT_H = 0x45 GYRO_ZOUT_H = 0x47 # start I2C driver bus = smbus . SMBus ( 0 ) # start comm with i2c bus gyro_sens , accel_sens = MPU6050_start () # instantiate gyro/accel while True : print ( mpu6050_conv ()) 这里我们看一下怎么使用I2C和陀螺仪通信来获取信息。主体上有三个大的函数，而这三个函数的功能都比较单一，第一个函数通过给陀螺仪发送数据来进行初始化的设置，比如配置陀螺仪的电源寄存器，加速度寄存器等；第二个函数则是从陀螺仪读取数据；第三个函数则是将读取到的函数进行计算，从而变成真正的加速度等信息。 具体的读写操作可以看下面的代码片段，也是直接调用函数指定地址和数据就好了。 这里我们也能看到几个关键的参数，比如陀螺仪MPU6050的地址是0x68，通过这个地址才能确认到陀螺仪的存在，然后进行初始化，初始化完成之后进入循环，不停的将数据打印出来。","text_tokens":["true","#","reset","功能","convert","conv","0x1a","打印","来","=","一下","bits","while","调用","加速度","0b10000","0b010000","(","gyroscope","能","of","读写","y","def",")","出来","all","下面","config","raw","dps","是从","之后","0x41","操作","z","；","write","degrees","9.81","0x1b","1","combine","mpu6500","第一个","related","data","h","smbus","看到","读取","register","是","val","0x19","等","^","从而","好","完成","temp","time","0x43","循环","给","都","high","二个","div","gyro","uncomment","调用函数","start","单一","power","sel","函数","怎么","第一","才能","##","0x00","比如","0x01","crystal","x","0x3f","0b11000","真正","acceleration","65536","[","rate","higha",":","这个","bit","参数","21.0","yout","存在","]","int","0x47","发送","使用","信息","comm","0b00000","，","8.0","32768","电源","片段","发送数据","读取数据","out","samp","if","直接","env","加速","byte","add","看","进行","：","value","*","获取信息","0.1","计算","for","accel","就","250.0","上","registers","g","vals","的","陀螺","return","500.0","sample","khz","<","1000.0","第三","变成","几个","|","15.0","到","with","mgmt","sensors","大","配置",".","management","一个","也","configuration"," ","不停","2","acc","!","通信","初始","m","read","unsigned","zout","in","overflow","333.87","我们","0x6b","读写操作","有","三个","第二","。","将","了","可以","通过","settings","+-","t","关键","0x45","python3","0x68","寄存","0x38","and","stability","8","indx","fifo","driver","获取","指定","sens","确认","/","这",",","+","a","w","2.0","代码","0b01000","0x3b","数据","to","i2c","xout","low","0x3d","第二个","然后","0x1c","和","usr","import","0","_","interrupt","16.0","主体","初始化","addr","则","sleep","print","取信","smplrt","bus","alter","-","instantiate","sec","陀螺仪","mpu6050","s","bin","2000.0","设置","pwr","values","速度","below","py","而",">","寄存器","4.0","比较","具体","进入","第三个","地址","enable","这里"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/","text":"USB外设驱动 在电脑上，我们最常用的接口之一，应该就是USB了，相比之前讲到的外设通信方法，USB更加复杂，速度也更快。 USB通信原理 USB不仅是我们生活中最常用的一种接口，也是一种串行总线的通讯方式。他类似于UART，有两根线用来传输数据。 而且USB还有专门的接口规范，比如我们常听说的USB Type A、Type C。例如这里列出来的USB口，打印机常用的B口，手机上用的C口，都是标准的USB接口。 USB的接口规范，使用广泛，很多成熟的外设都是采用的USB接口。 摄像头驱动 比如USB摄像头。 硬件接线 这里我们使用一个USB摄像头，通过一个相机驱动把它跑起来，并且可以看到图像数据。 方法有很多中，TogetherROS兼容ROS2的所有功能，那我们就先试试ROS2中的标准方法，在旭日X3PI上直接安装一个usb_cam功能包。 ROS2相机驱动 安装与配置 首先安装ROS2的相机驱动包： # 安装功能包 $ sudo apt install ros-foxy-usb-cam 安装好之后，为了让系统能够找到该功能包，需要进入tros的目录，建立对应的软连接。 # 建立软连接 $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 因为旭日X3Pi可以连接csi摄像头，设备名占用了video0-7，所以外接的USB摄像头会被自动分配到video8，我们需要在ROS2的功能包中修改一下设备号。 # 修改配置文件 $ cd /opt/tros/share/usb_cam/config $ sudo vim params.yaml 然后给这个设备添加权限，最后再设置TogetherROS的环境变量就可以使用啦。 # 添加可执行权限 $ sudo chmod 777 /dev/video8 # 添加环境变量 $ source /opt/tros/local_setup.bash 运行相机驱动 我们来试一试。 $ ros2 launch usb_cam demo_launch.py #启动相机，X3Pi $ ros2 run rqt_image_view rqt_image_view #查看图像，PC 这里直接在X3Pi中启动usb_cam的launch文件，然后再启动一个能和他通信的Ubuntu桌面系统，打开rqt_image_view，选择对应的话题，就可以看到图像了。也就是说明我们成功的用TROS驱动了这个USB摄像头。 TogetherROS相机驱动 除此之外，TogetherROS中也提供了USB摄像头的驱动节点，连接摄像头之后，直接设置设备的权限和TogetherROS的环境变量就可以使用了。 $ source /opt/tros/local_setup.bash $ sudo chmod 777 /dev/video8 $ ros2 launch hobot_usb_cam hobot_usb_cam.launch.py 之后可以再打开一个新的终端，输入对应的指令，然后启动websocket这个节点，就可以把image这个话题的数据发送到网页了。 $ source /opt/tros/local_setup.bash $ cd /opt/tros/lib/websocket/webservice $ sudo chmod +x ./sbin/nginx $ sudo ./sbin/nginx -p . $ ros2 run websocket websocket --ros-args -p image_topic: = /image -p image_type: = mjpeg -p only_show_image: = true 这时我们直接打开在通一个局域网下的浏览器，输入X3Pi的地址，就可以进去到一个网页，点击左上方web端展示即可看到USB摄像头的实时画面。 激光雷达驱动 移动机器人中常用的激光雷达大多也是USB借口的，比如这款rplidar。 安装与配置 如果我们想把它跑起来，同样需要一个驱动包，大家可以在工作空间中下载雷达的驱动包，然后进行编译。编译完成后，添加环境变量就可以使用这个功能包了。 # 下载源码 $ mkdir -p catkin_ws/src $ cd ~/catkin_ws/src $ git clone -b ros2 https://github.com/slamtec/rplidar_ros.git # 编译 $ cd ~/catkin_ws $ colcon build --symlink-install # 添加环境变量 $ source ~/catkin_ws/install/setup.bash # 添加权限 $ sudo chmod 777 /dev/ttyUSB0 还要记得给激光雷达的USB口设置对应的权限。 运行激光雷达驱动 驱动安装好之后，就可以启动雷达了。 在旭日X3派的终端中，运行启动激光雷达的launch文件。 $ ros2 launch rplidar_ros2 rplidar_launch.py #启动雷达，X3PI $ ros2 run rviz2 rviz2 #查看点云，PC 启动成功后，我们在电脑端的Ubuntu系统中，在ros2环境下打开rviz2，然后将世界坐标系改为laser，然后添加LaserScan的可视化选项，并且把Reliability Policy的选项改为System Default，此时就可以看到激光雷达的点云数据了。","text_tokens":["rviz2","环境","可视","c","video0","还有","下","之前","mjpeg","规范","type","也就是说","create","再启动","在","上方","听说","demo","更加","常","号","左上方","端的","于","文件","opt","传输","名","foxy",":","usb","列出来","采用","话题","包中","送到","git","，","发送到","浏览器","打开","口","动机","bash","传输数据","建立","到","成熟","跑",".","通信","权限","image","我们","有","源码","。","通过","安装","激光","togetherros","setup","局域网","show","印机","坐标","src","讲到","新","环境变","环境变量","p","编译","上用","和","symlink","tros","这时","电脑","x3pi","-","桌面","改为","就是","旭日","地址","为了","左上","install","hobot","#","提供","dev","接线","不仅","局域","soft","很多","端","~","串行总线","video8","都","兼容","websocket","例如","原理","再","colcon","类似","摄像","接口","使用","线","$","此时","cd","移动","ttyusb0","他","成功","的","如果","webservice","占用","share","机器人","方法","也"," ","驱动","世界","通讯","外设","同样","与","了","reliability","clone","最","点击","它","像头","数据","指令","软","实时","mkdir","对应","github","首先","网页","b","设置","后","会","能够","default","修改","py","配置文件","除此之外","移动机器人","x3","sbin","被","这里","、","true","local","system","来","一下","=","那","目录","能","摄像头","ros2","config","机器","啦","起来","最后","https","让","是","好","串行","进去","之外","硬件","应该","终端","launch","输入","找到","用","yaml","相比","空间","查看","laserscan","方式","params","chmod","topic","两根","发送","相机","rplidar","画面","添加","view","进行","：","一种","可","csi","除此","下载","常用","cam","浏览","即可","lib","包","将","就是说","可以","自动","记得","明","所以","ubuntu","777","展示","/","通","+","a","包了","web","然后","广泛","_","连接","生活","需要","apt","设备","--","并且","laser","系统","变量","进入","选项","ros","运行","打印","功能","大多","vim","大家","only","policy","出来","快","激光雷达","之后","启动","看到","借口","slamtec","该","7","试试","完成","更","给","标准","执行","试一试","pc","比如","x","之一","坐标系","点云","而且","复杂","外接","这个","sudo","先","打印机","直接","派","就","上","手机","用来","工作","catkin","可视化","所有","因为","nginx","配置","这款","想","一个","中","link","选择","uart","com","专门","节点","build","分配","rqt","还要","python3","总线","图像","列出","args","source","雷达","ws","把","速度","run"],"title":"USB外设驱动","title_tokens":["驱动","usb","外设"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#usb","text":"在电脑上，我们最常用的接口之一，应该就是USB了，相比之前讲到的外设通信方法，USB更加复杂，速度也更快。","text_tokens":["最","应该","之前","上","的","讲到","快","之一","复杂","相比","方法","也","usb","电脑","在","通信","就是","我们","常用","接口","速度","外设","更加","，","。","了","更"],"title":"USB外设驱动","title_tokens":["驱动","usb","外设"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#usb_1","text":"USB不仅是我们生活中最常用的一种接口，也是一种串行总线的通讯方式。他类似于UART，有两根线用来传输数据。 而且USB还有专门的接口规范，比如我们常听说的USB Type A、Type C。例如这里列出来的USB口，打印机常用的B口，手机上用的C口，都是标准的USB接口。 USB的接口规范，使用广泛，很多成熟的外设都是采用的USB接口。","text_tokens":["标准","打印","最","c","印机","不仅","还有","总线","他","一种","于","传输数据","a","例如","的","比如","数据","列出","规范","出来","传输","用来","type","手机","上用","很多","广泛","而且","成熟","也","中","usb","方式"," ","列出来","生活","采用","b","uart","专门","类似","我们","两根","常用","接口","有","通讯","是","听说","使用","外设","，","串行总线","串行","。","常","线","打印机","口","这里","、","都"],"title":"USB通信原理","title_tokens":["usb","通信","原理"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_1","text":"比如USB摄像头。","text_tokens":["比如","usb","摄像头","。","像头","摄像"],"title":"摄像头驱动","title_tokens":["驱动","像头","摄像","摄像头"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_2","text":"这里我们使用一个USB摄像头，通过一个相机驱动把它跑起来，并且可以看到图像数据。 方法有很多中，TogetherROS兼容ROS2的所有功能，那我们就先试试ROS2中的标准方法，在旭日X3PI上直接安装一个usb_cam功能包。","text_tokens":["togetherros","标准","功能","它","兼容","那","像头","就","图像","上","的","数据","摄像头","很多","ros2","_","跑","所有","方法","一个","中","usb","起来","x3pi"," ","在","把","驱动","看到","摄像","我们","并且","使用","有","先","cam","，","相机","。","试试","旭日","包","可以","通过","安装","这里","直接"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#ros2","text":"","text_tokens":[],"title":"ROS2相机驱动","title_tokens":["驱动","相机","ros2"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_3","text":"首先安装ROS2的相机驱动包： # 安装功能包 $ sudo apt install ros-foxy-usb-cam 安装好之后，为了让系统能够找到该功能包，需要进入tros的目录，建立对应的软连接。 # 建立软连接 $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 因为旭日X3Pi可以连接csi摄像头，设备名占用了video0-7，所以外接的USB摄像头会被自动分配到video8，我们需要在ROS2的功能包中修改一下设备号。 # 修改配置文件 $ cd /opt/tros/share/usb_cam/config $ sudo vim params.yaml 然后给这个设备添加权限，最后再设置TogetherROS的环境变量就可以使用啦。 # 添加可执行权限 $ sudo chmod 777 /dev/video8 # 添加环境变量 $ source /opt/tros/local_setup.bash","text_tokens":["install","#","功能","local","环境","一下","dev","vim","video0","目录","soft","摄像头","ros2","config","create","之后","啦","在","最后","让","该","好","7","video8","给","号","执行","找到","文件","opt","yaml","名","外接","foxy","这个","usb","sudo","params","再","chmod","包中","摄像","使用","相机","，","添加","$","：","cd","bash","就","的","可","建立","到","占用","share","因为","配置",".","link"," ","驱动","权限","csi","我们","cam","分配","。","包","了","可以","安装","自动","python3","所以","togetherros","setup","777","/","像头","软","环境变","环境变量","然后","source","tros","对应","_","连接","x3pi","-","首先","需要","apt","设置","设备","能够","会","修改","--","py","配置文件","系统","变量","旭日","进入","被","为了","ros"],"title":"安装与配置","title_tokens":["配置","与","安装"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_4","text":"我们来试一试。 $ ros2 launch usb_cam demo_launch.py #启动相机，X3Pi $ ros2 run rqt_image_view rqt_image_view #查看图像，PC 这里直接在X3Pi中启动usb_cam的launch文件，然后再启动一个能和他通信的Ubuntu桌面系统，打开rqt_image_view，选择对应的话题，就可以看到图像了。也就是说明我们成功的用TROS驱动了这个USB摄像头。","text_tokens":["$","ubuntu","#","view","来","launch","试一试","pc","他","就","像头","图像","成功","能","的","用","文件","摄像头","然后","ros2","和","_","对应","tros","也就是说","再启动",".","一个","启动","查看","usb","x3pi","中"," ","在","这个","话题","驱动","选择","通信","image","看到","明","桌面","摄像","我们","demo","run","就是","py","cam","相机","，","系统","。","打开","了","就是说","rqt","可以","这里","直接"],"title":"运行相机驱动","title_tokens":["驱动","相机","运行"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#togetherros","text":"除此之外，TogetherROS中也提供了USB摄像头的驱动节点，连接摄像头之后，直接设置设备的权限和TogetherROS的环境变量就可以使用了。 $ source /opt/tros/local_setup.bash $ sudo chmod 777 /dev/video8 $ ros2 launch hobot_usb_cam hobot_usb_cam.launch.py 之后可以再打开一个新的终端，输入对应的指令，然后启动websocket这个节点，就可以把image这个话题的数据发送到网页了。 $ source /opt/tros/local_setup.bash $ cd /opt/tros/lib/websocket/webservice $ sudo chmod +x ./sbin/nginx $ sudo ./sbin/nginx -p . $ ros2 run websocket websocket --ros-args -p image_topic: = /image -p image_type: = mjpeg -p only_show_image: = true 这时我们直接打开在通一个局域网下的浏览器，输入X3Pi的地址，就可以进去到一个网页，点击左上方web端展示即可看到USB摄像头的实时画面。","text_tokens":["true","hobot","提供","local","环境","=","dev","局域","下","only","mjpeg","type","摄像头","ros2","之后","启动","在","上方","端","看到","进去","video8","之外","终端","launch","左上方","websocket","输入","opt","x",":","这个","usb","sudo","再","话题","chmod","topic","摄像","送到","发送","使用","，","发送到","浏览器","打开","画面","直接","$","cd","bash","就","的","到","webservice","nginx",".","一个","也","中"," ","驱动","权限","image","节点","除此","我们","cam","浏览","即可","lib","。","了","可以","togetherros","setup","局域网","777","点击","show","/","展示","通","+","像头","web","数据","args","指令","新","实时","环境变","环境变量","p","然后","和","source","tros","_","对应","这时","连接","x3pi","-","把","网页","设置","设备","run","--","py","除此之外","变量","sbin","地址","ros","左上"],"title":"TogetherROS相机驱动","title_tokens":["togetherros","相机","驱动"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_5","text":"移动机器人中常用的激光雷达大多也是USB借口的，比如这款rplidar。","text_tokens":["动机","大多","移动","的","比如","激光雷达","机器人","雷达","这款","机器","也","中","usb","常用","是","借口","，","移动机器人","。","rplidar","激光"],"title":"激光雷达驱动","title_tokens":["驱动","雷达","激光雷达","激光"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_6","text":"如果我们想把它跑起来，同样需要一个驱动包，大家可以在工作空间中下载雷达的驱动包，然后进行编译。编译完成后，添加环境变量就可以使用这个功能包了。 # 下载源码 $ mkdir -p catkin_ws/src $ cd ~/catkin_ws/src $ git clone -b ros2 https://github.com/slamtec/rplidar_ros.git # 编译 $ cd ~/catkin_ws $ colcon build --symlink-install # 添加环境变量 $ source ~/catkin_ws/install/setup.bash # 添加权限 $ sudo chmod 777 /dev/ttyUSB0 还要记得给激光雷达的USB口设置对应的权限。","text_tokens":["install","#","功能","环境","dev","大家","激光雷达","ros2","起来","在","https","~","slamtec","完成","给",":","空间","这个","usb","sudo","chmod","colcon","git","使用","，","rplidar","口","添加","$","进行","cd","bash","ttyusb0","就","的","如果","工作","catkin","跑","想","一个",".","中"," ","驱动","权限","com","我们","下载","同样","build","源码","。","包","可以","激光","记得","还要","clone","setup","777","它","/","src","包了","环境变","编译","环境变量","然后","p","mkdir","symlink","source","_","对应","雷达","ws","github","-","把","需要","b","设置","后","--","变量","ros"],"title":"安装与配置","title_tokens":["配置","与","安装"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_7","text":"驱动安装好之后，就可以启动雷达了。 在旭日X3派的终端中，运行启动激光雷达的launch文件。 $ ros2 launch rplidar_ros2 rplidar_launch.py #启动雷达，X3PI $ ros2 run rviz2 rviz2 #查看点云，PC 启动成功后，我们在电脑端的Ubuntu系统中，在ros2环境下打开rviz2，然后将世界坐标系改为laser，然后添加LaserScan的可视化选项，并且把Reliability Policy的选项改为System Default，此时就可以看到激光雷达的点云数据了。","text_tokens":["$","ubuntu","选项","#","此时","rviz2","system","环境","可视","终端","launch","派","端的","pc","坐标","就","下","成功","的","文件","数据","policy","然后","激光雷达","坐标系","ros2","reliability","点云","_","可视化","雷达","之后",".","启动","中","查看","x3pi","电脑"," ","在","laserscan","把","驱动","世界","后","看到","改为","default","我们","run","py","并且","，","laser","好","。","旭日","x3","了","rplidar","可以","系统","安装","激光","打开","将","添加","运行"],"title":"运行激光雷达驱动","title_tokens":["雷达","驱动","激光雷达","激光","运行"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/","text":"机器视觉介绍 机器视觉概念 机器视觉， 就是用计算机来模拟人的视觉功能，但这并不仅仅是人眼的简单延伸，更重要的是像人脑一样，可以从客观事物的图像中提取信息，进行处理并加以理解，最终用于实际检测、控制等场景。 获取图像信息相对简单，但想让机器人理解图像中千变万化的物品，就难上加难了。 为了解决这一系列复杂的问题，机器视觉也是一个涉猎广泛的交叉学科，横跨人工智能、神经生物学、物理学、计算机科学、图像处理、模式识别等诸多领域。时至今日，在各个领域中，都有大量开发者或组织参与其中，也积累了众多技术，不过依然还有很多问题亟待解决，就像我们对自己大脑的研究也只是冰山一角一样，机器视觉的研究也将会是一个长久的工作。 机器视觉相关的关键技术也有不少，比如视觉图像的采集和信号处理，这个过程主要是通过传感器硬件采集外部光信号的过程，光信号最终会转变成数字电路的信号，便于下一步的处理；类似左边图片中看到的效果，获取图像之后，更重要的是要识别图像中的物体、确定物体的位置、或者检测物品的变化，这就要用到模式识别或者机器学习等技术，这个部分也是当今机器视觉研究的重点。 和人类的两只眼睛不同，机器用于获取图像的传感器种类较为丰富，可以是一个摄像头，也可以是两个摄像头，还可以是三个、四个、很多个摄像头，不仅可以获取颜色信息，还可以通过红外相机获取深度或者能量信息，这可比人眼获取的信息丰富多了，当然，这也会对后期的处理带来不同的计算压力。 在工业领域，机器视觉系统已经被广泛用于自动检验、工件加工、装配自动化以及生产过程控制等工作。随着机器人的快速发展和应用，机器视觉也逐渐应用于农业机器人、AMR物流机器人、服务机器人、无人驾驶汽车等各种机器人，活跃在农场、物流、仓储、交通、医院等多种环境中。 机器视觉流程 人类视觉擅长于对复杂、非结构化的场景进行定性解释，但机器视觉凭借速度、精度和可重复性等优势，非常适合对结构化场景进行定量测量。 一般来讲，典型的机器视觉系统可以分为如图所示的三个部分：图像采集、图像分析和控制输出。 图像采集注重对原始光学信号的采样，是整个视觉系统的传感部分，核心是相机和相关的配件。 其中光源用于照明待检测的物体，并突显其特征，便于让相机能够更好的捕捉图像。光源是影响机器视觉系统成像质量的重要因素，好的光源和照明效果对机器视觉判断影响很大。当前，机器视觉的光源已经突破人眼的可见光范围，其光谱范围跨越红外光（IR）、可见光、紫外光（UV）乃至X射线波段，可实现更精细和更广泛的检测范围，以及特殊成像需求。 相机被喻为机器视觉系统的“眼睛”，承担着图像信息采集的重要任务。图像传感器又是相机的核心元器件，主要有CCD和CMOS两种类型，其工作原理是将相机镜头接收到的光学信号转化成数字信号。选择合适的相机是机器视觉系统设计的重要环节，不仅直接决定了采集图像的质量和速度，同时也与整个系统的运行模式相关。 图像处理系统接收到相机传来的数字图像之后，通过各种软件算法进行图像特征提取、特征分析和数据标定，最后进行判断。这是各种视觉算法研究最为集中的部分，从传统的模式识别算法，到当前热门的各种机器学习方法，都是为了更好的让机器理解环境。 对于人来讲，识别某一个物体是苹果似乎理所当然，但是对于机器人来讲，就需要提取各种各样不同种类、颜色、形状的苹果特征，然后训练得到一个苹果的“模型”，再通过这个模型对实时图像做匹配，从而分析面前这个东西到底是不是苹果。 在机器人系统中，视觉识别的结果最终要和机器人的某些行为绑定，也就是第三个部分——控制输出，包含I/O接口、运动控制、可视化显示等。当图像处理系统完成图像分析后，将判断的结果发给机器人控制系统，接下来机器人完成运动控制。比如视觉识别到了抓取目标的位置，通过IO口控制夹爪完成抓取和放置，过程中识别的结果和运动的状态，都可以在上位机中显示，方便我们监控。 就机器视觉而言，在这三个部分中，图像分析占据了绝对的核心，涉及的方法、使用的各种开源软件或者框架非常多，这也是我们后续开发的重点，TogetherROS中提供了大量的算法、工具和功能支持。 旭日X3派配置 了解了机器视觉的基本原理和流程，相信大家对视觉应用已经充满了期待，我们这就准备开始。 后续课程中，我们将继续在旭日X3派的开发板上，使用TogetherROS实现各种各样的视觉例程，不过我们得先找到一个相机，比如usb相机或者MIPI接口配套的相机模块，然后连接到开发板对应的接口上。 电脑和开发板之前通过网线连接，便于我们查看视觉处理的结果，速度更快。 如果有HDMI屏幕的话，也可以准备好，稍后需要使用的时候插上查看结果，如果没有的话，也没有影响，后续我们会使用一套网络传输工具，通过板卡的IP地址，就可以看到图像处理的实时状态啦。 USB相机图像采集 关于相机的驱动，请大家也再确认一下，这是后续视觉处理的基础。 如果是USB相机的话，可以参考这个过程验证下是否可以顺利看到图像。 # 旭日X3派 $ sudo apt install ros-foxy-usb-cam $ cd /opt/tros $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros $ source /opt/tros/local_setup.bash $ ros2 launch usb_cam demo_launch.py # 修改params.yaml配置文件中的设备号 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view MIPI相机图像采集 如果使用的是MIPI相机的话，可以参考这个流程驱动相机并显示图像。 # 旭日X3派 $ source /opt/tros/local_setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p video_device: = F37 -p image_width: = 960 -p image_height: = 540 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view 为了提高图像的编码和传输效率，我们建议大家使用MIPI接口的相机，后续应用功能我们也会以该相机为主。","text_tokens":["可见光","”","一步","自己","放置","环境","可视","配套","还有","o","下","之前","流程","开发者","今日","深度","解决","似乎","create","核心","在","但","决定","一般","demo","左边","等","从而","编码","结构","着","做","参考","精度","号","难上加难","红外光","转变成","发给","颜色","医院","于","特征提取","后续","文件","hdmi","opt","重要","传输","显示","不过","紫外光","关键技术","ir","是否","基本","图片","两只","foxy",":","苹果","usb","是不是","重要环节","特征","元器件","，","可比","交叉","运动","光","ccd","口","问题","人","时至今日","东西","长于","bash","夹","活跃","加工","本原","一角","捕捉","到","位置","最终","变化","影响",".","理所当然","继续","目标","image","技术","我们","f37","有","amr","匹配","。","大脑","通过","屏幕","得到","togetherros","960","setup","接下","获取","因素","机中","并","两种","像","化成","支持","p","课程","物流","和","tros","驾驶","电脑","-","结果","神经","随着","就是","重复","范围","没有","以","旭日","第三个","地址","为了","占据","install","信号","#","提供","这是","较为","关于","不仅","height","不少","爪","绝对","光学","简单","传感","热门","soft","对","擅长于","很多","抓取","准备","计算机","或","配件","的话","请","当然","验证","承担","要","网络","了解","冰山一角","射线","压力","领域","所示","都","理学","元器","亟待","待","学科","特征分析","后期","物体","时候","积累","冰山","快速","质量","相信","device","原理","再","场景","工具","类似","摄像","某","转化","波段","亟待解决","非","接口","信息","使用","width","可见","红外","种类","到底","以及","$","i","定量","喻为","cd","分为","的","“","其","如果","应用","解释","自动化","视觉","机器人","逐渐","方法","千变万化","训练","跨越","也","包含"," ","至今","驱动","发展","能量","分析","与","数字图像","了","感器","人眼","其中","建议","参与","来讲","确定","外部","这","转变","像头","网线","数字","器件","数据","实时","各个领域","光源","一样","对应","形状","顺利","板卡","同时","提取","模型","后","会","复性","能够","修改","py","配置文件","擅长","软件","x3","传感器","便于","被","模式识别","、","状态","任务","不同","物理学","仓储","事物","local","来","一下","=","mipi","例程","摄像头","眼睛","设计","ros2","模式","开始","插上","机器","啦","；","为主","带来","最后","介绍","让","是","凭借","当","好","交通","基础","从","—","多种","无人","研究","硬件","数字电","下来","已经","launch","找到","物理","用","定性","上位","诸多","yaml","一系","镜头","得","乃至","特殊","查看","算法","params","检测","横跨","突破","（","接下来","就要","判断","用于","相机","光谱","重复性","ip地址","合适","充满","用到","装配","view","进行","：","稍后","工件","客观","模块","第三","可","各种","农场","信号处理","模拟","农业","智能","工业","环节","cam","监控","三个","更好","将","各个","多","可以","精细","控制系统","）","绑定","自动","图像处理","相关","只是","/","计算机科学","又","然后","很大","类型","理解","仅仅","广泛","众多","_","效率","连接","生物学","人类","长久","需要","接收","而言","基本原理","apt","设备","x射线","--","系统","生产","优势","ros","运行","输出","实现","算机","识别","功能","物品","传统","对于","大家","开发","框架","方便","快","紫外","之后","video","不仅仅","汽车","看到","标定","四个","原始","该","采样","完成","还","更","注重","人脑","电路","结构化","pc","组织","服务","涉及","比如","两个","开发板","采集","部分","复杂","这个","适合","sudo","转化成","cmos","开源","先","实际","当今","生物","直接","典型","过程","传来","人工","计算","但是","延伸","或者","面前","派","提高","就","控制","上","个","变成","数字信号","工作","如图所示","整个","照明","需求","可视化","主要","配置","想","一个","大量","处理","中","相对","link","最为","选择","io","某些","一般来讲","重点","uv","成像","rqt","人工智能","关键","无人驾驶","检验","一系列","集中","python3","科学","丰富","数字电路","确认","依然","期待","测量","涉猎","学习","图像","突显","args","非常","一套","行为","各种各样","source","当前","540","非常适合","概念","加以","系列","不是","速度","run","交叉学科","可重复性","客观事物","效果","各样"],"title":"机器视觉介绍","title_tokens":["介绍","视觉","机器"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_1","text":"","text_tokens":[],"title":"机器视觉介绍","title_tokens":["介绍","视觉","机器"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_2","text":"机器视觉， 就是用计算机来模拟人的视觉功能，但这并不仅仅是人眼的简单延伸，更重要的是像人脑一样，可以从客观事物的图像中提取信息，进行处理并加以理解，最终用于实际检测、控制等场景。 获取图像信息相对简单，但想让机器人理解图像中千变万化的物品，就难上加难了。 为了解决这一系列复杂的问题，机器视觉也是一个涉猎广泛的交叉学科，横跨人工智能、神经生物学、物理学、计算机科学、图像处理、模式识别等诸多领域。时至今日，在各个领域中，都有大量开发者或组织参与其中，也积累了众多技术，不过依然还有很多问题亟待解决，就像我们对自己大脑的研究也只是冰山一角一样，机器视觉的研究也将会是一个长久的工作。 机器视觉相关的关键技术也有不少，比如视觉图像的采集和信号处理，这个过程主要是通过传感器硬件采集外部光信号的过程，光信号最终会转变成数字电路的信号，便于下一步的处理；类似左边图片中看到的效果，获取图像之后，更重要的是要识别图像中的物体、确定物体的位置、或者检测物品的变化，这就要用到模式识别或者机器学习等技术，这个部分也是当今机器视觉研究的重点。 和人类的两只眼睛不同，机器用于获取图像的传感器种类较为丰富，可以是一个摄像头，也可以是两个摄像头，还可以是三个、四个、很多个摄像头，不仅可以获取颜色信息，还可以通过红外相机获取深度或者能量信息，这可比人眼获取的信息丰富多了，当然，这也会对后期的处理带来不同的计算压力。 在工业领域，机器视觉系统已经被广泛用于自动检验、工件加工、装配自动化以及生产过程控制等工作。随着机器人的快速发展和应用，机器视觉也逐渐应用于农业机器人、AMR物流机器人、服务机器人、无人驾驶汽车等各种机器人，活跃在农场、物流、仓储、交通、医院等多种环境中。","text_tokens":["算机","识别","功能","信号","不同","物理学","自己","事物","一步","仓储","来","物品","环境","较为","不仅","还有","下","不少","开发","简单","传感","开发者","今日","摄像头","对","解决","眼睛","深度","很多","计算机","或","模式","当然","之后","机器","；","在","带来","不仅仅","但","让","汽车","看到","要","四个","左边","是","等","冰山一角","压力","交通","领域","从","还","更","都","多种","理学","难上加难","研究","无人","亟待","转变成","硬件","数字电","颜色","医院","已经","人脑","电路","组织","于","服务","物理","用","比如","重要","学科","诸多","两个","一系","后期","不过","物体","关键技术","积累","采集","部分","复杂","图片","两只","冰山","快速","这个","模式识别","检测","横跨","场景","类似","就要","摄像","实际","亟待解决","当今","信息","用于","，","相机","交叉","可比","光","红外","问题","人","生物","种类","用到","以及","时至今日","过程","装配","进行","人工","计算","延伸","或者","就","控制","工件","客观","活跃","的","加工","个","一角","变成","位置","工作","应用","最终","自动化","各种","视觉","机器人","逐渐","变化","主要","想","千变万化","一个","处理","中","相对","也","大量"," ","信号处理","农场","至今","模拟","发展","能量","农业","智能","工业","技术","我们","重点","有","三个","amr","。","将","各个","了","大脑","可以","通过","人工智能","多","关键","感器","自动","无人驾驶","检验","一系列","人眼","其中","图像处理","科学","相关","丰富","参与","获取","数字电路","确定","只是","依然","外部","这","并","计算机科学","涉猎","转变","学习","像头","图像","像","数字","物流","和","各个领域","理解","仅仅","一样","广泛","众多","驾驶","生物学","人类","神经","长久","随着","提取","加以","系列","会","就是","交叉学科","系统","客观事物","效果","传感器","便于","被","生产","为了","、"],"title":"机器视觉概念","title_tokens":["概念","视觉","机器"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_3","text":"人类视觉擅长于对复杂、非结构化的场景进行定性解释，但机器视觉凭借速度、精度和可重复性等优势，非常适合对结构化场景进行定量测量。 一般来讲，典型的机器视觉系统可以分为如图所示的三个部分：图像采集、图像分析和控制输出。 图像采集注重对原始光学信号的采样，是整个视觉系统的传感部分，核心是相机和相关的配件。 其中光源用于照明待检测的物体，并突显其特征，便于让相机能够更好的捕捉图像。光源是影响机器视觉系统成像质量的重要因素，好的光源和照明效果对机器视觉判断影响很大。当前，机器视觉的光源已经突破人眼的可见光范围，其光谱范围跨越红外光（IR）、可见光、紫外光（UV）乃至X射线波段，可实现更精细和更广泛的检测范围，以及特殊成像需求。 相机被喻为机器视觉系统的“眼睛”，承担着图像信息采集的重要任务。图像传感器又是相机的核心元器件，主要有CCD和CMOS两种类型，其工作原理是将相机镜头接收到的光学信号转化成数字信号。选择合适的相机是机器视觉系统设计的重要环节，不仅直接决定了采集图像的质量和速度，同时也与整个系统的运行模式相关。 图像处理系统接收到相机传来的数字图像之后，通过各种软件算法进行图像特征提取、特征分析和数据标定，最后进行判断。这是各种视觉算法研究最为集中的部分，从传统的模式识别算法，到当前热门的各种机器学习方法，都是为了更好的让机器理解环境。 对于人来讲，识别某一个物体是苹果似乎理所当然，但是对于机器人来讲，就需要提取各种各样不同种类、颜色、形状的苹果特征，然后训练得到一个苹果的“模型”，再通过这个模型对实时图像做匹配，从而分析面前这个东西到底是不是苹果。 在机器人系统中，视觉识别的结果最终要和机器人的某些行为绑定，也就是第三个部分——控制输出，包含I/O接口、运动控制、可视化显示等。当图像处理系统完成图像分析后，将判断的结果发给机器人控制系统，接下来机器人完成运动控制。比如视觉识别到了抓取目标的位置，通过IO口控制夹爪完成抓取和放置，过程中识别的结果和运动的状态，都可以在上位机中显示，方便我们监控。 就机器视觉而言，在这三个部分中，图像分析占据了绝对的核心，涉及的方法、使用的各种开源软件或者框架非常多，这也是我们后续开发的重点，TogetherROS中提供了大量的算法、工具和功能支持。","text_tokens":["输出","可见光","实现","信号","识别","任务","”","不同","提供","放置","功能","环境","可视","这是","传统","不仅","对于","o","爪","绝对","框架","开发","光学","热门","传感","方便","对","眼睛","擅长于","设计","抓取","似乎","配件","模式","紫外","当然","之后","机器","核心","在","最后","承担","让","但","决定","要","一般","标定","是","原始","等","从而","凭借","采样","射线","当","结构","好","完成","从","着","所示","做","—","更","都","精度","红外光","研究","元器","注重","发给","颜色","下来","已经","待","结构化","特征提取","涉及","定性","比如","上位","后续","重要","特征分析","镜头","显示","紫外光","物体","ir","采集","部分","复杂","乃至","质量","占据","特殊","苹果","适合","这个","转化成","原理","算法","模式识别","再","是不是","重要环节","检测","cmos","突破","（","接下来","场景","特征","元器件","某","判断","工具","转化","波段","接口","非","使用","信息","开源","用于","，","相机","光谱","运动","重复性","可见","ccd","口","红外","合适","人","种类","到底","直接","典型","以及","东西","过程","长于","定量","i","喻为","传来","进行","：","但是","分为","或者","夹","面前","就","控制","的","“","其","第三","可","捕捉","到","数字信号","工作","位置","如图所示","整个","照明","解释","需求","各种","最终","视觉","可视化","机器人","影响","主要","方法","训练","一个","跨越","也","处理","理所当然","中","包含"," ","大量","最为","状态","选择","目标","io","环节","某些","一般来讲","我们","重点","uv","有","分析","成像","三个","监控","更好","匹配","与","数字图像","。","将","多","了","可以","精细","通过","）","感器","绑定","控制系统","得到","人眼","其中","集中","togetherros","图像处理","接下","相关","来讲","因素","/","这","机中","测量","并","又","学习","两种","图像","化成","器件","数字","突显","数据","支持","实时","非常","然后","很大","行为","和","类型","光源","广泛","理解","当前","各种各样","形状","同时","人类","非常适合","需要","结果","提取","模型","接收","而言","后","不是","复性","能够","x射线","就是","速度","重复","范围","可重复性","擅长","软件","系统","效果","便于","传感器","被","各样","第三个","为了","优势","、","运行"],"title":"机器视觉流程","title_tokens":["流程","视觉","机器"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#x3","text":"了解了机器视觉的基本原理和流程，相信大家对视觉应用已经充满了期待，我们这就准备开始。 后续课程中，我们将继续在旭日X3派的开发板上，使用TogetherROS实现各种各样的视觉例程，不过我们得先找到一个相机，比如usb相机或者MIPI接口配套的相机模块，然后连接到开发板对应的接口上。 电脑和开发板之前通过网线连接，便于我们查看视觉处理的结果，速度更快。 如果有HDMI屏幕的话，也可以准备好，稍后需要使用的时候插上查看结果，如果没有的话，也没有影响，后续我们会使用一套网络传输工具，通过板卡的IP地址，就可以看到图像处理的实时状态啦。","text_tokens":["实现","配套","大家","mipi","之前","例程","流程","开发","快","对","准备","开始","的话","插上","机器","啦","在","网络","看到","了解","好","更","已经","找到","后续","比如","hdmi","传输","不过","得","时候","开发板","基本","相信","查看","usb","原理","工具","接口","先","使用","，","相机","ip地址","充满","或者","派","稍后","就","上","的","模块","如果","本原","到","应用","各种","视觉","影响","一个","处理","中","也","继续"," ","我们","有","。","将","了","可以","通过","屏幕","togetherros","图像处理","这","期待","网线","图像","实时","然后","课程","一套","和","各种各样","对应","板卡","连接","电脑","结果","需要","基本原理","会","速度","没有","旭日","x3","便于","各样","地址","状态"],"title":"旭日X3派配置","title_tokens":["旭日","配置","x3","派"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#usb","text":"关于相机的驱动，请大家也再确认一下，这是后续视觉处理的基础。 如果是USB相机的话，可以参考这个过程验证下是否可以顺利看到图像。 # 旭日X3派 $ sudo apt install ros-foxy-usb-cam $ cd /opt/tros $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros $ source /opt/tros/local_setup.bash $ ros2 launch usb_cam demo_launch.py # 修改params.yaml配置文件中的设备号 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view","text_tokens":["install","#","local","一下","这是","关于","大家","下","soft","ros2","的话","请","create","验证","看到","demo","是","基础","参考","号","launch","pc","后续","文件","opt","yaml","是否","foxy","这个","usb","sudo","再","params","相机","，","$","过程","view","cd","bash","派","的","如果","视觉","配置",".","也","处理","中","link"," ","驱动","image","cam","。","可以","rqt","python3","setup","确认","/","图像","source","tros","_","顺利","-","apt","设备","修改","run","--","py","配置文件","旭日","x3","ros"],"title":"USB相机图像采集","title_tokens":["相机","usb","采集","图像"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#mipi","text":"如果使用的是MIPI相机的话，可以参考这个流程驱动相机并显示图像。 # 旭日X3派 $ source /opt/tros/local_setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p video_device: = F37 -p image_width: = 960 -p image_height: = 540 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view 为了提高图像的编码和传输效率，我们建议大家使用MIPI接口的相机，后续应用功能我们也会以该相机为主。","text_tokens":["$","960","setup","#","功能","建议","local","view","=","/","bash","派","并","pc","大家","提高","mipi","图像","height","的","后续","流程","args","如果","opt","p","传输","显示","应用","ros2","和","source","tros","的话","_","效率",":",".","foxy","这个","device","也","为主"," ","-","video","540","驱动","image","会","我们","run","--","f37","使用","是","cam","接口","编码","该","相机","，","width","。","旭日","x3","以","可以","rqt","参考","为了","ros"],"title":"MIPI相机图像采集","title_tokens":["相机","采集","mipi","图像"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/","text":"CV图像加速处理 OpenCV是一个著名的机器视觉处理库，相信大家都有听过，这个库中有很多图像处理的基础算法，比如灰度变化、图像滤波等，不过这个库为了保证较好的通用性，主要通过软件实现各种算法，TogetherROS对此作了大量优化，我们一起来看看。 TogetherROS视觉加速 TogetherROS系统中集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 效果这么好，具体该如何使用呢？ 高斯滤波 我们先来看下图像处理中常用的高斯滤波算法，OpenCV和hobotcv，正面PK一下，我们也看看在程序中如何使用hobotcv的图像处理加速算法。 运行示例程序 $ cd /opt/tros/hobotcv_gaussian/sample $ ./build.sh $ cd output $ ./run.sh 代码解析 hobotcv_sample.cpp： // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include <algorithm> #include <chrono> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <utility> #include \"hobotcv_gaussian_blur.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" void analyse_result ( cv :: Mat & out_filter , cv :: Mat & cls_filter , std :: string flag_name ) { auto start_time = std :: chrono :: steady_clock :: now (); std :: cout << \"\" << std :: endl ; std :: cout << \"analyse_result start \" << std :: endl ; std :: cout << \"---------\" << flag_name << std :: endl ; std :: cout << \"out_filter type:\" << out_filter . type () << \",cols:\" << out_filter . cols << \",rows:\" << out_filter . rows << \",channel:\" << out_filter . channels () << std :: endl ; std :: cout << \"cls_filter type:\" << cls_filter . type () << \",cols:\" << cls_filter . cols << \",rows:\" << cls_filter . rows << \",channel:\" << cls_filter . channels () << std :: endl ; double minvalue , maxvalue ; cv :: Point mixIdx , maxIdx ; cv :: minMaxLoc ( out_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"out_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"out_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"out_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: minMaxLoc ( cls_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"cls_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"cls_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"cls_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: Mat mat_diff = cv :: abs ( out_filter - cls_filter ); cv :: Scalar sum_error = cv :: sum ( mat_diff >= 1 ); cv :: Scalar mean_error = cv :: sum ( mat_diff ) / ( mat_diff . rows * mat_diff . cols ); cv :: minMaxLoc ( mat_diff , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"\" << std :: endl ; std :: cout << \"diff diff diff\" << std :: endl ; std :: cout << \"mat_diff minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"mat_diff min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"mat_diff max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; std :: cout << \"\" << std :: endl ; std :: cout << \"error sum:\" << sum_error [ 0 ] << \",max:\" << maxvalue << \",mean_error:\" << mean_error [ 0 ] << std :: endl ; int time_used_ms_end = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: steady_clock :: now () - start_time ) . count (); std :: cout << \"analyse_result,time_used_ms_end:\" << time_used_ms_end << std :: endl ; std :: cout << \"analyse_result end \" << std :: endl ; std :: cout << \"\" << std :: endl ; } int main () { int32_t ret = -1 ; HobotGaussianBlurParam blur_param ; HOBOTCV_INITIALIZE_GAUSSIAN_BLUR_PARAM ( & blur_param ); HobotCVGaussianBlurHandle handle ; ret = HobotCVGaussianBlurCreate ( blur_param , & handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurCreate failed, error msg:%d \\n \" , ret ); return -1 ; } for ( int i = 0 ; i < 5 ; i ++ ) { std :: string m_tof_file_s = \"images/frame1_\" + std :: to_string ( i ) + \".png\" ; std :: cout << \"===================\" << std :: endl ; std :: cout << \"image name :\" << m_tof_file_s << std :: endl ; cv :: Mat src = cv :: imread ( m_tof_file_s , CV_16UC1 ); cv :: Mat dst ; cv :: medianBlur ( src , src , 3 ); auto start_time_infe = std :: chrono :: steady_clock :: now (); ret = HobotCVGaussianBlurProcess ( handle , & src , & dst ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurProcess failed, error msg:%d \\n \" , ret ); return -1 ; } int infe_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_infe ). count (); std :: cout << \"infe cost time:\" << infe_time << std :: endl ; auto start_time_gauss = std :: chrono :: steady_clock :: now (); cv :: Mat gaussian_tof ; cv :: GaussianBlur ( src , gaussian_tof , cv :: Size ( 3 , 3 ), 0 , 0 , cv :: BORDER_REPLICATE ); int guss_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_gauss ). count (); std :: cout << \"guss_time cost time:\" << guss_time << std :: endl ; float save_rate = float (( guss_time * 1.0 - infe_time * 1.0 ) / guss_time ); std :: cout << \"hobotcv save rate:\" << save_rate << std :: endl ; analyse_result ( dst , gaussian_tof , \"GaussianBlur\" ); std :: cout << \"-------------------------\" << std :: endl ; std :: cout << \"\" << std :: endl ; } ret = HobotCVGaussianBlurDestroy ( handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurDestroy failed, error msg:%d \\n \" , ret ); return -1 ; } return 0 ; } 图像裁剪与缩放 再来看另外一个案例，图像的裁剪与缩放，比如这样一幅图片，我们尝试剪裁左上角的一小块图像出来，或者对裁剪的某一块图像放大来看看。 运行示例程序 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/hobot_cv/config/ . $ ros2 run hobot_cv example 代码解析 // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include \"include/hobotcv_imgproc.h\" #include \"include/utils.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/core/types.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/opencv.hpp\" #include <fstream> #include <string> #include <chrono> #include <iostream> void writeImg ( cv :: Mat & mat , std :: string imgfile ) { cv :: Mat img_bgr ; cv :: cvtColor ( mat , img_bgr , cv :: COLOR_YUV2BGR_NV12 ); cv :: imwrite ( imgfile , img_bgr ); } int main () { std :: string image_file = \"config/test.jpg\" ; cv :: Mat bgr_mat = cv :: imread ( image_file , cv :: IMREAD_COLOR ); auto src_height = bgr_mat . rows ; auto src_width = bgr_mat . cols ; cv :: Mat srcmat_nv12 ; BGRToNv12 ( bgr_mat , srcmat_nv12 ); auto dst_height = src_height / 2 ; auto dst_width = src_width / 2 ; cv :: Mat dstmat_nv12 ( dst_height * 3 / 2 , dst_width , CV_8UC1 ); auto before_resize = std :: chrono :: system_clock :: now (); auto ret = hobot_cv :: hobotcv_resize ( srcmat_nv12 , src_height , src_width , dstmat_nv12 , dst_height , dst_width ); auto after_resize = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_resize - before_resize ). count (); if ( 0 == ret ) { std :: cout << \"resize finish, time: \" << interval << \"ms\" << std :: endl ; } writeImg ( dstmat_nv12 , \"./resize.jpg\" ); auto before_crop = std :: chrono :: system_clock :: now (); auto cropmat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , 200 , 200 , cv :: Range ( 0 , 200 ), cv :: Range ( 0 , 200 )); auto after_crop = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_crop - before_crop ). count (); std :: cout << \"crop finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropmat , \"./crop.jpg\" ); auto before_cropResize = std :: chrono :: system_clock :: now (); auto cropResizemat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , src_height , src_width , cv :: Range ( 200 , 400 ), cv :: Range ( 200 , 400 )); auto after_cropResize = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_cropResize - before_cropResize ). count (); std :: cout << \"cropResize finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropResizemat , \"./cropResize.jpg\" ); return 0 ; }","text_tokens":["guss","过","c","(","下","be","of","failed",")","type","甚至","软硬件","scalar","iostream","map","nv12","hobotcvgaussianblurhandle","imread","在","1","cropresizemat","include","mean","等","%","通用","minmaxloc","output","r","flag","initialize","opt","不过","cp","chrono","图片",":","这么","float","]","imgproc","左上角","gauss","，","cls","void","error","microseconds","hobotcv","\"","rights","bash","sample","到","writeimg","一块","srcmat","变化","maxvalue","5","？",".","iomanip","上角","2","gaussianblur","image","我们","有","。",";","通过","t","sh","togetherros","16uc1","setup","core","written","倍","pk","对比","src","++","resize","如何","和","tros","来看","做到","-","color","cost",">","sum","duration","mat","hobotcvgaussianblurprocess","为了","左上","hobot","解析","#","before","一幅","utils","height","is","all","对","cpp","很多","集成","finish","hobotgaussianblurparam","看看","example","听","灰度","frame1","cvtcolor","cropmat","降低","time","都","兼容","string","例如","horizon","测试","cropresize","robotics","interval","copyright","infe","[","copied","blur","rate","replicate","相信","滤波","再","yuv2bgr","某","filter","接口","使用","width","cast","$","加速","i","hobotcvgaussianblurdestroy","*","cd","printf","裁剪","的","minvalue","return","呢","auto","应用","视觉","cols","作","方法","混合","也"," ","now","cout","m","double","与","8uc1","reserved","了","\\","diff","3",",","{","confidential","gaussian","---------","优化","clock","analyse","cv","imgcodecs","s","放大","校正","软件","一小","便于","、","contains","system","来","一下","=","queue","any","information","bgr","y","range","尝试","ros2","secrets","config","ret","inc","abs","分别","机器","count","起来","h","&","多倍","是","程序","the","好","案例","基础","引擎","img","size","硬件","start","permission","purpose","int32","旋转","-------------------------","param","owned","channels","算法","保证","著名","save","int","另外","out","tof","algorithm","进行","：","示例","for","算子","transmitted","高斯","剪裁","各种","提升","types","maxidx","images","by","milliseconds","常用","lib","可以","jpg","图像处理","/","endl","+","代码","正面","imwrite","帧","main","to","一","0","_","效率","steady","msg","reproduced","dstmat","way","fstream","medianblur","库","系统","proprietary","may","运行","通用性","实现","}","express","大家","2021","opencv","开发","底层","出来","used","disclosed","result","软硬","name","畸变","mixidx","imgfile","hobotcvgaussianblurcreate","该","芯片","地平","hpp","max","缩放","更","after","性能","dst","bgrtonv12","比如","x","trade","400","而且","without","较","end","这个","point","先","png","if","channel","work","ms","test","或者","n","iterator","d","上","border","小块","<","file","this","200","对此","主要","一个","大量","处理","中","这样","一小块","in","库中","rows","1.0","material","协同","build","编程","std","handle","地平线","and","系统资源","part","率","图像","crop","source","资源","风格","or","min","消耗","run","no","效果","具体","opencv2","utility"],"title":"CV图像处理加速","title_tokens":["图像处理","加速","cv","处理","图像"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#cv","text":"OpenCV是一个著名的机器视觉处理库，相信大家都有听过，这个库中有很多图像处理的基础算法，比如灰度变化、图像滤波等，不过这个库为了保证较好的通用性，主要通过软件实现各种算法，TogetherROS对此作了大量优化，我们一起来看看。","text_tokens":["通用性","实现","图像处理","togetherros","过","大家","opencv","图像","的","比如","不过","很多","一","各种","视觉","优化","较","变化","对此","主要","作","一个","机器","处理","相信","这个","滤波","大量","起来","算法","保证","著名","看看","库中","我们","听","灰度","有","是","等","，","软件","库","好","通用","。","了","基础","通过","为了","、","都"],"title":"CV图像加速处理","title_tokens":["cv","加速","处理","图像"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#togetherros","text":"TogetherROS系统中集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 效果这么好，具体该如何使用呢？","text_tokens":["实现","hobot","opencv","开发","底层","甚至","软硬件","集成","软硬","分别","畸变","在","多倍","等","该","芯片","好","地平","降低","引擎","缩放","更","硬件","兼容","性能","例如","测试","而且","滤波","这么","接口","使用","，","加速","进行","算子","上","的","高斯","到","呢","应用","视觉","提升","方法","？","混合","处理","中"," ","2","我们","常用","协同","与","编程","。","了","可以","通过","togetherros","地平线","系统资源","倍","对比","率","3","图像","帧","如何","资源","风格","效率","cv","做到","消耗","校正","软件","库","系统","效果","便于","具体","旋转","、","运行"],"title":"TogetherROS视觉加速","title_tokens":["togetherros","加速","视觉"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_1","text":"我们先来看下图像处理中常用的高斯滤波算法，OpenCV和hobotcv，正面PK一下，我们也看看在程序中如何使用hobotcv的图像处理加速算法。","text_tokens":["图像处理","加速","hobotcv","一下","pk","下","opencv","图像","正面","的","高斯","如何","和","处理","中","也","来看","滤波","在","算法","看看","我们","常用","先","使用","程序","，","。"],"title":"高斯滤波","title_tokens":["高斯","滤波"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_2","text":"$ cd /opt/tros/hobotcv_gaussian/sample $ ./build.sh $ cd output $ ./run.sh","text_tokens":["$","run","hobotcv",".","output","opt","sample","build"," ","/","cd","gaussian","_","tros","sh"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_3","text":"hobotcv_sample.cpp： // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include <algorithm> #include <chrono> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <utility> #include \"hobotcv_gaussian_blur.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" void analyse_result ( cv :: Mat & out_filter , cv :: Mat & cls_filter , std :: string flag_name ) { auto start_time = std :: chrono :: steady_clock :: now (); std :: cout << \"\" << std :: endl ; std :: cout << \"analyse_result start \" << std :: endl ; std :: cout << \"---------\" << flag_name << std :: endl ; std :: cout << \"out_filter type:\" << out_filter . type () << \",cols:\" << out_filter . cols << \",rows:\" << out_filter . rows << \",channel:\" << out_filter . channels () << std :: endl ; std :: cout << \"cls_filter type:\" << cls_filter . type () << \",cols:\" << cls_filter . cols << \",rows:\" << cls_filter . rows << \",channel:\" << cls_filter . channels () << std :: endl ; double minvalue , maxvalue ; cv :: Point mixIdx , maxIdx ; cv :: minMaxLoc ( out_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"out_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"out_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"out_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: minMaxLoc ( cls_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"cls_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"cls_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"cls_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: Mat mat_diff = cv :: abs ( out_filter - cls_filter ); cv :: Scalar sum_error = cv :: sum ( mat_diff >= 1 ); cv :: Scalar mean_error = cv :: sum ( mat_diff ) / ( mat_diff . rows * mat_diff . cols ); cv :: minMaxLoc ( mat_diff , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"\" << std :: endl ; std :: cout << \"diff diff diff\" << std :: endl ; std :: cout << \"mat_diff minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"mat_diff min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"mat_diff max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; std :: cout << \"\" << std :: endl ; std :: cout << \"error sum:\" << sum_error [ 0 ] << \",max:\" << maxvalue << \",mean_error:\" << mean_error [ 0 ] << std :: endl ; int time_used_ms_end = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: steady_clock :: now () - start_time ) . count (); std :: cout << \"analyse_result,time_used_ms_end:\" << time_used_ms_end << std :: endl ; std :: cout << \"analyse_result end \" << std :: endl ; std :: cout << \"\" << std :: endl ; } int main () { int32_t ret = -1 ; HobotGaussianBlurParam blur_param ; HOBOTCV_INITIALIZE_GAUSSIAN_BLUR_PARAM ( & blur_param ); HobotCVGaussianBlurHandle handle ; ret = HobotCVGaussianBlurCreate ( blur_param , & handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurCreate failed, error msg:%d \\n \" , ret ); return -1 ; } for ( int i = 0 ; i < 5 ; i ++ ) { std :: string m_tof_file_s = \"images/frame1_\" + std :: to_string ( i ) + \".png\" ; std :: cout << \"===================\" << std :: endl ; std :: cout << \"image name :\" << m_tof_file_s << std :: endl ; cv :: Mat src = cv :: imread ( m_tof_file_s , CV_16UC1 ); cv :: Mat dst ; cv :: medianBlur ( src , src , 3 ); auto start_time_infe = std :: chrono :: steady_clock :: now (); ret = HobotCVGaussianBlurProcess ( handle , & src , & dst ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurProcess failed, error msg:%d \\n \" , ret ); return -1 ; } int infe_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_infe ). count (); std :: cout << \"infe cost time:\" << infe_time << std :: endl ; auto start_time_gauss = std :: chrono :: steady_clock :: now (); cv :: Mat gaussian_tof ; cv :: GaussianBlur ( src , gaussian_tof , cv :: Size ( 3 , 3 ), 0 , 0 , cv :: BORDER_REPLICATE ); int guss_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_gauss ). count (); std :: cout << \"guss_time cost time:\" << guss_time << std :: endl ; float save_rate = float (( guss_time * 1.0 - infe_time * 1.0 ) / guss_time ); std :: cout << \"hobotcv save rate:\" << save_rate << std :: endl ; analyse_result ( dst , gaussian_tof , \"GaussianBlur\" ); std :: cout << \"-------------------------\" << std :: endl ; std :: cout << \"\" << std :: endl ; } ret = HobotCVGaussianBlurDestroy ( handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurDestroy failed, error msg:%d \\n \" , ret ); return -1 ; } return 0 ; }","text_tokens":["guss","#","contains","}","express","=","queue","c","2021","(","any","be","of","information","failed","is","y",")","type","all","scalar","used","cpp","iostream","map","disclosed","secrets","result","ret","inc","abs","name","count","hobotcvgaussianblurhandle","imread","mixidx","1","hobotgaussianblurparam","h","&","include","mean","hobotcvgaussianblurcreate","%","frame1","the","minmaxloc","time","hpp","max","size","start","permission","purpose","flag","string","horizon","initialize","int32","dst","-------------------------","robotics","param","x","copyright","trade","infe","without","owned","copied","chrono","blur","channels","[","end","rate",":","replicate","float","point","]","save","imgproc","filter","int","png","gauss","cls","void","out","error","cast","tof","if","microseconds","algorithm","i","hobotcv","channel","hobotcvgaussianblurdestroy","work","：","*","ms","\"","rights","for","n","iterator","d","printf","transmitted","border","minvalue","return","sample","<","file","auto","this","cols","maxvalue",".","5","iomanip"," ","now","maxidx","images","cout","by","gaussianblur","in","m","image","milliseconds","rows","1.0","material","double","std","handle","reserved",";","t","16uc1","core","and","\\","written","diff","/","endl","part","3",",","{","+","++","src","confidential","main","to","gaussian","---------","_","0","or","clock","analyse","cv","min","-","steady","msg","imgcodecs","s","reproduced","cost","no",">","sum","way","duration","fstream","mat","medianblur","proprietary","hobotcvgaussianblurprocess","opencv2","may","utility"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_4","text":"再来看另外一个案例，图像的裁剪与缩放，比如这样一幅图片，我们尝试剪裁左上角的一小块图像出来，或者对裁剪的某一块图像放大来看看。","text_tokens":["一幅","来","或者","图像","裁剪","的","比如","小块","出来","尝试","对","剪裁","一块","图片","一个","上角","来看","这样","再","一小块","放大","某","我们","看看","另外","左上角","，","一小","与","。","案例","缩放","左上"],"title":"图像裁剪与缩放","title_tokens":["缩放","与","图像","裁剪"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_5","text":"$ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/hobot_cv/config/ . $ ros2 run hobot_cv example","text_tokens":["$","setup","hobot","/","r","bash","opt","ros2","cp","source","_","tros","config",".","cv"," ","-","example","run","lib"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_6","text":"// Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include \"include/hobotcv_imgproc.h\" #include \"include/utils.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/core/types.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/opencv.hpp\" #include <fstream> #include <string> #include <chrono> #include <iostream> void writeImg ( cv :: Mat & mat , std :: string imgfile ) { cv :: Mat img_bgr ; cv :: cvtColor ( mat , img_bgr , cv :: COLOR_YUV2BGR_NV12 ); cv :: imwrite ( imgfile , img_bgr ); } int main () { std :: string image_file = \"config/test.jpg\" ; cv :: Mat bgr_mat = cv :: imread ( image_file , cv :: IMREAD_COLOR ); auto src_height = bgr_mat . rows ; auto src_width = bgr_mat . cols ; cv :: Mat srcmat_nv12 ; BGRToNv12 ( bgr_mat , srcmat_nv12 ); auto dst_height = src_height / 2 ; auto dst_width = src_width / 2 ; cv :: Mat dstmat_nv12 ( dst_height * 3 / 2 , dst_width , CV_8UC1 ); auto before_resize = std :: chrono :: system_clock :: now (); auto ret = hobot_cv :: hobotcv_resize ( srcmat_nv12 , src_height , src_width , dstmat_nv12 , dst_height , dst_width ); auto after_resize = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_resize - before_resize ). count (); if ( 0 == ret ) { std :: cout << \"resize finish, time: \" << interval << \"ms\" << std :: endl ; } writeImg ( dstmat_nv12 , \"./resize.jpg\" ); auto before_crop = std :: chrono :: system_clock :: now (); auto cropmat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , 200 , 200 , cv :: Range ( 0 , 200 ), cv :: Range ( 0 , 200 )); auto after_crop = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_crop - before_crop ). count (); std :: cout << \"crop finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropmat , \"./crop.jpg\" ); auto before_cropResize = std :: chrono :: system_clock :: now (); auto cropResizemat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , src_height , src_width , cv :: Range ( 200 , 400 ), cv :: Range ( 200 , 400 )); auto after_cropResize = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_cropResize - before_cropResize ). count (); std :: cout << \"cropResize finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropResizemat , \"./cropResize.jpg\" ); return 0 ; }","text_tokens":["before","hobot","#","contains","}","express","system","utils","=","c","2021","(","any","be","opencv","of","height","information","is","bgr",")","range","all","used","iostream","disclosed","secrets","nv12","config","ret","inc","finish","count","imread","cropresizemat","h","&","include","imgfile","cvtcolor","the","cropmat","time","hpp","img","permission","after","purpose","string","horizon","dst","bgrtonv12","cropresize","robotics","interval","copyright","trade","400","without","owned","copied","chrono",":","yuv2bgr","imgproc","int","width","void","cast","if","hobotcv","work","ms","test","*","\"","rights","for","transmitted","return","<","file","auto","this","writeimg","srcmat","200","cols","types","."," ","now","cout","2","by","in","image","milliseconds","rows","material","8uc1","std","reserved",";","jpg","core","and","written","/","endl","part","3",",","{","src","imwrite","resize","crop","confidential","main","0","_","or","clock","cv","-","imgcodecs","reproduced","color","no",">","dstmat","way","duration","mat","fstream","proprietary","opencv2","may"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/","text":"模型推理框架 智能机器人与机器学习是紧密相连的，机器学习又可以分成数据采集、标注、训练、推理等环节，其中数据的训练需要消耗大量算力，适合在服务器或者云端进行，不过训练好的模型可是要部署到机器人端进行推理运算的，所以模型推理的效率如何，直接决定了机器人视觉处理的效率，这刚好是TogetherROS所擅长的地方。 Hobot DNN模型推理库 TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 hobot_dnn是在地平线X3开发板上利用BPU处理器实现AI推理功能，基于地平线EasyDNN和ROS2 Node进行二次开发，为应用开发提供更简单易用的模型集成开发接口，包括模型管理、基于模型描述的输入处理及结果解析，以及模型输出内存分配管理等功能。 关于hobot_dnn的使用逻辑流程如这张图所示，供大家参考，我们后续也会通过具体的案例解释代码的实现过程。 算法与应用库 在Hobot DNN模型推理库的基础上，地平线还提供了一套基于TogetherROS系统的AI算法包，称为BOXs，这样我们就不需要从零构建算法，基于这些标准而高效的算法，可以更关注应用层面的APP开发。 从这张图中我们可以看到，这套AI算法包中包含两大块，一个是基础算法，一个是应用算法。 基础算法中主要是图像分类、语义分割和目标检测这些常用的算法，应用层面就会基于这些算法和某些场景，动态实现更为复杂的人体识别、骨骼点识别、手势识别等具体的功能，这些模块就可以和机器人运功功能直接结合，节省了我们开发AI视觉部分的时间。 模型推理测试 这套模型推理和算法库的效果如何呢？ 我们先来体验一个TogetherROS系统自带的案例，识别这张图片中的人，以及每个人的骨骼关键点。 # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。config中为example使用的模型，回灌使用的本地图片 $ cp -r /opt/tros/lib/dnn_node_example/config/ . # 使用本地jpg格式图片通过同步模式进行回环预测，并存储渲染后的图片 $ ros2 launch dnn_node_example hobot_dnn_node_example_feedback.launch.py","text_tokens":["实现","输出","hobot","解析","识别","功能","#","提供","环境","来","关于","体验","预测","大家","不用","包括","框架","开发","流程","底层","简单","开发者","易用","所","不","可是","分类","很多","ros2","config","集成","模式","机器","很快","每个","啦","同步","在","运算","端","这张","决定","要","看到","boxs","example","是","回环","等","及","芯片","好","地平","高效","层面","案例","基础","从","引擎","bpu","所示","参考","还","保障","更","标准","大块","零","关注","r","launch","理器","输入","服务","后续","测试","文件","opt","不过","结合","拷贝","cp","刚好","开发板","渲染","采集","部分","复杂","图片","dnn","feedback","适合","node","算法","调教","存储","路径","检测","包中","场景","算力","开源","接口","实际","使用","内存","先","基于","，","构建","人","直接","系统集成","以及","$","过程","分成","部署","这套","进行","人工","示例","称为","张图","或者","bash","推理","供","就","上","的","模块","二次","云端","到","呢","应用","解释","服务器","视觉","机器人","二次开发","主要","训练","配置","大量","包含","处理","中","也","一个","这样"," ","？","时间","出","目标","智能","环节","某些","动态","我们","地方","常用","格式","运行",".","与","分配","lib","。","包","语义","了","运功","可以","通过","人工智能","app","关键","关键点","安装","jpg","其中","所以","togetherros","借助","地平线","管理","setup","利用","/","这","花费","中为","并","又","描述","学习","easydnn","代码","图像","ai","自带","数据","如","为","一套","人体","如何","和","更为","众多","source","_","tros","效率","逻辑","处理器","-","紧密","消耗","需要","充足","务器","模型","结果","后","会","相连","而","两大块","配置文件","py","手势","回灌","擅长","分割","点","库","系统","效果","标注","x3","具体","这些","骨骼","、","节省","本地"],"title":"模型推理框架","title_tokens":["推理","模型","框架"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_1","text":"智能机器人与机器学习是紧密相连的，机器学习又可以分成数据采集、标注、训练、推理等环节，其中数据的训练需要消耗大量算力，适合在服务器或者云端进行，不过训练好的模型可是要部署到机器人端进行推理运算的，所以模型推理的效率如何，直接决定了机器人视觉处理的效率，这刚好是TogetherROS所擅长的地方。","text_tokens":["所以","togetherros","分成","部署","进行","这","或者","推理","又","学习","服务","的","数据","云端","所","可是","到","不过","如何","刚好","服务器","采集","视觉","机器人","效率","训练","机器","大量","处理","适合","在","运算","紧密","消耗","需要","务器","模型","端","决定","智能","环节","要","相连","算力","地方","是","等","，","直接","与","擅长","好","。","标注","了","可以","、","其中"],"title":"模型推理框架","title_tokens":["推理","模型","框架"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#hobot-dnn","text":"TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 hobot_dnn是在地平线X3开发板上利用BPU处理器实现AI推理功能，基于地平线EasyDNN和ROS2 Node进行二次开发，为应用开发提供更简单易用的模型集成开发接口，包括模型管理、基于模型描述的输入处理及结果解析，以及模型输出内存分配管理等功能。 关于hobot_dnn的使用逻辑流程如这张图所示，供大家参考，我们后续也会通过具体的案例解释代码的实现过程。","text_tokens":["实现","输出","hobot","解析","功能","提供","关于","大家","不用","包括","开发","流程","底层","简单","开发者","易用","很多","ros2","集成","很快","啦","在","是","等","及","芯片","地平","案例","引擎","bpu","所示","参考","更","保障","理器","输入","后续","开发板","dnn","node","调教","算力","开源","接口","实际","使用","内存","基于","，","系统集成","以及","过程","部署","这套","人工","进行","张图","推理","供","就","上","的","二次","应用","解释","二次开发","训练","处理","中","也"," ","时间","智能","我们","分配","。","了","可以","通过","人工智能","togetherros","借助","地平线","管理","利用","这","花费","描述","easydnn","代码","ai","数据","如","为","和","众多","_","逻辑","处理器","结果","充足","模型","会","库","系统","x3","具体","、"],"title":"Hobot DNN模型推理库","title_tokens":["dnn","hobot"," ","库","模型","推理"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_2","text":"在Hobot DNN模型推理库的基础上，地平线还提供了一套基于TogetherROS系统的AI算法包，称为BOXs，这样我们就不需要从零构建算法，基于这些标准而高效的算法，可以更关注应用层面的APP开发。 从这张图中我们可以看到，这套AI算法包中包含两大块，一个是基础算法，一个是应用算法。 基础算法中主要是图像分类、语义分割和目标检测这些常用的算法，应用层面就会基于这些算法和某些场景，动态实现更为复杂的人体识别、骨骼点识别、手势识别等具体的功能，这些模块就可以和机器人运功功能直接结合，节省了我们开发AI视觉部分的时间。","text_tokens":["实现","hobot","识别","功能","提供","开发","分类","不","机器","在","看到","boxs","是","等","高效","地平","层面","基础","从","还","更","标准","大块","零","关注","结合","部分","复杂","dnn","算法","检测","包中","场景","基于","，","构建","直接","这套","称为","张图","推理","就","上","的","模块","应用","视觉","机器人","主要","一个","包含","中","这样"," ","时间","目标","动态","某些","我们","常用","。","包","语义","了","运功","可以","app","地平线","togetherros","这","图像","ai","一套","人体","和","更为","需要","模型","会","而","两大块","手势","分割","点","库","系统","具体","这些","骨骼","、","节省"],"title":"算法与应用库","title_tokens":["应用","与","库","算法"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_3","text":"这套模型推理和算法库的效果如何呢？ 我们先来体验一个TogetherROS系统自带的案例，识别这张图片中的人，以及每个人的骨骼关键点。 # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。config中为example使用的模型，回灌使用的本地图片 $ cp -r /opt/tros/lib/dnn_node_example/config/ . # 使用本地jpg格式图片通过同步模式进行回环预测，并存储渲染后的图片 $ ros2 launch dnn_node_example hobot_dnn_node_example_feedback.launch.py","text_tokens":["hobot","识别","#","环境","来","预测","体验","ros2","config","模式","每个","同步","这张","example","回环","案例","从","r","launch","文件","opt","拷贝","cp","渲染","feedback","图片","dnn","node","算法","存储","路径","先","使用","，","人","以及","$","这套","进行","示例","bash","推理","的","呢","配置","？","一个",".","中","出"," ","我们","格式","lib","。","通过","安装","关键","关键点","jpg","togetherros","setup","/","中为","并","自带","如何","和","source","tros","_","-","需要","模型","后","配置文件","py","回灌","库","系统","效果","骨骼","运行","本地"],"title":"模型推理测试","title_tokens":["推理","模型","测试"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/","text":"图像物体分类 接下来我们继续学习基于Hobot CNN模型推理库之上的视觉应用。 机器人要感知周边环境，那就得确定看到的图像中都有什么，比如地上有一只猫，旁边有一个桌子之类的，这个猫和桌子就是具体的物体分类啦。 图像分类原理 如果是人来识别一只猫的话，似乎再简单不过了，无论黑猫、白猫还是花猫，我们一眼就可以看出来。 不过这件事对于机器人来讲可没有那么简单，为了能够让机器准确识别一只猫，无数学者可是研究了几十年啊，虽然还赶不上人类的智慧，但是这件事已经没有那么遥不可及了。 比如说我们要让机器识别图像中有一只猫，我们就得先教会机器什么是猫，对此我们就得把各种各样猫的照片给计算机看，目的就是让机器学习，看的越多，识别的也就越准。 我们那里找这么多猫的图片呢？ 大家可能听说过一个著名的视觉对象数据库——ImageNet，里边有超过1400万张标注过的图像，2万多个类别，我们就可以利用这个庞大的数据库，找到很多猫的照片。 然后就搭建神经网络，把这些数据放进去训练了，调教出一套比较好的识别模型。 接下来把这套模型部署到机器人上，之后每当有一幅图像收到之后，就传到这个模型中，也就是模型推理，推理的结果就是类似这样的数据，概率最大的，也就是机器识别到的物体啦。 关于机器学习，理论众多，大家可以学习专门的课程，我们课上还是重点讲解在TogetherROS中的实现方法。 编程开发方法 我们来看这样一张图片，大家很快就可以发现这是一只斑马。 运行示例程序 我们如何用机器来识别它呢，大家先来运行这个案例，这是基于ImageNet数据集训练的模型，可以识别1000种常见的物体，我们看一下效果如何？ $ cd /app/ai_inference/01_basic_sample/ $ sudo python3 ./test_mobilenetv1.py 代码解析 test_mobilenetv1.py： #!/usr/bin/env python3 from hobot_dnn import pyeasy_dnn as dnn import numpy as np import cv2 def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_BGR2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] if __name__ == '__main__' : # test classification result models = dnn . load ( '../models/mobilenetv1_224x224_nv12.bin' ) # test input and output properties print ( \"=\" * 10 , \"inputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) print ( \"inputs[0] name is:\" , models [ 0 ] . inputs [ 0 ] . name ) print ( \"=\" * 10 , \"outputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . outputs [ 0 ] . properties ) print ( \"outputs[0] name is:\" , models [ 0 ] . outputs [ 0 ] . name ) # 打开图片 img_file = cv2 . imread ( './zebra_cls.jpg' ) # 把图片缩放到模型的输入尺寸 # 获取算法模型的输入tensor 的尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) des_dim = ( w , h ) resized_data = cv2 . resize ( img_file , des_dim , interpolation = cv2 . INTER_AREA ) nv12_data = bgr2nv12_opencv ( resized_data ) # 模型推理 outputs = models [ 0 ] . forward ( nv12_data ) print ( \"=\" * 10 , \"Get output[0] numpy data\" , \"=\" * 10 ) print ( \"output[0] buffer numpy info: \" ) print ( \"shape: \" , outputs [ 0 ] . buffer . shape ) print ( \"dtype: \" , outputs [ 0 ] . buffer . dtype ) # print(\"First 10 results:\", outputs[0].buffer[0][:10]) # 从输出结果中得到值最大的那个序号，比如 zebra 就是第 340 个值，应该大于 0.99 print ( \"=\" * 10 , \"Classification result\" , \"=\" * 10 ) assert np . argmax ( outputs [ 0 ] . buffer ) == 340 # 输出类别序号和预测概率值 print ( \"cls id: %d Confidence: %f \" % ( np . argmax ( outputs [ 0 ] . buffer ), outputs [ 0 ] . buffer [ 0 ][ np . argmax ( outputs [ 0 ] . buffer )])) Mobilenetv2物体分类 用图片进行识别不太过瘾，毕竟是静态的图像，没问题，TogetherROS中还提供了实时物体分类的案例，我们继续来体验一下。 为了实时显示视觉识别的效果，这里我们需要启动TogetherROS中的一个web服务器，它会把视觉识别的实时效果，通过网络传输出来，我们直接在浏览器中就可以看到结果啦。也是便于我们开发调试的一个重要工具。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . 运行例程： $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/mobilenetv2workconfig.json image_width: = 480 image_height: = 272 在浏览器中登录192.168.1.10，就可以看到分类效果啦：","text_tokens":["那么","它会","basic","什么","环境","340","过","没","预测","还是","1.10","(","分类",")","type","学者","似乎","nv12","mobilenetv2","des","尺寸","imread","在","桌子","1","bgr2yuv","赶不上","packed","不可","听说","data","照片","%","cv2","classification","越准","output","info","r","超过","opt","重要","传输","显示","不过","mobilenetv2workconfig","cp","图片","地上","白猫",":","据库","这么","assert","花猫","]","10","，","cls","浏览器","打开","缩","问题","看","这套","transpose","\"","bash","推理","周边","tensor","sample","到","服务器","i420","？","properties",".","出","继续","192.168","2","!","image","我们","有","first","放到","。","通过","app","啊","得到","togetherros","setup","接下","获取","outputs","hw","ai","resize","p","课程","如何","和","usr","import","一眼","tros","来看","-","结果","神经","庞大","bin","cnn","as","color","就是","黑猫","没有","标注","为了","hobot","解析","#","不太","提供","dim","一幅","概率","resized","这件","这是","一只","关于","体验","旁边","height","is","简单","多猫","大于","很多","计算机","的话","nchw","要","网络","搭建","example","pyeasy","cvtcolor","智慧","都","websocket","layout","万多个","几十","物体","十年","[","4","dnn","那个","1400","node","原理","再","调教","工具","之类","类似","基于","width","那里","可能","数据库","$","*","cd","的","放进","inference","return","如果","get","呢","272","应用","webservice","视觉","share","机器人","训练","方法","也"," ","webserver","调试","之上","无论","了","224x224","万张","yuv420p","感知","来讲","确定","利用","np","最大","它","3",",","里边","数据","实时","序号","print","个值","模型","每当","zeros","能够","py","找","inter","便于","sbin","buffer","这里","、","mobilenetv1","神经网","神经网络","来","对象","一下","=","那","confidence","'","例程","y","def","ros2","config","argmax","机器","收到","啦","万多","让","h","是","程序","bgr2nv12","好","案例","interpolation","从","进去","—","img","研究","下来","area","已经","应该","launch","输入","找到","发现","用","得","results","放进去","事","dtype","算法","chmod","著名","接下来","imagenet","类别","静态","env","进行","：","示例","课上","准确","shape","值","0.99","f","可","各种","斑马","..","inputs","登录","浏览","lib","多","runtime","可以","id","jpg","几十年","/","人来","&&","json","+","w","代码","web","reshape","开发方法","main","种","虽然","然后","第","集","众多","0","_","遥不可及","人类","需要","周边环境","库","运行","实现","输出","识别","算机","from","对于","大家","opencv","开发","出来","可是","result","之后","很快","讲解","planar","name","启动","中有","1000","看到","多个","教会","numpy","还","给","like","目的","load","服务","比如","x","过瘾","benchmark","这个","sudo","毕竟","先","一张","就可以看","if","直接","部署","常见","但是","计算","test","就","d","上","480","file","else","nginx","无数","对此","一个","中","pro","这样","01","专门","forward","重点","__","uv","编程","python3","and","input","学习","图像","传到","比如说","zebra","理论","一套","各种各样","source","把","猫","务器","models","越","比较","效果","具体","各样","这些"],"title":"图像物体分类","title_tokens":["分类","物体","图像"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_1","text":"接下来我们继续学习基于Hobot CNN模型推理库之上的视觉应用。 机器人要感知周边环境，那就得确定看到的图像中都有什么，比如地上有一只猫，旁边有一个桌子之类的，这个猫和桌子就是具体的物体分类啦。","text_tokens":["hobot","接下","感知","确定","什么","下来","环境","一只","推理","那","学习","就","旁边","图像","周边","的","比如","分类","应用","物体","得","和","视觉","机器人","地上","机器","一个","这个","中","啦","继续"," ","桌子","猫","模型","接下来","cnn","要","看到","之类","我们","就是","周边环境","有","之上","基于","，","库","。","具体","都"],"title":"图像物体分类","title_tokens":["分类","物体","图像"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_2","text":"如果是人来识别一只猫的话，似乎再简单不过了，无论黑猫、白猫还是花猫，我们一眼就可以看出来。 不过这件事对于机器人来讲可没有那么简单，为了能够让机器准确识别一只猫，无数学者可是研究了几十年啊，虽然还赶不上人类的智慧，但是这件事已经没有那么遥不可及了。 比如说我们要让机器识别图像中有一只猫，我们就得先教会机器什么是猫，对此我们就得把各种各样猫的照片给计算机看，目的就是让机器学习，看的越多，识别的也就越准。 我们那里找这么多猫的图片呢？ 大家可能听说过一个著名的视觉对象数据库——ImageNet，里边有超过1400万张标注过的图像，2万多个类别，我们就可以利用这个庞大的数据库，找到很多猫的照片。 然后就搭建神经网络，把这些数据放进去训练了，调教出一套比较好的识别模型。 接下来把这套模型部署到机器人上，之后每当有一幅图像收到之后，就传到这个模型中，也就是模型推理，推理的结果就是类似这样的数据，概率最大的，也就是机器识别到的物体啦。 关于机器学习，理论众多，大家可以学习专门的课程，我们课上还是重点讲解在TogetherROS中的实现方法。","text_tokens":["实现","那么","识别","算机","神经网","神经网络","什么","一幅","概率","过","这件","对象","一只","关于","还是","对于","大家","简单","出来","多猫","可是","很多","学者","似乎","计算机","的话","之后","机器","收到","讲解","啦","万多","中有","在","让","要","赶不上","网络","不可","听说","搭建","照片","是","多个","教会","好","智慧","越准","进去","还","—","给","研究","下来","已经","目的","找到","比如","万多个","超过","几十","不过","物体","得","十年","图片","放进去","白猫","事","1400","这个","据库","这么","再","花猫","调教","著名","接下来","类似","imagenet","先","，","类别","那里","可能","就可以看","数据库","部署","看","这套","但是","计算","课上","准确","推理","就","上","的","放进","如果","可","到","呢","各种","视觉","机器人","无数","对此","训练","方法","？","一个","也","中","出","这样"," ","2","专门","我们","重点","有","无论","。","多","了","可以","啊","万张","togetherros","接下","来讲","利用","几十年","最大","人来","学习","图像","里边","传到","比如说","数据","虽然","然后","理论","课程","一套","各种各样","众多","一眼","遥不可及","把","人类","猫","神经","结果","庞大","模型","每当","能够","就是","黑猫","越","没有","找","比较","标注","各样","这些","为了","、"],"title":"图像分类原理","title_tokens":["分类","图像","原理"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_3","text":"我们来看这样一张图片，大家很快就可以发现这是一只斑马。","text_tokens":["图片","斑马","一张","很快","，","来看","这样","。","这是","可以","一只","大家","就","我们","发现"],"title":"编程开发方法","title_tokens":["编程","开发方法","开发","方法"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_4","text":"我们如何用机器来识别它呢，大家先来运行这个案例，这是基于ImageNet数据集训练的模型，可以识别1000种常见的物体，我们看一下效果如何？ $ cd /app/ai_inference/01_basic_sample/ $ sudo python3 ./test_mobilenetv1.py","text_tokens":["$","python3","识别","看","basic","常见","test","来","一下","它","这是","cd","/","大家","ai","用","的","数据","inference","种","sample","呢","物体","如何","集","_","训练","机器","？","这个",".","sudo"," ","01","模型","1000","我们","imagenet","先","py","基于","，","效果","案例","可以","app","运行","mobilenetv1"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_5","text":"test_mobilenetv1.py： #!/usr/bin/env python3 from hobot_dnn import pyeasy_dnn as dnn import numpy as np import cv2 def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_BGR2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] if __name__ == '__main__' : # test classification result models = dnn . load ( '../models/mobilenetv1_224x224_nv12.bin' ) # test input and output properties print ( \"=\" * 10 , \"inputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) print ( \"inputs[0] name is:\" , models [ 0 ] . inputs [ 0 ] . name ) print ( \"=\" * 10 , \"outputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . outputs [ 0 ] . properties ) print ( \"outputs[0] name is:\" , models [ 0 ] . outputs [ 0 ] . name ) # 打开图片 img_file = cv2 . imread ( './zebra_cls.jpg' ) # 把图片缩放到模型的输入尺寸 # 获取算法模型的输入tensor 的尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) des_dim = ( w , h ) resized_data = cv2 . resize ( img_file , des_dim , interpolation = cv2 . INTER_AREA ) nv12_data = bgr2nv12_opencv ( resized_data ) # 模型推理 outputs = models [ 0 ] . forward ( nv12_data ) print ( \"=\" * 10 , \"Get output[0] numpy data\" , \"=\" * 10 ) print ( \"output[0] buffer numpy info: \" ) print ( \"shape: \" , outputs [ 0 ] . buffer . shape ) print ( \"dtype: \" , outputs [ 0 ] . buffer . dtype ) # print(\"First 10 results:\", outputs[0].buffer[0][:10]) # 从输出结果中得到值最大的那个序号，比如 zebra 就是第 340 个值，应该大于 0.99 print ( \"=\" * 10 , \"Classification result\" , \"=\" * 10 ) assert np . argmax ( outputs [ 0 ] . buffer ) == 340 # 输出类别序号和预测概率值 print ( \"cls id: %d Confidence: %f \" % ( np . argmax ( outputs [ 0 ] . buffer ), outputs [ 0 ] . buffer [ 0 ][ np . argmax ( outputs [ 0 ] . buffer )]))","text_tokens":["输出","hobot","#","dim","from","resized","340","概率","=","预测","confidence","(","opencv","height","'","is","y","def",")","type","大于","result","nv12","argmax","des","nchw","尺寸","name","planar","imread","1","bgr2yuv","packed","data","h","pyeasy","bgr2nv12","cvtcolor","%","cv2","numpy","interpolation","classification","从","img","like","output","info","area","应该","输入","layout","load","比如","results","[","4","图片","dnn","那个",":","dtype","算法","assert","]","10","，","width","cls","类别","打开","缩","if","env","transpose","：","test","*","\"","shape","推理","值","d","0.99","的","tensor","return","f","file","get","else","i420",".","properties","..","inputs","pro","中"," ","2","!","image","forward","__","uv","first","放到","id","224x224","得到","jpg","yuv420p","python3","and","获取","input","np","最大","/","outputs","3","hw",",","w","reshape","resize","main","zebra","第","和","import","usr","0","_","序号","print","个值","把","结果","模型","bin","zeros","as","color","就是","models","py","inter","buffer","mobilenetv1"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#mobilenetv2","text":"用图片进行识别不太过瘾，毕竟是静态的图像，没问题，TogetherROS中还提供了实时物体分类的案例，我们继续来体验一下。 为了实时显示视觉识别的效果，这里我们需要启动TogetherROS中的一个web服务器，它会把视觉识别的实时效果，通过网络传输出来，我们直接在浏览器中就可以看到结果啦。也是便于我们开发调试的一个重要工具。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . 运行例程： $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/mobilenetv2workconfig.json image_width: = 480 image_height: = 272 在浏览器中登录192.168.1.10，就可以看到分类效果啦：","text_tokens":["hobot","识别","它会","#","不太","提供","来","一下","=","没","体验","1.10","height","例程","开发","分类","出来","ros2","config","启动","啦","在","网络","看到","example","是","案例","还","r","launch","websocket","服务","用","opt","重要","x","过瘾","传输","显示","物体","mobilenetv2workconfig","cp","benchmark","图片","dnn",":","node","chmod","工具","毕竟","，","静态","width","浏览器","问题","直接","$","进行","：","cd","bash","就","480","的","file","272","服务器","webservice","视觉","share","nginx","一个",".","也","中","192.168","继续"," ","webserver","登录","image","我们","调试","浏览","lib","。","了","runtime","可以","通过","togetherros","setup","/","&&","json","+","图像","web","实时","p","source","tros","_","-","把","结果","需要","务器","py","效果","便于","sbin","为了","这里","运行"],"title":"Mobilenetv2物体分类","title_tokens":["分类","物体","mobilenetv2"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/","text":"动态目标检测 图像物体分类重在分析图像中存在的物体是什么，便于机器理解看到的环境信息，另外一种场景，机器不仅要识别某一物体，还要知道这个物体所在的位置，当物体在运动时，更要快速连续的跟踪，这就是目标检测，重在分析识别到物体在图像中的位置。 目标检测原理 假设我们要识别图像中这只狗的位置，以最为常用的YOLO算法为例，它会运用单个卷积神经网络(CNN) ，将图像分成网格，并预测每个网格的对象概率和边界框。 比如，对于这个图像，Yolo的CNN网络将输入的图片分割成7x7的网格，然后每个网格负责去检测那些中心点落在该格子内的目标，比如，小狗这个目标的中心点在左下角的网格中，那该网格就负责预测狗这个对象。 每个网格中将有多个边界框，在训练时，我们希望每个对象只有一个边界框，比如最终只有一个边界框把这只狗包起来。因此，我们根据哪个边界框与之前标注的重叠度最高，预测对象的位置和概率。 最终包围对象的边界框，就是识别的结果，使用四个描述符进行说明： 边界框的中心位置 边界框的高度 边界框的宽度 识别到对象所属的类 这样就完成了对目标的实时检测，拿到目标的信息之后，就可以进行后续的机器人行为控制了。 我们对目标检测系统运行速度的要求一般都比较高，可以实时处理视频流，比如车辆行驶的动态监测、自然环境中的目标识别，有着非常广泛的应用价值。 回到TogetherROS和旭日X3派的开发板，我们来看下这套软硬件结合的目标检测系统，效率如何。 MIPI相机目标检测 接下来，我们要利用MIPI相机，动态识别图像中各种各样的物体以及他们所在的位置，推理过程使用的是基于COCO数据集训练的80个类别，也就是可以识别80种常用的物体位置。 运行例程 $ cd /app/ai_inference/03_mipi_camera_sample/ $ python3 ./mipi_camera.py 代码解析 mipi_camera.py： #!/usr/bin/env python3 import numpy as np import cv2 import colorsys # Camera API libs from hobot_vio import libsrcampy as srcampy from hobot_dnn import pyeasy_dnn as dnn # detection model class names def get_classes (): return np . array ([ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" , \"bus\" , \"train\" , \"truck\" , \"boat\" , \"traffic light\" , \"fire hydrant\" , \"stop sign\" , \"parking meter\" , \"bench\" , \"bird\" , \"cat\" , \"dog\" , \"horse\" , \"sheep\" , \"cow\" , \"elephant\" , \"bear\" , \"zebra\" , \"giraffe\" , \"backpack\" , \"umbrella\" , \"handbag\" , \"tie\" , \"suitcase\" , \"frisbee\" , \"skis\" , \"snowboard\" , \"sports ball\" , \"kite\" , \"baseball bat\" , \"baseball glove\" , \"skateboard\" , \"surfboard\" , \"tennis racket\" , \"bottle\" , \"wine glass\" , \"cup\" , \"fork\" , \"knife\" , \"spoon\" , \"bowl\" , \"banana\" , \"apple\" , \"sandwich\" , \"orange\" , \"broccoli\" , \"carrot\" , \"hot dog\" , \"pizza\" , \"donut\" , \"cake\" , \"chair\" , \"couch\" , \"potted plant\" , \"bed\" , \"dining table\" , \"toilet\" , \"tv\" , \"laptop\" , \"mouse\" , \"remote\" , \"keyboard\" , \"cell phone\" , \"microwave\" , \"oven\" , \"toaster\" , \"sink\" , \"refrigerator\" , \"book\" , \"clock\" , \"vase\" , \"scissors\" , \"teddy bear\" , \"hair drier\" , \"toothbrush\" ]) def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_RGB2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] def postprocess ( model_output , model_hw_shape , origin_image = None , origin_img_shape = None , score_threshold = 0.5 , nms_threshold = 0.6 , dump_image = False ): input_height = model_hw_shape [ 0 ] input_width = model_hw_shape [ 1 ] if origin_image is not None : origin_image_shape = origin_image . shape [ 0 : 2 ] else : origin_image_shape = origin_img_shape prediction_bbox = decode ( outputs = model_output , score_threshold = score_threshold , origin_shape = origin_image_shape , input_size = 512 ) prediction_bbox = nms ( prediction_bbox , iou_threshold = nms_threshold ) prediction_bbox = np . array ( prediction_bbox ) topk = min ( prediction_bbox . shape [ 0 ], 1000 ) if topk != 0 : idx = np . argpartition ( prediction_bbox [ ... , 4 ], - topk )[ - topk :] prediction_bbox = prediction_bbox [ idx ] if dump_image and origin_image is not None : draw_bboxs ( origin_image , prediction_bbox ) return prediction_bbox def draw_bboxs ( image , bboxes , gt_classes_index = None , classes = get_classes ()): \"\"\"draw the bboxes in the original image \"\"\" num_classes = len ( classes ) image_h , image_w , channel = image . shape hsv_tuples = [( 1.0 * x / num_classes , 1. , 1. ) for x in range ( num_classes )] colors = list ( map ( lambda x : colorsys . hsv_to_rgb ( * x ), hsv_tuples )) colors = list ( map ( lambda x : ( int ( x [ 0 ] * 255 ), int ( x [ 1 ] * 255 ), int ( x [ 2 ] * 255 )), colors )) fontScale = 0.5 bbox_thick = int ( 0.6 * ( image_h + image_w ) / 600 ) for i , bbox in enumerate ( bboxes ): coor = np . array ( bbox [: 4 ], dtype = np . int32 ) if gt_classes_index == None : class_index = int ( bbox [ 5 ]) score = bbox [ 4 ] else : class_index = gt_classes_index [ i ] score = 1 bbox_color = colors [ class_index ] c1 , c2 = ( coor [ 0 ], coor [ 1 ]), ( coor [ 2 ], coor [ 3 ]) cv2 . rectangle ( image , c1 , c2 , bbox_color , bbox_thick ) classes_name = classes [ class_index ] bbox_mess = ' %s : %.2f ' % ( classes_name , score ) t_size = cv2 . getTextSize ( bbox_mess , 0 , fontScale , thickness = bbox_thick // 2 )[ 0 ] cv2 . rectangle ( image , c1 , ( c1 [ 0 ] + t_size [ 0 ], c1 [ 1 ] - t_size [ 1 ] - 3 ), bbox_color , - 1 ) cv2 . putText ( image , bbox_mess , ( c1 [ 0 ], c1 [ 1 ] - 2 ), cv2 . FONT_HERSHEY_SIMPLEX , fontScale , ( 0 , 0 , 0 ), bbox_thick // 2 , lineType = cv2 . LINE_AA ) print ( \" {} is in the picture with confidence: {:.4f} , bbox: {} \" . format ( classes_name , score , coor )) # cv2.imwrite(\"demo.jpg\", image) return image def decode ( outputs , score_threshold , origin_shape , input_size = 512 ): def _distance2bbox ( points , distance ): x1 = points [ ... , 0 ] - distance [ ... , 0 ] y1 = points [ ... , 1 ] - distance [ ... , 1 ] x2 = points [ ... , 0 ] + distance [ ... , 2 ] y2 = points [ ... , 1 ] + distance [ ... , 3 ] return np . stack ([ x1 , y1 , x2 , y2 ], - 1 ) def _scores ( cls , ce ): cls = 1 / ( 1 + np . exp ( - cls )) ce = 1 / ( 1 + np . exp ( - ce )) return np . sqrt ( ce * cls ) def _bbox ( bbox , stride , origin_shape , input_size ): h , w = bbox . shape [ 1 : 3 ] yv , xv = np . meshgrid ( np . arange ( h ), np . arange ( w )) xy = ( np . stack (( yv , xv ), 2 ) + 0.5 ) * stride bbox = _distance2bbox ( xy , bbox ) # opencv read, shape[1] is w, shape[0] is h scale_w = origin_shape [ 1 ] / input_size scale_h = origin_shape [ 0 ] / input_size scale = max ( origin_shape [ 0 ], origin_shape [ 1 ]) / input_size # origin img is pad resized #bbox = bbox * scale # origin img is resized bbox = bbox * [ scale_w , scale_h , scale_w , scale_h ] return bbox bboxes = list () strides = [ 8 , 16 , 32 , 64 , 128 ] for i in range ( len ( strides )): cls = outputs [ i ] . buffer bbox = outputs [ i + 5 ] . buffer ce = outputs [ i + 10 ] . buffer scores = _scores ( cls , ce ) classes = np . argmax ( scores , axis =- 1 ) classes = np . reshape ( classes , [ - 1 , 1 ]) max_score = np . max ( scores , axis =- 1 ) max_score = np . reshape ( max_score , [ - 1 , 1 ]) bbox = _bbox ( bbox , strides [ i ], origin_shape , input_size ) bbox = np . reshape ( bbox , [ - 1 , 4 ]) pred_bbox = np . concatenate ([ bbox , max_score , classes ], axis = 1 ) index = pred_bbox [ ... , 4 ] > score_threshold pred_bbox = pred_bbox [ index ] bboxes . append ( pred_bbox ) return np . concatenate ( bboxes ) def nms ( bboxes , iou_threshold , sigma = 0.3 , method = 'nms' ): def bboxes_iou ( boxes1 , boxes2 ): boxes1 = np . array ( boxes1 ) boxes2 = np . array ( boxes2 ) boxes1_area = ( boxes1 [ ... , 2 ] - boxes1 [ ... , 0 ]) * \\ ( boxes1 [ ... , 3 ] - boxes1 [ ... , 1 ]) boxes2_area = ( boxes2 [ ... , 2 ] - boxes2 [ ... , 0 ]) * \\ ( boxes2 [ ... , 3 ] - boxes2 [ ... , 1 ]) left_up = np . maximum ( boxes1 [ ... , : 2 ], boxes2 [ ... , : 2 ]) right_down = np . minimum ( boxes1 [ ... , 2 :], boxes2 [ ... , 2 :]) inter_section = np . maximum ( right_down - left_up , 0.0 ) inter_area = inter_section [ ... , 0 ] * inter_section [ ... , 1 ] union_area = boxes1_area + boxes2_area - inter_area ious = np . maximum ( 1.0 * inter_area / union_area , np . finfo ( np . float32 ) . eps ) return ious classes_in_img = list ( set ( bboxes [:, 5 ])) best_bboxes = [] for cls in classes_in_img : cls_mask = ( bboxes [:, 5 ] == cls ) cls_bboxes = bboxes [ cls_mask ] while len ( cls_bboxes ) > 0 : max_ind = np . argmax ( cls_bboxes [:, 4 ]) best_bbox = cls_bboxes [ max_ind ] best_bboxes . append ( best_bbox ) cls_bboxes = np . concatenate ( [ cls_bboxes [: max_ind ], cls_bboxes [ max_ind + 1 :]]) iou = bboxes_iou ( best_bbox [ np . newaxis , : 4 ], cls_bboxes [:, : 4 ]) weight = np . ones (( len ( iou ),), dtype = np . float32 ) assert method in [ 'nms' , 'soft-nms' ] if method == 'nms' : iou_mask = iou > iou_threshold weight [ iou_mask ] = 0.0 if method == 'soft-nms' : weight = np . exp ( - ( 1.0 * iou ** 2 / sigma )) cls_bboxes [:, 4 ] = cls_bboxes [:, 4 ] * weight score_mask = cls_bboxes [:, 4 ] > 0. cls_bboxes = cls_bboxes [ score_mask ] return best_bboxes def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) if __name__ == '__main__' : models = dnn . load ( '../models/fcos_512x512_nv12.bin' ) # 打印输入 tensor 的属性 print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) # 打印输出 tensor 的属性 print ( len ( models [ 0 ] . outputs )) for output in models [ 0 ] . outputs : print_properties ( output . properties ) # 获取 Camera 句柄 cam = srcampy . Camera () # 打开 f37 摄像头，并且把输出突出缩小成算法模型的输入尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) # 打开 F37, 初始化视频 pipeline 0 ，设置帧率30fps，缩放图像为 512 x 512 cam . open_cam ( 0 , 1 , 30 , w , h ) # Get HDMI display object disp = srcampy . Display () # For the meaning of parameters, please refer to the relevant documents of HDMI display disp . display ( 0 , 1920 , 1080 ) input_shape = ( h , w ) while True : # 从相机获取分辨率为 512x512 的nv12格式的图像数据， 参数 2 代表从硬件模块IPU中获取 img = cam . get_img ( 2 , 512 , 512 ) # 把图像数据转成 numpy 数据类型 img = np . frombuffer ( img , dtype = np . uint8 ) # 模型推理 outputs = models [ 0 ] . forward ( img ) # 对算法结果进行过滤，去掉执行度低的检测框，计算检测框的交并比去除冗余框，把检测框的坐标还原到原图位置上 prediction_bbox = postprocess ( outputs , input_shape , origin_img_shape = ( 1080 , 1920 )) # 从新获取一张图像，大小缩放成与显示器的分辨率一样的 1920 x 1080, 并且转换成 bgr格式，方便进行绘图操作 origin_image = cam . get_img ( 2 , 1920 , 1080 ) origin_nv12 = np . frombuffer ( origin_image , dtype = np . uint8 ) . reshape ( 1620 , 1920 ) origin_bgr = cv2 . cvtColor ( origin_nv12 , cv2 . COLOR_YUV420SP2BGR ) # 把算法运行后得到的物体检测框绘制到图像上 box_bgr = draw_bboxs ( origin_bgr , prediction_bbox ) # X3 的HDMI输出模块的输入图像格式需要是NV12的，所以需要先把bgr格式转成NV12 box_nv12 = bgr2nv12_opencv ( box_bgr ) # 把 NV12 格式的图像输出给显示器 disp . set_img ( box_nv12 . tobytes ()) cam . close_cam () USB相机目标检测 如果大家手上没有MIPI接口的相机，使用USB相机也可以实现同样的功能。 运行例程 $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 动态目标检测 大家如果没有HDMI显示器的话，也没有问题，刚才的例程，也可以这样来运行，我们通过统一网络环境中的浏览器就可以动态看到结果啦。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/fcosworkconfig.json image_width: = 480 image_height: = 272","text_tokens":["bottle","它会","score","什么","环境","预测","float32","kite","(","下","之前","of","light","union","分类",")","type","因此","软硬件","map","nv12","rgb2yuv","尺寸","在","postprocess","1","packed","data","一般","demo","iou","车辆","%","cv2","please","set","output","truck","r","下角","fontscale","后续","句柄","hdmi","potted","opt","自然","显示","down","结合","cp","cell","best","图片","coco",":","usb","tuples","close","assert","banana","]","api","10","puttext","0.0","，","运动","cls","浏览器","打开","所在","cat","问题","运用","这套","transpose","chair","\"","bash","推理","meshgrid","边界","pad","tensor","sample","到","位置","scores","最终","i420","sheep","5",".","properties","yv","2","目标","!","初始","动态","image","parameters","我们","f37","有","sports","toilet","中心","框","。","通过","sqrt","app","哪个","2f","t","得到","卷积","togetherros","origin","append","接下","motorcycle","7x7","setup","获取","宽度","outputs","section","hw","并","index","坐标","ai","512x512","新","p","去掉","描述符","如何","和","usr","import","tros","boat","拿到","rgb","来看","-","结果","神经","bin","cnn","tv","as","laptop","color","就是","topk","30fps",">","分割","没有","以","标注","旭日","绘图","colorsys","bbox","drier","hobot","解析","#","resized","概率","while","512","dining","不仅","apple","rectangle","glove","1920","height","is","soft","对","...","的话","class","度","nchw","none","操作","负责","person","hsv","要","网络","table","转换成","example","pyeasy","libsrcampy","cvtcolor","vase","cup","他们","%.","都","ball","disp","srcampy","refrigerator","boxes2","display","中将","websocket","大小","layout","mask","输出模块","网格","documents","relevant","物体","[","4","转","dnn","快速","类","len","node","03","重在","原理","skateboard","存在","finfo","场景","line","摄像","接口","使用","skis","信息","基于","width","yolo","y2","缩小","toothbrush","open","最高","以及","$","统一","分成","i","mess","*","某一","dog","cd","vio","x2","y1","属性","换成","xv","的","inference","return","如果","get","272","应用","with","webservice","share","机器人","转换","训练","stride","ones","也","newaxis","parking"," ","microwave","中心点","webserver","format","mouse","分析","同样","与","了","tie","只有","yuv420p","内","giraffe","\\","利用","yuv420sp2bgr","回到","np","这","3","scale","knife","描述",",","{","像头","比","draw","数据","实时","分辨率","tennis","sink","eps","一样","小狗","clock","print","bus","连续","toaster","那些","baseball","idx","s","模型","设置","zeros","not","后","py","distance","inter","x3","便于","sbin","格子","exp","buffer","prediction","、","true","hot","32","神经网","神经网络","sigma","来","对象","cake","=","xy","pipeline","confidence","c2","mipi","绘制","单个","'","例程","nms","picture","simplex","y","def","range","摄像头","bgr","4f","c1","ros2","backpack","30","config","argmax","实时处理","机器","每个","啦","起来","缩小成","hershey","h","object","是","bgr2nv12","meaning","boxes1","狗","the","当","从","128","img","size","硬件","下来","names","area","原图","launch","输入","int32","希望","数据类型","bowl","dtype","算法","broccoli","model","代表","chmod","检测","接下来","racket","bed","gt","int","另外","ipu","wine","相机","类别","16","camera","donut","0.5","concatenate","手上","airplane","env","进行","：","for","shape","stack","一种","bicycle","模块","list","refer","font","各种","更要","frombuffer","..","inputs","为例","左下","常用","cam","浏览","lib","将","包","有着","可以","lambda","runtime","jpg","价值","所以","8","行驶","maximum","分辨","/","remote","高","&&","json","1080","+","w","代码","imwrite","reshape","帧","main","to","种","cow","bboxs","然后","只","集","pizza","类型","理解","广泛","_","0","效率","小成","高度","需要","交","false","并且","系统","colors","train","axis","tobytes","运行","输出","实现","识别","keyboard","打印","功能","}","from","threshold","hydrant","array","对于","大家","opencv","ind","开发","gettextsize","arange","phone","方便","weight","bird","0.6","之后","软硬","snowboard","book","name","planar","启动","fcosworkconfig","classes","根据","1000","看到","bat","umbrella","四个","监测","成","该","多个","glass","255","转成","完成","numpy","enumerate","decode","hair","max","80","orange","缩放","给","carrot","scissors","还原","surfboard","所属","like","突出","执行","要求","显示器","02","load","服务","比如","original","coor","x","suitcase","up","detection","开发板","uint8","fork","benchmark","aa","couch","这个","stop","参数","说明","strides","左下角","去除","spoon","先","oven","一张","right","method","64","num","if","fcos","过程","600","channel","过滤","包围","dump","计算","冗余","x1","ce","0.3","派","bear","就","控制","fire","meter","上","480","elephant","个","file","car","points","else","nginx","一个","处理","中","pro","这样","最为","teddy","假设","in","sign","read","forward","__","uv","格式","1.0","pred","horse","知道","重叠","还要","python3","and","input","时","left","thickness","率","linetype","图像","frisbee","ious","box","thick","plant","sandwich","跟踪","非常","zebra","为","低","行为","distance2bbox","各种各样","source","初始化","落","刚才","min","handbag","把","自然环境","图像格式","libs","minimum","argpartition","视频","那该","速度","models","1620","比较","去","bench","辨率","打印输出","各样","traffic","bboxes","视频流"],"title":"动态目标检测","title_tokens":["动态","目标","检测"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_1","text":"图像物体分类重在分析图像中存在的物体是什么，便于机器理解看到的环境信息，另外一种场景，机器不仅要识别某一物体，还要知道这个物体所在的位置，当物体在运动时，更要快速连续的跟踪，这就是目标检测，重在分析识别到物体在图像中的位置。","text_tokens":["识别","什么","环境","某一","时","这","不仅","一种","图像","的","分类","跟踪","到","位置","物体","理解","更要","快速","机器","这个","中","在","重在","连续","目标","检测","存在","看到","场景","要","就是","另外","分析","是","信息","，","运动","知道","当","。","所在","便于","还要"],"title":"动态目标检测","title_tokens":["动态","目标","检测"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_2","text":"假设我们要识别图像中这只狗的位置，以最为常用的YOLO算法为例，它会运用单个卷积神经网络(CNN) ，将图像分成网格，并预测每个网格的对象概率和边界框。 比如，对于这个图像，Yolo的CNN网络将输入的图片分割成7x7的网格，然后每个网格负责去检测那些中心点落在该格子内的目标，比如，小狗这个目标的中心点在左下角的网格中，那该网格就负责预测狗这个对象。 每个网格中将有多个边界框，在训练时，我们希望每个对象只有一个边界框，比如最终只有一个边界框把这只狗包起来。因此，我们根据哪个边界框与之前标注的重叠度最高，预测对象的位置和概率。 最终包围对象的边界框，就是识别的结果，使用四个描述符进行说明： 边界框的中心位置 边界框的高度 边界框的宽度 识别到对象所属的类 这样就完成了对目标的实时检测，拿到目标的信息之后，就可以进行后续的机器人行为控制了。 我们对目标检测系统运行速度的要求一般都比较高，可以实时处理视频流，比如车辆行驶的动态监测、自然环境中的目标识别，有着非常广泛的应用价值。 回到TogetherROS和旭日X3派的开发板，我们来看下这套软硬件结合的目标检测系统，效率如何。","text_tokens":["识别","它会","神经网","神经网络","概率","环境","对象","预测","对于","(","下","之前","单个","开发",")","因此","对","软硬件","度","之后","实时处理","软硬","机器","每个","负责","起来","在","根据","要","网络","一般","四个","监测","成","车辆","多个","该","狗","完成","都","所属","硬件","要求","下角","中将","输入","网格","比如","后续","希望","自然","结合","开发板","图片","类","这个","说明","算法","、","检测","左下角","使用","信息","，","yolo","最高","运用","分成","这套","包围","进行","：","派","就","控制","边界","的","到","位置","应用","最终","机器人","训练","一个","处理","中","这样","为例"," ","最为","中心点","目标","假设","动态","左下","我们","常用","有","中心","与","框","。","将","包","重叠","了","可以","有着","只有","哪个","价值","卷积","togetherros","内","7x7","行驶","宽度","回到","时","这","高","并","描述","图像","实时","非常","然后","描述符","只","行为","如何","和","广泛","小狗","落","效率","拿到","高度","来看","把","结果","神经","那些","自然环境","cnn","就是","视频","那该","速度","分割","比较","去","系统","以","标注","旭日","x3","格子","视频流","运行"],"title":"目标检测原理","title_tokens":["目标","检测","原理"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#mipi","text":"接下来，我们要利用MIPI相机，动态识别图像中各种各样的物体以及他们所在的位置，推理过程使用的是基于COCO数据集训练的80个类别，也就是可以识别80种常用的物体位置。","text_tokens":["过程","识别","接下","利用","下来","80","推理","mipi","图像","的","数据","个","种","位置","物体","集","各种各样","各种","coco","训练","也","中","接下来","动态","要","我们","就是","常用","使用","是","基于","，","相机","类别","。","所在","可以","各样","他们","以及"],"title":"MIPI相机目标检测","title_tokens":["检测","相机","目标","mipi"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_3","text":"$ cd /app/ai_inference/03_mipi_camera_sample/ $ python3 ./mipi_camera.py","text_tokens":["$","ai","python3","py","inference",".","sample"," ","03","camera","/","cd","app","_","mipi"],"title":"运行例程","title_tokens":["例程","运行"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_4","text":"mipi_camera.py： #!/usr/bin/env python3 import numpy as np import cv2 import colorsys # Camera API libs from hobot_vio import libsrcampy as srcampy from hobot_dnn import pyeasy_dnn as dnn # detection model class names def get_classes (): return np . array ([ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" , \"bus\" , \"train\" , \"truck\" , \"boat\" , \"traffic light\" , \"fire hydrant\" , \"stop sign\" , \"parking meter\" , \"bench\" , \"bird\" , \"cat\" , \"dog\" , \"horse\" , \"sheep\" , \"cow\" , \"elephant\" , \"bear\" , \"zebra\" , \"giraffe\" , \"backpack\" , \"umbrella\" , \"handbag\" , \"tie\" , \"suitcase\" , \"frisbee\" , \"skis\" , \"snowboard\" , \"sports ball\" , \"kite\" , \"baseball bat\" , \"baseball glove\" , \"skateboard\" , \"surfboard\" , \"tennis racket\" , \"bottle\" , \"wine glass\" , \"cup\" , \"fork\" , \"knife\" , \"spoon\" , \"bowl\" , \"banana\" , \"apple\" , \"sandwich\" , \"orange\" , \"broccoli\" , \"carrot\" , \"hot dog\" , \"pizza\" , \"donut\" , \"cake\" , \"chair\" , \"couch\" , \"potted plant\" , \"bed\" , \"dining table\" , \"toilet\" , \"tv\" , \"laptop\" , \"mouse\" , \"remote\" , \"keyboard\" , \"cell phone\" , \"microwave\" , \"oven\" , \"toaster\" , \"sink\" , \"refrigerator\" , \"book\" , \"clock\" , \"vase\" , \"scissors\" , \"teddy bear\" , \"hair drier\" , \"toothbrush\" ]) def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_RGB2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] def postprocess ( model_output , model_hw_shape , origin_image = None , origin_img_shape = None , score_threshold = 0.5 , nms_threshold = 0.6 , dump_image = False ): input_height = model_hw_shape [ 0 ] input_width = model_hw_shape [ 1 ] if origin_image is not None : origin_image_shape = origin_image . shape [ 0 : 2 ] else : origin_image_shape = origin_img_shape prediction_bbox = decode ( outputs = model_output , score_threshold = score_threshold , origin_shape = origin_image_shape , input_size = 512 ) prediction_bbox = nms ( prediction_bbox , iou_threshold = nms_threshold ) prediction_bbox = np . array ( prediction_bbox ) topk = min ( prediction_bbox . shape [ 0 ], 1000 ) if topk != 0 : idx = np . argpartition ( prediction_bbox [ ... , 4 ], - topk )[ - topk :] prediction_bbox = prediction_bbox [ idx ] if dump_image and origin_image is not None : draw_bboxs ( origin_image , prediction_bbox ) return prediction_bbox def draw_bboxs ( image , bboxes , gt_classes_index = None , classes = get_classes ()): \"\"\"draw the bboxes in the original image \"\"\" num_classes = len ( classes ) image_h , image_w , channel = image . shape hsv_tuples = [( 1.0 * x / num_classes , 1. , 1. ) for x in range ( num_classes )] colors = list ( map ( lambda x : colorsys . hsv_to_rgb ( * x ), hsv_tuples )) colors = list ( map ( lambda x : ( int ( x [ 0 ] * 255 ), int ( x [ 1 ] * 255 ), int ( x [ 2 ] * 255 )), colors )) fontScale = 0.5 bbox_thick = int ( 0.6 * ( image_h + image_w ) / 600 ) for i , bbox in enumerate ( bboxes ): coor = np . array ( bbox [: 4 ], dtype = np . int32 ) if gt_classes_index == None : class_index = int ( bbox [ 5 ]) score = bbox [ 4 ] else : class_index = gt_classes_index [ i ] score = 1 bbox_color = colors [ class_index ] c1 , c2 = ( coor [ 0 ], coor [ 1 ]), ( coor [ 2 ], coor [ 3 ]) cv2 . rectangle ( image , c1 , c2 , bbox_color , bbox_thick ) classes_name = classes [ class_index ] bbox_mess = ' %s : %.2f ' % ( classes_name , score ) t_size = cv2 . getTextSize ( bbox_mess , 0 , fontScale , thickness = bbox_thick // 2 )[ 0 ] cv2 . rectangle ( image , c1 , ( c1 [ 0 ] + t_size [ 0 ], c1 [ 1 ] - t_size [ 1 ] - 3 ), bbox_color , - 1 ) cv2 . putText ( image , bbox_mess , ( c1 [ 0 ], c1 [ 1 ] - 2 ), cv2 . FONT_HERSHEY_SIMPLEX , fontScale , ( 0 , 0 , 0 ), bbox_thick // 2 , lineType = cv2 . LINE_AA ) print ( \" {} is in the picture with confidence: {:.4f} , bbox: {} \" . format ( classes_name , score , coor )) # cv2.imwrite(\"demo.jpg\", image) return image def decode ( outputs , score_threshold , origin_shape , input_size = 512 ): def _distance2bbox ( points , distance ): x1 = points [ ... , 0 ] - distance [ ... , 0 ] y1 = points [ ... , 1 ] - distance [ ... , 1 ] x2 = points [ ... , 0 ] + distance [ ... , 2 ] y2 = points [ ... , 1 ] + distance [ ... , 3 ] return np . stack ([ x1 , y1 , x2 , y2 ], - 1 ) def _scores ( cls , ce ): cls = 1 / ( 1 + np . exp ( - cls )) ce = 1 / ( 1 + np . exp ( - ce )) return np . sqrt ( ce * cls ) def _bbox ( bbox , stride , origin_shape , input_size ): h , w = bbox . shape [ 1 : 3 ] yv , xv = np . meshgrid ( np . arange ( h ), np . arange ( w )) xy = ( np . stack (( yv , xv ), 2 ) + 0.5 ) * stride bbox = _distance2bbox ( xy , bbox ) # opencv read, shape[1] is w, shape[0] is h scale_w = origin_shape [ 1 ] / input_size scale_h = origin_shape [ 0 ] / input_size scale = max ( origin_shape [ 0 ], origin_shape [ 1 ]) / input_size # origin img is pad resized #bbox = bbox * scale # origin img is resized bbox = bbox * [ scale_w , scale_h , scale_w , scale_h ] return bbox bboxes = list () strides = [ 8 , 16 , 32 , 64 , 128 ] for i in range ( len ( strides )): cls = outputs [ i ] . buffer bbox = outputs [ i + 5 ] . buffer ce = outputs [ i + 10 ] . buffer scores = _scores ( cls , ce ) classes = np . argmax ( scores , axis =- 1 ) classes = np . reshape ( classes , [ - 1 , 1 ]) max_score = np . max ( scores , axis =- 1 ) max_score = np . reshape ( max_score , [ - 1 , 1 ]) bbox = _bbox ( bbox , strides [ i ], origin_shape , input_size ) bbox = np . reshape ( bbox , [ - 1 , 4 ]) pred_bbox = np . concatenate ([ bbox , max_score , classes ], axis = 1 ) index = pred_bbox [ ... , 4 ] > score_threshold pred_bbox = pred_bbox [ index ] bboxes . append ( pred_bbox ) return np . concatenate ( bboxes ) def nms ( bboxes , iou_threshold , sigma = 0.3 , method = 'nms' ): def bboxes_iou ( boxes1 , boxes2 ): boxes1 = np . array ( boxes1 ) boxes2 = np . array ( boxes2 ) boxes1_area = ( boxes1 [ ... , 2 ] - boxes1 [ ... , 0 ]) * \\ ( boxes1 [ ... , 3 ] - boxes1 [ ... , 1 ]) boxes2_area = ( boxes2 [ ... , 2 ] - boxes2 [ ... , 0 ]) * \\ ( boxes2 [ ... , 3 ] - boxes2 [ ... , 1 ]) left_up = np . maximum ( boxes1 [ ... , : 2 ], boxes2 [ ... , : 2 ]) right_down = np . minimum ( boxes1 [ ... , 2 :], boxes2 [ ... , 2 :]) inter_section = np . maximum ( right_down - left_up , 0.0 ) inter_area = inter_section [ ... , 0 ] * inter_section [ ... , 1 ] union_area = boxes1_area + boxes2_area - inter_area ious = np . maximum ( 1.0 * inter_area / union_area , np . finfo ( np . float32 ) . eps ) return ious classes_in_img = list ( set ( bboxes [:, 5 ])) best_bboxes = [] for cls in classes_in_img : cls_mask = ( bboxes [:, 5 ] == cls ) cls_bboxes = bboxes [ cls_mask ] while len ( cls_bboxes ) > 0 : max_ind = np . argmax ( cls_bboxes [:, 4 ]) best_bbox = cls_bboxes [ max_ind ] best_bboxes . append ( best_bbox ) cls_bboxes = np . concatenate ( [ cls_bboxes [: max_ind ], cls_bboxes [ max_ind + 1 :]]) iou = bboxes_iou ( best_bbox [ np . newaxis , : 4 ], cls_bboxes [:, : 4 ]) weight = np . ones (( len ( iou ),), dtype = np . float32 ) assert method in [ 'nms' , 'soft-nms' ] if method == 'nms' : iou_mask = iou > iou_threshold weight [ iou_mask ] = 0.0 if method == 'soft-nms' : weight = np . exp ( - ( 1.0 * iou ** 2 / sigma )) cls_bboxes [:, 4 ] = cls_bboxes [:, 4 ] * weight score_mask = cls_bboxes [:, 4 ] > 0. cls_bboxes = cls_bboxes [ score_mask ] return best_bboxes def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) if __name__ == '__main__' : models = dnn . load ( '../models/fcos_512x512_nv12.bin' ) # 打印输入 tensor 的属性 print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) # 打印输出 tensor 的属性 print ( len ( models [ 0 ] . outputs )) for output in models [ 0 ] . outputs : print_properties ( output . properties ) # 获取 Camera 句柄 cam = srcampy . Camera () # 打开 f37 摄像头，并且把输出突出缩小成算法模型的输入尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) # 打开 F37, 初始化视频 pipeline 0 ，设置帧率30fps，缩放图像为 512 x 512 cam . open_cam ( 0 , 1 , 30 , w , h ) # Get HDMI display object disp = srcampy . Display () # For the meaning of parameters, please refer to the relevant documents of HDMI display disp . display ( 0 , 1920 , 1080 ) input_shape = ( h , w ) while True : # 从相机获取分辨率为 512x512 的nv12格式的图像数据， 参数 2 代表从硬件模块IPU中获取 img = cam . get_img ( 2 , 512 , 512 ) # 把图像数据转成 numpy 数据类型 img = np . frombuffer ( img , dtype = np . uint8 ) # 模型推理 outputs = models [ 0 ] . forward ( img ) # 对算法结果进行过滤，去掉执行度低的检测框，计算检测框的交并比去除冗余框，把检测框的坐标还原到原图位置上 prediction_bbox = postprocess ( outputs , input_shape , origin_img_shape = ( 1080 , 1920 )) # 从新获取一张图像，大小缩放成与显示器的分辨率一样的 1920 x 1080, 并且转换成 bgr格式，方便进行绘图操作 origin_image = cam . get_img ( 2 , 1920 , 1080 ) origin_nv12 = np . frombuffer ( origin_image , dtype = np . uint8 ) . reshape ( 1620 , 1920 ) origin_bgr = cv2 . cvtColor ( origin_nv12 , cv2 . COLOR_YUV420SP2BGR ) # 把算法运行后得到的物体检测框绘制到图像上 box_bgr = draw_bboxs ( origin_bgr , prediction_bbox ) # X3 的HDMI输出模块的输入图像格式需要是NV12的，所以需要先把bgr格式转成NV12 box_nv12 = bgr2nv12_opencv ( box_bgr ) # 把 NV12 格式的图像输出给显示器 disp . set_img ( box_nv12 . tobytes ()) cam . close_cam ()","text_tokens":["bottle","score","float32","kite","(","of","light","union",")","type","map","nv12","rgb2yuv","尺寸","postprocess","1","packed","data","demo","iou","%","cv2","please","set","output","truck","fontscale","句柄","hdmi","potted","显示","down","cell","best",":","tuples","close","assert","banana","]","api","10","puttext","0.0","，","cls","打开","cat","transpose","chair","\"","推理","meshgrid","pad","tensor","到","位置","scores","i420","sheep","5",".","properties","yv","2","!","初始","image","parameters","f37","sports","toilet","框","sqrt","2f","t","得到","append","origin","motorcycle","获取","outputs","section","hw","并","index","坐标","512x512","新","去掉","import","usr","boat","rgb","-","结果","bin","tv","laptop","as","color","topk","30fps",">","绘图","colorsys","bbox","drier","hobot","#","resized","while","512","dining","apple","rectangle","glove","1920","height","is","soft","对","...","class","度","nchw","none","操作","person","hsv","table","转换成","pyeasy","libsrcampy","cvtcolor","vase","cup","%.","ball","disp","srcampy","refrigerator","boxes2","display","大小","layout","mask","输出模块","documents","relevant","物体","[","4","转","dnn","len","skateboard","finfo","line","摄像","skis","width","y2","缩小","toothbrush","open","i","mess","*","dog","vio","x2","属性","y1","换成","xv","的","return","get","with","转换","stride","ones","newaxis","parking"," ","microwave","format","mouse","与","tie","yuv420p","giraffe","\\","yuv420sp2bgr","np","3","scale","knife",",","{","像头","比","draw","数据","分辨率","tennis","sink","eps","一样","clock","print","bus","toaster","idx","baseball","s","模型","设置","zeros","not","后","py","distance","inter","x3","exp","buffer","prediction","true","hot","32","sigma","cake","=","xy","pipeline","confidence","c2","mipi","绘制","'","nms","picture","simplex","y","def","range","摄像头","bgr","4f","c1","backpack","30","argmax","缩小成","hershey","h","object","bgr2nv12","是","meaning","boxes1","the","从","128","img","size","硬件","names","area","原图","输入","int32","数据类型","bowl","dtype","broccoli","算法","model","代表","检测","racket","bed","gt","int","ipu","wine","16","相机","camera","donut","0.5","concatenate","airplane","env","进行","：","for","shape","stack","bicycle","模块","list","refer","font","frombuffer","..","inputs","cam","lambda","jpg","所以","8","maximum","分辨","/","remote","1080","+","w","imwrite","reshape","帧","main","to","cow","bboxs","pizza","类型","0","_","小成","需要","交","false","并且","colors","train","axis","tobytes","运行","输出","keyboard","打印","}","from","threshold","hydrant","array","opencv","ind","gettextsize","arange","phone","方便","weight","bird","0.6","book","snowboard","name","planar","classes","1000","bat","umbrella","成","glass","255","转成","numpy","enumerate","decode","hair","max","缩放","orange","给","carrot","scissors","还原","surfboard","like","突出","执行","显示器","load","original","coor","x","suitcase","up","detection","uint8","fork","aa","couch","stop","参数","strides","去除","spoon","先","oven","一张","right","method","64","num","if","fcos","600","channel","过滤","dump","计算","冗余","x1","ce","0.3","bear","fire","meter","上","elephant","car","points","else","中","pro","teddy","in","sign","read","forward","__","uv","格式","1.0","pred","horse","python3","and","input","left","thickness","率","linetype","图像","frisbee","ious","box","thick","plant","sandwich","zebra","为","低","distance2bbox","初始化","min","handbag","把","图像格式","libs","minimum","argpartition","视频","models","1620","bench","辨率","打印输出","traffic","bboxes"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#usb","text":"如果大家手上没有MIPI接口的相机，使用USB相机也可以实现同样的功能。","text_tokens":["实现","接口","使用","的","功能","也","如果","相机","，","没有","usb","同样","。","可以","大家","手上","mipi"],"title":"USB相机目标检测","title_tokens":["相机","usb","目标","检测"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_5","text":"$ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py","text_tokens":["$","ai","python3","py","inference",".","sample","usb"," ","camera","/","cd","app","02","_","fcos"],"title":"运行例程","title_tokens":["例程","运行"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_6","text":"大家如果没有HDMI显示器的话，也没有问题，刚才的例程，也可以这样来运行，我们通过统一网络环境中的浏览器就可以动态看到结果啦。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/fcosworkconfig.json image_width: = 480 image_height: = 272","text_tokens":["hobot","#","环境","来","=","大家","height","例程","ros2","的话","config","启动","啦","fcosworkconfig","网络","看到","example","r","显示器","launch","websocket","服务","hdmi","opt","x","显示","cp","benchmark","dnn",":","node","chmod","，","width","浏览器","问题","$","统一","cd","bash","就","480","的","如果","file","272","webservice","share","nginx",".","也","中","这样"," ","webserver","动态","image","我们","浏览","lib","。","runtime","可以","通过","setup","/","&&","json","+","p","source","tros","_","刚才","-","结果","py","没有","sbin","运行"],"title":"动态目标检测","title_tokens":["动态","目标","检测"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/","text":"人体检测与跟踪 不知道大家有没有玩过类似XBOX的体感游戏机，上边会有一个相机，动态识别我们的动作，比如跳舞、打球，是不是还挺神奇的，这就是人体检测与跟踪的应用。 TogetherROS中也集成了一套类似的算法，可以识别人体、人头、人脸、人手等一系列关键点，我们来体验一下。 编程开发方法 先来看一个人体识别的基础应用，我们驱动相机后，实时采样视觉信息，然后再通过检测算法，识别每一幅图片中人体位置，并把识别的结果保存成一张图片，便于我们查看。 运行例程 # 下载例程代码（与之前课程下载的代码一致） $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build # 终端1，运行相机 $ source /opt/tros/setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p out_format: = nv12 -p image_width: = 960 -p image_height: = 544 -p video_device: = F37 # 终端2，运行例程 $ source /opt/tros/setup.bash $ source ./install/local_setup.bash $ mkdir -p config && cp -r /opt/tros/lib/dnn_node_example/config/multitask_body_kps_960x544.hbm config/ $ ros2 run cpp_dnn_demo cpp_dnn_demo --ros-args -p image: = config/test.jpg 代码解析 #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" #include \"dnn_node/dnn_node.h\" #include \"dnn_node/util/image_proc.h\" #include \"sensor_msgs/msg/image.hpp\" using namespace hobot :: dnn_node ; class BodyDetNode : public DnnNode { public : BodyDetNode ( const std :: string & node_name = \"body_det\" , const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : DnnNode ( node_name , options ) { // 获取模型输入图片的尺寸，包括图片的宽model_input_width_和高model_input_height ，用于模型前处理 if ( Init () != 0 || GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ) < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Node init fail!\" ); } //创建图片消息的subscriber，订阅的topic为”/image_raw”，消息类型为sensor_msgs::msg::Image。订阅到的图片用于算法模型推理 ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( \"/image_raw\" , 10 , std :: bind ( & BodyDetNode :: FeedImg , this , std :: placeholders :: _1 )); } ~ BodyDetNode () override {} void FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr msg ); protected : int SetNodePara () override { if ( ! dnn_node_para_ptr_ ) return -1 ; //指定模型推理使用的模型文件名和模型名 dnn_node_para_ptr_ -> model_file = \"config/multitask_body_kps_960x544.hbm\" ; dnn_node_para_ptr_ -> model_name = \"multitask_body_kps_960x544\" ; //指定模型输出的人体框的解析方法，其中人体框输出索引为box_output_index_ //使用的解析方法为hobot_dnn预定义的检测框解析方法FaceHandDetectionOutputParser。 std :: shared_ptr < OutputParser > box_out_parser = std :: make_shared < FaceHandDetectionOutputParser > (); dnn_node_para_ptr_ -> output_parsers_ . emplace_back ( std :: make_pair ( box_output_index_ , box_out_parser ) ); return 0 ; } int PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) override ; private : int model_input_width_ = -1 ; int model_input_height_ = -1 ; const int32_t box_output_index_ = 1 ; sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg_ ; rclcpp :: Subscription < sensor_msgs :: msg :: Image >:: ConstSharedPtr ros_img_subscription_ = nullptr ; }; //输出模型结果，并将结果渲染到图片后保存在本地 int BodyDetNode::PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( node_output -> outputs . empty () || static_cast < int32_t > ( node_output -> outputs . size ()) < box_output_index_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid outputs\" ); return -1 ; } auto * filter2d_result = dynamic_cast < Filter2DResult *> ( node_output -> outputs [ box_output_index_ ]. get ()); if ( ! filter2d_result ) return -1 ; std :: stringstream ss ; ss << \"img encoding: \" << img_msg_ -> encoding << \", stamp: \" << img_msg_ -> header . stamp . sec << \",\" << img_msg_ -> header . stamp . nanosec << \" \\n out box size: \" << filter2d_result -> boxes . size () << \" \\n \" ; cv :: Mat nv12 ( img_msg_ -> height * 3 / 2 , img_msg_ -> width , CV_8UC1 , const_cast < char *> ( reinterpret_cast < const char *> ( img_msg_ -> data . data ()))); cv :: Mat bgr ; cv :: cvtColor ( nv12 , bgr , CV_YUV2BGR_NV12 ); for ( auto & rect : filter2d_result -> boxes ) { ss << \"rect: \" << rect . left << \" \" << rect . top << \" \" << rect . right << \" \" << rect . bottom << \" \\n \" ; // 图片渲染 cv :: rectangle ( bgr , cv :: Point ( rect . left , rect . top ), cv :: Point ( rect . right , rect . bottom ), cv :: Scalar ( 255 , 0 , 0 ), 3 ); } std :: string result_image = \"render_\" + std :: to_string ( img_msg_ -> header . stamp . sec ) + \".\" + std :: to_string ( img_msg_ -> header . stamp . nanosec ) + \".jpg\" ; ss << \"Render img to file: \" << result_image ; RCLCPP_INFO ( rclcpp :: get_logger ( \"example\" ), \"%s\" , ss . str (). c_str ()); cv :: imwrite ( result_image , bgr ); return 0 ; } //将nv12格式的图片转成模型输入的数据类型DNNInput后，输入给推理任务 void BodyDetNode::FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg ) return ; if ( \"nv12\" != img_msg -> encoding ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Only support nv12 img encoding!\" ); return ; } img_msg_ = img_msg ; // 创建模型输入数据 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { ImageProc :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ )}; // 运行推理，DnnNode基类中定义并实现的启动推理接口。 Run ( inputs ); } int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < BodyDetNode > ()); rclcpp :: shutdown (); return 0 ; } 人体检测与跟踪 结果保存成图片，虽然便于保留数据，但是不利于动态看到效果，我们不如再来实时动态效果显示。 在这个案例中，我们在之前人体识别的基础上，进一步实现了人体部位的识别和骨骼、眼神等关键点的识别，比如头、脸、身体、手掌、眼睛。 识别的结果同样是通过浏览器来进行查看。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . $ ros2 launch /opt/tros/share/mono2d_body_detection/launch/hobot_mono2d_body_detection.launch.py","text_tokens":["”","一步","dnnnode","c","stamp","(","之前",")","gitee","scalar","nv12","emplace","create","尺寸","在","postprocess","1","data","include","demo","等","%","前","static","output","info","r","文件","opt","名","显示","cp","渲染","图片",":","是不是","]","imgproc","10","git","rect","玩过","，","人手","浏览器","void","人脸","error","placeholders","header","bash","\"","para","推理","|","位置","到","vector",".","2","using","!","动态","image","我们","f37","有","框","。",";","通过","t","togetherros","960","setup","core","获取","指定","神奇","outputs","getnv12pyramidfromnv12img","并","index","src","不利于","override","logger","p","课程","和","tros","上边","getmodelinputsize","来看","-","结果","sec","rclcpp","一致","就是",">","mat","没有","宽","install","hobot","解析","#","一幅","sensor","dev","argv","体验","rectangle","height","cpp","const","基类","集成","class","pair","~","example","det","cvtcolor","xbox","encoding","websocket","人头","string","tutorials","multitask","options","parsers","ptr","创建","游戏机","[","转","dnn","device","node","再","yuv2bgr","colcon","类似","接口","使用","信息","width","dnninput","cast","$","*","cd","fail","的","return","订阅","get","auto","应用","webservice","视觉","share","方法","也"," ","webserver","驱动","format","同样","与","8uc1","str","了","头","体感","关键点","预定","parser","其中","clone","\\","这","3","stringstream","{",",","util","setnodepara","数据","实时","人体","mkdir","namespace","打球","cv","bodydetnode","imgcodecs","模型","s","后","会","ss","py","imageproc","便于","sbin","挺","动态效果","骨骼","、","本地","任务","local","来","一下","=","包括","mipi","例程","bgr","不","消息","眼睛","ros2","dnnnodeoutput","有没有","hbm","config","960x544","https","h","&","init","是","案例","基础","boxes","img","size","invalid","终端","launch","输入","empty","int32","一系","利于","数据类型","查看","索引","算法","model","topic","检测","chmod","眼神","（","每","int","用于","相机","out","msgs","跳舞","进行","进一步","for","reinterpret","inputs","dynamic","手掌","argc","下载","cam","subscription","浏览","lib","将","可以","）","jpg","/","高","&&","+","constsharedptr","代码","imwrite","开发方法","body","to","main","虽然","然后","render","类型","0","_","public","msg","userdata","bottom","不利","文件名","--","bind","义","脸","ros","运行","部位","输出","实现","back","识别","}","kps","大家","only","top","开发","544","result","raw","filter2dresult","filter2d","name","启动","subscriber","video","nanosec","看到","outputparser","成","采样","255","private","hpp","游戏","还","给","nodeoptions","char","服务","比如","x","detection","这个","point","先","nullptr","一张","right","if","shared","test","但是","n","facehanddetectionoutputparser","上","<","file","this","shutdown","nginx","一个","处理","中","定义","com","mono2d","格式","build","编程","知道","std","保留","关键","support","一系列","不如","proc","input","left","box","args","guyuehome","跟踪","为","一套","source","动作","protected","ws","保存","把","身体","系列","不是","spin","run","feedimg","效果","make","opencv2"],"title":"人体检测与跟踪","title_tokens":["与","人体","检测","跟踪"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_1","text":"不知道大家有没有玩过类似XBOX的体感游戏机，上边会有一个相机，动态识别我们的动作，比如跳舞、打球，是不是还挺神奇的，这就是人体检测与跟踪的应用。 TogetherROS中也集成了一套类似的算法，可以识别人体、人头、人脸、人手等一系列关键点，我们来体验一下。","text_tokens":["togetherros","识别","跳舞","神奇","来","一下","这","体验","大家","还","人头","的","比如","不","跟踪","一系","人体","应用","一套","游戏机","有没有","体感","上边","打球","动作","集成","一个","也","中"," ","算法","是不是","检测","动态","不是","会","系列","类似","我们","就是","有","人脸","关键点","等","玩过","，","相机","没有","知道","与","。","人手","了","可以","挺","关键","游戏","xbox","、","一系列"],"title":"人体检测与跟踪","title_tokens":["与","人体","检测","跟踪"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_2","text":"先来看一个人体识别的基础应用，我们驱动相机后，实时采样视觉信息，然后再通过检测算法，识别每一幅图片中人体位置，并把识别的结果保存成一张图片，便于我们查看。","text_tokens":["识别","一幅","并","的","实时","然后","位置","人体","应用","视觉","图片","一个","保存","中","查看","来看","算法","再","驱动","把","结果","检测","后","每","我们","先","成","信息","一张","，","相机","采样","。","便于","基础","通过"],"title":"编程开发方法","title_tokens":["编程","开发方法","开发","方法"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_3","text":"# 下载例程代码（与之前课程下载的代码一致） $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build # 终端1，运行相机 $ source /opt/tros/setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p out_format: = nv12 -p image_width: = 960 -p image_height: = 544 -p video_device: = F37 # 终端2，运行例程 $ source /opt/tros/setup.bash $ source ./install/local_setup.bash $ mkdir -p config && cp -r /opt/tros/lib/dnn_node_example/config/multitask_body_kps_960x544.hbm config/ $ ros2 run cpp_dnn_demo cpp_dnn_demo --ros-args -p image: = config/test.jpg","text_tokens":["install","#","local","=","dev","kps","mipi","之前","height","例程","gitee","cpp","ros2","544","hbm","nv12","config","960x544","video","https","1","example","demo","r","终端","tutorials","multitask","opt","cp","dnn",":","device","node","（","colcon","git","，","相机","width","out","$","test","cd","bash","的","."," ","2","com","format","image","下载","f37","cam","与","build","lib","）","jpg","togetherros","clone","setup","960","/","&&","src","代码","body","args","guyuehome","p","课程","mkdir","source","_","tros","ws","-","userdata","一致","run","--","ros","运行"],"title":"运行例程","title_tokens":["例程","运行"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_4","text":"#include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" #include \"dnn_node/dnn_node.h\" #include \"dnn_node/util/image_proc.h\" #include \"sensor_msgs/msg/image.hpp\" using namespace hobot :: dnn_node ; class BodyDetNode : public DnnNode { public : BodyDetNode ( const std :: string & node_name = \"body_det\" , const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : DnnNode ( node_name , options ) { // 获取模型输入图片的尺寸，包括图片的宽model_input_width_和高model_input_height ，用于模型前处理 if ( Init () != 0 || GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ) < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Node init fail!\" ); } //创建图片消息的subscriber，订阅的topic为”/image_raw”，消息类型为sensor_msgs::msg::Image。订阅到的图片用于算法模型推理 ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( \"/image_raw\" , 10 , std :: bind ( & BodyDetNode :: FeedImg , this , std :: placeholders :: _1 )); } ~ BodyDetNode () override {} void FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr msg ); protected : int SetNodePara () override { if ( ! dnn_node_para_ptr_ ) return -1 ; //指定模型推理使用的模型文件名和模型名 dnn_node_para_ptr_ -> model_file = \"config/multitask_body_kps_960x544.hbm\" ; dnn_node_para_ptr_ -> model_name = \"multitask_body_kps_960x544\" ; //指定模型输出的人体框的解析方法，其中人体框输出索引为box_output_index_ //使用的解析方法为hobot_dnn预定义的检测框解析方法FaceHandDetectionOutputParser。 std :: shared_ptr < OutputParser > box_out_parser = std :: make_shared < FaceHandDetectionOutputParser > (); dnn_node_para_ptr_ -> output_parsers_ . emplace_back ( std :: make_pair ( box_output_index_ , box_out_parser ) ); return 0 ; } int PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) override ; private : int model_input_width_ = -1 ; int model_input_height_ = -1 ; const int32_t box_output_index_ = 1 ; sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg_ ; rclcpp :: Subscription < sensor_msgs :: msg :: Image >:: ConstSharedPtr ros_img_subscription_ = nullptr ; }; //输出模型结果，并将结果渲染到图片后保存在本地 int BodyDetNode::PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( node_output -> outputs . empty () || static_cast < int32_t > ( node_output -> outputs . size ()) < box_output_index_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid outputs\" ); return -1 ; } auto * filter2d_result = dynamic_cast < Filter2DResult *> ( node_output -> outputs [ box_output_index_ ]. get ()); if ( ! filter2d_result ) return -1 ; std :: stringstream ss ; ss << \"img encoding: \" << img_msg_ -> encoding << \", stamp: \" << img_msg_ -> header . stamp . sec << \",\" << img_msg_ -> header . stamp . nanosec << \" \\n out box size: \" << filter2d_result -> boxes . size () << \" \\n \" ; cv :: Mat nv12 ( img_msg_ -> height * 3 / 2 , img_msg_ -> width , CV_8UC1 , const_cast < char *> ( reinterpret_cast < const char *> ( img_msg_ -> data . data ()))); cv :: Mat bgr ; cv :: cvtColor ( nv12 , bgr , CV_YUV2BGR_NV12 ); for ( auto & rect : filter2d_result -> boxes ) { ss << \"rect: \" << rect . left << \" \" << rect . top << \" \" << rect . right << \" \" << rect . bottom << \" \\n \" ; // 图片渲染 cv :: rectangle ( bgr , cv :: Point ( rect . left , rect . top ), cv :: Point ( rect . right , rect . bottom ), cv :: Scalar ( 255 , 0 , 0 ), 3 ); } std :: string result_image = \"render_\" + std :: to_string ( img_msg_ -> header . stamp . sec ) + \".\" + std :: to_string ( img_msg_ -> header . stamp . nanosec ) + \".jpg\" ; ss << \"Render img to file: \" << result_image ; RCLCPP_INFO ( rclcpp :: get_logger ( \"example\" ), \"%s\" , ss . str (). c_str ()); cv :: imwrite ( result_image , bgr ); return 0 ; } //将nv12格式的图片转成模型输入的数据类型DNNInput后，输入给推理任务 void BodyDetNode::FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg ) return ; if ( \"nv12\" != img_msg -> encoding ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Only support nv12 img encoding!\" ); return ; } img_msg_ = img_msg ; // 创建模型输入数据 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { ImageProc :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ )}; // 运行推理，DnnNode基类中定义并实现的启动推理接口。 Run ( inputs ); } int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < BodyDetNode > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["输出","实现","hobot","解析","#","back","”","任务","}","sensor","=","dnnnode","argv","c","stamp","kps","rectangle","包括","(","only","top","height","bgr",")","消息","scalar","dnnnodeoutput","const","基类","hbm","result","raw","config","emplace","class","create","960x544","pair","nv12","filter2dresult","尺寸","filter2d","name","启动","subscriber","在","postprocess","1","nanosec","data","h","&","include","example","init","~","outputparser","成","det","cvtcolor","%","255","private","hpp","boxes","img","给","nodeoptions","前","size","static","encoding","output","info","invalid","char","输入","string","empty","int32","multitask","文件","options","名","parsers","ptr","创建","渲染","[","转","数据类型","图片","dnn",":","node","索引","算法","model","topic","检测","yuv2bgr","point","]","imgproc","10","int","接口","nullptr","使用","rect","right","用于","，","width","dnninput","void","out","error","placeholders","cast","if","msgs","header","shared","*","\"","n","para","for","推理","fail","facehanddetectionoutputparser","的","return","<","订阅","file","|","get","到","auto","vector","this","reinterpret","shutdown","方法",".","处理","中","inputs","dynamic"," ","定义","2","using","!","image","argc","格式","subscription","8uc1","std","框","。","将","str",";","t","support","预定","parser","jpg","其中","core","\\","获取","proc","指定","input","/","left","高","outputs","3","并","index","{",",","stringstream","constsharedptr","box","util","+","imwrite","setnodepara","override","logger","body","数据","to","main","为","render","人体","和","类型","namespace","_","0","protected","getmodelinputsize","保存","cv","bodydetnode","public","-","结果","sec","msg","imgcodecs","rclcpp","模型","s","后","bottom","ss","spin","文件名","run",">","mat","feedimg","imageproc","make","opencv2","bind","宽","义","getnv12pyramidfromnv12img","ros","运行","本地"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_5","text":"结果保存成图片，虽然便于保留数据，但是不利于动态看到效果，我们不如再来实时动态效果显示。 在这个案例中，我们在之前人体识别的基础上，进一步实现了人体部位的识别和骨骼、眼神等关键点的识别，比如头、脸、身体、手掌、眼睛。 识别的结果同样是通过浏览器来进行查看。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . $ ros2 launch /opt/tros/share/mono2d_body_detection/launch/hobot_mono2d_body_detection.launch.py","text_tokens":["实现","hobot","识别","#","一步","来","之前","例程","眼睛","ros2","config","启动","在","看到","成","是","等","案例","基础","r","launch","websocket","服务","比如","opt","x","显示","detection","cp","利于","图片","这个","查看","再","chmod","眼神","，","浏览器","骨骼","$","进行","但是","进一步","cd","bash","上","的","webservice","share","nginx",".","中"," ","webserver","手掌","动态","mono2d","我们","浏览","同样","保留","lib","。","了","头","通过","关键","关键点","不如","setup","/","&&","+","不利于","body","数据","虽然","实时","p","人体","和","source","tros","_","保存","-","结果","身体","不利","py","效果","便于","sbin","脸","动态效果","、","运行","部位"],"title":"人体检测与跟踪","title_tokens":["与","人体","检测","跟踪"]}]}