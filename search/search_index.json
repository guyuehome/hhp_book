{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。 本教程将会以旭日X3派为平台，介绍地平线机器人开发平台的使用原理与方法。 教程链接汇总 旭日X3派开发板使用手册： https://developer.horizon.ai/api/v1/fileData/documents_pi/index.html 机器人开发平台使用手册： https://developer.horizon.ai/api/v1/fileData/TogetherROS/index.html 视频课程： https://class.guyuehome.com/all/10284445/19617453 图文教程： https://hhp.guyuehome.com/ 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/92 博客泡圈： https://www.guyuehome.com/","text_tokens":["作为","机器","教程","泡圈","工具","id","部分","动作","。","感知","计算","课程","操作系统","各种各样","复杂","链接","平台","电机","层面","原理","更","开发板","开发","com","是","传感","https","带来","：",":","documents","92","filedata","大脑","ai","_","all","月","地平线","全新","操作","进行","等等","与"," ","博客","、","环境","一个","使用","horizon","19617453","给","推出","pi",".","问答","使用手册","方法","信息","帮助","行业","index","/","guyuehome","各样","算法","手册","介绍","驱动","程式","x3","包括","的","developer","circledetail","机器人","软件","6","本","规控","年","等","数据","10284445","多","非常","v1","系统","执行","2022","hhp","www","togetherros","api","旭日","各种","汇总","为","一代","，","感器","主控","派","将会","视频","html","传感器","硬件","地平","图文","正式","引言","bubble","以","在","非常复杂","class"],"title":"**引言**","title_tokens":["*","引言"]},{"location":"#_1","text":"机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。 本教程将会以旭日X3派为平台，介绍地平线机器人开发平台的使用原理与方法。","text_tokens":["作为","机器","教程","工具","部分","动作","。","感知","计算","操作系统","各种各样","复杂","平台","电机","层面","原理","更","开发","是","传感","带来","：","大脑","月","地平线","全新","操作","进行","等等","与"," ","、","环境","一个","使用","给","推出","方法","信息","帮助","行业","各样","算法","介绍","驱动","程式","x3","包括","的","机器人","软件","6","本","规控","年","等","数据","多","非常","系统","执行","2022","旭日","各种","为","一代","，","感器","主控","派","将会","传感器","硬件","地平","正式","以","在","非常复杂"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"旭日X3派开发板使用手册： https://developer.horizon.ai/api/v1/fileData/documents_pi/index.html 机器人开发平台使用手册： https://developer.horizon.ai/api/v1/fileData/TogetherROS/index.html 视频课程： https://class.guyuehome.com/all/10284445/19617453 图文教程： https://hhp.guyuehome.com/ 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/92 博客泡圈： https://www.guyuehome.com/","text_tokens":["all","机器","www","hhp","手册","教程","泡圈","/","togetherros","x3","api","id","旭日","课程"," ","developer","circledetail","博客","派","平台","视频","机器人","html","开发板","使用","horizon","19617453","开发","com","guyuehome","图文","pi","https",".","问答","使用手册","：",":","documents","bubble","92","10284445","filedata","index","v1","ai","class","_"],"title":"教程链接汇总","title_tokens":["教程","链接","汇总"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["模式","机器","创新","致力","但","交流","建立","有限","联系","《","质量","。","赋能","追究其","课程","2011","法律","责任","地区","违反","创建","法律责任","产品","平台","实践","明者","出版","众多","未来","作品","开发","com","是","+","线上","120","公司","课件","究其","用户","学","万人","至今","或","依法","@","精锋","ai","仅限","交流学习","个人","学习","进行","学习者","内容","高质量","武汉","未经","与","生态","华语","镜像","brand","超过","请","努力","声明"," ","其它","合法","、","人才","不","源码","构建","集","致力于","企业","捆绑","单位","使用","追究","校企",".","均","授权","有限公司","将","和","guyuehome","科技","》","抄录","包括","上","人才培养","的","书面","被","高校","高质","知名","古月","限于","机器人","本","畅销","及","网站","年","对本","等","通过","许可","合作","声明者","）","社区","任何","www","培养","图书","版权","修改","万字","有权","销售","不得","居","面向","ros","为","一体","（","，","提供","优质","拥有","视频","传播","累积","如需","所有","微控","上述","面向未来","复制","1000","小时"],"title":"关于我们","title_tokens":["我们","关于"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["模式","机器","创新","致力","交流","建立","《","质量","。","赋能","课程","2011","地区","创建","平台","实践","出版","众多","未来","开发","com","是","+","线上","120","用户","万人","至今","ai","交流学习","学习","学习者","内容","高质量","与","生态","华语","超过","努力"," ","、","人才","构建","集","致力于","企业","校企",".","guyuehome","》","人才培养","的","高校","高质","知名","古月","机器人","畅销","及","年","等","通过","合作","）","社区","www","培养","图书","万字","居","面向","ros","为","一体","（","，","提供","优质","视频","累积","面向未来","1000","小时"],"title":"学机器人，上古月居","title_tokens":["古月","机器","机器人","学","居","上","，"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["但","有限","联系","。","追究其","课程","法律","责任","违反","法律责任","产品","明者","作品","com","公司","课件","究其","用户","或","依法","@","精锋","仅限","个人","学习","进行","武汉","未经","与","brand","镜像","请","声明"," ","其它","合法","、","不","源码","捆绑","单位","使用","追究",".","均","授权","有限公司","将","和","guyuehome","科技","抄录","包括","的","书面","被","限于","古月","本","网站","对本","等","许可","声明者","任何","版权","修改","有权","销售","不得","居","为","，","拥有","视频","传播","如需","所有","微控","上述","复制"],"title":"版权声明","title_tokens":["版权","声明"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/","text":"智能机器人发展与现状 智能机器人正在改变着我们的生活，想象这样一种场景。 也许不知不觉的某一天，我们就会发现类似这样的机器人会真实出现在生活当中。 科技的发展日新月异，智能机器人也突飞猛进，伴随机器人发展而生的机器人操作系统，也是机器人重要的发展动力之一。 智能机器人举例 提到智能机器人，大家脑海里会映射出什么样的情景呢？ 是不是会有很多科幻电影中变形金刚、大白机器人、星球大战等场景呢？ 智能机器人这个概念，只是一个科幻词汇么？当然不是的，其实在我们身边，已经有越来越多智能机器人出现，我们来看看他们都在哪里？ 扫地机器人 先来看一个大家最熟悉的一个类型——扫地机器人。现在的扫地机器人，除了可以完成扫地、拖地这样一些基本功能之外，还搭载了激光雷达、相机、红外等十几种传感器。 一个全新的扫地机器人虽然是第一次来到你家，但是它可能用到 5 分到 10 分钟时间，很快就可以通过它的传感器对你的家庭环境了如指掌，也就是把实际的家庭环境做成了一张地图，这样他就会知道哪里是卧室，哪里是餐厅，哪里是厨房，不同的区域用多大的风力，用多大的水量来去清扫最为合适，它都会智能化地来做判断。 除此之外，它还得知道怎么样去躲避各种障碍物，比如说家里面的宠物、地上摆放的插线板，各种各样的杂物等等。 所以看似非常小的一个扫地机器人，其实已经是一个很智能化的家用设备了，正在潜移默化地改变着我们的生活。 自动化仓储 第二个案例，虽然大部分人在生活中不会直接接触，但却和每一个人息息相关，那就是自动化仓储。 这是京东某个实际部署运营的一套自动化的仓库，在里面可以看到各种各样的机器人，比如工业机械臂、移动机器人等等，这套立体仓库当中大量的货架也是自动化的，这就是一个典型的机器人应用场景。 之前有一个关于京东的新闻报道，里边讲到，从我们下单那刻开始，到商品分拣出来放到快递员手上，只需要20分钟。比如我们要买个手机，下单付款，20分钟之后，这个手机已经从这么庞大的仓库中顺利找到，并且完成了包装、打标、分配等一系列工序。这样，我们在绝大部分城市，基本都可以体验到下单之后，当天或者隔天收货的体验，为什么它可以做到如此高效，就是因为背后这一套由机器人组成的自动化系统，借助大数据的分析，甚至可以做到在你下单之前，平台就知道你将要买什么东西。比如说你会按照一个月的频率买米买面，那平台就可以预测到上个月你买的米应该快吃完了，然后就会在距离你家最近的一个仓库里面备货。 当你下单之后，这袋米可能半个小时送到你手上了。 自动驾驶 第三个案例，那就是当今最为热门的技术之一——自动驾驶。 自动驾驶汽车也是典型的移动机器人系统，为了保证绝对安全的驾驶过程，汽车上装配了非常多的传感器，以及极为复杂的控制算法。 视频中我们看到的是华为自动驾驶系统在实际路面上测试的效果，自动驾驶汽车通过多个相机、雷达、超声波，实时构建周围环境的三维信息，不仅可以动态识别路面上的行人车辆、车道线、交通指示灯等，还可以安全完成超车、会车、跟车、转向等重要功能，同时对突发状况也可以及时处理，比如躲避突然出现的车辆、礼让行人等，最终自动行驶入库，把我们安全顺利的送到目的地。 虽然自动驾驶相关的技术和法律法规还在不断完善中，但是相信有一天我们每个人都可以体验自动驾驶的乐趣，而且这一天不会太远。 智能机器人发展 机器人的发展横跨几十年，经历了三个重要时期。 2000年前，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 2015年之后，智能机器人市场迅速爆发，到2025年，国内人工智能市场有望达到1164亿元，而作为人工智能重要载体的机器人，市场更会达到1463亿元。 行业的快速发展，必将带动大量专业人才的需求，人才缺口也将逐年扩大，2025年，预计国内机器人行业的人才缺口将超过450万，人工智能方面的缺口更会达到1000万。 面对如此严峻的人才需求，国内各高校从2016年起，陆续开设机器人和人工智能专业，为人才的供给提供有力保障。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角。 机器人操作系统 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是机器人操作系统。 ROS的诞生 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣、做饭、收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法：既然自己做不到，那为什么不联合所有人一起干呢？如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在这几个图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面，却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS怀揣“提高机器人软件复用率”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 ROS的特点 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。","text_tokens":["很快","买","起","干","机器","多项","提高","肩膀","工具","里边","减速机","因","速度","每","有限","代表","专业人才","动作","访问量","拉开序幕","用于","机制","过程","操作系统","一天","时至今日","程度","而","隔天","总体","接触","这款","杂物","厨房","装配","三个","所有人","电机","最","移动机器人","快","之一","效率","跨平台","周围","百科","找到","开发","四项","典型","更为","这样","概念","买面","交通","尽量","左右","伺服电机","万左右","越来","同样","“","或者","卧室","法律法规","而且","开设","国内","个","仓库","周围环境","向前","最终","大部分","”","开发工具","标准","人","windows","超过","正如"," ","里会","不仅","所以","只能","京东","活跃","插","巨人","源码","功能","当然","一张","从","浪潮","繁荣","发展","大战","一个","使用","礼让","各项","猛进","情景","电影","除此之外","robot","小","无论",".","不断完善","家用","需要","转向","信息","帮助","爆发","和","index","一个月","复合","缩短","会","2015","2016","斯坦福大学","真实","2000","东西","答案","衣服","ros2","乐趣","得到","手上","专业","半个","潜移","没有","智慧","什么样","某个","是不是","上个","并","已有","脑海","研究","付款","改变","得","预测","自主","并且","answers","逐渐","问题","乐意","很","人数","这里","完成","最后","看到","也","十年","国家","人工","450","学术","数据","25","突飞","以及","此","以上","识别","分钟","进步","先","开源","任何","水下","操控","斯坦福","他们","时间","去","业生","曲线","前夜","推进","ros1","一些","实现","广泛","总称","做","agv","诞生","还是","迅速","ros","整理","了如指掌","打标","智能","为","设备","城市","wiki","感器","员","为了","把","仿生","起来","来看","之外","尝试","依然","提到","促使","传感器","热门","工厂","局部","顺利","扩大","；","次数","指示灯","需求","驾驶","声波","一步","不觉","不过","围绕","重新","商业化","控制算法","报道","对","日常","以","联合","么","生活","向前走","第一次","地来","教程","最佳","浏览量","熨烫","条","这套","推动","现状","得以","现在","这一波","正在","货架","提出","保障","包装","一群","开始","如何","全人类","轮子","容易","复杂","地域","？","搭载","几十","怎么","部署","不同","保证","相机","15","两个","多个","相关","了","公司","基本功","家庭","星球","用户","陆续","充足","如果","说干就干","餐厅","设计","完","个人","有人","物体","活动","聊天","等等","收货","针对","第二个","无疑","大学","来","效果","有志","太远","安全","真的","新鲜事","、","家庭环境","具备","十几","零部件","俗称","人才需求","一系列","有望","思考","一款","原型","不要","发布","后期","十几种","基本上","时期","分享","实验","手机","清晰","已经","闻报","全球化","第三","身边","摆放","默化","别人","买个","变形","将","集合","总而言之","各样","嵌入式","10","同理","算法","智能化","驱动","视觉","时候","明智","呢","关于","上","40","我们","回答","超车","太","绝对","几十年","1164","雷达","激光","要","比如","支持","熟悉","讨论","比如说","借助","三维","然后","备货","电气","通信","最高","严峻","最近","系列","送到","新鲜","方面","供给","通过","许可","驱动器","分析","同时","相信","对于","下来","线","四足","非常","扫地","星球大战","上个月","执行","应用","控制器","大家","增长","伴随","丰富","词汇","页面","各种","c","你家","柔性","深知","维基百","新月","着","主要","研发","为什么","都","涉及","来讲","生产","主角","肯定","上图","来到","视频","这袋","臂","律法","光靠","用","全球","远","新闻","通常","给出","动力","立体","苹果","圈","1000","有力","年前","头发","在","很多","命令","发表","动机","组成","但","助推","万","入库","日新月异","行人","才","剪头发","无聊","感知","计算","索引","浏览","数字","处理","障碍","新增","几个","超声","中","不知","做法","可为","映射","平台","米","移动","宠物","可以","绝大部分","时代","一切","控制","更","加","统计","同一","还","是","仓储","这是","水量","统统","这","举例","：","领域","至今","这么","车道","增长速度","万人","商品","一家","当时","模块化","之后","ai","一大步","想象","月","突飞猛进","成果","操作","不会","150","大有可为","与","大白","极为","不断丰富","叠","快递","特性","释放","80","这些","personal","绝大","上市","突发","部件","洗衣","载体","a","类型","关注","人才","测试","存储","风力","构建","面对","于","沉淀","环境","但是","场景","合适","它","整合","给","这个","一大","目的地","更加","第三个","结晶","当中","只","开发者","缺少","快速","初期","之","下单","工业","只要","有没有","横跨","引擎","自身","类似","不知不觉","重要","指示","资金","采购","科幻电影","路面","迅猛","家","从中","的","狗","做到","市场","第二","那","被","2","做饭","除了","org","团队","软件","250","逐年","变形金刚","吃","数据库","完全","年","自动","多媒体","由","金刚","网站","体系","后","直接","距离","普遍","也许","款","基本","因为","各","制造","可能","检测","为例","多","几年","社区","许可证","及时","差不多","潜移默化","劳动力","自动化","你","某","论坛","外观","大","按照","人类","带动","维基","性能","四大","用多大","那刻","模块","清扫","背后","实时","度","1463","2025","二个","当","动态","用到","一次","算机","创意","之内","精致","怀揣","息息相关","正式","将要","目标","做出","而言","产品","小时","近几年","作为","核心","新","每个","当今","拉开","哪里","零","访问","缺口","事情","车辆","部分","低","电路","。","造","据库","怎么样","课程","频繁","维基百科","随着","热点","法律","既然","几种","判断","看看","只是","障碍物","各种各样","2007","discourse","劳动","层面","知道","除此","必将","100","激光雷达","成为","亿元","传感","地","不是","想法","经历","独立","到","出来","分","5","立体仓库","媒体","宽松","不到","pr2","查看","自己","棒","基本功能","无论是","教器","多万","全新","减速","一系","体验","当天","汽车","新闻报道","情况","买米","包","生态","高","工业生产","收拾","台球","框架","应用软件","达到","20","虽然","上边","强悍","井喷","车","人工智能","不","玩耍","长远","大量","图中","躲避","参考","及时处理","预计","基于","以叠","不想","大部","之前","拖地","陪","算是","发现","超声波","完善","福大","服务","案例","计算机","序幕","问答","简单","其实","今日","伺服","行业","什么","科技","元素","轰动","趋势","他","工序","里面","友好","代","不多","一种","最为","方式","地上","率","packages","地图","分拣","—","木头","打","高校","红外","看似","跑","软件系统","不断","linux","机器人","出现","呈","青年","人形","排名","区域","突发状况","特点","突然","资源","做成","就是","等","革命","发状","一起","机械","毛巾","目的","送餐","商业","而生","本身","跟车","却","甚至","科幻","系统","线板","法规","状况","其他","实际","由示","嵌入","庞大","频率","运营","分配","华为","此时","大步","张图","说明","生态系","一套","上去","其中","下载","身影","记录","应该","要求","实验室","在生活中","根据","，","提供","生态系统","站","第一","行驶","活跃度","有","状","全人","如此","就","所有","技术","b","讲","越来越","放到","复用","高效","多媒体系统","出","更会"],"title":"智能机器人发展与现状","title_tokens":["现状","机器","机器人","发展","智能","与"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_1","text":"智能机器人正在改变着我们的生活，想象这样一种场景。 也许不知不觉的某一天，我们就会发现类似这样的机器人会真实出现在生活当中。 科技的发展日新月异，智能机器人也突飞猛进，伴随机器人发展而生的机器人操作系统，也是机器人重要的发展动力之一。","text_tokens":["机器","生活","会","突飞猛进","一种","伴随","操作","类似","不知不觉","重要","日新月异","真实","我们","某","。","正在","的"," ","新月","操作系统","一天","着","智能","系统","，","不知","机器人","改变","出现","之一","发展","就","场景","猛进","是","发现","也","这样","不觉","动力","也许","突飞","而生","当中","在","科技","想象"],"title":"智能机器人发展与现状","title_tokens":["现状","机器","机器人","发展","智能","与"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_2","text":"提到智能机器人，大家脑海里会映射出什么样的情景呢？ 是不是会有很多科幻电影中变形金刚、大白机器人、星球大战等场景呢？ 智能机器人这个概念，只是一个科幻词汇么？当然不是的，其实在我们身边，已经有越来越多智能机器人出现，我们来看看他们都在哪里？","text_tokens":["星球大战","机器","哪里","会","大家","他们","呢","词汇","大白","我们","科幻电影","的","来"," ","里会","什么样","智能","都","看看","，","是不是","中","、","只是","映射","？","脑海","当然","有","机器人","出现","提到","很多","大战","变形金刚","场景","一个","情景","电影","金刚","等","已经","越来越","不是","这个","身边","星球","概念","其实","越来","变形","多","出","在","什么","科幻","么"],"title":"智能机器人举例","title_tokens":["机器人","机器","举例","智能"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_3","text":"先来看一个大家最熟悉的一个类型——扫地机器人。现在的扫地机器人，除了可以完成扫地、拖地这样一些基本功能之外，还搭载了激光雷达、相机、红外等十几种传感器。 一个全新的扫地机器人虽然是第一次来到你家，但是它可能用到 5 分到 10 分钟时间，很快就可以通过它的传感器对你的家庭环境了如指掌，也就是把实际的家庭环境做成了一张地图，这样他就会知道哪里是卧室，哪里是餐厅，哪里是厨房，不同的区域用多大的风力，用多大的水量来去清扫最为合适，它都会智能化地来做判断。 除此之外，它还得知道怎么样去躲避各种障碍物，比如说家里面的宠物、地上摆放的插线板，各种各样的杂物等等。 所以看似非常小的一个扫地机器人，其实已经是一个很智能化的家用设备了，正在潜移默化地改变着我们的生活。","text_tokens":["很快","机器","第一次","地来","哪里","。","现在","怎么样","正在","障碍","几种","判断","杂物","厨房","障碍物","各种各样","宠物","最","可以","知道","搭载","除此","激光雷达","怎么","不同","还","是","相机","传感","地","了","水量","这样","基本功","到","家庭","分","5","卧室","基本功能","餐厅","全新","等等","来"," ","类型","虽然","所以","、","家庭环境","十几","插","风力","一张","功能","躲避","十几种","环境","但是","一个","合适","拖地","它","除此之外","已经","小","摆放","默化","家用","其实","各样","他","10","里面","智能化","会","最为","地上","我们","地图","家","的","潜移","—","雷达","激光","比如","熟悉","红外","看似","比如说","除了","机器人","得","改变","区域","很","完成","做成","就是","等","也","通过","基本","可能","分钟","非常","扫地","线板","先","潜移默化","大家","实际","时间","去","你","一些","做","各种","你家","着","了如指掌","都","用多大","智能","设备","，","感器","清扫","第一","来到","把","来看","之外","用到","传感器","一次","就","对","生活"],"title":"扫地机器人","title_tokens":["机器人","机器","扫地"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_4","text":"第二个案例，虽然大部分人在生活中不会直接接触，但却和每一个人息息相关，那就是自动化仓储。 这是京东某个实际部署运营的一套自动化的仓库，在里面可以看到各种各样的机器人，比如工业机械臂、移动机器人等等，这套立体仓库当中大量的货架也是自动化的，这就是一个典型的机器人应用场景。 之前有一个关于京东的新闻报道，里边讲到，从我们下单那刻开始，到商品分拣出来放到快递员手上，只需要20分钟。比如我们要买个手机，下单付款，20分钟之后，这个手机已经从这么庞大的仓库中顺利找到，并且完成了包装、打标、分配等一系列工序。这样，我们在绝大部分城市，基本都可以体验到下单之后，当天或者隔天收货的体验，为什么它可以做到如此高效，就是因为背后这一套由机器人组成的自动化系统，借助大数据的分析，甚至可以做到在你下单之前，平台就知道你将要买什么东西。比如说你会按照一个月的频率买米买面，那平台就可以预测到上个月你买的米应该快吃完了，然后就会在距离你家最近的一个仓库里面备货。 当你下单之后，这袋米可能半个小时送到你手上了。","text_tokens":["买","机器","动机","组成","但","里边","每","这套","部分","。","货架","包装","隔天","开始","接触","中","各种各样","平台","米","移动","绝大部分","可以","知道","移动机器人","快","部署","找到","仓储","是","这是","典型","相关","了","这样","到","这","买面","出来","立体仓库","这么","商品","之后","或者","小时","完","一系","体验","不会","仓库","等等","新闻报道","当天","第二个","大部分","收货","买米","人","快递"," ","绝大","20","虽然","京东","、","大量","一系列","从","大部","一个","场景","之前","它","手机","已经","闻报","这个","案例","需要","买个","当中","只","和","各样","什么","一个月","下单","里面","工业","工序","会","关于","东西","我们","分拣","手上","半个","的","做到","要","第二","某个","比如","那","上个","比如说","借助","然后","付款","机器人","预测","备货","并且","吃","完成","自动","系列","由","最近","送到","就是","看到","也","等","直接","机械","数据","距离","分析","基本","因为","可能","分钟","却","甚至","系统","上个月","应用","自动化","实际","庞大","你","频率","运营","分配","大","按照","各种","你家","一套","应该","打标","在生活中","都","为什么","那刻","，","城市","员","背后","有","二个","当","臂","这袋","如此","就","顺利","息息相关","讲","新闻","放到","立体","将要","高效","报道","在","生活"],"title":"自动化仓储","title_tokens":["自动","自动化","仓储"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_5","text":"第三个案例，那就是当今最为热门的技术之一——自动驾驶。 自动驾驶汽车也是典型的移动机器人系统，为了保证绝对安全的驾驶过程，汽车上装配了非常多的传感器，以及极为复杂的控制算法。 视频中我们看到的是华为自动驾驶系统在实际路面上测试的效果，自动驾驶汽车通过多个相机、雷达、超声波，实时构建周围环境的三维信息，不仅可以动态识别路面上的行人车辆、车道线、交通指示灯等，还可以安全完成超车、会车、跟车、转向等重要功能，同时对突发状况也可以及时处理，比如躲避突然出现的车辆、礼让行人等，最终自动行驶入库，把我们安全顺利的送到目的地。 虽然自动驾驶相关的技术和法律法规还在不断完善中，但是相信有一天我们每个人都可以体验自动驾驶的乐趣，而且这一天不会太远。","text_tokens":["机器","动机","每个","当今","车辆","入库","行人","。","过程","处理","一天","法律","超声","中","装配","复杂","三个","移动","可以","移动机器人","控制","之一","周围","还","是","保证","相机","典型","传感","多个","相关","了","这","交通","车道","法律法规","而且","汽车","体验","不会","周围环境","最终","极为","人"," ","效果","突发","不仅","虽然","太远","安全","、","测试","车","功能","构建","躲避","及时处理","环境","但是","礼让","超声波","完善","第三","案例","不断完善","目的地","第三个","转向","信息","和","算法","会","最为","重要","上","指示","我们","路面","超车","乐趣","绝对","的","—","雷达","比如","那","三维","不断","机器人","出现","突发状况","突然","完成","自动","送到","就是","看到","也","等","发状","通过","目的","同时","相信","以及","线","识别","多","非常","跟车","系统","法规","及时","状况","实际","华为","都","，","感器","为了","实时","行驶","把","视频","有","动态","热门","传感器","顺利","律法","技术","指示灯","驾驶","声波","控制算法","对","在"],"title":"自动驾驶","title_tokens":["自动","驾驶"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_6","text":"机器人的发展横跨几十年，经历了三个重要时期。 2000年前，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 2015年之后，智能机器人市场迅速爆发，到2025年，国内人工智能市场有望达到1164亿元，而作为人工智能重要载体的机器人，市场更会达到1463亿元。 行业的快速发展，必将带动大量专业人才的需求，人才缺口也将逐年扩大，2025年，预计国内机器人行业的人才缺口将超过450万，人工智能方面的缺口更会达到1000万。 面对如此严峻的人才需求，国内各高校从2016年起，陆续开设机器人和人工智能专业，为人才的供给提供有力保障。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角。","text_tokens":["起","命令","作为","机器","拉开","减速机","最佳","缺口","有限","万","专业人才","动作","。","感知","拉开序幕","计算","课程","提出","保障","过程","数字","操作系统","随着","热点","而","三个","电机","劳动","层面","时代","必将","控制","更","之一","几十","开发","是","这是","成为","传感","亿元","了","经历","家庭","到","这","伺服电机","陆续","之后","ai","教器","开设","国内","减速","操作","汽车","不断丰富","高","超过","工业生产","释放"," ","载体","达到","类型","只能","关注","、","井喷","人才","人工智能","俗称","人才需求","大量","有望","思考","从","预计","面对","发展","于","环境","但是","时期","服务","计算机","序幕","更加","伺服","帮助","缺少","和","爆发","行业","将","快速","工业","智能化","驱动","2015","横跨","最为","视觉","2016","重要","2000","我们","太","几十年","1164","专业","的","没有","狗","市场","高校","并","不断","机器人","出现","自主","呈","电气","软件","逐渐","逐年","严峻","完全","年","自动","就是","方面","十年","等","也","后","供给","人工","450","驱动器","送餐","各","检测","多","四足","系统","执行","劳动力","应用","控制器","操控","业生","由示","丰富","前夜","此时","大","按照","人类","带动","agv","主要","迅速","要求","为","智能","设备","，","生产","提供","感器","主角","仿生","1463","2025","依然","状","如此","算机","传感器","工厂","局部","扩大","技术","需求","驾驶","不过","正式","动力","而言","1000","有力","对","年前","更会"],"title":"智能机器人发展","title_tokens":["发展","机器人","机器","智能"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_7","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是机器人操作系统。","text_tokens":["机器","斯坦福","操作","重要","针对","斯坦福大学","上","答案","人","。","大学","的","有志","操作系统","一群","智能","如何","那","，","复杂","可以","层面","机器人","团队","尝试","青年","问题","一个","完成","开发","技术","是","就是","福大","已经","越来越","不是","给出","独立","这个","对于","高效","越来","非常","或者","系统"],"title":"机器人操作系统","title_tokens":["机器","机器人","操作系统","操作","系统"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros","text":"2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣、做饭、收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法：既然自己做不到，那为什么不联合所有人一起干呢？如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在这几个图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面，却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS怀揣“提高机器人软件复用率”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。","text_tokens":["很快","干","机器","第一次","动机","组成","提高","因","事情","熨烫","条","才","推动","低","电路","。","无聊","得以","剪头发","用于","处理","时至今日","既然","几个","这款","中","2007","容易","所有人","复杂","做出","？","平台","移动","可以","层面","一切","100","更","移动机器人","效率","同一","开发","找到","还","是","成为","了","想法","统统","这样","独立","这","：","领域","出来","至今","5","同样","不到","充足","当时","pr2","“","自己","一大步","如果","说干就干","无论是","而且","设计","个人","个","有人","物体","聊天","一系","向前","”","标准","叠","personal"," ","收拾","台球","框架","部件","洗衣","应用软件","所以","虽然","强悍","真的","、","不","零部件","玩耍","原型","功能","图中","一系列","一款","基于","繁荣","后期","发展","以叠","不想","一个","分享","但是","实验","陪","手机","robot","已经","无论","服务","这个","一大","今日","别人","只","帮助","和","什么","轰动","初期","快速","复合","只要","代","有没有","横跨","时候","类似","重要","呢","上","资金","衣服","我们","率","家","专业","从中","的","没有","—","要","木头","那","打","2","并","软件系统","做饭","研究","机器人","软件","人形","很","年","完成","系列","最后","就是","等","也","看到","一起","机械","毛巾","学术","普遍","款","因为","而生","可能","为例","分钟","多","甚至","却","社区","系统","水下","应用","大家","他们","你","此时","大步","一些","实现","外观","广泛","做","各种","柔性","一套","深知","诞生","其中","还是","整理","ros","实验室","性能","为什么","都","身影","涉及","，","肯定","第一","有","臂","促使","一次","就","所有","光靠","之内","精致","用","怀揣","苹果","圈","目标","复用","头发","在","很多","联合","向前走"],"title":"ROS的诞生","title_tokens":["ros","诞生","的"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros_1","text":"提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["机器","核心","多项","新","组成","提高","肩膀","零","工具","代表","部分","造","。","机制","新增","全人类","轮子","中","做法","各种各样","产品","平台","可以","更","跨平台","开发","还","是","公司","不是","了","这样","到","这","尽量","：","领域","媒体","越来","一家","宽松","模块化","自己","设计","成果","汽车","向前","开发工具","生态","特性","windows","正如","这些","来"," ","上市","a","、","人才","具备","巨人","长远","功能","从","不要","发展","沉淀","一个","分享","使用","整合","给","全球化","这个","案例","简单","别人","结晶","集合","将","和","各样","嵌入式","缩短","之","同理","工业","友好","智能化","会","引擎","自身","明智","采购","上","率","我们","ros2","家","的","智慧","做到","比如","支持","那","被","并","已有","跑","linux","机器人","软件","通信","特点","多媒体","这里","完全","由","最后","做成","就是","也","体系","直接","一起","许可","同时","制造","此","下来","本身","商业","多","非常","社区","系统","进步","开源","许可证","应用","大家","他们","时间","嵌入","推进","ros1","实现","总称","做","生态系","c","各种","人类","上去","ros","着","都","智能","来讲","四大","，","生态系统","站","模块","把","有","全人","促使","就","创意","；","全球","技术","b","远","通常","一步","越来越","围绕","重新","目标","复用","多媒体系统","商业化","对","以","在","很多","向前走"],"title":"ROS的特点","title_tokens":["ros","特点","的"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros_2","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。","text_tokens":["作为","机器","核心","发表","新","教程","每个","访问","助推","速度","浏览量","每","万","代表","部分","。","据库","现在","访问量","索引","正在","频繁","提出","浏览","这一波","维基百科","程度","几个","总体","中","discourse","可为","地域","？","加","绝大部分","可以","统计","快","百科","开发","不同","是","这是","四项","15","两个","相关","了","更为","到","这","万左右","：","用户","左右","万人","增长速度","越来","查看","棒","月","多万","活动","等等","情况","150","大部分","包","大有可为","无疑","人","80","这些"," ","绝大","20","上边","新鲜事","、","存储","活跃","不","源码","发布","功能","参考","从","浪潮","发展","基本上","一个","使用","大部","各项","整合","算是","给","清晰","已经",".","问答","其实","开发者","和","index","总而言之","什么","趋势","元素","快速","不多","方式","最为","重要","呢","关于","上","40","我们","packages","回答","迅猛","得到","的","比如","讨论","org","机器人","250","answers","乐意","问题","最高","排名","很","资源","数据库","人数","这里","网站","就是","新鲜","等","看到","国家","革命","通过","数据","25","基本","几年","以上","多","非常","社区","任何","差不多","应用","其他","大家","增长","曲线","张图","论坛","页面","说明","大","各种","维基","维基百","其中","下载","ros","记录","研发","都","根据","，","wiki","上图","度","活跃度","起来","来看","有","次数","就","；","全球","越来越","动力","而言","近几年","日常","在","很多"],"title":"ROS的社区","title_tokens":["ros","社区","的"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/","text":"智能机器人开发平台介绍 机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 以操作系统为例，应用最为广泛的ROS系统在不断迭代，不过在智能时代洪流的冲击下，还是涌现出一些问题。 ROS的一些问题 ROS逐渐成为标准，大量机器人应用被贡献到社区，虽然提高了代码的通用性，但却难以发挥硬件的完整性能；同时，大量应用聚焦在机器人运动控制与定位导航等基础功能，智能化的应用较少；此外，在软件资源格外丰富的社区中，还缺少系统化的内容，帮助用户快速实现相关资源的复用。 很多开发者都在魔改ROS，去适配自己的机器人，所以机器人的研发成本非常高。从机械选型、系统定制、算法开发到数据闭环，每个过程都要付出高昂的成本，在这么高昂的成本下，做机器人是非常困难的一件事情。 在算法层面，机器人算法仍处于早期阶段，很多感知算法还停留在理论阶段，无法服务与实际场景，机器学习发展迅速，不过对于很多开发者来讲，数据的采集、标注、训练都是一个庞大的工作量，部署运行不仅十分困难，还要消耗大量的算力成本。 智能机器人涉及的领域和方法较多，目前整体的学习成本偏高，想要实现智能化应用的难度就更高，问题的出现，也带来了机遇与挑战。 地平线机器人开发平台 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。 这套机器人开发平添的目的是打造软硬协同、极致优化、丰富易用的机器人开发组件与生态，由图中这几个部分组成，我们一一来看下。 平台的底层主要依托于地平线AIOT边缘AI芯片——旭日3和旭日5，内部集成了地平线最先进的伯努利2.0架构的AI 引擎，可提供 5TOPS 以上的等效算力。 如此强大的算力支持，保证了智能机器人开发的基础条件。 芯片是基础建设，在此之上更重要的是一系列软件设施，重点就是我们课程的主角——TogetherROS机器人操作系统。 正如我们电脑上的windows和linux，一套优质的操作系统，是上层应用软件开发的必要条件，TogetherROS在ROS系统的基础上，进行了大量的改良和优化，可以为开发者提供高效实用的系统环境。 在此之上，平台还会提供大量的机器人参考算法和应用功能示例，比如常用的建图、定位、导航，还有智能机器人中至关重要的智能化功能，比如一些基础算法，图像分类、图像分割、目标检测等，还有应用功能，人脸检测、人体跟踪、骨骼点检测、手势识别、语音处理等等，提供基于大量数据训练的模型，借助底层AI引擎的支持，可以快速、稳定的实现各种各样的智能应用。 同时平台还会配套一系列加速机器人开发的工具链，比如代码编写工具、系统调试工具、数据标注和训练工具等。 古月居和地平线也会共同打造机器人开发者社区，持续分享技术内容，沉淀更多开发者的智慧，更多机器人产业中的合作伙伴也会陆续加入，共同打造最为丰富的机器人开发者套件，建设智能机器人开发的生态圈。 在这个机器人开发平台之中，最为重要的就是TogetherROS系统了，起到了承上启下、连接各项功能的作用，我们将通过一系列课程为大家深入浅出的介绍。 TogetherROS的特点 在ROS系统庞大社区资源的基础上，结合智能机器人的发展和产业需求，TogetherROS应运而生。 TogetherROS有三个核心特点： 开源兼容，秉承开源精神的力量 TogetherROS和ROS系统一样，也是一套完全开源的系统，所有开发者都可以继续二次开发，接口方面和ROS2完全兼容，ROS2原有的功能也都可以继续复用，已有的机器人代码可以十分便利的迁移过来。 极致性能优化 相比ROS的通用化，TogetherROS更多考虑的是如何充分挖掘底层硬件的性能，比如提高数据传输的效率、增强人工智能处理的能力，在后续的使用案例中，大家可以充分感受到这一点。 丰富易用的软硬件组件 比如各种各样的传感器和开发套件，再比如算法模块、感知应用、机器人功能，还有提高开发效率的各种编程、部署工具。 TogetherROS系统框架 具体展开来看，TogetherROS的系统框架如图所示，其中深蓝色部分为地平线优化、新增的模块，其他是目前复用ROS2中的模块： 在系统通信的中间件部分，保留了ROS2中原本针对不同DDS的通信框架，与ROS2 foxy版本的接口完全兼容，方便复用ROS丰富工具包进行原型验证，在此之上增加了“zero-copy” 零拷贝 的通信机制，降低大数据传输时延和系统资源消耗。 在组件功能部分，TogetherROS提供“hobot CV” 视觉加速库 ，软硬件协同，可以提升CV算子性能、降低系统资源消耗；针对AI模型的推理，封装了“hobot_dnn” 功能包，可以调用底层芯片的AI引擎，简化板端AI开发与部署，释放BPU的算力。可以支持丰富的机器人传感器型号，比如相机、雷达、IMU、GPS等，节省驱动开发的时间，可以聚焦在机器人应用开发上。 除此之外，TogetherROS还会提供丰富的软件调试和性能调优工具，方便用户定位问题和优化系统性能，在具体的行业应用中，还支持最小化和模块化的剪裁，利于部署在资源受限的嵌入式产品中。 总之，TogetherROS出于ROS，又不止于ROS，ROS原有的功能依然继承，重点是借助硬件能力，充分优化系统的性能，提高机器人开发的效率。","text_tokens":["架构","机器","提高","工具","现出","dds","基础","动作","下","机制","过程","操作系统","aiot","人脸","方便","三个","电机","最","效率","开发","一一","设施","利于","内部","“","中间","定位导航","难以","”","标准","windows","出于","感受","正如"," ","难度","目前","不仅","所以","功能","考虑","发挥","增加","从","发展","一个","使用","各项","除此之外","二次","后续","数据传输","信息","帮助","和","型号","版本","伙伴","共同","会","改","ros2","dnn","智慧","适配","已有","板端","跟踪","封装","逐渐","问题","理论","想要","依托","承上启下","也","稳定","兼容","人工","改良","数据","此","降低","以上","识别","开源","精神","模型","去","时间","至关重要","易用","一些","实现","广泛","持续","做","消耗","还是","ros","迅速","为","困难","智能","感器","十分","偏高","来看","点","之外","依然","传感器","；","需求","不过","打造","优化","以","节省","调优","代码","这套","能力","如何","复杂","工具包","部署","不同","保证","相机","还会","相关","了","用户","挑战","软硬件","陆续","大脑","_","通用","等等","针对","定制","传输","再","接口","、","强大","组件","原型","一系列","还有","分享","协同","连接","边缘","时延","调用","将","二次开发","cv","各样","嵌入式","编程","算法","智能化","充分","驱动","成本","人体","视觉","程式","算子","上","我们","起到","停留","zero","应运而生","雷达","要","比如","支持","深入","骨骼","借助","古月","阶段","深入浅出","6","通信","等效","规控","系列","方面","贡献","手势","通过","对于","同时","先进","copy","非常","深蓝","执行","应用","imu","库","大家","此外","togetherros","丰富","应运","旭日","产业","各种","通用性","主要","研发","相比","都","秉承","来讲","涉及","主角","优质","过来","保留","较","挖掘","冲击","在","很多","组成","但","运行","社区资源","感知","计算","处理","新增","几个","中","机遇","产品","平台","时代","十分困难","可以","便利","验证","控制","更","平添","涌现","还","是","配套","提升","带来","这","：","领域","图像","这么","模块化","调试","ai","月","迁移","地平线","如图所示","操作","内容","与","完整","受限","加速","具体","释放","采集","格外","套件","于","沉淀","环境","场景","给","推出","分割","这个","合作伙伴","方法","开发者","必要条件","缺少","可","快速","引擎","最小化","重要","由图","又","定位","的","增强","工作","2.0","运动","被","深蓝色","之中","总之","软件","常用","一点","完全","年","软硬","5tops","检测","为例","多","实用","洪流","社区","gps","2022","据传","少","继承","算力","大","最小","还要","仍","居","性能","一代","集成","作用","模块","系统化","简化","条件","硬件","软件资源","处于","foxy","正式","目标","通用化","作为","核心","每个","零","事情","迭代","无法","闭环","部分","魔","原本","。","课程","3","各种各样","标注","层面","除此","建图","继续","系统资源","选型","蓝色","成为","传感","生态圈","到","一样","5","剪裁","自己","链","学习","全新","进行","一系","-","包","生态","高","重点","中间件","训练","高昂","框架","应用软件","虽然","人工智能","大量","参考","基于","bpu","所示","聚焦","服务","案例","展开","力量","行业","拷贝","原有","底层","介绍","电脑","最为","之上","包括","结合","一件","必要","—","导航","至关","伯努利","不断","linux","付出","机器人","出现","上层","示例","资源","特点","就是","等","机械","建设","目的","推理","合作","hobot","却","系统","工作量","其他","实际","嵌入","早期","庞大","分类","极致","不止","一套","其中","语音","，","提供","主控","编写","加入","有","如此","涌现出","就","定位问题","所有","芯片","技术","地平","复用","高效","整体","非常复杂"],"title":"智能机器人开发平台介绍","title_tokens":["机器","平台","机器人","介绍","智能","开发"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#_1","text":"机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 以操作系统为例，应用最为广泛的ROS系统在不断迭代，不过在智能时代洪流的冲击下，还是涌现出一些问题。","text_tokens":["作为","机器","执行","算法","应用","驱动","现出","操作","进行","最为","程式","等等","包括","迭代","部分","洪流","一些","动作","广泛","。","下","各种","感知","计算","的"," ","还是","操作系统","ros","智能","以","，","感器","各种各样","、","复杂","主控","平台","不断","电机","时代","层面","机器人","软件","问题","环境","传感器","涌现出","一个","规控","涌现","是","传感","硬件","等","不过","数据","：","非常复杂","信息","为例","冲击","非常","大脑","在","各样","系统"],"title":"智能机器人开发平台介绍","title_tokens":["机器","平台","机器人","介绍","智能","开发"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#ros","text":"ROS逐渐成为标准，大量机器人应用被贡献到社区，虽然提高了代码的通用性，但却难以发挥硬件的完整性能；同时，大量应用聚焦在机器人运动控制与定位导航等基础功能，智能化的应用较少；此外，在软件资源格外丰富的社区中，还缺少系统化的内容，帮助用户快速实现相关资源的复用。 很多开发者都在魔改ROS，去适配自己的机器人，所以机器人的研发成本非常高。从机械选型、系统定制、算法开发到数据闭环，每个过程都要付出高昂的成本，在这么高昂的成本下，做机器人是非常困难的一件事情。 在算法层面，机器人算法仍处于早期阶段，很多感知算法还停留在理论阶段，无法服务与实际场景，机器学习发展迅速，不过对于很多开发者来讲，数据的采集、标注、训练都是一个庞大的工作量，部署运行不仅十分困难，还要消耗大量的算力成本。 智能机器人涉及的领域和方法较多，目前整体的学习成本偏高，想要实现智能化应用的难度就更高，问题的出现，也带来了机遇与挑战。","text_tokens":["机器","每个","提高","但","事情","基础","运行","代码","无法","闭环","魔","下","。","感知","过程","中","机遇","标注","十分困难","层面","控制","更","部署","开发","选型","还","是","成为","相关","了","带来","到","用户","领域","这么","挑战","自己","通用","定位导航","学习","内容","难以","定制","标准","与","完整","高","训练","采集"," ","难度","高昂","目前","不仅","所以","虽然","、","格外","功能","大量","发挥","从","发展","场景","一个","聚焦","服务","方法","开发者","帮助","缺少","和","快速","算法","智能化","成本","改","一件","停留","定位","的","工作","运动","要","导航","被","适配","付出","阶段","机器人","软件","出现","逐渐","问题","资源","理论","想要","贡献","等","也","机械","数据","对于","同时","多","非常","却","社区","系统","工作量","应用","实际","此外","去","少","早期","丰富","庞大","算力","实现","做","通用性","消耗","还要","仍","ros","研发","性能","迅速","困难","智能","都","来讲","涉及","，","系统化","十分","偏高","就","；","硬件","软件资源","处于","不过","较","复用","整体","在","很多"],"title":"ROS的一些问题","title_tokens":["问题","ros","一些","的"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#_2","text":"2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。 这套机器人开发平添的目的是打造软硬协同、极致优化、丰富易用的机器人开发组件与生态，由图中这几个部分组成，我们一一来看下。 平台的底层主要依托于地平线AIOT边缘AI芯片——旭日3和旭日5，内部集成了地平线最先进的伯努利2.0架构的AI 引擎，可提供 5TOPS 以上的等效算力。 如此强大的算力支持，保证了智能机器人开发的基础条件。 芯片是基础建设，在此之上更重要的是一系列软件设施，重点就是我们课程的主角——TogetherROS机器人操作系统。 正如我们电脑上的windows和linux，一套优质的操作系统，是上层应用软件开发的必要条件，TogetherROS在ROS系统的基础上，进行了大量的改良和优化，可以为开发者提供高效实用的系统环境。 在此之上，平台还会提供大量的机器人参考算法和应用功能示例，比如常用的建图、定位、导航，还有智能机器人中至关重要的智能化功能，比如一些基础算法，图像分类、图像分割、目标检测等，还有应用功能，人脸检测、人体跟踪、骨骼点检测、手势识别、语音处理等等，提供基于大量数据训练的模型，借助底层AI引擎的支持，可以快速、稳定的实现各种各样的智能应用。 同时平台还会配套一系列加速机器人开发的工具链，比如代码编写工具、系统调试工具、数据标注和训练工具等。 古月居和地平线也会共同打造机器人开发者社区，持续分享技术内容，沉淀更多开发者的智慧，更多机器人产业中的合作伙伴也会陆续加入，共同打造最为丰富的机器人开发者套件，建设智能机器人开发的生态圈。 在这个机器人开发平台之中，最为重要的就是TogetherROS系统了，起到了承上启下、连接各项功能的作用，我们将通过一系列课程为大家深入浅出的介绍。","text_tokens":["架构","机器","组成","工具","基础","代码","这套","部分","下","。","课程","操作系统","处理","几个","3","中","aiot","人脸","各种各样","标注","平台","层面","最","可以","更","建图","平添","开发","一一","是","保证","配套","还会","生态圈","了","带来","这","图像","5","设施","陆续","内部","调试","ai","月","链","地平线","全新","操作","进行","一系","等等","内容","与","生态","windows","加速","重点","正如","训练"," ","应用软件","、","强大","组件","套件","功能","一系列","大量","参考","还有","基于","于","沉淀","环境","分享","协同","连接","各项","给","边缘","推出","分割","这个","合作伙伴","开发者","必要条件","帮助","行业","可","和","将","各样","快速","算法","底层","智能化","电脑","共同","会","伙伴","介绍","引擎","人体","之上","最为","重要","上","我们","起到","由图","必要","定位","的","—","智慧","2.0","比如","支持","导航","至关","伯努利","深入","骨骼","之中","借助","linux","跟踪","古月","机器人","软件","上层","示例","6","深入浅出","常用","等效","年","系列","依托","就是","等","也","稳定","承上启下","改良","手势","建设","数据","通过","目的","先进","软硬","此","同时","5tops","以上","检测","多","实用","识别","合作","社区","系统","2022","应用","模型","大家","togetherros","丰富","至关重要","易用","旭日","分类","算力","极致","一些","实现","持续","产业","各种","一套","居","主要","ros","语音","为","一代","智能","集成","作用","，","提供","主角","优质","编写","加入","来看","点","如此","条件","芯片","技术","地平","正式","打造","目标","高效","优化","在"],"title":"地平线机器人开发平台","title_tokens":["机器","平台","地平","地平线","机器人","开发"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#togetherros","text":"在ROS系统庞大社区资源的基础上，结合智能机器人的发展和产业需求，TogetherROS应运而生。 TogetherROS有三个核心特点： 开源兼容，秉承开源精神的力量 TogetherROS和ROS系统一样，也是一套完全开源的系统，所有开发者都可以继续二次开发，接口方面和ROS2完全兼容，ROS2原有的功能也都可以继续复用，已有的机器人代码可以十分便利的迁移过来。 极致性能优化 相比ROS的通用化，TogetherROS更多考虑的是如何充分挖掘底层硬件的性能，比如提高数据传输的效率、增强人工智能处理的能力，在后续的使用案例中，大家可以充分感受到这一点。 丰富易用的软硬件组件 比如各种各样的传感器和开发套件，再比如算法模块、感知应用、机器人功能，还有提高开发效率的各种编程、部署工具。","text_tokens":["通用化","机器","核心","提高","工具","基础","代码","社区资源","能力","。","感知","处理","如何","中","各种各样","三个","便利","可以","更","效率","部署","继续","开发","是","传感","到","这","：","一样","软硬件","通用","迁移","传输","感受"," ","再","接口","、","人工智能","组件","套件","功能","考虑","还有","发展","使用","二次","案例","后续","力量","开发者","数据传输","和","二次开发","各样","原有","编程","底层","算法","充分","结合","上","ros2","的","应运而生","增强","比如","已有","机器人","一点","资源","特点","完全","方面","也","兼容","人工","数据","软硬","多","社区","系统","开源","精神","应用","据传","大家","togetherros","庞大","丰富","应运","易用","产业","极致","各种","一套","ros","性能","相比","智能","秉承","都","，","感器","模块","过来","十分","有","传感器","所有","硬件","需求","复用","挖掘","优化","在"],"title":"TogetherROS的特点","title_tokens":["togetherros","特点","的"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#togetherros_1","text":"具体展开来看，TogetherROS的系统框架如图所示，其中深蓝色部分为地平线优化、新增的模块，其他是目前复用ROS2中的模块： 在系统通信的中间件部分，保留了ROS2中原本针对不同DDS的通信框架，与ROS2 foxy版本的接口完全兼容，方便复用ROS丰富工具包进行原型验证，在此之上增加了“zero-copy” 零拷贝 的通信机制，降低大数据传输时延和系统资源消耗。 在组件功能部分，TogetherROS提供“hobot CV” 视觉加速库 ，软硬件协同，可以提升CV算子性能、降低系统资源消耗；针对AI模型的推理，封装了“hobot_dnn” 功能包，可以调用底层芯片的AI引擎，简化板端AI开发与部署，释放BPU的算力。可以支持丰富的机器人传感器型号，比如相机、雷达、IMU、GPS等，节省驱动开发的时间，可以聚焦在机器人应用开发上。 除此之外，TogetherROS还会提供丰富的软件调试和性能调优工具，方便用户定位问题和优化系统性能，在具体的行业应用中，还支持最小化和模块化的剪裁，利于部署在资源受限的嵌入式产品中。 总之，TogetherROS出于ROS，又不止于ROS，ROS原有的功能依然继承，重点是借助硬件能力，充分优化系统的性能，提高机器人开发的效率。","text_tokens":["节省","机器","提高","工具","零","dds","调优","部分","原本","能力","。","机制","新增","中","方便","产品","可以","验证","除此","工具包","效率","部署","不同","系统资源","开发","还","蓝色","是","提升","传感","相机","还会","了","用户","：","剪裁","软硬件","利于","“","模块化","调试","ai","_","中间","地平线","如图所示","进行","针对","”","-","包","与","受限","传输","具体","加速","出于","重点","中间件","释放"," ","框架","目前","接口","、","组件","原型","功能","增加","于","bpu","所示","协同","聚焦","除此之外","展开","时延","数据传输","调用","行业","和","cv","拷贝","嵌入式","型号","原有","版本","底层","充分","驱动","引擎","视觉","之上","最小化","算子","上","ros2","dnn","又","zero","定位","的","雷达","比如","支持","板端","深蓝色","借助","总之","机器人","软件","封装","通信","问题","资源","完全","等","兼容","数据","推理","copy","此","降低","hobot","软硬","系统","gps","深蓝","模型","imu","其他","库","据传","应用","时间","togetherros","嵌入","丰富","继承","算力","大","不止","消耗","最小","其中","ros","性能","为","，","提供","感器","模块","来看","之外","简化","依然","传感器","定位问题","；","芯片","硬件","地平","foxy","保留","复用","优化","在"],"title":"TogetherROS系统框架","title_tokens":["togetherros","框架","系统"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/","text":"TogetherROS与ROS性能对比 ROS2 vs ROS1 先来看下两个大版本ROS的系统架构。 在这张图中，左侧是ROS1，右侧是ROS2，两者最明显的变化，就是Master。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery——自发现机制，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的DDS系统。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于共享内存的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了，Linux、windows、MacOS、RTOS都可以。 ROS2系统架构 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个ROS Middleware，简称RMW，也就是制定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 TogetherROS vs ROS2 TogetherROS就是在这样一个ROS2架构的基础上，继续进行了优化，原本DDS通信的部分依然保留，可以适配不同厂家的DDS通信系统，在此之上，针对功能性的组件进行了众多优化和补充，在上一节中我们也给大家介绍了这套框架。 优化之后的TogetherROS系统，在数据传输和AI处理方面，到底有多少提升呢，我们来看具体的对比数据。 通信效率量化对比 先来看下操作系统至关重要的数据通信功能，我们针对ROS中最为常用的大数据传输模式——话题通信进行了测试。 在单元测试中，使用同样的算力平台，分别安装TogetherROS和ROS2系统，然后在其中运行一个话题通信的发布者与订阅者，实现不同数据量的传输。经过数据统计，我们可以看到，在数据通信延时方面，随着数据量的增加，ROS2系统在通信延时、发送端和接收端的CPU占用率上，都会程线性增加，可以预想，在数据量较大的情况下，系统的通信负荷会非常严重。 而在TogetherROS系统中，由于使用了零拷贝的传输机制，传输数据量的增加，并不会导致延时和CPU占用率的增加，极大程度节省了系统资源。 在场景测试中，我们尽量模拟真实机器人的应用，使用TogetherROS和ROS2系统连接了多个相机、雷达和里程计等传感器，作为大量数据的输入来源，继续进行了测试，结果和之前的单元测试类似，ROS2系统此时的CPU占用率已经超过90%，想要运行数据传输之外的应用功能，几乎是不可能的，通信延时也达到了15ms以上，这在某些实时性要求比较高的应用中，是不可接受的。 而在TogetherROS系统中，CPU占用和通信延时也微乎其微，更多系统资源都可以让给应用处理。 CV图像处理量化对比 再来看下智能机器人中视觉感知层面的处理，TogetherROS系统集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 模型推理 在AI处理方面，ROS2原生系统中并没有太多支持，只能依赖社区中的资源，很难充分发挥硬件的算力。 对此，TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 传感器驱动管理 在传感器层面，是大量数据传输的来源，TogetherROS也重点进行了优化，针对常用的传感器类型，系统中内置参数配置、系统调用和内存管理机制，同样是在芯片的硬件层面进行了加速和隔离，保障数据流的稳定生成。 机器人开发工具 机器人开发过程中的性能优化和调试，也是非常繁杂的工作，TogetherROS系统自带火焰图等工具，可以实现系统层面的调优和测试，便于开发者挖掘系统性能。 以上这些都是TogetherROS在ROS系统之上的优化和补充，未来更多特性也会不断迭代推出，让智能机器人的开发更加简单。","text_tokens":["很快","架构","变化","机器","只不过","90%","明显","例如","提高","工具","dds","建立","每","基础","输入","下","机制","数据量","过程","操作系统","程度","而","最","里程","效率","补充","找到","开发","fastrtps","这样","共享内存","尽量","15ms","同样","厂家","最大","管理机制","可选项","程序","中间","而且","繁杂","开发工具","图","标准","windows","超过"," ","所以","只能","旋转","功能","当然","增加","发挥","一个","使用","自带","收","里","需要","ceo","信息","数据传输","和","版本","充分发挥","下边","会","满足","不用","改","自家","真实","ros2","dnn","macos","而已","没有","量化","适配","并","得","封装","生成","问题","这里","想要","国际","便于","看到","也","稳定","兼容","延时","人工","只有","数据","切换","倍","此","降低","以上","微乎其微","适用","先","开源","模型","时间","内置","时","指挥","至关重要","不可","ros1","实现","广泛","做","协议","变得","消耗","交道","ros","为","智能","数据通信","感器","为了","把","来看","之外","依然","传感器","需求","不过","重新","优化","么","模式","节省","理器","缩放","调优","代码","这套","来源","会成","左侧","保障","如何","复杂","？","未来","更换","制定","角色","部署","不同","相机","两者","两个","公司","多个","了","层","用户","交给","软硬件","充足","分发","发","如果","设计","完","接收","cpu","占用","针对","master","传输","分别","再","接口","、","混合","组件","节点","发布","还有","rtos","连接","协同","较大","啦","已经","内存","省略","模拟","调用","将","依赖","cv","移植","编程","充分","驱动","成本","视觉","时候","花费","呢","算子","上","解决","middleware","我们","由于","太","雷达","要","比如","支持","熟悉","国际标准","借助","然后","哪些","听说","通信","成","物","方面","通过","结果","对于","非常","rmw","一团乱","调教","应用","库","大家","togetherros","例子","丰富","加密","单元测试","丢","各种","主要","相比","都","来讲","安装","肯定","过来","广泛应用","比较","用","保留","者","风格","挖掘","在","很多","符合","但","某些","运行","感知","应用层","处理","彼此","发布者","中","udp","产品","平台","校正","可以","统计","通信协议","更","开发成本","是","提升","实时性","带来","这","图像","opensplice","一家","好","之后","调试","ai","地平线","操作","不会","唯一","与","端","特性","具体","加速","这些","vs","类型","写","测试","交付","客户端","通信接口","于","场景","让给","它","给","推出","这个","discovery","更加","方法","开发者","/","听","系统集成","只要","让","名字","引擎","类似","重要","数据通","预想","的","工作","做到","发成","举","2","多少","到底","隔离","除了","软件","经过","常用","诟病","库会","量","对比","可选","基本","软硬","数据流","可能","接受","多","社区","中间层","据传","5g","会程","算力","某","大","按照","选择","性能","集成","实时","硬件","接入","该","火焰","目标","作为","极大","每个","零","有且","无法","迭代","线性","部分","原生","原本","延迟","。","另","常","频繁","随着","里程计","3","消失","导致","tcp","定义","层面","众多","简单明了","走","减少","继续","系统资源","对此","传感","厂商","不是","属性","到","一样","一节","自","很难","管理","内","进行","情况","打交道","高","请","重点","简称","训练","不爽","框架","达到","用率","订阅","不","人工智能","客户","大量","基于","联网","高斯","配置","一团","bpu","opencv","之前","从而","发现","轻松","完善","产品开发","一行","简单","其实","单元","图像处理","滤波","拷贝","底层","介绍","几乎","一种","最为","之上","传输数据","率","帧","占用率","管理器","—","严重","至关","软件系统","畸变","linux","不断","机器人","间层","资源","突然","就是","等","功能性","多倍","共享","不太","商业","hobot","推理","甚至","系统","其他","实际","另外","张图","此时","负荷","一团乱麻","一套","乱麻","其中","应该","要求","发送","话题","，","提供","选项","有","接收端","就","所有","芯片","参数","进程","右侧","地平","能够","复用"],"title":"性能对比","title_tokens":["对比","性能"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#togetherrosros","text":"","text_tokens":[],"title":"TogetherROS与ROS性能对比","title_tokens":["对比","togetherros","ros","性能","与"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#ros2-vs-ros1","text":"先来看下两个大版本ROS的系统架构。 在这张图中，左侧是ROS1，右侧是ROS2，两者最明显的变化，就是Master。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery——自发现机制，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的DDS系统。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于共享内存的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了，Linux、windows、MacOS、RTOS都可以。","text_tokens":["架构","变化","理器","只不过","明显","但","dds","建立","有且","下","。","会成","左侧","机制","频繁","应用层","操作系统","而","消失","彼此","中","udp","复杂","tcp","最","可以","通信协议","简单明了","走","更换","角色","找到","开发","是","两者","两个","公司","了","这","层","共享内存","图像","一样","自","好","管理","可选项","如果","中间","程序","内","接收","操作","进行","打交道","master","标准","windows","请","这些"," ","再","写","接口","、","不","节点","发布","客户","大量","客户端","通信接口","基于","rtos","一团","一个","从而","连接","它","发现","完善","内存","这个","discovery","简单","更加","里","需要","方法","ceo","信息","调用","将","和","依赖","听","版本","底层","让","下边","名字","会","驱动","时候","类似","重要","上","ros2","我们","macos","管理器","而已","的","—","雷达","比如","至关","linux","得","哪些","封装","通信","间层","库会","突然","成","就是","也","稳定","只有","通过","数据","共享","不太","可选","一团乱","系统","先","中间层","应用","指挥","至关重要","另外","张图","ros1","大","一团乱麻","协议","变得","一套","交道","乱麻","ros","主要","都","，","提供","安装","选项","肯定","把","来看","就","所有","进程","右侧","不过","在","很多"],"title":"ROS2 vs ROS1","title_tokens":["ros2","ros1"," ","vs"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#ros2","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个ROS Middleware，简称RMW，也就是制定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。","text_tokens":["符合","变化","每个","提高","dds","每","代码","无法","延迟","。","另","常","频繁","如何","中","udp","tcp","？","产品","定义","层面","可以","通信协议","最","更","开发成本","更换","制定","部署","减少","不同","开发","是","多个","厂商","了","不是","fastrtps","这样","带来","属性","这","用户","一样","opensplice","交给","厂家","一家","最大","好","发","如果","程序","设计","完","唯一","master","标准","简称","这些"," ","不爽","再","所以","写","接口","、","不","功能","当然","交付","还有","基于","联网","于","配置","一个","场景","给","轻松","产品开发","收","这个","一行","简单","省略","其实","/","移植","版本","只要","底层","满足","不用","一种","成本","改","类似","自家","解决","ros2","我们","率","middleware","的","发成","要","比如","适配","熟悉","举","并","国际标准","软件系统","除了","然后","得","听说","软件","通信","诟病","问题","这里","想要","物","就是","国际","等","也","稳定","数据","切换","对于","基本","商业","多","rmw","适用","系统","社区","先","开源","应用","其他","例子","5g","时","丰富","ros1","加密","某","实现","广泛","丢","按照","做","协议","各种","选择","ros","应该","相比","性能","都","为","来讲","，","提供","安装","为了","肯定","把","过来","之外","广泛应用","就","用","需求","接入","能够","不过","该","重新","目标","复用","在","么"],"title":"ROS2系统架构","title_tokens":["架构","ros2","系统"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#togetherros-vs-ros2","text":"TogetherROS就是在这样一个ROS2架构的基础上，继续进行了优化，原本DDS通信的部分依然保留，可以适配不同厂家的DDS通信系统，在此之上，针对功能性的组件进行了众多优化和补充，在上一节中我们也给大家介绍了这套框架。 优化之后的TogetherROS系统，在数据传输和AI处理方面，到底有多少提升呢，我们来看具体的对比数据。","text_tokens":["架构","介绍","大家","据传","dds","进行","togetherros","之上","基础","针对","呢","这套","上","ros2","部分","我们","原本","传输","具体","。","的"," ","框架","处理","适配","，","中","多少","组件","到底","功能","可以","有","来看","众多","依然","通信","补充","一个","继续","不同","给","提升","就是","方面","对比","功能性","也","了","这样","保留","数据","优化","此","一节","厂家","数据传输","和","之后","在","ai","系统"],"title":"TogetherROS vs ROS2","title_tokens":["ros2","togetherros"," ","vs"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_1","text":"先来看下操作系统至关重要的数据通信功能，我们针对ROS中最为常用的大数据传输模式——话题通信进行了测试。 在单元测试中，使用同样的算力平台，分别安装TogetherROS和ROS2系统，然后在其中运行一个话题通信的发布者与订阅者，实现不同数据量的传输。经过数据统计，我们可以看到，在数据通信延时方面，随着数据量的增加，ROS2系统在通信延时、发送端和接收端的CPU占用率上，都会程线性增加，可以预想，在数据量较大的情况下，系统的通信负荷会非常严重。 而在TogetherROS系统中，由于使用了零拷贝的传输机制，传输数据量的增加，并不会导致延时和CPU占用率的增加，极大程度节省了系统资源。 在场景测试中，我们尽量模拟真实机器人的应用，使用TogetherROS和ROS2系统连接了多个相机、雷达和里程计等传感器，作为大量数据的输入来源，继续进行了测试，结果和之前的单元测试类似，ROS2系统此时的CPU占用率已经超过90%，想要运行数据传输之外的应用功能，几乎是不可能的，通信延时也达到了15ms以上，这在某些实时性要求比较高的应用中，是不可接受的。 而在TogetherROS系统中，CPU占用和通信延时也微乎其微，更多系统资源都可以让给应用处理。","text_tokens":["模式","节省","作为","机器","极大","90%","零","某些","运行","线性","输入","来源","下","。","机制","数据量","操作系统","随着","处理","程度","而","里程计","发布者","中","导致","平台","统计","可以","里程","更","不同","系统资源","继续","是","相机","传感","实时性","多个","了","这","尽量","15ms","同样","接收","cpu","操作","进行","占用","不会","针对","情况","与","端","高","传输","超过","分别"," ","达到","用率","订阅","、","测试","不","发布","功能","大量","增加","使用","一个","场景","连接","之前","较大","让给","已经","单元","模拟","数据传输","和","拷贝","会","几乎","最为","类似","重要","传输数据","上","由于","数据通","我们","ros2","真实","占用率","预想","的","—","雷达","严重","至关","并","然后","机器人","经过","通信","常用","资源","想要","方面","看到","量","等","也","延时","数据","结果","可能","以上","接受","微乎其微","非常","多","系统","先","应用","据传","togetherros","至关重要","不可","会程","此时","算力","负荷","单元测试","实现","大","其中","ros","要求","都","发送","话题","，","数据通信","安装","感器","实时","来看","之外","比较","接收端","传感器","者","在"],"title":"通信效率量化对比","title_tokens":["量化","通信","对比","效率"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#cv","text":"再来看下智能机器人中视觉感知层面的处理，TogetherROS系统集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。","text_tokens":["机器","例如","缩放","运行","下","。","感知","处理","3","中","校正","层面","可以","更","效率","系统资源","开发","提升","了","到","图像","软硬件","而且","地平线","进行","与","加速","具体","分别"," ","再","接口","、","旋转","混合","测试","高斯","opencv","协同","方法","滤波","cv","系统集成","编程","底层","引擎","视觉","算子","上","率","我们","帧","的","做到","2","畸变","机器人","软件","常用","资源","便于","等","对比","兼容","通过","多倍","倍","hobot","软硬","降低","甚至","系统","应用","库","togetherros","实现","消耗","性能","智能","集成","，","来看","芯片","硬件","地平","风格","在"],"title":"CV图像处理量化对比","title_tokens":["对比","图像","处理","量化","图像处理","cv"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_2","text":"在AI处理方面，ROS2原生系统中并没有太多支持，只能依赖社区中的资源，很难充分发挥硬件的算力。 对此，TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。","text_tokens":["很快","开源","系统集成","调教","充分发挥","底层","模型","充分","应用","库","实际","引擎","不用","togetherros","时间","花费","这套","上","ros2","原生","算力","太","。","dnn","训练","的","保障"," ","和","没有","处理","支持","只能","集成","智能","中","，","并","分发","提供","人工智能","借助","可以","发挥","众多","基于","很多","bpu","就","资源","使用","部署","芯片","对此","开发","啦","方面","硬件","了","人工","数据","推理","hobot","开发者","充足","多","依赖","很难","在","ai","社区","系统"],"title":"模型推理","title_tokens":["模型","推理"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_3","text":"在传感器层面，是大量数据传输的来源，TogetherROS也重点进行了优化，针对常用的传感器类型，系统中内置参数配置、系统调用和内存管理机制，同样是在芯片的硬件层面进行了加速和隔离，保障数据流的稳定生成。","text_tokens":["据传","进行","togetherros","内置","针对","来源","传输","加速","。","重点","机制","的","保障","类型","，","中","感器","、","管理机制","隔离","层面","大量","生成","常用","配置","传感器","芯片","是","参数","传感","硬件","也","稳定","了","内存","数据","优化","数据流","数据传输","调用","同样","和","在","管理","系统"],"title":"传感器驱动管理","title_tokens":["传感","驱动","传感器","感器","管理"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_4","text":"机器人开发过程中的性能优化和调试，也是非常繁杂的工作，TogetherROS系统自带火焰图等工具，可以实现系统层面的调优和测试，便于开发者挖掘系统性能。 以上这些都是TogetherROS在ROS系统之上的优化和补充，未来更多特性也会不断迭代推出，让智能机器人的开发更加简单。","text_tokens":["机器","让","工具","会","调优","togetherros","繁杂","之上","图","迭代","特性","实现","。","的","这些"," ","过程","工作","ros","性能","都","智能","，","中","测试","不断","可以","层面","机器人","在","未来","更","补充","自带","开发","是","便于","等","也","推出","简单","火焰","更加","挖掘","优化","开发者","以上","多","和","调试","非常","系统"],"title":"机器人开发工具","title_tokens":["机器","机器人","工具","开发工具","开发"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/","text":"TogetherROS应用场景 相比手机、电脑等通用平台，机器人的类型可是千变万化，构建机器人操作系统的难度就远比手机和电脑的操作系统要复杂很多。机器人的主流应用大致可以分为服务机器人、工业机器人、特种机器人三个方向，无论是在哪一方向，都会面临很多问题。比如传感器、执行器等器件选型复杂，不同场景下需要的性能和参数都有所不同，这就要求操作系统得兼容尽量多的器件。 不同场景下的计算平台算力和资源差异很大，一般都需要进行定制化的裁剪和优化，这就得有一系列工具便于系统的定制和裁剪。每个场景中的应用功能变化也很大，各种算法的集成和开发要尽量简单，算法基于的数据也在持续迭代，需要一套工具链来提供迭代和升级。 针对各种各样的需求变化，TogetherROS系统都提供了支持。 服务机器人 在服务机器人领域，场景和功能尤其复杂，有家里的扫地机器人，有餐厅里的送餐机器人，有咖啡店里的双臂机器人，还有物流送货的飞行机器人，虽然每一个机器人平台的构型不同，但都需要动态处理多种多样的环境变化，这就需要TogetherROS系统基于大量数据的AI处理和丰富的组件功能支持，快速推动各种功能的落地。 工业机器人 在工业机器人领域，目前的机器人主要以工业机械臂和物流移动机器人形态为主，场景相比服务机器人要标准很多，核心目的是要提高生产效率，这就要求机器人可以长期稳定的运行，同时实时处理各项运动功能，TogetherROS系统可裁剪和性能稳定等特点，都可以符合要求。 特种机器人 而在特种机器人的应用领域，结合了服务和工业场景中的不少特点，机器人形态多变，得动态处理各种复杂场景里的事件，例如火灾、地震、管道等场景，更是会发生很多不可预料的情况，TogetherROS系统中的AI处理可以较好的保障不同环境中的感知效果，同时端云联动，可以实现大量数据的训练和部署，不断提高对复杂环境的处理能力。 可见，TogetherROS系统充分考虑了众多应用场景的需求，不仅可以满足智能机器人开发过程中的每一个环节，也考虑到了机器人未来在产业中的应用效果。","text_tokens":["符合","变化","机器","核心","动机","每个","例如","提高","工具","但","链来","每","运行","迭代","多种多样","推动","端云","下","大致","。","落地","感知","能力","计算","保障","可见","过程","操作系统","处理","而","咖啡","中","实时处理","发生","各种各样","复杂","三个","平台","移动","可以","飞行","移动机器人","众多","未来","效率","面临","部署","不同","开发","选型","是","传感","构型","了","到","这","预料","尽量","千变万化","领域","事件","长期","好","ai","通用","无论是","应用领域","餐厅","操作","进行","一系","针对","情况","特种","定制","执行器","标准","充分考虑","训练"," ","难度","双臂","效果","目前","不仅","类型","虽然","、","形态","组件","多变","更是","功能","一系列","大量","构建","考虑","还有","基于","有所","很多","环境","为主","场景","很大","一个","各项","一","符合要求","手机","无论","服务","简单","里","需要","和","可","各样","快速","工业","化","算法","电脑","送货","会","充分","满足","分为","结合","地震","物流","的","多种","要","运动","比如","支持","环节","不断","机器人","得","问题","资源","特点","不少","系列","差异","便于","等","也","稳定","兼容","管道","机械","数据","家里","送餐","目的","同时","多","扫地","系统","执行","应用","togetherros","升级","丰富","不可","可是","比","算力","火灾","实现","产业","持续","方向","各种","一套","主要","性能","相比","要求","都","智能","集成","，","提供","多样","感器","生产","有所不同","实时","一般","有","主流","动态","臂","咖啡店","传感器","就","器件","远","参数","需求","尤其","裁剪","联动","较","优化","对","以","在","哪"],"title":"应用场景","title_tokens":["应用","场景"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#togetherros","text":"相比手机、电脑等通用平台，机器人的类型可是千变万化，构建机器人操作系统的难度就远比手机和电脑的操作系统要复杂很多。机器人的主流应用大致可以分为服务机器人、工业机器人、特种机器人三个方向，无论是在哪一方向，都会面临很多问题。比如传感器、执行器等器件选型复杂，不同场景下需要的性能和参数都有所不同，这就要求操作系统得兼容尽量多的器件。 不同场景下的计算平台算力和资源差异很大，一般都需要进行定制化的裁剪和优化，这就得有一系列工具便于系统的定制和裁剪。每个场景中的应用功能变化也很大，各种算法的集成和开发要尽量简单，算法基于的数据也在持续迭代，需要一套工具链来提供迭代和升级。 针对各种各样的需求变化，TogetherROS系统都提供了支持。","text_tokens":["变化","机器","每个","工具","链来","迭代","下","大致","。","计算","操作系统","中","各种各样","复杂","三个","平台","可以","面临","不同","开发","选型","传感","了","这","尽量","千变万化","通用","无论是","操作","进行","一系","针对","特种","定制","执行器"," ","难度","类型","、","功能","一系列","构建","基于","有所","很多","场景","很大","一","手机","无论","服务","简单","需要","和","各样","工业","化","算法","电脑","会","分为","的","要","比如","支持","机器人","得","问题","资源","系列","差异","便于","等","也","兼容","数据","多","系统","执行","应用","togetherros","升级","可是","比","算力","持续","方向","各种","一套","性能","相比","要求","都","集成","，","提供","感器","有所不同","一般","有","主流","传感器","就","器件","远","参数","需求","裁剪","优化","在","哪"],"title":"TogetherROS应用场景","title_tokens":["togetherros","应用","场景"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_1","text":"在服务机器人领域，场景和功能尤其复杂，有家里的扫地机器人，有餐厅里的送餐机器人，有咖啡店里的双臂机器人，还有物流送货的飞行机器人，虽然每一个机器人平台的构型不同，但都需要动态处理多种多样的环境变化，这就需要TogetherROS系统基于大量数据的AI处理和丰富的组件功能支持，快速推动各种功能的落地。","text_tokens":["快速","变化","机器","餐厅","送货","但","togetherros","每","丰富","多种多样","推动","物流","落地","。","各种","的","多种","双臂","处理","咖啡","虽然","都","支持","，","多样","复杂","组件","平台","功能","大量","有","机器人","飞行","还有","动态","基于","咖啡店","环境","就","ai","场景","一个","不同","构型","尤其","服务","家里","这","数据","领域","里","送餐","需要","和","在","扫地","系统"],"title":"服务机器人","title_tokens":["服务","机器人","机器"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_2","text":"在工业机器人领域，目前的机器人主要以工业机械臂和物流移动机器人形态为主，场景相比服务机器人要标准很多，核心目的是要提高生产效率，这就要求机器人可以长期稳定的运行，同时实时处理各项运动功能，TogetherROS系统可裁剪和性能稳定等特点，都可以符合要求。","text_tokens":["符合","机器","核心","工业","动机","提高","togetherros","运行","标准","物流","。","的","处理","目前","主要","要","相比","要求","运动","性能","都","，","生产","实时处理","形态","实时","移动","功能","可以","机器人","可","移动机器人","臂","效率","就","为主","场景","特点","各项","是","符合要求","等","稳定","裁剪","服务","机械","这","领域","目的","同时","长期","和","以","在","很多","系统"],"title":"工业机器人","title_tokens":["机器人","机器","工业"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_3","text":"而在特种机器人的应用领域，结合了服务和工业场景中的不少特点，机器人形态多变，得动态处理各种复杂场景里的事件，例如火灾、地震、管道等场景，更是会发生很多不可预料的情况，TogetherROS系统中的AI处理可以较好的保障不同环境中的感知效果，同时端云联动，可以实现大量数据的训练和部署，不断提高对复杂环境的处理能力。 可见，TogetherROS系统充分考虑了众多应用场景的需求，不仅可以满足智能机器人开发过程中的每一个环节，也考虑到了机器人未来在产业中的应用效果。","text_tokens":["机器","例如","提高","每","端云","能力","。","感知","保障","可见","过程","处理","而","中","发生","复杂","可以","众多","未来","部署","不同","开发","了","到","预料","领域","事件","好","ai","应用领域","情况","特种","充分考虑","训练","效果"," ","不仅","形态","、","多变","更是","大量","考虑","环境","场景","一个","服务","里","和","工业","充分","会","满足","结合","地震","的","环节","不断","机器人","得","特点","不少","等","管道","也","数据","同时","系统","应用","togetherros","不可","火灾","产业","实现","各种","智能","，","动态","需求","联动","较","对","在","很多"],"title":"特种机器人","title_tokens":["特种","机器人","机器"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/","text":"旭日X3派介绍 TogetherROS是一个软件层面的系统，要想使用它，当然得找一个硬件层面的计算平台，安装之后才能使用啦。 之前我们提到，TogetherROS会基于地平线的AI芯片，充分发挥硬件性能，我们如何使用这颗芯片呢？ 旭日X3派 没问题，地平线已经为我们准备好了，那就是搭载旭日X3芯片的机器人开发板——旭日X3派。 第一眼看上去，大家是否会想到树莓派呢？没错，为了适应开发者的使用习惯，兼容市面上大量已有的模块，旭日X3派的整体外观和接口形态都接近树莓派，不过面向的开发对象以及板卡的计算实力，和树莓派就完全不同了。 类似这些常用的传感器，旭日X3派统统都可以支持，未来还有更多机器人套件会出现在大家身边。 大家可以在这张表中，看到旭日X3派的硬件资源，CPU是四核A53，频率1.2Hz，在系统内还可以进行超频，BPU就是硬件级的AI引擎，这是旭日X3派相比市面上其他开发板，最大的不同，也是核心性能的主要来源，类似于业界常听到的NPU，这里使用的是地平线机器人独有的伯努利2.0架构，可以提供5Tops的等效算力支持。 内存方面，大家可以选择2GB或者4GB的版本，存储使用的是SD卡，我们可以自行选择，只要大于8GB就可以啦。 在多媒体方面，旭日X3派支持硬件级别的H265和H264编解码，常用的图像和视频都可以流畅播放。 接口方面，尽量可以满足我们常用外接设备和开发的需求，这里是一个CSI的相机接口，板载USB有3个，包含1个USB3.0和2个USB2.0，这里是一个板载的调试串口，我们可以通过它获取系统层面的很多调试信息，也可以与板卡进行通信。 板卡上也搭载了有线网络和无线网络，这个有线网口我们可以直接用网线连接到电脑，就可以在电脑上远程登录和板卡通信了，或者连接到路由器，让板卡直接上网，无线网络和蓝牙是一个二合一的模块，我们也可以直接通过wiki，让板卡连接到某个网络中。 显示接口主要是这里的HDMI，如果我们先要看到系统界面，或者后续很多视觉例程的识别效果，都可以通过HDMI外接一个显示器进行显示。 最后还有至关重要的扩展接口，有40个引脚，和树莓派的接口定义一致，什么GPIO、串口、I2C、SPI等等，一应俱全。 这块板卡我们在使用的时候，推荐使用5V3A的电源，通过TypeC线连接到这里供电，官方提供的系统目前是Ubuntu20.04，使用起来和原生系统没有太大差别。 总体来讲， 旭日X3派是一款面向生态开发者的嵌入式AI开发板，接口兼容树莓派，具有5Tops的端侧推理算力，以及4核ARM A53的处理能力。 面对个人开发者，旭日X3派可以让每一位开发者拥有自己的AI开发套件，不再受开发板高昂的价格限制，面对高等院校，使用旭日X3派开发套件探索AI和机器人应用是学习的开始，有助于学生快速入门人工智能与机器人开发，面对产业，旭日X3派以及地平线的AI工具链，可以帮助客户将产品尽快推向市场，快速落地智能机器人方向的解决方案。 旭日X3M芯片 在旭日X3派上，最为核心的当然就是这颗AI芯片了，这是关于芯片的具体信息，供大家参考。 值得一提的是，随着芯片的技术迭代，2023年，地平线将推出X5芯片，比较大的变化是CPU升级到了8核A55，主频提升到1.8GHz，BPU的算力也将达到8Tops，还加入了GPU，以及更多可扩展的接口。 在使用旭日X3派的过程中，大家也可以期待旭日X5派了。 旭日X3派接口 好啦，还是回到旭日X3派的开发接口上来，我们再做一个整理，这些就是我们使用开发板进行智能机器人开发过程中，最为常用的接口啦。 大家目前在树莓派或者其他开发板上使用的绝大部分模块，基本都可以在旭日X3派上复用，同时还有更多智能化的玩法等着大家。 关于40Pin扩展接口的序号排布，大家可以看这里，引脚的序号是从靠近HDMI板卡内测的开始算起，是引脚1，然后依次蛇形计数，分别是1、2、3、4、5，一直到这里是39和40。 这张图片是40PIN扩展接口的详细定义，有3.3V和5V的电源信号，有I2C、I2S、SPI、UART等通信接口，还有很多可动态配置的GPIO信号，基本可以满足各种各样的机器人开发啦。 好啦，关于旭日X3派这块开发板我们已经了解清楚了，具体该如何使用呢，我们操作起来。","text_tokens":["起","架构","变化","机器","串口","工具","端侧","每","界面","2023","入门","靠近","过程","无线","ghz","有线","总体","网线","例程","播放","开发","尽量","价格","4","看","最大","或者","个","独有","大部分","上来"," ","csi","目前","i2c","远程","俱全","当然","发挥","第一眼","树莓","一个","使用","ubuntu20.04","后续","解决方案","信息","帮助","和","版本","解码","充分发挥","清楚","推向市场","会","满足","h265","助于","没有","5v","某个","已有","这颗","x3m","得","问题","这里","最后","期待","看到","也","兼容","人工","以及","识别","先","至关重要","一直","做","还是","整理","为","智能","设备","wiki","感器","为了","登录","起来","是否","提到","8gb","传感器","大于","需求","没","不过","sd","常听到","实力","1.2","这张","来源","能力","开始","如何","一致","a55","？","5v3a","没错","搭载","未来","开发板","usb3.0","不同","相机","了","usb","推荐","分发","如果","个人","cpu","等等","尽快","a53","分别","方案","uart","引脚","效果","再","扩展","接口","形态","、","spi","一款","还有","连接","啦","已经","内存","身边","显示器","8","将","gpio","嵌入式","各样","这块","主频","智能化","充分","获取","视觉","时候","限制","呢","关于","hz","上","40","我们","解决","值得","太","差别","要","支持","核","外接","然后","通信","等效","方面","8tops","推向","通过","同时","线","一位","高等","应用","大家","togetherros","旭日","有线网","产业","官方","外","各种","主要","着","相比","都","来讲","安装","接设备","拥有","派","视频","比较","用","1.8","探索","二合","在","很多","落地","自行","计算","有助于","usb2.0","处理","是从","x5","中","排布","产品","平台","绝大部分","可以","更","4gb","详细","看上去","还","是","这是","提升","高等院校","统统","这","图像","v","好","之后","调试","ai","口","地平线","操作","与","具体","一应俱全","这些","找","绝大","硬件资源","一眼","存储","套件","超频","面对","通信接口","于","40pin","它","四核","推出","值得一提的是","这个","受","接口定义","开发者","gpu","编解码","可","快速","只要","让","引擎","x3","类似","重要","接近","的","2.0","具有","市场","那","hdmi","2","软件","常用","完全","多媒体","年","直接","typec","基本","5tops","多","流畅","39","级","算力","外观","大","选择","二合一","性能","无线网络","模块","动态","蛇形","看上","npu","硬件","蓝牙","内测","该","张表中","适应","核心","算","迭代","部分","原生","了解","。","市面上","随着","市面","3","3.3","路由","计数","供","各种各样","定义","层面","传感","到","序号","电源","5","媒体","合一","级别","自己","内","对象","链","学习","习惯","进行","2gb","生态","不再","调试信息","图片","高昂","上网","达到","准备","人工智能","客户","听到","大量","参考","基于","配置","bpu","大部","之前","1","显示","卡","什么","i2s","信号","回到","想","介绍","电脑","最为","供电","想到","学生","有助","—","院校","至关","伯努利","网络","机器人","出现","板载","业界","资源","路由器","线网","就是","等","推理","系统","才能","面上","其他","嵌入","升级","频率","依次","方向","板卡","上去","面向","，","提供","无线网","第一","玩法","加入","有","就","包含","芯片","技术","地平","arm","h264","复用","整体","一应"],"title":"旭日X3派介绍","title_tokens":["旭日","派","x3","介绍"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3","text":"TogetherROS是一个软件层面的系统，要想使用它，当然得找一个硬件层面的计算平台，安装之后才能使用啦。 之前我们提到，TogetherROS会基于地平线的AI芯片，充分发挥硬件性能，我们如何使用这颗芯片呢？","text_tokens":["才能","充分发挥","想","地平线","充分","会","togetherros","呢","我们","。","计算","的","找"," ","要","性能","如何","，","分发","安装","这颗","平台","？","层面","当然","得","软件","发挥","基于","提到","一个","使用","之前","芯片","它","是","啦","硬件","地平","之后","ai","系统"],"title":"旭日X3派介绍","title_tokens":["旭日","派","x3","介绍"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3_1","text":"没问题，地平线已经为我们准备好了，那就是搭载旭日X3芯片的机器人开发板——旭日X3派。 第一眼看上去，大家是否会想到树莓派呢？没错，为了适应开发者的使用习惯，兼容市面上大量已有的模块，旭日X3派的整体外观和接口形态都接近树莓派，不过面向的开发对象以及板卡的计算实力，和树莓派就完全不同了。 类似这些常用的传感器，旭日X3派统统都可以支持，未来还有更多机器人套件会出现在大家身边。 大家可以在这张表中，看到旭日X3派的硬件资源，CPU是四核A53，频率1.2Hz，在系统内还可以进行超频，BPU就是硬件级的AI引擎，这是旭日X3派相比市面上其他开发板，最大的不同，也是核心性能的主要来源，类似于业界常听到的NPU，这里使用的是地平线机器人独有的伯努利2.0架构，可以提供5Tops的等效算力支持。 内存方面，大家可以选择2GB或者4GB的版本，存储使用的是SD卡，我们可以自行选择，只要大于8GB就可以啦。 在多媒体方面，旭日X3派支持硬件级别的H265和H264编解码，常用的图像和视频都可以流畅播放。 接口方面，尽量可以满足我们常用外接设备和开发的需求，这里是一个CSI的相机接口，板载USB有3个，包含1个USB3.0和2个USB2.0，这里是一个板载的调试串口，我们可以通过它获取系统层面的很多调试信息，也可以与板卡进行通信。 板卡上也搭载了有线网络和无线网络，这个有线网口我们可以直接用网线连接到电脑，就可以在电脑上远程登录和板卡通信了，或者连接到路由器，让板卡直接上网，无线网络和蓝牙是一个二合一的模块，我们也可以直接通过wiki，让板卡连接到某个网络中。 显示接口主要是这里的HDMI，如果我们先要看到系统界面，或者后续很多视觉例程的识别效果，都可以通过HDMI外接一个显示器进行显示。 最后还有至关重要的扩展接口，有40个引脚，和树莓派的接口定义一致，什么GPIO、串口、I2C、SPI等等，一应俱全。 这块板卡我们在使用的时候，推荐使用5V3A的电源，通过TypeC线连接到这里供电，官方提供的系统目前是Ubuntu20.04，使用起来和原生系统没有太大差别。 总体来讲， 旭日X3派是一款面向生态开发者的嵌入式AI开发板，接口兼容树莓派，具有5Tops的端侧推理算力，以及4核ARM A53的处理能力。 面对个人开发者，旭日X3派可以让每一位开发者拥有自己的AI开发套件，不再受开发板高昂的价格限制，面对高等院校，使用旭日X3派开发套件探索AI和机器人应用是学习的开始，有助于学生快速入门人工智能与机器人开发，面对产业，旭日X3派以及地平线的AI工具链，可以帮助客户将产品尽快推向市场，快速落地智能机器人方向的解决方案。","text_tokens":["架构","机器","串口","工具","端侧","每","界面","入门","无线","有线","总体","网线","例程","播放","开发","尽量","价格","4","最大","或者","个","独有"," ","csi","目前","i2c","远程","俱全","第一眼","树莓","使用","一个","ubuntu20.04","后续","解决方案","信息","帮助","和","版本","解码","推向市场","会","满足","h265","助于","没有","某个","已有","问题","这里","最后","看到","也","兼容","人工","以及","识别","先","至关重要","为","智能","设备","wiki","感器","为了","登录","起来","是否","8gb","传感器","大于","需求","没","不过","sd","常听到","实力","1.2","来源","能力","开始","一致","？","5v3a","没错","搭载","未来","开发板","usb3.0","不同","相机","了","usb","推荐","如果","个人","cpu","等等","尽快","a53","方案","引脚","效果","扩展","接口","形态","、","spi","一款","还有","连接","啦","已经","内存","身边","显示器","将","gpio","嵌入式","这块","获取","视觉","时候","限制","呢","hz","上","40","我们","解决","太","差别","要","支持","核","外接","通信","等效","方面","推向","通过","线","一位","高等","应用","大家","旭日","有线网","产业","官方","外","主要","相比","都","来讲","接设备","拥有","派","视频","用","探索","二合","在","很多","落地","自行","计算","有助于","usb2.0","处理","中","产品","可以","更","4gb","看上去","还","是","这是","高等院校","统统","这","图像","好","调试","ai","口","地平线","与","一应俱全","这些","硬件资源","一眼","存储","套件","超频","面对","于","它","四核","这个","受","接口定义","开发者","编解码","快速","只要","让","引擎","x3","类似","重要","接近","的","2.0","具有","市场","那","hdmi","2","常用","完全","多媒体","直接","typec","5tops","多","流畅","级","算力","外观","大","选择","二合一","性能","无线网络","模块","看上","npu","硬件","蓝牙","张表中","适应","核心","原生","。","市面上","市面","3","路由","定义","层面","传感","到","电源","媒体","合一","级别","自己","内","对象","链","学习","习惯","进行","2gb","生态","不再","调试信息","高昂","上网","准备","人工智能","客户","听到","大量","bpu","1","显示","卡","什么","电脑","供电","想到","学生","有助","—","院校","至关","伯努利","网络","机器人","出现","板载","业界","资源","路由器","线网","就是","推理","系统","面上","其他","嵌入","频率","方向","板卡","上去","面向","，","提供","无线网","第一","有","就","包含","芯片","地平","arm","h264","整体","一应"],"title":"旭日X3派","title_tokens":["旭日","派","x3"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3m","text":"在旭日X3派上，最为核心的当然就是这颗AI芯片了，这是关于芯片的具体信息，供大家参考。 值得一提的是，随着芯片的技术迭代，2023年，地平线将推出X5芯片，比较大的变化是CPU升级到了8核A55，主频提升到1.8GHz，BPU的算力也将达到8Tops，还加入了GPU，以及更多可扩展的接口。 在使用旭日X3派的过程中，大家也可以期待旭日X5派了。","text_tokens":["变化","核心","主频","地平线","cpu","大家","最为","x3","升级","关于","迭代","上","旭日","值得","算力","具体","。","2023","大","的"," ","过程","随着","x5","ghz","达到","扩展","a55","，","核","接口","中","这颗","供","派","加入","当然","参考","多","比较","更","可以","bpu","使用","芯片","年","技术","是","这是","提升","就是","1.8","还","也","期待","了","值得一提的是","地平","推出","8tops","到","以及","8","信息","gpu","将","可","在","ai"],"title":"旭日X3M芯片","title_tokens":["x3m","芯片","旭日"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3_2","text":"好啦，还是回到旭日X3派的开发接口上来，我们再做一个整理，这些就是我们使用开发板进行智能机器人开发过程中，最为常用的接口啦。 大家目前在树莓派或者其他开发板上使用的绝大部分模块，基本都可以在旭日X3派上复用，同时还有更多智能化的玩法等着大家。 关于40Pin扩展接口的序号排布，大家可以看这里，引脚的序号是从靠近HDMI板卡内测的开始算起，是引脚1，然后依次蛇形计数，分别是1、2、3、4、5，一直到这里是39和40。 这张图片是40PIN扩展接口的详细定义，有3.3V和5V的电源信号，有I2C、I2S、SPI、UART等通信接口，还有很多可动态配置的GPIO信号，基本可以满足各种各样的机器人开发啦。 好啦，关于旭日X3派这块开发板我们已经了解清楚了，具体该如何使用呢，我们操作起来。","text_tokens":["起","机器","这张","算","部分","了解","。","靠近","过程","是从","3","开始","如何","3.3","中","计数","各种各样","排布","绝大部分","可以","定义","更","详细","开发板","开发","是","了","到","序号","电源","4","看","5","v","好","或者","操作","进行","大部分","上来","具体","分别","uart","这些","引脚"," ","绝大","图片","目前","再","扩展","接口","、","i2c","spi","还有","树莓","通信接口","配置","一个","使用","大部","40pin","啦","已经","1","和","可","i2s","gpio","各样","信号","回到","清楚","这块","智能化","满足","最为","x3","关于","呢","上","40","我们","的","5v","hdmi","2","然后","机器人","常用","通信","这里","就是","等","基本","同时","多","39","其他","大家","依次","旭日","一直","做","各种","板卡","还是","整理","着","智能","都","，","模块","玩法","派","起来","有","动态","蛇形","内测","该","复用","在","很多"],"title":"旭日X3派接口","title_tokens":["接口","旭日","派","x3"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/","text":"TogetherROS系统安装 我们在旭日X3派上安装系统镜像，并进一步完成TogetherROS系统的安装，大家如果手上有开发板的话，建议跟随课程一起操作。 先来了解一下TogetherROS系统安装的整体流程： 第一步，要完成硬件的准备，我们需要找到一块旭日X3派的开发板，并且准备好电源线、SD卡、读卡器、串口模块等必要的配件，当然还需要有一台操作的电脑啦。 硬件都准备好之后，就可以进入第二步，给旭日X3派下载并安装Ubuntu系统镜像，这是TogetherROS系统运行必要的底层环境。 第三步，就可以开始安装TogetherROS啦。 安装完成后，我们还需要进一步完成一些配置工作，可以也让旭日X3派板卡上的各项功能都运行起来，保证TogetherROS的顺利运行。 最后一步，就是体验TogetherROS出厂自带的一些例程啦，确定一切安装顺利，为后续机器人开发最好准备。 接下来，我们就按照这个流程，开始操作。 硬件准备 先来完成硬件准备： 找到一块旭日X3派的板卡，准备好一套5V3A的电源和TypeC电源线，稍后会连接到这里的电源接口，给板卡供电。 然后准备好一张8GB以上的SD卡和读卡器，下一步我们会在上边烧写系统镜像。 接下来使用一个串口模块，连接旭日X3派和笔记本电脑，便于下一步看到系统镜像的启动信息。 如果大家有网线和HDMI显示器的话，也可以先准备好，在之后的操作中用的上，如果没有也没关系，不影响TogetherROS系统的基本使用。 硬件准备齐全之后，就可以进入第二步了。 安装Ubuntu系统 我们来给旭日X3派安装Ubuntu系统，关于系统镜像和烧写工具，都可以在地平线AI社区中找到。 下载SD卡镜像 首先登录地平线AI社区，点击”产品中心——资源中心“， 进入页面后下拉至”X3派资料包“专区，点击下载其中的”旭日X3派系统镜像“，会有一个压缩包，把它保存到当前电脑桌面。 此外，我们稍后将镜像烧写到SD卡里，需要用到烧写小工具，如果大家电脑上没有合适的工具，可以下拉到”工具“专区，点击下载”烧录 工具rufus\"。 下载完后我们来看一下两个压缩文件中的内容： 其中一个是烧写X3派镜像文件的工具，压缩包中有两个文件，一个是system_sdcard.img文件，是我们稍后会用于烧写SD卡的镜像文件；另一个是disk_nand.img文件，用于烧写旭日X3派中的flash文件，大多数情况下都用不到； 另一个压缩包里是我们稍后用于烧写镜像的rufus工具。 我们把两个压缩包都解压出来，然后把SD卡放进读卡器、插到电脑端 接下来就可以开始烧写SD卡镜像。 烧写SD卡镜像 运行解压出来的烧写工具rufus。启动后需要确认几个参数： 第一个是确定烧写到哪个磁盘上。工具软件会默认搜索当前读取到的SD卡，下图所示磁盘名称，就是演示时插好的16GB的SD卡。 下一步我们点击“选择”，找到需要烧写的镜像文件。演示中已经把需要的system_sdcrd.img文件放在了桌面上，选中它点击“打开”； 下面的内容就可以用默认的配置，点击“开始”会弹出警告告诉我们将把磁盘里的所有文件都清除掉，这没有问题，我们点击“选择“，就开始烧写SD卡镜像了。 进度条显示“准备就绪”后，点击“关闭”，此时你的SD卡镜像就已经烧写完成了，我们把SD卡的读卡器拔出来。 连接串口 接下来把SD卡插到旭日X3派上。 把串口模块连接到电脑的USB上。 连接好串口模块后，为了确保串口已经跟电脑连接成功、并且安装好了驱动，我们可以右键“我的电脑”图标、选择“管理”，在打开的”计算机管理“界面中找到”设备管理器——端口“，检查一下你的USB串口是否已经显示出了对应的设备。演示中的端口号为COM6,说明串口已经成功驱动了。 如果没有看到自己的设备号、或者设备号前有一个叹号或者问号标记，说明你的驱动没有安装好，可以搜索网络上的技术博客，来完成串口模块的驱动安装。 关闭“计算机管理”窗口，接下来就要通过串口与旭日X3派进行连接了。这里我们需要用到一个串口小工具，大家可以使用自己常用的工具。 演示中使用的串口工具是MobaXterm,十分推荐大家使用这个工具，里面集成了开发过程中需要使用的各种小工具，我们后续的串口通讯、SSH网络通讯，都会使用这些工具完成。 打开MobaXterm,点击左上角的\"Session\"； 找到里面的“Serial\"串口选项，点击打开；串口号选择本机连接到旭日X3派的相应端口，演示中为COM6; 波特率选择921600。选项好后点击“OK”。 现在串口已经连接成功了，但当前旭日X3派的板子还没有上电，所以没有任何信息弹出。 我们把电源线与旭日X3派连接好。 可以看到弹出了日志提醒：“当前系统正在启动”。等待系统加载完成。 现在可以看到系统已经加载成功了。 串口登录系统 接下来我们需要登录系统。我们有两个账号可以用来登录： 账号1：用户名为root，密码也为root； 账号2：用户名为storise，密码也为storise； 这里演示使用root用户来登录。输入用户名、密码，回车，需要等待大约1分钟，因为第一次登录需要展开一些系统必要的安装软件，安装好后系统会自动重启。 系统自动重启后，再次使用root用户登录。现在你的UBUNTU系统就已经安装好了。 我们可以使用LINUX系统常用的一些命令行进行查看和设置，比如ls查看当前命令，pwd查看当前路径，还可以使用mkdir命令创建文件夹，比如这里,一个test文件夹就创建成功了。 到这里为止，旭日X3派上的Ubuntu系统就安装成功啦，我们继续下一步。 安装TogetherROS系统 安装TogetherROS系统。 为了达到更好的通信效率，我们后续使用有线网络连接旭日X3派，这里大家可以拿出一根网线，直接连接电脑和旭日X3派的网口。 旭日X3派中出厂已经配置好了静态IP地址，是192.168.1.10，我们将使用的电脑也配置到同一网段即可。 配置有线网络 接下来请大家拿一根网线，连接旭日X3派和电脑。 然后，在电脑端打开控制面板，找到“查看网络状态和任务”。 找到已经连接成功的以太网，点击它； 会弹出一个窗口，我们点击“属性”。 再次弹出窗口，我们双击选择“Internet协议版本4”。 然后会弹出一个配置IP地址的窗口，我们勾选”使用下面的IP地址“。 按照如下信息填入： IP地址：192.168.1.100 子网掩码：255.255.255.0 默认网关：192.168.1.1 我们使用的旭日X3派的板子IP为192.168.1.10，所以IP后三位除了.10和网关.1以外，大家可以选用1-255之间的任意数字，这里使用.100； 填写完在所有窗口点击“确定”，最后关闭窗口。现在网络的配置就完成了，此时电脑端的静态IP就是192.168.1.100,我们通过这个IP与旭日X3派产生连接。 SSH远程登录 我们再次打开MobaXterm软件,点击左上角的\"Session\"，找到里面的\"SSH\",输入 旭日X3派板子的IP192.168.1.10，点击”OK“。 弹出登录窗口，我们用root账户登录：用户名为root，密码为root。这里会弹窗询问是否保存登录密码，如果需要保存就点“YES”，不需要保存就点“NO”。 现在我们就成功通过网络SSH协议登录到了旭日X3派板子上，和之前我们用串口登录的效果几乎是一样的，但现在我们是用网络通讯，所以现在通讯的效率和传输的速度会更高。 配置完成网络通讯后，我们来正式安装TogetherROS。 下载TogetherROS安装包 拷贝安装包 我们打开地平线社区的网站，在“产品中心”页面下拉到“机器人平台”，这里面都是TogetherROS相关的资源。 我们找到其中的\"TogetherROS DEB安装包\"，点击下载到电脑端。大概有300多兆的文件大小，很快就能下载完成。 这里我们先使用DEB安装包，来直接安装编译好的二进制文件。未来课程中我们会介绍如何通过源码编译的方式进行安装。 接下来我们进行TogetherROS镜像文件的复制安装。 安装TogetherROS 首先我们需要把电脑端的TogetherROS镜像文件，拷贝到旭日X3派板端。 大家可以在电脑上右键打开一个终端，并使用scp命令进行文件拷贝，命令格式为：scp + 空格 + .\\ + <要拷贝的文件名> + 用户名 + @ + 旭日X3派的IP地址 + :/ +旭日X3派上的文件目录名。 演示中使用的命令如下： $ scp . \\t ros_debV1_20220607894835.0.deb root@192.169.1.10:/userdata 这样就可以将TogetherROS镜像文件从电脑端拷贝到旭日X3派的userdata目录下。 除了这种拷贝方法，大家还可以使用MobaXterm软件，它提供了一种基于SCP命令的可视化的文件复制方式。 大家可以点击MobaXterm软件页面左侧的“SSH browser”，左边显示的目录就是旭日X3派板子上的文件目录结构。 我们找到板子上对应的userdata文件夹，双击打开它。 使用MobaXterm软件，可以把togetherROS镜像文件从电脑本机上直接拖到板子的文件目录底下。 现在TogetherROS安装包已经传输完成。我们在命令行中进入板子的userdata文件夹下，再确认安装包已经存放到了文件夹。命令行： $ cd /userdata/ $ ls 确认完毕后，我们用LINUX命令行dpkg进行安装，命令格式为:\"dpkg -i <要安装的包的名称>“，大家根据自己实际的版本号进行安装。此处使用命令为： $ dpkg -i tros_debV1_20220607094835.0.deb 等待安装完成，我们用命令“cd /opt\"进入opt文件夹，用ls命令检查一下该路径下的文件，可以看到opt文件夹下有一个tros文件夹，这个文件夹里就是我们刚刚安装好的TogetherROS的所有系统文件了。 如果觉得终端里看不方便，也可以使用MobaXterm软件的可视化浏览器来查看。 大家可以点击/opt/tros文件夹，看看其中的文件结构。 /include文件夹里，是我们后续会用到的关于系统的头文件的调用路径； /lib文件夹里面是库文件； /share文件夹里是安装好的功能包的路径； /src文件夹里是后续会用到的代码； /tools文件夹里是一些小工具。 除此之外，还有很多.bat,.sh脚本文件，它们是用来设置环境变量的。这是因为，你的LINUX系统不知道你安装包的路径在哪，所以需要通过环境变量的脚本来告诉系统，如何找到对应的TogetherROS的功能包、和功能包里的命令工具。 环境变量在我们后续操作里会频繁地使用到，我们会使用到一个”source\"命令来配置环境变量，例如： $ source /opt/tros/setup.bash 运行上面这行命令，就会把当前环境变量设置到系统里去；下次再运行ROS2、TogetherROS指令时，就能找到功能包的路径了。 到这里，TogetherROS也安装完成，下一节我们将对开发板和TogetherROS进行配置。","text_tokens":["很快","机器","例如","串口","路径","工具","速度",">","界面","压缩文件","输入","放进","下","文件大小","重启","用于","过程","disk","空格","有线","编译","机上","上面","方便","网线","storise","例程","口号","效率","确保","开发","找到","这样","4","看","“","子网掩码","或者","建议","多兆","网络连接","即可",",","”","等待","镜像","拿","拔出","192.168"," ","号","完毕","里会","rufus","所以","远程","插","源码","功能","当然","一张","从","名为","自带","使用","一个","各项","除此之外","小","lib",".","后续","电源线","里","需要","信息","以外","和","选用","版本","会","成功","状态","255.0","ros2","手上","以太","第一步","没有","波特率","左上角","觉得","解压","并","中为","并且","镜像文件","问题","一台","第一个","这里","完成","最后","便于","看到","也","卡里","以上","分钟","先","任何","版本号","电脑桌","制面","去","叹","时","拖","环境变量","一些","面板","img","协议","流程","整体","接下来","source","ros","为","桌面","设备","保存","关系","烧录","为了","文件","网口","浏览器","把","登录","起来","来看","十分","之外","烧写","是否","8gb","顺利","；","1.100","一步","debv1","对","sd","dpkg","include","理器","第一次","中有","ip192.168","代码","src","读卡","现在","打开","正在","网关","左侧","大多","波特","开始","如何","稍后","5v3a","未来","第三步","开发板","好后","填写","scp","flash","保证","+","两个","以太网","相关","了","usb","推荐","确认","用户","包里","serial","二步","提醒","_","如果","browser","传输","t","来","告诉","效果","192.169","任务","端口号","再","接口","博客","、","二进制","session","搜索","还有","关闭","16gb","连接","啦","启动","已经","设置","第三","跟随","显示器","配件","调用","笔记本电脑","将","桌面上","首先","10","是因为","检查","驱动","关于","中用","上","清除","下图","我们","更好","影响","20220607894835.0","压缩包","下拉到","要","弹窗","比如","拿出","底下","然后","本","通信","no","弹出","双击","行","sdcrd","户名","三位","地址","通过","它们","指令","下来","ip地址","默认","大家","库","此外","togetherros","旭日","页面","各种","上角","警告","笔记","勾选","刚刚","mkdir","都","脚本","安装","255.255","标记","窗口","派","件夹","网段","$","下次","一块","internet","用","端的","名","系统文件","在","很多","相应","命令","yes","如下","但","运行","1.1","三步","计算","浏览","数字","左边","\"","几个","中","创建","产品","平台","可以","名称","计算机管理","一切","控制","1.10","进入","检查一下","更","同一","还","是","这是","磁盘","点击","这","：","串","test","好","之后","ai","拉到","存放","root","地平线","操作","一下","内容","ip","环境变","与","端","账户","pwd","没关","这些","询问","终端","放在","进度","写","sdcard","用户名","opt","资料","环境","tools","合适","它","给","任意","deb","\\","这个","笔记本","头文件","下拉","tros","账号","cd","的话","方法","/","让","x3","ls","电脑桌面","就点","ubuntu","出厂","的","工作","读卡器","第二","之间","hdmi","2","进度条","问号","除了","软件","常用","网站","自动","专区","变量","后","直接","setup","确定","typec","基本","因为","社区","mobaxterm","网络通讯","跟","i","文件目录","你","按照","会弹","烧","选择","回车","多数","集成","模块","下面","机","一根","文件夹","大小","用到","算机","一次","结构","齐全","硬件","密码","正式","该","921600","哪","电源接口","产生","大约","左上","了解","掩码","。","另","课程","板子","频繁","再次","255","子网","格式","文件名","当前","看看","静态","sh","进一步","nand","知道","100","除此","派板","继续","地","属性","到","可视化","电源","出来","一样",":","演示","一节","@","不到","下拉至","查看","自己","管理","这种","bash","为止","用来","进行","体验","右键","拷贝到","情况","bat","包","-","压缩","高",";","请","我","最好","端口","达到","上边","<","准备","不","中心","可视","上电","目录","基于","配置","所示","之前","com6","第二步","userdata","计算机","展开","图标","1","显示","卡","拷贝","大概","里面","底层","就要","电脑","加载","介绍","几乎","方式","一种","进制","供电","读取","此处","日志","必要","拔出来","管理器","300","—","完在","linux","哪个","机器人","网络","准备就绪","没关系","资源","控制面板","就是","弹","等","能","一起","掉","大多数","20220607094835.0","就绪","系统","工具软件","面上","对应","实际","此时","前","说明","板卡","一套","其中","下载","根据","，","提供","选中","安装包","选项","第一","完后","接下","有","share","通讯","就","所有","技术","参数","ok","填入","地平","命令行","复制","ssh","出","system"],"title":"系统安装","title_tokens":["安装","系统"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros","text":"我们在旭日X3派上安装系统镜像，并进一步完成TogetherROS系统的安装，大家如果手上有开发板的话，建议跟随课程一起操作。 先来了解一下TogetherROS系统安装的整体流程： 第一步，要完成硬件的准备，我们需要找到一块旭日X3派的开发板，并且准备好电源线、SD卡、读卡器、串口模块等必要的配件，当然还需要有一台操作的电脑啦。 硬件都准备好之后，就可以进入第二步，给旭日X3派下载并安装Ubuntu系统镜像，这是TogetherROS系统运行必要的底层环境。 第三步，就可以开始安装TogetherROS啦。 安装完成后，我们还需要进一步完成一些配置工作，可以也让旭日X3派板卡上的各项功能都运行起来，保证TogetherROS的顺利运行。 最后一步，就是体验TogetherROS出厂自带的一些例程啦，确定一切安装顺利，为后续机器人开发最好准备。 接下来，我们就按照这个流程，开始操作。","text_tokens":["机器","串口","运行","了解","。","读卡","三步","课程","开始","例程","进一步","可以","一切","进入","第三步","开发板","开发","找到","还","保证","这是","：","电源","二步","好","之后","如果","建议","操作","一下","体验","镜像","来","最好"," ","、","准备","功能","当然","配置","环境","自带","各项","给","啦","第二步","第三","跟随","这个","后续","配件","电源线","的话","需要","卡","底层","让","电脑","x3","上","我们","必要","手上","ubuntu","出厂","的","第一步","工作","要","读卡器","第二","并","机器人","并且","一台","完成","最后","就是","等","也","后","一起","确定","下来","系统","先","大家","togetherros","旭日","一些","按照","板卡","流程","接下来","下载","为","都","，","安装","模块","第一","派","接下","起来","有","就","一块","顺利","硬件","一步","sd","整体","在"],"title":"TogetherROS系统安装","title_tokens":["togetherros","安装","系统"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_1","text":"先来完成硬件准备： 找到一块旭日X3派的板卡，准备好一套5V3A的电源和TypeC电源线，稍后会连接到这里的电源接口，给板卡供电。 然后准备好一张8GB以上的SD卡和读卡器，下一步我们会在上边烧写系统镜像。 接下来使用一个串口模块，连接旭日X3派和笔记本电脑，便于下一步看到系统镜像的启动信息。 如果大家有网线和HDMI显示器的话，也可以先准备好，在之后的操作中用的上，如果没有也没关系，不影响TogetherROS系统的基本使用。 硬件准备齐全之后，就可以进入第二步了。","text_tokens":["电源接口","串口","下","。","读卡","稍后","网线","5v3a","可以","进入","找到","了","到","：","电源","二步","好","之后","如果","操作","镜像","来","没关"," ","上边","接口","准备","不","一张","使用","一个","连接","给","第二步","启动","笔记本","显示器","电源线","的话","显示","卡","信息","笔记本电脑","和","电脑","会","x3","供电","中用","上","我们","影响","的","没有","读卡器","第二","hdmi","然后","没关系","这里","完成","便于","看到","也","typec","基本","下来","以上","系统","先","大家","togetherros","旭日","板卡","一套","接下来","笔记","，","关系","模块","派","接下","有","烧写","8gb","就","一块","齐全","硬件","一步","sd","在"],"title":"硬件准备","title_tokens":["硬件","准备"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#ubuntu","text":"我们来给旭日X3派安装Ubuntu系统，关于系统镜像和烧写工具，都可以在地平线AI社区中找到。","text_tokens":["地平线","工具","x3","关于","旭日","我们","镜像","。","ubuntu","来","烧","写","都","，","中","安装","派","可以","找到","给","地平","和","在","ai","社区","系统"],"title":"安装Ubuntu系统","title_tokens":["ubuntu","安装","系统"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#sd","text":"首先登录地平线AI社区，点击”产品中心——资源中心“， 进入页面后下拉至”X3派资料包“专区，点击下载其中的”旭日X3派系统镜像“，会有一个压缩包，把它保存到当前电脑桌面。 此外，我们稍后将镜像烧写到SD卡里，需要用到烧写小工具，如果大家电脑上没有合适的工具，可以下拉到”工具“专区，点击下载”烧录 工具rufus\"。 下载完后我们来看一下两个压缩文件中的内容： 其中一个是烧写X3派镜像文件的工具，压缩包中有两个文件，一个是system_sdcard.img文件，是我们稍后会用于烧写SD卡的镜像文件；另一个是disk_nand.img文件，用于烧写旭日X3派中的flash文件，大多数情况下都用不到； 另一个压缩包里是我们稍后用于烧写镜像的rufus工具。 我们把两个压缩包都解压出来，然后把SD卡放进读卡器、插到电脑端 接下来就可以开始烧写SD卡镜像。","text_tokens":["中有","工具","压缩文件","放进","下","。","另","读卡","用于","disk","大多","\"","开始","当前","中","稍后","产品","可以","nand","进入","flash","是","点击","两个","到","：","出来","不到","下拉至","“","ai","_","拉到","如果","地平线","一下","内容","情况","”","包","端","压缩","镜像"," ","rufus","写","sdcard","、","插","中心","资料","一个","合适","它","小",".","下拉","里","需要","卡","将","首先","电脑","会","x3","上","我们","电脑桌面","的","—","没有","压缩包","下拉到","读卡器","解压","然后","镜像文件","资源","专区","后","卡里","大多数","下来","社区","系统","电脑桌","大家","此外","旭日","页面","img","烧","其中","接下来","下载","桌面","都","多数","保存","，","烧录","文件","完后","派","登录","把","接下","来看","有","烧写","用到","就","；","用","地平","sd","system"],"title":"下载SD卡镜像","title_tokens":["下载","sd","卡","镜像"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#sd_1","text":"运行解压出来的烧写工具rufus。启动后需要确认几个参数： 第一个是确定烧写到哪个磁盘上。工具软件会默认搜索当前读取到的SD卡，下图所示磁盘名称，就是演示时插好的16GB的SD卡。 下一步我们点击“选择”，找到需要烧写的镜像文件。演示中已经把需要的system_sdcrd.img文件放在了桌面上，选中它点击“打开”； 下面的内容就可以用默认的配置，点击“开始”会弹出警告告诉我们将把磁盘里的所有文件都清除掉，这没有问题，我们点击“选择“，就开始烧写SD卡镜像了。 进度条显示“准备就绪”后，点击“关闭”，此时你的SD卡镜像就已经烧写完成了，我们把SD卡的读卡器拔出来。","text_tokens":["工具","运行","下","。","读卡","打开","几个","开始","当前","中","名称","可以","找到","磁盘","是","点击","了","到","这","确认","：","出来","演示","好","“","_","内容","”","镜像","拔出","告诉"," ","放在","rufus","写","进度","准备","插","搜索","关闭","16gb","配置","一个","所示","它","启动","已经",".","里","需要","显示","卡","将","桌面上","会","读取","上","清除","下图","我们","拔出来","的","没有","读卡器","解压","进度条","哪个","软件","准备就绪","镜像文件","问题","第一个","完成","sdcrd","就是","后","确定","掉","就绪","工具软件","面上","默认","时","你","此时","img","会弹","烧","选择","警告","桌面","都","，","选中","第一","文件","下面","把","烧写","就","所有","；","用","参数","一步","sd","出","system"],"title":"烧写SD卡镜像","title_tokens":["sd","烧写","卡","镜像"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_2","text":"接下来把SD卡插到旭日X3派上。 把串口模块连接到电脑的USB上。 连接好串口模块后，为了确保串口已经跟电脑连接成功、并且安装好了驱动，我们可以右键“我的电脑”图标、选择“管理”，在打开的”计算机管理“界面中找到”设备管理器——端口“，检查一下你的USB串口是否已经显示出了对应的设备。演示中的端口号为COM6,说明串口已经成功驱动了。 如果没有看到自己的设备号、或者设备号前有一个叹号或者问号标记，说明你的驱动没有安装好，可以搜索网络上的技术博客，来完成串口模块的驱动安装。 关闭“计算机管理”窗口，接下来就要通过串口与旭日X3派进行连接了。这里我们需要用到一个串口小工具，大家可以使用自己常用的工具。 演示中使用的串口工具是MobaXterm,十分推荐大家使用这个工具，里面集成了开发过程中需要使用的各种小工具，我们后续的串口通讯、SSH网络通讯，都会使用这些工具完成。 打开MobaXterm,点击左上角的\"Session\"； 找到里面的“Serial\"串口选项，点击打开；串口号选择本机连接到旭日X3派的相应端口，演示中为COM6; 波特率选择921600。选项好后点击“OK”。 现在串口已经连接成功了，但当前旭日X3派的板子还没有上电，所以没有任何信息弹出。 我们把电源线与旭日X3派连接好。 可以看到弹出了日志提醒：“当前系统正在启动”。等待系统加载完成。 现在可以看到系统已经加载成功了。","text_tokens":["理器","串口","工具","但","界面","左上","。","现在","打开","计算","板子","正在","过程","\"","波特","当前","中","可以","计算机管理","口号","检查一下","好后","确保","找到","开发","还","是","点击","了","usb","推荐","到","：","电源","演示","串","serial","好","“","提醒","或者","自己","管理","如果","进行","一下","右键",",","”","等待","与",";","我","来","这些"," ","号","端口","所以","端口号","博客","、","插","session","上电","搜索","关闭","一个","使用","连接","com6","启动","已经","小","这个","计算机","后续","电源线","图标","需要","显示","卡","信息","检查","里面","就要","电脑","加载","成功","驱动","会","x3","上","日志","我们","管理器","的","波特率","—","没有","左上角","问号","网络","中为","并且","本","常用","弹出","这里","完成","弹","看到","后","通过","下来","网络通讯","mobaxterm","系统","任何","跟","对应","大家","叹","你","旭日","前","说明","各种","上角","选择","接下来","为","都","集成","设备","，","安装","模块","为了","选项","标记","窗口","把","派","接下","十分","机","有","是否","用到","通讯","算机","；","技术","ok","ssh","921600","sd","出","在","相应"],"title":"连接串口","title_tokens":["串口","连接"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_3","text":"接下来我们需要登录系统。我们有两个账号可以用来登录： 账号1：用户名为root，密码也为root； 账号2：用户名为storise，密码也为storise； 这里演示使用root用户来登录。输入用户名、密码，回车，需要等待大约1分钟，因为第一次登录需要展开一些系统必要的安装软件，安装好后系统会自动重启。 系统自动重启后，再次使用root用户登录。现在你的UBUNTU系统就已经安装好了。 我们可以使用LINUX系统常用的一些命令行进行查看和设置，比如ls查看当前命令，pwd查看当前路径，还可以使用mkdir命令创建文件夹，比如这里,一个test文件夹就创建成功了。 到这里为止，旭日X3派上的Ubuntu系统就安装成功啦，我们继续下一步。","text_tokens":["命令","第一次","路径","大约","输入","下","。","重启","现在","再次","当前","创建","storise","可以","好后","继续","还","两个","了","到","用户","：","演示","test","好","查看","root","为止","用来","进行",",","等待","pwd","来"," ","、","用户名","名为","使用","一个","啦","已经","设置","展开","账号","需要","1","和","会","成功","x3","ls","上","我们","必要","ubuntu","的","比如","2","linux","软件","常用","这里","自动","户名","也","后","因为","下来","分钟","系统","你","旭日","一些","接下来","回车","为","mkdir","，","安装","第一","文件","件夹","登录","接下","派","有","文件夹","一次","就","；","密码","一步","命令行"],"title":"串口登录系统","title_tokens":["串口","登录","系统"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros_1","text":"安装TogetherROS系统。 为了达到更好的通信效率，我们后续使用有线网络连接旭日X3派，这里大家可以拿出一根网线，直接连接电脑和旭日X3派的网口。 旭日X3派中出厂已经配置好了静态IP地址，是192.168.1.10，我们将使用的电脑也配置到同一网段即可。","text_tokens":["ip地址","电脑","大家","网络连接","togetherros","即可","x3","旭日","我们","更好","。","192.168","出厂","的"," ","达到","有线","拿出","，","中","静态","安装","为了","网口","网线","派","一根","可以","网络","1.10","网段","效率","通信","配置","同一","使用","连接","这里","是","已经","也","了","直接","地址",".","到","后续","好","将","和","系统"],"title":"安装TogetherROS系统","title_tokens":["togetherros","安装","系统"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_4","text":"接下来请大家拿一根网线，连接旭日X3派和电脑。 然后，在电脑端打开控制面板，找到“查看网络状态和任务”。 找到已经连接成功的以太网，点击它； 会弹出一个窗口，我们点击“属性”。 再次弹出窗口，我们双击选择“Internet协议版本4”。 然后会弹出一个配置IP地址的窗口，我们勾选”使用下面的IP地址“。 按照如下信息填入： IP地址：192.168.1.100 子网掩码：255.255.255.0 默认网关：192.168.1.1 我们使用的旭日X3派的板子IP为192.168.1.10，所以IP后三位除了.10和网关.1以外，大家可以选用1-255之间的任意数字，这里使用.100； 填写完在所有窗口点击“确定”，最后关闭窗口。现在网络的配置就完成了，此时电脑端的静态IP就是192.168.1.100,我们通过这个IP与旭日X3派产生连接。","text_tokens":["如下","产生","掩码","1.1","。","现在","打开","板子","网关","再次","255","子网","数字","静态","网线","可以","100","控制","1.10","填写","找到","点击","以太网","了","属性","：","4","“","子网掩码","查看",",","”","ip","-","与","端","拿","192.168","请"," ","任务","所以","关闭","配置","一个","使用","连接","它","任意","已经","这个",".","1","信息","以外","和","选用","版本","10","电脑","成功","状态","x3","255.0","我们","以太","的","完在","之间","然后","网络","除了","控制面板","这里","完成","双击","最后","三位","弹","就是","后","地址","通过","确定","下来","ip地址","默认","大家","制面","旭日","此时","面板","按照","协议","会弹","选择","接下来","勾选","为","，","255.255","窗口","下面","派","接下","一根","就","internet","所有","；","1.100","端的","填入","出","在"],"title":"配置有线网络","title_tokens":["网络","配置","有线"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#ssh","text":"我们再次打开MobaXterm软件,点击左上角的\"Session\"，找到里面的\"SSH\",输入 旭日X3派板子的IP192.168.1.10，点击”OK“。 弹出登录窗口，我们用root账户登录：用户名为root，密码为root。这里会弹窗询问是否保存登录密码，如果需要保存就点“YES”，不需要保存就点“NO”。 现在我们就成功通过网络SSH协议登录到了旭日X3派板子上，和之前我们用串口登录的效果几乎是一样的，但现在我们是用网络通讯，所以现在通讯的效率和传输的速度会更高。 配置完成网络通讯后，我们来正式安装TogetherROS。","text_tokens":["yes","串口","但","ip192.168","速度","左上","输入","。","现在","打开","板子","再次","\"","更","1.10","效率","找到","是","点击","了","到","用户","：","一样","“","如果","root",",","”","账户","高","传输","来"," ","询问","效果","所以","不","session","配置","名为","之前",".","需要","和","里面","会","成功","几乎","x3","上","我们","就点","的","左上角","弹窗","网络","软件","no","这里","完成","弹","后","通过","网络通讯","mobaxterm","togetherros","旭日","协议","上角","为","保存","，","安装","窗口","派","登录","是否","通讯","就","用","ok","密码","正式","ssh","出"],"title":"SSH远程登录","title_tokens":["ssh","登录","远程"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros_2","text":"","text_tokens":[],"title":"下载TogetherROS安装包","title_tokens":["下载","togetherros","安装","安装包"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_5","text":"我们打开地平线社区的网站，在“产品中心”页面下拉到“机器人平台”，这里面都是TogetherROS相关的资源。 我们找到其中的\"TogetherROS DEB安装包\"，点击下载到电脑端。大概有300多兆的文件大小，很快就能下载完成。 这里我们先使用DEB安装包，来直接安装编译好的二进制文件。未来课程中我们会介绍如何通过源码编译的方式进行安装。 接下来我们进行TogetherROS镜像文件的复制安装。","text_tokens":["拉到","很快","大概","先","机器","里面","地平线","电脑","介绍","会","多兆","方式","togetherros","进行","进制","”","我们","端","镜像","页面","文件大小","。","打开","课程","的","300"," ","来","其中","接下来","下载","下拉到","\"","编译","都","如何","，","中","安装","安装包","二进制","文件","产品","中心","平台","源码","接下","有","机器人","未来","大小","镜像文件","就","资源","使用","网站","找到","完成","这里","是","deb","点击","相关","能","地平","直接","到","下拉","这","通过","复制","下来","好","“","在","社区"],"title":"拷贝安装包","title_tokens":["安装包","拷贝","安装"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros_3","text":"首先我们需要把电脑端的TogetherROS镜像文件，拷贝到旭日X3派板端。 大家可以在电脑上右键打开一个终端，并使用scp命令进行文件拷贝，命令格式为：scp + 空格 + .\\ + <要拷贝的文件名> + 用户名 + @ + 旭日X3派的IP地址 + :/ +旭日X3派上的文件目录名。 演示中使用的命令如下： $ scp . \\t ros_debV1_20220607894835.0.deb root@192.169.1.10:/userdata 这样就可以将TogetherROS镜像文件从电脑端拷贝到旭日X3派的userdata目录下。 除了这种拷贝方法，大家还可以使用MobaXterm软件，它提供了一种基于SCP命令的可视化的文件复制方式。 大家可以点击MobaXterm软件页面左侧的“SSH browser”，左边显示的目录就是旭日X3派板子上的文件目录结构。 我们找到板子上对应的userdata文件夹，双击打开它。 使用MobaXterm软件，可以把togetherROS镜像文件从电脑本机上直接拖到板子的文件目录底下。 现在TogetherROS安装包已经传输完成。我们在命令行中进入板子的userdata文件夹下，再确认安装包已经存放到了文件夹。命令行： $ cd /userdata/ $ ls 确认完毕后，我们用LINUX命令行dpkg进行安装，命令格式为:\"dpkg -i <要安装的包的名称>“，大家根据自己实际的版本号进行安装。此处使用命令为： $ dpkg -i tros_debV1_20220607094835.0.deb 等待安装完成，我们用命令“cd /opt\"进入opt文件夹，用ls命令检查一下该路径下的文件，可以看到opt文件夹下有一个tros文件夹，这个文件夹里就是我们刚刚安装好的TogetherROS的所有系统文件了。 如果觉得终端里看不方便，也可以使用MobaXterm软件的可视化浏览器来查看。 大家可以点击/opt/tros文件夹，看看其中的文件结构。 /include文件夹里，是我们后续会用到的关于系统的头文件的调用路径； /lib文件夹里面是库文件； /share文件夹里是安装好的功能包的路径； /src文件夹里是后续会用到的代码； /tools文件夹里是一些小工具。 除此之外，还有很多.bat,.sh脚本文件，它们是用来设置环境变量的。这是因为，你的LINUX系统不知道你安装包的路径在哪，所以需要通过环境变量的脚本来告诉系统，如何找到对应的TogetherROS的功能包、和功能包里的命令工具。 环境变量在我们后续操作里会频繁地使用到，我们会使用到一个”source\"命令来配置环境变量，例如： $ source /opt/tros/setup.bash 运行上面这行命令，就会把当前环境变量设置到系统里去；下次再运行ROS2、TogetherROS指令时，就能找到功能包的路径了。 到这里，TogetherROS也安装完成，下一节我们将对开发板和TogetherROS进行配置。","text_tokens":["命令","include","例如","路径","如下","工具",">","运行","代码","下","src","。","现在","打开","板子","左侧","频繁","浏览","左边","\"","格式","空格","如何","文件名","当前","机上","中","看看","上面","方便","sh","可以","名称","知道","除此","1.10","进入","检查一下","派板","开发板","scp","找到","开发","还","是","+","点击","地","了","这样","可视化","到","这","用户","：","确认",":","包里","看","演示","一节","@","好","“","查看","这种","自己","_","如果","存放","bash","root","用来","操作","进行","一下","右键",",","拷贝到","browser","”","等待","-","包","bat","端","环境变","镜像","传输","哪","t","来","告诉"," ","完毕","终端","里会","192.169","再","所以","、","<","用户名","不","opt","功能","可视","从","目录","还有","基于","配置","环境","tools","一个","使用","它","除此之外","userdata","deb","\\","已经","小","设置","lib","这个",".","头文件","tros","后续","cd","里","需要","方法","显示","调用","将","和","/","拷贝","首先","版本","是因为","检查","里面","电脑","会","一种","方式","x3","此处","关于","ls","上","ros2","我们","的","20220607894835.0","要","觉得","并","linux","底下","除了","软件","本","镜像文件","这里","完成","双击","变量","行","户名","就是","看到","也","能","后","直接","地址","setup","通过","它们","指令","20220607094835.0","因为","mobaxterm","系统","ip地址","i","版本号","对应","文件目录","库","大家","实际","去","togetherros","时","拖","你","旭日","环境变量","一些","页面","其中","刚刚","source","ros","为","脚本","根据","，","提供","安装","安装包","文件","浏览器","把","派","件夹","有","文件夹","之外","share","$","用到","下次","就","所有","；","结构","用","端的","名","该","debv1","系统文件","命令行","复制","ssh","对","dpkg","在","很多"],"title":"安装TogetherROS","title_tokens":["togetherros","安装"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/","text":"TogetherROS系统配置 无论是旭日X3派，还是TogetherROS，在正式使用之前，都还需要进行一些必要的配置，完善必要的功能模块，提供完整的算力支持，达到最佳状态。 网络连接 第一个配置，是无线网络连接。 当然，大家也可以直接用网线连接旭日X3派和一个可以上网的路由器，不过更多时候，我们还是会使用无线网络来上网。 我们打开MobaXterm,选择SSH，使用root用户登录板卡；如果之前登录过板卡、还没有关闭的话，也可以继续使用。 现在我们可以通过命令行搜索周边环境有哪些WIFI信号，命令如下： $ sudo nmcli device wifi rescan #扫描当前环境里所有WIFI名称，但扫描结果不会显示 $ nmcli device wifi list #显示扫描到的WIFI名称 $ sudo nmcli device wifi connect <账号> password <密码> #连接WIFI $ sudo vim /etc/network/interfaces #修改DHCP配置 比如，我的办公室里wifi的名称是psmicro,我们就可以使用“sudo nmcli device wifi connect psmicro password <密码>”来连接。 等到终端返回信息“successfully activated\",就说明WIFI连接成功； 我们可以Ping古月居的网址，来检查一下连接。如果能够Ping通，就说明网络已经连接成功，现在就可以成功连接到互联网，进行后续的软件下载和更新了。 网络配置完成后，在后续开发中，大家就可以直接下载或更新各种软件包了。 系统更新 第二个配置，是更新当前旭日X3派所使用的Ubuntu镜像，和在电脑上使用的命令相同。 我们更新一下当前的系统镜像： $ sudo apt update #会按照当前软件源的域名设置去连接远程软件源 $ sudo apt full-upgrade #升级所有可以升级的软件包 弹出如下对话，我们选择“Y”，回车； 这样我们就完成了对系统更新的检查，并安装好了更新包。 CPU调频策略 第三个配置，设置CPU的调频策略，这是一个可选项，大家了解之后，在未来需要使用的时候进行配置即可。 动态调频 $ echo > ondemand /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让系统根据当前负载，动态调整CPU频率 满频模式 $ echo > performance /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让CPU始终以满频，也就1.2GHz的频率工作 打开超频 $ echo 1 > /sys/devices/system/cpu/cpufreq/boost #使CPU以超频，也就是1.5GHz的频率工作 关闭超频 $ echo 0 > /sys/devices/system/cpu/cpufreq/boost 这里CPU频率为，满频模式：1.2GHz，超频模式：1.5GHz。 大家需要注意，默认的系统配置是关闭超频、并且动态调频的配置。这样可以比较好地保证功率最优。 安装ROS2功能包 接下来，还有一个很重要的配置，那就是安装ROS2功能包，我们说TogetherROS是基于ROS2深度优化的，很多模块还是会复用ROS2中的功能，所有ROS2的原生功能也可以支持，这里我们就把ROS2必要的功能包都安装一下，让系统的功能模块更加完整。 熟悉ROS2的同学，应该对这些指令并不陌生，和ROS2官方手册中的安装步骤一致，不过还是建议大家跟着课程的步骤一起来安装一下。 添加ROS2源 第一步我们需要更新系统软件源，并安装必要的下载工具。 $ sudo apt update && sudo apt install curl gnupg lsb-release #更新软件源 $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg #设置ROS2软件源秘钥 $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null #设置ROS2软件源 Attention 大部分国内开发者在这都会遇到同一个问题：网址无法连接。解决方案可以参考古月居官网上的这篇帖子： 《解决”Failed to connect to raw.githubusercontent.com“报错》 安装ROS2包 $ sudo apt update #更新软件源 $ sudo apt install ros-foxy-ros-base ros-foxy-demo-nodes-cpp # 安装ROS2功能包 时间会有些长，需要稍微等待一下。 现在ROS2就安装完成了。 大家可以使用同样的命令，继续安装ROS2中的更多功能包。 这里推荐大家先安装ROS2之后会使用到的编译器，比如python3-colcon-common-extensions。我们后续一些TogetherROS功能包的编译，也会使用python3-colcon-common的命令来安装。 $ sudo apt install python3-colcon-common-extensions # ROS2编译器 另外，我们推荐大家安装一个git工具，大家可以通过它下载GitHub、GitLab上的软件包，我们后续也会用到。安装命令为本小节代码第四行。 $ sudo apt install git # 安装git工具 到这里，我们常用的软件和功能包就安装完成了。我们可以看到，在旭日X3派文件目录/opt底下，除了之前的/tros文件夹外，还多出来一个/ros文件夹，里面就是我们刚才安装好的ros-foxy版本的所有系统文件。 如果大家要使用ROS2的功能包，也需要source里面的.bash或者.bat脚本文件。 建立软链接 为了方便我们在TogetherROS系统李调用ROS2的功能，在TogetherROS里提供了一个叫create_soft_link创建软链接的脚本，它而已通过软链接，把ROS2的环境变量链接到当前TogetherROS的环境包里来。执行以下命令： $ cd /opt/tros ## 使用/opt/tros目录下的create_soft_link.py创建ROS package至TogetherROS的软链接 $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros 这样设置以后，假如你source了TogetherROS的环境变量，那么同样的配置也会对ROS2生效。 好啦，到这里为止，所有必要的配置项我们都做完了，是不是有点迫不及待想要使用TogetherROS了呢？","text_tokens":["sys","工具","建立",">","返回","《","下","互联","下载工具","无线","报错","performance","ghz","编译","connect","方便","三个","网线","最优","达到最佳","公室","开发","这样","同样","“","attention","或者","可选项","##","步骤","ping","国内","建议","网络连接","即可",",","”","大部分","等待","gitlab","策略","镜像","archive"," ","keyring","codename","统配","长","远程","full","以满频","功能","当然","编译器","network","使用","一个","第四","无论",".","后续","解决方案","有些","里","scaling","需要","信息","互联网","和","版本","相同","会","成功","cpufreq","状态","ros2","而已","第一步","没有","git","网上","是不是","并","软","并且","问题","很","第一个","这里","完成","叫","想要","nodes","看到","也","=","源","网址","to","dev","y","先","去","时间","环境变量","一些","做","通","系统配置","tee","还是","接下来","source","ros","周边环境","为","gpg","为了","文件","把","登录","不及","起来","keyrings","ondemand","；","interfaces","一步","不过","python3","优化","对","以","dpkg","模式","1.2","nmcli","o","|","最佳","假如","arch","对话","代码","现在","]","打开","一致","链接","1.5","？","未来","successfully","保证","迫不及待","了","推荐","用户","包里","by","_","如果","系统配","完","cpu","governor","第二个","master","方案","来","usr","、","跟着","搜索","还有","关闭","连接","啦","域名","已经","设置","第三","那么","调用","update","检查","》","多功能","时候","呢","上","解决","我们","满频","系统软件","要","比如","支持","熟悉","wifi","古月","底下","哪些","始终","居官","cpp","sources","通过","注意","指令","以后","结果","os","下来","extensions","执行","默认","大家","togetherros","旭日","修改","githubusercontent","官方","外","各种","都","脚本","rescan","安装","功能模块","派","件夹","深度","比较","$","用","系统文件","四行","rosdistro","在","很多","key","命令","print","如下","但","第四行","apt","\"","中","稍微","创建","包都","可以","名称","colcon","更","检查一下","activated","同一","办公","更新","还","是","这是","com","install","(","这","：","--","或","好","之后","为本","root","一下","不会","gnupg","raw","环境变","完整","link","#","添加","这些","终端","boost","opt","超频","等到","陌生","list","环境","它","deb","tros","更加","0","账号","的话","cd","第三个","开发者","create","/","手册","让","failed","x3","重要","说","ubuntu","办公室","的","调频","工作","py","第二","package","那","http","小节","除了","org","软件","常用","&&","变量","github","后","直接","password","sudo","可选","dhcp","多","mobaxterm","项","文件目录","你","算力","按照","至","选择","居","过","回车","生效","同一个","无线网络","秘钥","模块","文件夹","二个","动态","用到","signed","密码","foxy","正式","vim","周边","无法","部分","了解","原生","。","base","课程","同学","当前","路由","policy0","以下","psmicro","继续","更新包","地","不是","https","到",":","出来","负载","null","无论是","功率","bash","为止","devices","进行","bat","-","包","帖子","我","上网","达到","<","不","参考",")","architecture","目录","联网","基于","配置","大部","之前","一","完善","etc","1","显示","lsb","调整","信号","里面","电脑","d","packages","刚才","必要","soft","对系统","网络","release","echo","路由器","线网","[","弹","就是","这篇","所","系统","升级","扫描","频率","另外","李","说明","板卡","ssl","device","curl","下载","应该","upgrade","根据","，","提供","demo","无线网","选项","第一","接下","有","share","就","有点","所有","main","使","common","能够","遇到","命令行","复用","ssh","软件包","出","system"],"title":"系统配置","title_tokens":["系统配","系统配置","配置","统配","系统"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#togetherros","text":"无论是旭日X3派，还是TogetherROS，在正式使用之前，都还需要进行一些必要的配置，完善必要的功能模块，提供完整的算力支持，达到最佳状态。","text_tokens":["无论是","最佳","进行","togetherros","状态","x3","旭日","算力","一些","完整","必要","。","的","还是","达到","都","支持","，","提供","模块","功能模块","派","功能","达到最佳","配置","使用","之前","还","完善","无论","正式","需要","在"],"title":"TogetherROS系统配置","title_tokens":["系统配","系统配置","togetherros","统配","配置","系统"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_1","text":"第一个配置，是无线网络连接。 当然，大家也可以直接用网线连接旭日X3派和一个可以上网的路由器，不过更多时候，我们还是会使用无线网络来上网。 我们打开MobaXterm,选择SSH，使用root用户登录板卡；如果之前登录过板卡、还没有关闭的话，也可以继续使用。 现在我们可以通过命令行搜索周边环境有哪些WIFI信号，命令如下： $ sudo nmcli device wifi rescan #扫描当前环境里所有WIFI名称，但扫描结果不会显示 $ nmcli device wifi list #显示扫描到的WIFI名称 $ sudo nmcli device wifi connect <账号> password <密码> #连接WIFI $ sudo vim /etc/network/interfaces #修改DHCP配置 比如，我的办公室里wifi的名称是psmicro,我们就可以使用“sudo nmcli device wifi connect psmicro password <密码>”来连接。 等到终端返回信息“successfully activated\",就说明WIFI连接成功； 我们可以Ping古月居的网址，来检查一下连接。如果能够Ping通，就说明网络已经连接成功，现在就可以成功连接到互联网，进行后续的软件下载和更新了。 网络配置完成后，在后续开发中，大家就可以直接下载或更新各种软件包了。","text_tokens":["命令","nmcli","如下","但",">","返回","。","互联","现在","打开","无线","\"","当前","路由","connect","中","网线","psmicro","可以","名称","更","检查一下","activated","successfully","公室","办公","继续","开发","更新","还","是","了","到","用户","：","或","“","如果","root","ping","进行","一下","不会",",","”","#","我","来"," ","终端","上网","、","<","当然","搜索","等到","联网","关闭","配置","环境","list","network","一个","使用","之前","连接","etc","已经","后续","里","账号","的话","显示","信息","互联网","和","/","信号","检查","会","成功","时候","x3","我们","办公室","的","没有","比如","wifi","古月","网络","哪些","软件","第一个","完成","路由器","线网","也","后","直接","网址","password","通过","sudo","结果","dhcp","多","mobaxterm","大家","扫描","旭日","修改","说明","通","板卡","各种","device","选择","还是","居","下载","过","周边环境","无线网络","，","rescan","无线网","第一","派","登录","有","$","就","所有","；","interfaces","用","密码","不过","能够","vim","命令行","周边","ssh","软件包","在"],"title":"网络连接","title_tokens":["网络连接","网络","连接"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_2","text":"第二个配置，是更新当前旭日X3派所使用的Ubuntu镜像，和在电脑上使用的命令相同。 我们更新一下当前的系统镜像： $ sudo apt update #会按照当前软件源的域名设置去连接远程软件源 $ sudo apt full-upgrade #升级所有可以升级的软件包 弹出如下对话，我们选择“Y”，回车； 这样我们就完成了对系统更新的检查，并安装好了更新包。","text_tokens":["命令","检查","相同","电脑","如下","会","去","一下","x3","升级","对话","apt","第二个","上","旭日","-","我们","”","镜像","。","#","ubuntu","按照","软件包","的"," ","选择","回车","第二","upgrade","对系统","当前","，","并","安装","远程","full","派","可以","二个","软件","$","配置","就","使用","所有","连接","；","更新","完成","是","更新包","弹","域名","了","源","设置","“","这样","：","sudo","所","好","和","出","在","update","y","系统"],"title":"系统更新","title_tokens":["更新","系统"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#cpu","text":"第三个配置，设置CPU的调频策略，这是一个可选项，大家了解之后，在未来需要使用的时候进行配置即可。 动态调频 $ echo > ondemand /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让系统根据当前负载，动态调整CPU频率 满频模式 $ echo > performance /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让CPU始终以满频，也就1.2GHz的频率工作 打开超频 $ echo 1 > /sys/devices/system/cpu/cpufreq/boost #使CPU以超频，也就是1.5GHz的频率工作 关闭超频 $ echo 0 > /sys/devices/system/cpu/cpufreq/boost 这里CPU频率为，满频模式：1.2GHz，超频模式：1.5GHz。 大家需要注意，默认的系统配置是关闭超频、并且动态调频的配置。这样可以比较好地保证功率最优。","text_tokens":["模式","sys","1.2",">","了解","。","打开","performance","ghz","当前","policy0","三个","最优","1.5","可以","未来","是","这是","保证","地","这样","：","负载","好","之后","_","可选项","功率","系统配","cpu","devices","governor","进行","即可","策略","#"," ","统配","、","boost","以满频","超频","关闭","配置","一个","使用","设置","第三","scaling","0","需要","1","第三个","/","调整","让","cpufreq","时候","满频","的","调频","工作","在","并且","echo","始终","这里","就是","也","注意","可选","系统","默认","大家","频率","系统配置","为","根据","，","选项","比较","ondemand","动态","$","就","使","以","system"],"title":"CPU调频策略","title_tokens":["策略","cpu","调频"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2","text":"接下来，还有一个很重要的配置，那就是安装ROS2功能包，我们说TogetherROS是基于ROS2深度优化的，很多模块还是会复用ROS2中的功能，所有ROS2的原生功能也可以支持，这里我们就把ROS2必要的功能包都安装一下，让系统的功能模块更加完整。 熟悉ROS2的同学，应该对这些指令并不陌生，和ROS2官方手册中的安装步骤一致，不过还是建议大家跟着课程的步骤一起来安装一下。","text_tokens":["步骤","手册","让","会","建议","大家","togetherros","一下","重要","包","说","ros2","我们","原生","完整","官方","必要","。","课程","同学","的","这些"," ","接下来","还是","应该","支持","那","一致","，","中","熟悉","安装","模块","并","不","跟着","包都","把","功能模块","接下","功能","深度","可以","起来","还有","基于","陌生","配置","就","很","一个","所有","这里","是","一","就是","也","不过","指令","更加","复用","下来","优化","对","和","很多","系统"],"title":"安装ROS2功能包","title_tokens":["包","ros2","安装","功能"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2_1","text":"第一步我们需要更新系统软件源，并安装必要的下载工具。 $ sudo apt update && sudo apt install curl gnupg lsb-release #更新软件源 $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg #设置ROS2软件源秘钥 $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null #设置ROS2软件源 Attention 大部分国内开发者在这都会遇到同一个问题：网址无法连接。解决方案可以参考古月居官网上的这篇帖子： 《解决”Failed to connect to raw.githubusercontent.com“报错》","text_tokens":["print","o","|","工具","arch",">","apt","无法","《","部分","。","]","下载工具","报错","\"","connect","可以","同一","开发","更新","com","install","https","(","这","：","--",":","“","attention","by","_","null","国内","gnupg","”","大部分","-","raw","master","帖子","#","archive","方案","usr"," ","keyring","codename","参考",")","architecture","list","大部","一个","连接","deb","etc","设置",".","解决方案","需要","开发者","lsb","/","update","》","会","failed","d","解决","ros2","我们","packages","必要","ubuntu","系统软件","的","第一步","网上","http","并","古月","org","软件","release","echo","问题","居官","&&","[","这篇","=","源","sources","网址","sudo","os","to","dev","系统","githubusercontent","ssl","curl","tee","source","下载","ros","同一个","gpg","秘钥","都","，","安装","第一","keyrings","share","$","signed","main","一步","遇到","rosdistro","dpkg","在","key"],"title":"添加ROS2源","title_tokens":["ros2","源","添加"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2_2","text":"$ sudo apt update #更新软件源 $ sudo apt install ros-foxy-ros-base ros-foxy-demo-nodes-cpp # 安装ROS2功能包 时间会有些长，需要稍微等待一下。 现在ROS2就安装完成了。 大家可以使用同样的命令，继续安装ROS2中的更多功能包。 这里推荐大家先安装ROS2之后会使用到的编译器，比如python3-colcon-common-extensions。我们后续一些TogetherROS功能包的编译，也会使用python3-colcon-common的命令来安装。 $ sudo apt install python3-colcon-common-extensions # ROS2编译器 另外，我们推荐大家安装一个git工具，大家可以通过它下载GitHub、GitLab上的软件包，我们后续也会用到。安装命令为本小节代码第四行。 $ sudo apt install git # 安装git工具 到这里，我们常用的软件和功能包就安装完成了。我们可以看到，在旭日X3派文件目录/opt底下，除了之前的/tros文件夹外，还多出来一个/ros文件夹，里面就是我们刚才安装好的ros-foxy版本的所有系统文件。 如果大家要使用ROS2的功能包，也需要source里面的.bash或者.bat脚本文件。","text_tokens":["命令","工具","第四行","apt","代码","base","。","现在","编译","中","稍微","可以","colcon","更","继续","更新","还","install","了","推荐","到","出来","同样","好","之后","或者","为本","如果","bash","一下","bat","等待","-","包","gitlab","#","来"," ","长","、","opt","功能","编译器","目录","使用","一个","之前","它","第四",".","tros","后续","有些","需要","和","/","update","版本","里面","多功能","会","x3","上","ros2","我们","刚才","的","要","比如","git","小节","底下","除了","软件","常用","cpp","这里","完成","就是","nodes","github","也","看到","源","通过","sudo","extensions","多","系统","先","文件目录","大家","时间","togetherros","另外","旭日","一些","外","source","下载","ros","脚本","demo","，","安装","文件","派","件夹","文件夹","$","用到","就","所有","foxy","common","python3","系统文件","四行","软件包","在"],"title":"安装ROS2包","title_tokens":["包","ros2","安装"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_3","text":"为了方便我们在TogetherROS系统李调用ROS2的功能，在TogetherROS里提供了一个叫create_soft_link创建软链接的脚本，它而已通过软链接，把ROS2的环境变量链接到当前TogetherROS的环境包里来。执行以下命令： $ cd /opt/tros ## 使用/opt/tros目录下的create_soft_link.py创建ROS package至TogetherROS的软链接 $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros 这样设置以后，假如你source了TogetherROS的环境变量，那么同样的配置也会对ROS2生效。 好啦，到这里为止，所有必要的配置项我们都做完了，是不是有点迫不及待想要使用TogetherROS了呢？","text_tokens":["命令","假如","下","。","当前","方便","创建","以下","链接","？","迫不及待","了","不是","这样","到","：","包里","--","同样","好","_","##","完","为止","环境变","link","来"," ","opt","功能","目录","配置","环境","一个","使用","它","啦","设置","那么",".","tros","里","cd","调用","create","/","会","呢","ros2","我们","必要","而已","的","py","soft","package","是不是","软","这里","叫","想要","变量","也","通过","以后","系统","项","执行","togetherros","你","环境变量","李","做","至","source","ros","生效","脚本","都","，","提供","为了","把","不及","$","有点","所有","foxy","python3","对","在"],"title":"建立软链接","title_tokens":["建立","链接","软"]},{"location":"TogetherROS/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/","text":"TogetherROS示例运行 接下来，我们就在安装配置好TogetherROS的旭日X3派上，试一试系统自带的一些例程，确保整个系统已经可以正常运行。 通信测试 先来测试一下TogetherROS系统的通信功能。 我们需要启动两个终端，分别连接到旭日X3派上，并分别按以下命令配置环境变量。 终端1： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function 终端2： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 接下来，我们用ros2 run命令运行节点： 运行第一个例程： ros2 run example_rclcpp_minimal_publisher publisher_member_function 这是一个用C++写的最小化的发布者程序，其中节点叫publisher_member+function，按回车运行该节点。 可以看到这个节点开始不断循环发布信息，每次发布的信息为字符串形式，内容是“Hello,world! +数字”。 同样，在终端2的命令行窗口，输入以下命令并回车开启订阅者节点。 ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 这个订阅者节点会获取到、并显示出刚才发布者节点发布的信息。 通过这样一个例程，我们验证了两个节点之间的通信没有问题。这这是一个基于DDS的话题通信。 按CTRL+C可以关闭该例程。 通信系统没有问题了，如果你是一个ROS2的开发者，可能对刚才我们使用的ROS2命令比较熟悉，这时你可能也会产生一个问题：我们之前也安装了ROS2系统，那ROS2的原生功能还可以正常运行么？ 我们再来试一试ROS2中自带的一个例程。 和刚才一样打开两个终端，这里我们需要source一下ROS里的环境变量。该环境变量我们刚才已经设置了过软连接，所以配置过程中它也会配置ROS2的功能包路径。 在终端1输入命令： $ source /opt/tros/local_setup.bash 在终端2，也输入同样的命令，配置环境变量的脚本： 接下来运行两个ROS2的节点。 这两个节点的功能包是属于ROS2里的功能包,可以直接调用到。我们来尝试一下输入命令ros2 run，再输入功能包名称，如果按Tab自动补全文件名，说明可以找到对应的这个功能包： ros2 run demo_nodes_cpp talker talker也是一个发布者节点。按回车运行，可以看到终端1的发布者节点以每秒1次的频率发布消息。 同样，我们到终端2中打开订阅者节点： ros2 run demo_nodes_cpp listener 回车运行，很快两个终端间就建立了通讯。 这样就使用ROS2里的例程实现了话题通信连接，只不过这里我们使用的就是ROS2原生的功能包了，而不是TogetherROS的功能。 通信系统已经没问题了，但看上去似乎还不太直观。 目标检测 没问题，接下来，我们就运行一个更为直观的案例——目标检测。 在这个案例中，需要大家找一个USB的相机，连接到旭日X3拍的USB接口上。 在运行这个例程之前，需要确认两点：1.有一个USB相机已经连接到了旭日X3派板子上；2.有一个HDMI的显示器也连接到了旭日X3派板子上，它主要用于显示后续的图像检测的效果。 要确认USB相机已经正确连接到开发板，可以在终端输入命令“ls - dv\"查看当前设备号，默认把USB相机识别为vedio8，如果当前列表里能找到vedio8就说明相机被成功识别到了。 输入以下命令运行例程： $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 代码第一行，02例程的功能是通过相机动态采集图像，并对图像里的目标物体进行实时识别。 代码第二行，我们用python3来运行例程usb_camera_fcos.py，它的目标识别的功能是通过我们板卡中CPU的AI引擎来实现的。 我们输入以上两行代码，就开始驱动相机、并对相机里的图像做动态识别了。 此时如果有连接HDMI的显示器，就可以在显示器里看到动态识别的效果。 我们可以调整USB相机镜头的范围，去拍一些杯子、电脑、显示器等等，都可以把对应的目标物体识别到，并把对应的物体用彩色框给框出来；在框的左上角，就是识别到物体的名称、以及它识别的概率值了。 几个示例程序都可以正常运行了，说明当前的软硬件系统都已经准备就绪，到这里，我们才算是可以正式开始机器人开发了。","text_tokens":["很快","机器","只不过","路径","dds","建立","循环","输入","形式","间","用于","过程","而","范围","例程","确保","开发","找到","字符","更为","这样","直观","同样","“","程序",",","”"," ","号","所以","功能","自带","一个","使用","镜头",".","后续","里","需要","信息","和","talker","会","成功","ros2","没有","左上角","并","软","问题","第一个","这里","叫","nodes","看到","也","似乎","属于","以及","以上","识别","先","去","环境变量","一些","实现","做","接下来","source","dv","ros","为","设备","subscriber","文件","把","尝试","；","没","不过","python3","app","对","以","么","二行","代码","world","打开","开始","？","试一试","开发板","+","相机","两个","了","usb","确认","软硬件","两点","_","如果","物体","cpu","等等","run","分别","来","效果","再","接口","、","节点","rclcpp","发布","关闭","连接","启动","已经","设置","显示器","调用","驱动","获取","上","我们","太","要","熟悉","列表","两行","通信","cpp","通过","下来","默认","大家","camera","togetherros","框出来","旭日","c","上角","主要","脚本","都","安装","窗口","派","fcos","比较","$","example","这时","用","开启","者","在","彩色","命令","listener","但","运行","才","数字","按","\"","几个","发布者","中","local","可以","名称","验证","消息","框","看上去","还","是","这是","这","：","图像","第二行","好","ai","一下","内容","环境变","采集","找","终端","02","写","每秒","字符串","测试","opt","正确","环境","框给","它","这个","tros","杯子","cd","minimal","开发者","/","引擎","最小化","x3","ls","框出","的","py","第二","之间","那","hdmi","被","2","整个","sample","自动","变量","补全","直接","setup","拍","软硬","可能","检测","你","最小","回车","过","实时","动态","看上","硬件","正式","该","目标","examples","hello","产生","左上","原生","。","包是","板子","文件名","当前","function","以下","不是","到","第一行","一样","出来","次","查看","bash","进行","包","-","值","订阅","准备","tab","不","基于","配置","之前","算是","一行","案例","1","显示","调整","电脑","每次","刚才","—","不断","机器人","示例","准备就绪","c++","!","就是","能","正常","概率","vedio8","就绪","系统","member","对应","publisher","频率","此时","说明","板卡","上去","包了","其中","话题","，","demo","inference","第一","接下","有","通讯","就","命令行","ctrl","出"],"title":"示例运行","title_tokens":["示例","运行"]},{"location":"TogetherROS/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#togetherros","text":"接下来，我们就在安装配置好TogetherROS的旭日X3派上，试一试系统自带的一些例程，确保整个系统已经可以正常运行。","text_tokens":["togetherros","x3","运行","上","旭日","我们","一些","。","的","接下来","，","安装","派","接下","例程","可以","试一试","整个","配置","就","确保","自带","已经","正常","下来","好","在","系统"],"title":"TogetherROS示例运行","title_tokens":["togetherros","示例","运行"]},{"location":"TogetherROS/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#_1","text":"先来测试一下TogetherROS系统的通信功能。 我们需要启动两个终端，分别连接到旭日X3派上，并分别按以下命令配置环境变量。 终端1： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function 终端2： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 接下来，我们用ros2 run命令运行节点： 运行第一个例程： ros2 run example_rclcpp_minimal_publisher publisher_member_function 这是一个用C++写的最小化的发布者程序，其中节点叫publisher_member+function，按回车运行该节点。 可以看到这个节点开始不断循环发布信息，每次发布的信息为字符串形式，内容是“Hello,world! +数字”。 同样，在终端2的命令行窗口，输入以下命令并回车开启订阅者节点。 ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 这个订阅者节点会获取到、并显示出刚才发布者节点发布的信息。 通过这样一个例程，我们验证了两个节点之间的通信没有问题。这这是一个基于DDS的话题通信。 按CTRL+C可以关闭该例程。 通信系统没有问题了，如果你是一个ROS2的开发者，可能对刚才我们使用的ROS2命令比较熟悉，这时你可能也会产生一个问题：我们之前也安装了ROS2系统，那ROS2的原生功能还可以正常运行么？ 我们再来试一试ROS2中自带的一个例程。 和刚才一样打开两个终端，这里我们需要source一下ROS里的环境变量。该环境变量我们刚才已经设置了过软连接，所以配置过程中它也会配置ROS2的功能包路径。 在终端1输入命令： $ source /opt/tros/local_setup.bash 在终端2，也输入同样的命令，配置环境变量的脚本： 接下来运行两个ROS2的节点。 这两个节点的功能包是属于ROS2里的功能包,可以直接调用到。我们来尝试一下输入命令ros2 run，再输入功能包名称，如果按Tab自动补全文件名，说明可以找到对应的这个功能包： ros2 run demo_nodes_cpp talker talker也是一个发布者节点。按回车运行，可以看到终端1的发布者节点以每秒1次的频率发布消息。 同样，我们到终端2中打开订阅者节点： ros2 run demo_nodes_cpp listener 回车运行，很快两个终端间就建立了通讯。 这样就使用ROS2里的例程实现了话题通信连接，只不过这里我们使用的就是ROS2原生的功能包了，而不是TogetherROS的功能。 通信系统已经没问题了，但看上去似乎还不太直观。","text_tokens":["很快","命令","只不过","路径","listener","但","dds","建立","循环","产生","运行","输入","形式","原生","。","world","打开","包是","间","过程","数字","按","而","开始","文件名","发布者","中","function","local","以下","？","例程","可以","试一试","验证","名称","消息","看上去","开发","找到","还","是","这是","+","两个","字符","了","不是","这样","到","这","：","直观","一样","同样","次","“","_","程序","如果","bash","一下",",","内容","”","包","环境变","run","分别","来"," ","终端","再","所以","写","每秒","字符串","订阅","、","tab","测试","不","opt","rclcpp","功能","节点","发布","基于","关闭","配置","环境","一个","使用","之前","连接","自带","它","启动","已经","设置","这个",".","tros","里","需要","1","minimal","显示","信息","开发者","调用","和","/","talker","每次","会","获取","最小化","x3","上","ros2","我们","刚才","太","的","没有","之间","以","那","熟悉","2","并","不断","软","通信","c++","问题","!","第一个","cpp","这里","叫","自动","变量","就是","nodes","看到","也","补全","直接","setup","正常","通过","似乎","属于","下来","可能","系统","member","先","对应","togetherros","publisher","你","频率","旭日","环境变量","实现","说明","c","最小","上去","包了","source","接下来","其中","回车","ros","过","为","脚本","话题","，","demo","subscriber","安装","第一","窗口","文件","派","接下","比较","尝试","$","通讯","就","example","这时","看上","用","没","不过","开启","该","者","命令行","examples","hello","ctrl","对","出","在","么"],"title":"通信测试","title_tokens":["通信","测试"]},{"location":"TogetherROS/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#_2","text":"没问题，接下来，我们就运行一个更为直观的案例——目标检测。 在这个案例中，需要大家找一个USB的相机，连接到旭日X3拍的USB接口上。 在运行这个例程之前，需要确认两点：1.有一个USB相机已经连接到了旭日X3派板子上；2.有一个HDMI的显示器也连接到了旭日X3派板子上，它主要用于显示后续的图像检测的效果。 要确认USB相机已经正确连接到开发板，可以在终端输入命令“ls - dv\"查看当前设备号，默认把USB相机识别为vedio8，如果当前列表里能找到vedio8就说明相机被成功识别到了。 输入以下命令运行例程： $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 代码第一行，02例程的功能是通过相机动态采集图像，并对图像里的目标物体进行实时识别。 代码第二行，我们用python3来运行例程usb_camera_fcos.py，它的目标识别的功能是通过我们板卡中CPU的AI引擎来实现的。 我们输入以上两行代码，就开始驱动相机、并对相机里的图像做动态识别了。 此时如果有连接HDMI的显示器，就可以在显示器里看到动态识别的效果。 我们可以调整USB相机镜头的范围，去拍一些杯子、电脑、显示器等等，都可以把对应的目标物体识别到，并把对应的物体用彩色框给框出来；在框的左上角，就是识别到物体的名称、以及它识别的概率值了。 几个示例程序都可以正常运行了，说明当前的软硬件系统都已经准备就绪，到这里，我们才算是可以正式开始机器人开发了。","text_tokens":["命令","机器","二行","运行","代码","左上","输入","才","。","板子","用于","\"","范围","几个","开始","当前","中","以下","例程","可以","名称","框","开发板","开发","找到","是","相机","更为","了","usb","到","第一行","确认","直观","图像","：","第二行","出来","软硬件","“","查看","两点","ai","_","如果","程序","物体","cpu","进行","等等","-","值","来","采集","号"," ","找","效果","终端","02","接口","、","准备","功能","正确","框给","一个","之前","连接","它","算是","镜头","已经","一行","这个","案例",".","后续","显示器","杯子","里","cd","需要","1","显示","/","调整","电脑","成功","驱动","引擎","x3","ls","上","框出","我们","的","—","py","左上角","要","第二","hdmi","被","2","并","列表","两行","机器人","示例","准备就绪","问题","sample","这里","就是","看到","也","能","正常","拍","通过","概率","下来","以及","软硬","以上","检测","识别","vedio8","就绪","系统","对应","默认","大家","camera","去","框出来","旭日","此时","一些","实现","说明","做","板卡","上角","接下来","dv","主要","为","都","设备","，","inference","实时","第一","派","把","接下","fcos","有","动态","$","就","；","用","硬件","没","正式","python3","目标","app","对","在","彩色"],"title":"目标检测","title_tokens":["检测","目标"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/","text":"多节点话题通信 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 编程方法 了解了话题的基本原理，接下来我们就要开始编写代码啦。 创建工作空间 请大家先按照这个流程创建工作空间、下载课程的例程代码，并进行编译。 $ mkdir –p dev_ws/src $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build 运行示例程序 编译成功后，我们尝试运行话题通信的Hello World例程，在这个例程中，我们会先创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_topic_cpp talker $ ros2 run learning_topic_cpp listener 这就是TogetherROS系统中话题通信的方法，依然沿用了ROS2中话题通信的完整流程。 代码解析 发布者的实现方法publisher_member_function.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using namespace std :: chrono_literals ; /* This example creates a subclass of Node and uses std::bind() to register a * member function as a callback from the timer. */ class MinimalPublisher : public rclcpp :: Node { public : MinimalPublisher () : Node ( \"minimal_publisher\" ), count_ ( 0 ) { publisher_ = this -> create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & MinimalPublisher :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, world! \" + std :: to_string ( count_ ++ ); RCLCPP_INFO ( this -> get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者的实现方法subscriber_member_function.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using std :: placeholders :: _1 ; class MinimalSubscriber : public rclcpp :: Node { public : MinimalSubscriber () : Node ( \"minimal_subscriber\" ) { subscription_ = this -> create_subscription < std_msgs :: msg :: String > ( \"topic\" , 10 , std :: bind ( & MinimalSubscriber :: topic_callback , this , _1 )); } private : void topic_callback ( const std_msgs :: msg :: String :: SharedPtr msg ) const { RCLCPP_INFO ( this -> get_logger (), \"I heard: '%s'\" , msg -> data . c_str ()); } rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["机器","–","dds","每","语言",">","联系","画面","int","间","用于","编译","例程","最","heard","随处可见","this","字符","这样","之为","概念","看","“","程序","个","建议",",","”","标准","报纸","人","build","bind"," ","号","功能","从","&","chatter","一个","使用","sharedptr",".","本原","里","需要","get","数据传输","信息","msgs","和","talker","基本原理","}","会","成功","*","描述","叫做","东西","ros2","register","得到","没有","argv","git","是不是","并","数据结构","得","空间","const","这里","叫","最后","也","=","感兴","数据","监控","似乎","timerbase","to","dev","无关","先","模型","较强","理解","minimalsubscriber","一些","实现","做","流程","还是","接下来","source","ros","shared","设备","关系","'","感器","subscriber","private","文件","把","来看","尝试","依然","shutdown","传感器","排版","桥梁","称之为","learning","str","string","对","public","以","data","生活","include","minimalpublisher","message","第一次","void","不然","优先级","角度","代码","统一","传递数据","timer","src","]","world","开始","and","复杂","？","没错","相机","+","两个","多个","了","传递","用户","杂志","_","如果","creates","接收","并不知道","等等","摇杆","run","传输","t","再","接口","、","clone","节点","发布","rclcpp","还有","啦","as","将","各样","auto","千丝万缕","count","10","编程","驱动","获取","时候","拼接","呢","上","我们","太","不能","长宽","要","比如","词","hpp","古月","积木","听说","通信","node","cpp","成","{","literals","uses","通过","注意","指令","下来","tutorials","块","大家","togetherros","修改","s","各种","指","c","callback","mkdir","都","from","视频","$","example","用","像","文章","make","者","发出","控制指令","在","很多","listener","组成","但","某些","自然","运行","自行","可见","阅读","\"","是从","functional","char","发布者","gitee","中","不知","local","创建","后缀","std","可以","名称","原理","消息","控制","更","colcon","com","是","所谓","拍摄","install","(","这","：","图像","logger","好","之后","想象","逻辑","一下","数据类型","唯一","万缕","知识","特性","区分","与","完整","沿用","#","这些","a","类型","字符串","opt","兴趣","合适","using","它","给","感兴趣","spin","会先","一份","这个","报社","tros","接口定义","cd","0","的话","方法","minimal","create","/","听","某种","只要","让","名字","类似","重要","说","的","工作","运动","之间","那","被","2","挺","平时","编程语言","namespace","后","setup","因为","基本","可能","为例","多","subscription","千丝","p","i","据传","of","ms","rgb","你","某","按照","发送数据","像素","居","实时","++","优先","谁","一次","随处","msg","结构","硬件","数量","该","周期","hello","他会","接收数据","作为","每个","publishing","无法","了解","the","。","一篇","同学","适合","课程","既然","格式","3","function","各种各样","定义","知道","成为","传感","逻辑性","不是","wall","独立","可视化","到","https","一样",":","渲染","500","return","placeholders","查看","英文","固定","bash","对象","进行","size","-","值",";","请","联系方式","订阅","<","不","可视",")","topic","基于","仔细","小编","从而","userdata","info","subclass","1","显示","guyuehome","什么","想","就要","存在","一种","方式","argc","解析","chrono","init","微信","打","机器人","异步","示例","memory","%","!","必然","[","就是","本身","系统","member","才能","对应","通信模型","publisher","收到","想下","另外","此时","出去","方向","ws","根本","其中","公众","中文","下载","应该","要求","比方","发送","话题","在生活中","，","第一","接下","编写","有","publish","就","包含","main","b","参数","魔性","组织","class"],"title":"多节点话题通信","title_tokens":["话题","多","通信","节点"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["千丝","千丝万缕","机器","但","会","一种","方式","联系","重要","万缕","传递数据","实现","。","各种","间","的","这些"," ","其中","联系方式","之间","话题","，","并","各种各样","节点","功能","最","有","机器人","桥梁","它","是","就是","了","不是","传递","独立","数据","各样"],"title":"多节点话题通信","title_tokens":["话题","多","通信","节点"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["作为","机器","。","中","？","可以","没错","是","相机","拍摄","两个","不是","了","传递","这样","可视化","到","这","用户","之为","图像","渲染","查看","一下","传输"," ","a","节点","功能","可视","从","一个","它","给","这个","显示","信息","数据传输","将","某种","想","驱动","存在","获取","方式","上","我们","得到","的","要","之间","是不是","机器人","必然","数据","监控","为例","才能","大家","据传","此时","某","实现","做","方向","ros","话题","设备","，","关系","实时","视频","有","就","桥梁","b","称之为","硬件","以","在"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["机器","dds","自然","每","角度","无法","。","可见","是从","格式","发布者","？","名称","可以","是","成为","随处可见","了","这样","到","之为","看","杂志","好","“","之后","如果","固定","对象","接收","等等","数据类型","”","知识","特性","报纸","传输"," ","号","类型","订阅","、","他会","节点","发布","从","基于","小编","兴趣","使用","一个","它","感兴趣","这个","需要","的话","数据传输","和","/","什么","名字","会","类似","呢","叫做","的","微信","没有","比如","打","古月","机器人","平时","叫","成","就是","也","感兴","数据","本身","模型","生活","据传","大家","收到","另外","实现","出去","发送数据","公众","居","应该","要求","都","发送","话题","比方","，","在生活中","把","来看","有","就","随处","排版","称之为","文章","对","者","组织","接收数据"],"title":"发布/订阅模型","title_tokens":["模型","/","订阅","发布"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["机器","每个","不然","优先级","画面","。","3","发布者","可以","没错","知道","控制","是","多个","不是","了","之为","一样","杂志","想象","如果","个","建议","一下","唯一","摇杆","区分","报纸","人","这些","号"," ","再","订阅","、","不","节点","发布","仔细","一个","这个","里","1","和","听","存在","东西","我们","的","要","被","是不是","并","2","机器人","挺","通信","也","注意","指令","似乎","因为","可能","多","模型","大家","通信模型","想下","还是","公众","ros","发送","话题","，","有","优先","谁","称之为","数量","该","者","魔性","对","控制指令","很多"],"title":"多对多通信","title_tokens":["通信","多","对"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["第一次","某些","。","一篇","同学","适合","用于","阅读","发布者","不知","？","可以","知道","更","控制","是","所谓","传感","逻辑性","了","这","如果","逻辑","并不知道","等等","特性","报纸","传输","号"," ","订阅","不","发布","还有","一个","合适","一份","这个","报社","什么","只要","让","时候","类似","叫做","太","的","运动","比如","那","词","古月","听说","异步","通信","就是","也","后","数据","指令","可能","较强","收到","你","修改","一些","某","指","根本","居","公众","话题","，","感器","第一","有","一次","就","传感器","用","参数","文章","发出","者","周期"],"title":"异步通信","title_tokens":["通信","异步"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["机器","每个","组成","语言","统一","。","自行","既然","格式","发布者","中","各种各样","后缀","复杂","定义","可以","消息","是","了","这样","之为","概念","图像","一样","英文","进行","等等","标准","与","传输","值"," ","接口","订阅","、","节点","发布","一个",".","接口定义","数据传输","和","各样","编程","会","一种","方式","拼接","描述","说","我们","的","不能","长宽","比如","数据结构","积木","得","机器人","编程语言","通信","这里","成","最后","也","通过","数据","块","无关","系统","对应","据传","rgb","理解","各种","像素","中文","ros","都","话题","，","文件","有","就","包含","msg","结构","称之为","像","者","在"],"title":"消息接口","title_tokens":["接口","消息"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_7","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。","text_tokens":["就要","基本原理","代码","我们","了解","。","的","接下来","开始","话题","，","接下","编写","原理","啦","了","本原","基本","下来"],"title":"编程方法","title_tokens":["方法","编程"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_8","text":"请大家先按照这个流程创建工作空间、下载课程的例程代码，并进行编译。 $ mkdir –p dev_ws/src $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build","text_tokens":["先","p","–","大家","进行","togetherros","代码","build","src","按照","。","请","ws","流程","课程","的"," ","工作","下载","编译","mkdir","git","gitee","，","并","、","clone","创建","例程","colcon","$","空间","com","userdata","guyuehome","这个","https",".",":","cd","tutorials","/","dev","_"],"title":"创建工作空间","title_tokens":["空间","工作","创建"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_9","text":"编译成功后，我们尝试运行话题通信的Hello World例程，在这个例程中，我们会先创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_topic_cpp talker $ ros2 run learning_topic_cpp listener 这就是TogetherROS系统中话题通信的方法，依然沿用了ROS2中话题通信的完整流程。","text_tokens":["talker","bash","listener","成功","接收","togetherros","运行","”","标准","我们","ros2","run","沿用","完整","。","world","流程","的"," ","source","ros","再","编译","类型","发送","话题","发布者","中","，","字符串","订阅","local","创建","系统","opt","发布","例程","定义","topic","尝试","消息","依然","$","chatter","通信","一个","cpp","从而","是","会先","install","就是","字符","后","learning","了","这个","string","到","tros","setup",".","者","这","方法","hello","周期","“","/","在","_"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_10","text":"发布者的实现方法publisher_member_function.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using namespace std :: chrono_literals ; /* This example creates a subclass of Node and uses std::bind() to register a * member function as a callback from the timer. */ class MinimalPublisher : public rclcpp :: Node { public : MinimalPublisher () : Node ( \"minimal_publisher\" ), count_ ( 0 ) { publisher_ = this -> create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & MinimalPublisher :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, world! \" + std :: to_string ( count_ ++ ); RCLCPP_INFO ( this -> get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者的实现方法subscriber_member_function.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using std :: placeholders :: _1 ; class MinimalSubscriber : public rclcpp :: Node { public : MinimalSubscriber () : Node ( \"minimal_subscriber\" ) { subscription_ = this -> create_subscription < std_msgs :: msg :: String > ( \"topic\" , 10 , std :: bind ( & MinimalSubscriber :: topic_callback , this , _1 )); } private : void topic_callback ( const std_msgs :: msg :: String :: SharedPtr msg ) const { RCLCPP_INFO ( this -> get_logger (), \"I heard: '%s'\" , msg -> data . c_str ()); } rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["include","minimalpublisher","message","void","publishing",">","the","timer","]","world","int","\"","functional","char","发布者","and","function","std","heard","this","+","wall","(","：",":","logger","500","return","placeholders","_","creates",",","size","-","#",";","t","bind"," ","a","订阅","<","发布","rclcpp",")","topic","&","using","sharedptr","spin",".","as","info","subclass","0","方法","minimal","get","1","create","msgs","/","auto","count","10","}","*","argc","register","chrono","init","的","argv","hpp","memory","%","namespace","node","const","!","cpp","{","[","=","literals","uses","timerbase","to","subscription","member","i","of","ms","publisher","minimalsubscriber","s","实现","c","callback","shared","'","from","subscriber","private","++","publish","shutdown","example","msg","main","str","string","make","者","hello","public","data","class"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/","text":"多节点服务通信 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 编程方法 了解了服务通信的原理，接下来我们就要开始编写代码啦，我们尝试通过服务实现一个加法求解器的功能。 运行示例程序 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 我们一起操作下这个例程。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_service_cpp server $ ros2 run learning_service_cpp client 2 3 话题和服务是最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 代码解析 服务器端add_two_ints_server.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <memory> void add ( const std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Request> request, std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Response> response ) { response->sum = request->a + request->b ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Incoming request\\na: %ld\" \" b: %ld\" , request->a, request->b ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"sending back response: [%ld]\" , ( long int ) response->sum ) ; } int main ( int argc, char **argv ) { rclcpp::init ( argc, argv ) ; std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared ( \"add_two_ints_server\" ) ; rclcpp::Service<learning_service_cpp::srv::AddTwoInts>::SharedPtr service = node->create_service<learning_service_cpp::srv::AddTwoInts> ( \"add_two_ints\" , & add ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Ready to add two ints.\" ) ; rclcpp::spin ( node ) ; rclcpp::shutdown () ; } 客户端add_two_ints_client.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <chrono> #include <cstdlib> #include <memory> using namespace std :: chrono_literals ; int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); if ( argc != 3 ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"usage: add_two_ints_client X Y\" ); return 1 ; } std :: shared_ptr < rclcpp :: Node > node = rclcpp :: Node :: make_shared ( \"add_two_ints_client\" ); rclcpp :: Client < learning_service_cpp :: srv :: AddTwoInts >:: SharedPtr client = node -> create_client < learning_service_cpp :: srv :: AddTwoInts > ( \"add_two_ints\" ); auto request = std :: make_shared < learning_service_cpp :: srv :: AddTwoInts :: Request > (); request -> a = atoll ( argv [ 1 ]); request -> b = atoll ( argv [ 2 ]); while ( ! client -> wait_for_service ( 1 s )) { if ( ! rclcpp :: ok ()) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Interrupted while waiting for the service. Exiting.\" ); return 0 ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"service not available, waiting again...\" ); } auto result = client -> async_send_request ( request ); // Wait for the result. if ( rclcpp :: spin_until_future_complete ( node , result ) == rclcpp :: FutureReturnCode :: SUCCESS ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"Sum: %ld\" , result . get () -> sum ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Failed to call service add_two_ints\" ); } rclcpp :: shutdown (); return 0 ; }","text_tokens":["机器","每",">","界面","sending","返回","形式","下","越快越好","int","机制","过程","例程","这样","之为","常见","那有","call","问","同样","“","或者","程序","two",",","”","标准","人","两种"," ","所以","加数","前者","功能","从","&","有所","一对","使用","一个","sharedptr",".","后续","需要","get","信息","和","周期性","futurereturncode","单向","请求","}","会","*","状态","叫做","ros2","得到","坐标","没有","argv","某个","并","available","service","封装","很","加法","const","想要","展现","看到","也","=","srv","数据","to","识别","y","模型","时","一直","interrupted","实现","source","还是","接下来","ros","为","求解","shared","数据通信","感器","文件","浏览器","来看","是否","尝试","shutdown","传感器","称之为","learning","async","对","生活","include","void","代码","越好","传递数据","]","...","开始","again","不同","相机","+","两个","多个","了","传递","后者","发","_","服务器发送","物体","接收","尽快","x","针对","run","传输","效果","ready","接口","、","节点","发布","rclcpp","还有","啦","域名","跟随","ints","将","auto","一问一答","编程","驱动","获取","视觉","时候","上","半天","我们","sum","应答","假设","要","比如","cstdlib","hpp","反馈","古月","addtwoints","然后","本","通信","node","cpp","成","最新","{","literals","通过","指令","send","不好","结果","答","下来","incoming","应用","发给","大家","ptr","back","s","页面","wait","各种","相比","都","$","usage","苹果","者","make","控制指令","在","命令","某些","但","运行","计算","until","浏览","ld","处理","\"","char","发布者","好像","中","local","std","可以","原理","消息","并不需要","更","控制","经常","是","install","(","：","图像","long","if","这么","logger","之后","操作","唯一","图像识别","具体","#","这些","a","转圈圈","同步","opt","error","客户端","但是","using","给","spin","\\","response","这个","tros","0","方法","create","圈圈","/","failed","类似","server","数据通","na","的","atoll","运动","之间","2","complete","常用","namespace","网站","完全","查询","后","setup","宕机","转圈","可能","多","务器","求和","服务器","希望","你","add","按照","居","红色","当","not","msg","位置","准确","目标","周期","核心","client","future","访问","无法","部分","了解","the","。","课程","适合","网页","3","判断","反应","器","定义","知道","waiting","继续","成为","传感","到","一样","而是",":","return","这种","bash","学习","进行","for","-","高",";","我","简称","while","订阅","<","不","客户","同步性",")","之前","服务","info","附近","1","就要","电脑","介绍","存在","一种","最为","cs","argc","result","解析","chrono","init","—","变成","网络","机器人","上层","异步","示例","memory","%","!","[","就是","等","一起","越快","通信模型","收到","频率","success","另外","此时","出去","其中","服务器端","要求","在生活中","发送","话题","，","提供","有所不同","一般","接下","编写","向","就","exiting","else","main","b","ok","讲","request"],"title":"多节点服务通信","title_tokens":["服务","多","通信","节点"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["单向","学习","一种","类似","收到","你","无法","另外","我们","实现","传输","。","我","机制","的"," ","效果","—","ros","之间","发布者","话题","，","订阅","同步","节点","发布","可以","知道","是否","异步","消息","本","通信","常用","使用","准确","讲","多个","服务","一起","数据","者","答","方法","问","将","这种"],"title":"多节点服务通信","title_tokens":["服务","多","通信","节点"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["机器","形式","。","课程","机制","好像","中","可以","并不需要","更","继续","不同","是","相机","成为","了","这样","到","图像","一样","而是","这么","问","或者","这种","发","物体","尽快","图像识别","高","传输","我"," ","订阅","节点","发布","有所","一个","使用","之前","这个","跟随","服务","需要","附近","信息","和","单向","请求","驱动","时候","我们","得到","的","应答","运动","变成","比如","并","反馈","service","然后","机器人","上层","通信","最新","查询","通过","数据","答","识别","应用","模型","发给","通信模型","希望","你","频率","另外","一直","此时","实现","按照","其中","ros","发送","话题","，","红色","有所不同","位置","目标","周期","对","在"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["请求","服务器发送","模型","电脑","之后","某些","会","操作","进行","cs","时候","针对","你","收到","上","叫做","返回","我们","形式","此时","实现","页面","具体","。","各种","我","简称","机制","的","浏览"," ","网页","处理","应答","服务器端","为","某个","在生活中","发送","比如","，","并","反馈","浏览器","客户","来看","从","在","客户端","向","通信","就","很","经常","网站","展现","就是","域名","也","服务","通过","数据","常见","或者","答","需要","问","信息","务器","/","服务器","这种","生活"],"title":"客户端/服务器模型","title_tokens":["客户","服务","模型","客户端","务器","/","服务器"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["圈圈","接收","状态","你","越好","半天","一直","我们","。","越快越好","的","浏览","过程","没有","应答","假设","服务器端","要求","相比","所以","话题","反应","，","转圈圈","中","判断","一般","浏览器","同步","客户","可以","网络","在","客户端","通信","是","称之为","也","了","这个","服务","宕机","通过","到","那有","之为","不好","或者","越快","转圈","可能","信息","务器","服务器"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["模型","访问","存在","大家","通信模型","但","每","界面","唯一","人","。","的","没有","居","服务器端","比如","都","所以","，","中","并","不","古月","客户","可以","客户端","通信","但是","一个","完全","网站","是","看到","多个","这个","服务","一样","同样","务器","服务器"],"title":"一对多通信","title_tokens":["通信","多","一对"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["命令","核心","请求","介绍","会","大家","类似","标准","部分","传递数据","我们","。","坐标","的","这些"," ","还是","ros","要","变成","比如","话题","，","中","文件","反馈","定义","消息","还有","通信","一个","使用","msg","位置","是","给","两个","也","了","传递","srv","服务",".","数据","后续","苹果","一样","方法","和","在"],"title":"服务接口","title_tokens":["服务","接口"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_7","text":"了解了服务通信的原理，接下来我们就要开始编写代码啦，我们尝试通过服务实现一个加法求解器的功能。","text_tokens":["就要","代码","我们","了解","实现","。","的","接下来","求解","开始","，","器","接下","编写","功能","原理","尝试","通信","加法","一个","啦","了","服务","通过","下来"],"title":"编程方法","title_tokens":["方法","编程"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_8","text":"当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 我们一起操作下这个例程。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_service_cpp server $ ros2 run learning_service_cpp client 2 3 话题和服务是最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。","text_tokens":["机器","client","下","。","计算","适合","3","开始","local","例程","可以","控制","更","是","install","传感","两个","到","后者","“","之后","_","bash","操作","进行","two","针对","”","两种","run","传输","高"," ","、","加数","同步","节点","客户","opt","前者","同步性","客户端","给","啦","服务","这个",".","tros","需要","方法","ints","将","和","/","周期性","单向","请求","一问一答","获取","最为","视觉","server","ros2","我们","数据通","得到","的","应答","比如","2","并","反馈","service","封装","常用","通信","加法","cpp","成","想要","等","后","setup","一起","通过","数据","指令","结果","识别","求和","务器","服务器","时","add","收到","出去","source","服务器端","要求","发送","话题","，","提供","数据通信","感器","当","$","传感器","就","位置","learning","目标","周期","控制指令"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_9","text":"服务器端add_two_ints_server.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <memory> void add ( const std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Request> request, std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Response> response ) { response->sum = request->a + request->b ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Incoming request\\na: %ld\" \" b: %ld\" , request->a, request->b ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"sending back response: [%ld]\" , ( long int ) response->sum ) ; } int main ( int argc, char **argv ) { rclcpp::init ( argc, argv ) ; std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared ( \"add_two_ints_server\" ) ; rclcpp::Service<learning_service_cpp::srv::AddTwoInts>::SharedPtr service = node->create_service<learning_service_cpp::srv::AddTwoInts> ( \"add_two_ints\" , & add ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Ready to add two ints.\" ) ; rclcpp::spin ( node ) ; rclcpp::shutdown () ; } 客户端add_two_ints_client.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <chrono> #include <cstdlib> #include <memory> using namespace std :: chrono_literals ; int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); if ( argc != 3 ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"usage: add_two_ints_client X Y\" ); return 1 ; } std :: shared_ptr < rclcpp :: Node > node = rclcpp :: Node :: make_shared ( \"add_two_ints_client\" ); rclcpp :: Client < learning_service_cpp :: srv :: AddTwoInts >:: SharedPtr client = node -> create_client < learning_service_cpp :: srv :: AddTwoInts > ( \"add_two_ints\" ); auto request = std :: make_shared < learning_service_cpp :: srv :: AddTwoInts :: Request > (); request -> a = atoll ( argv [ 1 ]); request -> b = atoll ( argv [ 2 ]); while ( ! client -> wait_for_service ( 1 s )) { if ( ! rclcpp :: ok ()) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Interrupted while waiting for the service. Exiting.\" ); return 0 ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"service not available, waiting again...\" ); } auto result = client -> async_send_request ( request ); // Wait for the result. if ( rclcpp :: spin_until_future_complete ( node , result ) == rclcpp :: FutureReturnCode :: SUCCESS ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"Sum: %ld\" , result . get () -> sum ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Failed to call service add_two_ints\" ); } rclcpp :: shutdown (); return 0 ; }","text_tokens":["include","void","client","future",">","sending","the","]","int","until","ld","...","\"","3","char","again","std","waiting","+","(","：",":","long","if","call","logger","return","_","for","two",",","x","-","#",";"," ","a","while","ready","<","rclcpp","客户","error",")","&","客户端","using","sharedptr","spin","\\","response","服务",".","info","0","get","1","ints","create","/","futurereturncode","auto","}","failed","argc","*","server","result","sum","na","init","chrono","atoll","argv","cstdlib","2","hpp","available","service","addtwoints","memory","complete","%","namespace","node","const","!","cpp","{","[","=","literals","srv","send","to","务器","服务器","incoming","y","ptr","back","add","success","interrupted","s","wait","服务器端","shared","usage","shutdown","not","exiting","else","main","b","ok","request","learning","make","async"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/","text":"多节点动作通信 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 编程方法 相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 运行示例程序 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_action_cpp server $ ros2 run learning_action_cpp client 代码解析 动作的服务器fibonacci_action_server.cpp： #include <inttypes.h> #include <memory> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO(jacobperron): Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionServer : public rclcpp :: Node { public : using Fibonacci = learning_action_cpp :: action :: Fibonacci ; using GoalHandleFibonacci = rclcpp_action :: ServerGoalHandle < Fibonacci > ; explicit MinimalActionServer ( const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : Node ( \"minimal_action_server\" , options ) { using namespace std :: placeholders ; this -> action_server_ = rclcpp_action :: create_server < Fibonacci > ( this -> get_node_base_interface (), this -> get_node_clock_interface (), this -> get_node_logging_interface (), this -> get_node_waitables_interface (), \"fibonacci\" , std :: bind ( & MinimalActionServer :: handle_goal , this , _1 , _2 ), std :: bind ( & MinimalActionServer :: handle_cancel , this , _1 ), std :: bind ( & MinimalActionServer :: handle_accepted , this , _1 )); } private : rclcpp_action :: Server < Fibonacci >:: SharedPtr action_server_ ; rclcpp_action :: GoalResponse handle_goal ( const rclcpp_action :: GoalUUID & uuid , std :: shared_ptr < const Fibonacci :: Goal > goal ) { RCLCPP_INFO ( this -> get_logger (), \"Received goal request with order %d\" , goal -> order ); ( void ) uuid ; // Let's reject sequences that are over 9000 if ( goal -> order > 9000 ) { return rclcpp_action :: GoalResponse :: REJECT ; } return rclcpp_action :: GoalResponse :: ACCEPT_AND_EXECUTE ; } rclcpp_action :: CancelResponse handle_cancel ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Received request to cancel goal\" ); ( void ) goal_handle ; return rclcpp_action :: CancelResponse :: ACCEPT ; } void execute ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Executing goal\" ); rclcpp :: Rate loop_rate ( 1 ); const auto goal = goal_handle -> get_goal (); auto feedback = std :: make_shared < Fibonacci :: Feedback > (); auto & sequence = feedback -> sequence ; sequence . push_back ( 0 ); sequence . push_back ( 1 ); auto result = std :: make_shared < Fibonacci :: Result > (); for ( int i = 1 ; ( i < goal -> order ) && rclcpp :: ok (); ++ i ) { // Check if there is a cancel request if ( goal_handle -> is_canceling ()) { result -> sequence = sequence ; goal_handle -> canceled ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Canceled\" ); return ; } // Update sequence sequence . push_back ( sequence [ i ] + sequence [ i - 1 ]); // Publish feedback goal_handle -> publish_feedback ( feedback ); RCLCPP_INFO ( this -> get_logger (), \"Publish Feedback\" ); loop_rate . sleep (); } // Check if goal is done if ( rclcpp :: ok ()) { result -> sequence = sequence ; goal_handle -> succeed ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Succeeded\" ); } } void handle_accepted ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { using namespace std :: placeholders ; // this needs to return quickly to avoid blocking the executor, so spin up a new thread std :: thread { std :: bind ( & MinimalActionServer :: execute , this , _1 ), goal_handle }. detach (); } }; // class MinimalActionServer int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); auto action_server = std :: make_shared < MinimalActionServer > (); rclcpp :: spin ( action_server ); rclcpp :: shutdown (); return 0 ; } 动作的客户端fibonacci_action_client.cpp： #include <inttypes.h> #include <memory> #include <string> #include <iostream> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO ( jacobperron ) : Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionClient : public rclcpp::Node { public: using Fibonacci = learning_action_cpp::action::Fibonacci ; using GoalHandleFibonacci = rclcpp_action::ClientGoalHandle<Fibonacci> ; explicit MinimalActionClient ( const rclcpp::NodeOptions & node_options = rclcpp::NodeOptions ()) : Node ( \"minimal_action_client\" , node_options ) , goal_done_ ( false ) { this->client_ptr_ = rclcpp_action::create_client<Fibonacci> ( this->get_node_base_interface () , this->get_node_graph_interface () , this->get_node_logging_interface () , this->get_node_waitables_interface () , \"fibonacci\" ) ; this->timer_ = this->create_wall_timer ( std::chrono::milliseconds ( 500 ) , std::bind ( & MinimalActionClient::send_goal, this )) ; } bool is_goal_done () const { return this->goal_done_ ; } void send_goal () { using namespace std::placeholders ; this->timer_->cancel () ; this->goal_done_ = false ; if ( !this->client_ptr_ ) { RCLCPP_ERROR ( this->get_logger () , \"Action client not initialized\" ) ; } if ( !this->client_ptr_->wait_for_action_server ( std::chrono::seconds ( 10 ))) { RCLCPP_ERROR ( this->get_logger () , \"Action server not available after waiting\" ) ; this->goal_done_ = true ; return ; } auto goal_msg = Fibonacci::Goal () ; goal_msg.order = 10 ; RCLCPP_INFO ( this->get_logger () , \"Sending goal\" ) ; auto send_goal_options = rclcpp_action::Client<Fibonacci>::SendGoalOptions () ; send_goal_options.goal_response_callback = std::bind ( & MinimalActionClient::goal_response_callback, this, _1 ) ; send_goal_options.feedback_callback = std::bind ( & MinimalActionClient::feedback_callback, this, _1, _2 ) ; send_goal_options.result_callback = std::bind ( & MinimalActionClient::result_callback, this, _1 ) ; auto goal_handle_future = this->client_ptr_->async_send_goal ( goal_msg, send_goal_options ) ; } private: rclcpp_action::Client<Fibonacci>::SharedPtr client_ptr_ ; rclcpp::TimerBase::SharedPtr timer_ ; bool goal_done_ ; void goal_response_callback ( std::shared_future<GoalHandleFibonacci::SharedPtr> future ) { auto goal_handle = future.get () ; if ( !goal_handle ) { RCLCPP_ERROR ( this->get_logger () , \"Goal was rejected by server\" ) ; } else { RCLCPP_INFO ( this->get_logger () , \"Goal accepted by server, waiting for result\" ) ; } } void feedback_callback ( GoalHandleFibonacci::SharedPtr, const std::shared_ptr<const Fibonacci::Feedback> feedback ) { RCLCPP_INFO ( this->get_logger () , \"Next number in sequence received: %\" PRId32, feedback->sequence.back ()) ; } void result_callback ( const GoalHandleFibonacci::WrappedResult & result ) { this->goal_done_ = true ; switch ( result.code ) { case rclcpp_action::ResultCode::SUCCEEDED: break ; case rclcpp_action::ResultCode::ABORTED: RCLCPP_ERROR ( this->get_logger () , \"Goal was aborted\" ) ; return ; case rclcpp_action::ResultCode::CANCELED: RCLCPP_ERROR ( this->get_logger () , \"Goal was canceled\" ) ; return ; default: RCLCPP_ERROR ( this->get_logger () , \"Unknown result code\" ) ; return ; } RCLCPP_INFO ( this->get_logger () , \"Result received\" ) ; for ( auto number : result.result->sequence ) { RCLCPP_INFO ( this->get_logger () , \"%\" PRId32, number ) ; } } } ; // class MinimalActionClient int main ( int argc, char ** argv ) { rclcpp::init ( argc, argv ) ; auto action_client = std::make_shared<MinimalActionClient> () ; while ( !action_client->is_goal_done ()) { rclcpp::spin_some ( action_client ) ; } rclcpp::shutdown () ; return 0 ; }","text_tokens":["prid32","机器","there","feedback","loop",">","sending","动作","下","int","initialized","机制","过程","blocking","每隔","1s","三个","例程","this","更为","这样","概念","看","sleep","check","程序",",","minimalactionserver","bind","seconds"," ","不仅","只能","milliseconds","旋转","switch","功能","从","&","一对","一个","使用","sharedptr",".","需要","get","信息","和","请求","in","}","会","满足","executor","某一","*","状态","含义","ros2","坐标","rate","没有","interface","argv","某个","action","是不是","并","available","得","很","const","动图","完成","remove","便于","也","=","只有","数据","timerbase","to","bool","识别","先","模型","时间","时","理解","相对","new","实现","表示","流程","隐藏","let","source","ros","所处","shared","智能","'","private","文件","把","起来","clock","inttypes","push","shutdown","抓取","需求","learning","case","string","done","async","对","public","include","canceling","needs","void","代码","timer","it","现在","]","detach","开始","and","clientgoalhandle","复杂","转个","？","没错","+","还会","多个","两个","了","unknown","by","_","sequences","如果","succeed","360","logging","run","来","告诉","再","接口","仅仅","、","多少度","节点","发布","rclcpp","goaluuid","after","sequence","as","are","调用","30","update","auto","转","10","应带","编程","送货","上","我们","假设","一段","比如","that","hpp","反馈","fibonacci","通信","node","cpp","{","不仅仅","指令","send","分析","同时","举个","行为","执行","应用","大家","例子","ptr","was","back","quickly","s","wait","眼前","callback","相比","都","肯定","waitables","臂","$","succeeded","像","圈","发出","者","make","cancel","在","命令","minimalactionclient","运行","order","应用层","较长","\"","char","发布者","executing","中","number","local","std","reject","可以","控制","毕竟","goal","还","是","avoid","install","goalhandlefibonacci","(","这","：","rejected","if","这么","logger","好","之后","sendgoaloptions","一下","included","完整","具体","#","这些","aborted","accept","a","进度","同步","opt","error","break","客户端","通信接口","但是","场景","合适","using","spin","response","这个","tros","is","0","方法","minimal","当中","create","随时","/","结束","让","一段时间","名字","有没有","received","类似","server","直到","又","的","up","运动","那","被","2","进度条","多少","到底","整个","一点","namespace","some","&&","由","秘密","后","setup","转圈","可能","多","务器","服务器","options","graph","干什么","i","就此","of","控","over","thread","过","就此结束","遥控","h","模块","取消","度","动","实时","++","当","用到","default","not","msg","装","目标","周期","client","future","哪里","_-","the","。","base","wrappedresult","既然","当前","定义","合成","goalresponse","知道","waiting","iostream","不是","wall","到","一样",":","next","return","placeholders","500","这种","管理","bash","servergoalhandle","accepted","execute","进行","for","-",";","其","竟然","达到","段时间","20","上边","while","订阅","code","<","todo","不","false","客户",")","基于","仔细","之前","一","发现","so","服务","简单","info","其实","explicit","1","什么","part","resultcode","想","底层","介绍","一种","argc","d","nodeoptions","result","解析","分拣","一边","chrono","init","键盘","—","handle","canceled","导航","uuid","with","cancelresponse","机器人","姿态","示例","memory","%","!","[","就是","等","机械","送餐","目的","系统","才能","once","通信模型","收到","另外","根本","一点一点","服务器端","常常","发送","话题","，","9000","有","publish","就","else","main","ok","jacobperron","request","true","class"],"title":"多节点动作通信","title_tokens":["动作","多","通信","节点"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["行为","机器","应用","送货","会","满足","名字","一种","某一","进行","理解","含义","上","另外","我们","实现","动作","分拣","具体","。","完整","流程","键盘","的","这些"," ","机制","—","ros","运动","不仅","某个","智能","常常","那","遥控","，","仅仅","、","并","中","复杂","被","功能","可以","机器人","从","用到","通信","就","很","一个","场景","是","便于","就是","等","需求","不仅仅","也","对","这个","概念","简单","目标","送餐","这么","需要","目的","识别","好","在","这种","管理","系统"],"title":"多节点动作通信","title_tokens":["动作","多","通信","节点"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["命令","机器","哪里","动作","。","现在","机制","过程","开始","当前","每隔","1s","转个","？","可以","知道","还","是","更为","不是","了","这样","到","这","之后","如果","360","一下","告诉"," ","段时间","20","再","进度","、","多少度","旋转","不","一个","使用","合适","需要","信息","当中","30","随时","转","10","想","让","结束","一段时间","有没有","直到","我们","的","没有","假设","一段","运动","比如","并","进度条","多少","反馈","到底","机器人","得","通信","一点","完成","后","指令","转圈","举个","行为","才能","执行","时间","例子","控","表示","眼前","根本","一点一点","发送","，","肯定","度","取消","把","就","ok","像","装","圈","发出","在"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["干什么","如果","机器","执行","想","让","模型","结束","就此","务器","状态","类似","收到","动作","。","一边","又","坐标","的"," ","过程","服务器端","达到","运动","开始","所处","发送","当前","导航","，","中","再","动","实时","反馈","客户","起来","机器人","当","控制","臂","客户端","姿态","整个","通信","就","使用","一个","是","抓取","也","后","服务","这个","机械","就此结束","目标","同时","周期","可能","信息","和","之后","服务器","什么"],"title":"客户端/服务器模型","title_tokens":["客户","服务","模型","客户端","务器","/","服务器"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["命令","先","才能","机器","执行","大家","务器","动作","下","。","的","服务器端","运动","都","发送","只能","，","中","客户","可以","有","机器人","客户端","通信","毕竟","但是","一个","完成","多个","服务","只有","一样","和","服务器"],"title":"一对多通信","title_tokens":["通信","多","一对"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["介绍","一种","进行","我们","动作","。","机制","的","过程","既然","过","action","那","中","，","接口","文件","反馈","同步","定义","有","通信接口","通信","使用","之前","是","也",".","数据"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["命令","应带","请求","底层","应用","会","大家","一种","时","收到","实现","下","动作","。","表示","其","隐藏","机制","的","和"," ","竟然","过程","应用层","来","服务器端","运动","再","上边","话题","发送","，","是不是","发布者","订阅","模块","三个","反馈","客户","发布","有","没错","当","客户端","仔细","基于","通信","一个","使用","动图","是","秘密","发现","就是","还会","两个","也","不是","服务","者","目标","看","其实","周期","调用","务器","服务器"],"title":"由服务和话题合成","title_tokens":["合成","服务","话题","和","由"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_7","text":"相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["程序","一下","运行","相对","我们","动作","。","的","较长","相比","话题","，","并","例程","起来","通信","之前","一","服务","分析","和"],"title":"编程方法","title_tokens":["方法","编程"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_8","text":"$ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_action_cpp server $ ros2 run learning_action_cpp client","text_tokens":["bash","client","server","ros2","run"," ","source","action","local","opt","$","cpp","install","learning","setup",".","tros","/","_"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_9","text":"动作的服务器fibonacci_action_server.cpp： #include <inttypes.h> #include <memory> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO(jacobperron): Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionServer : public rclcpp :: Node { public : using Fibonacci = learning_action_cpp :: action :: Fibonacci ; using GoalHandleFibonacci = rclcpp_action :: ServerGoalHandle < Fibonacci > ; explicit MinimalActionServer ( const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : Node ( \"minimal_action_server\" , options ) { using namespace std :: placeholders ; this -> action_server_ = rclcpp_action :: create_server < Fibonacci > ( this -> get_node_base_interface (), this -> get_node_clock_interface (), this -> get_node_logging_interface (), this -> get_node_waitables_interface (), \"fibonacci\" , std :: bind ( & MinimalActionServer :: handle_goal , this , _1 , _2 ), std :: bind ( & MinimalActionServer :: handle_cancel , this , _1 ), std :: bind ( & MinimalActionServer :: handle_accepted , this , _1 )); } private : rclcpp_action :: Server < Fibonacci >:: SharedPtr action_server_ ; rclcpp_action :: GoalResponse handle_goal ( const rclcpp_action :: GoalUUID & uuid , std :: shared_ptr < const Fibonacci :: Goal > goal ) { RCLCPP_INFO ( this -> get_logger (), \"Received goal request with order %d\" , goal -> order ); ( void ) uuid ; // Let's reject sequences that are over 9000 if ( goal -> order > 9000 ) { return rclcpp_action :: GoalResponse :: REJECT ; } return rclcpp_action :: GoalResponse :: ACCEPT_AND_EXECUTE ; } rclcpp_action :: CancelResponse handle_cancel ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Received request to cancel goal\" ); ( void ) goal_handle ; return rclcpp_action :: CancelResponse :: ACCEPT ; } void execute ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Executing goal\" ); rclcpp :: Rate loop_rate ( 1 ); const auto goal = goal_handle -> get_goal (); auto feedback = std :: make_shared < Fibonacci :: Feedback > (); auto & sequence = feedback -> sequence ; sequence . push_back ( 0 ); sequence . push_back ( 1 ); auto result = std :: make_shared < Fibonacci :: Result > (); for ( int i = 1 ; ( i < goal -> order ) && rclcpp :: ok (); ++ i ) { // Check if there is a cancel request if ( goal_handle -> is_canceling ()) { result -> sequence = sequence ; goal_handle -> canceled ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Canceled\" ); return ; } // Update sequence sequence . push_back ( sequence [ i ] + sequence [ i - 1 ]); // Publish feedback goal_handle -> publish_feedback ( feedback ); RCLCPP_INFO ( this -> get_logger (), \"Publish Feedback\" ); loop_rate . sleep (); } // Check if goal is done if ( rclcpp :: ok ()) { result -> sequence = sequence ; goal_handle -> succeed ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Succeeded\" ); } } void handle_accepted ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { using namespace std :: placeholders ; // this needs to return quickly to avoid blocking the executor, so spin up a new thread std :: thread { std :: bind ( & MinimalActionServer :: execute , this , _1 ), goal_handle }. detach (); } }; // class MinimalActionServer int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); auto action_server = std :: make_shared < MinimalActionServer > (); rclcpp :: spin ( action_server ); rclcpp :: shutdown (); return 0 ; } 动作的客户端fibonacci_action_client.cpp： #include <inttypes.h> #include <memory> #include <string> #include <iostream> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO ( jacobperron ) : Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionClient : public rclcpp::Node { public: using Fibonacci = learning_action_cpp::action::Fibonacci ; using GoalHandleFibonacci = rclcpp_action::ClientGoalHandle<Fibonacci> ; explicit MinimalActionClient ( const rclcpp::NodeOptions & node_options = rclcpp::NodeOptions ()) : Node ( \"minimal_action_client\" , node_options ) , goal_done_ ( false ) { this->client_ptr_ = rclcpp_action::create_client<Fibonacci> ( this->get_node_base_interface () , this->get_node_graph_interface () , this->get_node_logging_interface () , this->get_node_waitables_interface () , \"fibonacci\" ) ; this->timer_ = this->create_wall_timer ( std::chrono::milliseconds ( 500 ) , std::bind ( & MinimalActionClient::send_goal, this )) ; } bool is_goal_done () const { return this->goal_done_ ; } void send_goal () { using namespace std::placeholders ; this->timer_->cancel () ; this->goal_done_ = false ; if ( !this->client_ptr_ ) { RCLCPP_ERROR ( this->get_logger () , \"Action client not initialized\" ) ; } if ( !this->client_ptr_->wait_for_action_server ( std::chrono::seconds ( 10 ))) { RCLCPP_ERROR ( this->get_logger () , \"Action server not available after waiting\" ) ; this->goal_done_ = true ; return ; } auto goal_msg = Fibonacci::Goal () ; goal_msg.order = 10 ; RCLCPP_INFO ( this->get_logger () , \"Sending goal\" ) ; auto send_goal_options = rclcpp_action::Client<Fibonacci>::SendGoalOptions () ; send_goal_options.goal_response_callback = std::bind ( & MinimalActionClient::goal_response_callback, this, _1 ) ; send_goal_options.feedback_callback = std::bind ( & MinimalActionClient::feedback_callback, this, _1, _2 ) ; send_goal_options.result_callback = std::bind ( & MinimalActionClient::result_callback, this, _1 ) ; auto goal_handle_future = this->client_ptr_->async_send_goal ( goal_msg, send_goal_options ) ; } private: rclcpp_action::Client<Fibonacci>::SharedPtr client_ptr_ ; rclcpp::TimerBase::SharedPtr timer_ ; bool goal_done_ ; void goal_response_callback ( std::shared_future<GoalHandleFibonacci::SharedPtr> future ) { auto goal_handle = future.get () ; if ( !goal_handle ) { RCLCPP_ERROR ( this->get_logger () , \"Goal was rejected by server\" ) ; } else { RCLCPP_INFO ( this->get_logger () , \"Goal accepted by server, waiting for result\" ) ; } } void feedback_callback ( GoalHandleFibonacci::SharedPtr, const std::shared_ptr<const Fibonacci::Feedback> feedback ) { RCLCPP_INFO ( this->get_logger () , \"Next number in sequence received: %\" PRId32, feedback->sequence.back ()) ; } void result_callback ( const GoalHandleFibonacci::WrappedResult & result ) { this->goal_done_ = true ; switch ( result.code ) { case rclcpp_action::ResultCode::SUCCEEDED: break ; case rclcpp_action::ResultCode::ABORTED: RCLCPP_ERROR ( this->get_logger () , \"Goal was aborted\" ) ; return ; case rclcpp_action::ResultCode::CANCELED: RCLCPP_ERROR ( this->get_logger () , \"Goal was canceled\" ) ; return ; default: RCLCPP_ERROR ( this->get_logger () , \"Unknown result code\" ) ; return ; } RCLCPP_INFO ( this->get_logger () , \"Result received\" ) ; for ( auto number : result.result->sequence ) { RCLCPP_INFO ( this->get_logger () , \"%\" PRId32, number ) ; } } } ; // class MinimalActionClient int main ( int argc, char ** argv ) { rclcpp::init ( argc, argv ) ; auto action_client = std::make_shared<MinimalActionClient> () ; while ( !action_client->is_goal_done ()) { rclcpp::spin_some ( action_client ) ; } rclcpp::shutdown () ; return 0 ; }","text_tokens":["prid32","include","canceling","needs","void","there","client","minimalactionclient","feedback","future","loop",">","_-","sending","order","the","timer","动作","it","base","]","int","initialized","wrappedresult","\"","detach","char","number","executing","and","blocking","clientgoalhandle","std","reject","goalresponse","waiting","goal","iostream","this","+","avoid","goalhandlefibonacci","wall","(","：","rejected",":","if","sleep","logger","check","return","placeholders","500","next","unknown","by","_","sequences","succeed","servergoalhandle","logging","sendgoaloptions","accepted","execute","for",",","included","-","#",";","minimalactionserver","bind","aborted","seconds"," ","accept","a","while","milliseconds","code","<","todo","false","switch","rclcpp","客户","error",")","goaluuid","break","&","客户端","after","using","sharedptr","sequence","spin","so","response","服务",".","as","is","info","are","0","explicit","minimal","get","1","create","/","update","auto","part","10","resultcode","in","}","executor","argc","*","d","received","server","nodeoptions","result","chrono","init","的","rate","interface","up","argv","action","that","handle","canceled","2","uuid","hpp","with","cancelresponse","available","fibonacci","memory","%","namespace","node","some","const","!","cpp","remove","&&","{","[","=","send","timerbase","to","bool","务器","服务器","options","graph","i","once","of","ptr","was","back","quickly","s","new","over","wait","let","thread","callback","shared","h","'","private","9000","clock","inttypes","++","waitables","publish","push","shutdown","not","default","else","succeeded","msg","main","ok","jacobperron","learning","request","case","string","make","done","async","cancel","public","true","class"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/","text":"零拷贝数据传输 在传统操作系统的数据传输过程中，系统内部会在磁盘、内存、缓存中多次进行数据拷贝，每次都会占用CPU的资源，数据量小的时候还好，随着数据量的增加，CPU的开销也会持续增加，尤其是在机器人图像数据的应用中 ，经常会发生这种问题，导致CPU都在做数据拷贝，没有时间处理其他的应用功能了，直接的感觉就是处理卡顿。 零拷贝技术 针对这种问题，零拷贝技术应运而生。 零拷贝主要的任务就是避免CPU将数据从一块存储拷贝到另外一块存储，避免让CPU做大量的数据拷贝任务，减少不必要的拷贝，或者让别的组件来做这一类简单的数据传输任务，让CPU解脱出来专注于别的任务。这样就可以让系统资源的利用更加有效。 TogetherROS中就提供了灵活、高效的零拷贝功能，可以显著降低大尺寸数据的通信延时和CPU占用，具体有多显著呢，我们不妨进行一个测试。 TogetherROS零拷贝性能测试 我们使用TogetherROS系统内部集成的性能测试工具——performance_test，来评估下开启零拷贝前后的性能差异，这里我们传输的样本数据量是4M。 未开启零拷贝进行数据传输 $ ros2 run performance_test perf_test --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #未开启 开启零拷贝数据传输： $ ros2 run performance_test perf_test --zero-copy --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #开启 好的，测试已经跑完了，我们把结果放到这里，来分析一下。 在这个测试中，关键有四个指标： 时延，也就是消息从发布者到订阅者的传输时间。不开启零拷贝的情况下，平均为0.004912s，开启零拷贝之后，速度快了差不多40倍，平均为0.000180s。 CPU使用率，表示通信活动所占用的CPU时间，大家可以看这个utime指标，开启零拷贝之后时间有显著的提升，消耗CPU的资源少了。 驻留内存，包括通信过程中分配的内存和共享内存，是这个maxrss中的数据，开启零拷贝之后，占用的内存也更少。 样本统计，包括测试中发送、接收以及丢失的消息数量，是这组数据，依然是开启零拷贝之后性能更好。 通过测试，对于大数据通信来讲，零拷贝在CPU消耗、内存占用以及通信延迟抖动方面的性能都会更好。 这里只是便于大家感受零拷贝技术的效果，具体编程中如何使用零拷贝机制呢？ 编程开发 为了方便大家使用，TogetherROS针对零拷贝功能进行了封装，风格类似ROS2中话题通信的接口，还是话题通信一样的流程，我们只需要修改几个函数就可以实现啦。 运行例程 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run hbmem_pubsub talker $ ros2 run hbmem_pubsub listener 代码解析 发布者publisher_hbmem.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" using namespace std :: chrono_literals ; class MinimalHbmemPublisher : public rclcpp :: Node { public : MinimalHbmemPublisher () : Node ( \"minimal_hbmem_publisher\" ), count_ ( 0 ) { // 创建publisher_hbmem，topic为\"topic\"，QOS为KEEPLAST(10)，以及默认的可靠传输 publisher_ = this -> create_publisher_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 ); // 定时器，每隔40毫秒调用一次timer_callback进行消息发送 timer_ = this -> create_wall_timer ( 40 ms , std :: bind ( & MinimalHbmemPublisher :: timer_callback , this )); } private : // 定时器回调函数 void timer_callback () { // 获取要发送的消息 auto loanedMsg = publisher_ -> borrow_loaned_message (); // 判断消息是否可用，可能出现获取消息失败导致消息不可用的情况 if ( loanedMsg . is_valid ()) { // 引用方式获取实际的消息 auto & msg = loanedMsg . get (); // 获取当前时间，单位为us auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()). count (); // 对消息的index和time_stamp进行赋值 msg . index = count_ ; msg . time_stamp = time_now ; // 打印发送消息 RCLCPP_INFO ( this -> get_logger (), \"message: %d\" , msg . index ); publisher_ -> publish ( std :: move ( loanedMsg )); // 注意，发送后，loanedMsg已不可用 // 计数器加一 count_ ++ ; } else { // 获取消息失败，丢弃该消息 RCLCPP_INFO ( this -> get_logger (), \"Failed to get LoanMessage!\" ); } } // 定时器 rclcpp :: TimerBase :: SharedPtr timer_ ; // hbmem publisher rclcpp :: PublisherHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr publisher_ ; // 计数器 size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者subscriber_hbmem.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" class MinimalHbmemSubscriber : public rclcpp :: Node { public : MinimalHbmemSubscriber () : Node ( \"minimal_hbmem_subscriber\" ) { // 创建subscription_hbmem，topic为\"sample\"，QOS为KEEPLAST(10)，以及默认的可靠传输 // 消息回调函数为topic_callback subscription_ = this -> create_subscription_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 , std :: bind ( & MinimalHbmemSubscriber :: topic_callback , this , std :: placeholders :: _1 )); } private : // 消息回调函数 void topic_callback ( const hbmem_pubsub :: msg :: SampleMessage :: SharedPtr msg ) const { // 注意，msg只能在回调函数中使用，回调函数返回后，该消息就会被释放 // 获取当前时间 auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()) . count (); // 计算延时并打印出来 RCLCPP_INFO ( this -> get_logger (), \"msg %d, time cost %dus\" , msg -> index , time_now - msg -> time_stamp ); } // hbmem subscription rclcpp :: SubscriptionHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemSubscriber > ()); rclcpp :: shutdown (); return 0 ; } 接口汇总 我们整理一下，与ROS2中的话题通信相比，TogetherROS带有零拷贝机制的话题通信接口是这样的。 在发布者中，我们可以使用PublisherHbmem来创建一个发布者对象，然后通过create_publisher_hbmem发布数据，而在订阅者中，SubscriptionHbmem用来创建一个订阅者对象，通过 create_subscription_hbmem订阅需要的数据，至于底层如何完成零拷贝的过程，都交给TogetherROS即可。","text_tokens":["机器","工具","速度",">","毫秒","返回","下","int","机制","数据量","过程","操作系统","performance","而","方便","每隔","valid","例程","快","开发","this","cost","这样","共享内存","max","看","内部","或者","丢弃","即可",",","感受","别的","bind","cast"," ","只能","可靠","功能","增加","可用","从","&","一个","使用","minimalhbmemsubscriber","sharedptr","利用","小","since",".","keep","需要","get","数据传输","指标","和","index","talker","不必","引用","}","会","loaned","*","ros2","utime","没有","argv","解脱","丢失","封装","问题","const","这里","完成","使用率","0.004912","便于","回调","也","=","延时","数据","传统","timerbase","倍","降低","以及","to","时间","测试工具","不可","实现","持续","做","表示","消耗","流程","还是","source","整理","为","shared","数据通信","subscriber","为了","private","把","clock","是否","计数器","依然","shutdown","string","并打印","专注","平均","maxrss","对","public","未","include","message","评估","void","打印","代码","timer","]","如何","发生","？","keeplast","qos","了","now","交给","_","完","cpu","活动","接收","占用","关键","针对","run","传输","t","来","效果","subscriptionhbmem","任务","接口","、","组件","发布","rclcpp","epoch","loanmessage","啦","已经","内存","定时","时延","调用","将","30","前后","auto","感觉","10","count","编程","获取","时候","呢","40","我们","尺寸","更好","zero","应运而生","array4m","要","hpp","然后","通信","node","cpp","{","方面","literals","通过","注意","结果","分析","对于","copy","抖动","应用","默认","大家","togetherros","应运","修改","s","赋值","主要","callback","hbmem","相比","都","来讲","minimalhbmempublisher","$","一块","用","开启","make","有效","者","风格","在","last","listener","已","函数","运行","计算","处理","\"","几个","functional","char","发布者","中","local","创建","std","可以","统计","消息","加一","经常","磁盘","是","至于","提升","install","(","这","：","图像","--","if","logger","test","好","之后","开销","操作","publisherhbmem","一下","与","样本","具体","#","释放","move","卡顿","存储","测试","opt","显著","通信接口","于","using","spin","这个","tros","is","更加","0","minimal","只","不必要","create","失败","/","4m","让","0.000180","failed","类似","更少","数据通","的","r","被","namespace","sample","后","直接","setup","可能","多","subscription","差不多","据传","depth","ms","少","大","性能","history","集成","++","loanedmsg","一次","msg","stamp","数量","该","驻留","dus","零","缓存","延迟","。","随着","判断","当前","只是","计数","导致","100","减少","灵活","系统资源","wall","到","出来","一样",":","time","return","placeholders","这种","bash","对象","用来","进行","perf","拷贝到","情况","size","-",";","用率","订阅","<","不","大量",")","topic","单位","带有","试工","简单","info","1","定时器","borrow","拷贝","还好","底层","不多","每次","方式","argc","d","steady","包括","解析","必要","chrono","init","多次","—","runtime","跑","机器人","m","出现","memory","%","资源","!","这组","差异","[","就是","us","共享","所","不妨","系统","samplemessage","其他","实际","pubsub","publisher","另外","分配","reliable","duration","microseconds","汇总","发送","话题","，","提供","一类","有","publish","就","else","main","技术","避免","尤其","放到","四个","高效","class"],"title":"零拷贝数据传输","title_tokens":["传输","数据","零","据传","数据传输","拷贝"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_1","text":"在传统操作系统的数据传输过程中，系统内部会在磁盘、内存、缓存中多次进行数据拷贝，每次都会占用CPU的资源，数据量小的时候还好，随着数据量的增加，CPU的开销也会持续增加，尤其是在机器人图像数据的应用中 ，经常会发生这种问题，导致CPU都在做数据拷贝，没有时间处理其他的应用功能了，直接的感觉就是处理卡顿。","text_tokens":["还好","感觉","机器","开销","应用","每次","会","据传","cpu","操作","进行","占用","时候","时间","其他","缓存","传输","持续","做","。","多次","的","数据量"," ","过程","没有","操作系统","随着","处理","都","，","中","发生","、","卡顿","导致","功能","增加","机器人","问题","经常","资源","磁盘","是","就是","也","内存","小","尤其","这种","了","直接","数据","传统","图像","数据传输","内部","在","拷贝","系统"],"title":"零拷贝数据传输","title_tokens":["传输","数据","零","据传","数据传输","拷贝"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_2","text":"针对这种问题，零拷贝技术应运而生。 零拷贝主要的任务就是避免CPU将数据从一块存储拷贝到另外一块存储，避免让CPU做大量的数据拷贝任务，减少不必要的拷贝，或者让别的组件来做这一类简单的数据传输任务，让CPU解脱出来专注于别的任务。这样就可以让系统资源的利用更加有效。 TogetherROS中就提供了灵活、高效的零拷贝功能，可以显著降低大尺寸数据的通信延时和CPU占用，具体有多显著呢，我们不妨进行一个测试。","text_tokens":["零","。","中","可以","减少","灵活","系统资源","了","这样","这","出来","或者","这种","cpu","占用","进行","拷贝到","针对","传输","具体","别的","来"," ","任务","、","存储","测试","组件","显著","功能","大量","从","于","一个","利用","简单","更加","数据传输","不必要","将","和","拷贝","不必","让","呢","我们","尺寸","必要","的","应运而生","解脱","问题","通信","资源","就是","延时","数据","降低","不妨","多","系统","据传","togetherros","应运","另外","大","做","主要","，","提供","一类","有","就","一块","技术","避免","有效","专注","高效"],"title":"零拷贝技术","title_tokens":["技术","零","拷贝"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#togetherros","text":"我们使用TogetherROS系统内部集成的性能测试工具——performance_test，来评估下开启零拷贝前后的性能差异，这里我们传输的样本数据量是4M。 未开启零拷贝进行数据传输 $ ros2 run performance_test perf_test --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #未开启 开启零拷贝数据传输： $ ros2 run performance_test perf_test --zero-copy --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #开启 好的，测试已经跑完了，我们把结果放到这里，来分析一下。 在这个测试中，关键有四个指标： 时延，也就是消息从发布者到订阅者的传输时间。不开启零拷贝的情况下，平均为0.004912s，开启零拷贝之后，速度快了差不多40倍，平均为0.000180s。 CPU使用率，表示通信活动所占用的CPU时间，大家可以看这个utime指标，开启零拷贝之后时间有显著的提升，消耗CPU的资源少了。 驻留内存，包括通信过程中分配的内存和共享内存，是这个maxrss中的数据，开启零拷贝之后，占用的内存也更少。 样本统计，包括测试中发送、接收以及丢失的消息数量，是这组数据，依然是开启零拷贝之后性能更好。 通过测试，对于大数据通信来讲，零拷贝在CPU消耗、内存占用以及通信延迟抖动方面的性能都会更好。 这里只是便于大家感受零拷贝技术的效果，具体编程中如何使用零拷贝机制呢？","text_tokens":["last","评估","工具","零","速度","下","延迟","。","机制","数据量","过程","performance","如何","发布者","中","只是","？","可以","统计","100","消息","快","是","提升","了","到","：","--","共享内存","max","看","test","好","内部","之后","_","完","cpu","活动","接收","进行","一下","perf","占用","关键","情况","-","样本","传输","run","#","感受","具体","来"," ","效果","用率","订阅","、","测试","不","发布","显著","从","使用","试工","已经","内存","这个","keep","1","时延","数据传输","指标","30","前后","和","4m","拷贝","10","编程","不多","0.000180","会","更少","包括","呢","ros2","我们","40","数据通","更好","utime","zero","的","—","r","array4m","runtime","跑","丢失","m","通信","资源","这里","这组","使用率","0.004912","差异","便于","就是","方面","也","通过","数据","共享","结果","分析","倍","copy","以及","所","对于","抖动","系统","差不多","据传","depth","大家","时间","togetherros","测试工具","少","分配","s","reliable","表示","大","消耗","性能","history","为","都","发送","集成","来讲","，","数据通信","把","有","依然","$","技术","四个","放到","数量","开启","者","驻留","平均","maxrss","未","在"],"title":"TogetherROS零拷贝性能测试","title_tokens":["测试","零","togetherros","性能","拷贝"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_3","text":"为了方便大家使用，TogetherROS针对零拷贝功能进行了封装，风格类似ROS2中话题通信的接口，还是话题通信一样的流程，我们只需要修改几个函数就可以实现啦。","text_tokens":["零","大家","进行","togetherros","类似","针对","函数","ros2","我们","修改","实现","。","流程","的","还是","几个","话题","中","，","接口","为了","方便","功能","可以","封装","通信","就","使用","啦","了","风格","一样","需要","只","拷贝"],"title":"编程开发","title_tokens":["开发","编程"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_4","text":"$ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run hbmem_pubsub talker $ ros2 run hbmem_pubsub listener","text_tokens":["install","talker","opt","bash","setup",".","listener"," ","tros","source","$","ros2","run","pubsub","hbmem","/","local","_"],"title":"运行例程","title_tokens":["运行","例程"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_5","text":"发布者publisher_hbmem.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" using namespace std :: chrono_literals ; class MinimalHbmemPublisher : public rclcpp :: Node { public : MinimalHbmemPublisher () : Node ( \"minimal_hbmem_publisher\" ), count_ ( 0 ) { // 创建publisher_hbmem，topic为\"topic\"，QOS为KEEPLAST(10)，以及默认的可靠传输 publisher_ = this -> create_publisher_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 ); // 定时器，每隔40毫秒调用一次timer_callback进行消息发送 timer_ = this -> create_wall_timer ( 40 ms , std :: bind ( & MinimalHbmemPublisher :: timer_callback , this )); } private : // 定时器回调函数 void timer_callback () { // 获取要发送的消息 auto loanedMsg = publisher_ -> borrow_loaned_message (); // 判断消息是否可用，可能出现获取消息失败导致消息不可用的情况 if ( loanedMsg . is_valid ()) { // 引用方式获取实际的消息 auto & msg = loanedMsg . get (); // 获取当前时间，单位为us auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()). count (); // 对消息的index和time_stamp进行赋值 msg . index = count_ ; msg . time_stamp = time_now ; // 打印发送消息 RCLCPP_INFO ( this -> get_logger (), \"message: %d\" , msg . index ); publisher_ -> publish ( std :: move ( loanedMsg )); // 注意，发送后，loanedMsg已不可用 // 计数器加一 count_ ++ ; } else { // 获取消息失败，丢弃该消息 RCLCPP_INFO ( this -> get_logger (), \"Failed to get LoanMessage!\" ); } } // 定时器 rclcpp :: TimerBase :: SharedPtr timer_ ; // hbmem publisher rclcpp :: PublisherHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr publisher_ ; // 计数器 size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者subscriber_hbmem.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" class MinimalHbmemSubscriber : public rclcpp :: Node { public : MinimalHbmemSubscriber () : Node ( \"minimal_hbmem_subscriber\" ) { // 创建subscription_hbmem，topic为\"sample\"，QOS为KEEPLAST(10)，以及默认的可靠传输 // 消息回调函数为topic_callback subscription_ = this -> create_subscription_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 , std :: bind ( & MinimalHbmemSubscriber :: topic_callback , this , std :: placeholders :: _1 )); } private : // 消息回调函数 void topic_callback ( const hbmem_pubsub :: msg :: SampleMessage :: SharedPtr msg ) const { // 注意，msg只能在回调函数中使用，回调函数返回后，该消息就会被释放 // 获取当前时间 auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()) . count (); // 计算延时并打印出来 RCLCPP_INFO ( this -> get_logger (), \"msg %d, time cost %dus\" , msg -> index , time_now - msg -> time_stamp ); } // hbmem subscription rclcpp :: SubscriptionHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["include","message","void","打印","dus",">","已","毫秒","函数","返回","timer","]","int","计算","\"","functional","char","发布者","判断","当前","计数","中","每隔","创建","导致","valid","std","keeplast","消息","qos","加一","this","cost","wall","(","：",":","if","出来","time","now","logger","return","placeholders","_","丢弃","进行","publisherhbmem",",","情况","size","-","传输","#",";","t","释放","bind","cast"," ","move","subscriptionhbmem","只能","订阅","<","可靠","发布","rclcpp",")","topic","可用","&","epoch","loanmessage","单位","minimalhbmemsubscriber","使用","using","sharedptr","spin","定时",".","since","is","info","0","get","minimal","1","调用","定时器","create","失败","/","borrow","index","auto","和","count","10","引用","}","failed","会","获取","loaned","方式","argc","d","steady","*","40","chrono","init","的","argv","要","被","hpp","出现","memory","%","namespace","node","sample","!","cpp","const","{","回调","[","us","=","literals","后","延时","注意","timerbase","以及","to","可能","subscription","samplemessage","默认","实际","时间","pubsub","ms","publisher","不可","duration","microseconds","赋值","callback","hbmem","为","shared","发送","，","subscriber","private","minimalhbmempublisher","clock","++","是否","loanedmsg","计数器","publish","shutdown","一次","就","else","msg","main","用","stamp","string","该","并打印","make","者","对","public","在","class"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_6","text":"我们整理一下，与ROS2中的话题通信相比，TogetherROS带有零拷贝机制的话题通信接口是这样的。 在发布者中，我们可以使用PublisherHbmem来创建一个发布者对象，然后通过create_publisher_hbmem发布数据，而在订阅者中，SubscriptionHbmem用来创建一个订阅者对象，通过 create_subscription_hbmem订阅需要的数据，至于底层如何完成零拷贝的过程，都交给TogetherROS即可。","text_tokens":["底层","对象","用来","零","publisherhbmem","一下","togetherros","即可","publisher","ros2","与","我们","。","机制","的","来"," ","过程","整理","subscriptionhbmem","而","相比","hbmem","如何","都","话题","发布者","中","接口","，","订阅","创建","发布","可以","然后","通信接口","通信","使用","一个","带有","完成","至于","是","这样","通过","数据","者","需要","交给","create","subscription","在","拷贝","_"],"title":"接口汇总","title_tokens":["汇总","接口"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/","text":"分布式通信配置 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如在这款机器人系统中，就有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用旭日派作为控制器，主要实现传感器驱动、电机控制、AI应用等功能，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个计算平台之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过TogehterROS都已经为我们准备好了，我们只需要在每一个计算上配置好TogehterROS或者ROS2的环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下分布式系统的魅力。 分布式网络搭建 旭日派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function # 旭日派端 $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function # PC端 神奇的事情就这样发生了，旭日X3派上安装的是TogetherROS，我的电脑上安装的是ROS2，他们只要处于同一网络中，就可以实现通信了，感觉就像在一个电脑里一样。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和旭日X3派端中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 话题分布式通信 之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 以话题通信为例，旭日派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串，我们看下效果如何。 $ ros2 run learning_topic_cpp talker # 旭日派端 $ ros2 run learning_topic_cpp listener # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，我们几乎不需要任何配置，代码也不需要做任何修改，一切都会变得如此轻松。","text_tokens":["模式","命令","作为","机器","变化","中有","listener","组成","一句","事情","每",">","运行","代码","id","局域","无法","原本","能力","下","。","互联","计算","适合","机制","world","频繁","减轻","处理","如何","发布者","中","这款","function","发生","方便","虚拟","复杂","？","平台","电机","例程","可以","一切","控制","之一","放","毕竟","看上去","同一","派端","经常","确保","不同","开发","还","是","典型","传感","两个","多个","两者","不是","了","字符","这样","分布式","到","这","带来","：","一样","而是","看","好","或者","这种","ai","_","attention","如果","个","布式","位于","即可","一下","一系","情况","端","run","繁多","传输","感受","具体","#","我","请","这些","相互"," ","效果","框架","放在","任务","上边","字符串","卡顿","订阅","、","<","远程","准备","不","测试","节点","rclcpp","功能","发布","一系列","小组","topic","压力","togehterros","配置","环境","神奇","一个","魅力","使用","连接","互通","之前","一","桥接","啦","轻松","则","已经","小","笔记本","your","计算机","里","pc","需要","minimal","方法","信息","只","笔记本电脑","将","和","什么","talker","感觉","只要","电脑","会","驱动","几乎","x3","类似","呢","上","体积","ros2","我们","的","拆解","没有","运动","比如","之间","以","不够","并","计算能力","全都","网络","机器人","出现","挺","搭建","并且","通信","问题","资源","cpp","分布式系统","叫","完全","完成","由","系列","就是","等","也","后","=","直接","数据","监控","下来","所","可能","为例","多","非常","打通","系统","member","任何","才能","应用","控制器","大家","实际","此外","他们","togetherros","希望","publisher","你","如","分配","旭日","局域网","修改","岂","实现","做","各种","变得","消耗","分组","上去","接下来","笔记","domain","主要","ros","为","同一个","智能","都","话题","，","提供","感器","subscriber","采用","安装","派","带领","接下","起来","加入","有","虚拟机","比较","编写","是否","任务分配","$","用到","如此","算机","就","分布","传感器","有点","export","结构","看上","用","像","简而言之","没","learning","处于","遇到","不过","较","者","命令行","examples","而言","hello","于是","局域网络","在","很多"],"title":"分布式通信配置","title_tokens":["分布式","布式","通信","配置","分布"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。","text_tokens":["如果","机器","布式","会","情况","运行","上","分配","岂","实现","繁多","能力","。","计算","的","这些","拆解","减轻"," ","放在","处理","任务","智能","不够","，","卡顿","中","、","计算能力","？","平台","功能","全都","可以","机器人","出现","压力","多","任务分配","算机","经常","一个","分布","分布式系统","就是","等","多个","不是","遇到","分布式","计算机","到","这","里","将","系统"],"title":"分布式通信配置","title_tokens":["分布式","布式","通信","配置","分布"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_2","text":"什么叫分布式？ 机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如在这款机器人系统中，就有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用旭日派作为控制器，主要实现传感器驱动、电机控制、AI应用等功能，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个计算平台之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过TogehterROS都已经为我们准备好了，我们只需要在每一个计算上配置好TogehterROS或者ROS2的环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下分布式系统的魅力。","text_tokens":["作为","机器","变化","组成","每","原本","下","。","计算","适合","减轻","中","这款","方便","复杂","？","平台","电机","可以","控制","之一","放","毕竟","看上去","不同","开发","还","是","典型","传感","两个","了","分布式","到","这","好","或者","这种","ai","布式","位于","传输","感受","这些","相互"," ","框架","任务","上边","、","远程","准备","不","节点","功能","压力","togehterros","配置","环境","一个","魅力","一","已经","小","笔记本","计算机","需要","信息","只","笔记本电脑","将","什么","电脑","驱动","上","体积","ros2","我们","的","运动","比如","之间","机器人","挺","并且","通信","资源","完全","叫","分布式系统","由","就是","等","数据","监控","下来","可能","多","非常","系统","任何","应用","控制器","大家","此外","分配","旭日","实现","做","各种","消耗","上去","接下来","笔记","主要","为","都","，","感器","采用","派","带领","接下","起来","有","比较","算机","就","分布","传感器","有点","结构","看上","不过","较","于是","在"],"title":"分布式通信","title_tokens":["通信","分布式","布式","分布"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_3","text":"旭日派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function # 旭日派端 $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function # PC端 神奇的事情就这样发生了，旭日X3派上安装的是TogetherROS，我的电脑上安装的是ROS2，他们只要处于同一网络中，就可以实现通信了，感觉就像在一个电脑里一样。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["模式","命令","中有","事情","局域","无法","能力","。","互联","计算","中","发生","function","虚拟","平台","？","可以","同一","派端","确保","是","两个","了","这样","带来","到","这","一样","而是","attention","_","如果","个","一下","端","run","具体","#","请","我"," ","效果","不","测试","rclcpp","小组","配置","神奇","使用","一个","连接","互通","桥接","已经","计算机","pc","里","需要","minimal","将","和","什么","感觉","只要","电脑","会","x3","呢","上","ros2","我们","的","之间","并","网络","通信","问题","完成","也","后","直接","下来","所","打通","member","他们","希望","togetherros","publisher","你","如","旭日","局域网","修改","实现","做","分组","接下来","为","同一个","都","话题","，","subscriber","安装","派","接下","虚拟机","$","算机","就","用","像","简而言之","处于","不过","命令行","examples","而言","局域网络","在","很多"],"title":"分布式网络搭建","title_tokens":["网络","分布式","布式","搭建","分布"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_4","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和旭日X3派端中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["才能","如果","电脑","一句","即可",">","类似","x3","id","无法","旭日","ros2","我们","分配","实现","。","分组","计算","机制","的"," ","domain","ros","同一个","中","提供","，","<","加入","可以","小组","$","问题","通信","同一","就","算机","一个","派端","配置","不同","两者","则","没","了","=","处于","这样","your","计算机","到","：","一样","将","和","export","在","_"],"title":"分布式网络分组","title_tokens":["分组","网络","分布式","布式","分布"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_5","text":"之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 以话题通信为例，旭日派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串，我们看下效果如何。 $ ros2 run learning_topic_cpp talker # 旭日派端 $ ros2 run learning_topic_cpp listener # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，我们几乎不需要任何配置，代码也不需要做任何修改，一切都会变得如此轻松。","text_tokens":["作为","机器","listener","代码","下","。","world","频繁","如何","发布者","中","？","例程","可以","一切","派端","开发","字符","了","分布式","看","好","_","布式","一系","情况","端","run","#"," ","效果","字符串","订阅","不","测试","发布","一系列","topic","配置","使用","之前","啦","轻松","pc","方法","需要","talker","电脑","会","几乎","类似","呢","ros2","我们","的","没有","网络","机器人","通信","问题","cpp","系列","也","直接","为例","任何","实际","旭日","修改","做","变得","ros","都","话题","，","派","编写","是否","$","用到","如此","分布","learning","者","hello","以","在"],"title":"话题分布式通信","title_tokens":["分布式","布式","通信","分布","话题"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/","text":"数字输入与输出 数字输入与输出是最常用的一种外设通信方式，虽然每一个端口只有0和1两种状态，但却可以组合出各种各样的变化。 数字输入与输出原理 数字输入与输出，也称为通用输入输出，全称是General-purpose input/output，大部分情况下，我们都会用简称GPIO GPIO的功能，主要是指这个管脚可以作为数字信号的输入或者输出使用，到底是输入还是输出呢，这需要我们使用系统寄存器来进行配置。 当GPIO被设置为输入模式时，就可以读取这个管脚上的电平高低，从而实现读取外部信号的功能，比如外部按键的信号，就是这样读取的。 当GPIO被设置为输出模式时，我们就可以主动改变管脚的电平高低了，这样就能通过电平的变化，控制外部的设备，比如点亮或者熄灭一个LED灯。 除此之外，一些IO口还可以配置成其他功能，比如PWM输出，串口通信等等。 关于旭日X3派的管脚定义，大家可以参考这张图，他会显示每个管脚具体可以实现什么功能。 这里需要说明一点，旭日X3派的管脚序号定义有三种编码方式： 第一种就是Board编码，这种就是按照主板上管脚排针编号，分别对应1~40号排针。 第二种就是BCM编码，这种方式是参考 Broadcom SOC 的通道编号，侧重CPU寄存器，在使用BCM库或者使用python编程时，常采用的一种编码方式。 第三种就是X3编码，可以理解为是旭日X3派自己的编码方式，在使用旭日派自己的驱动库编程时，会使用到这种编码。 大家在后续编程开发中，需要结合函数接口的说明，使用对应的引脚编号，不然可能会出现意料之外的问题。 引脚复用配置工具 虽然从硬件上看，扩展出来的引脚只有40个，不过大部分引脚还可以配置成多种功能，这样延伸出来变化可就多了，那如何配置引脚的不同功能呢？ 我们可以使用旭日X3派中提供的srpi-config工具进行配置。 直接在终端中输入这个指令，就可以看到这样的窗口，okay配置对应管脚为专用功能，disabled配置对应管脚为GPIO模式，按照自己的需要进行配置即可，配置完成后重启才会生效。 了解了GPIO的概念，接下来我们就要开始编程啦。 数字输入编程 首先我们来看下最基本的数字输入测试，读取一个按键的状态。 硬件接线 我们将按键的一边连接到旭日X3派的38号引脚上，这是一个GPIO的接口，另一边连接到39号引脚，也就是GND。 原理很简单，按键没按下时，导线是断开的，GPIO是默认的状态，按键按下后，导线就会导通，GPIO的状态变成了GND。 这样，我们就可以通过电平的变化，知道按键的状态啦。 运行例程 我们不妨来运行一下，看下实际效果是不是这样。 $ sudo python3 simple_input.py 我们将一个按键开关接到对应的管脚上， 然后连接到旭日X3PI当中，运行刚才的程序。之后我们按下或是松开按键时，他都会打印出对应的电平变化。 按下显示的就是LOW，也就是低电平，松开就是HIGH，也就是高电平。 代码解析 数字输入的功能实现啦，我们来看下代码是如何实现的。 simple_input.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 input_pin = 38 # BOARD 编码 38 def main (): prev_value = None # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输入模式 GPIO . setup ( input_pin , GPIO . IN ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : # 读取管脚电平 value = GPIO . input ( input_pin ) if value != prev_value : if value == GPIO . HIGH : value_str = \"HIGH\" else : value_str = \"LOW\" print ( \"Value read from pin {} : {} \" . format ( input_pin , value_str )) prev_value = value time . sleep ( 1 ) finally : GPIO . cleanup () if __name__ == '__main__' : main () 我们在Python中需要引入X3Pi的GPIO库，从而使用对应的GPIO功能。 主函数里首先需要定义了一个变量来存储这个管脚的电平信号。 进行初始化，设置管脚的编码模式为BOARD模式，之后定义输入用的管脚，这里使用的是BOARD编码，因为他是第38个管脚，所以为38号。 之后的话就会进入到循环当中，这样的一个函数就可以读出当前的电平值。 没有按下按键的时候，38管脚和GND是断开的，他就是高电平，按下按键时，就和GND导通了，这个管脚就会编程低电平。 如果电平值和上一次存储的不一致，后面的判断就会判断出是升高还是降低，最后会把结果打印出来。 松开按键时同理。 数字输出编程 GPIO不止有输入功能，还有输出功能，大家应该经常看到电子设别上的LED灯吧，这就是典型的IO输出控制的设备，我们也来试一试。 硬件接线 我们将一个LED灯的正极连接到了2号引脚，这是5V电源，用来给LED供电的，不过LED电阻小，为了不至于烧坏，我们最好还是在电路中串联一个电阻来限制电流大小。 接下来，当LED的负极接到GND，也就是电源的0V上时，LED两边会因为有电势差而被点亮；当LED的负极也连接到高电平，也就是5V的时候，会因为两边没有电势差，也就不会被点亮。 这个负极的电平信号我们就用GPIO来输出，所以我们把LED的负极连接到任意的GPIO引脚上，比如38号，将这个引脚设置为输出模式，当输出高电平时，灯就会熄灭，输出低电平，灯就会被点亮。 把这两个动作放到一个循环中，就可以实现闪烁的功能啦。 运行示例程序 快来运行例程试一试吧，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行程序，就可以看到这个LED就会开始闪烁了。 $ sudo python3 simple_input.py 代码解析 simple_out.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 output_pin = 38 # BOARD 编码 38 def main (): # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输出模式，并且初始化为高电平 GPIO . setup ( output_pin , GPIO . OUT , initial = GPIO . HIGH ) # 记录当前管脚状态 curr_value = GPIO . HIGH print ( \"Starting demo now! Press CTRL+C to exit\" ) try : # 间隔1秒时间，循环控制LED灯亮灭 while True : time . sleep ( 1 ) GPIO . output ( output_pin , curr_value ) curr_value ^= GPIO . HIGH finally : GPIO . cleanup () if __name__ == '__main__' : main () 数字输入与输出集成 学习了GPIO的输入与输出功能后，我们就可以做一些自动化的功能了。 硬件接线 比如我们同时连接一个按键和LED灯，尝试实现按键被按下，灯被点亮，松开，灯熄灭，这样的功能。 运行示例程序 我们通过这个例程来试一试效果如何？ $ sudo python3 button_led.py 我们来看一下具体的操作，同样的，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。按下按键后，就可以看到LED被点亮了，松开之后，LED就熄灭了。 代码解析 button_led.py #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道： # 36号作为输出，可以点亮一个LED # 38号作为输入，可以接一个按钮 led_pin = 36 # BOARD 编码 36 but_pin = 38 # BOARD 编码 38 # 禁用警告信息 GPIO . setwarnings ( False ) def main (): prev_value = None # Pin Setup: GPIO . setmode ( GPIO . BOARD ) # BOARD pin-numbering scheme GPIO . setup ( led_pin , GPIO . OUT ) # LED pin set as output GPIO . setup ( but_pin , GPIO . IN ) # Button pin set as input # Initial state for LEDs: GPIO . output ( led_pin , GPIO . LOW ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : curr_value = GPIO . input ( but_pin ) if curr_value != prev_value : GPIO . output ( led_pin , curr_value ) prev_value = curr_value print ( \"Outputting {} to Pin {} \" . format ( curr_value , led_pin )) time . sleep ( 1 ) finally : GPIO . cleanup () # cleanup all GPIO if __name__ == '__main__' : main () 基本的配置还是一样的，引入基本的库，然后设置为BOARD模式，然后初始化两个管脚，一个用来读取按键的通断，一个用来控制LED的亮灭，之后只需要判断按键的状态来做出对应的控制LED的动作就可以了。","text_tokens":["变化","或是","串口","工具","每","循环","按下","输入","下","动作","重启","board","而","第二种","高电平","例程","最","快","import","开发","典型","这样","概念","看","sleep","接线","同样","或者","all","程序","个","curr","general","即可",",","大部分","主板","两种"," ","号","所以","电子","功能","实物","从","外设","一个","使用","除此之外","小","主",".","后续","引入","里","需要","信息","和","主动","broadcom","okay","in","}","会","电平","状态","state","simple","没有","5v","是不是","input","改变","并且","问题","很","这里","完成","最后","看到","也","=","只有","侧重","降低","to","读出","时间","时","理解","一些","实现","setwarnings","做","setmode","二种","还是","接下来","bcm","为","config","设备","'","输出","为了","采用","把","来看","之外","尝试","led","；","没","str","不过","python3","模式","打印","low","36","不然","python","代码","外部","srpi","x3pi","high","开始","如何","value","一致","接","？","试一试","try","不同","+","熄灭","两个","了","now","按键","_","通用","如果","cpu","高低","等等","编码方式","分别","来","引脚","专用","效果","接到","usr","按钮","扩展","接口","会导通","__","0v","还有","连接","啦","设置","cleanup","第三","as","灭","将","gpio","各样","意料之外","首先","开关","同理","编程","驱动","env","时候","限制","呢","关于","上","40","我们","间隔","管脚","button","多种","比如","然后","通信","成","初始","{","排针","通过","指令","结果","点亮","同时","下来","库","大家","另一边","默认","prev","松开","旭日","通道","出是","各种","指","c","警告","主要","都","导通","from","窗口","两边","派","$","用","数字信号","电阻","在","print","但","函数","运行","name","才","禁用","数字","按","\"","中","后面","做出","可以","原理","电势差","控制","进入","经常","还","是","这是","至于","(","这","上时","：","亮","disabled","if","initial","之后","设别","口","操作","一下","正极","不会","与","具体","#","第","out","set","终端","测试","存储","bin","任意","给","这个","gnd","0","的话","当中","只","可","/","第一种","x3","烧坏","的","py","第二","那","被","2","到底","def","常用","一点","自动","变量","后","直接","setup","soc","sudo","基本","因为","可能","多","39","自动化","press","按照","~","pwm","生效","集成","不至于","初始化","当","38","大小","串联","一次","output","硬件","exit","pin","他会","作为","每个","三种","通断","部分","了解","电路","。","format","常","灯亮","当前","判断","各种各样","定义","知道","除此","编号","第三种","numbering","不是","到","序号","负极","出来",":","电源","time","一样","这种","自己","灯","用来","学习","进行","for","情况","-","导线","全称","值","编码","^","简称","最好","端口","寄存","虽然","while","不","低电平","false","参考",")","io","配置","大部","从而","scheme","简单","1","显示","升高","什么","信号","他","就要","一种","方式","purpose","电流","读取","供电","输入输出","结合","闪烁","leds","延伸","组合","刚才","一边","解析","变成","断开","出现","示例","!","就是","能","电势","hobot","不妨","称为","却","系统","对应","其他","实际","吧","张图","说明","read","不止","记录","应该","，","提供","demo","寄存器","第一","接下","starting","有","finally","实际效果","outputting","就","none","else","main","放到","秒","复用","意料","ctrl","but","出","true"],"title":"数字输入与输出","title_tokens":["输入","与","输出","数字"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_1","text":"数字输入与输出是最常用的一种外设通信方式，虽然每一个端口只有0和1两种状态，但却可以组合出各种各样的变化。","text_tokens":["变化","但","一种","方式","每","状态","与","输入","两种","组合","。","各种","的","数字","端口","虽然","，","输出","各种各样","最","可以","外设","常用","通信","一个","是","出","只有","0","1","和","却","各样"],"title":"数字输入与输出","title_tokens":["输入","与","输出","数字"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_2","text":"数字输入与输出，也称为通用输入输出，全称是General-purpose input/output，大部分情况下，我们都会用简称GPIO GPIO的功能，主要是指这个管脚可以作为数字信号的输入或者输出使用，到底是输入还是输出呢，这需要我们使用系统寄存器来进行配置。 当GPIO被设置为输入模式时，就可以读取这个管脚上的电平高低，从而实现读取外部信号的功能，比如外部按键的信号，就是这样读取的。 当GPIO被设置为输出模式时，我们就可以主动改变管脚的电平高低了，这样就能通过电平的变化，控制外部的设备，比如点亮或者熄灭一个LED灯。 除此之外，一些IO口还可以配置成其他功能，比如PWM输出，串口通信等等。 关于旭日X3派的管脚定义，大家可以参考这张图，他会显示每个管脚具体可以实现什么功能。 这里需要说明一点，旭日X3派的管脚序号定义有三种编码方式： 第一种就是Board编码，这种就是按照主板上管脚排针编号，分别对应1~40号排针。 第二种就是BCM编码，这种方式是参考 Broadcom SOC 的通道编号，侧重CPU寄存器，在使用BCM库或者使用python编程时，常采用的一种编码方式。 第三种就是X3编码，可以理解为是旭日X3派自己的编码方式，在使用旭日派自己的驱动库编程时，会使用到这种编码。 大家在后续编程开发中，需要结合函数接口的说明，使用对应的引脚编号，不然可能会出现意料之外的问题。","text_tokens":["模式","作为","变化","串口","每个","不然","三种","python","函数","外部","输入","部分","下","。","board","常","数字","第二种","中","定义","可以","除此","控制","编号","第三种","开发","还","是","熄灭","了","这样","到","这","序号","：","按键","或者","这种","自己","通用","灯","口","cpu","general","高低","进行","等等","情况","大部分","-","主板","与","编码方式","全称","具体","编码","分别","简称","来","引脚"," ","号","寄存","接口","功能","参考","io","配置","大部","使用","一个","从而","除此之外","设置","这个","第三","后续","需要","1","显示","主动","/","gpio","什么","意料之外","信号","broadcom","第一种","编程","会","驱动","方式","purpose","电平","一种","读取","x3","输入输出","呢","上","关于","40","我们","结合","管脚","的","第二","比如","被","input","到底","改变","出现","通信","一点","问题","这里","成","就是","也","能","排针","通过","soc","侧重","点亮","可能","称为","系统","对应","其他","库","大家","时","理解","旭日","张图","一些","实现","说明","按照","通道","指","~","pwm","二种","还是","主要","bcm","为","都","设备","，","输出","寄存器","采用","第一","派","之外","有","当","led","就","用","output","数字信号","意料","他会","在"],"title":"数字输入与输出原理","title_tokens":["原理","与","数字","输入","输出"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_3","text":"虽然从硬件上看，扩展出来的引脚只有40个，不过大部分引脚还可以配置成多种功能，这样延伸出来变化可就多了，那如何配置引脚的不同功能呢？ 我们可以使用旭日X3派中提供的srpi-config工具进行配置。 直接在终端中输入这个指令，就可以看到这样的窗口，okay配置对应管脚为专用功能，disabled配置对应管脚为GPIO模式，按照自己的需要进行配置即可，配置完成后重启才会生效。 了解了GPIO的概念，接下来我们就要开始编程啦。","text_tokens":["模式","变化","工具","输入","部分","了解","才","。","重启","srpi","开始","如何","中","？","可以","不同","还","了","这样","概念","出来","disabled","看","自己","个","进行","即可","大部分","-","引脚"," ","专用","终端","虽然","扩展","功能","从","配置","大部","使用","啦","这个","需要","可","gpio","okay","编程","就要","会","x3","呢","上","40","我们","管脚","延伸","的","多种","那","成","完成","看到","后","直接","只有","指令","下来","多","对应","旭日","按照","接下来","生效","为","config","，","提供","窗口","派","接下","就","硬件","不过","在"],"title":"引脚复用配置工具","title_tokens":["复用","配置","引脚","工具"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_4","text":"首先我们来看下最基本的数字输入测试，读取一个按键的状态。","text_tokens":["下","测试","。","来看","最","的","按键","数字","基本","状态","读取","一个","，","输入","我们","首先"],"title":"数字输入编程","title_tokens":["输入","数字","编程"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_5","text":"我们将按键的一边连接到旭日X3派的38号引脚上，这是一个GPIO的接口，另一边连接到39号引脚，也就是GND。 原理很简单，按键没按下时，导线是断开的，GPIO是默认的状态，按键按下后，导线就会导通，GPIO的状态变成了GND。 这样，我们就可以通过电平的变化，知道按键的状态啦。","text_tokens":["39","变化","默认","另一边","电平","状态","x3","时","按下","上","旭日","我们","导线","下","一边","。","的","引脚","号"," ","按","变成","，","接口","会导通","派","断开","可以","原理","知道","38","就","很","一个","连接","是","这是","啦","就是","也","没","后","了","gnd","这样","到","通过","简单","将","按键","gpio"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_6","text":"我们不妨来运行一下，看下实际效果是不是这样。 $ sudo python3 simple_input.py 我们将一个按键开关接到对应的管脚上， 然后连接到旭日X3PI当中，运行刚才的程序。之后我们按下或是松开按键时，他都会打印出对应的电平变化。 按下显示的就是LOW，也就是低电平，松开就是HIGH，也就是高电平。","text_tokens":["程序","他","变化","或是","打印","对应","low","之后","会","实际","一下","电平","时","运行","按下","松开","上","旭日","我们","管脚","下","刚才","。","simple","来","的","效果"," ","接到","py","x3pi","high","都","，","是不是","高电平","低电平","input","然后","$","实际效果","一个","连接","就是","也","不是","出","这样",".","到","sudo","python3","看","显示","不妨","当中","将","按键","开关","_"],"title":"运行例程","title_tokens":["运行","例程"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_7","text":"数字输入的功能实现啦，我们来看下代码是如何实现的。 simple_input.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 input_pin = 38 # BOARD 编码 38 def main (): prev_value = None # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输入模式 GPIO . setup ( input_pin , GPIO . IN ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : # 读取管脚电平 value = GPIO . input ( input_pin ) if value != prev_value : if value == GPIO . HIGH : value_str = \"HIGH\" else : value_str = \"LOW\" print ( \"Value read from pin {} : {} \" . format ( input_pin , value_str )) prev_value = value time . sleep ( 1 ) finally : GPIO . cleanup () if __name__ == '__main__' : main () 我们在Python中需要引入X3Pi的GPIO库，从而使用对应的GPIO功能。 主函数里首先需要定义了一个变量来存储这个管脚的电平信号。 进行初始化，设置管脚的编码模式为BOARD模式，之后定义输入用的管脚，这里使用的是BOARD编码，因为他是第38个管脚，所以为38号。 之后的话就会进入到循环当中，这样的一个函数就可以读出当前的电平值。 没有按下按键的时候，38管脚和GND是断开的，他就是高电平，按下按键时，就和GND导通了，这个管脚就会编程低电平。 如果电平值和上一次存储的不一致，后面的判断就会判断出是升高还是降低，最后会把结果打印出来。 松开按键时同理。","text_tokens":["模式","print","low","打印","循环","python","name","代码","函数","按下","输入","下","。","format","board","数字","x3pi","\"","high","如何","value","当前","一致","中","判断","高电平","后面","定义","可以","编号","try","进入","import","是","+","了","(","这样","到","：",":","if","sleep","time","now","出来","之后","按键","_","如果","个","进行",",","#","编码","第","值","来","usr"," ","号","所以","while","__","存储","低电平","不","bin","功能",")","使用","一个","从而","啦","设置","cleanup","主",".","这个","as","引入","gnd","里","需要","1","的话","当中","升高","和","/","gpio","首先","信号","他","同理","编程","in","}","会","env","电平","时候","读取","上","我们","管脚","simple","的","没有","py","input","断开","def","在","!","这里","初始","{","变量","最后","就是","=","setup","结果","因为","hobot","降低","to","读出","对应","库","prev","press","时","松开","实现","通道","read","c","出是","setmode","还是","为","，","demo","'","from","导通","初始化","把","starting","来看","38","finally","一次","就","none","else","main","用","硬件","str","exit","pin","python3","ctrl","true"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_8","text":"GPIO不止有输入功能，还有输出功能，大家应该经常看到电子设别上的LED灯吧，这就是典型的IO输出控制的设备，我们也来试一试。","text_tokens":["设别","灯","大家","吧","上","输入","我们","。","不止","的","来","应该","电子","设备","，","输出","功能","有","试一试","io","还有","控制","led","经常","就是","典型","看到","也","这","gpio"],"title":"数字输出编程","title_tokens":["输出","数字","编程"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_9","text":"我们将一个LED灯的正极连接到了2号引脚，这是5V电源，用来给LED供电的，不过LED电阻小，为了不至于烧坏，我们最好还是在电路中串联一个电阻来限制电流大小。 接下来，当LED的负极接到GND，也就是电源的0V上时，LED两边会因为有电势差而被点亮；当LED的负极也连接到高电平，也就是5V的时候，会因为两边没有电势差，也就不会被点亮。 这个负极的电平信号我们就用GPIO来输出，所以我们把LED的负极连接到任意的GPIO引脚上，比如38号，将这个引脚设置为输出模式，当输出高电平时，灯就会熄灭，输出低电平，灯就会被点亮。 把这两个动作放到一个循环中，就可以实现闪烁的功能啦。","text_tokens":["模式","循环","动作","电路","。","而","中","高电平","可以","电势差","至于","这是","熄灭","两个","了","到","负极","上时","这","电源","灯","用来","正极","不会","来","引脚","号","最好"," ","接到","所以","0v","低电平","功能","一个","连接","任意","给","啦","小","设置","gnd","这个","将","gpio","信号","会","电流","电平","限制","供电","时候","上","闪烁","我们","烧坏","的","5v","没有","比如","被","2","就是","也","电势","点亮","因为","下来","时","实现","还是","接下来","为","，","不至于","输出","为了","两边","把","接下","有","当","38","大小","串联","led","就","；","用","放到","不过","电阻","在"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_10","text":"快来运行例程试一试吧，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行程序，就可以看到这个LED就会开始闪烁了。 $ sudo python3 simple_input.py","text_tokens":["程序","会","吧","运行","闪烁","刚才","按照","。","simple","来","的"," ","py","x3pi","开始","，","input","例程","实物","试一试","然后","可以","快","$","led","就","连接","完成","看到","了","设置","这个",".","到","sudo","python3","将","_"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_11","text":"simple_out.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 output_pin = 38 # BOARD 编码 38 def main (): # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输出模式，并且初始化为高电平 GPIO . setup ( output_pin , GPIO . OUT , initial = GPIO . HIGH ) # 记录当前管脚状态 curr_value = GPIO . HIGH print ( \"Starting demo now! Press CTRL+C to exit\" ) try : # 间隔1秒时间，循环控制LED灯亮灭 while True : time . sleep ( 1 ) GPIO . output ( output_pin , curr_value ) curr_value ^= GPIO . HIGH finally : GPIO . cleanup () if __name__ == '__main__' : main ()","text_tokens":["模式","print","循环","name","board","high","\"","灯亮","value","当前","高电平","定义","编号","try","控制","import","+","(","：",":","if","sleep","time","now","initial","_","curr",",","out","#","编码","^","usr"," ","while","__","bin",")","使用","设置","cleanup",".","as","灭","1","/","gpio","env","电平","状态","间隔","管脚","simple","的","py","def","并且","!","初始","=","setup","hobot","to","时间","press","通道","c","setmode","记录","为","，","demo","'","输出","初始化","starting","38","finally","led","main","output","硬件","exit","pin","python3","秒","ctrl","true"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_12","text":"学习了GPIO的输入与输出功能后，我们就可以做一些自动化的功能了。","text_tokens":["做","。","了","后","功能","可以","的","学习","与","自动化","自动","就","，","输入","我们","gpio","一些","输出"],"title":"数字输入与输出集成","title_tokens":["与","数字","集成","输入","输出"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_13","text":"比如我们同时连接一个按键和LED灯，尝试实现按键被按下，灯被点亮，松开，灯熄灭，这样的功能。","text_tokens":["灯","松开","我们","实现","下","。","的","按","比如","，","被","功能","尝试","led","一个","连接","熄灭","这样","点亮","同时","和","按键"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_14","text":"我们通过这个例程来试一试效果如何？ $ sudo python3 button_led.py 我们来看一下具体的操作，同样的，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。按下按键后，就可以看到LED被点亮了，松开之后，LED就熄灭了。","text_tokens":["程序","之后","操作","一下","运行","按下","松开","我们","具体","按照","刚才","。","button","来","的","效果"," ","py","x3pi","如何","，","被","？","例程","来看","试一试","实物","然后","可以","$","led","就","连接","完成","熄灭","看到","后","设置","了","这个",".","通过","到","sudo","python3","点亮","同样","将","按键","_"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_15","text":"button_led.py #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道： # 36号作为输出，可以点亮一个LED # 38号作为输入，可以接一个按钮 led_pin = 36 # BOARD 编码 36 but_pin = 38 # BOARD 编码 38 # 禁用警告信息 GPIO . setwarnings ( False ) def main (): prev_value = None # Pin Setup: GPIO . setmode ( GPIO . BOARD ) # BOARD pin-numbering scheme GPIO . setup ( led_pin , GPIO . OUT ) # LED pin set as output GPIO . setup ( but_pin , GPIO . IN ) # Button pin set as input # Initial state for LEDs: GPIO . output ( led_pin , GPIO . LOW ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : curr_value = GPIO . input ( but_pin ) if curr_value != prev_value : GPIO . output ( led_pin , curr_value ) prev_value = curr_value print ( \"Outputting {} to Pin {} \" . format ( curr_value , led_pin )) time . sleep ( 1 ) finally : GPIO . cleanup () # cleanup all GPIO if __name__ == '__main__' : main () 基本的配置还是一样的，引入基本的库，然后设置为BOARD模式，然后初始化两个管脚，一个用来读取按键的通断，一个用来控制LED的亮灭，之后只需要判断按键的状态来做出对应的控制LED的动作就可以了。","text_tokens":["模式","作为","print","low","36","name","通断","输入","禁用","动作","。","format","board","\"","value","判断","接","做出","定义","可以","控制","try","import","numbering","+","两个","了","(","：","亮",":","if","sleep","time","now","一样","initial","按键","之后","_","all","curr","用来","for",",","-","out","#","编码","set","来","usr"," ","号","按钮","while","__","false","bin",")","配置","使用","一个","scheme","设置","cleanup",".","as","引入","灭","需要","1","信息","只","/","gpio","in","}","env","状态","读取","leds","管脚","state","button","的","py","input","然后","def","!","初始","{","=","setup","点亮","基本","hobot","to","对应","库","prev","press","setwarnings","通道","c","setmode","警告","还是","为","，","demo","'","输出","初始化","starting","38","finally","led","outputting","就","none","main","output","exit","pin","python3","ctrl","but","true"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/","text":"PWM脉冲宽度调制 我们已经可以用GPIO控制LED灯一闪一闪亮晶晶了，这样只有亮和灭的状态似乎还是太简单了，能不能对LED的亮度进行调整呢？ 当然没问题，这就要用到接下来学习的PWM脉冲宽度调制了。 PWM脉冲宽度调制原理 在GPIO的数字输入和输出模式中，只有高低电平，高电平一般是3.3V或者5V，低电平就是0V，如果我想要一个折中一点的电压怎么办呢？PWM大家了解一下。 PWM，全称是脉冲宽度调制 ， 是一种对模拟信号电平进行数字编码的方法，通过高分辨率计数器，调制出一定占空比的方波，通过这种方式对模拟信号的电平进行编码。 通俗点来说，如果我们有一个10W的灯泡，在一个小时中亮了半个小时，那我们宏观来看，它在这一个小时中的功率就是5W，这样就相当于是它的电压被降低了。而我们还可以通过改变这一个小时中，灯泡被点亮的时长，来等效出不同的电压。 然后，我们把一个小时缩短为很小的一个时间，到达一定的微分程度，表现出来的就是电压的变化，而这个很小的时间，就是PWM频率的倒数，被点亮的时间在这个很小的时间中所占的百分比就叫做占空比。 这里大家也要注意，虽然PWM在尽力呈现出模拟信号的样子，但本质还是数字信号，因为在给定的某一任何时刻，引脚只能高电平或者低电平。 通过PWM技术，可以让数字电路产生类似模拟信号的效果，从而实现类似的无级控制，比如风扇的转速，或者屏幕的亮度，很多都是通过PWM技术实现的调节。 PWM编程 接下来我们就来试一试，通过PWM让一个LED实现不同亮度的变化，也就是我们常见的呼吸灯了。 硬件接线 还是用这个LED灯，一端连接电阻，再到5V高电平的引脚，另外一端，接到33号引脚的PWM接口。 运行示例程序 大家先来运行例程，看看效果如何。 $ sudo python3 simple_pwm.py 我们来看一下实物的操作，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。就可以看到这样的一个呼吸灯的效果了。 代码解析 simple_pwm.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 支持PWM的管脚: 32 and 33, 在使用PWM时，必须确保该管脚没有被其他功能占用 output_pin = 33 def main (): # Pin Setup: # Board pin-numbering scheme GPIO . setmode ( GPIO . BOARD ) # 支持的频率范围： 48KHz ~ 192MHz p = GPIO . PWM ( output_pin , 48000 ) # 初始占空比 25%， 先每0.25秒增加5%占空比，达到100%之后再每0.25秒减少5%占空比 val = 25 incr = 5 p . ChangeDutyCycle ( val ) p . start ( val ) print ( \"PWM running. Press CTRL+C to exit.\" ) try : while True : time . sleep ( 0.25 ) if val >= 100 : incr = - incr if val <= 0 : incr = - incr val += incr p . ChangeDutyCycle ( val ) finally : p . stop () GPIO . cleanup () if __name__ == '__main__' : main () 一样的引入GPIO的库，然后设置管脚编码模式为BOARD，然后创建一个PWM的实例化对象p，同时设置他的频率，之后就可以通过ChangeDutyCycle来改变他的占空比，在循环当中，占空比大于等于100时，就会以5%的梯度减小；当小于等于0时，就会以5%的梯度增大。","text_tokens":["变化","现出","每",">","循环","输入","board","程度","而","范围","本质","高电平","例程","import","尽力","确保","风扇","这样","常见","sleep","分辨","接线","电压","或者","样子","程序","方波",",","表现"," ","号","只能","功能","当然","实物","一端","增加","一个","使用",".","引入","增大","和","缩短","192mhz","会","电平","状态","百分比","叫做","何时","simple","半个","5v","没有","小于","改变","问题","25%","调制","这里","完成","想要","看到","也","=","0.25","只有","25","似乎","降低","to","任何","先","时间","时","屏幕","实现","梯度","setmode","还是","接下来","为","'","输出","把","点","来看","计数器","led","；","大于","没","48000","python3","晶晶","对","折中","以","模式","代码","x3pi","如何","亮度","and","？","试一试","try","怎么","不同","+","了","true","_","如果","占用","等于","来","引脚","效果","接到","usr","再","接口","__","0v","必须","连接","已经","调节","设置","cleanup","灭","as","微分","模拟","32","将","gpio","编程","env","呢","我们","管脚","太","不能","要","比如","支持","然后","等效","初始","实例","通过","注意","点亮","同时","下来","呈现出","倒数","库","大家","c","通俗","都","100%","$","用","48khz","数字信号","减小","相当","电阻","在","很多","print","但","运行","name","数字","\"","中","创建","可以","原理","控制","亮晶晶","是","还","(","这","亮","：","v","if","之后","操作","一下","#","中所","呈现","bin","高分辨率","数字电","它","changedutycycle","10w","这个","0","方法","当中","/","让","宏观","类似","val","的","py","任何时刻","呼吸","那","被","def","一点","灯一闪","到达","setup","sudo","因为","分辨率","占空比","p","模拟信号","press","某","按照","~","占","无级","pwm","转速","stop","当","用到","怎么办","start","时长","output","硬件","exit","incr","pin","该","小时","百分","来说","33","脉冲","产生","了解","电路","。","5%","3.3","看看","计数","100","numbering","减少","到","5w","出来",":","一样","time","5","这种","灯","功率","对象","学习","进行","-","高","全称","编码","我","running","达到","虽然","while","<","低电平",")","数字编码","时刻","从而","一","scheme","简单","一定","数字电路","调整","信号","他","化","就要","一种","方式","解析","刚才","给定","很小","宽度","一闪","示例","!","就是","能","hobot","灯泡","其他","当于","频率","另外","相当于","，","辨率","一般","接下","有","finally","就","main","技术","高分","秒","ctrl","出","中亮"],"title":"PWM脉冲宽度调制","title_tokens":["调制","宽度","脉冲","pwm"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm","text":"我们已经可以用GPIO控制LED灯一闪一闪亮晶晶了，这样只有亮和灭的状态似乎还是太简单了，能不能对LED的亮度进行调整呢？ 当然没问题，这就要用到接下来学习的PWM脉冲宽度调制了。","text_tokens":["就要","学习","进行","状态","脉冲","呢","我们","太","。","pwm","的","不能"," ","还是","接下来","亮度","，","？","接下","可以","一闪","当然","宽度","控制","用到","led","问题","调制","用","亮晶晶","灯一闪","已经","能","了","没","这样","只有","灭","这","亮","简单","似乎","晶晶","下来","对","和","调整","gpio"],"title":"PWM脉冲宽度调制","title_tokens":["调制","宽度","脉冲","pwm"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm_1","text":"在GPIO的数字输入和输出模式中，只有高低电平，高电平一般是3.3V或者5V，低电平就是0V，如果我想要一个折中一点的电压怎么办呢？PWM大家了解一下。 PWM，全称是脉冲宽度调制 ， 是一种对模拟信号电平进行数字编码的方法，通过高分辨率计数器，调制出一定占空比的方波，通过这种方式对模拟信号的电平进行编码。 通俗点来说，如果我们有一个10W的灯泡，在一个小时中亮了半个小时，那我们宏观来看，它在这一个小时中的功率就是5W，这样就相当于是它的电压被降低了。而我们还可以通过改变这一个小时中，灯泡被点亮的时长，来等效出不同的电压。 然后，我们把一个小时缩短为很小的一个时间，到达一定的微分程度，表现出来的就是电压的变化，而这个很小的时间，就是PWM频率的倒数，被点亮的时间在这个很小的时间中所占的百分比就叫做占空比。 这里大家也要注意，虽然PWM在尽力呈现出模拟信号的样子，但本质还是数字信号，因为在给定的某一任何时刻，引脚只能高电平或者低电平。 通过PWM技术，可以让数字电路产生类似模拟信号的效果，从而实现类似的无级控制，比如风扇的转速，或者屏幕的亮度，很多都是通过PWM技术实现的调节。","text_tokens":["模式","来说","变化","但","现出","脉冲","产生","输入","了解","电路","。","数字","程度","而","3.3","中","计数","亮度","本质","高电平","？","可以","控制","尽力","怎么","风扇","不同","还","是","了","这样","这","5w","出来","v","分辨","电压","这种","或者","样子","如果","功率","方波","进行","一下","高","全称","编码","表现","我","来","引脚"," ","效果","中所","呈现","虽然","只能","低电平","0v","数字编码","高分辨率","时刻","一个","数字电","从而","它","一","10w","调节","这个","一定","方法","微分","模拟","和","数字电路","gpio","缩短","信号","让","宏观","一种","方式","电平","类似","百分比","呢","叫做","我们","何时","半个","的","5v","要","给定","比如","任何时刻","那","被","很小","然后","宽度","改变","在","一点","等效","调制","这里","想要","就是","到达","也","只有","通过","注意","点亮","因为","降低","呈现出","灯泡","分辨率","占空比","倒数","任何","模拟信号","大家","时间","当于","频率","屏幕","某","实现","占","无级","pwm","相当于","还是","转速","通俗","为","都","，","输出","辨率","一般","把","点","有","来看","计数器","就","怎么办","百分","时长","技术","数字信号","对","折中","相当","高分","小时","出","中亮","很多"],"title":"PWM脉冲宽度调制原理","title_tokens":["pwm","宽度","原理","脉冲","调制"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm_2","text":"接下来我们就来试一试，通过PWM让一个LED实现不同亮度的变化，也就是我们常见的呼吸灯了。","text_tokens":["灯","变化","让","我们","实现","。","pwm","来","的","接下来","呼吸","亮度","，","接下","试一试","led","就","一个","不同","就是","也","了","通过","常见","下来"],"title":"PWM编程","title_tokens":["编程","pwm"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_1","text":"还是用这个LED灯，一端连接电阻，再到5V高电平的引脚，另外一端，接到33号引脚的PWM接口。","text_tokens":["灯","33","电平","另外","。","pwm","的","引脚","号","接到","还是","5v","再","，","接口","高电平","一端","led","连接","用","这个","到","电阻"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_2","text":"大家先来运行例程，看看效果如何。 $ sudo python3 simple_pwm.py 我们来看一下实物的操作，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。就可以看到这样的一个呼吸灯的效果了。","text_tokens":["先","程序","灯","大家","操作","一下","运行","我们","刚才","。","simple","按照","pwm","来","的","效果"," ","py","x3pi","如何","呼吸","看看","，","例程","来看","实物","然后","可以","$","就","一个","连接","完成","看到","了","设置","这样",".","到","sudo","python3","将","_"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_3","text":"simple_pwm.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 支持PWM的管脚: 32 and 33, 在使用PWM时，必须确保该管脚没有被其他功能占用 output_pin = 33 def main (): # Pin Setup: # Board pin-numbering scheme GPIO . setmode ( GPIO . BOARD ) # 支持的频率范围： 48KHz ~ 192MHz p = GPIO . PWM ( output_pin , 48000 ) # 初始占空比 25%， 先每0.25秒增加5%占空比，达到100%之后再每0.25秒减少5%占空比 val = 25 incr = 5 p . ChangeDutyCycle ( val ) p . start ( val ) print ( \"PWM running. Press CTRL+C to exit.\" ) try : while True : time . sleep ( 0.25 ) if val >= 100 : incr = - incr if val <= 0 : incr = - incr val += incr p . ChangeDutyCycle ( val ) finally : p . stop () GPIO . cleanup () if __name__ == '__main__' : main () 一样的引入GPIO的库，然后设置管脚编码模式为BOARD，然后创建一个PWM的实例化对象p，同时设置他的频率，之后就可以通过ChangeDutyCycle来改变他的占空比，在循环当中，占空比大于等于100时，就会以5%的梯度减小；当小于等于0时，就会以5%的梯度增大。","text_tokens":["模式","print","33","每",">","循环","name","。","board","5%","\"","范围","and","创建","可以","100","try","import","numbering","确保","减少","+","(","true","：",":","if","sleep","time","5","一样","之后","_","对象","占用",",","-","等于","#","编码","running","usr"," ","来","达到","再","while","__","<","bin","功能",")","必须","增加","使用","一个","changedutycycle","scheme","设置","cleanup",".","as","引入","增大","0","32","当中","/","gpio","他","化","192mhz","会","env","管脚","simple","val","的","没有","py","支持","小于","被","然后","改变","def","25%","!","初始","实例","=","setup","0.25","通过","25","同时","hobot","to","p","占空比","先","其他","库","press","时","频率","梯度","~","c","pwm","setmode","stop","为","100%","，","'","当","finally","就","；","main","start","output","48khz","大于","减小","exit","incr","pin","该","48000","python3","秒","ctrl","以","在"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/","text":"UART串口通信 现在的传感器和执行器种类越来越多，需要和控制器传输的数据也是多种多样，只用GPIO来控制和读取的话，只有0和1的状态，未免还是有点麻烦，各种各样的通信方法也层出不穷，UART串口通信绝对是最为常用的一种。 串口通信原理 串行通信是一种通讯协议，也可以简称为串口，可以理解为数据是串成一串的，所以也就只能一位一位的发送，这样传输的速度虽然受到了限制，但是对硬件线路的要求小，只需要一对传输线，一个发送，一个接收，就可以实现双向通信了。 一般情况下，串口模块发送数据的管脚叫做TX，接收数据的管脚叫做RX。发送端发过去的数据，需要对方串口模块的接收端来接收，所以一侧发送端的TX需要连接到另外一侧的接收端RX，接收和发送在两方看来是相对的，所以我们接线的时候，要记住永远是TX引脚连接到RX引脚，接反了数据就传输不了了。 硬件连接 接下来，我们就尝试通过一个串口模块来实现电脑和旭日X3Pi的串口通信。 在接线方面，我们先交叉连接串口模块和旭日X3Pi的RX、TX，同时为了让两边具有相同的参考电平，还要将两者的GND连接到一起，然后再把串口模块连接到电脑就可以了。 运行示例程序 接下来就可以运行串口通信的例程了。 $ sudo python3 test_serial.py 实物接线完成后，在旭日X3派的终端中输入指令启动例程，很快就可以在终端中看到串口向外发送的数据了。 在串口连接的电脑中打开一个串口软件，用来接收和发送数据，设置好端口和波特率，就能看到旭日X3派发过来的数据了。我们再使用电脑的串口软件尝试下发送数据给旭日X3派，输入1234，点击发送，可以看到，X3Pi的终端这边也成功的接收到了数据并且打印出来了。 代码解析 test_serial.py： #!/usr/bin/env python3 import sys import os import time # 导入python串口库 import serial import serial.tools.list_ports def serialTest (): print ( \"List of enabled UART:\" ) os . system ( 'ls /dev/tty[a-zA-Z]*' ) uart_dev = input ( \"请输入需要测试的串口设备名:\" ) baudrate = input ( \"请输入波特率(9600,19200,38400,57600,115200,921600):\" ) try : ser = serial . Serial ( uart_dev , int ( baudrate ), timeout = 1 ) # 1s timeout except Exception as e : print ( \"open serial failed! \\n \" ) print ( ser ) print ( \"Starting demo now! Press CTRL+C to exit\" ) while True : test_data = \"AA55\" write_num = ser . write ( test_data . encode ( 'UTF-8' )) print ( \"Send: \" , test_data ) received_data = ser . read ( write_num ) . decode ( 'UTF-8' ) if received_data : print ( \"Recv: \" , received_data ) time . sleep ( 1 ) ser . close () return 0 if __name__ == '__main__' : if serialTest () != 0 : print ( \"Serial test failed!\" ) else : print ( \"Serial test success!\" ) X3Pi这边如果要使用串口，直接使用serial库就可以了，这里我们先调用系统的库，打印出当前有哪些串口，然后手动输入选择串口的设备名，再输入串口的波特率，就可以进项串口的初始化了，初始化成功之后就会进入循环。 循环中，X3Pi会每隔一秒发送一次AA55，同时还会判断是否接收到了数据，如果接收到了数据也会打印出来。","text_tokens":["很快","sys","e","串口","不了","速度","循环","输入","下","int","num","每隔","1s","例程","import","这样","sleep","层出不穷","越来","接线","程序",",","enabled","115200","ser"," ","所以","只能","实物","一对","一个","使用","小","utf",".","需要","和","相同","会","成功","*","电平","状态","叫做","波特率","input","并且","看来","完成","这里","看到","也","=","进项","只有","数据","to","dev","先","双向","派发","n","理解","相对","实现","协议","这边","还是","接下来","为","交叉","设备","'","感器","为了","把","尝试","是否","传感器","串成","python3","对","data","打印","timeout","python","代码","多种多样","except","种类","现在","]","打开","x3pi","导入","波特","try","+","两者","还会","了","9600","now","serial","_","向外","如果","只用","接收","tty","rx","接反","传输","uart","来","引脚","usr","serialtest","再","__","、","连接","启动","设置","as","8","z","对方","调用","将","一串","各样","gpio","env","时候","限制","我们","管脚","绝对","多种","要","aa55","然后","哪些","通信","过去","线路","初始","方面","通过","指令","send","os","同时","下来","一位","执行","控制器","库","麻烦","手动","旭日","tx","各种","c","多样","两边","派","过来","$","端的","名","在","print","运行","name","\"","中","可以","原理","控制","进入","ports","一秒","是","点击","(","：","if","test","好","之后","1234","两方","执行器","open","#","exception","终端","a","测试","bin","list","write","tools","但是","给","\\","gnd","受到","decode","0","的话","方法","只","/","让","failed","received","x3","ls","的","py","具有","未免","软件","def","常用","19200","后","直接","system","sudo","多","38400","of","press","recv","发送数据","还要","选择","模块","初始化","一次","串行","硬件","exit","921600","永远","接收数据","57600","。","当前","判断","各种各样","双向通信","传感","到","出来",":","time","return","用来","情况","-","baudrate","请","简称","记住","端口","虽然","while","参考",")","端发","传输线","1","电脑","最为","一种","读取","解析","za","encode","示例","!","close","[","能","一起","系统","success","另外","read","要求","发送","，","demo","一般","接下","starting","有","通讯","接收端","就","else","有点","main","一侧","越来越","ctrl","出","true"],"title":"UART异步串口通信","title_tokens":["uart","串口","通信","异步"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#uart","text":"现在的传感器和执行器种类越来越多，需要和控制器传输的数据也是多种多样，只用GPIO来控制和读取的话，只有0和1的状态，未免还是有点麻烦，各种各样的通信方法也层出不穷，UART串口通信绝对是最为常用的一种。","text_tokens":["执行","串口","各样","只用","控制器","麻烦","最为","一种","状态","读取","多种多样","执行器","传输","种类","绝对","。","现在","各种","uart","的","来","多种","还是","，","多样","感器","各种各样","未免","控制","通信","常用","传感器","有点","是","传感","也","越来越","只有","数据","0","需要","的话","1","越来","方法","层出不穷","多","和","gpio"],"title":"UART串口通信","title_tokens":["uart","串口","通信"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_1","text":"串行通信是一种通讯协议，也可以简称为串口，可以理解为数据是串成一串的，所以也就只能一位一位的发送，这样传输的速度虽然受到了限制，但是对硬件线路的要求小，只需要一对传输线，一个发送，一个接收，就可以实现双向通信了。 一般情况下，串口模块发送数据的管脚叫做TX，接收数据的管脚叫做RX。发送端发过去的数据，需要对方串口模块的接收端来接收，所以一侧发送端的TX需要连接到另外一侧的接收端RX，接收和发送在两方看来是相对的，所以我们接线的时候，要记住永远是TX引脚连接到RX引脚，接反了数据就传输不了了。","text_tokens":["串口","不了","速度","下","。","双向通信","可以","是","了","这样","到","接线","两方","接收","rx","情况","接反","传输","简称","来","引脚"," ","记住","所以","虽然","只能","端发","一对","但是","一个","连接","传输线","小","受到","需要","只","对方","和","一串","一种","时候","限制","叫做","我们","管脚","的","要","在","通信","过去","线路","看来","也","数据","一位","双向","理解","另外","相对","实现","tx","协议","发送数据","要求","为","发送","，","模块","一般","通讯","接收端","串成","就","串行","端的","硬件","一侧","对","永远","接收数据"],"title":"串口通信原理","title_tokens":["串口","通信","原理"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_2","text":"接下来，我们就尝试通过一个串口模块来实现电脑和旭日X3Pi的串口通信。 在接线方面，我们先交叉连接串口模块和旭日X3Pi的RX、TX，同时为了让两边具有相同的参考电平，还要将两者的GND连接到一起，然后再把串口模块连接到电脑就可以了。","text_tokens":["先","相同","串口","让","电脑","rx","电平","旭日","我们","实现","。","tx","来","的"," ","还要","接下来","x3pi","具有","再","交叉","，","、","模块","为了","两边","把","接下","参考","然后","可以","尝试","通信","就","一个","连接","方面","两者","了","gnd","一起","通过","到","同时","下来","接线","将","和","在"],"title":"硬件连接","title_tokens":["硬件","连接"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_3","text":"接下来就可以运行串口通信的例程了。 $ sudo python3 test_serial.py 实物接线完成后，在旭日X3派的终端中输入指令启动例程，很快就可以在终端中看到串口向外发送的数据了。 在串口连接的电脑中打开一个串口软件，用来接收和发送数据，设置好端口和波特率，就能看到旭日X3派发过来的数据了。我们再使用电脑的串口软件尝试下发送数据给旭日X3派，输入1234，点击发送，可以看到，X3Pi的终端这边也成功的接收到了数据并且打印出来了。","text_tokens":["很快","向外","打印","串口","电脑","用来","接收","成功","派发","x3","运行","旭日","输入","我们","下","。","打开","发送数据","这边","的"," ","波特率","接下来","py","终端","x3pi","端口","波特","再","发送","，","中","派","过来","接下","例程","可以","实物","软件","尝试","并且","$","通信","就","一个","使用","连接","完成","给","启动","点击","看到","也","能","了","后","设置",".","到","数据","sudo","python3","指令","出来","下来","serial","test","接线","好","和","在","1234","_"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_4","text":"test_serial.py： #!/usr/bin/env python3 import sys import os import time # 导入python串口库 import serial import serial.tools.list_ports def serialTest (): print ( \"List of enabled UART:\" ) os . system ( 'ls /dev/tty[a-zA-Z]*' ) uart_dev = input ( \"请输入需要测试的串口设备名:\" ) baudrate = input ( \"请输入波特率(9600,19200,38400,57600,115200,921600):\" ) try : ser = serial . Serial ( uart_dev , int ( baudrate ), timeout = 1 ) # 1s timeout except Exception as e : print ( \"open serial failed! \\n \" ) print ( ser ) print ( \"Starting demo now! Press CTRL+C to exit\" ) while True : test_data = \"AA55\" write_num = ser . write ( test_data . encode ( 'UTF-8' )) print ( \"Send: \" , test_data ) received_data = ser . read ( write_num ) . decode ( 'UTF-8' ) if received_data : print ( \"Recv: \" , received_data ) time . sleep ( 1 ) ser . close () return 0 if __name__ == '__main__' : if serialTest () != 0 : print ( \"Serial test failed!\" ) else : print ( \"Serial test success!\" ) X3Pi这边如果要使用串口，直接使用serial库就可以了，这里我们先调用系统的库，打印出当前有哪些串口，然后手动输入选择串口的设备名，再输入串口的波特率，就可以进项串口的初始化了，初始化成功之后就会进入循环。 循环中，X3Pi会每隔一秒发送一次AA55，同时还会判断是否接收到了数据，如果接收到了数据也会打印出来。","text_tokens":["sys","e","print","57600","打印","串口","timeout","循环","python","name","输入","except","。","]","int","num","导入","x3pi","\"","波特","当前","判断","中","data","每隔","1s","可以","try","进入","import","ports","一秒","+","还会","了","9600","(","到","true","：",":","if","sleep","time","now","出来","serial","test","return","之后","_","如果","接收","tty",",","-","enabled","baudrate","115200","#","ser","请","exception","open","uart","serialtest","usr"," ","a","再","while","__","测试","bin",")","list","write","tools","使用","\\","utf",".","decode","as","0","需要","1","z","8","调用","/","failed","成功","env","会","*","received","ls","我们","的","波特率","za","py","要","aa55","input","encode","然后","哪些","def","!","close","这里","19200","初始","[","也","=","直接","进项","数据","send","os","同时","to","dev","系统","先","38400","库","of","n","手动","press","success","recv","read","c","这边","选择","发送","设备","demo","，","'","初始化","starting","有","是否","一次","就","else","main","exit","名","python3","ctrl","921600","出","system"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/","text":"SPI同步串行通信 UART串口通信中的数据只能一位一位的传输，如果数据量比较大的时候，传输速率会受到很大影响，此时我们就可以考虑使用同步串行通信了，比如SPI。 SPI通信原理 SPI，全称是Serial Peripheral Interface，也就是串行外设接口，同样是一种通信协议，在很多芯片中都有集成。 相比之前学习的UART串口通信，他多了两根线，其中一个是时钟信号，另一个是设备使能信号，用来控制设备是否启用，所以也产生了主从设备的概念。 MISO ：Master Input Slave Output，主设备数据输入，从设备数据输出； MOSI ：Master Output Slave Input，主设备数据输出，从设备数据输入； SCLK ：Serial Clock，时钟信号，由主设备产生； CS ：Chip Select，从设备使能信号，由主设备控制。 这样，在一组SPI通信的系统中，可以连接多个设备，想要和哪个设备通信时，就使能这个设备，除能其他设备。 我们在开发中常见的SPI设备会有一些传感器，还有电阻屏之类的。 硬件连线 在SPI的通信中，有一个管脚负责发送，另外一个管脚负责接收，如果我们把同一组SPI的发送和接收接到一起，岂不是能接收到自己发送的数据吗？ 我们不妨来试一试，这里使用一个跳线帽直接把19，21两个SPI的通信管脚短接。 运行示例程序 大家来运行例程，看看会发生什么？ $ sudo python3 test_spi.py 在旭日X3派的终端中，输入运行例程的指令，接下来我们就可以看到通过SPI传输并收到的数据啦，相当于是左手传递给右手，自己给自己循环传输数据了。 代码解析 test_spi.py： #!/usr/bin/env python3 import sys import os import time # 导入spidev模块 import spidev def BytesToHex ( Bytes ): return '' . join ([ \"0x %02X \" % x for x in Bytes ]) . strip () def spidevTest (): # 设置spi的bus号（0, 1, 2）和片选(0, 1) spi_bus = input ( \"Please input SPI bus num:\" ) spi_device = input ( \"Please input SPI cs num:\" ) # 创建spidev类的对象以访问基于spidev的Python函数。 spi = spidev . SpiDev () # 打开spi总线句柄 spi . open ( int ( spi_bus ), int ( spi_device )) # 设置 spi 频率为 12MHz spi . max_speed_hz = 12000000 print ( \"Starting demo now! Press CTRL+C to exit\" ) # 发送 [0x55, 0xAA], 接收的数据应该也是 [0x55, 0xAA] try : while True : resp = spi . xfer2 ([ 0x55 , 0xAA ]) print ( BytesToHex ( resp )) time . sleep ( 1 ) except KeyboardInterrupt : spi . close () if __name__ == '__main__' : print ( \"List of enabled spi controllers:\" ) os . system ( 'ls /dev/spidev*' ) spidevTest () 在python中使用spidev这个库，初始化X3Pi的SPI，之后使用xerf2发送数据，同时接收数据，并打印出来，会发现打印出来的就是我们发送的。","text_tokens":["sys","print","打印","串口","访问","循环","产生","python","运行","代码","函数","name","输入","之类","except","句柄","。","另","]","打开","int","num","数据量","传输速率","peripheral","导入","x3pi","\"","同","看看","中","发生","创建","bus","select","？","屏","例程","可以","原理","通信协议","试一试","控制","spidev","try","xfer2","import","开发","是","+","传感","两个","多个","了","不是","传递","这样","(","到","概念","：","常见",":","片选","max","time","miso","两根","serial","同样","连线","test","return","now","之后","自己","19","_","如果","程序","bytestohex","左手","对象","除能","学习","用来","接收","for","spidevtest",",","x","master","sclk","enabled","传输","全称","21","#","open","xerf2","出来","uart","来","usr"," ","接到","号","终端","true","所以","只能","while","接口","__","同步","bin","0x","spi","考虑",")","从","还有","please","基于","外设","list","使用","很大","之前","一个","连接","给","啦","发现","设置","主","这个",".","受到","吗","使能","0","时钟","1","一组","由主","和","/","什么","信号","他","in","会","env","一种","*","时候","cs","x3","02x","12000000","传输数据","ls","hz","我们","类","管脚","解析","影响","0xaa","的","resp","interface","py","controllers","比如","帽","2","并","chip","input","mosi","哪个","speed","keyboardinterrupt","def","示例","%","通信","负责","!","close","这里","想要","初始","strip","[","就是","（","速率","也","能","看到","=","直接","一起","通过","数据","system","sudo","指令","os","主从","下来","同时","to","线","不妨","启用","多","）","总线","sleep","dev","系统","一位","slave","12mhz","其他","库","大家","of","当于","press","时","收到","频率","另外","旭日","此时","一些","岂","短接","大","协议","右手","c","相当于","device","发送数据","其中","接下来","应该","相比","为","都","发送","集成","设备","，","join","'","输出","感器","跳线","模块","demo","初始化","把","派","接下","clock","starting","有","比较","是否","$","传感器","就","if","芯片","；","串行","使","main","output","bytes","硬件","相当","exit","并打印","python3","0x55","电阻","ctrl","以","在","很多","接收数据"],"title":"SPI同步串行通信","title_tokens":["通信","串行","同步","spi"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#spi","text":"UART串口通信中的数据只能一位一位的传输，如果数据量比较大的时候，传输速率会受到很大影响，此时我们就可以考虑使用同步串行通信了，比如SPI。","text_tokens":["一位","如果","串口","会","时候","此时","我们","传输","大","。","影响","uart","的","数据量","传输速率","比如","只能","，","中","同步","spi","可以","考虑","比较","通信","就","使用","很大","串行","速率","了","受到","数据"],"title":"SPI同步串行通信","title_tokens":["通信","串行","同步","spi"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#spi_1","text":"SPI，全称是Serial Peripheral Interface，也就是串行外设接口，同样是一种通信协议，在很多芯片中都有集成。 相比之前学习的UART串口通信，他多了两根线，其中一个是时钟信号，另一个是设备使能信号，用来控制设备是否启用，所以也产生了主从设备的概念。 MISO ：Master Input Slave Output，主设备数据输入，从设备数据输出； MOSI ：Master Output Slave Input，主设备数据输出，从设备数据输入； SCLK ：Serial Clock，时钟信号，由主设备产生； CS ：Chip Select，从设备使能信号，由主设备控制。 这样，在一组SPI通信的系统中，可以连接多个设备，想要和哪个设备通信时，就使能这个设备，除能其他设备。 我们在开发中常见的SPI设备会有一些传感器，还有电阻屏之类的。","text_tokens":["串口","产生","输入","之类","。","另","peripheral","中","select","屏","可以","通信协议","控制","开发","是","传感","多个","了","这样","概念","：","常见","miso","两根","serial","同样","除能","学习","用来","master","sclk","全称","uart"," ","所以","接口","spi","从","还有","外设","一个","之前","连接","主","这个","使能","时钟","一组","由主","和","信号","他","会","一种","cs","我们","的","interface","chip","input","mosi","哪个","通信","想要","就是","也","能","数据","主从","线","启用","多","系统","slave","其他","时","一些","协议","其中","相比","都","集成","设备","，","输出","感器","clock","有","是否","传感器","就","芯片","；","串行","使","output","电阻","在","很多"],"title":"SPI通信原理","title_tokens":["原理","通信","spi"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_1","text":"在SPI的通信中，有一个管脚负责发送，另外一个管脚负责接收，如果我们把同一组SPI的发送和接收接到一起，岂不是能接收到自己发送的数据吗？ 我们不妨来试一试，这里使用一个跳线帽直接把19，21两个SPI的通信管脚短接。","text_tokens":["如果","接收","另外","我们","管脚","岂","短接","21","。","的","来"," ","接到","同","帽","发送","，","中","跳线","把","？","spi","有","试一试","通信","负责","19","一个","使用","这里","两个","能","不是","直接","一起","到","数据","吗","不妨","一组","和","在","自己"],"title":"硬件连线","title_tokens":["硬件","连线"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_2","text":"大家来运行例程，看看会发生什么？ $ sudo python3 test_spi.py 在旭日X3派的终端中，输入运行例程的指令，接下来我们就可以看到通过SPI传输并收到的数据啦，相当于是左手传递给右手，自己给自己循环传输数据了。","text_tokens":["左手","会","大家","当于","循环","x3","运行","收到","传输数据","旭日","输入","我们","传输","。","右手","自己","相当于","来","的"," ","接下来","py","终端","看看","，","发生","中","并","？","派","接下","例程","spi","可以","$","就","给","是","啦","看到","相当","传递","了",".","通过","数据","sudo","python3","指令","下来","test","在","什么","_"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_3","text":"test_spi.py： #!/usr/bin/env python3 import sys import os import time # 导入spidev模块 import spidev def BytesToHex ( Bytes ): return '' . join ([ \"0x %02X \" % x for x in Bytes ]) . strip () def spidevTest (): # 设置spi的bus号（0, 1, 2）和片选(0, 1) spi_bus = input ( \"Please input SPI bus num:\" ) spi_device = input ( \"Please input SPI cs num:\" ) # 创建spidev类的对象以访问基于spidev的Python函数。 spi = spidev . SpiDev () # 打开spi总线句柄 spi . open ( int ( spi_bus ), int ( spi_device )) # 设置 spi 频率为 12MHz spi . max_speed_hz = 12000000 print ( \"Starting demo now! Press CTRL+C to exit\" ) # 发送 [0x55, 0xAA], 接收的数据应该也是 [0x55, 0xAA] try : while True : resp = spi . xfer2 ([ 0x55 , 0xAA ]) print ( BytesToHex ( resp )) time . sleep ( 1 ) except KeyboardInterrupt : spi . close () if __name__ == '__main__' : print ( \"List of enabled spi controllers:\" ) os . system ( 'ls /dev/spidev*' ) spidevTest () 在python中使用spidev这个库，初始化X3Pi的SPI，之后使用xerf2发送数据，同时接收数据，并打印出来，会发现打印出来的就是我们发送的。","text_tokens":["sys","print","打印","访问","python","函数","name","except","句柄","。","]","打开","int","num","导入","x3pi","\"","中","创建","bus","spidev","xfer2","try","import","是","+","(","片选","：",":","if","max","time","now","sleep","return","test","出来","之后","_","bytestohex","对象","接收","for","spidevtest",",","x","enabled","open","#","xerf2","usr"," ","号","while","__","bin","0x","spi",")","please","基于","list","使用","发现","设置","这个",".","0","1","和","/","in","会","env","*","cs","02x","12000000","ls","hz","类","我们","0xaa","的","resp","py","controllers","2","input","keyboardinterrupt","speed","def","在","%","!","close","初始","strip","[","就是","也","=","数据","system","os","同时","to","）","总线","dev","12mhz","库","of","press","频率","c","发送数据","device","应该","为","（","发送","demo","join","'","，","模块","初始化","starting","main","bytes","exit","并打印","python3","0x55","ctrl","以","true","接收数据"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/","text":"I2C同步串行通信 SPI通信虽然功能更强大了，但是需要4根线做连接，还是有点复杂，接下来I2C的连线就简单很多了。 I2C通信原理 I2C也是一种常用的串行通信方式，和SPI一样可以连接多个设备，重点是它只需要两根线就可以完成。 不过他的两根线和UART不同，不全是传输数据用的，I2C中的一根线是时钟线，另一根才是传输数据的，这根线可以双向的传输数据。 I2C通信中可以有多个主设备或者从设备，只要能通过地址找到彼此的位置即可。 主器件用于启动总线传送数据，并产生时钟给各种从机，此时任何被寻址的器件均被认为是从机。在总线上主和从、发和收的关系不是恒定的，而取决于此时数据传送方向。如果主机要发送数据给从机，主机首先得找到从机的地址，然后主动发送数据过去，最后也得由主机终止数据传送；如果主机要接收从机的数据，同样由主机得找到从机的地址，然后主机接收从器件发送的数据，最后由主机终止接收过程。 因为I2C的特性，使用I2C的设备比SPI多很多，比如图中的紫外线传感器，陀螺仪之类的，都是使用I2C进行通信的。 硬件接线 我们找来一个常用的陀螺仪模块，按照这里的接线图连接到旭日X3派的40PIN接口上，这里除了I2C通信的两根线之外，另外两根是电源线，负责给这个模块供电的，让它正常工作起来。 运行示例程序 接线是挺简单的，我们继续来运行这个例程，看下能否收到数据。 $ sudo python3 mpu6500_i2c.py 在终端启动例程，很快就可以看到通过I2C读取到了大量传感器的数据，这些就是陀螺仪模块的原始数据，收到之后我们就可以进行结算处理啦，这就是我们后续机器人开发的需要解决的问题了。 代码解析 mpu6500_i2c.py： #!/usr/bin/env python3 import smbus , time def MPU6050_start (): # alter sample rate (stability) samp_rate_div = 0 # sample rate = 8 kHz/(1+samp_rate_div) bus . write_byte_data ( MPU6050_ADDR , SMPLRT_DIV , samp_rate_div ) time . sleep ( 0.1 ) # reset all sensors bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x00 ) time . sleep ( 0.1 ) # power management and crystal settings bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x01 ) time . sleep ( 0.1 ) #Write to Configuration register bus . write_byte_data ( MPU6050_ADDR , CONFIG , 0 ) time . sleep ( 0.1 ) #Write to Gyro configuration register gyro_config_sel = [ 0b00000 , 0b010000 , 0b10000 , 0b11000 ] # byte registers gyro_config_vals = [ 250.0 , 500.0 , 1000.0 , 2000.0 ] # degrees/sec gyro_indx = 0 bus . write_byte_data ( MPU6050_ADDR , GYRO_CONFIG , int ( gyro_config_sel [ gyro_indx ])) time . sleep ( 0.1 ) #Write to Accel configuration register accel_config_sel = [ 0b00000 , 0b01000 , 0b10000 , 0b11000 ] # byte registers accel_config_vals = [ 2.0 , 4.0 , 8.0 , 16.0 ] # g (g = 9.81 m/s^2) accel_indx = 0 bus . write_byte_data ( MPU6050_ADDR , ACCEL_CONFIG , int ( accel_config_sel [ accel_indx ])) time . sleep ( 0.1 ) # interrupt register (related to overflow of data [FIFO]) bus . write_byte_data ( MPU6050_ADDR , INT_ENABLE , 1 ) time . sleep ( 0.1 ) return gyro_config_vals [ gyro_indx ], accel_config_vals [ accel_indx ] def read_raw_bits ( register ): # read accel and gyro values high = bus . read_byte_data ( MPU6050_ADDR , register ) low = bus . read_byte_data ( MPU6050_ADDR , register + 1 ) # combine higha and low for unsigned bit value value = (( high << 8 ) | low ) # convert to +- value if ( value > 32768 ): value -= 65536 return value def mpu6050_conv (): # raw acceleration bits acc_x = read_raw_bits ( ACCEL_XOUT_H ) acc_y = read_raw_bits ( ACCEL_YOUT_H ) acc_z = read_raw_bits ( ACCEL_ZOUT_H ) # raw temp bits ## t_val = read_raw_bits(TEMP_OUT_H) # uncomment to read temp # raw gyroscope bits gyro_x = read_raw_bits ( GYRO_XOUT_H ) gyro_y = read_raw_bits ( GYRO_YOUT_H ) gyro_z = read_raw_bits ( GYRO_ZOUT_H ) #convert to acceleration in g and gyro dps a_x = ( acc_x / ( 2.0 ** 15.0 )) * accel_sens a_y = ( acc_y / ( 2.0 ** 15.0 )) * accel_sens a_z = ( acc_z / ( 2.0 ** 15.0 )) * accel_sens w_x = ( gyro_x / ( 2.0 ** 15.0 )) * gyro_sens w_y = ( gyro_y / ( 2.0 ** 15.0 )) * gyro_sens w_z = ( gyro_z / ( 2.0 ** 15.0 )) * gyro_sens ## temp = ((t_val)/333.87)+21.0 # uncomment and add below in return return a_x , a_y , a_z , w_x , w_y , w_z # MPU6050 Registers MPU6050_ADDR = 0x68 PWR_MGMT_1 = 0x6B SMPLRT_DIV = 0x19 CONFIG = 0x1A GYRO_CONFIG = 0x1B ACCEL_CONFIG = 0x1C INT_ENABLE = 0x38 ACCEL_XOUT_H = 0x3B ACCEL_YOUT_H = 0x3D ACCEL_ZOUT_H = 0x3F TEMP_OUT_H = 0x41 GYRO_XOUT_H = 0x43 GYRO_YOUT_H = 0x45 GYRO_ZOUT_H = 0x47 # start I2C driver bus = smbus . SMBus ( 0 ) # start comm with i2c bus gyro_sens , accel_sens = MPU6050_start () # instantiate gyro/accel while True : print ( mpu6050_conv ()) 这里我们看一下怎么使用I2C和陀螺仪通信来获取信息。主体上有三个大的函数，而这三个函数的功能都比较单一，第一个函数通过给陀螺仪发送数据来进行初始化的设置，比如配置陀螺仪的电源寄存器，加速度寄存器等；第二个函数则是从陀螺仪读取数据；第三个函数则是将读取到的函数进行计算，从而变成真正的加速度等信息。 具体的读写操作可以看下面的代码片段，也是直接调用函数指定地址和数据就好了。 这里我们也能看到几个关键的参数，比如陀螺仪MPU6050的地址是0x68，通过这个地址才能确认到陀螺仪的存在，然后进行初始化，初始化完成之后进入循环，不停的将数据打印出来。","text_tokens":["很快","机器","+-","mgmt","速度",">","循环","下","enable","int","用于","below","真正","过程","接线图","而","fifo","bus","三个","例程","0b00000","import","找到","开发","0x38","sec","4","看","sleep","两根","同样","接线","或者","all","程序","##","片段","即可","management",",","comm"," ","i2c","功能","从","使用","一个","div","主",".","后续","电源线","需要","信息","和","主动","values","in","vals","0x6b","*","register","rate","500.0","w","并","得","负责","问题","第一个","这里","完成","最后","看到","也","=","0x3b","0x3f","数据","to","y","任何","双向","做","bit","还是","接下来","config","设备","关系","感器","smbus","起来","之外","mpu6500","传感器","registers","；","不过","python3","终止","0x3d","data","读写操作","related","low","打印","|","代码","]","结算","0b10000","high","settings","value","and","复杂","陀螺仪","怎么","不同","byte","+","多个","了","陀螺","确认","读写","_","如果","接收","紫外线","关键","x","第二个","取决于","convert","传输","gyroscope","t","uart","来","usr","sens","接口","、","强大","bits","spi","获取信息","调用函数","unsigned","连接","啦","启动","设置","xout","第三","g","8","z","调用","将","首先","0.1","env","获取","上","解决","我们","degrees","这根","要","比如","取决","uncomment","然后","acceleration","通信","过去","初始","紫外","地址","通过","下来","线","21.0","旭日","s","各种","8.0","mpu6050","都","派","indx","比较","$","reset","1000.0","acc","用","zout","0x43","power","在","很多","print","运行","函数","才","计算","处理","是从","几个","彼此","中","0b01000","2000.0","可以","原理","0x47","更","进入","0b010000","higha","传送","是","samp","configuration","(","取信","sensors","这","：","if","连线","恒定","addr","好","之后","读取数据","操作","根线","一下","raw","特性","out","#","加速","具体","这些","找","终端","a","combine","stability","同步","bin","write","但是","40pin","认为","它","给","这个","线图","0","第三个","只","/","只要","让","单一","x3","250.0","外线","0x1b","val","的","py","工作","2.0","第二","instantiate","被","2","除了","挺","def","寻址","常用","khz","sample","由","原始数据","0x00","pwr","直接","sudo","因为","总线","多","of","sel","add","大","按照","发送数据","h","模块","初始化","下面","机","一根","二个","accel","不停","串行","位置","start","硬件","0x1c","0x41","32768","产生","之类","。","另","指定","65536","interrupt","主机","继续","传感","不是","到","一样","电源",":","time","出来","return","加速度","0x19","进行","for","传送数据","-","^","重点","conv","原始","dps","16.0","9.81","寄存","虽然","while","<","图中","大量",")","配置","能否","从而","则","0b11000","发和收","均","简单","333.87","时钟","1","smplrt","alter","他","存在","一种","方式","供电","读取","传输数据","解析","yout","4.0","crystal","0x68","变成","with","机器人","m","示例","0x45","!","[","就是","等","能","正常","不全是","driver","15.0","才能","0x1a","gyro","主体","收到","另外","比","此时","方向","read","overflow","0x01","发送","从机","，","寄存器","第一","接下","有","就","有点","器件","temp","参数","上主","true"],"title":"I2C同步串行通信","title_tokens":["通信","串行","同步","i2c"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#i2c","text":"SPI通信虽然功能更强大了，但是需要4根线做连接，还是有点复杂，接下来I2C的连线就简单很多了。","text_tokens":["根线","做","。","的","还是","接下来","虽然","，","i2c","复杂","强大","接下","功能","spi","更","通信","就","但是","有点","连接","了","简单","4","需要","下来","连线","很多"],"title":"I2C同步串行通信","title_tokens":["通信","串行","同步","i2c"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#i2c_1","text":"I2C也是一种常用的串行通信方式，和SPI一样可以连接多个设备，重点是它只需要两根线就可以完成。 不过他的两根线和UART不同，不全是传输数据用的，I2C中的一根线是时钟线，另一根才是传输数据的，这根线可以双向的传输数据。 I2C通信中可以有多个主设备或者从设备，只要能通过地址找到彼此的位置即可。 主器件用于启动总线传送数据，并产生时钟给各种从机，此时任何被寻址的器件均被认为是从机。在总线上主和从、发和收的关系不是恒定的，而取决于此时数据传送方向。如果主机要发送数据给从机，主机首先得找到从机的地址，然后主动发送数据过去，最后也得由主机终止数据传送；如果主机要接收从机的数据，同样由主机得找到从机的地址，然后主机接收从器件发送的数据，最后由主机终止接收过程。 因为I2C的特性，使用I2C的设备比SPI多很多，比如图中的紫外线传感器，陀螺仪之类的，都是使用I2C进行通信的。","text_tokens":["产生","才","之类","。","另","用于","过程","是从","而","彼此","中","可以","主机","陀螺仪","不同","找到","传送","是","传感","多个","不是","陀螺","一样","两根","同样","恒定","或者","如果","接收","即可","紫外线","进行","传送数据","取决于","特性","传输","重点","uart"," ","i2c","、","spi","图中","从","使用","认为","连接","它","给","启动","主","发和收","均","需要","时钟","只","和","主动","首先","他","只要","一种","方式","传输数据","外线","的","这根","要","比如","取决","被","并","然后","得","寻址","常用","通信","过去","完成","由","最后","也","能","紫外","地址","通过","数据","不全是","因为","线","总线","多","任何","双向","比","此时","方向","各种","发送数据","都","发送","从机","设备","，","关系","感器","机","一根","有","传感器","就","；","串行","用","位置","器件","不过","上主","终止","在","很多"],"title":"I2C通信原理","title_tokens":["原理","通信","i2c"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_1","text":"我们找来一个常用的陀螺仪模块，按照这里的接线图连接到旭日X3派的40PIN接口上，这里除了I2C通信的两根线之外，另外两根是电源线，负责给这个模块供电的，让它正常工作起来。","text_tokens":["让","x3","供电","上","旭日","另外","我们","按照","。","来","的","找","接线图","工作","，","接口","i2c","模块","派","起来","除了","之外","陀螺仪","常用","通信","负责","一个","40pin","连接","这里","它","给","是","这个","正常","到","陀螺","线图","电源","电源线","两根","接线","线"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_2","text":"接线是挺简单的，我们继续来运行这个例程，看下能否收到数据。 $ sudo python3 mpu6500_i2c.py 在终端启动例程，很快就可以看到通过I2C读取到了大量传感器的数据，这些就是陀螺仪模块的原始数据，收到之后我们就可以进行结算处理啦，这就是我们后续机器人开发的需要解决的问题了。","text_tokens":["很快","机器","进行","读取","运行","收到","解决","我们","下","。","结算","的","来"," ","这些","py","终端","原始","处理","，","i2c","感器","模块","例程","可以","大量","挺","陀螺仪","机器人","mpu6500","$","问题","传感器","能否","就","继续","开发","是","原始数据","啦","启动","传感","看到","就是","了","这个",".","通过","数据","到","简单","sudo","python3","陀螺","看","这","后续","需要","接线","之后","在","_"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_3","text":"mpu6500_i2c.py： #!/usr/bin/env python3 import smbus , time def MPU6050_start (): # alter sample rate (stability) samp_rate_div = 0 # sample rate = 8 kHz/(1+samp_rate_div) bus . write_byte_data ( MPU6050_ADDR , SMPLRT_DIV , samp_rate_div ) time . sleep ( 0.1 ) # reset all sensors bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x00 ) time . sleep ( 0.1 ) # power management and crystal settings bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x01 ) time . sleep ( 0.1 ) #Write to Configuration register bus . write_byte_data ( MPU6050_ADDR , CONFIG , 0 ) time . sleep ( 0.1 ) #Write to Gyro configuration register gyro_config_sel = [ 0b00000 , 0b010000 , 0b10000 , 0b11000 ] # byte registers gyro_config_vals = [ 250.0 , 500.0 , 1000.0 , 2000.0 ] # degrees/sec gyro_indx = 0 bus . write_byte_data ( MPU6050_ADDR , GYRO_CONFIG , int ( gyro_config_sel [ gyro_indx ])) time . sleep ( 0.1 ) #Write to Accel configuration register accel_config_sel = [ 0b00000 , 0b01000 , 0b10000 , 0b11000 ] # byte registers accel_config_vals = [ 2.0 , 4.0 , 8.0 , 16.0 ] # g (g = 9.81 m/s^2) accel_indx = 0 bus . write_byte_data ( MPU6050_ADDR , ACCEL_CONFIG , int ( accel_config_sel [ accel_indx ])) time . sleep ( 0.1 ) # interrupt register (related to overflow of data [FIFO]) bus . write_byte_data ( MPU6050_ADDR , INT_ENABLE , 1 ) time . sleep ( 0.1 ) return gyro_config_vals [ gyro_indx ], accel_config_vals [ accel_indx ] def read_raw_bits ( register ): # read accel and gyro values high = bus . read_byte_data ( MPU6050_ADDR , register ) low = bus . read_byte_data ( MPU6050_ADDR , register + 1 ) # combine higha and low for unsigned bit value value = (( high << 8 ) | low ) # convert to +- value if ( value > 32768 ): value -= 65536 return value def mpu6050_conv (): # raw acceleration bits acc_x = read_raw_bits ( ACCEL_XOUT_H ) acc_y = read_raw_bits ( ACCEL_YOUT_H ) acc_z = read_raw_bits ( ACCEL_ZOUT_H ) # raw temp bits ## t_val = read_raw_bits(TEMP_OUT_H) # uncomment to read temp # raw gyroscope bits gyro_x = read_raw_bits ( GYRO_XOUT_H ) gyro_y = read_raw_bits ( GYRO_YOUT_H ) gyro_z = read_raw_bits ( GYRO_ZOUT_H ) #convert to acceleration in g and gyro dps a_x = ( acc_x / ( 2.0 ** 15.0 )) * accel_sens a_y = ( acc_y / ( 2.0 ** 15.0 )) * accel_sens a_z = ( acc_z / ( 2.0 ** 15.0 )) * accel_sens w_x = ( gyro_x / ( 2.0 ** 15.0 )) * gyro_sens w_y = ( gyro_y / ( 2.0 ** 15.0 )) * gyro_sens w_z = ( gyro_z / ( 2.0 ** 15.0 )) * gyro_sens ## temp = ((t_val)/333.87)+21.0 # uncomment and add below in return return a_x , a_y , a_z , w_x , w_y , w_z # MPU6050 Registers MPU6050_ADDR = 0x68 PWR_MGMT_1 = 0x6B SMPLRT_DIV = 0x19 CONFIG = 0x1A GYRO_CONFIG = 0x1B ACCEL_CONFIG = 0x1C INT_ENABLE = 0x38 ACCEL_XOUT_H = 0x3B ACCEL_YOUT_H = 0x3D ACCEL_ZOUT_H = 0x3F TEMP_OUT_H = 0x41 GYRO_XOUT_H = 0x43 GYRO_YOUT_H = 0x45 GYRO_ZOUT_H = 0x47 # start I2C driver bus = smbus . SMBus ( 0 ) # start comm with i2c bus gyro_sens , accel_sens = MPU6050_start () # instantiate gyro/accel while True : print ( mpu6050_conv ()) 这里我们看一下怎么使用I2C和陀螺仪通信来获取信息。主体上有三个大的函数，而这三个函数的功能都比较单一，第一个函数通过给陀螺仪发送数据来进行初始化的设置，比如配置陀螺仪的电源寄存器，加速度寄存器等；第二个函数则是从陀螺仪读取数据；第三个函数则是将读取到的函数进行计算，从而变成真正的加速度等信息。 具体的读写操作可以看下面的代码片段，也是直接调用函数指定地址和数据就好了。 这里我们也能看到几个关键的参数，比如陀螺仪MPU6050的地址是0x68，通过这个地址才能确认到陀螺仪的存在，然后进行初始化，初始化完成之后进入循环，不停的将数据打印出来。","text_tokens":["related","low","+-","mgmt","32768","print","|","打印","速度",">","循环","函数","代码","enable","。","]","指定","int","计算","below","真正","0b10000","high","settings","而","fifo","65536","value","是从","几个","and","bus","0b01000","三个","2000.0","interrupt","可以","0x47","陀螺仪","0b00000","进入","import","0b010000","怎么","higha","byte","是","+","samp","configuration","0x38","了","(","sec","sensors","陀螺","true","：","取信",":","if","sleep","time","看","这","return","电源","读写","好","addr","之后","读取数据","_","all","##","加速度","0x19","片段","操作","management","for","一下","进行",",","x","关键","第二个","raw","-","convert","出来","gyroscope","out","#","^","加速","t","comm","具体","来","usr"," ","conv","dps","16.0","9.81","sens","a","寄存","0x3d","while","i2c","<","combine","stability","bin","bits","到","功能",")","获取信息","调用函数","unsigned","配置","write","使用","一个","从而","给","则","div","设置","0b11000","xout",".","第三","这个","333.87","g","0","1","smplrt","8","z","信息","第三个","将","和","/","调用","alter","values","0.1","in","单一","vals","存在","env","0x6b","*","获取","读取","上","250.0","我们","register","0x1b","yout","val","4.0","的","rate","degrees","py","crystal","2.0","500.0","0x68","比如","instantiate","第二","变成","uncomment","w","2","with","然后","acceleration","m","def","通信","khz","sample","!","0x45","第一个","这里","完成","初始","[","0x00","等","也","pwr","=","0x3b","直接","地址","0x3f","通过","数据","能","to","driver","读写操作","y","15.0","才能","0x1a","gyro","of","sel","主体","add","21.0","s","大","bit","read","8.0","发送数据","mpu6050","overflow","0x01","都","发送","config","看到","，","h","寄存器","初始化","第一","下面","smbus","indx","有","比较","二个","mpu6500","reset","1000.0","registers","accel","就","不停","acc","；","start","temp","参数","0x1c","0x41","zout","python3","确认","0x43","power","data"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/","text":"USB外设驱动 在电脑上，我们最常用的接口之一，应该就是USB了，相比之前讲到的外设通信方法，USB更加复杂，速度也更快。 USB通信原理 USB不仅是我们生活中最常用的一种接口，也是一种串行总线的通讯方式。他类似于UART，有两根线用来传输数据。 而且USB还有专门的接口规范，比如我们常听说的USB Type A、Type C。例如这里列出来的USB口，打印机常用的B口，手机上用的C口，都是标准的USB接口。 USB的接口规范，使用广泛，很多成熟的外设都是采用的USB接口。 摄像头驱动 比如USB摄像头。 硬件接线 这里我们使用一个USB摄像头，通过一个相机驱动把它跑起来，并且可以看到图像数据。 方法有很多中，TogetherROS兼容ROS2的所有功能，那我们就先试试ROS2中的标准方法，在旭日X3PI上直接安装一个usb_cam功能包。 ROS2相机驱动 安装与配置 首先安装ROS2的相机驱动包： # 安装功能包 $ sudo apt install ros-foxy-usb-cam 安装好之后，为了让系统能够找到该功能包，需要进入tros的目录，建立对应的软连接。 # 建立软连接 $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 因为旭日X3Pi可以连接csi摄像头，设备名占用了video0-7，所以外接的USB摄像头会被自动分配到video8，我们需要在ROS2的功能包中修改一下设备号。 # 修改配置文件 $ cd /opt/tros/share/usb_cam/config $ sudo vim params.yaml 然后给这个设备添加权限，最后再设置TogetherROS的环境变量就可以使用啦。 # 添加可执行权限 $ sudo chmod 777 /dev/video8 # 添加环境变量 $ source /opt/tros/local_setup.bash 运行相机驱动 我们来试一试。 $ ros2 launch usb_cam demo_launch.py #启动相机，X3Pi $ ros2 run rqt_image_view rqt_image_view #查看图像，PC 这里直接在X3Pi中启动usb_cam的launch文件，然后再启动一个能和他通信的Ubuntu桌面系统，打开rqt_image_view，选择对应的话题，就可以看到图像了。也就是说明我们成功的用TROS驱动了这个USB摄像头。 TogetherROS相机驱动 除此之外，TogetherROS中也提供了USB摄像头的驱动节点，连接摄像头之后，直接设置设备的权限和TogetherROS的环境变量就可以使用了。 $ source /opt/tros/local_setup.bash $ sudo chmod 777 /dev/video8 $ ros2 launch hobot_usb_cam hobot_usb_cam.launch.py 之后可以再打开一个新的终端，输入对应的指令，然后启动websocket这个节点，就可以把image这个话题的数据发送到网页了。 $ source /opt/tros/local_setup.bash $ cd /opt/tros/lib/websocket/webservice $ sudo chmod +x ./sbin/nginx $ sudo ./sbin/nginx -p . $ ros2 run websocket websocket --ros-args -p image_topic: = /image -p image_type: = mjpeg -p only_show_image: = true 这时我们直接打开在通一个局域网下的浏览器，输入X3Pi的地址，就可以进去到一个网页，点击左上方web端展示即可看到USB摄像头的实时画面。 激光雷达驱动 移动机器人中常用的激光雷达大多也是USB借口的，比如这款rplidar。 安装与配置 如果我们想把它跑起来，同样需要一个驱动包，大家可以在工作空间中下载雷达的驱动包，然后进行编译。编译完成后，添加环境变量就可以使用这个功能包了。 # 下载源码 $ mkdir -p catkin_ws/src $ cd ~/catkin_ws/src $ git clone -b ros2 https://github.com/slamtec/rplidar_ros.git # 编译 $ cd ~/catkin_ws $ colcon build --symlink-install # 添加环境变量 $ source ~/catkin_ws/install/setup.bash # 添加权限 $ sudo chmod 777 /dev/ttyUSB0 还要记得给激光雷达的USB口设置对应的权限。 运行激光雷达驱动 驱动安装好之后，就可以启动雷达了。 在旭日X3派的终端中，运行启动激光雷达的launch文件。 $ ros2 launch rplidar_ros2 rplidar_launch.py #启动雷达，X3PI $ ros2 run rviz2 rviz2 #查看点云，PC 启动成功后，我们在电脑端的Ubuntu系统中，在ros2环境下打开rviz2，然后将世界坐标系改为laser，然后添加LaserScan的可视化选项，并且把Reliability Policy的选项改为System Default，此时就可以看到激光雷达的点云数据了。","text_tokens":["世界","params","机器","例如","专门","建立","速度","摄像","局域","输入","明","下","画面","reliability","chmod","view","编译","这款","最","快","移动机器人","之一","找到","两根","接线","同样","成熟","而且","即可","标准","rqt","build"," ","号","csi","不仅","所以","源码","功能","上用","外设","使用","一个","除此之外","ttyusb0",".","slamtec","需要","上方","和","改为","会","type","成功","ros2","坐标","catkin","show","7","git","也就是说","再启动","列出","软","并且","空间","左上方","这里","完成","最后","policy","看到","也","兼容","=","数据","dev","先","环境变量","广泛","通","source","ros","桌面","config","设备","为了","采用","文件","浏览器","把","起来","之外","配置文件","python3","就是说","mjpeg","生活","打印","src","打开","x3pi","大多","复杂","试一试","相机","+","了","usb","_","如果","占用","x","rviz2","run","传输","uart","cam","来","权限","再","接口","、","clone","节点","还有","连接","啦","手机","启动","设置","launch","sbin","pc","将","首先","驱动","摄像头","上","我们","雷达","激光","比如","外接","然后","发送到","听说","通信","送到","地址","通过","指令","线","包中","执行","大家","togetherros","旭日","修改","c","相比","mkdir","都","坐标系","安装","派","$","这时","用","端的","名","在","很多","动机","借口","运行","apt","video0","浏览","rplidar","中","local","移动","可以","原理","colcon","更","进入","com","是","打印机","install","点击","：","图像","--","像头","好","之后","口","一下","环境变","与","端","link","#","添加","终端","a","记得","opt","args","于","环境","它","给","webservice","这个","tros","nginx","更加","串行总线","cd","方法","create","可","/","让","laserscan","类似","only","x3","ubuntu","的","py","工作","点云","那","被","常用","自动","变量","github","后","直接","setup","system","sudo","因为","总线","p","印机","~","还要","选择","实时","websocket","default","串行","硬件","web","foxy","该","vim","展示","新","symlink","讲到","左上","规范","。","常","网页","777","除此","激光雷达","https","可视化","到","出来",":","查看","bash","用来","进行","包","-","yaml","可视","topic","目录","配置","之前","他","想","电脑","一种","方式","传输数据","laser","video8","试试","soft","跑","机器人","就是","image","能","hobot","系统","对应","分配","局域网","此时","ws","包了","进去","下载","应该","发送","话题","，","demo","提供","选项","列出来","有","share","通讯","就","所有","b","能够","lib","true"],"title":"USB外设驱动","title_tokens":["usb","驱动","外设"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#usb","text":"在电脑上，我们最常用的接口之一，应该就是USB了，相比之前讲到的外设通信方法，USB更加复杂，速度也更快。","text_tokens":["电脑","讲到","速度","上","我们","。","的","应该","相比","接口","，","复杂","最","更","快","之一","外设","常用","通信","之前","就是","也","了","usb","更加","方法","在"],"title":"USB外设驱动","title_tokens":["usb","驱动","外设"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#usb_1","text":"USB不仅是我们生活中最常用的一种接口，也是一种串行总线的通讯方式。他类似于UART，有两根线用来传输数据。 而且USB还有专门的接口规范，比如我们常听说的USB Type A、Type C。例如这里列出来的USB口，打印机常用的B口，手机上用的C口，都是标准的USB接口。 USB的接口规范，使用广泛，很多成熟的外设都是采用的USB接口。","text_tokens":["他","口","印机","而且","打印","例如","专门","用来","type","一种","方式","类似","传输数据","标准","我们","规范","传输","广泛","。","c","常","uart","的"," ","不仅","比如","a","都","，","接口","中","、","采用","列出来","最","有","列出","听说","还有","上用","外设","常用","通讯","于","使用","这里","串行","是","b","打印机","手机","也","usb","数据","串行总线","出来","两根","线","总线","成熟","很多","生活"],"title":"USB通信原理","title_tokens":["usb","通信","原理"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_1","text":"比如USB摄像头。","text_tokens":["。","usb","摄像头","摄像","比如","像头"],"title":"摄像头驱动","title_tokens":["摄像头","驱动","摄像","像头"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_2","text":"这里我们使用一个USB摄像头，通过一个相机驱动把它跑起来，并且可以看到图像数据。 方法有很多中，TogetherROS兼容ROS2的所有功能，那我们就先试试ROS2中的标准方法，在旭日X3PI上直接安装一个usb_cam功能包。","text_tokens":["先","驱动","摄像头","togetherros","摄像","上","旭日","ros2","我们","标准","包","。","试试","的","cam"," ","x3pi","那","，","中","安装","跑","把","起来","可以","有","功能","并且","就","一个","使用","所有","这里","它","相机","看到","兼容","直接","usb","通过","数据","图像","方法","像头","在","很多","_"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#ros2","text":"","text_tokens":[],"title":"ROS2相机驱动","title_tokens":["ros2","驱动","相机"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_3","text":"首先安装ROS2的相机驱动包： # 安装功能包 $ sudo apt install ros-foxy-usb-cam 安装好之后，为了让系统能够找到该功能包，需要进入tros的目录，建立对应的软连接。 # 建立软连接 $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 因为旭日X3Pi可以连接csi摄像头，设备名占用了video0-7，所以外接的USB摄像头会被自动分配到video8，我们需要在ROS2的功能包中修改一下设备号。 # 修改配置文件 $ cd /opt/tros/share/usb_cam/config $ sudo vim params.yaml 然后给这个设备添加权限，最后再设置TogetherROS的环境变量就可以使用啦。 # 添加可执行权限 $ sudo chmod 777 /dev/video8 # 添加环境变量 $ source /opt/tros/local_setup.bash","text_tokens":["params","建立","摄像","apt","video0","。","chmod","x3pi","777","local","可以","进入","找到","相机","install","了","usb","到","：","--","像头","好","之后","_","bash","占用","一下","-","包","环境变","link","#","yaml","添加","cam"," ","号","权限","csi","再","所以","opt","功能","目录","配置","环境","使用","连接","给","啦","设置","这个",".","tros","cd","需要","create","可","/","首先","让","驱动","会","摄像头","ros2","我们","video8","的","py","7","soft","被","外接","软","然后","自动","变量","最后","setup","sudo","因为","包中","dev","系统","执行","对应","togetherros","旭日","分配","修改","环境变量","source","ros","config","设备","，","安装","为了","文件","share","$","就","配置文件","foxy","名","能够","该","vim","python3","在"],"title":"安装与配置","title_tokens":["配置","与","安装"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_4","text":"我们来试一试。 $ ros2 launch usb_cam demo_launch.py #启动相机，X3Pi $ ros2 run rqt_image_view rqt_image_view #查看图像，PC 这里直接在X3Pi中启动usb_cam的launch文件，然后再启动一个能和他通信的Ubuntu桌面系统，打开rqt_image_view，选择对应的话题，就可以看到图像了。也就是说明我们成功的用TROS驱动了这个USB摄像头。","text_tokens":["他","对应","成功","驱动","摄像头","摄像","ros2","我们","明","run","rqt","。","#","ubuntu","打开","来","cam"," ","的","选择","py","x3pi","view","桌面","系统","话题","，","demo","中","文件","也就是说","再启动","然后","试一试","可以","在","$","通信","就","一个","这里","用","相机","启动","就是","看到","image","能","了","launch","usb",".","直接","tros","这个","图像","pc","就是说","像头","和","查看","_"],"title":"运行相机驱动","title_tokens":["相机","驱动","运行"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#togetherros","text":"除此之外，TogetherROS中也提供了USB摄像头的驱动节点，连接摄像头之后，直接设置设备的权限和TogetherROS的环境变量就可以使用了。 $ source /opt/tros/local_setup.bash $ sudo chmod 777 /dev/video8 $ ros2 launch hobot_usb_cam hobot_usb_cam.launch.py 之后可以再打开一个新的终端，输入对应的指令，然后启动websocket这个节点，就可以把image这个话题的数据发送到网页了。 $ source /opt/tros/local_setup.bash $ cd /opt/tros/lib/websocket/webservice $ sudo chmod +x ./sbin/nginx $ sudo ./sbin/nginx -p . $ ros2 run websocket websocket --ros-args -p image_topic: = /image -p image_type: = mjpeg -p only_show_image: = true 这时我们直接打开在通一个局域网下的浏览器，输入X3Pi的地址，就可以进去到一个网页，点击左上方web端展示即可看到USB摄像头的实时画面。","text_tokens":["新","摄像","局域","左上","输入","下","画面","。","打开","浏览","chmod","网页","x3pi","777","中","local","可以","除此","+","点击","了","usb","到","--",":","像头","mjpeg","之后","_","bash","即可","x","-","环境变","端","run","cam"," ","权限","终端","再","节点","opt","topic","args","环境","使用","一个","连接","除此之外","webservice","启动","设置","launch","这个",".","sbin","tros","nginx","cd","上方","和","/","驱动","type","摄像头","only","ros2","我们","video8","的","py","show","然后","发送到","在","左上方","变量","送到","看到","也","image","=","直接","setup","地址","数据","sudo","指令","hobot","dev","p","对应","togetherros","环境变量","局域网","通","进去","source","ros","发送","话题","设备","，","提供","实时","浏览器","把","websocket","之外","$","就","这时","web","展示","lib","true"],"title":"TogetherROS相机驱动","title_tokens":["togetherros","驱动","相机"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_5","text":"移动机器人中常用的激光雷达大多也是USB借口的，比如这款rplidar。","text_tokens":["机器","动机","借口","。","的","雷达","大多","激光","比如","rplidar","，","这款","中","移动","机器人","移动机器人","激光雷达","常用","是","也","usb"],"title":"激光雷达驱动","title_tokens":["激光","驱动","雷达","激光雷达"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_6","text":"如果我们想把它跑起来，同样需要一个驱动包，大家可以在工作空间中下载雷达的驱动包，然后进行编译。编译完成后，添加环境变量就可以使用这个功能包了。 # 下载源码 $ mkdir -p catkin_ws/src $ cd ~/catkin_ws/src $ git clone -b ros2 https://github.com/slamtec/rplidar_ros.git # 编译 $ cd ~/catkin_ws $ colcon build --symlink-install # 添加环境变量 $ source ~/catkin_ws/install/setup.bash # 添加权限 $ sudo chmod 777 /dev/ttyUSB0 还要记得给激光雷达的USB口设置对应的权限。","text_tokens":["symlink","src","。","chmod","编译","rplidar","777","中","可以","colcon","激光雷达","com","install","https","usb","--",":","同样","_","如果","口","bash","进行","包","环境变","-","build","#","添加"," ","权限","clone","记得","源码","功能","环境","一个","使用","它","给","ttyusb0","设置","这个",".","slamtec","cd","需要","/","想","驱动","ros2","我们","的","catkin","雷达","工作","激光","git","跑","然后","空间","完成","变量","github","后","setup","sudo","dev","p","对应","大家","环境变量","ws","~","包了","还要","source","下载","ros","mkdir","，","把","起来","$","就","b","在"],"title":"安装与配置","title_tokens":["配置","与","安装"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_7","text":"驱动安装好之后，就可以启动雷达了。 在旭日X3派的终端中，运行启动激光雷达的launch文件。 $ ros2 launch rplidar_ros2 rplidar_launch.py #启动雷达，X3PI $ ros2 run rviz2 rviz2 #查看点云，PC 启动成功后，我们在电脑端的Ubuntu系统中，在ros2环境下打开rviz2，然后将世界坐标系改为laser，然后添加LaserScan的可视化选项，并且把Reliability Policy的选项改为System Default，此时就可以看到激光雷达的点云数据了。","text_tokens":["世界","改为","电脑","驱动","成功","laserscan","x3","rviz2","运行","laser","旭日","ros2","我们","此时","run","下","。","#","ubuntu","坐标","打开","添加","reliability","的"," ","雷达","终端","py","激光","x3pi","点云","坐标系","rplidar","系统","中","，","安装","选项","文件","派","把","可以","然后","可视","激光雷达","$","并且","default","环境","就","端的","启动","查看","policy","看到","了","后","launch",".","可视化","数据","system","pc","好","将","之后","在","_"],"title":"运行激光雷达驱动","title_tokens":["驱动","雷达","激光雷达","激光","运行"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/","text":"机器视觉介绍 机器视觉概念 机器视觉， 就是用计算机来模拟人的视觉功能，但这并不仅仅是人眼的简单延伸，更重要的是像人脑一样，可以从客观事物的图像中提取信息，进行处理并加以理解，最终用于实际检测、控制等场景。 获取图像信息相对简单，但想让机器人理解图像中千变万化的物品，就难上加难了。 为了解决这一系列复杂的问题，机器视觉也是一个涉猎广泛的交叉学科，横跨人工智能、神经生物学、物理学、计算机科学、图像处理、模式识别等诸多领域。时至今日，在各个领域中，都有大量开发者或组织参与其中，也积累了众多技术，不过依然还有很多问题亟待解决，就像我们对自己大脑的研究也只是冰山一角一样，机器视觉的研究也将会是一个长久的工作。 机器视觉相关的关键技术也有不少，比如视觉图像的采集和信号处理，这个过程主要是通过传感器硬件采集外部光信号的过程，光信号最终会转变成数字电路的信号，便于下一步的处理；类似左边图片中看到的效果，获取图像之后，更重要的是要识别图像中的物体、确定物体的位置、或者检测物品的变化，这就要用到模式识别或者机器学习等技术，这个部分也是当今机器视觉研究的重点。 和人类的两只眼睛不同，机器用于获取图像的传感器种类较为丰富，可以是一个摄像头，也可以是两个摄像头，还可以是三个、四个、很多个摄像头，不仅可以获取颜色信息，还可以通过红外相机获取深度或者能量信息，这可比人眼获取的信息丰富多了，当然，这也会对后期的处理带来不同的计算压力。 在工业领域，机器视觉系统已经被广泛用于自动检验、工件加工、装配自动化以及生产过程控制等工作。随着机器人的快速发展和应用，机器视觉也逐渐应用于农业机器人、AMR物流机器人、服务机器人、无人驾驶汽车等各种机器人，活跃在农场、物流、仓储、交通、医院等多种环境中。 机器视觉流程 人类视觉擅长于对复杂、非结构化的场景进行定性解释，但机器视觉凭借速度、精度和可重复性等优势，非常适合对结构化场景进行定量测量。 一般来讲，典型的机器视觉系统可以分为如图所示的三个部分：图像采集、图像分析和控制输出。 图像采集注重对原始光学信号的采样，是整个视觉系统的传感部分，核心是相机和相关的配件。 其中光源用于照明待检测的物体，并突显其特征，便于让相机能够更好的捕捉图像。光源是影响机器视觉系统成像质量的重要因素，好的光源和照明效果对机器视觉判断影响很大。当前，机器视觉的光源已经突破人眼的可见光范围，其光谱范围跨越红外光（IR）、可见光、紫外光（UV）乃至X射线波段，可实现更精细和更广泛的检测范围，以及特殊成像需求。 相机被喻为机器视觉系统的“眼睛”，承担着图像信息采集的重要任务。图像传感器又是相机的核心元器件，主要有CCD和CMOS两种类型，其工作原理是将相机镜头接收到的光学信号转化成数字信号。选择合适的相机是机器视觉系统设计的重要环节，不仅直接决定了采集图像的质量和速度，同时也与整个系统的运行模式相关。 图像处理系统接收到相机传来的数字图像之后，通过各种软件算法进行图像特征提取、特征分析和数据标定，最后进行判断。这是各种视觉算法研究最为集中的部分，从传统的模式识别算法，到当前热门的各种机器学习方法，都是为了更好的让机器理解环境。 对于人来讲，识别某一个物体是苹果似乎理所当然，但是对于机器人来讲，就需要提取各种各样不同种类、颜色、形状的苹果特征，然后训练得到一个苹果的“模型”，再通过这个模型对实时图像做匹配，从而分析面前这个东西到底是不是苹果。 在机器人系统中，视觉识别的结果最终要和机器人的某些行为绑定，也就是第三个部分——控制输出，包含I/O接口、运动控制、可视化显示等。当图像处理系统完成图像分析后，将判断的结果发给机器人控制系统，接下来机器人完成运动控制。比如视觉识别到了抓取目标的位置，通过IO口控制夹爪完成抓取和放置，过程中识别的结果和运动的状态，都可以在上位机中显示，方便我们监控。 就机器视觉而言，在这三个部分中，图像分析占据了绝对的核心，涉及的方法、使用的各种开源软件或者框架非常多，这也是我们后续开发的重点，TogetherROS中提供了大量的算法、工具和功能支持。 旭日X3派配置 了解了机器视觉的基本原理和流程，相信大家对视觉应用已经充满了期待，我们这就准备开始。 后续课程中，我们将继续在旭日X3派的开发板上，使用TogetherROS实现各种各样的视觉例程，不过我们得先找到一个相机，比如usb相机或者MIPI接口配套的相机模块，然后连接到开发板对应的接口上。 电脑和开发板之前通过网线连接，便于我们查看视觉处理的结果，速度更快。 如果有HDMI屏幕的话，也可以准备好，稍后需要使用的时候插上查看结果，如果没有的话，也没有影响，后续我们会使用一套网络传输工具，通过板卡的IP地址，就可以看到图像处理的实时状态啦。 USB相机图像采集 关于相机的驱动，请大家也再确认一下，这是后续视觉处理的基础。 如果是USB相机的话，可以参考这个过程验证下是否可以顺利看到图像。 # 旭日X3派 $ sudo apt install ros-foxy-usb-cam $ cd /opt/tros $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros $ source /opt/tros/local_setup.bash $ ros2 launch usb_cam demo_launch.py # 修改params.yaml配置文件中的设备号 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view MIPI相机图像采集 如果使用的是MIPI相机的话，可以参考这个流程驱动相机并显示图像。 # 旭日X3派 $ source /opt/tros/local_setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p video_device: = F37 -p image_width: = 960 -p image_height: = 540 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view 为了提高图像的编码和传输效率，我们建议大家使用MIPI接口的相机，后续应用功能我们也会以该相机为主。","text_tokens":["关键技术","变化","机器","params","提高","工具","速度","摄像","基础","下","爪","用于","过程","view","时至今日","范围","物品","装配","方便","三个","网线","转化","例程","标定","快","效率","开发","找到","典型","精细","概念","无人驾驶","交通","“","或者","参与","个","建议","mipi","突破","最终","”","人","两种","rqt"," ","红外光","号","不仅","活跃","功能","当然","从","发展","一个","使用","镜头","本原",".","后续","需要","信息","和","uv","基本原理","会","状态","东西","ros2","得到","眼睛","没有","是不是","并","因素","环节","研究","光学","得","逐渐","问题","完成","最后","便于","上位","期待","看到","也","=","人工","数据","传统","似乎","监控","以及","识别","ccd","开源","先","一般来讲","模型","理解","计算机科学","屏幕","相对","实现","广泛","做","流程","接下来","source","ros","智能","（","交叉","设备","感器","为了","输出","科学","形状","文件","面前","是否","依然","传感器","热门","顺利","；","控制系统","抓取","需求","农场","一步","驾驶","数字图像","不过","配置文件","python3","对","神经","以","模式","占据","o","加工","外部","模式识别","种类","开始","解释","复杂","稍后","交叉学科","光源","开发板","不同","生物学","相机","两个","相关","了","usb","确认","学科","物理学","大脑","amr","定性","_","如果","长久","设计","物体","cmos","接收","f37","关键","冰山一角","run","传输","来","cam","效果","再","任务","接口","仅仅","、","亟待解决","一系列","还有","后期","充满","连接","难上加难","啦","已经","launch","第三","配件","pc","模拟","将","一角","各样","算法","驱动","获取","视觉","摄像头","时候","关于","上","解决","我们","人眼","更好","绝对","影响","多种","要","比如","支持","转变成","然后","540","不少","系列","生物","ir","不仅仅","紫外","地址","通过","结果","分析","擅长于","同时","对于","下来","相信","非常","行为","ip地址","应用","发给","大家","togetherros","冰山","丰富","特征分析","旭日","修改","各种","主要","着","都","来讲","涉及","生产","派","深度","$","用","数字信号","像","化成","紫外光","亟待","重要环节","苹果","待","在","很多","但","某些","凭借","运行","apt","医院","计算","可见","数字","处理","左边","决定","中","复性","local","诸多","可以","原理","验证","更","控制","还","是","仓储","这是","配套","install","各个领域","带来","这","：","图像","千变万化","领域","至今","或","--","像头","定量","好","之后","口","如图所示","一下","与","插上","link","#","照明","采集","承担","擅长","类型","opt","args","于","环境","但是","场景","数字电","光谱","合适","这个","tros","cd","方法","的话","第三个","开发者","create","射线","可","/","快速","工业","让","横跨","类似","x3","重要","分为","物流","乃至","又","的","光","重复","特征","元器","py","工作","运动","hdmi","被","到底","软件","整个","x射线","自动","后","成像","直接","setup","确定","sudo","基本","检测","多","工件","p","捕捉","i","机中","自动化","结构化","各个","波段","某","转变","人类","能量","物理","选择","采样","较为","传来","非常适合","模块","实时","当","检验","用到","算机","结构","位置","硬件","集中","foxy","客观事物","该","目标","而言","video","核心","当今","部分","了解","质量","夹","电路","。","非","课程","适合","随着","颜色","喻为","匹配","判断","当前","只是","各种各样","积累","众多","继续","传感","可见光","不是","可视化","到","一样",":","无人","客观","查看","自己","测量","bash","学习","进行","一系","汽车","长于","理所当然","-","编码","请","重点","其","农业","训练","yaml","图片","原始","框架","理学","准备","人工智能","大量","可视","参考","io","压力","加以","配置","为主","所示","很大","之前","从而","960","服务","计算机","简单","图像处理","今日","显示","数字电路","信号","想","就要","介绍","电脑","height","最为","绑定","组织","事物","延伸","涉猎","两只","—","soft","变成","width","红外","元器件","机器人","网络","提取","重复性","就是","等","image","）","系统","特征提取","对应","实际","可比","注重","人脑","特殊","板卡","一套","device","信号处理","其中","，","提供","demo","一般","接下","有","突显","转化成","精度","就","跨越","包含","放置","技术","可重复性","器件","四个","能够","优势"],"title":"机器视觉介绍","title_tokens":["视觉","介绍","机器"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_1","text":"","text_tokens":[],"title":"机器视觉介绍","title_tokens":["视觉","介绍","机器"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_2","text":"机器视觉， 就是用计算机来模拟人的视觉功能，但这并不仅仅是人眼的简单延伸，更重要的是像人脑一样，可以从客观事物的图像中提取信息，进行处理并加以理解，最终用于实际检测、控制等场景。 获取图像信息相对简单，但想让机器人理解图像中千变万化的物品，就难上加难了。 为了解决这一系列复杂的问题，机器视觉也是一个涉猎广泛的交叉学科，横跨人工智能、神经生物学、物理学、计算机科学、图像处理、模式识别等诸多领域。时至今日，在各个领域中，都有大量开发者或组织参与其中，也积累了众多技术，不过依然还有很多问题亟待解决，就像我们对自己大脑的研究也只是冰山一角一样，机器视觉的研究也将会是一个长久的工作。 机器视觉相关的关键技术也有不少，比如视觉图像的采集和信号处理，这个过程主要是通过传感器硬件采集外部光信号的过程，光信号最终会转变成数字电路的信号，便于下一步的处理；类似左边图片中看到的效果，获取图像之后，更重要的是要识别图像中的物体、确定物体的位置、或者检测物品的变化，这就要用到模式识别或者机器学习等技术，这个部分也是当今机器视觉研究的重点。 和人类的两只眼睛不同，机器用于获取图像的传感器种类较为丰富，可以是一个摄像头，也可以是两个摄像头，还可以是三个、四个、很多个摄像头，不仅可以获取颜色信息，还可以通过红外相机获取深度或者能量信息，这可比人眼获取的信息丰富多了，当然，这也会对后期的处理带来不同的计算压力。 在工业领域，机器视觉系统已经被广泛用于自动检验、工件加工、装配自动化以及生产过程控制等工作。随着机器人的快速发展和应用，机器视觉也逐渐应用于农业机器人、AMR物流机器人、服务机器人、无人驾驶汽车等各种机器人，活跃在农场、物流、仓储、交通、医院等多种环境中。","text_tokens":["模式","关键技术","变化","机器","当今","但","加工","摄像","外部","部分","医院","下","模式识别","。","电路","种类","计算","用于","过程","数字","处理","时至今日","左边","随着","颜色","中","物品","只是","装配","复杂","积累","诸多","三个","可以","更","控制","众多","交叉学科","不同","生物学","开发","还","是","相机","仓储","传感","两个","各个领域","相关","了","带来","这","无人驾驶","图像","一样","千变万化","领域","至今","或","客观","学科","物理学","像头","无人","大脑","之后","参与","自己","或者","amr","长久","个","物体","学习","进行","一系","汽车","关键","最终","冰山一角","人","重点","农业","来","采集"," ","图片","效果","不仅","理学","仅仅","、","活跃","人工智能","亟待解决","功能","一系列","大量","当然","从","还有","压力","加以","后期","发展","于","环境","场景","一个","数字电","难上加难","已经","交通","这个","服务","计算机","简单","图像处理","今日","模拟","开发者","信息","将","一角","和","数字电路","信号","快速","工业","想","让","就要","会","获取","横跨","视觉","摄像头","类似","重要","解决","事物","我们","人眼","延伸","涉猎","物流","的","光","眼睛","多种","两只","工作","变成","要","比如","被","并","红外","研究","转变成","机器人","逐渐","问题","不少","提取","系列","自动","生物","便于","就是","等","也","不仅仅","看到","人工","通过","确定","以及","检测","识别","多","系统","工件","应用","自动化","实际","冰山","丰富","可比","理解","计算机科学","各个","人脑","相对","广泛","转变","人类","能量","各种","信号处理","物理","其中","主要","智能","都","较为","交叉","，","生产","感器","为了","科学","深度","有","依然","检验","用到","算机","就","传感器","；","用","技术","位置","像","硬件","对","农场","一步","四个","驾驶","客观事物","不过","亟待","组织","神经","在","很多"],"title":"机器视觉概念","title_tokens":["视觉","机器","概念"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_3","text":"人类视觉擅长于对复杂、非结构化的场景进行定性解释，但机器视觉凭借速度、精度和可重复性等优势，非常适合对结构化场景进行定量测量。 一般来讲，典型的机器视觉系统可以分为如图所示的三个部分：图像采集、图像分析和控制输出。 图像采集注重对原始光学信号的采样，是整个视觉系统的传感部分，核心是相机和相关的配件。 其中光源用于照明待检测的物体，并突显其特征，便于让相机能够更好的捕捉图像。光源是影响机器视觉系统成像质量的重要因素，好的光源和照明效果对机器视觉判断影响很大。当前，机器视觉的光源已经突破人眼的可见光范围，其光谱范围跨越红外光（IR）、可见光、紫外光（UV）乃至X射线波段，可实现更精细和更广泛的检测范围，以及特殊成像需求。 相机被喻为机器视觉系统的“眼睛”，承担着图像信息采集的重要任务。图像传感器又是相机的核心元器件，主要有CCD和CMOS两种类型，其工作原理是将相机镜头接收到的光学信号转化成数字信号。选择合适的相机是机器视觉系统设计的重要环节，不仅直接决定了采集图像的质量和速度，同时也与整个系统的运行模式相关。 图像处理系统接收到相机传来的数字图像之后，通过各种软件算法进行图像特征提取、特征分析和数据标定，最后进行判断。这是各种视觉算法研究最为集中的部分，从传统的模式识别算法，到当前热门的各种机器学习方法，都是为了更好的让机器理解环境。 对于人来讲，识别某一个物体是苹果似乎理所当然，但是对于机器人来讲，就需要提取各种各样不同种类、颜色、形状的苹果特征，然后训练得到一个苹果的“模型”，再通过这个模型对实时图像做匹配，从而分析面前这个东西到底是不是苹果。 在机器人系统中，视觉识别的结果最终要和机器人的某些行为绑定，也就是第三个部分——控制输出，包含I/O接口、运动控制、可视化显示等。当图像处理系统完成图像分析后，将判断的结果发给机器人控制系统，接下来机器人完成运动控制。比如视觉识别到了抓取目标的位置，通过IO口控制夹爪完成抓取和放置，过程中识别的结果和运动的状态，都可以在上位机中显示，方便我们监控。 就机器视觉而言，在这三个部分中，图像分析占据了绝对的核心，涉及的方法、使用的各种开源软件或者框架非常多，这也是我们后续开发的重点，TogetherROS中提供了大量的算法、工具和功能支持。","text_tokens":["模式","机器","核心","o","占据","但","某些","工具","速度","凭借","运行","部分","质量","夹","模式识别","。","种类","非","爪","适合","用于","可见","过程","数字","处理","范围","决定","喻为","颜色","匹配","判断","当前","中","解释","复性","各种各样","方便","复杂","三个","转化","可以","原理","标定","控制","更","光源","不同","开发","是","相机","这是","典型","传感","精细","相关","可见光","了","不是","可视化","到","这","：","图像","定量","好","“","之后","或者","定性","测量","口","设计","如图所示","物体","cmos","接收","学习","进行","理所当然","长于","突破","”","最终","与","人","两种","其","重点","照明","训练","采集"," ","效果","红外光","原始","承担","框架","擅长","不仅","任务","类型","再","接口","、","功能","当然","可视","大量","从","io","环境","但是","场景","所示","很大","光谱","合适","一个","从而","镜头","使用","已经","这个","第三","后续","配件","图像处理","方法","需要","第三个","显示","信息","将","和","射线","可","各样","/","信号","算法","让","uv","最为","视觉","绑定","状态","重要","分为","东西","我们","人眼","更好","乃至","影响","又","得到","绝对","的","重复","特征","眼睛","元器","—","工作","要","运动","比如","支持","被","是不是","并","红外","因素","环节","到底","光学","元器件","研究","软件","整个","机器人","然后","x射线","完成","提取","重复性","最后","便于","ir","就是","等","也","上位","紫外","后","成像","直接","通过","数据","传统","监控","似乎","结果","分析","擅长于","同时","以及","对于","下来","检测","）","识别","非常","ccd","多","系统","行为","开源","捕捉","i","特征提取","机中","一般来讲","模型","发给","togetherros","结构化","理解","特征分析","注重","波段","特殊","某","实现","广泛","人类","做","各种","选择","其中","接下来","着","主要","采样","都","（","来讲","传来","，","涉及","非常适合","输出","感器","为了","实时","提供","形状","一般","接下","面前","有","当","突显","转化成","精度","跨越","传感器","热门","就","包含","放置","结构","控制系统","位置","可重复性","器件","数字信号","抓取","集中","对","需求","化成","数字图像","能够","紫外光","苹果","重要环节","目标","而言","待","优势","在"],"title":"机器视觉流程","title_tokens":["视觉","机器","流程"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#x3","text":"了解了机器视觉的基本原理和流程，相信大家对视觉应用已经充满了期待，我们这就准备开始。 后续课程中，我们将继续在旭日X3派的开发板上，使用TogetherROS实现各种各样的视觉例程，不过我们得先找到一个相机，比如usb相机或者MIPI接口配套的相机模块，然后连接到开发板对应的接口上。 电脑和开发板之前通过网线连接，便于我们查看视觉处理的结果，速度更快。 如果有HDMI屏幕的话，也可以准备好，稍后需要使用的时候插上查看结果，如果没有的话，也没有影响，后续我们会使用一套网络传输工具，通过板卡的IP地址，就可以看到图像处理的实时状态啦。","text_tokens":["机器","工具","速度","了解","。","课程","处理","开始","中","各种各样","稍后","网线","例程","可以","原理","更","快","开发板","继续","开发","找到","相机","配套","了","usb","到","这","图像","好","查看","或者","如果","mipi","插上","传输"," ","接口","准备","充满","使用","一个","之前","连接","啦","已经","本原","后续","图像处理","的话","需要","将","和","各样","基本原理","电脑","会","视觉","时候","状态","x3","上","我们","影响","的","没有","比如","hdmi","然后","网络","得","便于","期待","看到","也","地址","通过","结果","相信","基本","先","ip地址","对应","应用","大家","togetherros","屏幕","旭日","实现","各种","板卡","流程","一套","，","模块","实时","派","有","就","不过","对","在"],"title":"旭日X3派配置","title_tokens":["配置","旭日","派","x3"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#usb","text":"关于相机的驱动，请大家也再确认一下，这是后续视觉处理的基础。 如果是USB相机的话，可以参考这个过程验证下是否可以顺利看到图像。 # 旭日X3派 $ sudo apt install ros-foxy-usb-cam $ cd /opt/tros $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros $ source /opt/tros/local_setup.bash $ ros2 launch usb_cam demo_launch.py # 修改params.yaml配置文件中的设备号 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view","text_tokens":["params","基础","apt","下","。","过程","view","处理","中","local","可以","验证","是","这是","相机","install","usb","确认","图像","--","_","如果","bash","一下","-","run","link","rqt","#","请","yaml","cam"," ","号","再","opt","参考","配置","launch","这个",".","tros","后续","cd","pc","的话","create","/","驱动","视觉","x3","关于","ros2","的","py","soft","看到","也","image","setup","sudo","大家","旭日","修改","source","ros","设备","，","demo","文件","派","是否","$","顺利","配置文件","foxy","python3"],"title":"USB相机图像采集","title_tokens":["usb","图像","采集","相机"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#mipi","text":"如果使用的是MIPI相机的话，可以参考这个流程驱动相机并显示图像。 # 旭日X3派 $ source /opt/tros/local_setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p video_device: = F37 -p image_width: = 960 -p image_height: = 540 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view 为了提高图像的编码和传输效率，我们建议大家使用MIPI接口的相机，后续应用功能我们也会以该相机为主。","text_tokens":["如果","p","video","bash","应用","提高","驱动","mipi","f37","height","建议","大家","会","x3","-","旭日","ros2","我们","run","rqt","传输","。","#","编码","流程","device","的","cam"," ","source","view","ros","以","width","，","接口","并","local","为了","派","opt","功能","可以","参考","540","$","args","效率","为主","使用","是","相机","也","image","=","960","foxy","这个","setup",".","tros","后续","该","图像","--",":","pc","的话","显示","和","/","_"],"title":"MIPI相机图像采集","title_tokens":["采集","图像","mipi","相机"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/","text":"CV图像加速处理 OpenCV是一个著名的机器视觉处理库，相信大家都有听过，这个库中有很多图像处理的基础算法，比如灰度变化、图像滤波等，不过这个库为了保证较好的通用性，主要通过软件实现各种算法，TogetherROS对此作了大量优化，我们一起来看看。 TogetherROS视觉加速 TogetherROS系统中集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 效果这么好，具体该如何使用呢？ 高斯滤波 我们先来看下图像处理中常用的高斯滤波算法，OpenCV和hobotcv，正面PK一下，我们也看看在程序中如何使用hobotcv的图像处理加速算法。 运行示例程序 $ cd /opt/tros/hobotcv_gaussian/sample $ ./build.sh $ cd output $ ./run.sh 代码解析 hobotcv_sample.cpp： // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include <algorithm> #include <chrono> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <utility> #include \"hobotcv_gaussian_blur.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" void analyse_result ( cv :: Mat & out_filter , cv :: Mat & cls_filter , std :: string flag_name ) { auto start_time = std :: chrono :: steady_clock :: now (); std :: cout << \"\" << std :: endl ; std :: cout << \"analyse_result start \" << std :: endl ; std :: cout << \"---------\" << flag_name << std :: endl ; std :: cout << \"out_filter type:\" << out_filter . type () << \",cols:\" << out_filter . cols << \",rows:\" << out_filter . rows << \",channel:\" << out_filter . channels () << std :: endl ; std :: cout << \"cls_filter type:\" << cls_filter . type () << \",cols:\" << cls_filter . cols << \",rows:\" << cls_filter . rows << \",channel:\" << cls_filter . channels () << std :: endl ; double minvalue , maxvalue ; cv :: Point mixIdx , maxIdx ; cv :: minMaxLoc ( out_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"out_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"out_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"out_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: minMaxLoc ( cls_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"cls_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"cls_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"cls_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: Mat mat_diff = cv :: abs ( out_filter - cls_filter ); cv :: Scalar sum_error = cv :: sum ( mat_diff >= 1 ); cv :: Scalar mean_error = cv :: sum ( mat_diff ) / ( mat_diff . rows * mat_diff . cols ); cv :: minMaxLoc ( mat_diff , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"\" << std :: endl ; std :: cout << \"diff diff diff\" << std :: endl ; std :: cout << \"mat_diff minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"mat_diff min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"mat_diff max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; std :: cout << \"\" << std :: endl ; std :: cout << \"error sum:\" << sum_error [ 0 ] << \",max:\" << maxvalue << \",mean_error:\" << mean_error [ 0 ] << std :: endl ; int time_used_ms_end = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: steady_clock :: now () - start_time ) . count (); std :: cout << \"analyse_result,time_used_ms_end:\" << time_used_ms_end << std :: endl ; std :: cout << \"analyse_result end \" << std :: endl ; std :: cout << \"\" << std :: endl ; } int main () { int32_t ret = -1 ; HobotGaussianBlurParam blur_param ; HOBOTCV_INITIALIZE_GAUSSIAN_BLUR_PARAM ( & blur_param ); HobotCVGaussianBlurHandle handle ; ret = HobotCVGaussianBlurCreate ( blur_param , & handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurCreate failed, error msg:%d \\n \" , ret ); return -1 ; } for ( int i = 0 ; i < 5 ; i ++ ) { std :: string m_tof_file_s = \"images/frame1_\" + std :: to_string ( i ) + \".png\" ; std :: cout << \"===================\" << std :: endl ; std :: cout << \"image name :\" << m_tof_file_s << std :: endl ; cv :: Mat src = cv :: imread ( m_tof_file_s , CV_16UC1 ); cv :: Mat dst ; cv :: medianBlur ( src , src , 3 ); auto start_time_infe = std :: chrono :: steady_clock :: now (); ret = HobotCVGaussianBlurProcess ( handle , & src , & dst ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurProcess failed, error msg:%d \\n \" , ret ); return -1 ; } int infe_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_infe ). count (); std :: cout << \"infe cost time:\" << infe_time << std :: endl ; auto start_time_gauss = std :: chrono :: steady_clock :: now (); cv :: Mat gaussian_tof ; cv :: GaussianBlur ( src , gaussian_tof , cv :: Size ( 3 , 3 ), 0 , 0 , cv :: BORDER_REPLICATE ); int guss_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_gauss ). count (); std :: cout << \"guss_time cost time:\" << guss_time << std :: endl ; float save_rate = float (( guss_time * 1.0 - infe_time * 1.0 ) / guss_time ); std :: cout << \"hobotcv save rate:\" << save_rate << std :: endl ; analyse_result ( dst , gaussian_tof , \"GaussianBlur\" ); std :: cout << \"-------------------------\" << std :: endl ; std :: cout << \"\" << std :: endl ; } ret = HobotCVGaussianBlurDestroy ( handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurDestroy failed, error msg:%d \\n \" , ret ); return -1 ; } return 0 ; } 图像裁剪与缩放 再来看另外一个案例，图像的裁剪与缩放，比如这样一幅图片，我们尝试剪裁左上角的一小块图像出来，或者对裁剪的某一块图像放大来看看。 运行示例程序 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/hobot_cv/config/ . $ ros2 run hobot_cv example 代码解析 // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include \"include/hobotcv_imgproc.h\" #include \"include/utils.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/core/types.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/opencv.hpp\" #include <fstream> #include <string> #include <chrono> #include <iostream> void writeImg ( cv :: Mat & mat , std :: string imgfile ) { cv :: Mat img_bgr ; cv :: cvtColor ( mat , img_bgr , cv :: COLOR_YUV2BGR_NV12 ); cv :: imwrite ( imgfile , img_bgr ); } int main () { std :: string image_file = \"config/test.jpg\" ; cv :: Mat bgr_mat = cv :: imread ( image_file , cv :: IMREAD_COLOR ); auto src_height = bgr_mat . rows ; auto src_width = bgr_mat . cols ; cv :: Mat srcmat_nv12 ; BGRToNv12 ( bgr_mat , srcmat_nv12 ); auto dst_height = src_height / 2 ; auto dst_width = src_width / 2 ; cv :: Mat dstmat_nv12 ( dst_height * 3 / 2 , dst_width , CV_8UC1 ); auto before_resize = std :: chrono :: system_clock :: now (); auto ret = hobot_cv :: hobotcv_resize ( srcmat_nv12 , src_height , src_width , dstmat_nv12 , dst_height , dst_width ); auto after_resize = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_resize - before_resize ). count (); if ( 0 == ret ) { std :: cout << \"resize finish, time: \" << interval << \"ms\" << std :: endl ; } writeImg ( dstmat_nv12 , \"./resize.jpg\" ); auto before_crop = std :: chrono :: system_clock :: now (); auto cropmat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , 200 , 200 , cv :: Range ( 0 , 200 ), cv :: Range ( 0 , 200 )); auto after_crop = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_crop - before_crop ). count (); std :: cout << \"crop finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropmat , \"./crop.jpg\" ); auto before_cropResize = std :: chrono :: system_clock :: now (); auto cropResizemat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , src_height , src_width , cv :: Range ( 200 , 400 ), cv :: Range ( 200 , 400 )); auto after_cropResize = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_cropResize - before_cropResize ). count (); std :: cout << \"cropResize finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropResizemat , \"./cropResize.jpg\" ); return 0 ; }","text_tokens":["变化","机器","例如",">","基础","下","int","analyse","initialize","hobotcvgaussianblurprocess","效率","imgfile","开发","this","cost","maxvalue","这样","minmaxloc","utils","max","rows","或者","all","程序","而且","---------","int32",",","reproduced","build","finish","cast"," ","cols","milliseconds","旋转","inc","rights","&","contains","一个","使用",".","和","灰度","types","in","}","type","*","小块","ros2","rate","filter","左上角","trade","便于","也","兼容","=","secrets","cvtcolor","倍","降低","to","double","8uc1","y","先","crop","n","一小","iomanip","mixidx","实现","img","resize","may","消耗","一小块","utility","source","config","为了","起来","来看","clock","尝试","queue","不过","string","abs","color","information","优化","对","ret","include","void","缩放","代码","copied","src","]","infe","如何","and","？","imread","flag","保证","+","了","now","软硬件","by","_","通用","material","x","run","iterator","分别","t","yuv2bgr","来","效果","再","接口","、","混合","transmitted","gaussianblur","after","协同","writeimg","float","cv","owned","auto","count","编程","算法","file","save","视觉","呢","算子","上","我们","sum","minvalue","比如","著名","hpp","gaussian","no","cpp","{","200","通过","相信","srcmat","应用","库","大家","togetherros","tof","s","endl","通用性","各种","c","上角","imgcodecs","主要","都","medianblur","400","$","库中","一块","example","way","opencv2","较","风格","scalar","fstream","在","很多","written","cout","16uc1","reserved","运行","name","printf","处理","\"","中","end","frame1","校正","std","可以","正面","更","是","提升","imwrite","(","：","图像","if","这么","test","好","pk","地平线","一下","与","cls","加速","具体","#","out","hobotcvgaussianblurdestroy","测试","guss","opt","error","before","\\","这个","tros","is","cd","0","方法","mat","/","听","failed","引擎","map","dstmat","images","的","r","做到","2","express","软件","常用","sample","core","bgrtonv12","proprietary","对比","setup","nv12","algorithm","软硬","i","confidential","of","ms","min","cp","or","某","过","性能","集成","h","be","border","++","msg","start","any","output","param","硬件","hobotcvgaussianblurcreate","该","bgr","hobotcvgaussianblurhandle","permission","disclosed","左上","the","。","copyright","3","看看","cropresize","sh","used","diff","对此","系统资源","iostream","到",":","出来","time","5","剪裁","return","bash","进行","for","-------------------------","size","-",";","replicate","图片","work","range","<","png","大量",")","dst","高斯","opencv","channel","horizon","interval","一","blur","案例","maxidx","图像处理","1","滤波","part","底层","cropresizemat","height","purpose","d","steady","result","率","帧","hobotcv","解析","2021","chrono","放大","作","handle","width","畸变","m","示例","%","资源","cropmat","[","等","image","hobotgaussianblurparam","gauss","多倍","hobot","1.0","甚至","channels","point","系统","另外","jpg","duration","microseconds","mean","一幅","robotics","，","有","imgproc","芯片","main","地平","without","裁剪","lib","system"],"title":"CV图像处理加速","title_tokens":["加速","图像","处理","图像处理","cv"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#cv","text":"OpenCV是一个著名的机器视觉处理库，相信大家都有听过，这个库中有很多图像处理的基础算法，比如灰度变化、图像滤波等，不过这个库为了保证较好的通用性，主要通过软件实现各种算法，TogetherROS对此作了大量优化，我们一起来看看。","text_tokens":["听","灰度","通用","变化","机器","算法","库","大家","视觉","togetherros","基础","我们","实现","。","通用性","各种","的","作","处理","过","主要","比如","著名","都","看看","，","、","为了","起来","大量","有","软件","库中","一个","opencv","对此","是","保证","一","等","了","这个","不过","较","通过","图像","相信","图像处理","优化","滤波","好","很多"],"title":"CV图像加速处理","title_tokens":["加速","cv","图像","处理"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#togetherros","text":"TogetherROS系统中集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 效果这么好，具体该如何使用呢？","text_tokens":["例如","缩放","运行","。","处理","3","如何","中","？","校正","可以","更","效率","系统资源","开发","提升","了","到","图像","这么","软硬件","好","而且","地平线","进行","与","加速","具体","分别"," ","效果","接口","、","旋转","混合","测试","高斯","opencv","使用","协同","方法","滤波","cv","编程","底层","引擎","视觉","呢","算子","上","率","我们","帧","的","做到","2","畸变","软件","常用","资源","便于","等","对比","兼容","通过","多倍","倍","hobot","软硬","降低","甚至","系统","应用","库","togetherros","实现","消耗","性能","集成","，","芯片","硬件","地平","该","风格","在"],"title":"TogetherROS视觉加速","title_tokens":["视觉","togetherros","加速"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_1","text":"我们先来看下图像处理中常用的高斯滤波算法，OpenCV和hobotcv，正面PK一下，我们也看看在程序中如何使用hobotcv的图像处理加速算法。","text_tokens":["先","程序","算法","一下","我们","hobotcv","下","加速","。","的","处理","如何","看看","，","中","来看","正面","高斯","常用","opencv","使用","也","图像","图像处理","滤波","和","在","pk"],"title":"高斯滤波","title_tokens":["滤波","高斯"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_2","text":"$ cd /opt/tros/hobotcv_gaussian/sample $ ./build.sh $ cd output $ ./run.sh","text_tokens":["build","sh","opt","."," ","tros","$","cd","run","gaussian","sample","/","hobotcv","output","_"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_3","text":"hobotcv_sample.cpp： // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include <algorithm> #include <chrono> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <utility> #include \"hobotcv_gaussian_blur.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" void analyse_result ( cv :: Mat & out_filter , cv :: Mat & cls_filter , std :: string flag_name ) { auto start_time = std :: chrono :: steady_clock :: now (); std :: cout << \"\" << std :: endl ; std :: cout << \"analyse_result start \" << std :: endl ; std :: cout << \"---------\" << flag_name << std :: endl ; std :: cout << \"out_filter type:\" << out_filter . type () << \",cols:\" << out_filter . cols << \",rows:\" << out_filter . rows << \",channel:\" << out_filter . channels () << std :: endl ; std :: cout << \"cls_filter type:\" << cls_filter . type () << \",cols:\" << cls_filter . cols << \",rows:\" << cls_filter . rows << \",channel:\" << cls_filter . channels () << std :: endl ; double minvalue , maxvalue ; cv :: Point mixIdx , maxIdx ; cv :: minMaxLoc ( out_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"out_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"out_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"out_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: minMaxLoc ( cls_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"cls_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"cls_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"cls_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: Mat mat_diff = cv :: abs ( out_filter - cls_filter ); cv :: Scalar sum_error = cv :: sum ( mat_diff >= 1 ); cv :: Scalar mean_error = cv :: sum ( mat_diff ) / ( mat_diff . rows * mat_diff . cols ); cv :: minMaxLoc ( mat_diff , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"\" << std :: endl ; std :: cout << \"diff diff diff\" << std :: endl ; std :: cout << \"mat_diff minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"mat_diff min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"mat_diff max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; std :: cout << \"\" << std :: endl ; std :: cout << \"error sum:\" << sum_error [ 0 ] << \",max:\" << maxvalue << \",mean_error:\" << mean_error [ 0 ] << std :: endl ; int time_used_ms_end = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: steady_clock :: now () - start_time ) . count (); std :: cout << \"analyse_result,time_used_ms_end:\" << time_used_ms_end << std :: endl ; std :: cout << \"analyse_result end \" << std :: endl ; std :: cout << \"\" << std :: endl ; } int main () { int32_t ret = -1 ; HobotGaussianBlurParam blur_param ; HOBOTCV_INITIALIZE_GAUSSIAN_BLUR_PARAM ( & blur_param ); HobotCVGaussianBlurHandle handle ; ret = HobotCVGaussianBlurCreate ( blur_param , & handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurCreate failed, error msg:%d \\n \" , ret ); return -1 ; } for ( int i = 0 ; i < 5 ; i ++ ) { std :: string m_tof_file_s = \"images/frame1_\" + std :: to_string ( i ) + \".png\" ; std :: cout << \"===================\" << std :: endl ; std :: cout << \"image name :\" << m_tof_file_s << std :: endl ; cv :: Mat src = cv :: imread ( m_tof_file_s , CV_16UC1 ); cv :: Mat dst ; cv :: medianBlur ( src , src , 3 ); auto start_time_infe = std :: chrono :: steady_clock :: now (); ret = HobotCVGaussianBlurProcess ( handle , & src , & dst ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurProcess failed, error msg:%d \\n \" , ret ); return -1 ; } int infe_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_infe ). count (); std :: cout << \"infe cost time:\" << infe_time << std :: endl ; auto start_time_gauss = std :: chrono :: steady_clock :: now (); cv :: Mat gaussian_tof ; cv :: GaussianBlur ( src , gaussian_tof , cv :: Size ( 3 , 3 ), 0 , 0 , cv :: BORDER_REPLICATE ); int guss_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_gauss ). count (); std :: cout << \"guss_time cost time:\" << guss_time << std :: endl ; float save_rate = float (( guss_time * 1.0 - infe_time * 1.0 ) / guss_time ); std :: cout << \"hobotcv save rate:\" << save_rate << std :: endl ; analyse_result ( dst , gaussian_tof , \"GaussianBlur\" ); std :: cout << \"-------------------------\" << std :: endl ; std :: cout << \"\" << std :: endl ; } ret = HobotCVGaussianBlurDestroy ( handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurDestroy failed, error msg:%d \\n \" , ret ); return -1 ; } return 0 ; }","text_tokens":["include","hobotcvgaussianblurhandle","void","permission","written","cout","16uc1","disclosed","reserved",">","name","the","copied","src","]","printf","copyright","int","analyse","\"","infe","3","and","end","frame1","initialize","std","hobotcvgaussianblurprocess","used","imread","diff","iostream","flag","this","+","cost","maxvalue","(","minmaxloc","：",":","if","max","time","now","5","return","rows","by","_","all","material","---------","int32","for","-------------------------",",","x","size","-","reproduced","cls","iterator","out","#",";","t","replicate","cast"," ","hobotcvgaussianblurdestroy","work","cols","milliseconds","<","png","transmitted","gaussianblur","guss","error","inc",")","dst","rights","&","contains","channel","horizon","\\","blur",".","maxidx","is","0","1","mat","float","cv","/","owned","auto","part","count","file","in","}","failed","type","save","purpose","*","d","steady","map","result","2021","hobotcv","images","chrono","sum","rate","minvalue","filter","handle","hpp","express","m","%","gaussian","no","sample","trade","cpp","core","{","proprietary","[","image","=","hobotgaussianblurparam","gauss","secrets","algorithm","to","double","1.0","channels","point","y","i","confidential","of","n","ms","tof","iomanip","min","or","s","mixidx","endl","c","may","duration","imgcodecs","microseconds","utility","mean","robotics","h","be","medianblur","clock","border","++","queue","imgproc","way","msg","main","start","any","param","opencv2","without","hobotcvgaussianblurcreate","string","abs","scalar","information","fstream","ret"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_4","text":"再来看另外一个案例，图像的裁剪与缩放，比如这样一幅图片，我们尝试剪裁左上角的一小块图像出来，或者对裁剪的某一块图像放大来看看。","text_tokens":["缩放","一小","小块","左上","另外","与","我们","某","。","上角","放大","的","一小块","来","图片","一幅","左上角","再","比如","看看","，","来看","尝试","一块","一个","裁剪","这样","案例","图像","出来","剪裁","对","或者"],"title":"图像裁剪与缩放","title_tokens":["缩放","与","裁剪","图像"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_5","text":"$ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/hobot_cv/config/ . $ ros2 run hobot_cv example","text_tokens":["bash","/","-","cp","ros2","run"," ","source","r","config","opt","$","example","setup",".","tros","hobot","cv","lib","_"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_6","text":"// Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include \"include/hobotcv_imgproc.h\" #include \"include/utils.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/core/types.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/opencv.hpp\" #include <fstream> #include <string> #include <chrono> #include <iostream> void writeImg ( cv :: Mat & mat , std :: string imgfile ) { cv :: Mat img_bgr ; cv :: cvtColor ( mat , img_bgr , cv :: COLOR_YUV2BGR_NV12 ); cv :: imwrite ( imgfile , img_bgr ); } int main () { std :: string image_file = \"config/test.jpg\" ; cv :: Mat bgr_mat = cv :: imread ( image_file , cv :: IMREAD_COLOR ); auto src_height = bgr_mat . rows ; auto src_width = bgr_mat . cols ; cv :: Mat srcmat_nv12 ; BGRToNv12 ( bgr_mat , srcmat_nv12 ); auto dst_height = src_height / 2 ; auto dst_width = src_width / 2 ; cv :: Mat dstmat_nv12 ( dst_height * 3 / 2 , dst_width , CV_8UC1 ); auto before_resize = std :: chrono :: system_clock :: now (); auto ret = hobot_cv :: hobotcv_resize ( srcmat_nv12 , src_height , src_width , dstmat_nv12 , dst_height , dst_width ); auto after_resize = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_resize - before_resize ). count (); if ( 0 == ret ) { std :: cout << \"resize finish, time: \" << interval << \"ms\" << std :: endl ; } writeImg ( dstmat_nv12 , \"./resize.jpg\" ); auto before_crop = std :: chrono :: system_clock :: now (); auto cropmat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , 200 , 200 , cv :: Range ( 0 , 200 ), cv :: Range ( 0 , 200 )); auto after_crop = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_crop - before_crop ). count (); std :: cout << \"crop finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropmat , \"./crop.jpg\" ); auto before_cropResize = std :: chrono :: system_clock :: now (); auto cropResizemat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , src_height , src_width , cv :: Range ( 200 , 400 ), cv :: Range ( 200 , 400 )); auto after_cropResize = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_cropResize - before_cropResize ). count (); std :: cout << \"cropResize finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropResizemat , \"./cropResize.jpg\" ); return 0 ; }","text_tokens":["include","void","permission","written","cout","disclosed","reserved",">","the","copied","src","copyright","int","\"","3","and","cropresize","std","used","imread","imgfile","iostream","this","imwrite","(","utils",":","if","now","time","return","test","rows","by","_","all","material","for",",","-","reproduced","#",";","yuv2bgr","finish","cast"," ","work","range","cols","milliseconds","<","transmitted","inc",")","dst","rights","&","after","contains","opencv","horizon","interval","before",".","is","0","writeimg","mat","cv","/","owned","auto","part","count","types","file","in","cropresizemat","}","height","purpose","*","dstmat","2021","hobotcv","chrono","width","2","hpp","express","no","trade","core","bgrtonv12","cropmat","{","proprietary","image","=","200","secrets","nv12","cvtcolor","hobot","srcmat","8uc1","crop","confidential","of","ms","or","endl","img","resize","c","may","jpg","duration","imgcodecs","robotics","config","h","be","clock","400","imgproc","way","main","any","opencv2","without","string","bgr","color","information","fstream","ret","system"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/","text":"模型推理框架 智能机器人与机器学习是紧密相连的，机器学习又可以分成数据采集、标注、训练、推理等环节，其中数据的训练需要消耗大量算力，适合在服务器或者云端进行，不过训练好的模型可是要部署到机器人端进行推理运算的，所以模型推理的效率如何，直接决定了机器人视觉处理的效率，这刚好是TogetherROS所擅长的地方。 Hobot DNN模型推理库 TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 hobot_dnn是在地平线X3开发板上利用BPU处理器实现AI推理功能，基于地平线EasyDNN和ROS2 Node进行二次开发，为应用开发提供更简单易用的模型集成开发接口，包括模型管理、基于模型描述的输入处理及结果解析，以及模型输出内存分配管理等功能。 关于hobot_dnn的使用逻辑流程如这张图所示，供大家参考，我们后续也会通过具体的案例解释代码的实现过程。 算法与应用库 在Hobot DNN模型推理库的基础上，地平线还提供了一套基于TogetherROS系统的AI算法包，称为BOXs，这样我们就不需要从零构建算法，基于这些标准而高效的算法，可以更关注应用层面的APP开发。 从这张图中我们可以看到，这套AI算法包中包含两大块，一个是基础算法，一个是应用算法。 基础算法中主要是图像分类、语义分割和目标检测这些常用的算法，应用层面就会基于这些算法和某些场景，动态实现更为复杂的人体识别、骨骼点识别、手势识别等具体的功能，这些模块就可以和机器人运功功能直接结合，节省了我们开发AI视觉部分的时间。 模型推理测试 这套模型推理和算法库的效果如何呢？ 我们先来体验一个TogetherROS系统自带的案例，识别这张图片中的人，以及每个人的骨骼关键点。 # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。config中为example使用的模型，回灌使用的本地图片 $ cp -r /opt/tros/lib/dnn_node_example/config/ . # 使用本地jpg格式图片通过同步模式进行回环预测，并存储渲染后的图片 $ ros2 launch dnn_node_example hobot_dnn_node_example_feedback.launch.py","text_tokens":["很快","节省","模式","机器","理器","这张","每个","路径","回环","零","某些","feedback","boxs","基础","运行","代码","这套","输入","部分","。","适合","保障","过程","处理","而","决定","格式","如何","中","解释","本地","供","标注","复杂","？","可以","层面","众多","更","效率","两大块","开发板","部署","开发","还","是","更为","了","easydnn","这样","到","这","图像","渲染","充足","好","或者","ai","管理","_","bash","逻辑","地平线","学习","进行","相连","体验","关键","包","-","与","端","标准","人","紧密","大块","具体","#","训练","这些","采集"," ","效果","来","框架","图片","擅长","所以","关注","接口","、","运功","不","人工智能","测试","同步","opt","存储","功能","大量","参考","构建","从","基于","刚好","配置","bpu","环境","使用","所示","一个","云端","场景","自带","二次","啦","利用","内存","分割","服务","案例",".","tros","后续","简单","lib","launch","需要","开发者","和","二次开发","/","拷贝","系统集成","底层","算法","会","不用","引擎","视觉","人体","x3","描述","花费","包括","关于","上","结合","ros2","我们","呢","解析","dnn","又","的","r","py","要","分成","并","骨骼","环节","借助","预测","机器人","中为","示例","及","常用","node","等","也","看到","后","直接","人工","运算","通过","数据","手势","setup","结果","推理","hobot","以及","所","检测","称为","包中","务器","识别","服务器","系统","开源","先","调教","模型","应用","库","大家","实际","时间","togetherros","易用","分配","可是","地方","算力","如","实现","张图","分类","关键点","cp","jpg","消耗","流程","一套","其中","source","主要","为","智能","集成","config","，","提供","输出","模块","安装","文件","点","动态","$","就","example","包含","芯片","地平","处理器","不过","语义","配置文件","回灌","目标","高效","app","出","在","很多"],"title":"模型推理框架","title_tokens":["模型","推理","框架"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_1","text":"智能机器人与机器学习是紧密相连的，机器学习又可以分成数据采集、标注、训练、推理等环节，其中数据的训练需要消耗大量算力，适合在服务器或者云端进行，不过训练好的模型可是要部署到机器人端进行推理运算的，所以模型推理的效率如何，直接决定了机器人视觉处理的效率，这刚好是TogetherROS所擅长的地方。","text_tokens":["机器","模型","学习","进行","相连","视觉","togetherros","服务器","与","可是","算力","端","紧密","地方","。","又","消耗","适合","训练","的","采集","其中","处理","擅长","要","分成","所以","智能","如何","决定","，","、","标注","环节","可以","大量","机器人","效率","刚好","部署","云端","是","等","了","直接","服务","不过","到","数据","运算","这","或者","推理","需要","所","好","务器","在"],"title":"模型推理框架","title_tokens":["模型","推理","框架"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#hobot-dnn","text":"TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 hobot_dnn是在地平线X3开发板上利用BPU处理器实现AI推理功能，基于地平线EasyDNN和ROS2 Node进行二次开发，为应用开发提供更简单易用的模型集成开发接口，包括模型管理、基于模型描述的输入处理及结果解析，以及模型输出内存分配管理等功能。 关于hobot_dnn的使用逻辑流程如这张图所示，供大家参考，我们后续也会通过具体的案例解释代码的实现过程。","text_tokens":["很快","理器","代码","这套","输入","。","保障","过程","处理","中","解释","供","可以","众多","更","开发板","部署","开发","是","了","easydnn","这","充足","ai","管理","_","逻辑","地平线","进行","具体","训练"," ","接口","、","人工智能","功能","参考","基于","bpu","使用","所示","二次","啦","利用","内存","案例","后续","简单","开发者","和","二次开发","系统集成","底层","会","不用","引擎","x3","描述","花费","包括","关于","上","ros2","我们","解析","dnn","的","借助","及","node","等","也","人工","通过","数据","结果","推理","hobot","以及","系统","开源","调教","模型","应用","库","大家","实际","时间","togetherros","易用","分配","如","张图","算力","实现","流程","为","智能","集成","，","提供","输出","就","芯片","地平","处理器","在","很多"],"title":"Hobot DNN模型推理库","title_tokens":["dnn","模型"," ","库","推理","hobot"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_2","text":"在Hobot DNN模型推理库的基础上，地平线还提供了一套基于TogetherROS系统的AI算法包，称为BOXs，这样我们就不需要从零构建算法，基于这些标准而高效的算法，可以更关注应用层面的APP开发。 从这张图中我们可以看到，这套AI算法包中包含两大块，一个是基础算法，一个是应用算法。 基础算法中主要是图像分类、语义分割和目标检测这些常用的算法，应用层面就会基于这些算法和某些场景，动态实现更为复杂的人体识别、骨骼点识别、手势识别等具体的功能，这些模块就可以和机器人运功功能直接结合，节省了我们开发AI视觉部分的时间。","text_tokens":["节省","机器","零","某些","boxs","基础","这套","部分","。","而","中","复杂","可以","层面","更","两大块","开发","还","是","更为","了","这样","这","图像","ai","地平线","包","标准","大块","具体","这些"," ","关注","、","运功","不","功能","构建","从","基于","一个","场景","分割","需要","和","算法","会","人体","视觉","结合","上","我们","dnn","的","骨骼","机器人","常用","看到","等","直接","手势","推理","hobot","识别","包中","检测","称为","系统","模型","应用","库","时间","togetherros","张图","分类","实现","一套","主要","，","提供","模块","点","动态","就","包含","地平","语义","目标","高效","app","在"],"title":"算法与应用库","title_tokens":["应用","与","库","算法"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_3","text":"这套模型推理和算法库的效果如何呢？ 我们先来体验一个TogetherROS系统自带的案例，识别这张图片中的人，以及每个人的骨骼关键点。 # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。config中为example使用的模型，回灌使用的本地图片 $ cp -r /opt/tros/lib/dnn_node_example/config/ . # 使用本地jpg格式图片通过同步模式进行回环预测，并存储渲染后的图片 $ ros2 launch dnn_node_example hobot_dnn_node_example_feedback.launch.py","text_tokens":["模式","这张","每个","路径","回环","feedback","运行","这套","。","格式","如何","中","本地","？","渲染","_","bash","进行","体验","关键","-","人","#","来","效果"," ","图片","存储","同步","opt","从","配置","环境","一个","自带","使用","lib","launch","案例",".","tros","需要","和","/","拷贝","算法","呢","ros2","我们","dnn","的","r","py","并","骨骼","预测","中为","示例","node","后","setup","通过","推理","hobot","以及","识别","系统","先","模型","库","togetherros","cp","关键点","jpg","source","config","，","安装","文件","$","example","配置文件","回灌","出"],"title":"模型推理测试","title_tokens":["模型","推理","测试"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/","text":"图像物体分类 接下来我们继续学习基于Hobot CNN模型推理库之上的视觉应用。 机器人要感知周边环境，那就得确定看到的图像中都有什么，比如地上有一只猫，旁边有一个桌子之类的，这个猫和桌子就是具体的物体分类啦。 图像分类原理 如果是人来识别一只猫的话，似乎再简单不过了，无论黑猫、白猫还是花猫，我们一眼就可以看出来。 不过这件事对于机器人来讲可没有那么简单，为了能够让机器准确识别一只猫，无数学者可是研究了几十年啊，虽然还赶不上人类的智慧，但是这件事已经没有那么遥不可及了。 比如说我们要让机器识别图像中有一只猫，我们就得先教会机器什么是猫，对此我们就得把各种各样猫的照片给计算机看，目的就是让机器学习，看的越多，识别的也就越准。 我们那里找这么多猫的图片呢？ 大家可能听说过一个著名的视觉对象数据库——ImageNet，里边有超过1400万张标注过的图像，2万多个类别，我们就可以利用这个庞大的数据库，找到很多猫的照片。 然后就搭建神经网络，把这些数据放进去训练了，调教出一套比较好的识别模型。 接下来把这套模型部署到机器人上，之后每当有一幅图像收到之后，就传到这个模型中，也就是模型推理，推理的结果就是类似这样的数据，概率最大的，也就是机器识别到的物体啦。 关于机器学习，理论众多，大家可以学习专门的课程，我们课上还是重点讲解在TogetherROS中的实现方法。 编程开发方法 我们来看这样一张图片，大家很快就可以发现这是一只斑马。 运行示例程序 我们如何用机器来识别它呢，大家先来运行这个案例，这是基于ImageNet数据集训练的模型，可以识别1000种常见的物体，我们看一下效果如何？ $ cd /app/ai_inference/01_basic_sample/ $ sudo python3 ./test_mobilenetv1.py 代码解析 test_mobilenetv1.py： #!/usr/bin/env python3 from hobot_dnn import pyeasy_dnn as dnn import numpy as np import cv2 def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_BGR2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] if __name__ == '__main__' : # test classification result models = dnn . load ( '../models/mobilenetv1_224x224_nv12.bin' ) # test input and output properties print ( \"=\" * 10 , \"inputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) print ( \"inputs[0] name is:\" , models [ 0 ] . inputs [ 0 ] . name ) print ( \"=\" * 10 , \"outputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . outputs [ 0 ] . properties ) print ( \"outputs[0] name is:\" , models [ 0 ] . outputs [ 0 ] . name ) # 打开图片 img_file = cv2 . imread ( './zebra_cls.jpg' ) # 把图片缩放到模型的输入尺寸 # 获取算法模型的输入tensor 的尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) des_dim = ( w , h ) resized_data = cv2 . resize ( img_file , des_dim , interpolation = cv2 . INTER_AREA ) nv12_data = bgr2nv12_opencv ( resized_data ) # 模型推理 outputs = models [ 0 ] . forward ( nv12_data ) print ( \"=\" * 10 , \"Get output[0] numpy data\" , \"=\" * 10 ) print ( \"output[0] buffer numpy info: \" ) print ( \"shape: \" , outputs [ 0 ] . buffer . shape ) print ( \"dtype: \" , outputs [ 0 ] . buffer . dtype ) # print(\"First 10 results:\", outputs[0].buffer[0][:10]) # 从输出结果中得到值最大的那个序号，比如 zebra 就是第 340 个值，应该大于 0.99 print ( \"=\" * 10 , \"Classification result\" , \"=\" * 10 ) assert np . argmax ( outputs [ 0 ] . buffer ) == 340 # 输出类别序号和预测概率值 print ( \"cls id: %d Confidence: %f \" % ( np . argmax ( outputs [ 0 ] . buffer ), outputs [ 0 ] . buffer [ 0 ][ np . argmax ( outputs [ 0 ] . buffer )])) Mobilenetv2物体分类 用图片进行识别不太过瘾，毕竟是静态的图像，没问题，TogetherROS中还提供了实时物体分类的案例，我们继续来体验一下。 为了实时显示视觉识别的效果，这里我们需要启动TogetherROS中的一个web服务器，它会把视觉识别的实时效果，通过网络传输出来，我们直接在浏览器中就可以看到结果啦。也是便于我们开发调试的一个重要工具。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . 运行例程： $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/mobilenetv2workconfig.json image_width: = 480 image_height: = 272 在浏览器中登录192.168.1.10，就可以看到分类效果啦：","text_tokens":["很快","学者","机器","shape","专门","工具","里边","输入","放进","chmod","例程","import","白猫","猫","models","找到","开发","这样","常见","4","看","最大","f","程序","那里",",","超过","192.168"," ","越","一张","从","一个","利用","imagenet","dim","无论","interpolation","lib",".","get","需要","和","uv","放进去","type","*","benchmark","ros2","dnn","得到","没有","智慧","w","照片","hw","input","研究","预测","得","问题","这里","理论","便于","看到","十年","也","=","数据","cvtcolor","似乎","识别","y","先","模型","不可","过瘾","万多","万多个","一只","实现","img","resize","接下来","还是","source","周边环境","config","'","输出","为了","浏览器","把","登录","来看","缩","大于","没","不过","color","python3","app","讲解","data","神经","中有","resized","代码","这套","]","打开","inputs","如何","and","？","pyeasy","imread","几十","部署","+","basic","多个","了","confidence","_","如果","reshape","物体","啊","x","传输","来","usr","效果","再","__","、","集","properties","教会","啦","启动","已经","launch","sbin","那么","as","花猫","各样","inter","10","webserver","编程","file","算法","env","获取","视觉","神经网","呢","关于","上","forward","它会","我们","尺寸","..","几十年","des","like","要","比如","著名","比如说","224x224","然后","听说","buffer","那个","node","种","这件","通过","结果","对于","下来","planar","mobilenetv2workconfig","transpose","开发方法","调教","应用","库","大家","togetherros","各种","无数","都","来讲","from","比较","$","事","example","用","classification","1000","在","很多","遥不可及","每当","print","类别","运行","name","id","感知","计算","浏览","\"","中","yuv420p","zeros","可以","原理","1.10","毕竟","还","是","这是","(","：","图像","if","这么","test","好","之后","调试","ai","mobilenetv2","神经网络","就可以看","一下","json","cls","具体","#","第","这些","找","一眼","assert","bin","opt","results","环境","但是","课上","给","它","340","webservice","这个","tros","nginx","is","cd","0","的话","方法","可","/","让","dtype","类似","layout","重要","赶不上","的","py","r","那","2","bgr2nv12","def","sample","数据库","np","&&","直接","setup","nv12","sudo","确定","可能","多","务器","服务器","p","cp","可是","人类","cv2","过","传到","h","实时","websocket","算机","first","output","准确","web","numpy","周边","人来","之类","mobilenetv1","。","据库","万张","课程","argmax","3","静态","各种各样","标注","越准","众多","继续","对此","到","序号","出来",":","旁边","return","bash","对象","学习","进行","体验","1400","-","packed","值","重点","训练","多猫","0.99","图片","outputs","个值","虽然","272",")","基于","黑猫","opencv","发现","服务","案例","计算机","简单","info","1","显示","什么","pro","bgr2yuv","桌子","tensor","height","之上","d","地上","result","解析","—","runtime","480","width","网络","机器人","搭建","示例","%","load","!","[","就是","area","image","概率","不太","斑马","目的","推理","hobot","cnn","庞大","收到","分类","01","nchw","jpg","一套","进去","一幅","应该","，","提供","inference","i420","接下","有","share","zebra","就","else","main","放到","能够","出"],"title":"图像物体分类","title_tokens":["物体","分类","图像"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_1","text":"接下来我们继续学习基于Hobot CNN模型推理库之上的视觉应用。 机器人要感知周边环境，那就得确定看到的图像中都有什么，比如地上有一只猫，旁边有一个桌子之类的，这个猫和桌子就是具体的物体分类啦。","text_tokens":["机器","应用","模型","学习","库","桌子","物体","视觉","之上","地上","之类","我们","分类","一只","具体","。","感知","的"," ","接下来","周边环境","要","比如","都","那","，","中","接下","有","机器人","得","基于","猫","环境","就","一个","继续","啦","就是","看到","这个","确定","图像","推理","下来","hobot","cnn","周边","旁边","和","什么"],"title":"图像物体分类","title_tokens":["物体","分类","图像"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_2","text":"如果是人来识别一只猫的话，似乎再简单不过了，无论黑猫、白猫还是花猫，我们一眼就可以看出来。 不过这件事对于机器人来讲可没有那么简单，为了能够让机器准确识别一只猫，无数学者可是研究了几十年啊，虽然还赶不上人类的智慧，但是这件事已经没有那么遥不可及了。 比如说我们要让机器识别图像中有一只猫，我们就得先教会机器什么是猫，对此我们就得把各种各样猫的照片给计算机看，目的就是让机器学习，看的越多，识别的也就越准。 我们那里找这么多猫的图片呢？ 大家可能听说过一个著名的视觉对象数据库——ImageNet，里边有超过1400万张标注过的图像，2万多个类别，我们就可以利用这个庞大的数据库，找到很多猫的照片。 然后就搭建神经网络，把这些数据放进去训练了，调教出一套比较好的识别模型。 接下来把这套模型部署到机器人上，之后每当有一幅图像收到之后，就传到这个模型中，也就是模型推理，推理的结果就是类似这样的数据，概率最大的，也就是机器识别到的物体啦。 关于机器学习，理论众多，大家可以学习专门的课程，我们课上还是重点讲解在TogetherROS中的实现方法。","text_tokens":["学者","遥不可及","每当","机器","中有","人来","专门","类别","里边","这套","放进","。","据库","计算","万张","课程","中","各种各样","标注","？","可以","越准","众多","白猫","猫","几十","部署","对此","找到","还","是","多个","了","出","这样","到","图像","出来","看","这么","好","最大","之后","如果","对象","物体","学习","神经网络","就可以看","啊","那里","1400","超过","重点","训练","多猫","这些"," ","找","图片","再","虽然","一眼","讲解","、","越","黑猫","但是","教会","一个","课上","给","啦","利用","已经","imagenet","无论","这个","那么","计算机","简单","的话","花猫","方法","可","各样","什么","让","放进去","视觉","神经网","类似","呢","关于","上","我们","几十年","赶不上","的","没有","—","智慧","要","比如","著名","2","照片","比如说","研究","然后","机器人","得","听说","搭建","网络","数据库","理论","就是","这件","十年","也","数据","概率","似乎","结果","对于","目的","下来","推理","可能","识别","多","先","调教","模型","大家","togetherros","庞大","收到","不可","可是","万多","万多个","一只","实现","人类","各种","一套","进去","还是","接下来","一幅","无数","过","传到","来讲","，","为了","把","接下","有","比较","算机","就","事","准确","不过","能够","神经","在","很多"],"title":"图像分类原理","title_tokens":["原理","分类","图像"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_3","text":"我们来看这样一张图片，大家很快就可以发现这是一只斑马。","text_tokens":["很快","。","一张","来看","这样","可以","一只","图片","大家","斑马","就","，","我们","这是","发现"],"title":"编程开发方法","title_tokens":["方法","开发","开发方法","编程"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_4","text":"我们如何用机器来识别它呢，大家先来运行这个案例，这是基于ImageNet数据集训练的模型，可以识别1000种常见的物体，我们看一下效果如何？ $ cd /app/ai_inference/01_basic_sample/ $ sudo python3 ./test_mobilenetv1.py","text_tokens":["先","机器","模型","物体","大家","一下","运行","呢","mobilenetv1","我们","01","训练","来","的","效果"," ","py","如何","，","inference","？","可以","集","基于","$","sample","种","它","用","这是","basic","imagenet","这个","案例",".","数据","常见","sudo","python3","cd","看","1000","app","test","识别","/","ai","_"],"title":"运行示例程序","title_tokens":["程序","示例","运行"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_5","text":"test_mobilenetv1.py： #!/usr/bin/env python3 from hobot_dnn import pyeasy_dnn as dnn import numpy as np import cv2 def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_BGR2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] if __name__ == '__main__' : # test classification result models = dnn . load ( '../models/mobilenetv1_224x224_nv12.bin' ) # test input and output properties print ( \"=\" * 10 , \"inputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) print ( \"inputs[0] name is:\" , models [ 0 ] . inputs [ 0 ] . name ) print ( \"=\" * 10 , \"outputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . outputs [ 0 ] . properties ) print ( \"outputs[0] name is:\" , models [ 0 ] . outputs [ 0 ] . name ) # 打开图片 img_file = cv2 . imread ( './zebra_cls.jpg' ) # 把图片缩放到模型的输入尺寸 # 获取算法模型的输入tensor 的尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) des_dim = ( w , h ) resized_data = cv2 . resize ( img_file , des_dim , interpolation = cv2 . INTER_AREA ) nv12_data = bgr2nv12_opencv ( resized_data ) # 模型推理 outputs = models [ 0 ] . forward ( nv12_data ) print ( \"=\" * 10 , \"Get output[0] numpy data\" , \"=\" * 10 ) print ( \"output[0] buffer numpy info: \" ) print ( \"shape: \" , outputs [ 0 ] . buffer . shape ) print ( \"dtype: \" , outputs [ 0 ] . buffer . dtype ) # print(\"First 10 results:\", outputs[0].buffer[0][:10]) # 从输出结果中得到值最大的那个序号，比如 zebra 就是第 340 个值，应该大于 0.99 print ( \"=\" * 10 , \"Classification result\" , \"=\" * 10 ) assert np . argmax ( outputs [ 0 ] . buffer ) == 340 # 输出类别序号和预测概率值 print ( \"cls id: %d Confidence: %f \" % ( np . argmax ( outputs [ 0 ] . buffer ), outputs [ 0 ] . buffer [ 0 ][ np . argmax ( outputs [ 0 ] . buffer )]))","text_tokens":["print","shape","类别","resized","name","id","mobilenetv1","输入","]","打开","argmax","inputs","\"","3","中","and","yuv420p","zeros","pyeasy","imread","import","models","(","序号","confidence","：",":","if","4","return","test","最大","f","_","reshape",",","packed","cls","#","值","第","usr"," ","图片","0.99","outputs","个值","__","assert","bin",")","从","properties","results","opencv","340","dim","interpolation",".","as","is","info","0","get","1","和","/","inter","pro","10","file","bgr2yuv","uv","算法","tensor","height","env","type","*","dtype","获取","d","layout","forward","result","尺寸","..","dnn","得到","des","的","py","like","比如","width","w","2","bgr2nv12","hw","224x224","input","预测","def","buffer","%","load","那个","!","np","[","就是","area","image","=","nv12","cvtcolor","概率","结果","推理","hobot","planar","transpose","y","模型","img","resize","cv2","nchw","jpg","应该","，","h","'","from","输出","i420","把","zebra","else","缩","main","first","output","大于","放到","color","numpy","python3","classification","data"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#mobilenetv2","text":"用图片进行识别不太过瘾，毕竟是静态的图像，没问题，TogetherROS中还提供了实时物体分类的案例，我们继续来体验一下。 为了实时显示视觉识别的效果，这里我们需要启动TogetherROS中的一个web服务器，它会把视觉识别的实时效果，通过网络传输出来，我们直接在浏览器中就可以看到结果啦。也是便于我们开发调试的一个重要工具。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . 运行例程： $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/mobilenetv2workconfig.json image_width: = 480 image_height: = 272 在浏览器中登录192.168.1.10，就可以看到分类效果啦：","text_tokens":["工具","运行","。","浏览","chmod","中","静态","例程","可以","1.10","毕竟","继续","开发","还","是","+","了","：","图像","出来",":","调试","_","bash","物体","进行","体验","一下","x","-","json","传输","#","192.168","来"," ","图片","效果","272","opt","一个","webservice","啦","启动","launch","服务",".","案例","tros","sbin","nginx","cd","需要","显示","/","webserver","file","height","视觉","benchmark","重要","它会","ros2","我们","dnn","的","r","py","runtime","480","width","网络","问题","node","这里","&&","便于","看到","也","image","=","直接","setup","通过","不太","结果","hobot","识别","mobilenetv2workconfig","务器","服务器","p","togetherros","cp","过瘾","分类","source","config","，","提供","为了","实时","浏览器","把","登录","websocket","share","$","就","example","用","没","web","lib","在"],"title":"Mobilenetv2物体分类","title_tokens":["物体","分类","mobilenetv2"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/","text":"动态目标检测 图像物体分类重在分析图像中存在的物体是什么，便于机器理解看到的环境信息，另外一种场景，机器不仅要识别某一物体，还要知道这个物体所在的位置，当物体在运动时，更要快速连续的跟踪，这就是目标检测，重在分析识别到物体在图像中的位置。 目标检测原理 假设我们要识别图像中这只狗的位置，以最为常用的YOLO算法为例，它会运用单个卷积神经网络(CNN) ，将图像分成网格，并预测每个网格的对象概率和边界框。 比如，对于这个图像，Yolo的CNN网络将输入的图片分割成7x7的网格，然后每个网格负责去检测那些中心点落在该格子内的目标，比如，小狗这个目标的中心点在左下角的网格中，那该网格就负责预测狗这个对象。 每个网格中将有多个边界框，在训练时，我们希望每个对象只有一个边界框，比如最终只有一个边界框把这只狗包起来。因此，我们根据哪个边界框与之前标注的重叠度最高，预测对象的位置和概率。 最终包围对象的边界框，就是识别的结果，使用四个描述符进行说明： 边界框的中心位置 边界框的高度 边界框的宽度 识别到对象所属的类 这样就完成了对目标的实时检测，拿到目标的信息之后，就可以进行后续的机器人行为控制了。 我们对目标检测系统运行速度的要求一般都比较高，可以实时处理视频流，比如车辆行驶的动态监测、自然环境中的目标识别，有着非常广泛的应用价值。 回到TogetherROS和旭日X3派的开发板，我们来看下这套软硬件结合的目标检测系统，效率如何。 MIPI相机目标检测 接下来，我们要利用MIPI相机，动态识别图像中各种各样的物体以及他们所在的位置，推理过程使用的是基于COCO数据集训练的80个类别，也就是可以识别80种常用的物体位置。 运行例程 $ cd /app/ai_inference/03_mipi_camera_sample/ $ python3 ./mipi_camera.py 代码解析 mipi_camera.py： #!/usr/bin/env python3 import numpy as np import cv2 import colorsys # Camera API libs from hobot_vio import libsrcampy as srcampy from hobot_dnn import pyeasy_dnn as dnn # detection model class names def get_classes (): return np . array ([ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" , \"bus\" , \"train\" , \"truck\" , \"boat\" , \"traffic light\" , \"fire hydrant\" , \"stop sign\" , \"parking meter\" , \"bench\" , \"bird\" , \"cat\" , \"dog\" , \"horse\" , \"sheep\" , \"cow\" , \"elephant\" , \"bear\" , \"zebra\" , \"giraffe\" , \"backpack\" , \"umbrella\" , \"handbag\" , \"tie\" , \"suitcase\" , \"frisbee\" , \"skis\" , \"snowboard\" , \"sports ball\" , \"kite\" , \"baseball bat\" , \"baseball glove\" , \"skateboard\" , \"surfboard\" , \"tennis racket\" , \"bottle\" , \"wine glass\" , \"cup\" , \"fork\" , \"knife\" , \"spoon\" , \"bowl\" , \"banana\" , \"apple\" , \"sandwich\" , \"orange\" , \"broccoli\" , \"carrot\" , \"hot dog\" , \"pizza\" , \"donut\" , \"cake\" , \"chair\" , \"couch\" , \"potted plant\" , \"bed\" , \"dining table\" , \"toilet\" , \"tv\" , \"laptop\" , \"mouse\" , \"remote\" , \"keyboard\" , \"cell phone\" , \"microwave\" , \"oven\" , \"toaster\" , \"sink\" , \"refrigerator\" , \"book\" , \"clock\" , \"vase\" , \"scissors\" , \"teddy bear\" , \"hair drier\" , \"toothbrush\" ]) def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_RGB2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] def postprocess ( model_output , model_hw_shape , origin_image = None , origin_img_shape = None , score_threshold = 0.5 , nms_threshold = 0.6 , dump_image = False ): input_height = model_hw_shape [ 0 ] input_width = model_hw_shape [ 1 ] if origin_image is not None : origin_image_shape = origin_image . shape [ 0 : 2 ] else : origin_image_shape = origin_img_shape prediction_bbox = decode ( outputs = model_output , score_threshold = score_threshold , origin_shape = origin_image_shape , input_size = 512 ) prediction_bbox = nms ( prediction_bbox , iou_threshold = nms_threshold ) prediction_bbox = np . array ( prediction_bbox ) topk = min ( prediction_bbox . shape [ 0 ], 1000 ) if topk != 0 : idx = np . argpartition ( prediction_bbox [ ... , 4 ], - topk )[ - topk :] prediction_bbox = prediction_bbox [ idx ] if dump_image and origin_image is not None : draw_bboxs ( origin_image , prediction_bbox ) return prediction_bbox def draw_bboxs ( image , bboxes , gt_classes_index = None , classes = get_classes ()): \"\"\"draw the bboxes in the original image \"\"\" num_classes = len ( classes ) image_h , image_w , channel = image . shape hsv_tuples = [( 1.0 * x / num_classes , 1. , 1. ) for x in range ( num_classes )] colors = list ( map ( lambda x : colorsys . hsv_to_rgb ( * x ), hsv_tuples )) colors = list ( map ( lambda x : ( int ( x [ 0 ] * 255 ), int ( x [ 1 ] * 255 ), int ( x [ 2 ] * 255 )), colors )) fontScale = 0.5 bbox_thick = int ( 0.6 * ( image_h + image_w ) / 600 ) for i , bbox in enumerate ( bboxes ): coor = np . array ( bbox [: 4 ], dtype = np . int32 ) if gt_classes_index == None : class_index = int ( bbox [ 5 ]) score = bbox [ 4 ] else : class_index = gt_classes_index [ i ] score = 1 bbox_color = colors [ class_index ] c1 , c2 = ( coor [ 0 ], coor [ 1 ]), ( coor [ 2 ], coor [ 3 ]) cv2 . rectangle ( image , c1 , c2 , bbox_color , bbox_thick ) classes_name = classes [ class_index ] bbox_mess = ' %s : %.2f ' % ( classes_name , score ) t_size = cv2 . getTextSize ( bbox_mess , 0 , fontScale , thickness = bbox_thick // 2 )[ 0 ] cv2 . rectangle ( image , c1 , ( c1 [ 0 ] + t_size [ 0 ], c1 [ 1 ] - t_size [ 1 ] - 3 ), bbox_color , - 1 ) cv2 . putText ( image , bbox_mess , ( c1 [ 0 ], c1 [ 1 ] - 2 ), cv2 . FONT_HERSHEY_SIMPLEX , fontScale , ( 0 , 0 , 0 ), bbox_thick // 2 , lineType = cv2 . LINE_AA ) print ( \" {} is in the picture with confidence: {:.4f} , bbox: {} \" . format ( classes_name , score , coor )) # cv2.imwrite(\"demo.jpg\", image) return image def decode ( outputs , score_threshold , origin_shape , input_size = 512 ): def _distance2bbox ( points , distance ): x1 = points [ ... , 0 ] - distance [ ... , 0 ] y1 = points [ ... , 1 ] - distance [ ... , 1 ] x2 = points [ ... , 0 ] + distance [ ... , 2 ] y2 = points [ ... , 1 ] + distance [ ... , 3 ] return np . stack ([ x1 , y1 , x2 , y2 ], - 1 ) def _scores ( cls , ce ): cls = 1 / ( 1 + np . exp ( - cls )) ce = 1 / ( 1 + np . exp ( - ce )) return np . sqrt ( ce * cls ) def _bbox ( bbox , stride , origin_shape , input_size ): h , w = bbox . shape [ 1 : 3 ] yv , xv = np . meshgrid ( np . arange ( h ), np . arange ( w )) xy = ( np . stack (( yv , xv ), 2 ) + 0.5 ) * stride bbox = _distance2bbox ( xy , bbox ) # opencv read, shape[1] is w, shape[0] is h scale_w = origin_shape [ 1 ] / input_size scale_h = origin_shape [ 0 ] / input_size scale = max ( origin_shape [ 0 ], origin_shape [ 1 ]) / input_size # origin img is pad resized #bbox = bbox * scale # origin img is resized bbox = bbox * [ scale_w , scale_h , scale_w , scale_h ] return bbox bboxes = list () strides = [ 8 , 16 , 32 , 64 , 128 ] for i in range ( len ( strides )): cls = outputs [ i ] . buffer bbox = outputs [ i + 5 ] . buffer ce = outputs [ i + 10 ] . buffer scores = _scores ( cls , ce ) classes = np . argmax ( scores , axis =- 1 ) classes = np . reshape ( classes , [ - 1 , 1 ]) max_score = np . max ( scores , axis =- 1 ) max_score = np . reshape ( max_score , [ - 1 , 1 ]) bbox = _bbox ( bbox , strides [ i ], origin_shape , input_size ) bbox = np . reshape ( bbox , [ - 1 , 4 ]) pred_bbox = np . concatenate ([ bbox , max_score , classes ], axis = 1 ) index = pred_bbox [ ... , 4 ] > score_threshold pred_bbox = pred_bbox [ index ] bboxes . append ( pred_bbox ) return np . concatenate ( bboxes ) def nms ( bboxes , iou_threshold , sigma = 0.3 , method = 'nms' ): def bboxes_iou ( boxes1 , boxes2 ): boxes1 = np . array ( boxes1 ) boxes2 = np . array ( boxes2 ) boxes1_area = ( boxes1 [ ... , 2 ] - boxes1 [ ... , 0 ]) * \\ ( boxes1 [ ... , 3 ] - boxes1 [ ... , 1 ]) boxes2_area = ( boxes2 [ ... , 2 ] - boxes2 [ ... , 0 ]) * \\ ( boxes2 [ ... , 3 ] - boxes2 [ ... , 1 ]) left_up = np . maximum ( boxes1 [ ... , : 2 ], boxes2 [ ... , : 2 ]) right_down = np . minimum ( boxes1 [ ... , 2 :], boxes2 [ ... , 2 :]) inter_section = np . maximum ( right_down - left_up , 0.0 ) inter_area = inter_section [ ... , 0 ] * inter_section [ ... , 1 ] union_area = boxes1_area + boxes2_area - inter_area ious = np . maximum ( 1.0 * inter_area / union_area , np . finfo ( np . float32 ) . eps ) return ious classes_in_img = list ( set ( bboxes [:, 5 ])) best_bboxes = [] for cls in classes_in_img : cls_mask = ( bboxes [:, 5 ] == cls ) cls_bboxes = bboxes [ cls_mask ] while len ( cls_bboxes ) > 0 : max_ind = np . argmax ( cls_bboxes [:, 4 ]) best_bbox = cls_bboxes [ max_ind ] best_bboxes . append ( best_bbox ) cls_bboxes = np . concatenate ( [ cls_bboxes [: max_ind ], cls_bboxes [ max_ind + 1 :]]) iou = bboxes_iou ( best_bbox [ np . newaxis , : 4 ], cls_bboxes [:, : 4 ]) weight = np . ones (( len ( iou ),), dtype = np . float32 ) assert method in [ 'nms' , 'soft-nms' ] if method == 'nms' : iou_mask = iou > iou_threshold weight [ iou_mask ] = 0.0 if method == 'soft-nms' : weight = np . exp ( - ( 1.0 * iou ** 2 / sigma )) cls_bboxes [:, 4 ] = cls_bboxes [:, 4 ] * weight score_mask = cls_bboxes [:, 4 ] > 0. cls_bboxes = cls_bboxes [ score_mask ] return best_bboxes def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) if __name__ == '__main__' : models = dnn . load ( '../models/fcos_512x512_nv12.bin' ) # 打印输入 tensor 的属性 print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) # 打印输出 tensor 的属性 print ( len ( models [ 0 ] . outputs )) for output in models [ 0 ] . outputs : print_properties ( output . properties ) # 获取 Camera 句柄 cam = srcampy . Camera () # 打开 f37 摄像头，并且把输出突出缩小成算法模型的输入尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) # 打开 F37, 初始化视频 pipeline 0 ，设置帧率30fps，缩放图像为 512 x 512 cam . open_cam ( 0 , 1 , 30 , w , h ) # Get HDMI display object disp = srcampy . Display () # For the meaning of parameters, please refer to the relevant documents of HDMI display disp . display ( 0 , 1920 , 1080 ) input_shape = ( h , w ) while True : # 从相机获取分辨率为 512x512 的nv12格式的图像数据， 参数 2 代表从硬件模块IPU中获取 img = cam . get_img ( 2 , 512 , 512 ) # 把图像数据转成 numpy 数据类型 img = np . frombuffer ( img , dtype = np . uint8 ) # 模型推理 outputs = models [ 0 ] . forward ( img ) # 对算法结果进行过滤，去掉执行度低的检测框，计算检测框的交并比去除冗余框，把检测框的坐标还原到原图位置上 prediction_bbox = postprocess ( outputs , input_shape , origin_img_shape = ( 1080 , 1920 )) # 从新获取一张图像，大小缩放成与显示器的分辨率一样的 1920 x 1080, 并且转换成 bgr格式，方便进行绘图操作 origin_image = cam . get_img ( 2 , 1920 , 1080 ) origin_nv12 = np . frombuffer ( origin_image , dtype = np . uint8 ) . reshape ( 1620 , 1920 ) origin_bgr = cv2 . cvtColor ( origin_nv12 , cv2 . COLOR_YUV420SP2BGR ) # 把算法运行后得到的物体检测框绘制到图像上 box_bgr = draw_bboxs ( origin_bgr , prediction_bbox ) # X3 的HDMI输出模块的输入图像格式需要是NV12的，所以需要先把bgr格式转成NV12 box_nv12 = bgr2nv12_opencv ( box_bgr ) # 把 NV12 格式的图像输出给显示器 disp . set_img ( box_nv12 . tobytes ()) cam . close_cam () USB相机目标检测 如果大家手上没有MIPI接口的相机，使用USB相机也可以实现同样的功能。 运行例程 $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 动态目标检测 大家如果没有HDMI显示器的话，也没有问题，刚才的例程，也可以这样来运行，我们通过统一网络环境中的浏览器就可以动态看到结果啦。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/fcosworkconfig.json image_width: = 480 image_height: = 272","text_tokens":["机器","suitcase","c2","shape","best","速度",">","摄像","left","代表","bird","输入","下","int","arange","apple","num","chmod","过程","那些","缩小","方便","bus","gettextsize","例程","效率","import","vio","models","开发","600","有着","这样","postprocess","4","max","分辨","bear","同样","左下角","7x7","teddy","table","拿到","个","mipi","int32",",","最终","newaxis"," ","不仅","所以","pipeline","sigma","一张","功能","过滤","从","ce","一个","使用","relevant","利用","len",".","surfboard","后续","get","需要","信息","和","落","index","object","linetype","in","uv","}","type","突出","某一","*","描述","benchmark","banana","ros2","类","detection","dnn","broccoli","hershey","得到","score","坐标","手上","转成","couch","没有","refer","还原","w","并","hw","跟踪","input","预测","strides","并且","中心点","ball","负责","问题","完成","便于","hsv","看到","也","=","tuples","只有","数据","cvtcolor","meshgrid","以及","to","识别","display","y","先","模型","他们","去","时","api","理解","缩小成","0.5","colors","prediction","实现","广泛","img","那该","light","接下来","source","03","为","config","'","输出","浏览器","把","起来","来看","clock","cake","转换","giraffe","color","python3","app","对","glove","以","神经","data","打印","缩放","resized","代码","这套","统一","mess","]","打开","...","inputs","libsrcampy","如何","wine","4f","and","描述符","pyeasy","plant","original","motorcycle","去掉","开发板","pad","person","boxes2","相机","+","多个","了","lambda","usb","traffic","confidence","true","软硬件","coco","bottle","30fps","格子","_","carrot","如果","reshape","物体","f37","x","scissors","t","cam","usr","来","所在","接口","__","、","fork","finfo","frombuffer","bbox","集","properties","更要","16","啦","启动","umbrella","设置","launch","sbin","高度","as","显示器","car","rgb2yuv","32","knife","8","将","30","remote","各样","inter","转","sign","libs","10","webserver","算法","ious","file","env","获取","神经网","摄像头","forward","上","它会","交","我们","尺寸","..","cup","argpartition","right","airplane","idx","drier","假设","like","要","比如","glass","然后","buffer","最高","method","names","node","种","weight","成","y1","初始","{","运用","通过","512x512","结果","分析","对于","下来","refrigerator","planar","transpose","非常","meaning","aa","topk","frisbee","行为","truck","执行","sports","应用","大家","camera","togetherros","去除","旭日","axis","s","cow","各种","array","racket","都","价值","section","连续","from","meter","nms","chair","dump","派","fontscale","rectangle","视频","fcos","比较","bowl","$","example","concatenate","float32","phone","vase","所属","重叠","tobytes","1000","down","在","bboxes","hair","print","exp","类别","自然","运行","name","绘制","句柄","自然环境","计算","bicycle","浏览","处理","\"","sandwich","fcosworkconfig","中","实时处理","maximum","handbag","yuv420p","boat","zeros","可以","原理","union","控制","框","1920","是","imwrite","(","这","：","图像","0.3","if","像头","网格","toilet","之后","stride","ai","冗余","神经网络","操作","y2","数据类型","json","与","cls","open","#","set","80","02","bed","类型","assert","bin","opt","skateboard","please","512","list","环境","distance2bbox","场景","给","webservice","\\","分割","这个","decode","tros","nginx","is","sink","转换成","cd","0","的话","只","/","colorsys","快速","microwave","book","eps","gt","dtype","x3","layout","map","toothbrush","distance","的","toaster","狗","py","stack","up","r","运动","分成","train","128","原图","hdmi","2","bgr2nv12","0.0","elephant","uint8","append","def","thickness","常用","中将","sample","np","&&","puttext","threshold","后","setup","nv12","卷积","软硬","检测","为例","c1","下角","包围","分辨率","p","i","points","单个","of","希望","rgb","min","cp","iou","cv2","还要","ipu","stop","h","模块","度","实时","初始化","hot","websocket","当","动态","大小","not","位置","output","dining","硬件","xv","scale","该","2f","numpy","bgr","目标","新","每个","potted","cat","dog","车辆","the","xy","bench","低","。","format","origin","重在","255","argmax","格式","3","parameters","各种各样","标注","cell","tv","picture","scores","知道","因此","backpack","64","监测","model","x1","到","minimum","属性","换成",":","boxes1","documents","5","一样","左下","return","ind","边界","x2","bash","内","对象","进行","for","bat","size","包","packed","-","高","打印输出","训练","图片","pred","outputs","orange","pizza","sheep","range","while","272","图像格式","fire","false","中心","laptop",")","keyboard","oven","基于","ones","opencv","channel","之前","小成","draw","yolo","服务","小狗","1","显示","srcampy","thick","什么","pro","回到","输出模块","tensor","存在","height","一种","最为","coor","结合","tie","%.","率","bboxs","帧","解析","1620","刚才","yv","soft","runtime","480","width","parking","mask","with","网络","哪个","宽度","机器人","%","disp","load","!","close","[","就是","area","image","enumerate","概率","推理","hobot","cnn","simplex","1.0","line","系统","hydrant","yuv420sp2bgr","另外","分类","0.6","比","horse","1080","说明","read","nchw","jpg","要求","绘图","根据","，","demo","inference","kite","sqrt","行驶","i420","一般","spoon","辨率","接下","有","share","zebra","mouse","classes","就","snowboard","else","none","main","tennis","参数","font","四个","视频流","baseball","box","lib","skis","class","donut"],"title":"动态目标检测","title_tokens":["检测","动态","目标"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_1","text":"图像物体分类重在分析图像中存在的物体是什么，便于机器理解看到的环境信息，另外一种场景，机器不仅要识别某一物体，还要知道这个物体所在的位置，当物体在运动时，更要快速连续的跟踪，这就是目标检测，重在分析识别到物体在图像中的位置。","text_tokens":["快速","机器","物体","存在","一种","某一","时","理解","另外","分类","。","的","重在","还要","所在","要","不仅","运动","，","中","连续","检测","跟踪","知道","当","环境","更要","场景","位置","是","便于","就是","看到","这个","到","这","图像","目标","分析","信息","识别","在","什么"],"title":"动态目标检测","title_tokens":["检测","动态","目标"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_2","text":"假设我们要识别图像中这只狗的位置，以最为常用的YOLO算法为例，它会运用单个卷积神经网络(CNN) ，将图像分成网格，并预测每个网格的对象概率和边界框。 比如，对于这个图像，Yolo的CNN网络将输入的图片分割成7x7的网格，然后每个网格负责去检测那些中心点落在该格子内的目标，比如，小狗这个目标的中心点在左下角的网格中，那该网格就负责预测狗这个对象。 每个网格中将有多个边界框，在训练时，我们希望每个对象只有一个边界框，比如最终只有一个边界框把这只狗包起来。因此，我们根据哪个边界框与之前标注的重叠度最高，预测对象的位置和概率。 最终包围对象的边界框，就是识别的结果，使用四个描述符进行说明： 边界框的中心位置 边界框的高度 边界框的宽度 识别到对象所属的类 这样就完成了对目标的实时检测，拿到目标的信息之后，就可以进行后续的机器人行为控制了。 我们对目标检测系统运行速度的要求一般都比较高，可以实时处理视频流，比如车辆行驶的动态监测、自然环境中的目标识别，有着非常广泛的应用价值。 回到TogetherROS和旭日X3派的开发板，我们来看下这套软硬件结合的目标检测系统，效率如何。","text_tokens":["机器","每个","自然","速度","车辆","运行","这套","输入","下","。","自然环境","处理","那些","如何","中","实时处理","标注","描述符","可以","控制","框","效率","开发板","因此","开发","多个","监测","了","有着","(","这样","到","这","：","图像","软硬件","左下","网格","边界","之后","左下角","格子","7x7","拿到","内","对象","神经网络","进行","最终","包","与","高","训练"," ","图片","、","中心",")","环境","一个","使用","之前","yolo","分割","这个","高度","后续","小狗","只","信息","将","落","和","回到","算法","最为","神经网","描述","x3","结合","它会","我们","类","的","狗","假设","要","分成","比如","以","并","然后","网络","预测","哪个","宽度","机器人","中心点","常用","负责","最高","中将","成","完成","就是","运用","只有","概率","卷积","结果","对于","软硬","cnn","检测","识别","为例","非常","系统","下角","包围","行为","单个","应用","去","希望","togetherros","时","旭日","广泛","说明","那该","要求","都","价值","根据","，","度","实时","行驶","一般","把","派","起来","视频","有","来看","比较","动态","就","位置","硬件","所属","四个","该","视频流","重叠","目标","对","神经","在"],"title":"目标检测原理","title_tokens":["原理","检测","目标"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#mipi","text":"接下来，我们要利用MIPI相机，动态识别图像中各种各样的物体以及他们所在的位置，推理过程使用的是基于COCO数据集训练的80个类别，也就是可以识别80种常用的物体位置。","text_tokens":["个","物体","类别","mipi","他们","我们","。","各种","训练","的","80","过程","接下来","所在","要","中","，","各种各样","接下","可以","集","动态","基于","常用","使用","种","位置","是","相机","利用","就是","也","数据","图像","推理","下来","以及","识别","coco","各样"],"title":"MIPI相机目标检测","title_tokens":["检测","mipi","相机","目标"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_3","text":"$ cd /app/ai_inference/03_mipi_camera_sample/ $ python3 ./mipi_camera.py","text_tokens":["."," ","mipi","camera","$","cd","python3","03","py","app","sample","/","ai","inference","_"],"title":"运行例程","title_tokens":["运行","例程"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_4","text":"mipi_camera.py： #!/usr/bin/env python3 import numpy as np import cv2 import colorsys # Camera API libs from hobot_vio import libsrcampy as srcampy from hobot_dnn import pyeasy_dnn as dnn # detection model class names def get_classes (): return np . array ([ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" , \"bus\" , \"train\" , \"truck\" , \"boat\" , \"traffic light\" , \"fire hydrant\" , \"stop sign\" , \"parking meter\" , \"bench\" , \"bird\" , \"cat\" , \"dog\" , \"horse\" , \"sheep\" , \"cow\" , \"elephant\" , \"bear\" , \"zebra\" , \"giraffe\" , \"backpack\" , \"umbrella\" , \"handbag\" , \"tie\" , \"suitcase\" , \"frisbee\" , \"skis\" , \"snowboard\" , \"sports ball\" , \"kite\" , \"baseball bat\" , \"baseball glove\" , \"skateboard\" , \"surfboard\" , \"tennis racket\" , \"bottle\" , \"wine glass\" , \"cup\" , \"fork\" , \"knife\" , \"spoon\" , \"bowl\" , \"banana\" , \"apple\" , \"sandwich\" , \"orange\" , \"broccoli\" , \"carrot\" , \"hot dog\" , \"pizza\" , \"donut\" , \"cake\" , \"chair\" , \"couch\" , \"potted plant\" , \"bed\" , \"dining table\" , \"toilet\" , \"tv\" , \"laptop\" , \"mouse\" , \"remote\" , \"keyboard\" , \"cell phone\" , \"microwave\" , \"oven\" , \"toaster\" , \"sink\" , \"refrigerator\" , \"book\" , \"clock\" , \"vase\" , \"scissors\" , \"teddy bear\" , \"hair drier\" , \"toothbrush\" ]) def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_RGB2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] def postprocess ( model_output , model_hw_shape , origin_image = None , origin_img_shape = None , score_threshold = 0.5 , nms_threshold = 0.6 , dump_image = False ): input_height = model_hw_shape [ 0 ] input_width = model_hw_shape [ 1 ] if origin_image is not None : origin_image_shape = origin_image . shape [ 0 : 2 ] else : origin_image_shape = origin_img_shape prediction_bbox = decode ( outputs = model_output , score_threshold = score_threshold , origin_shape = origin_image_shape , input_size = 512 ) prediction_bbox = nms ( prediction_bbox , iou_threshold = nms_threshold ) prediction_bbox = np . array ( prediction_bbox ) topk = min ( prediction_bbox . shape [ 0 ], 1000 ) if topk != 0 : idx = np . argpartition ( prediction_bbox [ ... , 4 ], - topk )[ - topk :] prediction_bbox = prediction_bbox [ idx ] if dump_image and origin_image is not None : draw_bboxs ( origin_image , prediction_bbox ) return prediction_bbox def draw_bboxs ( image , bboxes , gt_classes_index = None , classes = get_classes ()): \"\"\"draw the bboxes in the original image \"\"\" num_classes = len ( classes ) image_h , image_w , channel = image . shape hsv_tuples = [( 1.0 * x / num_classes , 1. , 1. ) for x in range ( num_classes )] colors = list ( map ( lambda x : colorsys . hsv_to_rgb ( * x ), hsv_tuples )) colors = list ( map ( lambda x : ( int ( x [ 0 ] * 255 ), int ( x [ 1 ] * 255 ), int ( x [ 2 ] * 255 )), colors )) fontScale = 0.5 bbox_thick = int ( 0.6 * ( image_h + image_w ) / 600 ) for i , bbox in enumerate ( bboxes ): coor = np . array ( bbox [: 4 ], dtype = np . int32 ) if gt_classes_index == None : class_index = int ( bbox [ 5 ]) score = bbox [ 4 ] else : class_index = gt_classes_index [ i ] score = 1 bbox_color = colors [ class_index ] c1 , c2 = ( coor [ 0 ], coor [ 1 ]), ( coor [ 2 ], coor [ 3 ]) cv2 . rectangle ( image , c1 , c2 , bbox_color , bbox_thick ) classes_name = classes [ class_index ] bbox_mess = ' %s : %.2f ' % ( classes_name , score ) t_size = cv2 . getTextSize ( bbox_mess , 0 , fontScale , thickness = bbox_thick // 2 )[ 0 ] cv2 . rectangle ( image , c1 , ( c1 [ 0 ] + t_size [ 0 ], c1 [ 1 ] - t_size [ 1 ] - 3 ), bbox_color , - 1 ) cv2 . putText ( image , bbox_mess , ( c1 [ 0 ], c1 [ 1 ] - 2 ), cv2 . FONT_HERSHEY_SIMPLEX , fontScale , ( 0 , 0 , 0 ), bbox_thick // 2 , lineType = cv2 . LINE_AA ) print ( \" {} is in the picture with confidence: {:.4f} , bbox: {} \" . format ( classes_name , score , coor )) # cv2.imwrite(\"demo.jpg\", image) return image def decode ( outputs , score_threshold , origin_shape , input_size = 512 ): def _distance2bbox ( points , distance ): x1 = points [ ... , 0 ] - distance [ ... , 0 ] y1 = points [ ... , 1 ] - distance [ ... , 1 ] x2 = points [ ... , 0 ] + distance [ ... , 2 ] y2 = points [ ... , 1 ] + distance [ ... , 3 ] return np . stack ([ x1 , y1 , x2 , y2 ], - 1 ) def _scores ( cls , ce ): cls = 1 / ( 1 + np . exp ( - cls )) ce = 1 / ( 1 + np . exp ( - ce )) return np . sqrt ( ce * cls ) def _bbox ( bbox , stride , origin_shape , input_size ): h , w = bbox . shape [ 1 : 3 ] yv , xv = np . meshgrid ( np . arange ( h ), np . arange ( w )) xy = ( np . stack (( yv , xv ), 2 ) + 0.5 ) * stride bbox = _distance2bbox ( xy , bbox ) # opencv read, shape[1] is w, shape[0] is h scale_w = origin_shape [ 1 ] / input_size scale_h = origin_shape [ 0 ] / input_size scale = max ( origin_shape [ 0 ], origin_shape [ 1 ]) / input_size # origin img is pad resized #bbox = bbox * scale # origin img is resized bbox = bbox * [ scale_w , scale_h , scale_w , scale_h ] return bbox bboxes = list () strides = [ 8 , 16 , 32 , 64 , 128 ] for i in range ( len ( strides )): cls = outputs [ i ] . buffer bbox = outputs [ i + 5 ] . buffer ce = outputs [ i + 10 ] . buffer scores = _scores ( cls , ce ) classes = np . argmax ( scores , axis =- 1 ) classes = np . reshape ( classes , [ - 1 , 1 ]) max_score = np . max ( scores , axis =- 1 ) max_score = np . reshape ( max_score , [ - 1 , 1 ]) bbox = _bbox ( bbox , strides [ i ], origin_shape , input_size ) bbox = np . reshape ( bbox , [ - 1 , 4 ]) pred_bbox = np . concatenate ([ bbox , max_score , classes ], axis = 1 ) index = pred_bbox [ ... , 4 ] > score_threshold pred_bbox = pred_bbox [ index ] bboxes . append ( pred_bbox ) return np . concatenate ( bboxes ) def nms ( bboxes , iou_threshold , sigma = 0.3 , method = 'nms' ): def bboxes_iou ( boxes1 , boxes2 ): boxes1 = np . array ( boxes1 ) boxes2 = np . array ( boxes2 ) boxes1_area = ( boxes1 [ ... , 2 ] - boxes1 [ ... , 0 ]) * \\ ( boxes1 [ ... , 3 ] - boxes1 [ ... , 1 ]) boxes2_area = ( boxes2 [ ... , 2 ] - boxes2 [ ... , 0 ]) * \\ ( boxes2 [ ... , 3 ] - boxes2 [ ... , 1 ]) left_up = np . maximum ( boxes1 [ ... , : 2 ], boxes2 [ ... , : 2 ]) right_down = np . minimum ( boxes1 [ ... , 2 :], boxes2 [ ... , 2 :]) inter_section = np . maximum ( right_down - left_up , 0.0 ) inter_area = inter_section [ ... , 0 ] * inter_section [ ... , 1 ] union_area = boxes1_area + boxes2_area - inter_area ious = np . maximum ( 1.0 * inter_area / union_area , np . finfo ( np . float32 ) . eps ) return ious classes_in_img = list ( set ( bboxes [:, 5 ])) best_bboxes = [] for cls in classes_in_img : cls_mask = ( bboxes [:, 5 ] == cls ) cls_bboxes = bboxes [ cls_mask ] while len ( cls_bboxes ) > 0 : max_ind = np . argmax ( cls_bboxes [:, 4 ]) best_bbox = cls_bboxes [ max_ind ] best_bboxes . append ( best_bbox ) cls_bboxes = np . concatenate ( [ cls_bboxes [: max_ind ], cls_bboxes [ max_ind + 1 :]]) iou = bboxes_iou ( best_bbox [ np . newaxis , : 4 ], cls_bboxes [:, : 4 ]) weight = np . ones (( len ( iou ),), dtype = np . float32 ) assert method in [ 'nms' , 'soft-nms' ] if method == 'nms' : iou_mask = iou > iou_threshold weight [ iou_mask ] = 0.0 if method == 'soft-nms' : weight = np . exp ( - ( 1.0 * iou ** 2 / sigma )) cls_bboxes [:, 4 ] = cls_bboxes [:, 4 ] * weight score_mask = cls_bboxes [:, 4 ] > 0. cls_bboxes = cls_bboxes [ score_mask ] return best_bboxes def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) if __name__ == '__main__' : models = dnn . load ( '../models/fcos_512x512_nv12.bin' ) # 打印输入 tensor 的属性 print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) # 打印输出 tensor 的属性 print ( len ( models [ 0 ] . outputs )) for output in models [ 0 ] . outputs : print_properties ( output . properties ) # 获取 Camera 句柄 cam = srcampy . Camera () # 打开 f37 摄像头，并且把输出突出缩小成算法模型的输入尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) # 打开 F37, 初始化视频 pipeline 0 ，设置帧率30fps，缩放图像为 512 x 512 cam . open_cam ( 0 , 1 , 30 , w , h ) # Get HDMI display object disp = srcampy . Display () # For the meaning of parameters, please refer to the relevant documents of HDMI display disp . display ( 0 , 1920 , 1080 ) input_shape = ( h , w ) while True : # 从相机获取分辨率为 512x512 的nv12格式的图像数据， 参数 2 代表从硬件模块IPU中获取 img = cam . get_img ( 2 , 512 , 512 ) # 把图像数据转成 numpy 数据类型 img = np . frombuffer ( img , dtype = np . uint8 ) # 模型推理 outputs = models [ 0 ] . forward ( img ) # 对算法结果进行过滤，去掉执行度低的检测框，计算检测框的交并比去除冗余框，把检测框的坐标还原到原图位置上 prediction_bbox = postprocess ( outputs , input_shape , origin_img_shape = ( 1080 , 1920 )) # 从新获取一张图像，大小缩放成与显示器的分辨率一样的 1920 x 1080, 并且转换成 bgr格式，方便进行绘图操作 origin_image = cam . get_img ( 2 , 1920 , 1080 ) origin_nv12 = np . frombuffer ( origin_image , dtype = np . uint8 ) . reshape ( 1620 , 1920 ) origin_bgr = cv2 . cvtColor ( origin_nv12 , cv2 . COLOR_YUV420SP2BGR ) # 把算法运行后得到的物体检测框绘制到图像上 box_bgr = draw_bboxs ( origin_bgr , prediction_bbox ) # X3 的HDMI输出模块的输入图像格式需要是NV12的，所以需要先把bgr格式转成NV12 box_nv12 = bgr2nv12_opencv ( box_bgr ) # 把 NV12 格式的图像输出给显示器 disp . set_img ( box_nv12 . tobytes ()) cam . close_cam ()","text_tokens":["suitcase","c2","shape","best",">","摄像","left","代表","bird","输入","int","arange","apple","num","缩小","方便","bus","gettextsize","import","vio","models","600","postprocess","4","max","分辨","bear","teddy","table","mipi","int32",",","newaxis"," ","所以","pipeline","sigma","一张","过滤","从","ce","relevant","len",".","surfboard","get","需要","index","object","linetype","in","uv","}","type","突出","*","banana","detection","dnn","broccoli","hershey","得到","score","坐标","转成","couch","refer","还原","w","并","hw","input","strides","并且","ball","hsv","=","tuples","数据","cvtcolor","meshgrid","to","display","y","先","模型","api","缩小成","0.5","colors","prediction","img","light","为","'","输出","把","clock","cake","转换","giraffe","color","python3","对","glove","data","打印","缩放","resized","mess","]","打开","...","inputs","libsrcampy","4f","wine","and","pyeasy","plant","original","motorcycle","去掉","pad","person","boxes2","+","相机","lambda","traffic","confidence","true","bottle","30fps","_","carrot","reshape","物体","f37","x","scissors","t","cam","usr","__","fork","finfo","frombuffer","bbox","properties","16","umbrella","设置","as","显示器","car","rgb2yuv","32","knife","8","30","remote","inter","转","sign","libs","10","ious","算法","env","获取","摄像头","forward","上","交","尺寸","..","cup","argpartition","right","airplane","idx","drier","like","glass","buffer","method","names","weight","成","y1","初始","{","512x512","refrigerator","结果","planar","transpose","meaning","aa","topk","frisbee","truck","执行","sports","camera","去除","axis","s","cow","array","racket","section","from","meter","nms","dump","chair","fontscale","rectangle","视频","fcos","bowl","concatenate","float32","phone","vase","tobytes","1000","down","bboxes","hair","print","exp","name","运行","绘制","句柄","计算","bicycle","\"","sandwich","中","maximum","handbag","yuv420p","boat","zeros","union","框","1920","是","imwrite","(","：","0.3","图像","if","像头","toilet","stride","冗余","操作","y2","数据类型","cls","与","open","#","set","bed","类型","assert","bin","skateboard","please","512","list","distance2bbox","给","\\","decode","is","sink","转换成","0","/","colorsys","microwave","book","eps","gt","dtype","x3","layout","map","toothbrush","distance","的","toaster","py","stack","up","128","原图","train","hdmi","2","bgr2nv12","0.0","elephant","uint8","append","def","thickness","np","puttext","threshold","后","nv12","检测","c1","分辨率","i","points","of","rgb","min","iou","cv2","ipu","stop","h","模块","初始化","度","hot","大小","not","位置","output","dining","硬件","xv","scale","2f","bgr","numpy","新","potted","cat","dog","the","xy","bench","低","format","origin","255","argmax","格式","3","parameters","cell","picture","tv","scores","backpack","64","model","x1","minimum","属性","到","换成",":","boxes1","documents","5","一样","return","ind","x2","for","进行","bat","size","-","packed","打印输出","pred","outputs","orange","pizza","sheep","range","while","图像格式","fire","false","laptop",")","keyboard","oven","ones","opencv","channel","小成","draw","1","显示","srcampy","thick","pro","输出模块","tensor","height","coor","tie","%.","率","bboxs","帧","1620","yv","soft","width","parking","mask","with","%","disp","load","!","close","[","area","image","enumerate","推理","hobot","simplex","1.0","line","hydrant","yuv420sp2bgr","0.6","比","horse","1080","read","nchw","jpg","绘图","demo","，","sqrt","kite","辨率","i420","spoon","zebra","mouse","classes","snowboard","else","none","main","tennis","参数","font","baseball","box","skis","class","donut"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#usb","text":"如果大家手上没有MIPI接口的相机，使用USB相机也可以实现同样的功能。","text_tokens":["，","如果","。","手上","也","功能","usb","的","可以","没有","大家","mipi","同样","使用","接口","相机","实现"],"title":"USB相机目标检测","title_tokens":["usb","检测","相机","目标"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_5","text":"$ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py","text_tokens":["usb",".","fcos"," ","camera","$","cd","02","python3","py","app","sample","/","ai","inference","_"],"title":"运行例程","title_tokens":["运行","例程"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_6","text":"大家如果没有HDMI显示器的话，也没有问题，刚才的例程，也可以这样来运行，我们通过统一网络环境中的浏览器就可以动态看到结果啦。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/fcosworkconfig.json image_width: = 480 image_height: = 272","text_tokens":["运行","统一","。","浏览","chmod","fcosworkconfig","中","例程","可以","+","这样",":","_","如果","bash","x","-","json","#","来"," ","272","opt","环境","webservice","啦","启动","launch","服务",".","sbin","tros","nginx","显示器","cd","的话","显示","/","webserver","file","height","benchmark","ros2","我们","刚才","dnn","的","没有","r","py","runtime","480","width","hdmi","网络","问题","node","&&","看到","也","image","=","setup","通过","结果","hobot","p","大家","cp","source","config","，","浏览器","websocket","动态","share","$","就","example","lib"],"title":"动态目标检测","title_tokens":["检测","动态","目标"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/","text":"人体检测与跟踪 不知道大家有没有玩过类似XBOX的体感游戏机，上边会有一个相机，动态识别我们的动作，比如跳舞、打球，是不是还挺神奇的，这就是人体检测与跟踪的应用。 TogetherROS中也集成了一套类似的算法，可以识别人体、人头、人脸、人手等一系列关键点，我们来体验一下。 编程开发方法 先来看一个人体识别的基础应用，我们驱动相机后，实时采样视觉信息，然后再通过检测算法，识别每一幅图片中人体位置，并把识别的结果保存成一张图片，便于我们查看。 运行例程 # 下载例程代码（与之前课程下载的代码一致） $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build # 终端1，运行相机 $ source /opt/tros/setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p out_format: = nv12 -p image_width: = 960 -p image_height: = 544 -p video_device: = F37 # 终端2，运行例程 $ source /opt/tros/setup.bash $ source ./install/local_setup.bash $ mkdir -p config && cp -r /opt/tros/lib/dnn_node_example/config/multitask_body_kps_960x544.hbm config/ $ ros2 run cpp_dnn_demo cpp_dnn_demo --ros-args -p image: = config/test.jpg 代码解析 #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" #include \"dnn_node/dnn_node.h\" #include \"dnn_node/util/image_proc.h\" #include \"sensor_msgs/msg/image.hpp\" using namespace hobot :: dnn_node ; class BodyDetNode : public DnnNode { public : BodyDetNode ( const std :: string & node_name = \"body_det\" , const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : DnnNode ( node_name , options ) { // 获取模型输入图片的尺寸，包括图片的宽model_input_width_和高model_input_height ，用于模型前处理 if ( Init () != 0 || GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ) < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Node init fail!\" ); } //创建图片消息的subscriber，订阅的topic为”/image_raw”，消息类型为sensor_msgs::msg::Image。订阅到的图片用于算法模型推理 ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( \"/image_raw\" , 10 , std :: bind ( & BodyDetNode :: FeedImg , this , std :: placeholders :: _1 )); } ~ BodyDetNode () override {} void FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr msg ); protected : int SetNodePara () override { if ( ! dnn_node_para_ptr_ ) return -1 ; //指定模型推理使用的模型文件名和模型名 dnn_node_para_ptr_ -> model_file = \"config/multitask_body_kps_960x544.hbm\" ; dnn_node_para_ptr_ -> model_name = \"multitask_body_kps_960x544\" ; //指定模型输出的人体框的解析方法，其中人体框输出索引为box_output_index_ //使用的解析方法为hobot_dnn预定义的检测框解析方法FaceHandDetectionOutputParser。 std :: shared_ptr < OutputParser > box_out_parser = std :: make_shared < FaceHandDetectionOutputParser > (); dnn_node_para_ptr_ -> output_parsers_ . emplace_back ( std :: make_pair ( box_output_index_ , box_out_parser ) ); return 0 ; } int PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) override ; private : int model_input_width_ = -1 ; int model_input_height_ = -1 ; const int32_t box_output_index_ = 1 ; sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg_ ; rclcpp :: Subscription < sensor_msgs :: msg :: Image >:: ConstSharedPtr ros_img_subscription_ = nullptr ; }; //输出模型结果，并将结果渲染到图片后保存在本地 int BodyDetNode::PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( node_output -> outputs . empty () || static_cast < int32_t > ( node_output -> outputs . size ()) < box_output_index_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid outputs\" ); return -1 ; } auto * filter2d_result = dynamic_cast < Filter2DResult *> ( node_output -> outputs [ box_output_index_ ]. get ()); if ( ! filter2d_result ) return -1 ; std :: stringstream ss ; ss << \"img encoding: \" << img_msg_ -> encoding << \", stamp: \" << img_msg_ -> header . stamp . sec << \",\" << img_msg_ -> header . stamp . nanosec << \" \\n out box size: \" << filter2d_result -> boxes . size () << \" \\n \" ; cv :: Mat nv12 ( img_msg_ -> height * 3 / 2 , img_msg_ -> width , CV_8UC1 , const_cast < char *> ( reinterpret_cast < const char *> ( img_msg_ -> data . data ()))); cv :: Mat bgr ; cv :: cvtColor ( nv12 , bgr , CV_YUV2BGR_NV12 ); for ( auto & rect : filter2d_result -> boxes ) { ss << \"rect: \" << rect . left << \" \" << rect . top << \" \" << rect . right << \" \" << rect . bottom << \" \\n \" ; // 图片渲染 cv :: rectangle ( bgr , cv :: Point ( rect . left , rect . top ), cv :: Point ( rect . right , rect . bottom ), cv :: Scalar ( 255 , 0 , 0 ), 3 ); } std :: string result_image = \"render_\" + std :: to_string ( img_msg_ -> header . stamp . sec ) + \".\" + std :: to_string ( img_msg_ -> header . stamp . nanosec ) + \".jpg\" ; ss << \"Render img to file: \" << result_image ; RCLCPP_INFO ( rclcpp :: get_logger ( \"example\" ), \"%s\" , ss . str (). c_str ()); cv :: imwrite ( result_image , bgr ); return 0 ; } //将nv12格式的图片转成模型输入的数据类型DNNInput后，输入给推理任务 void BodyDetNode::FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg ) return ; if ( \"nv12\" != img_msg -> encoding ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Only support nv12 img encoding!\" ); return ; } img_msg_ = img_msg ; // 创建模型输入数据 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { ImageProc :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ )}; // 运行推理，DnnNode基类中定义并实现的启动推理接口。 Run ( inputs ); } int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < BodyDetNode > ()); rclcpp :: shutdown (); return 0 ; } 人体检测与跟踪 结果保存成图片，虽然便于保留数据，但是不利于动态看到效果，我们不如再来实时动态效果显示。 在这个案例中，我们在之前人体识别的基础上，进一步实现了人体部位的识别和骨骼、眼神等关键点的识别，比如头、脸、身体、手掌、眼睛。 识别的结果同样是通过浏览器来进行查看。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . $ ros2 launch /opt/tros/share/mono2d_body_detection/launch/hobot_mono2d_body_detection.launch.py","text_tokens":["960x544","每",">","dnninput","基础","left","输入","动作","int","用于","chmod","para","人脸","例程","开发","this","postprocess","sec","不利于","利于","同样","mono2d","emplace","宽","动态效果","mipi","int32",",","”","build","bind","cast"," ","一张","&","神奇","一个","使用","outputparser",".","get","信息","msgs","和","index","render","boxes","}","会","*","kps","ros2","detection","dnn","眼睛","没有","argv","git","是不是","并","跟踪","input","const","便于","看到","也","=","数据","cvtcolor","to","识别","8uc1","dev","body","先","玩过","模型","n","dnnnode","实现","img","人头","source","ros","为","shared","（","config","保存","subscriber","输出","private","文件","浏览器","把","来看","shutdown","str","一步","string","public","data","dnnnodeoutput","include","void","|","眼神","parsers","代码","src","]","inputs","support","一致","基类","stringstream","invalid","dynamic","相机","+","了","不如","预定","_","打球","f37","关键","头","x","constsharedptr","run","fail","feedimg","header","t","yuv2bgr","来","cam","效果","再","任务","接口","、","clone","rclcpp","一系列","手掌","启动","launch","sbin","将","cv","auto","转","10","webserver","getmodelinputsize","编程","算法","file","驱动","获取","人体","xbox","视觉","上","我们","尺寸","right","比如","骨骼","hpp","然后","node","cpp","成","系列","脸","{","通过","结果","tutorials","开发方法","应用","大家","togetherros","ptr","back","s","关键点","c","imgcodecs","mkdir","义","游戏","rectangle","$","ss","example","不利","opencv2","名","保留","make","scalar","在","544","nanosec","运行","name","pair","索引","浏览","处理","top","\"","游戏机","gitee","char","中","local","创建","std","可以","colcon","消息","框","还","com","是","install","imwrite","(","这","--","if","logger","test","体感","一下","数据类型","raw","与","out","#","终端","类型","hbm","opt","error","args","但是","using","给","webservice","spin","\\","这个","tros","nginx","cd","0","方法","mat","create","/","跳舞","有没有","类似","only","的","r","py","2","挺","facehanddetectionoutputparser","namespace","core","&&","后","setup","nv12","检测","subscription","options","p","det","cp","~","采样","集成","h","实时","websocket","parser","util","动态","msg","protected","位置","output","proc","stamp","bgr","encoding","video","。","format","指定","课程","255","身体","格式","3","文件名","本地","static","sensor","override","定义","进一步","知道","不是","model","https","到","imageproc",":","bodydetnode","渲染","return","placeholders","filter2dresult","查看","bash","for","一系","体验","进行","size","-","高",";","图片","outputs","multitask","虽然","上边","订阅","<","nullptr","不","rect",")","topic","setnodepara","之前","userdata","960","服务","案例","info","1","显示","guyuehome","vector","getnv12pyramidfromnv12img","height","argc","nodeoptions","包括","result","bottom","解析","人手","init","width","%","!","[","就是","等","image","推理","hobot","）","point","empty","前","ws","jpg","一套","device","其中","一幅","下载","filter2d","，","demo","有","share","imgproc","main","reinterpret","部位","box","lib","class"],"title":"人体检测与跟踪","title_tokens":["人体","与","跟踪","检测"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_1","text":"不知道大家有没有玩过类似XBOX的体感游戏机，上边会有一个相机，动态识别我们的动作，比如跳舞、打球，是不是还挺神奇的，这就是人体检测与跟踪的应用。 TogetherROS中也集成了一套类似的算法，可以识别人体、人头、人脸、人手等一系列关键点，我们来体验一下。","text_tokens":["跳舞","打球","玩过","算法","应用","有没有","大家","会","xbox","人体","togetherros","一系","类似","关键","体验","一下","与","我们","动作","。","人手","关键点","一套","的","来"," ","人头","没有","比如","上边","游戏机","集成","，","是不是","中","、","人脸","游戏","检测","不","跟踪","可以","有","知道","挺","一系列","动态","神奇","一个","系列","还","相机","就是","等","也","不是","了","这","识别","体感"],"title":"人体检测与跟踪","title_tokens":["人体","与","跟踪","检测"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_2","text":"先来看一个人体识别的基础应用，我们驱动相机后，实时采样视觉信息，然后再通过检测算法，识别每一幅图片中人体位置，并把识别的结果保存成一张图片，便于我们查看。","text_tokens":["先","算法","应用","驱动","人体","视觉","每","基础","我们","。","的","图片","一幅","再","采样","保存","，","中","并","检测","实时","把","一张","来看","然后","一个","成","位置","相机","便于","后","通过","结果","信息","识别","查看"],"title":"编程开发方法","title_tokens":["方法","开发","开发方法","编程"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_3","text":"# 下载例程代码（与之前课程下载的代码一致） $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build # 终端1，运行相机 $ source /opt/tros/setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p out_format: = nv12 -p image_width: = 960 -p image_height: = 544 -p video_device: = F37 # 终端2，运行例程 $ source /opt/tros/setup.bash $ source ./install/local_setup.bash $ mkdir -p config && cp -r /opt/tros/lib/dnn_node_example/config/multitask_body_kps_960x544.hbm config/ $ ros2 run cpp_dnn_demo cpp_dnn_demo --ros-args -p image: = config/test.jpg","text_tokens":["video","544","960x544","运行","代码","src","format","课程","一致","gitee","local","例程","colcon","com","相机","install","https","--",":","test","_","bash","mipi","f37","-","与","run","build","out","#","cam"," ","终端","multitask","clone","hbm","opt","args","之前","userdata","960",".","tros","cd","1","guyuehome","/","height","kps","ros2","dnn","的","r","git","width","2","node","cpp","&&","image","=","setup","nv12","）","tutorials","dev","body","p","togetherros","cp","ws","jpg","device","source","下载","ros","mkdir","（","config","，","demo","$","example","lib"],"title":"运行例程","title_tokens":["运行","例程"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_4","text":"#include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" #include \"dnn_node/dnn_node.h\" #include \"dnn_node/util/image_proc.h\" #include \"sensor_msgs/msg/image.hpp\" using namespace hobot :: dnn_node ; class BodyDetNode : public DnnNode { public : BodyDetNode ( const std :: string & node_name = \"body_det\" , const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : DnnNode ( node_name , options ) { // 获取模型输入图片的尺寸，包括图片的宽model_input_width_和高model_input_height ，用于模型前处理 if ( Init () != 0 || GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ) < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Node init fail!\" ); } //创建图片消息的subscriber，订阅的topic为”/image_raw”，消息类型为sensor_msgs::msg::Image。订阅到的图片用于算法模型推理 ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( \"/image_raw\" , 10 , std :: bind ( & BodyDetNode :: FeedImg , this , std :: placeholders :: _1 )); } ~ BodyDetNode () override {} void FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr msg ); protected : int SetNodePara () override { if ( ! dnn_node_para_ptr_ ) return -1 ; //指定模型推理使用的模型文件名和模型名 dnn_node_para_ptr_ -> model_file = \"config/multitask_body_kps_960x544.hbm\" ; dnn_node_para_ptr_ -> model_name = \"multitask_body_kps_960x544\" ; //指定模型输出的人体框的解析方法，其中人体框输出索引为box_output_index_ //使用的解析方法为hobot_dnn预定义的检测框解析方法FaceHandDetectionOutputParser。 std :: shared_ptr < OutputParser > box_out_parser = std :: make_shared < FaceHandDetectionOutputParser > (); dnn_node_para_ptr_ -> output_parsers_ . emplace_back ( std :: make_pair ( box_output_index_ , box_out_parser ) ); return 0 ; } int PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) override ; private : int model_input_width_ = -1 ; int model_input_height_ = -1 ; const int32_t box_output_index_ = 1 ; sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg_ ; rclcpp :: Subscription < sensor_msgs :: msg :: Image >:: ConstSharedPtr ros_img_subscription_ = nullptr ; }; //输出模型结果，并将结果渲染到图片后保存在本地 int BodyDetNode::PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( node_output -> outputs . empty () || static_cast < int32_t > ( node_output -> outputs . size ()) < box_output_index_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid outputs\" ); return -1 ; } auto * filter2d_result = dynamic_cast < Filter2DResult *> ( node_output -> outputs [ box_output_index_ ]. get ()); if ( ! filter2d_result ) return -1 ; std :: stringstream ss ; ss << \"img encoding: \" << img_msg_ -> encoding << \", stamp: \" << img_msg_ -> header . stamp . sec << \",\" << img_msg_ -> header . stamp . nanosec << \" \\n out box size: \" << filter2d_result -> boxes . size () << \" \\n \" ; cv :: Mat nv12 ( img_msg_ -> height * 3 / 2 , img_msg_ -> width , CV_8UC1 , const_cast < char *> ( reinterpret_cast < const char *> ( img_msg_ -> data . data ()))); cv :: Mat bgr ; cv :: cvtColor ( nv12 , bgr , CV_YUV2BGR_NV12 ); for ( auto & rect : filter2d_result -> boxes ) { ss << \"rect: \" << rect . left << \" \" << rect . top << \" \" << rect . right << \" \" << rect . bottom << \" \\n \" ; // 图片渲染 cv :: rectangle ( bgr , cv :: Point ( rect . left , rect . top ), cv :: Point ( rect . right , rect . bottom ), cv :: Scalar ( 255 , 0 , 0 ), 3 ); } std :: string result_image = \"render_\" + std :: to_string ( img_msg_ -> header . stamp . sec ) + \".\" + std :: to_string ( img_msg_ -> header . stamp . nanosec ) + \".jpg\" ; ss << \"Render img to file: \" << result_image ; RCLCPP_INFO ( rclcpp :: get_logger ( \"example\" ), \"%s\" , ss . str (). c_str ()); cv :: imwrite ( result_image , bgr ); return 0 ; } //将nv12格式的图片转成模型输入的数据类型DNNInput后，输入给推理任务 void BodyDetNode::FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg ) return ; if ( \"nv12\" != img_msg -> encoding ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Only support nv12 img encoding!\" ); return ; } img_msg_ = img_msg ; // 创建模型输入数据 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { ImageProc :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ )}; // 运行推理，DnnNode基类中定义并实现的启动推理接口。 Run ( inputs ); } int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < BodyDetNode > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["dnnnodeoutput","include","void","|","960x544","parsers","nanosec",">","dnninput","name","left","运行","输入","。","pair","指定","]","int","用于","索引","255","处理","top","\"","support","格式","para","3","inputs","文件名","char","基类","中","data","本地","static","创建","stringstream","invalid","sensor","std","override","定义","消息","框","dynamic","this","+","imwrite","model","(","postprocess","到","sec","imageproc",":","if","bodydetnode","logger","return","placeholders","渲染","filter2dresult","预定","_","emplace","宽","int32","for",",","数据类型","”","size","raw","-","constsharedptr","高","run","fail","#",";","feedimg","out","t","header","bind","cast","yuv2bgr"," ","图片","outputs","类型","multitask","任务","接口","订阅","<","nullptr","rect","hbm","rclcpp","error",")","topic","&","setnodepara","使用","using","给","outputparser","spin","启动","\\",".","info","0","get","1","方法","mat","msgs","和","/","create","index","将","auto","cv","render","转","10","boxes","getmodelinputsize","vector","算法","file","getnv12pyramidfromnv12img","}","height","获取","人体","*","argc","nodeoptions","only","包括","kps","result","bottom","尺寸","解析","dnn","init","的","right","argv","width","2","并","hpp","input","%","facehanddetectionoutputparser","namespace","node","const","!","core","成","{","[","image","=","后","nv12","数据","cvtcolor","结果","推理","hobot","to","检测","8uc1","subscription","options","point","body","模型","det","n","ptr","back","empty","s","dnnnode","前","img","实现","~","jpg","c","imgcodecs","其中","ros","filter2d","为","shared","义","config","保存","，","h","subscriber","输出","private","文件","rectangle","parser","util","imgproc","shutdown","ss","example","msg","protected","main","output","opencv2","str","proc","stamp","名","string","bgr","encoding","reinterpret","make","scalar","box","public","在","class"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_5","text":"结果保存成图片，虽然便于保留数据，但是不利于动态看到效果，我们不如再来实时动态效果显示。 在这个案例中，我们在之前人体识别的基础上，进一步实现了人体部位的识别和骨骼、眼神等关键点的识别，比如头、脸、身体、手掌、眼睛。 识别的结果同样是通过浏览器来进行查看。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . $ ros2 launch /opt/tros/share/mono2d_body_detection/launch/hobot_mono2d_body_detection.launch.py","text_tokens":["眼神","基础","运行","。","浏览","chmod","身体","中","例程","进一步","是","+","了","不利于","不如","利于","同样","mono2d","查看","_","bash","动态效果","进行","关键","头","x","-","#","来","效果","图片"," ","再","虽然","、","opt","但是","手掌","之前","webservice","启动","launch","sbin",".","这个","案例","服务","tros","nginx","cd","显示","和","/","webserver","人体","上","ros2","我们","detection","的","眼睛","r","py","比如","骨骼","成","&&","脸","便于","看到","等","setup","通过","数据","结果","hobot","识别","body","p","cp","实现","关键点","source","config","保存","，","实时","浏览器","websocket","动态","share","$","不利","一步","保留","部位","lib","在"],"title":"人体检测与跟踪","title_tokens":["人体","与","跟踪","检测"]}]}