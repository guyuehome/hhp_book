{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。 本教程将会以旭日X3派为平台，介绍地平线机器人开发平台的使用原理与方法。 教程链接汇总 旭日X3派开发板使用手册： https://developer.horizon.ai/api/v1/fileData/documents_pi/index.html 机器人开发平台使用手册： https://developer.horizon.ai/api/v1/fileData/TogetherROS/index.html 视频课程： https://class.guyuehome.com/all/10284445/19617453 图文教程： https://hhp.guyuehome.com/ 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/92 博客泡圈： https://www.guyuehome.com/","text_tokens":["https","程式","层面","链接","大脑","一代","主控","2022","操作系统","的","部分","传感器","平台","、","正式","多","92","帮助","进行","软件","课程","复杂","图文","：","all","api","感器","操作","，","包括","感知","等","各种各样","地平线","horizon","执行","是","使用手册","计算","工具","手册","引言","更","circledetail","方法","www","html","驱动","环境","硬件","一个","x3","推出","pi","动作","等等","各种","v1","/","filedata","泡圈","年","月","教程","将会","给","class","开发板","19617453","算法","developer","com","非常","地平","视频","为","6","信息","id","介绍","在","机器",".","非常复杂","问答","开发","行业","派","机器人","与","全新","系统","各样","带来","汇总","ai","使用",":","guyuehome","传感","10284445","index"," ","电机","documents","数据","hhp","旭日","作为","bubble","_","博客","规控","以","。","原理","togetherros","本"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。 本教程将会以旭日X3派为平台，介绍地平线机器人开发平台的使用原理与方法。","text_tokens":["程式","层面","大脑","一代","主控","2022","操作系统","的","部分","传感器","平台","、","正式","多","帮助","进行","软件","复杂","：","感器","操作","，","包括","感知","等","各种各样","地平线","执行","是","计算","工具","更","方法","驱动","环境","硬件","一个","x3","推出","动作","等等","各种","年","月","教程","将会","给","算法","非常","地平","为","6","信息","介绍","在","机器","非常复杂","开发","行业","派","机器人","与","全新","系统","各样","带来","使用","传感","电机"," ","数据","旭日","作为","规控","以","。","原理","本"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"旭日X3派开发板使用手册： https://developer.horizon.ai/api/v1/fileData/documents_pi/index.html 机器人开发平台使用手册： https://developer.horizon.ai/api/v1/fileData/TogetherROS/index.html 视频课程： https://class.guyuehome.com/all/10284445/19617453 图文教程： https://hhp.guyuehome.com/ 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/92 博客泡圈： https://www.guyuehome.com/","text_tokens":["派","机器人","教程","https","horizon","class","使用手册","开发板","developer","19617453","com","视频","手册","泡圈","ai","使用",":","circledetail","guyuehome","10284445","id","平台","www","index"," ","documents","html","92","x3","课程","hhp","图文","pi","旭日","：","bubble","_","all","博客","api","机器","v1",".","/","togetherros","问答","开发","filedata"],"title":"教程链接汇总","title_tokens":["汇总","教程","链接"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["优质","捆绑","实践","未来","面向","至今","追究","被","致力","1000","法律","人才","brand","的","知名","所有","拥有","累积","平台","、","追究其","进行","违反","学习","武汉","课程","@","合作","社区","，","包括","许可","等","创新","销售","声明者","是","产品","居","抄录","面向未来","公司","众多","出版","线上","作品","联系","生态","通过","www","请","创建","畅销","单位","传播","学","限于","交流","内容","图书","交流学习","精锋","复制","）","建立","校企","学习者","但","源码","年","万字","《","2011","上","模式","小时","一体","均","个人","com","视频","究其","ros","为","不","万人","如需","其它","明者","集","赋能","人才培养","努力","合法","提供","华语","有限公司","高质量","声明","机器","修改",".","镜像","》","网站","课件","开发","古月","致力于","机器人","+","构建","依法","授权","法律责任","和","与","有权","或","质量","高校","仅限","地区","任何","不得","高质","将","及","ai","使用","未经","用户","guyuehome","企业"," ","超过","有限","责任","上述","科技","书面","版权","微控","120","培养","。","（","对本","本"],"title":"关于我们","title_tokens":["关于","我们"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["优质","实践","未来","面向","至今","致力","1000","人才","的","知名","累积","平台","、","学习","课程","合作","社区","，","等","创新","是","居","面向未来","众多","出版","线上","生态","通过","www","创建","畅销","交流","内容","图书","交流学习","）","建立","校企","学习者","年","万字","《","2011","模式","小时","一体","com","视频","ros","为","万人","集","赋能","人才培养","努力","提供","华语","高质量","机器",".","》","开发","古月","致力于","机器人","+","构建","与","质量","高校","地区","高质","及","ai","用户","guyuehome","企业"," ","超过","120","培养","。","（"],"title":"学机器人，上古月居","title_tokens":["居","学","机器人","上","机器","，","古月"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["捆绑","追究","被","法律","brand","的","所有","拥有","、","追究其","进行","违反","学习","武汉","课程","@","，","包括","许可","等","销售","声明者","产品","居","抄录","公司","作品","联系","请","单位","传播","限于","精锋","复制","但","源码","均","个人","com","视频","究其","为","不","如需","其它","明者","合法","有限公司","声明","修改","镜像",".","网站","课件","古月","依法","授权","法律责任","和","有权","与","或","仅限","任何","不得","将","使用","未经","用户","guyuehome"," ","有限","责任","上述","科技","书面","版权","微控","。","对本","本"],"title":"版权声明","title_tokens":["版权","声明"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/","text":"智能机器人发展与现状 智能机器人正在改变着我们的生活，想象这样一种场景。 也许不知不觉的某一天，我们就会发现类似这样的机器人会真实出现在生活当中。 科技的发展日新月异，智能机器人也突飞猛进，伴随机器人发展而生的机器人操作系统，也是机器人重要的发展动力之一。 智能机器人举例 提到智能机器人，大家脑海里会映射出什么样的情景呢？ 是不是会有很多科幻电影中变形金刚、大白机器人、星球大战等场景呢？ 智能机器人这个概念，只是一个科幻词汇么？当然不是的，其实在我们身边，已经有越来越多智能机器人出现，我们来看看他们都在哪里？ 扫地机器人 先来看一个大家最熟悉的一个类型——扫地机器人。现在的扫地机器人，除了可以完成扫地、拖地这样一些基本功能之外，还搭载了激光雷达、相机、红外等十几种传感器。 一个全新的扫地机器人虽然是第一次来到你家，但是它可能用到 5 分到 10 分钟时间，很快就可以通过它的传感器对你的家庭环境了如指掌，也就是把实际的家庭环境做成了一张地图，这样他就会知道哪里是卧室，哪里是餐厅，哪里是厨房，不同的区域用多大的风力，用多大的水量来去清扫最为合适，它都会智能化地来做判断。 除此之外，它还得知道怎么样去躲避各种障碍物，比如说家里面的宠物、地上摆放的插线板，各种各样的杂物等等。 所以看似非常小的一个扫地机器人，其实已经是一个很智能化的家用设备了，正在潜移默化地改变着我们的生活。 自动化仓储 第二个案例，虽然大部分人在生活中不会直接接触，但却和每一个人息息相关，那就是自动化仓储。 这是京东某个实际部署运营的一套自动化的仓库，在里面可以看到各种各样的机器人，比如工业机械臂、移动机器人等等，这套立体仓库当中大量的货架也是自动化的，这就是一个典型的机器人应用场景。 之前有一个关于京东的新闻报道，里边讲到，从我们下单那刻开始，到商品分拣出来放到快递员手上，只需要20分钟。比如我们要买个手机，下单付款，20分钟之后，这个手机已经从这么庞大的仓库中顺利找到，并且完成了包装、打标、分配等一系列工序。这样，我们在绝大部分城市，基本都可以体验到下单之后，当天或者隔天收货的体验，为什么它可以做到如此高效，就是因为背后这一套由机器人组成的自动化系统，借助大数据的分析，甚至可以做到在你下单之前，平台就知道你将要买什么东西。比如说你会按照一个月的频率买米买面，那平台就可以预测到上个月你买的米应该快吃完了，然后就会在距离你家最近的一个仓库里面备货。 当你下单之后，这袋米可能半个小时送到你手上了。 自动驾驶 第三个案例，那就是当今最为热门的技术之一——自动驾驶。 自动驾驶汽车也是典型的移动机器人系统，为了保证绝对安全的驾驶过程，汽车上装配了非常多的传感器，以及极为复杂的控制算法。 视频中我们看到的是华为自动驾驶系统在实际路面上测试的效果，自动驾驶汽车通过多个相机、雷达、超声波，实时构建周围环境的三维信息，不仅可以动态识别路面上的行人车辆、车道线、交通指示灯等，还可以安全完成超车、会车、跟车、转向等重要功能，同时对突发状况也可以及时处理，比如躲避突然出现的车辆、礼让行人等，最终自动行驶入库，把我们安全顺利的送到目的地。 虽然自动驾驶相关的技术和法律法规还在不断完善中，但是相信有一天我们每个人都可以体验自动驾驶的乐趣，而且这一天不会太远。 智能机器人发展 机器人的发展横跨几十年，经历了三个重要时期。 2000年前，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 2015年之后，智能机器人市场迅速爆发，到2025年，国内人工智能市场有望达到1164亿元，而作为人工智能重要载体的机器人，市场更会达到1463亿元。 行业的快速发展，必将带动大量专业人才的需求，人才缺口也将逐年扩大，2025年，预计国内机器人行业的人才缺口将超过450万，人工智能方面的缺口更会达到1000万。 面对如此严峻的人才需求，国内各高校从2016年起，陆续开设机器人和人工智能专业，为人才的供给提供有力保障。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角。 机器人操作系统 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是机器人操作系统。 ROS的诞生 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣、做饭、收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法：既然自己做不到，那为什么不联合所有人一起干呢？如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在这几个图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面，却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS怀揣“提高机器人软件复用率”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 ROS的特点 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。","text_tokens":["零部件","躲避","今日","最","自己","距离","十几种","法规","家","机制","层面","这套","变形","远","法律法规","低","福大","教器","地","至今","研究","潜移默化","突发","有望","当然","新闻报道","却","入库","资金","动态","促使","潜移","整合","有志","新","庞大","棒","、","巨人","实时","正式","星球","率","代表","以及","用到","不仅","广泛","实际","宽松","起来","不断","默化","agv","伺服电机","直接","大部分","手机","预测","支持","工业","主要","叠","超声波","很多","来到","四大","一系列","“","一群","也","绝对","左右","圈","判断","了如指掌","驾驶","最高","—","闻报","同样","员","时间","对","上个","手上","智慧","找到","目的地","ros1","熟悉","通过","周围","驱动器","精致","狗","看到","逐年","玩耍","运营","热点","基本功能","头发","跑","是不是","备货","分享","收货","十年","仿生","回答","第二个","围绕","动作","初期","下载","之内","打","款","生产","需求","行驶","先","更加","原型","突飞猛进","立体仓库","上边","教程","月","c","借助","无疑","大战","迅速","拖地","增长速度","部署","息息相关","深知","分钟","衣服","org","维基百科","上市","也许","吃","餐厅","信息","参考","维基","控制器","各项","根据","肩膀","工序","2007","太","应该","杂物","几十年","所以","买米","插","体验","情景","5","1463","买面","做出","后期","既然","涉及","媒体",".","实验室","曲线","关注","开发","之前","行业","二个","有","市场","给出","b","尝试","度","40","一起","类似","光靠","之一","缺口","一种","国家","全新","这袋","如此","当今","1164","并且","送到","简单","各样","视觉","；","ai","沉淀","木头","把","计算机","个","传感","领域","推进","张图","不同","怎么样","电机","index","一切","超过","助推","图中","得","越来越","可以","四项","整理","存储","大白","起","以","包装","区域","着","比如","做饭","排名","商品","这一波","应用软件","用多大","减速机","改变","金刚","本身","论坛","相机","以叠","苹果","电气","技术","新闻","由示","第三","生态系","除了","两个","2000","讲","传感器","井喷","引擎","访问","场景","风力","臂","而言","多","提高","轮子","俗称","帮助","软件","及时","有力","出来","之后","：","以上","就是","感器","同理","处理","，","基本上","他","只能","雷达","什么","各种各样","城市","更会","十几","而生","执行","是","专业","极为","工具","功能","工厂","状","万","合适","容易","控制","做法","不要","更","统统","最为","那","相关","行人","快速","最后","数据库","目的","激光","discourse","举例","环境","减速","服务","做到","基本功","来","放到","大部","一大","商业","趋势","人形","算机","统计","局部","随着","同一","这些","缩短","变形金刚","具备","地图","身边","一个月","年","进步","模块化","维基百","2025","答案","想法","聊天","开始","wiki","革命","查看","大","快","华为","无聊","核心","你家","效果","视频","真的","访问量","100","得以","指示","搭载","下来","一些","大步","标准","问题","嵌入式","如何","研发","嵌入","还","复合","机器","设备","载体","外观","扩大","线","2016","礼让","它","三维","？","15","新鲜","一系","除此","和","车辆","才","家用","personal","结晶","宠物","于","经历","映射","任何","买个","系统","劳动","工业生产","控制算法","当中","科幻电影","就","分析","最近","超车","robot","组成","使用","用户","达到","水量","突飞","案例","关于","知道","高","半个","厨房","2","只","性能","一天","科技","繁荣","几个","完成","要","可为","哪里","命令","已经","后","过程","有没有","全球","几种","一次","第一次","交通","250","时期","长远","剪头发","成为","这个","轰动","说明","被","时至今日","业生","类型","来讲","法律","1000","频繁","人才","基于","不是","虽然","家庭环境","所有","真实","10","包","智能","某","绝大部分","完善","洗衣","装配","充足","身影","尽量","发展","突发状况","linux","不想","每","这","分配","红外","复杂","状况","人工","总而言之","科幻","移动","条","近几年","去","”","实验","情况","团队","突然","严峻","一家","安全","操控","感知","应用","需要","呈","活跃","多项","现状","这里","模块","家庭","热门","面对","ros2","大家","隔天","路面","完全","甚至","方面","台球","针对","那刻","发状","立体","时代","出","斯坦福大学","乐意","自动化","索引","付款","前夜","米","带动","这么","地来","百科","加","不知不觉","从","日新月异","驱动","要求","框架","一个","而","顺利","全人","第二","数字","伴随","但是","完","各种","律法","丰富","packages","开发工具","跨平台","接触","各","但","干","源码","25","效率","将要","太远","移动机器人","总称","一款","浏览量","怀揣","算是","20","激光雷达","算法","京东","150","此时","识别","人工智能","其实","什么样","看看","除此之外","诞生","事情","无论是","据库","星球大战","页面","测试","分","开设","不","所有人","用","序幕","为什么","指示灯","会","每个","做","方式","活动","这样","及时处理","在生活中","当","a","动力","同时","转向","全球化","一步","不知","向前走","商业化","多个","乐趣","次数","网站","程度","部件","问答","因为","只要","青年","浏览","年前","自身","自主","pr2","报道","四足","为了","高校","联合","元素","概念","记录","出现","很快","典型","其中","清晰","迅猛","中","windows","上个月","从中","障碍物","之","上去","猛进","开源"," ","不过","独立","这是","供给","通信","特点","人才需求","集合","清扫","一张","打标","数据","保障","卧室","释放","里面","代","频率","必将","。","亿元","看似","横跨","绝大","站","发表","检测","制造","电路","还是","提到","第一","障碍","全人类","推动","如果","第三个","而且","我们","不觉","浪潮","很","背后","目标","三个","许可证","造","只是","成果","活跃度","操作系统","友好","的","最佳","新增","学术","里会","做成","不会","部分","分拣","伺服","平台","快递","最终","肯定","由","生态系统","对于","相信","劳动力","国内","实现","课程","扫地","其他","多媒体系统","拉开","汽车","无论","声波","操作","社区","许可","然后","等","因","资源","来看","都","正如","差不多","呢","物体","斯坦福","脑海","陆续","或者","产品","自动","已有","计算","此","柔性","一套","得到","强悍","逐渐","公司","爆发","生态","地上","设计","用于","动机","陪","跟车","发现","当天","450","复用","普遍","大有可为","不断丰富","词汇","他们","没有","不到","采购","之外","大学","水下","等等","保证","比如说","越来","仓储","思考","特性","货架","地域","仓库","上","软件系统","东西","小时","么","并","提出","2015","给","不多","里边","个人","重新","系列","机械","生活","非常","向前","几十","主角","收拾","ros","为","说干就干","可能","体系","到","增长","万人","毛巾","新鲜事","时候","缺少","提供","开发者","创意","在","了","依然","小","总体","人","多万","高效","有人","线板","上图","万左右","摆放","重要","超声","机器人","人数","通常","某个","构建","几年","与","新月","送餐","现在","发布","下单","讨论","电影","明智","零","为例","answers","将","专业人才","拉开序幕","更为","正在","人类","80","大量","买","不断完善","你","一大步","按照","车道","怎么","周围环境","智能化","速度","熨烫","基本","有限","别人","预计","作为","车","日常","当时","这款","想象","多媒体"],"title":"智能机器人发展现状","title_tokens":["智能","机器人","机器","现状","发展"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_1","text":"智能机器人正在改变着我们的生活，想象这样一种场景。 也许不知不觉的某一天，我们就会发现类似这样的机器人会真实出现在生活当中。 科技的发展日新月异，智能机器人也突飞猛进，伴随机器人发展而生的机器人操作系统，也是机器人重要的发展动力之一。","text_tokens":["机器人","突飞猛进","类似","想象","也","改变","之一","一种","不觉","我们","新月","而生","是","生活","出现","系统","也许","操作系统","当中","就","的","正在","真实","智能","某","突飞","猛进","场景"," ","会","不知不觉","发现","日新月异","这样","发展","一天","动力","在","科技","重要","伴随","不知","机器","。","操作","着","，"],"title":"智能机器人发展与现状","title_tokens":["智能","机器人","机器","现状","与","发展"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_2","text":"提到智能机器人，大家脑海里会映射出什么样的情景呢？ 是不是会有很多科幻电影中变形金刚、大白机器人、星球大战等场景呢？ 智能机器人这个概念，只是一个科幻词汇么？当然不是的，其实在我们身边，已经有越来越多智能机器人出现，我们来看看他们都在哪里？","text_tokens":["变形金刚","已经","很多","有","机器人","身边","等","？","提到","什么","大战","都","呢","变形","金刚","么","我们","脑海","大家","这个","概念","只是","电影","映射","出现","当然","其实","什么样","看看","中","科幻电影","星球大战","的","出","不是","里会","智能","、","场景"," ","会","星球","多","是不是","一个","词汇","越来越","在","来","他们","情景","科幻","大白","机器","哪里","越来","，"],"title":"智能机器人举例","title_tokens":["机器","举例","智能","机器人"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_3","text":"先来看一个大家最熟悉的一个类型——扫地机器人。现在的扫地机器人，除了可以完成扫地、拖地这样一些基本功能之外，还搭载了激光雷达、相机、红外等十几种传感器。 一个全新的扫地机器人虽然是第一次来到你家，但是它可能用到 5 分到 10 分钟时间，很快就可以通过它的传感器对你的家庭环境了如指掌，也就是把实际的家庭环境做成了一张地图，这样他就会知道哪里是卧室，哪里是餐厅，哪里是厨房，不同的区域用多大的风力，用多大的水量来去清扫最为合适，它都会智能化地来做判断。 除此之外，它还得知道怎么样去躲避各种障碍物，比如说家里面的宠物、地上摆放的插线板，各种各样的杂物等等。 所以看似非常小的一个扫地机器人，其实已经是一个很智能化的家用设备了，正在潜移默化地改变着我们的生活。","text_tokens":["已经","躲避","最","用多大","十几种","家","第一","几种","一次","第一次","障碍","改变","我们","相机","很","地","潜移默化","类型","除了","的","虽然","潜移","家庭环境","做成","传感器","10","智能","、","风力","用到","实际","扫地","红外","默化","就是","感器","去","，","来到","他","等","来看","雷达","都","也","各种各样","十几","家庭","是","了如指掌","大家","判断","—","功能","合适","时间","对","最为","熟悉","通过","地上","地来","基本功能","激光","环境","一个","基本功","来","之外","但是","等等","各种","比如说","先","地图","拖地","激光雷达","分钟","生活","非常","你家","其实","除此之外","餐厅","可能","到","分","会","做","搭载","一些","这样","杂物","所以","插","了","还","小","5","机器","设备","线板","摆放","机器人","它","除此","现在","全新","家用","宠物","很快","各样","就","正在","把","传感","障碍物","水量","你","不同"," ","怎么样","知道","怎么","厨房","智能化","基本","得","清扫","一张","可以","卧室","完成","里面","哪里","区域","。","看似","着","比如"],"title":"扫地机器人","title_tokens":["机器","扫地","机器人"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_4","text":"第二个案例，虽然大部分人在生活中不会直接接触，但却和每一个人息息相关，那就是自动化仓储。 这是京东某个实际部署运营的一套自动化的仓库，在里面可以看到各种各样的机器人，比如工业机械臂、移动机器人等等，这套立体仓库当中大量的货架也是自动化的，这就是一个典型的机器人应用场景。 之前有一个关于京东的新闻报道，里边讲到，从我们下单那刻开始，到商品分拣出来放到快递员手上，只需要20分钟。比如我们要买个手机，下单付款，20分钟之后，这个手机已经从这么庞大的仓库中顺利找到，并且完成了包装、打标、分配等一系列工序。这样，我们在绝大部分城市，基本都可以体验到下单之后，当天或者隔天收货的体验，为什么它可以做到如此高效，就是因为背后这一套由机器人组成的自动化系统，借助大数据的分析，甚至可以做到在你下单之前，平台就知道你将要买什么东西。比如说你会按照一个月的频率买米买面，那平台就可以预测到上个月你买的米应该快吃完了，然后就会在距离你家最近的一个仓库里面备货。 当你下单之后，这袋米可能半个小时送到你手上了。","text_tokens":["已经","商品","距离","这套","我们","背后","这个","新闻报道","却","新闻","的","虽然","讲","不会","部分","分拣","庞大","平台","、","快递","场景","臂","由","绝大部分","实际","出来","每","这","之后","分配","移动","直接","就是","大部分","手机","预测","工业","，","一系列","然后","等","应用","需要","都","什么","各种各样","也","城市","是","或者","隔天","自动","甚至","闻报","员","一套","那刻","上个","手上","找到","立体","那","相关","自动化","付款","动机","看到","米","这么","运营","从","备货","一个","当天","收货","顺利","做到","第二个","放到","第二","大部","等等","各种","完","比如说","仓储","货架","接触","但","一个月","立体仓库","仓库","借助","将要","东西","小时","移动机器人","开始","里边","部署","20","息息相关","系列","分钟","机械","京东","生活","大","快","你家","吃","可能","到","为什么","会","工序","应该","这样","在生活中","当","买米","在","了","体验","人","买面","机器","高效","之前","因为","二个","有","机器人","它","某个","一系","和","报道","这袋","下单","如此","并且","典型","送到","买个","系统","各样","当中","中","分析","就","最近","组成","上个月","大量","买","你","案例","关于"," ","按照","知道","半个","这是","只","基本","数据","打标","可以","里面","要","完成","频率","包装","。","绝大","比如"],"title":"自动化仓储","title_tokens":["自动化","仓储","自动"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_5","text":"第三个案例，那就是当今最为热门的技术之一——自动驾驶。 自动驾驶汽车也是典型的移动机器人系统，为了保证绝对安全的驾驶过程，汽车上装配了非常多的传感器，以及极为复杂的控制算法。 视频中我们看到的是华为自动驾驶系统在实际路面上测试的效果，自动驾驶汽车通过多个相机、雷达、超声波，实时构建周围环境的三维信息，不仅可以动态识别路面上的行人车辆、车道线、交通指示灯等，还可以安全完成超车、会车、跟车、转向等重要功能，同时对突发状况也可以及时处理，比如躲避突然出现的车辆、礼让行人等，最终自动行驶入库，把我们安全顺利的送到目的地。 虽然自动驾驶相关的技术和法律法规还在不断完善中，但是相信有一天我们每个人都可以体验自动驾驶的乐趣，而且这一天不会太远。","text_tokens":["躲避","过程","法规","交通","第三个","而且","我们","法律法规","相机","三个","技术","突发","入库","法律","第三","动态","的","虽然","不会","传感器","、","最终","实时","多","以及","完善","不仅","相信","装配","实际","及时","突发状况","不断","复杂","状况","这","移动","就是","汽车","感器","声波","处理","，","突然","超声波","安全","等","雷达","都","也","绝对","热门","是","驾驶","路面","自动","—","极为","功能","控制","对","发状","最为","目的地","那","行人","相关","通过","周围","动机","目的","看到","跟车","环境","顺利","但是","律法","保证","行驶","上","太远","移动机器人","算法","非常","华为","效果","识别","视频","测试","信息","指示灯","会","每个","指示","及时处理","同时","在","了","还","转向","体验","人","机器","多个","乐趣","重要","超声","线","礼让","机器人","有","三维","构建","和","之一","车辆","为了","当今","典型","出现","送到","系统","控制算法","中","超车","把","传感","不断完善","案例"," ","车道","周围环境","一天","可以","完成","车","。","比如"],"title":"自动驾驶","title_tokens":["驾驶","自动"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_6","text":"机器人的发展横跨几十年，经历了三个重要时期。 2000年前，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 2015年之后，智能机器人市场迅速爆发，到2025年，国内人工智能市场有望达到1164亿元，而作为人工智能重要载体的机器人，市场更会达到1463亿元。 行业的快速发展，必将带动大量专业人才的需求，人才缺口也将逐年扩大，2025年，预计国内机器人行业的人才缺口将超过450万，人工智能方面的缺口更会达到1000万。 面对如此严峻的人才需求，国内各高校从2016年起，陆续开设机器人和人工智能专业，为人才的供给提供有力保障。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角。","text_tokens":["后","过程","检测","减速机","层面","我们","时期","教器","成为","三个","电气","技术","有望","业生","类型","由示","1000","操作系统","人才","2000","的","最佳","伺服","传感器","井喷","智能","、","而言","正式","多","俗称","帮助","软件","劳动力","国内","有力","发展","课程","不断","之后","这","agv","人工","拉开","伺服电机","就是","感器","汽车","工业","主要","操作","，","严峻","操控","等","应用","只能","感知","呈","也","更会","家庭","执行","专业","是","驾驶","面对","陆续","自动","完全","计算","方面","工厂","状","万","控制","对","逐渐","更","时代","爆发","最为","驱动器","快速","狗","前夜","带动","逐年","热点","从","驱动","环境","要求","减速","450","而","仿生","十年","不断丰富","服务","没有","数字","动作","算机","但是","局部","丰富","生产","随着","思考","需求","各","更加","年","2025","迅速","并","提出","2015","大","此时","几十","主角","人工智能","为","到","开设","控制器","序幕","缺少","太","几十年","提供","动力","了","依然","1463","机器","设备","载体","重要","关注","扩大","开发","行业","2016","市场","机器人","年前","和","之一","缺口","送餐","自主","四足","高校","1164","如此","于","经历","出现","系统","视觉","劳动","工业生产","将","专业人才","ai","拉开序幕","计算机","人类","传感","达到","大量"," ","按照","电机","不过","高","这是","供给","超过","智能化","人才需求","有限","预计","保障","作为","释放","起","命令","必将","。","亿元","横跨"],"title":"智能机器人发展","title_tokens":["机器","发展","智能","机器人"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_7","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是机器人操作系统。","text_tokens":["已经","青年","机器人","给出","尝试","上","一群","答案","层面","斯坦福","是","福大","或者","这个","技术","非常","针对","系统","操作系统","的","不是","有志","斯坦福大学","那","智能","对于","独立","一个","问题","复杂","越来越","可以","如何","人","完成","大学","机器","高效","就是","开发","。","操作","越来","团队","重要","，"],"title":"机器人操作系统","title_tokens":["机器人","系统","机器","操作系统","操作"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros","text":"2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣、做饭、收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法：既然自己做不到，那为什么不联合所有人一起干呢？如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在这几个图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面，却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS怀揣“提高机器人软件复用率”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。","text_tokens":["零部件","已经","今日","有没有","应用软件","自己","电路","还是","家","第一","一次","第一次","如果","而且","层面","我们","推动","低","很","剪头发","这个","以叠","成为","轰动","目标","苹果","至今","研究","资金","时至今日","却","基于","促使","的","虽然","学术","所有","平台","、","肯定","提高","多","率","臂","帮助","洗衣","软件","广泛","充足","身影","实现","发展","不想","出来","这","复杂","：","条","移动","就是","无论","手机","”","实验","叠","处理","社区","，","很多","一系列","“","等","应用","因","都","什么","也","呢","专业","圈","物体","是","而生","大家","—","甚至","台球","功能","同样","容易","柔性","一套","强悍","更","找到","统统","那","精致","设计","用于","最后","快速","动机","看到","陪","玩耍","头发","框架","分享","一个","复用","普遍","服务","他们","没有","一大","不到","人形","初期","但是","水下","之内","打","各种","款","同一","干","原型","年","上","效率","软件系统","想法","聊天","并","移动机器人","一款","怀揣","个人","深知","系列","机械","衣服","分钟","此时","无聊","向前","真的","事情","诞生","收拾","无论是","说干就干","ros","可能","不","所有人","用","100","毛巾","为什么","时候","得以","做","一些","2007","大步","这样","标准","所以","在","了","还","复合","5","做出","后期","机器","既然","外观","涉及","有人","向前走","实验室","部件","重要","开发","因为","只要","有","机器人","？","一起","类似","一系","光靠","和","才","pr2","personal","联合","很快","其中","为例","系统","中","就","木头","robot","组成","个","从中","领域","你","一大步"," ","独立","一切","2","图中","熨烫","只","性能","别人","可以","繁荣","几个","整理","完成","要","代","当时","这款","。","横跨","做饭"],"title":"ROS的诞生","title_tokens":["的","ros","诞生"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros_1","text":"提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["站","制造","自己","机制","全球","家","全人类","远","本身","我们","长远","目标","这个","许可证","造","技术","被","来讲","成果","人才","生态系","友好","促使","的","不是","整合","新增","做成","新","部分","引擎","平台","智能","、","巨人","轮子","提高","率","多","由","生态系统","代表","软件","尽量","实现","发展","宽松","linux","这","多媒体系统","：","直接","就是","汽车","同理","支持","工业","社区","，","四大","很多","一家","许可","应用","多项","都","正如","这里","也","各种各样","模块","是","ros2","大家","产品","已有","完全","此","工具","功能","做法","对","不要","时间","更","公司","智慧","那","ros1","生态","设计","最后","从","跑","分享","一个","复用","做到","全人","他们","来","围绕","商业","采购","各种","这些","开发工具","缩短","跨平台","特性","越来","具备","模块化","进步","c","上","并","给","总称","重新","非常","向前","上市","核心","ros","体系","到","会","肩膀","做","下来","这样","a","创意","嵌入式","同时","在","了","还","全球化","嵌入","一步","机器","向前走","商业化","媒体","开发","有","机器人","通常","b","一起","和","自身","结晶","明智","零","简单","系统","各样","将","中","；","windows","沉淀","就","使用","把","组成","人类","之","领域","上去","推进","案例","开源"," ","智能化","通信","特点","集合","别人","越来越","可以","以","。","多媒体","着","比如"],"title":"ROS的特点","title_tokens":["的","ros","特点"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros_2","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。","text_tokens":["已经","排名","这一波","发表","全球","250","我们","浪潮","论坛","很","说明","频繁","活跃度","两个","的","整合","新","部分","包","棒","、","访问","而言","多","代表","绝大部分","发展","起来","每","这","其他","：","总而言之","以上","就是","大部分","近几年","情况","社区","，","基本上","很多","等","应用","资源","来看","活跃","什么","都","这里","差不多","呢","左右","是","最高","大家","功能","万","得到","最为","相关","乐意","索引","通过","快速","数据库","看到","加","百科","从","discourse","一个","大有可为","回答","大部","趋势","等等","各种","下载","统计","这些","packages","越来","地域","源码","25","教程","上边","月","维基百","上","无疑","提出","增长速度","给","浏览量","不多","wiki","算是","20","革命","查看","大","org","维基百科","150","非常","快","核心","其实","据库","ros","增长","页面","到","访问量","不","万人","参考","维基","新鲜事","各项","根据","每个","方式","活动","问题","开发者","动力","研发","在","了","总体","人","多万","机器","万左右",".","上图","网站","次数","程度","问答","重要","开发","曲线","浏览","有","机器人","人数","？","度","15","40","新鲜","几年","和","国家","现在","记录","元素","发布","讨论","清晰","任何","其中","迅猛","answers","中","；","使用","就","更为","正在","用户","80","张图","关于","index"," ","不同","这是","助推","速度","基本","数据","四项","可以","越来越","几个","作为","存储","可为","日常","。","绝大","比如"],"title":"ROS的社区","title_tokens":["的","社区","ros"]},{"location":"hhp/1.2_%E5%9C%B0%E5%B9%B3%E7%BA%BF%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0%E4%BB%8B%E7%BB%8D/","text":"地平线机器人开发平台介绍 机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 以操作系统为例，应用最为广泛的ROS系统在不断迭代，不过在智能时代洪流的冲击下，还是涌现出一些问题。 ROS的一些问题 ROS逐渐成为标准，大量机器人应用被贡献到社区，虽然提高了代码的通用性，但却难以发挥硬件的完整性能； 大量应用聚焦在机器人运动控制与定位导航等基础功能，智能化的应用较少； 在软件资源格外丰富的社区中，还缺少系统化的内容，帮助用户快速实现相关资源的复用。 很多开发者都在魔改ROS，去适配自己的机器人，所以机器人的研发成本非常高。从机械选型、系统定制、算法开发到数据闭环，每个过程都要付出高昂的成本，在这么高昂的成本下，做机器人是非常困难的一件事情。 在算法层面，机器人算法仍处于早期阶段，很多感知算法还停留在理论阶段，无法服务与实际场景，机器学习发展迅速，不过对于很多开发者来讲，数据的采集、标注、训练都是一个庞大的工作量，部署运行不仅十分困难，还要消耗大量的算力成本。 智能机器人涉及的领域和方法较多，目前整体的学习成本偏高，想要实现智能化应用的难度就更高，问题的出现，也带来了机遇与挑战。 地平线机器人开发平台 2022年6月，地平线机器人正式推出全新一代机器人开发平台——Horizon Hobot Platform（HHP），在软件、算法、工具层面给行业带来更多帮助。这套机器人开发平台的目的是打造软硬协同、极致优化、丰富易用的机器人开发组件与生态，由图中这几个部分组成，我们来看下。 平台的底层主要依托于地平线AIOT边缘AI芯片——旭日3和旭日5，内部集成了地平线最先进的伯努利2.0架构的AI 引擎，可提供 5TOPS 以上的等效算力。如此强大的算力支持，保证了智能机器人开发的基础条件。 芯片是基础建设，在此之上更重要的是一系列软件设施，正如我们电脑上的windows和linux，一套优质的操作系统，是上层应用软件开发的必要条件，TogetherROS在ROS系统的基础上，进行了大量的改良和优化，可以为开发者提供高效实用的系统环境。 在此之上，平台还会提供大量的机器人参考算法和应用功能示例，比如常用的建图、定位、导航，还有智能机器人中至关重要的智能化功能，比如一些基础算法，图像分类、图像分割、目标检测等，还有应用功能，人脸检测、人体跟踪、骨骼点检测、手势识别、语音处理等等，提供基于大量数据训练的模型，借助底层AI引擎的支持，可以快速、稳定的实现各种各样的智能应用。 同时平台还会配套一系列加速机器人开发的工具链，比如代码编写工具、系统调试工具、数据标注和训练工具等。 古月居和地平线也会共同打造机器人开发者社区，持续分享技术内容，沉淀更多开发者的智慧，更多机器人产业中的合作伙伴也会陆续加入，共同打造最为丰富的机器人开发者套件，建设智能机器人开发的生态圈。 在这个机器人开发平台之中，最为重要的就是TogetherROS系统了，起到了承上启下、连接各项功能的作用。 TogetherROS的特点 在ROS系统庞大社区资源的基础上，结合智能机器人的发展和产业需求，TogetherROS应运而生。 TogetherROS有三个核心特点： 开源兼容，秉承开源精神的力量 TogetherROS和ROS系统一样，也是一套完全开源的系统，所有开发者都可以继续二次开发，接口方面和ROS2完全兼容，ROS2原有的功能也都可以继续复用，已有的机器人代码可以十分便利的迁移过来。 极致性能优化 相比ROS的通用化，TogetherROS更多考虑的是如何充分挖掘底层硬件的性能，比如提高数据传输的效率、增强人工智能处理的能力，在后续的使用案例中，大家可以充分感受到这一点。 丰富易用的软硬件组件 比如各种各样的传感器和开发套件，再比如算法模块、感知应用、机器人功能，还有提高开发效率的各种编程、部署工具。 TogetherROS系统框架 具体展开来看，TogetherROS的系统框架如图所示，其中深蓝色部分为地平线优化、新增的模块，其他是目前复用ROS2中的模块： 在系统通信的中间件部分，保留了ROS2中原本针对不同DDS的通信框架，与ROS2 foxy版本的接口完全兼容，方便复用ROS丰富工具包进行原型验证，在此之上增加了“zero-copy” 零拷贝 的通信机制，降低大数据传输时延和系统资源消耗。 在组件功能部分，TogetherROS提供“hobot CV” 视觉加速库 ，软硬件协同，可以提升CV算子性能、降低系统资源消耗；针对AI模型的推理，封装了“hobot_dnn” 功能包，可以调用底层芯片的AI引擎，简化板端AI开发与部署，释放BPU的算力。可以支持丰富的机器人传感器型号，比如相机、雷达、IMU、GPS等，节省驱动开发的时间，可以聚焦在机器人应用开发上。 除此之外，TogetherROS还会提供丰富的 软件调试和性能调优工具 ，方便用户定位问题和优化系统性能，在具体的行业应用中，还支持最小化和模块化的剪裁，利于部署在资源受限的嵌入式产品中。 总之，TogetherROS出于ROS，又不止于ROS，ROS原有的功能依然继承，重点是借助硬件能力，充分优化系统的性能，提高机器人开发的效率。","text_tokens":["优质","最","程式","自己","先进","机制","层面","这套","大脑","发挥","优化","一代","却","原有","代码","庞大","、","一件","正式","二次开发","受限","不仅","广泛","实际","不断","所示","完整","改良","一样","考虑","调优","支持","主要","建设","很多","一系列","示例","“","编写","gps","也","—","编程","架构","时间","foxy","智慧","相比","又","剪裁","兼容","展开","跟踪","验证","分享","还要","动作","需求","原型","月","协同","借助","迅速","部署","算力","至关重要","不止","6","信息","参考","各项","难以","所以","5","涉及","采集","强大","开发","工作","行业","有","整体","版本","少","全新","如此","人脸","软件资源","各样","视觉","伯努利","；","ai","沉淀","早期","调试","传感","挑战","领域","还有","5tops","不同","电机","挖掘","hhp","可以","理论","旭日","加入","以","最小化","比如","实用","难度","聚焦","应用软件","简化","过来","接口","深蓝色","相机","常用","技术","可","增强","付出","十分困难","能力","传感器","引擎","场景","提高","连接","多","集成","帮助","作用","软件","目前","合作","迭代","：","以上","就是","感器","社区资源","处理","，","阶段","包括","蓝色","雷达","加速","各种各样","地平线","执行","是","居","工具","导航","功能","数据传输","控制","更","最为","相关","快速","型号","目的","3","通用化","环境","硬件","链","训练","服务","必要","据传","推出","提升","困难","组件","承上启下","算子","节省","总之","年","模块化","cv","原本","封装","大","深蓝","核心","模型","aiot","后续","调用","骨骼","一些","中间","标准","问题","研发","如何","hobot","嵌入式","嵌入","还","机器","非常复杂","中间件","结合","一系","和","除此","于","系统","带来","就","使用","现出","组成","用户","上层","二次","案例","高","点","力量","性能","几个","_","要","（","定制","伙伴","过程","分割","成为","这个","被","主控","来讲","2022","充分","基于","虽然","所有","想要","包","之上","智能","依托","传输","适配","极致","进行","应运","便利","发展","linux","复杂","这","人工","如图所示","去","”","建图","标注","推理","感知","应用","通用性","模块","ros2","大家","方面","完全","针对","冲击","迁移","时代","这么","从","驱动","框架","一个","运动","生态圈","消耗","imu","各种","丰富","停留","易用","设施","但","软硬","贡献","效率","机遇","-","通用","算法","事情","识别","人工智能","除此之外","稳定","套件","工具包","每个","会","做","手势","打造","dnn","系统资源","zero","利于","同时","图像","成本","一点","重点","内部","降低","出于","等效","出现","其中","方便","拷贝","中","windows","起到","电脑","软硬件","开源"," ","不过","platform","再","还会","通信","特点","copy","数据","改","释放","配套","。","秉承","格外","检测","产业","还是","条件","偏高","dds","我们","目标","三个","底层","操作系统","的","新增","部分","平台","对于","高昂","学习","边缘","实现","必要条件","其他","继续","精神","操作","社区","芯片","等","资源","来看","都","正如","人体","保留","horizon","时延","陆续","产品","已有","最小","计算","此","工作量","一套","逐渐","涌现出","板端","生态","方法","定位问题","共同","复用","十分","语音","之外","等等","保证","内容","bpu","系统化","）","上","定位","给","系列","运行","机械","具体","非常","定位导航","地平","分类","ros","选型","为","到","库","缺少","介绍","下","闭环","提供","开发者","在","了","无法","依然","继承","较","持续","处于","高效","增加","重要","魔","古月","机器人","涌现","基础","之中","与","零","为例","由图","合作伙伴","应运而生","大量","感受","至关","洪流","2.0","智能化","作为","仍","规控","togetherros"],"title":"TogetherROS介绍","title_tokens":["togetherros","介绍"]},{"location":"hhp/1.2_%E5%9C%B0%E5%B9%B3%E7%BA%BF%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0%E4%BB%8B%E7%BB%8D/#_1","text":"机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 以操作系统为例，应用最为广泛的ROS系统在不断迭代，不过在智能时代洪流的冲击下，还是涌现出一些问题。","text_tokens":["包括","机器人","感知","程式","等","应用","涌现","还是","各种各样","层面","执行","是","大脑","算法","计算","非常","主控","系统","为例","各样","冲击","操作系统","ros","涌现出","的","最为","时代","信息","现出","部分","传感","传感器","。","平台","智能","、","电机"," ","不过","驱动","洪流","一些","环境","进行","硬件","软件","一个","广泛","下","问题","不断","数据","复杂","迭代","在","：","作为","动作","机器","各种","感器","等等","规控","以","非常复杂","操作","，"],"title":"地平线机器人开发平台介绍","title_tokens":["平台","机器人","地平","机器","地平线","介绍","开发"]},{"location":"hhp/1.2_%E5%9C%B0%E5%B9%B3%E7%BA%BF%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0%E4%BB%8B%E7%BB%8D/#ros","text":"ROS逐渐成为标准，大量机器人应用被贡献到社区，虽然提高了代码的通用性，但却难以发挥硬件的完整性能； 大量应用聚焦在机器人运动控制与定位导航等基础功能，智能化的应用较少； 在软件资源格外丰富的社区中，还缺少系统化的内容，帮助用户快速实现相关资源的复用。 很多开发者都在魔改ROS，去适配自己的机器人，所以机器人的研发成本非常高。从机械选型、系统定制、算法开发到数据闭环，每个过程都要付出高昂的成本，在这么高昂的成本下，做机器人是非常困难的一件事情。 在算法层面，机器人算法仍处于早期阶段，很多感知算法还停留在理论阶段，无法服务与实际场景，机器学习发展迅速，不过对于很多开发者来讲，数据的采集、标注、训练都是一个庞大的工作量，部署运行不仅十分困难，还要消耗大量的算力成本。 智能机器人涉及的领域和方法较多，目前整体的学习成本偏高，想要实现智能化应用的难度就更高，问题的出现，也带来了机遇与挑战。","text_tokens":["定制","难度","聚焦","格外","过程","自己","偏高","层面","成为","发挥","被","来讲","却","付出","代码","十分困难","的","虽然","想要","庞大","智能","、","场景","提高","适配","一件","多","对于","帮助","高昂","不仅","软件","学习","目前","实际","实现","发展","完整","去","社区","标注","，","阶段","很多","等","应用","资源","通用性","感知","都","也","是","导航","功能","工作量","控制","逐渐","更","相关","快速","方法","这么","从","硬件","一个","复用","运动","服务","训练","十分","消耗","还要","困难","丰富","内容","停留","系统化","但","贡献","定位","迅速","机遇","通用","部署","算法","运行","机械","算力","非常","定位导航","事情","ros","选型","到","每个","做","难以","缺少","标准","下","闭环","所以","开发者","问题","研发","在","了","还","无法","较","机器","处于","涉及","采集","成本","开发","工作","魔","机器人","整体","基础","和","与","少","出现","软件资源","系统","带来","；","中","就","早期","用户","挑战","大量","领域"," ","不过","高","智能化","性能","数据","理论","仍","改","要","。"],"title":"ROS的一些问题","title_tokens":["的","一些","ros","问题"]},{"location":"hhp/1.2_%E5%9C%B0%E5%B9%B3%E7%BA%BF%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0%E4%BB%8B%E7%BB%8D/#_2","text":"2022年6月，地平线机器人正式推出全新一代机器人开发平台——Horizon Hobot Platform（HHP），在软件、算法、工具层面给行业带来更多帮助。这套机器人开发平台的目的是打造软硬协同、极致优化、丰富易用的机器人开发组件与生态，由图中这几个部分组成，我们来看下。 平台的底层主要依托于地平线AIOT边缘AI芯片——旭日3和旭日5，内部集成了地平线最先进的伯努利2.0架构的AI 引擎，可提供 5TOPS 以上的等效算力。如此强大的算力支持，保证了智能机器人开发的基础条件。 芯片是基础建设，在此之上更重要的是一系列软件设施，正如我们电脑上的windows和linux，一套优质的操作系统，是上层应用软件开发的必要条件，TogetherROS在ROS系统的基础上，进行了大量的改良和优化，可以为开发者提供高效实用的系统环境。 在此之上，平台还会提供大量的机器人参考算法和应用功能示例，比如常用的建图、定位、导航，还有智能机器人中至关重要的智能化功能，比如一些基础算法，图像分类、图像分割、目标检测等，还有应用功能，人脸检测、人体跟踪、骨骼点检测、手势识别、语音处理等等，提供基于大量数据训练的模型，借助底层AI引擎的支持，可以快速、稳定的实现各种各样的智能应用。 同时平台还会配套一系列加速机器人开发的工具链，比如代码编写工具、系统调试工具、数据标注和训练工具等。 古月居和地平线也会共同打造机器人开发者社区，持续分享技术内容，沉淀更多开发者的智慧，更多机器人产业中的合作伙伴也会陆续加入，共同打造最为丰富的机器人开发者套件，建设智能机器人开发的生态圈。 在这个机器人开发平台之中，最为重要的就是TogetherROS系统了，起到了承上启下、连接各项功能的作用。","text_tokens":["实用","伙伴","应用软件","优质","最","检测","先进","产业","分割","条件","层面","这套","我们","目标","这个","优化","常用","底层","一代","技术","可","2022","操作系统","基于","代码","的","部分","引擎","平台","智能","之上","、","依托","连接","正式","多","极致","集成","帮助","进行","软件","作用","边缘","必要条件","实现","linux","合作","这","改良","以上","就是","支持","主要","操作","建图","处理","，","芯片","标注","社区","建设","一系列","示例","等","应用","编写","来看","正如","人体","加速","各种各样","也","地平线","horizon","是","陆续","—","居","工具","此","功能","导航","一套","架构","更","智慧","最为","生态","快速","目的","共同","3","跟踪","环境","分享","链","必要","训练","生态圈","语音","推出","等等","各种","组件","保证","丰富","内容","承上启下","易用","）","设施","软硬","年","月","协同","上","借助","定位","给","算法","系列","算力","至关重要","识别","地平","分类","模型","aiot","ros","为","6","参考","稳定","套件","各项","骨骼","会","手势","一些","打造","下","提供","开发者","同时","hobot","在","了","5","图像","持续","机器","高效","强大","重要","开发","古月","行业","机器人","内部","基础","一系","之中","和","与","全新","如此","于","等效","人脸","系统","由图","各样","带来","合作伙伴","伯努利","中","windows","ai","沉淀","起到","组成","调试","电脑","上层","大量","还有","5tops","至关"," ","platform","点","2.0","智能化","还会","数据","hhp","可以","几个","旭日","加入","配套","。","（","togetherros","比如"],"title":"地平线机器人开发平台","title_tokens":["平台","机器人","地平","机器","地平线","开发"]},{"location":"hhp/1.2_%E5%9C%B0%E5%B9%B3%E7%BA%BF%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0%E4%BB%8B%E7%BB%8D/#togetherros","text":"在ROS系统庞大社区资源的基础上，结合智能机器人的发展和产业需求，TogetherROS应运而生。 TogetherROS有三个核心特点： 开源兼容，秉承开源精神的力量 TogetherROS和ROS系统一样，也是一套完全开源的系统，所有开发者都可以继续二次开发，接口方面和ROS2完全兼容，ROS2原有的功能也都可以继续复用，已有的机器人代码可以十分便利的迁移过来。 极致性能优化 相比ROS的通用化，TogetherROS更多考虑的是如何充分挖掘底层硬件的性能，比如提高数据传输的效率、增强人工智能处理的能力，在后续的使用案例中，大家可以充分感受到这一点。 丰富易用的软硬件组件 比如各种各样的传感器和开发套件，再比如算法模块、感知应用、机器人功能，还有提高开发效率的各种编程、部署工具。","text_tokens":["秉承","产业","过来","接口","三个","优化","底层","增强","原有","充分","代码","的","所有","能力","庞大","传感器","智能","、","提高","二次开发","多","极致","传输","应运","便利","发展","这","人工","：","一样","继续","考虑","感器","精神","社区资源","处理","社区","，","感知","应用","资源","都","也","各种各样","模块","是","ros2","大家","方面","完全","已有","编程","工具","功能","数据传输","一套","迁移","更","相比","兼容","通用化","硬件","复用","十分","据传","各种","组件","丰富","易用","需求","软硬","上","效率","通用","部署","算法","核心","人工智能","ros","到","后续","套件","开发者","如何","在","机器","结合","一点","开发","有","机器人","基础","和","系统","各样","中","使用","应运而生","传感","软硬件","二次","感受","开源","案例","还有"," ","再","力量","挖掘","特点","性能","数据","可以","。","togetherros","比如"],"title":"TogetherROS的特点","title_tokens":["的","togetherros","特点"]},{"location":"hhp/1.2_%E5%9C%B0%E5%B9%B3%E7%BA%BF%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0%E4%BB%8B%E7%BB%8D/#togetherros_1","text":"具体展开来看，TogetherROS的系统框架如图所示，其中深蓝色部分为地平线优化、新增的模块，其他是目前复用ROS2中的模块： 在系统通信的中间件部分，保留了ROS2中原本针对不同DDS的通信框架，与ROS2 foxy版本的接口完全兼容，方便复用ROS丰富工具包进行原型验证，在此之上增加了“zero-copy” 零拷贝 的通信机制，降低大数据传输时延和系统资源消耗。 在组件功能部分，TogetherROS提供“hobot CV” 视觉加速库 ，软硬件协同，可以提升CV算子性能、降低系统资源消耗；针对AI模型的推理，封装了“hobot_dnn” 功能包，可以调用底层芯片的AI引擎，简化板端AI开发与部署，释放BPU的算力。可以支持丰富的机器人传感器型号，比如相机、雷达、IMU、GPS等，节省驱动开发的时间，可以聚焦在机器人应用开发上。 除此之外，TogetherROS还会提供丰富的 软件调试和性能调优工具 ，方便用户定位问题和优化系统性能，在具体的行业应用中，还支持最小化和模块化的剪裁，利于部署在资源受限的嵌入式产品中。 总之，TogetherROS出于ROS，又不止于ROS，ROS原有的功能依然继承，重点是借助硬件能力，充分优化系统的性能，提高机器人开发的效率。","text_tokens":["聚焦","简化","机制","深蓝色","dds","接口","相机","优化","底层","原有","充分","的","新增","能力","部分","传感器","包","之上","引擎","、","传输","提高","受限","进行","软件","目前","所示","其他","：","如图所示","感器","调优","支持","”","，","芯片","推理","“","等","应用","资源","来看","gps","蓝色","雷达","加速","保留","地平线","模块","时延","是","ros2","产品","完全","最小","工具","此","功能","数据传输","针对","时间","foxy","板端","又","剪裁","定位问题","型号","兼容","展开","验证","驱动","框架","硬件","复用","据传","消耗","imu","提升","之外","组件","丰富","bpu","算子","节省","软硬","原型","总之","模块化","cv","协同","原本","上","定位","借助","效率","封装","-","部署","大","算力","具体","深蓝","地平","模型","除此之外","ros","为","不止","库","调用","工具包","中间","dnn","系统资源","zero","提供","问题","利于","嵌入式","hobot","在","了","还","嵌入","依然","继承","机器","中间件","增加","开发","行业","重点","机器人","降低","版本","与","和","除此","出于","于","零","其中","方便","系统","视觉","拷贝","中","；","ai","用户","调试","传感","软硬件","不同"," ","还会","通信","copy","性能","数据","可以","释放","_","最小化","。","togetherros","比如"],"title":"TogetherROS系统框架","title_tokens":["togetherros","系统","框架"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/","text":"TogetherROS与ROS性能对比 ROS2 vs ROS1 先来看下两个大版本ROS的系统架构。 在这张图中，左侧是ROS1，右侧是ROS2，两者最明显的变化，就是Master。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery——自发现机制，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的DDS系统。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于共享内存的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了，Linux、windows、MacOS、RTOS都可以。 ROS2系统架构 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个ROS Middleware，简称RMW，也就是制定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 TogetherROS vs ROS2 TogetherROS就是在这样一个ROS2架构的基础上，继续进行了优化，原本DDS通信的部分依然保留，可以适配不同厂家的DDS通信系统，在此之上，针对功能性的组件进行了众多优化和补充，在上一节中我们也给大家介绍了这套框架。 TogetherROS在数据传输和AI处理方面，到底有多少提升呢，我们来看具体的对比数据。 通信效率量化对比 先来看下操作系统至关重要的数据通信功能，我们针对ROS中最为常用的大数据传输模式——话题通信进行了测试。 在单元测试中，使用同样的算力平台，分别安装TogetherROS和ROS2系统，然后在其中运行一个话题通信的发布者与订阅者，实现不同数据量的传输。经过数据统计，我们可以看到，在数据通信延时方面，随着数据量的增加，ROS2系统在通信延时、发送端和接收端的CPU占用率上，都会程线性增加，可以预想，在数据量较大的情况下，系统的通信负荷会非常严重。 而在TogetherROS中，由于使用了零拷贝的传输机制，传输数据量的增加，并不会导致延时和CPU占用率的增加，极大程度节省了系统资源。 在场景测试中，我们尽量模拟真实机器人的应用，使用TogetherROS和ROS2系统连接了多个相机、雷达和里程计等传感器，作为大量数据的输入来源，继续进行了测试，结果和之前的单元测试类似，ROS2系统此时的CPU占用率已经超过90%，想要运行数据传输之外的应用功能，几乎是不可能的，通信延时也达到了15ms以上，这在某些实时性要求比较高的应用中，是不可接受的。 而在TogetherROS中，CPU占用和通信延时也微乎其微，更多系统资源都可以让给应用处理。 CV图像处理量化对比 再来看下智能机器人中视觉感知层面的处理，TogetherROS集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 模型推理 在AI处理方面，ROS2原生系统中并没有太多支持，只能依赖社区中的资源，很难充分发挥硬件的算力。 对此，TogetherROS集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 传感器驱动管理 在传感器层面，是大量数据传输的来源，TogetherROS也重点进行了优化，针对常用的传感器类型，系统中内置参数配置、系统调用和内存管理机制，同样是在芯片的硬件层面进行了加速和隔离，保障数据流的稳定生成。 机器人开发工具 机器人开发过程中的性能优化和调试，也是非常繁杂的工作，TogetherROS自带火焰图等工具，可以实现系统层面的调优和测试，便于开发者挖掘系统性能。 以上这些都是TogetherROS在ROS系统之上的优化和补充，未来更多特性也会不断迭代推出，让智能机器人的开发更加简单。","text_tokens":["最大","最","模拟","机制","层面","这套","发挥","优化","接受","当然","内","代码","fastrtps","补充","、","率","实时","发","广泛","实际","不断","数据通信","一样","乱麻","自家","调优","支持","主要","很多","更换","国际标准","数据通","也","分别","发送","—","编程","同样","架构","时间","缩放","众多","找到","相比","数据量","ros1","通过","熟悉","变化","看到","兼容","只有","时","/","旋转","需求","先","更加","切换","协同","延时","比较","借助","5g","角色","部署","丢","算力","至关重要","属性","让","混合","信息","让给","来源","交道","广泛应用","导致","太","应该","轻松","传输数据","所以","占用","左侧","制定","写","开发","工作","之前","唯一","有","类似","接收端","15ms","版本","一种","简单","视觉","校正","ai","多倍","把","opencv","传感","调试","哪些","张图","客户端","还有","不同","节点","超过","挖掘","得","生成","可以","比如","rmw","管理器","变得","过来","接口","相机","常用","火焰","图像处理","走","两个","除了","倍","发布者","输入","传感器","引擎","选项","厂商","场景","连接","提高","多","集成","满足","理器","接收","软件","很难","迭代","以上","就是","感器","调教","量化","处理","到底","，","只能","雷达","加速","滤波","地平线","是","库会","不用","对此","工具","功能","数据传输","更","帧","便于","最为","微乎其微","参数","量","3","自带","硬件","训练","做到","据传","推出","提升","商业","通信接口","例子","负荷","统计","组件","随着","这些","程序","算子","建立","节省","cv","原本","开发成本","封装","畸变","通信协议","右侧","大","较大","该","产品开发","模型","共享","简称","调用","高斯","不可","opensplice","中间","标准","问题","如何","hobot","机器","下边","单元测试","它","？","和","能够","实时性","于","udp","里","里程计","系统","客户","带来","就","使用","用户","达到","厂家","高","诟病","2","性能","一节","要","会成","充分发挥","原生","已经","自","过程","适用","层","这个","ceo","频繁","来讲","类型","充分","基于","发成","不是","所有","真实","想要","收","之上","某","智能","传输","适配","完善","进行","尽量","充足","内置","linux","每","这","复杂","人工","减少","常","情况","突然","推理","繁杂","一家","简单明了","感知","应用","需要","用率","这里","彼此","ros2","大家","方面","甚至","针对","风格","驱动","要求","框架","一个","而","物","消耗","完","各种","丰富","开发工具","但","软硬","效率","严重","安装","此时","tcp","人工智能","听","其实","不爽","测试","不","middleware","稳定","用","会","每个","做","定义","dnn","这样","系统资源","从而","极大","接入","图像","多个","程度","成本","只要","重点","降低","端","为了","很快","其中","加密","拷贝","应用层","中","windows","符合","名字","软硬件","开源"," ","不过","再","通信","明显","数据","打交道","好","保障","改","内存","一团","听说","。","依赖","分发","话题","未来","占用率","管理","如果","而且","dds","我们","目标","底层","成","线性","中间层","操作系统","结果","指挥","的","有且","不会","部分","图","平台","对比","肯定","配置","不太","对于","里程","实现","两者","其他","继续","几乎","解决","共享内存","只不过","操作","社区","芯片","交给","master","然后","等","资源","来看","都","保留","呢","产品","此","一套","公司","协议","间层","单元","设计","方法","延迟","移植","请","cpu","发现","数据流","复用","一团乱","没有","之外","隔离","举","bpu","特性","经过","上","订阅","软件系统","某些","并","选择","么","模式","给","例如","者","可选项","重新","多少","运行","具体","非常","地平","ros","为","可能","库","到","时候","一团乱麻","介绍","下","提供","开发者","管理机制","可选","在","了","无法","一行","依然","联网","另","discovery","rtos","增加","重要","预想","机器人","功能性","基础","与","啦","发布","vs","零","macos","将","另外","大量","国际","进程","至关","按照","会程","交付","消失","基本","由于","作为","省略","花费","而已","togetherros","90%"],"title":"TogetherROS与ROS性能对比","title_tokens":["对比","与","ros","togetherros","性能"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/#togetherrosros","text":"","text_tokens":[],"title":"TogetherROS与ROS性能对比","title_tokens":["对比","与","ros","togetherros","性能"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/#ros2-vs-ros1","text":"先来看下两个大版本ROS的系统架构。 在这张图中，左侧是ROS1，右侧是ROS2，两者最明显的变化，就是Master。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery——自发现机制，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的DDS系统。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于共享内存的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了，Linux、windows、MacOS、RTOS都可以。","text_tokens":["自","最","管理器","机制","管理","变得","如果","层","接口","我们","dds","这个","底层","成","ceo","频繁","走","中间层","内","操作系统","两个","基于","指挥","的","所有","有且","选项","、","肯定","连接","不太","完善","理器","接收","进行","linux","依赖","这","两者","复杂","一样","乱麻","就是","共享内存","只不过","操作","主要","突然","，","很多","更换","master","简单明了","应用","需要","来看","雷达","都","彼此","也","是","ros2","库会","—","一套","架构","公司","找到","协议","间层","ros1","通过","方法","变化","请","发现","驱动","一个","而","一团乱","只有","通信接口","这些","程序","建立","但","先","更加","上","封装","通信协议","角色","右侧","可选项","大","安装","至关重要","tcp","听","让","ros","不","信息","共享","稳定","时候","调用","交道","会","中间","一团乱麻","下","标准","提供","从而","可选","在","左侧","了","图像","写","discovery","rtos","下边","重要","开发","它","类似","版本","和","发布","udp","里","简单","系统","客户","macos","应用层","将","中","windows","就","把","另外","大量","名字","张图","客户端","哪些","进程","至关"," ","不过","节点","消失","再","通信","得","明显","数据","可以","好","打交道","内存","一团","而已","会成","。","比如"],"title":"ROS2 vs ROS1","title_tokens":["vs"," ","ros2","ros1"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/#ros2","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个ROS Middleware，简称RMW，也就是制定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。","text_tokens":["rmw","最大","适用","最","过来","层面","如果","dds","我们","接口","目标","这个","底层","频繁","当然","来讲","除了","基于","代码","发成","的","不是","想要","收","fastrtps","某","、","厂商","场景","肯定","提高","多","率","配置","适配","对于","满足","发","软件","广泛","实现","每","这","其他","减少","一样","常","就是","解决","自家","社区","，","交给","一家","更换","master","然后","等","应用","国际标准","这里","都","也","是","ros2","不用","产品","功能","更","相比","协议","ros1","熟悉","设计","延迟","变化","移植","一个","复用","物","时","商业","之外","例子","完","各种","举","丰富","这些","程序","/","需求","先","切换","5g","开发成本","软件系统","并","选择","么","给","通信协议","部署","丢","重新","安装","tcp","该","其实","产品开发","属性","ros","不爽","为","不","middleware","稳定","用","简称","每个","做","opensplice","广泛应用","定义","应该","这样","标准","轻松","所以","提供","问题","如何","在","了","无法","接入","一行","制定","联网","多个","写","另","成本","开发","只要","唯一","？","类似","能够","版本","一种","为了","于","udp","简单","系统","带来","加密","中","符合","就","把","用户","国际","还有","开源","不同"," ","按照","不过","厂家","交付","诟病","再","通信","基本","性能","得","数据","可以","好","改","省略","要","听说","。","比如"],"title":"ROS2系统架构","title_tokens":["系统","ros2","架构"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/#togetherros-vs-ros2","text":"TogetherROS就是在这样一个ROS2架构的基础上，继续进行了优化，原本DDS通信的部分依然保留，可以适配不同厂家的DDS通信系统，在此之上，针对功能性的组件进行了众多优化和补充，在上一节中我们也给大家介绍了这套框架。 TogetherROS在数据传输和AI处理方面，到底有多少提升呢，我们来看具体的对比数据。","text_tokens":["有","功能性","上","基础","原本","来看","和","也","保留","dds","我们","给","这套","呢","ros2","大家","方面","优化","此","多少","功能","具体","数据传输","针对","系统","架构","中","众多","ai","的","部分","之上","补充","对比","不同","适配"," ","传输","厂家","进行","框架","介绍","这样","一个","通信","据传","数据","可以","在","了","依然","一节","提升","继续","就是","组件","。","处理","togetherros","到底","，"],"title":"TogetherROS vs ROS2","title_tokens":["vs","togetherros"," ","ros2"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/#_1","text":"先来看下操作系统至关重要的数据通信功能，我们针对ROS中最为常用的大数据传输模式——话题通信进行了测试。 在单元测试中，使用同样的算力平台，分别安装TogetherROS和ROS2系统，然后在其中运行一个话题通信的发布者与订阅者，实现不同数据量的传输。经过数据统计，我们可以看到，在数据通信延时方面，随着数据量的增加，ROS2系统在通信延时、发送端和接收端的CPU占用率上，都会程线性增加，可以预想，在数据量较大的情况下，系统的通信负荷会非常严重。 而在TogetherROS中，由于使用了零拷贝的传输机制，传输数据量的增加，并不会导致延时和CPU占用率的增加，极大程度节省了系统资源。 在场景测试中，我们尽量模拟真实机器人的应用，使用TogetherROS和ROS2系统连接了多个相机、雷达和里程计等传感器，作为大量数据的输入来源，继续进行了测试，结果和之前的单元测试类似，ROS2系统此时的CPU占用率已经超过90%，想要运行数据传输之外的应用功能，几乎是不可能的，通信延时也达到了15ms以上，这在某些实时性要求比较高的应用中，是不可接受的。 而在TogetherROS中，CPU占用和通信延时也微乎其微，更多系统资源都可以让给应用处理。","text_tokens":["已经","话题","模拟","机制","占用率","我们","相机","常用","接受","线性","操作系统","结果","发布者","的","不会","真实","输入","想要","传感器","平台","、","场景","传输","连接","实时","多","里程","进行","接收","尽量","实现","这","数据通信","继续","几乎","以上","感器","操作","情况","处理","，","然后","等","应用","资源","用率","来看","雷达","都","数据通","分别","也","发送","是","ros2","方面","—","功能","同样","数据传输","针对","更","数据量","最为","微乎其微","单元","看到","量","cpu","要求","一个","而","据传","之外","负荷","统计","随着","节省","先","经过","延时","上","比较","订阅","某些","模式","并","严重","者","大","算力","安装","运行","至关重要","较大","非常","此时","ros","可能","测试","不","让给","来源","会","不可","导致","下","系统资源","传输数据","占用","极大","在","了","机器","程度","多个","增加","重要","单元测试","之前","预想","机器人","接收端","类似","15ms","和","与","端","实时性","发布","零","其中","里程计","系统","拷贝","中","使用","传感","大量","达到","至关"," ","不同","高","会程","超过","通信","数据","可以","由于","作为","。","togetherros","90%"],"title":"通信效率量化对比","title_tokens":["量化","效率","通信","对比"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/#cv","text":"再来看下智能机器人中视觉感知层面的处理，TogetherROS集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。","text_tokens":["层面","而且","接口","我们","常用","底层","倍","的","引擎","智能","对比","、","率","集成","进行","软件","实现","处理","芯片","，","感知","等","资源","应用","来看","加速","滤波","分别","地平线","甚至","编程","缩放","风格","更","帧","便于","通过","方法","兼容","3","硬件","做到","消耗","提升","算子","旋转","软硬","cv","协同","上","效率","例如","畸变","运行","具体","地平","库","混合","测试","到","高斯","下","系统资源","hobot","在","了","图像","机器","开发","机器人","降低","与","系统","视觉","校正","中","多倍","opencv","软硬件"," ","再","2","性能","可以","。","togetherros"],"title":"CV图像处理量化对比","title_tokens":["图像处理","对比","cv","图像","量化","处理"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/#_2","text":"在AI处理方面，ROS2原生系统中并没有太多支持，只能依赖社区中的资源，很难充分发挥硬件的算力。 对此，TogetherROS集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。","text_tokens":["原生","很多","推理","，","分发","只能","应用","资源","上","借助","和","并","这套","啦","ros2","对此","方面","发挥","不用","底层","算力","部署","很快","系统","人工智能","模型","时间","充分","中","众多","ai","使用","的","库","就","基于","。","引擎","智能","开源"," ","多","集成","太","硬件","dnn","很难","充足","实际","训练","提供","开发者","数据","没有","hobot","在","了","芯片","保障","可以","人工","调教","花费","bpu","支持","开发","处理","togetherros","社区","充分发挥","依赖"],"title":"模型推理","title_tokens":["推理","模型"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/#_3","text":"在传感器层面，是大量数据传输的来源，TogetherROS也重点进行了优化，针对常用的传感器类型，系统中内置参数配置、系统调用和内存管理机制，同样是在芯片的硬件层面进行了加速和隔离，保障数据流的稳定生成。","text_tokens":["重点","机制","加速","和","管理","层面","也","是","优化","常用","同样","数据传输","针对","系统","类型","中","的","参数","传感","稳定","传感器","大量","来源","调用","、","传输","配置","进行","硬件","数据流","内置","据传","管理机制","数据","生成","在","了","芯片","保障","内存","隔离","感器","。","togetherros","，"],"title":"传感器驱动管理","title_tokens":["传感器","感器","管理","驱动","传感"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/#_4","text":"机器人开发过程中的性能优化和调试，也是非常繁杂的工作，TogetherROS自带火焰图等工具，可以实现系统层面的调优和测试，便于开发者挖掘系统性能。 以上这些都是TogetherROS在ROS系统之上的优化和补充，未来更多特性也会不断迭代推出，让智能机器人的开发更加简单。","text_tokens":["更加","繁杂","机器人","过程","等","未来","都","和","也","层面","是","优化","火焰","工具","非常","简单","系统","更","中","ros","让","的","测试","便于","调试","图","之上","补充","智能"," ","多","会","自带","实现","挖掘","性能","开发者","不断","迭代","可以","在","推出","以上","机器","调优","开发","。","这些","togetherros","特性","，","工作"],"title":"机器人开发工具","title_tokens":["工具","机器人","机器","开发工具","开发"]},{"location":"hhp/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/","text":"TogetherROS应用场景 相比手机、电脑等通用平台，机器人的类型可是千变万化，构建机器人操作系统的难度就远比手机和电脑的操作系统要复杂很多。机器人的主流应用大致可以分为 服务机器人、工业机器人、特种机器人 三个方向，无论是在哪一方向，都会面临很多问题。比如传感器、执行器等器件选型复杂，不同场景下需要的性能和参数都有所不同，这就要求操作系统得兼容尽量多的器件。 不同场景下的计算平台算力和资源差异很大，一般都需要进行定制化的裁剪和优化，这就得有一系列工具便于系统的定制和裁剪。每个场景中的应用功能变化也很大，各种算法的集成和开发要尽量简单，算法基于的数据也在持续迭代，需要一套工具链来提供迭代和升级。 针对各种各样的需求变化，TogetherROS都提供了支持。 服务机器人 在服务机器人领域，场景和功能尤其复杂，有家里的扫地机器人，有餐厅里的送餐机器人，有咖啡店里的双臂机器人，还有物流送货的飞行机器人，虽然每一个机器人平台的构型不同，但都需要动态处理多种多样的环境变化，这就需要TogetherROS基于大量数据的AI处理和丰富的组件功能支持，快速推动各种功能的落地。 工业机器人 在工业机器人领域，目前的机器人主要以工业机械臂和物流移动机器人形态为主，场景相比服务机器人要标准很多，核心目的是要提高生产效率，这就要求机器人可以长期稳定的运行，同时实时处理各项运动功能，TogetherROS可裁剪和性能稳定等特点，都可以符合要求。 特种机器人 而在特种机器人的应用领域，结合了服务和工业场景中的不少特点，机器人形态多变，得动态处理各种复杂场景里的事件，例如火灾、地震、管道等场景，更是会发生很多不可预料的情况，TogetherROS中的AI处理可以较好的保障不同环境中的感知效果，同时端云联动，可以实现大量数据的训练和部署，不断提高对复杂环境的处理能力。 可见，TogetherROS充分考虑了众多应用场景的需求，不仅可以满足智能机器人开发过程中的每一个环节，也考虑到了机器人未来在产业中的应用效果。","text_tokens":["定制","难度","过程","产业","未来","多变","推动","远","送货","面临","裁剪","端云","三个","优化","一","可","类型","多种","操作系统","动态","充分","环节","基于","的","虽然","能力","传感器","符合要求","平台","智能","、","场景","臂","提高","多","主流","分为","集成","实时","不仅","进行","满足","目前","尽量","可见","实现","不断","每","复杂","这","迭代","尤其","化","扫地","构型","咖啡","移动","无论","感器","手机","有所不同","考虑","支持","工业","一般","操作","处理","主要","特种","，","情况","很多","一系列","管道","联动","等","应用","需要","资源","感知","大致","都","火灾","也","各种各样","执行","链来","是","计算","工具","功能","一套","针对","对","众多","相比","便于","参数","快速","更是","动机","目的","变化","兼容","事件","环境","要求","一个","而","运动","服务","训练","长期","多样","方向","双臂","各种","组件","丰富","生产","需求","但","预料","执行器","效率","例如","移动机器人","实时处理","应用领域","通用","部署","算法","很大","算力","系列","机械","运行","形态","核心","效果","无论是","餐厅","落地","选型","发生","到","稳定","家里","各项","会","每个","物流","不可","咖啡店","下","标准","提供","问题","地震","差异","同时","在","了","飞行","持续","较","机器","多种多样","结合","不少","开发","有","机器人","有所","构建","一系","和","送餐","里","简单","系统","各样","充分考虑","中","为主","ai","就","符合","电脑","传感","领域","大量","器件","还有","不同"," ","哪","升级","可是","性能","得","数据","特点","可以","好","保障","千变万化","要","以","。","togetherros","比","比如"],"title":"TogetherROS应用场景","title_tokens":["场景","togetherros","应用"]},{"location":"hhp/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#togetherros","text":"相比手机、电脑等通用平台，机器人的类型可是千变万化，构建机器人操作系统的难度就远比手机和电脑的操作系统要复杂很多。机器人的主流应用大致可以分为 服务机器人、工业机器人、特种机器人 三个方向，无论是在哪一方向，都会面临很多问题。比如传感器、执行器等器件选型复杂，不同场景下需要的性能和参数都有所不同，这就要求操作系统得兼容尽量多的器件。 不同场景下的计算平台算力和资源差异很大，一般都需要进行定制化的裁剪和优化，这就得有一系列工具便于系统的定制和裁剪。每个场景中的应用功能变化也很大，各种算法的集成和开发要尽量简单，算法基于的数据也在持续迭代，需要一套工具链来提供迭代和升级。 针对各种各样的需求变化，TogetherROS都提供了支持。","text_tokens":["定制","难度","远","面临","裁剪","三个","优化","一","类型","操作系统","基于","的","传感器","平台","、","场景","多","主流","分为","集成","进行","尽量","复杂","这","迭代","化","无论","感器","手机","有所不同","支持","工业","一般","操作","特种","，","很多","一系列","等","应用","需要","资源","大致","都","也","各种各样","执行","链来","计算","工具","功能","一套","针对","相比","便于","参数","变化","兼容","要求","服务","方向","各种","需求","执行器","通用","算法","很大","算力","系列","无论是","选型","会","每个","下","提供","问题","差异","在","了","持续","机器","开发","有","机器人","有所","构建","一系","和","简单","系统","各样","中","就","电脑","传感","器件","不同"," ","哪","升级","可是","性能","得","数据","可以","千变万化","要","。","togetherros","比","比如"],"title":"TogetherROS应用场景","title_tokens":["场景","togetherros","应用"]},{"location":"hhp/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_1","text":"在服务机器人领域，场景和功能尤其复杂，有家里的扫地机器人，有餐厅里的送餐机器人，有咖啡店里的双臂机器人，还有物流送货的飞行机器人，虽然每一个机器人平台的构型不同，但都需要动态处理多种多样的环境变化，这就需要TogetherROS基于大量数据的AI处理和丰富的组件功能支持，快速推动各种功能的落地。","text_tokens":["但","有","机器人","需要","都","和","推动","送货","送餐","功能","里","多种","动态","餐厅","落地","基于","ai","就","的","虽然","领域","大量","家里","平台","快速","。","变化","场景","还有","不同","物流","环境","咖啡店","一个","服务","数据","每","尤其","复杂","在","扫地","构型","多样","这","飞行","咖啡","双臂","机器","多种多样","各种","组件","丰富","支持","处理","togetherros","，"],"title":"服务机器人","title_tokens":["机器","服务","机器人"]},{"location":"hhp/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_2","text":"在工业机器人领域，目前的机器人主要以工业机械臂和物流移动机器人形态为主，场景相比服务机器人要标准很多，核心目的是要提高生产效率，这就要求机器人可以长期稳定的运行，同时实时处理各项运动功能，TogetherROS可裁剪和性能稳定等特点，都可以符合要求。","text_tokens":["很多","机器人","等","都","效率","和","移动机器人","实时处理","是","裁剪","运行","机械","功能","形态","可","核心","处理","为主","符合","相比","的","就","稳定","领域","符合要求","各项","动机","目的","场景","臂","提高","物流","实时","要求","目前","标准","运动","服务","特点","性能","这","可以","在","长期","同时","移动","要","机器","以","生产","。","工业","主要","togetherros","，"],"title":"工业机器人","title_tokens":["工业","机器","机器人"]},{"location":"hhp/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_3","text":"而在特种机器人的应用领域，结合了服务和工业场景中的不少特点，机器人形态多变，得动态处理各种复杂场景里的事件，例如火灾、地震、管道等场景，更是会发生很多不可预料的情况，TogetherROS中的AI处理可以较好的保障不同环境中的感知效果，同时端云联动，可以实现大量数据的训练和部署，不断提高对复杂环境的处理能力。 可见，TogetherROS充分考虑了众多应用场景的需求，不仅可以满足智能机器人开发过程中的每一个环节，也考虑到了机器人未来在产业中的应用效果。","text_tokens":["过程","产业","未来","多变","端云","动态","充分","环节","的","能力","智能","、","场景","提高","不仅","满足","可见","实现","不断","每","复杂","考虑","工业","处理","情况","特种","，","很多","管道","联动","等","应用","感知","火灾","也","对","众多","更是","事件","环境","一个","而","训练","服务","各种","需求","预料","例如","应用领域","部署","形态","效果","发生","到","会","不可","地震","同时","在","了","较","机器","结合","不少","开发","机器人","和","里","充分考虑","中","ai","领域","大量","不同"," ","特点","得","数据","可以","好","保障","。","togetherros"],"title":"特种机器人","title_tokens":["机器","特种","机器人"]},{"location":"hhp/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/","text":"机器人开发套件(旭日X3派)介绍 TogetherROS是一个软件系统，硬件层面当然需要一个强有力的计算平台啦。之前我们提到，TogetherROS会基于地平线的AI芯片，充分发挥硬件性能，我们如何使用这颗芯片呢？ 旭日X3派 没问题，地平线已经为我们准备好了，那就是搭载旭日X3芯片的机器人开发板——旭日X3派。 第一眼看上去，大家是否会想到树莓派呢？没错，为了适应开发者的使用习惯，兼容市面上大量已有的模块，旭日X3派的整体外观和接口形态都接近树莓派，不过面向的开发对象以及板卡的计算实力，和树莓派就完全不同了。 类似这些常用的传感器，旭日X3派统统都可以支持，未来还有更多机器人套件会出现在大家身边。 大家可以在这张表中，看到旭日X3派的硬件资源，CPU是四核A53，频率1.2Hz，在系统内还可以进行超频，BPU就是硬件级的AI引擎，这是旭日X3派相比市面上其他开发板，最大的不同，也是核心性能的主要来源，类似于业界常听到的NPU，这里使用的是地平线机器人独有的伯努利2.0架构，可以提供5Tops的等效算力支持。 内存方面，大家可以选择2GB或者4GB的版本，存储使用的是SD卡，我们可以自行选择，只要大于8GB就可以啦。 在多媒体方面，旭日X3派支持硬件级别的H265和H264编解码，常用的图像和视频都可以流畅播放。 接口方面，尽量可以满足我们常用外接设备和开发的需求，这里是一个CSI的相机接口，板载USB有3个，包含1个USB3.0和2个USB2.0，这里是一个板载的调试串口，我们可以通过它获取系统层面的很多调试信息，也可以与板卡进行通信。 板卡上也搭载了有线网络和无线网络，这个有线网口我们可以直接用网线连接到电脑，就可以在电脑上远程登录和板卡通信了，或者连接到路由器，让板卡直接上网，无线网络和蓝牙是一个二合一的模块，我们也可以直接通过wiki，让板卡连接到某个网络中。 显示接口主要是这里的HDMI，如果我们先要看到系统界面，或者后续很多视觉例程的识别效果，都可以通过HDMI外接一个显示器进行显示。 最后还有至关重要的扩展接口，有40个引脚，和树莓派的接口定义一致，什么GPIO、串口、I2C、SPI等等，一应俱全。 这块板卡我们在使用的时候，推荐使用5V3A的电源，通过TypeC线连接到这里供电，官方提供的系统目前是Ubuntu20.04，使用起来和原生系统没有太大差别。 总体来讲， 旭日X3派是一款面向生态开发者的嵌入式AI开发板，接口兼容树莓派，具有5Tops的端侧推理算力，以及4核ARM A53的处理能力。 面对个人开发者，旭日X3派可以让每一位开发者拥有自己的AI开发套件，不再受开发板高昂的价格限制，面对高等院校，使用旭日X3派开发套件探索AI和机器人应用是学习的开始，有助于学生快速入门人工智能与机器人开发，面对产业，旭日X3派以及地平线的AI工具链，可以帮助客户将产品尽快推向市场，快速落地智能机器人方向的解决方案。 旭日X3M芯片 在旭日X3派上，最为核心的当然就是这颗AI芯片了，这是关于芯片的具体信息，供大家参考。 值得一提的是，随着芯片的技术迭代，2023年，地平线将推出X5芯片，比较大的变化是CPU升级到了8核A55，主频提升到1.8GHz，BPU的算力也将达到8Tops，还加入了GPU，以及更多可扩展的接口。 在使用旭日X3派的过程中，大家也可以期待旭日X5派了。 旭日X3派接口 好啦，还是回到旭日X3派的开发接口上来，我们再做一个整理，这些就是我们使用开发板进行智能机器人开发过程中，最为常用的接口啦。 大家目前在树莓派或者其他开发板上使用的绝大部分模块，基本都可以在旭日X3派上复用，同时还有更多智能化的玩法等着大家。 关于40Pin扩展接口的序号排布，大家可以看这里，引脚的序号是从靠近HDMI板卡内测的开始算起，是引脚1，然后依次蛇形计数，分别是1、2、3、4、5，一直到这里是39和40。 上图是40PIN扩展接口的详细定义，有3.3V和5V的电源信号，有I2C、I2S、SPI、UART等通信接口，还有很多可动态配置的GPIO信号，基本可以满足各种各样的机器人开发啦。 好啦，关于旭日X3派这块开发板我们已经了解清楚了，具体该如何使用呢，我们后续操作起来。","text_tokens":["最大","自己","层面","包含","发挥","a55","当然","内","动态","i2s","这块","市面上","、","以及","界面","上来","市面","起来","学生","直接","大部分","支持","主要","上网","很多","了解","也","分别","—","方案","树莓","架构","npu","相比","通过","usb","是从","看到","兼容","变化","获取","x3","入门","串口","四核","需求","先","序号","一致","比较","ghz","h265","算力","至关重要","没","让","解决方案","算","信息","参考","来源","差别","太","官方","5","一应俱全","远程","媒体","开发","之前","准备","有","市场","整体","40","类似","版本","8tops","值得","视觉","各样","伯努利","ai","arm","个","传感","调试","还有","5tops","强有力","不同","看","8","路由器","显示","升级","可以","一位","旭日","整理","存储","加入","推向市场","起","卡","着","推向","习惯","5v","面向","接口","相机","常用","usb3.0","技术","可","蛇形","调试信息","具有","外","一应","能力","传感器","引擎","解码","连接","多","spi","帮助","满足","39","软件","目前","有力","迭代","就是","感器","ubuntu20.04","处理","，","价格","什么","各种各样","地平线","csi","是","工具","扩展","更","统统","最为","那","快速","最后","3","有助","硬件","链","方向","推出","提升","大部","通信接口","想到","随着","这些","身边","网络","年","对象","开始","wiki","开发板","大","形态","核心","效果","该","视频","后续","核","搭载","供","v","问题","嵌入式","如何","嵌入","还","机器","外观","设备","1.2","推荐","超频","接设备","线","它","？","网线","和","于","有助于","级别","系统","独有","客户","使用","板卡","就","达到","关于","2","板载","性能","2gb","要","充分发挥","原生","已经","过程","靠近","院校","适应","是否","第一眼","这个","登录","引脚","来讲","线网","充分","基于","拥有","智能","绝大部分","进行","张表中","尽量","4","每","这","人工","typec",")","主频","推理","需要","应用","这里","模块","供电","面对","大家","方面","完全","x3m","业界","1","不再","一个","二合","常听到","受","gpu","各种","端侧","一款","排布","蓝牙","识别","人工智能","落地","套件","用","hdmi","4gb","会","做","定义","例程","同时","限制","a53","图像","接近","只要","值得一提的是","40pin","信号","为了","等效","出现","中","内测","电脑","上去","无线网"," ","不过","助于","有线网","这是","看上去","再","通信","好","无线","尽快","内存","频率","。","绝大","分发","产业","未来","玩法","还是","提到","第一","如果","我们","h264","高等","无线网络","3.3","二合一","5v3a","的","部分","计数","平台","配置","大于","高昂","学习","其他","口","sd","解决","usb2.0","操作","芯片","然后","等","资源","都","呢","或者","产品","已有","计算","一眼","生态","一直","面上","依次","1.8","cpu","复用","硬件资源","8gb","没有","gpio","路由","等等","有线","bpu","hz","(","上","软件系统","选择","实力","级","个人","具体","回到","显示器","地平","合一","uart","为","到","x5","编解码","时候","介绍","看上","高等院校","提供","开发者","i2c","在","了","播放","2023","总体","清楚","详细","探索","上图","自行","重要","派","机器人","外接","电源","某个","俱全","与","啦","流畅","没错","这颗","将","接口定义","大量","听到","至关","2.0","智能化","期待","基本","多媒体","togetherros"],"title":"机器人开发套件介绍","title_tokens":["套件","机器人","机器","介绍","开发"]},{"location":"hhp/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3","text":"TogetherROS是一个软件系统，硬件层面当然需要一个强有力的计算平台啦。之前我们提到，TogetherROS会基于地平线的AI芯片，充分发挥硬件性能，我们如何使用这颗芯片呢？","text_tokens":["之前","分发","需要","？","提到","软件系统","层面","啦","地平线","我们","呢","是","发挥","计算","系统","当然","地平","这颗","充分","基于","ai","使用","的","平台","强有力","会","软件","硬件","一个","有力","性能","如何","芯片","。","togetherros","充分发挥","，"],"title":"机器人开发套件(旭日X3派)介绍","title_tokens":["套件","派","(","机器人","旭日","机器","介绍","x3",")","开发"]},{"location":"hhp/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3_1","text":"没问题，地平线已经为我们准备好了，那就是搭载旭日X3芯片的机器人开发板——旭日X3派。 第一眼看上去，大家是否会想到树莓派呢？没错，为了适应开发者的使用习惯，兼容市面上大量已有的模块，旭日X3派的整体外观和接口形态都接近树莓派，不过面向的开发对象以及板卡的计算实力，和树莓派就完全不同了。 类似这些常用的传感器，旭日X3派统统都可以支持，未来还有更多机器人套件会出现在大家身边。 大家可以在这张表中，看到旭日X3派的硬件资源，CPU是四核A53，频率1.2Hz，在系统内还可以进行超频，BPU就是硬件级的AI引擎，这是旭日X3派相比市面上其他开发板，最大的不同，也是核心性能的主要来源，类似于业界常听到的NPU，这里使用的是地平线机器人独有的伯努利2.0架构，可以提供5Tops的等效算力支持。 内存方面，大家可以选择2GB或者4GB的版本，存储使用的是SD卡，我们可以自行选择，只要大于8GB就可以啦。 在多媒体方面，旭日X3派支持硬件级别的H265和H264编解码，常用的图像和视频都可以流畅播放。 接口方面，尽量可以满足我们常用外接设备和开发的需求，这里是一个CSI的相机接口，板载USB有3个，包含1个USB3.0和2个USB2.0，这里是一个板载的调试串口，我们可以通过它获取系统层面的很多调试信息，也可以与板卡进行通信。 板卡上也搭载了有线网络和无线网络，这个有线网口我们可以直接用网线连接到电脑，就可以在电脑上远程登录和板卡通信了，或者连接到路由器，让板卡直接上网，无线网络和蓝牙是一个二合一的模块，我们也可以直接通过wiki，让板卡连接到某个网络中。 显示接口主要是这里的HDMI，如果我们先要看到系统界面，或者后续很多视觉例程的识别效果，都可以通过HDMI外接一个显示器进行显示。 最后还有至关重要的扩展接口，有40个引脚，和树莓派的接口定义一致，什么GPIO、串口、I2C、SPI等等，一应俱全。 这块板卡我们在使用的时候，推荐使用5V3A的电源，通过TypeC线连接到这里供电，官方提供的系统目前是Ubuntu20.04，使用起来和原生系统没有太大差别。 总体来讲， 旭日X3派是一款面向生态开发者的嵌入式AI开发板，接口兼容树莓派，具有5Tops的端侧推理算力，以及4核ARM A53的处理能力。 面对个人开发者，旭日X3派可以让每一位开发者拥有自己的AI开发套件，不再受开发板高昂的价格限制，面对高等院校，使用旭日X3派开发套件探索AI和机器人应用是学习的开始，有助于学生快速入门人工智能与机器人开发，面对产业，旭日X3派以及地平线的AI工具链，可以帮助客户将产品尽快推向市场，快速落地智能机器人方向的解决方案。","text_tokens":["最大","自己","包含","层面","内","这块","市面上","、","以及","界面","市面","起来","学生","直接","支持","主要","上网","很多","也","—","方案","树莓","架构","npu","相比","通过","usb","看到","兼容","获取","x3","入门","串口","四核","需求","先","一致","h265","算力","至关重要","没","让","解决方案","信息","来源","差别","太","官方","一应俱全","远程","媒体","开发","准备","有","市场","整体","40","类似","版本","视觉","伯努利","ai","arm","个","传感","调试","还有","5tops","不同","路由器","显示","可以","一位","旭日","存储","推向市场","卡","推向","习惯","面向","接口","相机","常用","usb3.0","调试信息","具有","外","一应","能力","传感器","引擎","解码","连接","多","spi","帮助","满足","目前","就是","感器","ubuntu20.04","处理","，","价格","什么","地平线","csi","是","工具","扩展","更","统统","那","快速","最后","3","有助","硬件","链","方向","想到","这些","身边","网络","对象","开始","wiki","开发板","大","形态","核心","效果","视频","后续","核","搭载","问题","嵌入式","嵌入","还","机器","外观","设备","1.2","推荐","超频","接设备","线","它","？","网线","和","于","有助于","级别","系统","独有","客户","使用","板卡","就","2","板载","性能","2gb","要","原生","已经","院校","适应","是否","第一眼","这个","登录","引脚","来讲","线网","拥有","智能","进行","张表中","尽量","4","每","这","人工","typec","推理","应用","这里","模块","供电","面对","大家","方面","完全","业界","1","不再","一个","二合","常听到","受","端侧","一款","蓝牙","识别","人工智能","落地","套件","用","hdmi","4gb","会","定义","例程","限制","a53","图像","接近","只要","为了","等效","出现","中","电脑","上去","无线网"," ","不过","助于","有线网","这是","看上去","通信","好","无线","尽快","内存","频率","。","产业","未来","第一","如果","我们","h264","高等","无线网络","二合一","5v3a","的","大于","高昂","学习","其他","口","sd","解决","usb2.0","芯片","资源","都","呢","或者","产品","已有","计算","一眼","生态","面上","cpu","硬件资源","8gb","没有","gpio","路由","等等","有线","bpu","hz","上","选择","实力","级","个人","显示器","地平","合一","为","到","编解码","时候","看上","高等院校","提供","开发者","i2c","在","了","播放","总体","探索","自行","重要","派","机器人","外接","电源","某个","俱全","与","啦","流畅","没错","将","接口定义","大量","听到","至关","2.0","多媒体"],"title":"旭日X3派","title_tokens":["旭日","x3","派"]},{"location":"hhp/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3m","text":"在旭日X3派上，最为核心的当然就是这颗AI芯片了，这是关于芯片的具体信息，供大家参考。 值得一提的是，随着芯片的技术迭代，2023年，地平线将推出X5芯片，比较大的变化是CPU升级到了8核A55，主频提升到1.8GHz，BPU的算力也将达到8Tops，还加入了GPU，以及更多可扩展的接口。 在使用旭日X3派的过程中，大家也可以期待旭日X5派了。","text_tokens":["派","，","值得一提的是","年","过程","上","比较","ghz","8tops","也","地平线","接口","是","大家","值得","大","具体","技术","算力","a55","可","核心","当然","扩展","地平","这颗","将","更","中","ai","使用","的","最为","到","信息","参考","x5","达到","变化","1.8","关于"," ","cpu","8","核","多","以及","供","这是","期待","x3","升级","迭代","可以","在","了","推出","旭日","2023","提升","还","加入","gpu","就是","随着","bpu","。","芯片","主频"],"title":"旭日X3M芯片","title_tokens":["旭日","芯片","x3m"]},{"location":"hhp/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3_2","text":"好啦，还是回到旭日X3派的开发接口上来，我们再做一个整理，这些就是我们使用开发板进行智能机器人开发过程中，最为常用的接口啦。 大家目前在树莓派或者其他开发板上使用的绝大部分模块，基本都可以在旭日X3派上复用，同时还有更多智能化的玩法等着大家。 关于40Pin扩展接口的序号排布，大家可以看这里，引脚的序号是从靠近HDMI板卡内测的开始算起，是引脚1，然后依次蛇形计数，分别是1、2、3、4、5，一直到这里是39和40。 上图是40PIN扩展接口的详细定义，有3.3V和5V的电源信号，有I2C、I2S、SPI、UART等通信接口，还有很多可动态配置的GPIO信号，基本可以满足各种各样的机器人开发啦。 好啦，关于旭日X3派这块开发板我们已经了解清楚了，具体该如何使用呢，我们后续操作起来。","text_tokens":["已经","过程","靠近","玩法","还是","5v","接口","我们","常用","蛇形","可","引脚","3.3","动态","的","i2s","这块","部分","计数","智能","、","多","spi","配置","绝大部分","满足","上来","进行","目前","4","39","起来","其他","就是","大部分","操作","，","很多","然后","了解","等","都","这里","分别","各种各样","呢","模块","是","大家","或者","扩展","树莓","更","1","最为","一直","依次","是从","3","一个","x3","复用","绝大","gpio","大部","通信接口","各种","这些","序号","上","开始","开发板","排布","具体","回到","该","uart","算","到","后续","hdmi","做","定义","v","i2c","同时","如何","在","了","5","清楚","详细","机器","上图","开发","派","有","机器人","电源","40","和","啦","40pin","信号","各样","中","内测","使用","板卡","还有","关于"," ","看","再","智能化","2","通信","基本","可以","好","旭日","整理","起","。","着"],"title":"旭日X3派接口","title_tokens":["旭日","x3","派","接口"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/","text":"TogetherROS系统安装 我们在旭日X3派上安装系统镜像，并进一步完成TogetherROS的安装，大家如果手上有旭日X3派开发板的话，建议跟随一起操作。 先来了解一下TogetherROS安装的整体流程： 第一步，要完成硬件的准备，我们需要找到一块旭日X3派的开发板，并且准备好电源线、SD卡、读卡器、串口模块等必要的配件，当然还需要有一台操作的电脑啦。 硬件都准备好之后，就可以进入第二步，给旭日X3派下载并安装Ubuntu系统镜像，这是TogetherROS软件运行必要的底层环境。 第三步，就可以开始安装TogetherROS啦。 安装完成后，我们还需要进一步完成一些配置工作，可以也让旭日X3派板卡上的各项功能都运行起来，保证TogetherROS的顺利运行。 最后一步，就是体验TogetherROS出厂自带的一些例程啦，确定一切安装顺利，为后续机器人开发最好准备。 接下来，我们就按照这个流程，开始操作。 硬件准备 先来完成硬件准备： 找到一块旭日X3派的板卡，准备好一套5V3A的电源和TypeC电源线，稍后会连接到这里的电源接口，给板卡供电。 然后准备好一张8GB以上的SD卡和读卡器，下一步我们会在上边烧写系统镜像。 接下来使用一个串口模块，连接旭日X3派和笔记本电脑，便于下一步看到系统镜像的启动信息。 如果大家有网线和HDMI显示器的话，也可以先准备好，在之后的操作中用的上，如果没有也没关系，不影响TogetherROS的基本使用。 硬件准备齐全之后，就可以进入第二步了。 安装Ubuntu系统 我们来给旭日X3派安装Ubuntu系统，关于系统镜像和烧写工具，都可以在 地平线AI社区 中找到。 下载SD卡镜像 首先登录地平线AI社区，点击”产品中心——资源中心“， 进入页面后下拉至”X3派资料包“专区，其中有两个镜像，点击下载其中的”旭日X3派系统镜像（服务版）“，会有一个压缩包，把它保存到当前电脑桌面。 此外，我们稍后将镜像烧写到SD卡里，需要用到烧写小工具，如果大家电脑上没有合适的工具，可以下拉到”工具“专区，点击下载”烧录 工具rufus\"。 下载完后我们来看一下两个压缩文件中的内容： 其中一个是烧写X3派镜像文件的工具，压缩包中有两个文件，一个是system_sdcard.img文件，是我们稍后会用于烧写SD卡的镜像文件；另一个是disk_nand.img文件，用于烧写旭日X3派中的flash文件，大多数情况下都用不到； 另一个压缩包里是我们稍后用于烧写镜像的rufus工具。 我们把两个压缩包都解压出来，然后把SD卡放进读卡器、插到电脑端 接下来就可以开始烧写SD卡镜像。 烧写SD卡镜像 运行解压出来的烧写工具rufus。启动后需要确认几个参数： 第一个是确定烧写到哪个磁盘上。工具软件会默认搜索当前读取到的SD卡，下图所示磁盘名称，就是演示时插好的16GB的SD卡。 下一步我们点击“选择”，找到需要烧写的镜像文件。演示中已经把需要的system_sdcrd.img文件放在了桌面上，选中它点击“打开”； 下面的内容就可以用默认的配置，点击“开始”会弹出警告告诉我们将把磁盘里的所有文件都清除掉，这没有问题，我们点击“选择“，就开始烧写SD卡镜像了。 进度条显示“准备就绪”后，点击“关闭”，此时你的SD卡镜像就已经烧写完成了，我们把SD卡的读卡器拔出来。 连接串口 接下来把SD卡插到旭日X3派上。 把串口模块连接到电脑的USB上。 连接好串口模块后，为了确保串口已经跟电脑连接成功、并且安装好了驱动，我们可以右键“我的电脑”图标、选择“管理”，在打开的”计算机管理“界面中找到”设备管理器——端口“，检查一下你的USB串口是否已经显示出了对应的设备。演示中的端口号为COM6,说明串口已经成功驱动了。 如果没有看到自己的设备号、或者设备号前有一个叹号或者问号标记，说明你的驱动没有安装好，可以搜索网络上的技术博客，来完成串口模块的驱动安装。 关闭“计算机管理”窗口，接下来就要通过串口与旭日X3派进行连接了。这里我们需要用到一个串口小工具，大家可以使用自己常用的工具。 演示中使用的串口工具是MobaXterm,十分推荐大家使用这个工具，里面集成了开发过程中需要使用的各种小工具，我们后续的串口通讯、SSH网络通讯，都会使用这些工具完成。 打开MobaXterm,点击左上角的\"Session\"； 找到里面的“Serial\"串口选项，点击打开；串口号选择本机连接到旭日X3派的相应端口，演示中为COM6; 波特率选择921600。选项好后点击“OK”。 现在串口已经连接成功了，但当前旭日X3派的板子还没有上电，所以没有任何信息弹出。 我们把电源线与旭日X3派连接好。 可以看到弹出了日志提醒：“当前系统正在启动”。等待系统加载完成。 现在可以看到系统已经加载成功了。 串口登录系统 接下来我们需要登录系统。我们有两个账号可以用来登录： 账号1：用户名为root，密码也为root； 账号2：用户名为storise，密码也为storise； 这里演示使用root用户来登录。输入用户名、密码，回车，需要等待大约1分钟，因为第一次登录需要展开一些系统必要的安装软件，安装好后系统会自动重启。 系统自动重启后，再次使用root用户登录。现在你的UBUNTU系统就已经安装好了。 我们可以使用LINUX系统常用的一些命令行进行查看和设置，比如ls查看当前命令，pwd查看当前路径，还可以使用mkdir命令创建文件夹，比如这里,一个test文件夹就创建成功了。 到这里为止，旭日X3派上的Ubuntu系统就安装成功啦，我们继续下一步。 安装TogetherROS 接下来安装TogetherROS。 为了达到更好的通信效率，我们后续使用有线网络连接旭日X3派，这里大家可以拿出一根网线，直接连接电脑和旭日X3派的网口。 旭日X3派中出厂已经配置好了静态IP地址，是192.168.1.10，我们将使用的电脑也配置到同一网段即可。 配置有线网络 接下来请大家拿一根网线，连接旭日X3派和电脑。 然后，在电脑端打开控制面板，找到“查看网络状态和任务”。 找到已经连接成功的以太网，点击它； 会弹出一个窗口，我们点击“属性”。 再次弹出窗口，我们双击选择“Internet协议版本4”。 然后会弹出一个配置IP地址的窗口，我们勾选”使用下面的IP地址“。 按照如下信息填入： IP地址：192.168.1.100 子网掩码：255.255.255.0 默认网关：192.168.1.1 我们使用的旭日X3派的板子IP为192.168.1.10，所以IP后三位除了.10和网关.1以外，大家可以选用1-255之间的任意数字，这里使用.100； 填写完在所有窗口点击“确定”，最后关闭窗口。现在网络的配置就完成了，此时电脑端的静态IP就是192.168.1.100,我们通过这个IP与旭日X3派产生连接。 SSH远程登录 我们再次打开MobaXterm软件,点击左上角的\"Session\"，找到里面的\"SSH\",输入 旭日X3派板子的IP192.168.1.10，点击”OK“。 弹出登录窗口，我们用root账户登录：用户名为root，密码为root。这里会弹窗询问是否保存登录密码，如果需要保存就点“YES”，不需要保存就点“NO”。 现在我们就成功通过网络SSH协议登录到了旭日X3派板子上，和之前我们用串口登录的效果几乎是一样的，但现在我们是用网络通讯，所以现在通讯的效率和传输的速度会更高。 配置完成网络通讯后，我们来正式安装TogetherROS。 安装TogetherROS 我们在登录成功的SSH终端中，直接使用如下命令即可安装： $ sudo apt install hhp 等待安装完成： $ root@ubuntu:~# sudo apt install hhp Reading package lists... Done Building dependency tree Reading state information... Done The following NEW packages will be installed: hhp 0 upgraded, 1 newly installed, 0 to remove and 52 not upgraded. Need to get 384 MB of archives. After this operation, 512 MB of additional disk space will be used. Get:1 http://42.62.85.28/ubuntu-ports focal/main arm64 hhp arm64 1 .0.1 [ 384 MB ] Fetched 384 MB in 6min 43s ( 954 kB/s ) Selecting previously unselected package hhp. ( Reading database ... 110406 files and directories currently installed. ) Preparing to unpack .../archives/hhp_1.0.1_arm64.deb ... Unpacking hhp ( 1 .0.1 ) ... Setting up hhp ( 1 .0.1 ) ... Generating locales ( this might take a while ) ... en_US.ISO-8859-1... done en_US.UTF-8... done Generation complete. 安装完成后，查看/opt目录下的文件，可以看到已经安装： $ root@ubuntu:/userdata# ls /opt/ tros 如果觉得终端里看不方便，也可以使用MobaXterm软件的可视化浏览器来查看。 大家可以点击/opt/tros文件夹，看看其中的文件结构。 /include文件夹里，是我们后续会用到的关于系统的头文件的调用路径； /lib文件夹里面是库文件； /share文件夹里是安装好的功能包的路径； /src文件夹里是后续会用到的代码； /tools文件夹里是一些小工具。 除此之外，还有很多.bat、.sh脚本文件，它们是用来设置环境变量的。这是因为，你的LINUX系统不知道你安装包的路径在哪，所以需要通过环境变量的脚本来告诉系统，如何找到对应的TogetherROS的功能包、和功能包里的命令工具。 环境变量在我们后续操作里会频繁地使用到，我们会使用到一个”source\"命令来配置环境变量，例如： $ source /opt/tros/setup.bash 运行上面这行命令，就会把当前环境变量设置到系统里去；下次再运行ROS2、TogetherROS指令时，就能找到功能包的路径了。 到这里，TogetherROS软件系统安装完成，下一节我们将对开发板和TogetherROS进行配置。","text_tokens":["相应","下拉到","自己","弹","192.168","rufus","烧","地","unselected","当然","地址","检查一下","路径","代码","yes","1.100","、","变量","正式","计算机管理","界面","用到","上面","之间","一下","起来","preparing","take","@","following","所示","一样","直接","账号","in","工具软件","remove","勾选","tools","终端","很多","它们","“","了解","密码","网口","也","读取","即可","6min","成功","行","—","再次","unpack","384","对","手上","找到","com6","头文件","通过","接下来","usb","波特","看到","资料","展开","1.10","x3","桌面上","板子","拿","the","选中","如下","时","更好","串口","下载","be","选用","/","先","三位","上边","关闭","sdcard","http","左上","分钟","文件夹","属性","让","[","信息","压缩","ls","各项","255","img","镜像文件","所以","插","体验","tree","远程","觉得",".","拉到","写","开发","工作","中为","此外","准备","mkdir","之前","有","sudo","tros","整体","掉","环境变量","一起","版本","#","0","16gb","并且","arm64","哪个","；","桌面","ai","把","计算机","newly","还有","看","8","显示","一切","done","hhp","可以","旭日","ok","locales","卡","比如","下拉至","iso","版","管理器","拔出","$","after","接口","户名","常用","拿出","apt","reading","技术","complete","第三","两个","除了","保存","的话","网络连接","可视","输入","255.255","选项","and","连接","集成","中用","us","警告","理器","软件","出来","之后","storise","：","通讯","以上","就是","浏览器","，","流程","operation","src","disk","地平线","是","端口","工具","功能","合适","控制","更","接下","便于","参数",",","最后","921600","环境","自带","硬件","创建","出厂","必要","服务","main","来","fetched","算机","这些","同一","网段","子网掩码","一根","上电","网络","开始","might","开发板","电源线","while","查看","安装包","43s","搜索","效果","后续","100","下拉","调用","flash","确定","下来","一些","mb","问题","如何","还","前","是因为","机器","设备","镜像","推荐","need","root","它","网线","和","deb","除此","放在","电源接口","标记","名为","任何","里","系统","电脑桌","放进","就","板卡","使用","笔记本","用户","达到","this","954","关于","lists","en","8859","知道","高","没关","2","bash","一节","几个","完成","要","_","bat","命令","端口号","（","指令","进度条","...","已经","一台","后","过程","一次","第一次","掩码","控制面板","是否","这个","第三步","说明","lib","登录","频繁","selecting","号","1.1","可视化","第二步","准备就绪","所有","10","包","传输","进行","4","linux","进一步","磁盘","这","typec","窗口","去","”","完后","情况","大约",")","setting","打开","share","就绪","需要","笔记","账户","这里","笔记本电脑","~","模块","下面","供电","ros2","大家","设置","additional","以太网","0.1","会弹","大多数","1","完在","出","第一步","of","驱动","烧写","中心","跟随","一个","我","图标","顺利","第二","数字","压缩文件","database","各种","source","packages","跟","结构","building","右键","但","system","提醒","52","test","generation","效率","ports","多数","告诉","好后","询问","-","focal","填入","安装","install","此时","看看","除此之外","目录","对应","页面","不","用","hdmi","nand","sh","包里","会","get","脚本","opt","session","例程","generating","检查","首先","a","下次","will","一步","产生","512","installed","directories","因为","浏览","重启","加载","任务","填写","任意","状态","三步","端","files","为了","稍后","ssh","解压","userdata","其中","no","方便","中","中有","serial",":","internet","电脑","二步","叹"," ","静态","这是","kb","s","再","通信","一张","好","没关系","里面","弹出","网络通讯","up","。","setup","配件","进度","子网","以外","电脑桌面","第一","管理","如果","我们","影响","archives","底层","制面","问号","previously","面板","5v3a","的","启动","里会","关系","最好","配置","等待","255.0","upgraded","ubuntu","42.62","下图","点击","清除","继续","弹窗","几乎","sd","操作","确保","社区","unpacking","ip地址","include","然后","等","sdcrd","资源","就要","来看","回车","都","端的","或者","产品","自动","读卡","计算","进入","一套","一块","默认","协议","文件","用于","面上","用来","口号","上角","110406","请","日志","十分","mobaxterm","new","8gb","没有","不到",";","之外","保证","内容","有线","建议","就点","）","压缩包","(","]","网关","上","软件系统","并","选择","用户名","名称","给","例如","pwd","读卡器","当前","专区","used","运行","显示器","左上角","地平","为","到","机","库","ip","not","dependency","下","双击","information","在","了","小","第一个","package","大多","另","85.28","拔出来","派","机器人","电源","环境变","为止","与","啦","现在","utf","串","确认","将","\"","正在","命令行","state","1.0","演示","你","to","按照","波特率","能","currently","件夹","哪","速度","齐全","基本","以太","卡里","博客","space","ip192.168","烧录","togetherros","本"],"title":"TogetherROS系统安装","title_tokens":["安装","togetherros","系统"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros","text":"我们在旭日X3派上安装系统镜像，并进一步完成TogetherROS的安装，大家如果手上有旭日X3派开发板的话，建议跟随一起操作。 先来了解一下TogetherROS安装的整体流程： 第一步，要完成硬件的准备，我们需要找到一块旭日X3派的开发板，并且准备好电源线、SD卡、读卡器、串口模块等必要的配件，当然还需要有一台操作的电脑啦。 硬件都准备好之后，就可以进入第二步，给旭日X3派下载并安装Ubuntu系统镜像，这是TogetherROS软件运行必要的底层环境。 第三步，就可以开始安装TogetherROS啦。 安装完成后，我们还需要进一步完成一些配置工作，可以也让旭日X3派板卡上的各项功能都运行起来，保证TogetherROS的顺利运行。 最后一步，就是体验TogetherROS出厂自带的一些例程啦，确定一切安装顺利，为后续机器人开发最好准备。 接下来，我们就按照这个流程，开始操作。","text_tokens":["一台","后","第一","如果","我们","这个","底层","第三步","当然","第三","第二步","的","的话","、","最好","配置","ubuntu","软件","一下","起来","进一步","之后","：","就是","sd","操作","，","流程","了解","等","需要","都","也","模块","大家","读卡","功能","进入","一块","手上","找到","接下","第一步","接下来","最后","环境","自带","硬件","跟随","x3","出厂","必要","顺利","来","第二","串口","下载","保证","建议","先","上","并","给","开始","读卡器","开发板","电源线","安装","运行","让","为","后续","各项","确定","下来","一些","例程","在","还","体验","一步","机器","镜像","开发","工作","准备","派","有","机器人","整体","电源","一起","三步","啦","并且","系统","就","板卡","电脑","二步"," ","按照","这是","一切","可以","好","旭日","完成","要","。","卡","togetherros","配件"],"title":"TogetherROS系统安装","title_tokens":["安装","togetherros","系统"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_1","text":"先来完成硬件准备： 找到一块旭日X3派的板卡，准备好一套5V3A的电源和TypeC电源线，稍后会连接到这里的电源接口，给板卡供电。 然后准备好一张8GB以上的SD卡和读卡器，下一步我们会在上边烧写系统镜像。 接下来使用一个串口模块，连接旭日X3派和笔记本电脑，便于下一步看到系统镜像的启动信息。 如果大家有网线和HDMI显示器的话，也可以先准备好，在之后的操作中用的上，如果没有也没关系，不影响TogetherROS的基本使用。 硬件准备齐全之后，就可以进入第二步了。","text_tokens":["如果","接口","我们","影响","第二步","5v3a","的","启动","的话","关系","连接","中用","之后","：","以上","typec","sd","操作","，","然后","笔记","这里","笔记本电脑","也","模块","供电","大家","读卡","进入","一套","一块","找到","接下","便于","接下来","看到","烧写","硬件","一个","x3","8gb","没有","来","第二","串口","先","上边","上","给","读卡器","电源线","显示器","到","不","信息","hdmi","会","下来","下","在","了","一步","镜像","准备","派","有","电源","网线","和","电源接口","稍后","系统","板卡","使用","就","笔记本","电脑","二步"," ","显示","没关","齐全","基本","一张","可以","好","旭日","没关系","完成","。","卡","togetherros"],"title":"硬件准备","title_tokens":["准备","硬件"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#ubuntu","text":"我们来给旭日X3派安装Ubuntu系统，关于系统镜像和烧写工具，都可以在 地平线AI社区 中找到。","text_tokens":["派","都","和","地平线","我们","给","烧","安装","工具","系统","地平","中","ai","找到","关于"," ","ubuntu","x3","可以","在","来","旭日","镜像","。","写","社区","，"],"title":"安装Ubuntu系统","title_tokens":["ubuntu","安装","系统"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#sd","text":"首先登录地平线AI社区，点击”产品中心——资源中心“， 进入页面后下拉至”X3派资料包“专区，其中有两个镜像，点击下载其中的”旭日X3派系统镜像（服务版）“，会有一个压缩包，把它保存到当前电脑桌面。 此外，我们稍后将镜像烧写到SD卡里，需要用到烧写小工具，如果大家电脑上没有合适的工具，可以下拉到”工具“专区，点击下载”烧录 工具rufus\"。 下载完后我们来看一下两个压缩文件中的内容： 其中一个是烧写X3派镜像文件的工具，压缩包中有两个文件，一个是system_sdcard.img文件，是我们稍后会用于烧写SD卡的镜像文件；另一个是disk_nand.img文件，用于烧写旭日X3派中的flash文件，大多数情况下都用不到； 另一个压缩包里是我们稍后用于烧写镜像的rufus工具。 我们把两个压缩包都解压出来，然后把SD卡放进读卡器、插到电脑端 接下来就可以开始烧写SD卡镜像。","text_tokens":["后","电脑桌面","版","下拉到","如果","rufus","我们","烧","登录","卡","两个","的","保存","包","、","用到","一下","点击","出来","：","sd","”","完后","情况","社区","，","“","然后","需要","资源","来看","都","disk","地平线","是","大家","产品","—","读卡","工具","进入","合适","大多数","接下","文件","用于","接下来","资料","烧写","中心","一个","x3","服务","没有","不到","压缩文件","下载","内容","）","压缩包","system","上","sdcard","多数","开始","读卡器","当前","专区","地平","页面","到","压缩","用","下拉","nand","会","img","flash","镜像文件","下来","下","首先","插","小","镜像","拉到",".","写","另","大多","此外","派","有","它","端","稍后","解压","其中","里","系统","将","电脑桌","桌面","中","ai","中有","\"","；","放进","把","就","电脑"," ","可以","旭日","卡里","_","。","（","烧录","下拉至"],"title":"下载SD卡镜像","title_tokens":["下载","卡","sd","镜像"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#sd_1","text":"运行解压出来的烧写工具rufus。启动后需要确认几个参数： 第一个是确定烧写到哪个磁盘上。工具软件会默认搜索当前读取到的SD卡，下图所示磁盘名称，就是演示时插好的16GB的SD卡。 下一步我们点击“选择”，找到需要烧写的镜像文件。演示中已经把需要的system_sdcrd.img文件放在了桌面上，选中它点击“打开”； 下面的内容就可以用默认的配置，点击“开始”会弹出警告告诉我们将把磁盘里的所有文件都清除掉，这没有问题，我们点击“选择“，就开始烧写SD卡镜像了。 进度条显示“准备就绪”后，点击“关闭”，此时你的SD卡镜像就已经烧写完成了，我们把SD卡的读卡器拔出来。","text_tokens":["已经","后","拔出","第一","rufus","我们","烧","的","准备就绪","启动","所有","配置","警告","软件","下图","点击","磁盘","出来","所示","这","：","清除","就是","sd","工具软件","”","，","打开","就绪","“","需要","sdcrd","都","读取","下面","是","读卡","工具","会弹","默认","找到","出","参数","文件","面上","烧写","一个","桌面上","没有","选中","时","内容","system","关闭","上","选择","告诉","名称","开始","读卡器","当前","运行","此时","搜索","到","用","会","img","确定","镜像文件","下","问题","插","了","一步","第一个","镜像",".","写","拔出来","准备","它","掉","放在","确认","解压","16gb","里","哪个","将","中","桌面","；","就","把","演示","你"," ","显示","可以","好","几个","_","完成","。","卡","进度条","进度"],"title":"烧写SD卡镜像","title_tokens":["卡","sd","烧写","镜像"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_2","text":"接下来把SD卡插到旭日X3派上。 把串口模块连接到电脑的USB上。 连接好串口模块后，为了确保串口已经跟电脑连接成功、并且安装好了驱动，我们可以右键“我的电脑”图标、选择“管理”，在打开的”计算机管理“界面中找到”设备管理器——端口“，检查一下你的USB串口是否已经显示出了对应的设备。演示中的端口号为COM6,说明串口已经成功驱动了。 如果没有看到自己的设备号、或者设备号前有一个叹号或者问号标记，说明你的驱动没有安装好，可以搜索网络上的技术博客，来完成串口模块的驱动安装。 关闭“计算机管理”窗口，接下来就要通过串口与旭日X3派进行连接了。这里我们需要用到一个串口小工具，大家可以使用自己常用的工具。 演示中使用的串口工具是MobaXterm,十分推荐大家使用这个工具，里面集成了开发过程中需要使用的各种小工具，我们后续的串口通讯、SSH网络通讯，都会使用这些工具完成。 打开MobaXterm,点击左上角的\"Session\"； 找到里面的“Serial\"串口选项，点击打开；串口号选择本机连接到旭日X3派的相应端口，演示中为COM6; 波特率选择921600。选项好后点击“OK”。 现在串口已经连接成功了，但当前旭日X3派的板子还没有上电，所以没有任何信息弹出。 我们把电源线与旭日X3派连接好。 可以看到弹出了日志提醒：“当前系统正在启动”。等待系统加载完成。 现在可以看到系统已经加载成功了。","text_tokens":["已经","相应","后","过程","自己","管理器","弹","管理","如果","我们","是否","这个","常用","说明","问号","技术","检查一下","号","的","启动","选项","、","连接","计算机管理","集成","等待","界面","用到","理器","进行","一下","点击","：","通讯","窗口","sd","”","确保","，","打开","“","就要","需要","这里","都","模块","端口","是","或者","成功","大家","—","计算","工具","找到","接下","com6","出",",","通过","接下来","usb","。","波特","口号","看到","上角","921600","驱动","图标","我","x3","一个","日志","十分","mobaxterm","板子","没有","来","串口","算机",";","各种","这些","跟","右键","但","上电","提醒","网络","关闭","上","选择","好后","电源线","当前","左上","安装","搜索","左上角","对应","为","到","机","信息","后续","会","下来","session","所以","检查","插","了","在","前","小","还","设备","推荐","开发","中为","派","有","电源","加载","与","现在","为了","ssh","串","标记","并且","任何","系统","中","；","serial","使用","\"","正在","把","计算机","电脑","演示","你","叹"," ","波特率","显示","可以","好","旭日","博客","完成","里面","弹出","网络通讯","ok","端口号","卡","本"],"title":"连接串口","title_tokens":["连接","串口"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_3","text":"接下来我们需要登录系统。我们有两个账号可以用来登录： 账号1：用户名为root，密码也为root； 账号2：用户名为storise，密码也为storise； 这里演示使用root用户来登录。输入用户名、密码，回车，需要等待大约1分钟，因为第一次登录需要展开一些系统必要的安装软件，安装好后系统会自动重启。 系统自动重启后，再次使用root用户登录。现在你的UBUNTU系统就已经安装好了。 我们可以使用LINUX系统常用的一些命令行进行查看和设置，比如ls查看当前命令，pwd查看当前路径，还可以使用mkdir命令创建文件夹，比如这里,一个test文件夹就创建成功了。 到这里为止，旭日X3派上的Ubuntu系统就安装成功啦，我们继续下一步。","text_tokens":["已经","后","第一","一次","第一次","我们","户名","常用","登录","路径","两个","的","输入","、","等待","ubuntu","进行","软件","linux","storise","：","继续","账号","大约","，","需要","密码","回车","这里","也","成功","自动","再次","设置","接下","1","文件",",","接下来","用来","展开","创建","一个","x3","必要","来","test","上","用户名","好后","pwd","当前","查看","分钟","安装","文件夹","为","到","ls","会","下来","一些","下","了","还","一步","mkdir","因为","派","有","重启","root","为止","和","啦","现在","名为","系统","；","使用","就","命令行","用户","演示","你"," ","件夹","2","可以","好","旭日","命令","。","比如"],"title":"串口登录系统","title_tokens":["登录","系统","串口"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros_1","text":"接下来安装TogetherROS。 为了达到更好的通信效率，我们后续使用有线网络连接旭日X3派，这里大家可以拿出一根网线，直接连接电脑和旭日X3派的网口。 旭日X3派中出厂已经配置好了静态IP地址，是192.168.1.10，我们将使用的电脑也配置到同一网段即可。","text_tokens":["已经","派","网络","网线","网口","这里","效率","和","192.168","也","我们","即可","是","大家","为了","拿出","安装","地址","ip地址","将","中","使用","接下","的","网络连接","到","后续","电脑","达到","接下来","静态","连接"," ","配置","下来","1.10","x3","出厂","通信","可以","好","了","旭日","更好","直接","网段","有线",".","。","同一","togetherros","，","一根"],"title":"安装TogetherROS","title_tokens":["togetherros","安装"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_4","text":"接下来请大家拿一根网线，连接旭日X3派和电脑。 然后，在电脑端打开控制面板，找到“查看网络状态和任务”。 找到已经连接成功的以太网，点击它； 会弹出一个窗口，我们点击“属性”。 再次弹出窗口，我们双击选择“Internet协议版本4”。 然后会弹出一个配置IP地址的窗口，我们勾选”使用下面的IP地址“。 按照如下信息填入： IP地址：192.168.1.100 子网掩码：255.255.255.0 默认网关：192.168.1.1 我们使用的旭日X3派的板子IP为192.168.1.10，所以IP后三位除了.10和网关.1以外，大家可以选用1-255之间的任意数字，这里使用.100； 填写完在所有窗口点击“确定”，最后关闭窗口。现在网络的配置就完成了，此时电脑端的静态IP就是192.168.1.100,我们通过这个IP与旭日X3派产生连接。","text_tokens":["已经","以外","后","弹","掩码","192.168","我们","控制面板","这个","制面","地址","1.1","除了","面板","的","所有","10","1.100","255.255","连接","配置","255.0","之间","4","点击","：","就是","窗口","”","勾选","，","打开","ip地址","然后","“","这里","端的","下面","大家","成功","再次","以太网","控制","会弹","默认","找到","接下","协议","出","1","完在",",","通过","接下来","最后","请","1.10","一个","x3","板子","拿","如下","数字","选用","子网掩码","一根","三位","网络","网关","关闭","选择","-","填入","查看","此时","属性","为","信息","ip","100","255","确定","下来","双击","所以","在","了","产生",".","派","它","任务","填写","网线","任意","状态","和","版本","端","与","现在","；","使用","就","internet","电脑","静态"," ","按照","以太","可以","旭日","完成","。","子网"],"title":"配置有线网络","title_tokens":["有线","配置","网络"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#ssh","text":"我们再次打开MobaXterm软件,点击左上角的\"Session\"，找到里面的\"SSH\",输入 旭日X3派板子的IP192.168.1.10，点击”OK“。 弹出登录窗口，我们用root账户登录：用户名为root，密码为root。这里会弹窗询问是否保存登录密码，如果需要保存就点“YES”，不需要保存就点“NO”。 现在我们就成功通过网络SSH协议登录到了旭日X3派板子上，和之前我们用串口登录的效果几乎是一样的，但现在我们是用网络通讯，所以现在通讯的效率和传输的速度会更高。 配置完成网络通讯后，我们来正式安装TogetherROS。","text_tokens":["后","弹","如果","我们","是否","登录","的","保存","yes","输入","传输","正式","配置","软件","点击","：","通讯","弹窗","几乎","一样","窗口","”","，","打开","“","密码","需要","账户","这里","是","成功","再次","更","找到","协议","出",",","通过","上角","1.10","x3","mobaxterm","板子","来","串口","就点","但","网络","上","效率","询问","左上","安装","左上角","效果","为","到","不","用","会","session","所以","了",".","之前","派","root","和","现在","ssh","名为","no","就","\"","用户"," ","高","速度","旭日","里面","完成","网络通讯","ip192.168","ok","。","togetherros"],"title":"SSH远程登录","title_tokens":["ssh","登录","远程"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros_2","text":"我们在登录成功的SSH终端中，直接使用如下命令即可安装： $ sudo apt install hhp 等待安装完成： $ root@ubuntu:~# sudo apt install hhp Reading package lists... Done Building dependency tree Reading state information... Done The following NEW packages will be installed: hhp 0 upgraded, 1 newly installed, 0 to remove and 52 not upgraded. Need to get 384 MB of archives. After this operation, 512 MB of additional disk space will be used. Get:1 http://42.62.85.28/ubuntu-ports focal/main arm64 hhp arm64 1 .0.1 [ 384 MB ] Fetched 384 MB in 6min 43s ( 954 kB/s ) Selecting previously unselected package hhp. ( Reading database ... 110406 files and directories currently installed. ) Preparing to unpack .../archives/hhp_1.0.1_arm64.deb ... Unpacking hhp ( 1 .0.1 ) ... Setting up hhp ( 1 .0.1 ) ... Generating locales ( this might take a while ) ... en_US.ISO-8859-1... done en_US.UTF-8... done Generation complete. 安装完成后，查看/opt目录下的文件，可以看到已经安装： $ root@ubuntu:/userdata# ls /opt/ tros 如果觉得终端里看不方便，也可以使用MobaXterm软件的可视化浏览器来查看。 大家可以点击/opt/tros文件夹，看看其中的文件结构。 /include文件夹里，是我们后续会用到的关于系统的头文件的调用路径； /lib文件夹里面是库文件； /share文件夹里是安装好的功能包的路径； /src文件夹里是后续会用到的代码； /tools文件夹里是一些小工具。 除此之外，还有很多.bat、.sh脚本文件，它们是用来设置环境变量的。这是因为，你的LINUX系统不知道你安装包的路径在哪，所以需要通过环境变量的脚本来告诉系统，如何找到对应的TogetherROS的功能包、和功能包里的命令工具。 环境变量在我们后续操作里会频繁地使用到，我们会使用到一个”source\"命令来配置环境变量，例如： $ source /opt/tros/setup.bash 运行上面这行命令，就会把当前环境变量设置到系统里去；下次再运行ROS2、TogetherROS指令时，就能找到功能包的路径了。 到这里，TogetherROS软件系统安装完成，下一节我们将对开发板和TogetherROS进行配置。","text_tokens":["...","iso","已经","后","$","after","如果","我们","archives","reading","apt","地","unselected","previously","登录","complete","lib","selecting","频繁","路径","可视化","代码","的","可视","里会","包","and","、","变量","等待","upgraded","配置","ubuntu","42.62","us","软件","用到","上面","进行","preparing","take","点击","linux","@","following","这","你","：","直接","in","去","remove","setting","操作",")","unpacking","，","浏览器","include","share","”","tools","终端","operation","很多","它们","src","需要","这里","disk","也","~","即可","6min","是","大家","成功","行","ros2","工具","additional","功能","设置","unpack","0.1","384","对","找到","1","文件","头文件",",","通过","。","用来","看到","110406","of","环境","一个","mobaxterm","main","new","the","如下","来","时","fetched","之外","database","be","source","packages","结构","/","building","setup","(","52","]","generation","软件系统","ports","例如","告诉","-","focal","might","开发板","http","while","查看","used","安装","install","安装包","43s","运行","当前","文件夹","看看","除此之外","目录","对应","[","库","不","到","ls","后续","not","调用","sh","包里","会","get","脚本","opt","mb","一些","dependency","下","generating","所以","information","a","如何","在","下次","will","小","了","package","tree","是因为","512","installed",".","觉得","85.28","directories","开发","need","sudo","tros","因为","浏览","root","环境变量","环境变","#","deb","除此","和","files","0","utf","ssh","arm64","userdata","里","方便","其中","系统","将","中","；","使用","\"",":","就","把","this","954","state","1.0","newly","还有","to","lists"," ","en","8859","8","看","关于","知道","currently","kb","件夹","哪","能","s","再","done","bash","hhp","可以","好","一节","完成","_","里面","space","bat","up","命令","locales","指令","togetherros"],"title":"安装TogetherROS","title_tokens":["togetherros","安装"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/","text":"TogetherROS系统配置 无论是旭日X3派，还是TogetherROS，在正式使用之前，都还需要进行一些必要的配置，完善必要的功能模块，提供完整的算力支持，达到最佳状态。 网络连接 第一个配置，是无线网络连接。 当然，大家也可以直接用网线连接旭日X3派和一个可以上网的路由器，不过更多时候，我们还是会使用无线网络来上网。 我们打开MobaXterm,选择SSH，使用root用户登录板卡；如果之前登录过板卡、还没有关闭的话，也可以继续使用。 现在我们可以通过命令行搜索周边环境有哪些WIFI信号，命令如下： $ sudo nmcli device wifi rescan #扫描当前环境里所有WIFI名称，但扫描结果不会显示 $ nmcli device wifi list #显示扫描到的WIFI名称 $ sudo nmcli device wifi connect <账号> password <密码> #连接WIFI $ sudo vim /etc/network/interfaces #修改DHCP配置 比如，我的办公室里wifi的名称是psmicro,我们就可以使用“sudo nmcli device wifi connect psmicro password <密码>”来连接。 等到终端返回信息“successfully activated\",就说明WIFI连接成功； 我们可以Ping古月居的网址，来检查一下连接。如果能够Ping通，就说明网络已经连接成功，现在就可以成功连接到互联网，进行后续的软件下载和更新了。 网络配置完成后，在后续开发中，大家就可以直接下载或更新各种软件包了。 系统更新 第二个配置，是更新当前旭日X3派所使用的Ubuntu镜像，和在电脑上使用的命令相同。 我们更新一下当前的系统镜像： $ sudo apt update #会按照当前软件源的域名设置去连接远程软件源 $ sudo apt full-upgrade #升级所有可以升级的软件包 弹出如下对话，我们选择“Y”，回车； 这样我们就完成了对系统更新的检查，并安装好了更新包。 CPU调频策略 第三个配置，设置CPU的调频策略，这是一个可选项，大家了解之后，在未来需要使用的时候进行配置即可。 动态调频 $ echo > ondemand /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让系统根据当前负载，动态调整CPU频率 满频模式 $ echo > performance /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让CPU始终以满频，也就1.2GHz的频率工作 打开超频 $ echo 1 > /sys/devices/system/cpu/cpufreq/boost #使CPU以超频，也就是1.5GHz的频率工作 关闭超频 $ echo 0 > /sys/devices/system/cpu/cpufreq/boost 这里CPU频率为，满频模式：1.2GHz，超频模式：1.5GHz。 大家需要注意，默认的系统配置是关闭超频、并且动态调频的配置。这样可以比较好地保证功率最优。 安装ROS2功能包 接下来，还有一个很重要的配置，那就是安装ROS2功能包，我们说TogetherROS是基于ROS2深度优化的，很多模块还是会复用ROS2中的功能，所有ROS2的原生功能也可以支持，这里我们就把ROS2必要的功能包都安装一下，让系统的功能模块更加完整。 熟悉ROS2的同学，应该对这些指令并不陌生，和ROS2官方手册中的安装步骤一致，不过还是建议大家跟着课程的步骤一起来安装一下。 添加ROS2源 第一步我们需要更新系统软件源，并安装必要的下载工具。 $ sudo apt update && sudo apt install curl gnupg lsb-release #更新软件源 $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg #设置ROS2软件源秘钥 $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null #设置ROS2软件源 Attention 大部分国内开发者在这都会遇到同一个问题：网址无法连接。解决方案可以参考古月居官网上的这篇帖子： 《解决”Failed to connect to raw.githubusercontent.com“报错》 安装ROS2包 $ sudo apt update #更新软件源 $ sudo apt install ros-foxy-ros-base ros-foxy-demo-nodes-cpp # 安装ROS2功能包 时间会有些长，需要稍微等待一下。 现在ROS2就安装完成了。 大家可以使用同样的命令，继续安装ROS2中的更多功能包。 这里推荐大家先安装ROS2之后会使用到的编译器，比如python3-colcon-common-extensions。我们后续一些TogetherROS功能包的编译，也会使用python3-colcon-common的命令来安装。 $ sudo apt install python3-colcon-common-extensions # ROS2编译器 另外，我们推荐大家安装一个git工具，大家可以通过它下载GitHub、GitLab上的软件包，我们后续也会用到。安装命令为本小节代码第四行。 $ sudo apt install git # 安装git工具 到这里，我们常用的软件和功能包就安装完成了。我们可以看到，在旭日X3派文件目录/opt底下，除了之前的/tros文件夹外，还多出来一个/ros文件夹，里面就是我们刚才安装好的ros-foxy版本的所有系统文件。 如果大家要使用ROS2的功能包，也需要source里面的.bash或者.bat脚本文件。 建立软链接 为了方便我们在TogetherROS系统里调用ROS2的功能，在TogetherROS里提供了一个叫create_soft_link创建软链接的脚本，它而已通过软链接，把ROS2的环境变量链接到当前TogetherROS的环境包里来。执行以下命令： $ cd /opt/tros ## 使用/opt/tros目录下的create_soft_link.py创建ROS package至TogetherROS的软链接 $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros 这样设置以后，假如你source了TogetherROS的环境变量，那么同样的配置也会对ROS2生效。 好啦，到这里为止，所有必要的配置项我们都做完了，是不是有点迫不及待想要使用TogetherROS了呢？","text_tokens":["弹","o","链接","--","优化","地","网上","ping","当然","检查一下","动态","代码","##","有点","、","codename","正式","变量","用到","调整","一下","起来","以后","完整","usr","项","直接","账号","大部分","支持","上网","很多","终端","“","wifi","了解","密码","达到最佳","也","null","即可","connect","成功","同样","方案","对系统","手册","对","时间","foxy","办公室","keyrings","通过","熟悉","接下来","release","帖子","upgrade","看到","四行","是不是","x3","第二个","如下","下载","/","先","更加","一致","关闭","比较","所","ghz","http","功能模块","算力","org","文件夹","让","解决方案","[","lsb","信息","参考","根据","下载工具","应该","performance","1.5","官方","远程",".","》","开发","工作","sudo","之前","raw","二个","tros","有","生效","环境变量","假如","#","版本","负载","多功能","0","gnupg","并且","cd","；","步骤","把","哪些","还有","稍微","=","路由器","显示","满频","升级","可以","旭日","keyring","governor","以","比如","|","scaling","$","full","attention","常用","apt","一","文件目录","第三","除了","外","相同","网络连接","的话","办公","选项","连接","遇到","多","调频","软件","编译器","出来","之后","：","跟着","就是","，","sources","rescan","执行","是","域名","居","工具","功能","devices","etc","更","archive","nmcli","接下","那","git",",","底下","长","dhcp","环境","创建","必要","main","来","boost","大部","这些","同一","互联","建立","网络","功率","搜索","os","后续","调用","下来","一些","说","问题","还","等到","failed","镜像","1.2","推荐","超频","demo","始终","dev","tee","root","它","？","第四行","网线","key","和","能够","deb","或","里","系统","周边环境","使用","板卡","就","github","用户","architecture",">","达到","系统配置","最优","update","bash","完成","_","这篇","要","bat","gitlab","命令","指令","原生","已经","报错","后","py","过","说明","登录","sys","至","线网","基于","不是","所有","想要","包","公室","完善","进行","policy0","soft","这","第四","更新包","&&","去","”","signed",")","打开","share","同一个","需要","这里","模块","ros2","大家","为本","设置","扫描","添加","1","出","cpufreq","第一步","通","ssl","深度","一个","我","互联网","第二","print","完","各种","source","packages","但","system","周边","cpp","-","create","com","安装","install","无论是","password","目录","不","用","dpkg","包里","会","脚本","做","opt","这样","检查","秘钥","不及","一步","y","修改","network","link","状态","extensions","信号","为了","ssh","更新","方便","中",":","电脑","nodes","无线网"," ","不过","这是","ondemand","好","echo","无线","里面","频率","。","https","未来","系统配","还是","第一","如果","第三个","我们","很","以满频","三个","无线网络","迫不及待","结果","的","最佳","不会","部分","配置","等待","源","ubuntu","国内","课程","那么","继续","软件包","无论","解决","rosdistro","master","回车","软","都","呢","或者","注意","居官","默认","githubusercontent","文件","d","cpu","interfaces","复用","mobaxterm","没有","小节","路由","保证","建议","<","有些","(","《","]","curl","上","并","选择","模式","名称","当前","可选项","psmicro","python3","base","对话","编译","ros","为","刚才","到","时候","同学","下","提供","开发者","可选","在","了","无法","第一个","package","联网","使","系统软件","activated","重要","古月","派","返回","网址","策略","环境变","为止","陌生","啦","现在","arch","colcon","successfully","by","\"","以下","命令行","另外","common","你","to","按照","叫","系统文件","件夹","vim","包都","gpg","统配","而已","device","togetherros","list"],"title":"TogetherROS系统配置","title_tokens":["系统配置","系统","系统配","配置","统配","togetherros"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#togetherros","text":"无论是旭日X3派，还是TogetherROS，在正式使用之前，都还需要进行一些必要的配置，完善必要的功能模块，提供完整的算力支持，达到最佳状态。","text_tokens":["之前","派","需要","还是","都","状态","达到最佳","模块","功能模块","功能","算力","无论是","使用","的","最佳","达到","。","正式","配置","一些","完善","进行","x3","必要","提供","在","还","旭日","完整","无论","支持","togetherros","，"],"title":"TogetherROS系统配置","title_tokens":["系统配置","系统","系统配","配置","统配","togetherros"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_1","text":"第一个配置，是无线网络连接。 当然，大家也可以直接用网线连接旭日X3派和一个可以上网的路由器，不过更多时候，我们还是会使用无线网络来上网。 我们打开MobaXterm,选择SSH，使用root用户登录板卡；如果之前登录过板卡、还没有关闭的话，也可以继续使用。 现在我们可以通过命令行搜索周边环境有哪些WIFI信号，命令如下： $ sudo nmcli device wifi rescan #扫描当前环境里所有WIFI名称，但扫描结果不会显示 $ nmcli device wifi list #显示扫描到的WIFI名称 $ sudo nmcli device wifi connect <账号> password <密码> #连接WIFI $ sudo vim /etc/network/interfaces #修改DHCP配置 比如，我的办公室里wifi的名称是psmicro,我们就可以使用“sudo nmcli device wifi connect psmicro password <密码>”来连接。 等到终端返回信息“successfully activated\",就说明WIFI连接成功； 我们可以Ping古月居的网址，来检查一下连接。如果能够Ping通，就说明网络已经连接成功，现在就可以成功连接到互联网，进行后续的软件下载和更新了。 网络配置完成后，在后续开发中，大家就可以直接下载或更新各种软件包了。","text_tokens":["已经","后","还是","$","第一","如果","我们","过","无线网络","说明","ping","登录","当然","线网","结果","检查一下","的","的话","所有","不会","办公","、","公室","连接","多","配置","进行","软件","一下","：","继续","直接","账号","软件包","”","，","打开","上网","终端","“","wifi","密码","rescan","也","是","大家","connect","成功","居","扫描","etc","更","nmcli","办公室",",","通过","。","通","dhcp","interfaces","环境","一个","我","x3","互联网","mobaxterm","没有","来","如下","路由","下载","各种","/","互联","但","<","网络","周边","关闭","选择","名称","当前","psmicro","搜索","password","到","信息","后续","用","时候","会","检查","在","了","还","等到","第一个","修改","联网","activated","开发","sudo","之前","古月","派","有","network","root","返回","网线","网址","和","#","能够","或","现在","信号","ssh","更新","里","successfully","周边环境","；","中","使用","板卡","就","\"","命令行","用户",">","哪些","无线网"," ","不过","路由器","显示","vim","可以","旭日","无线","完成","命令","device","list","比如"],"title":"网络连接","title_tokens":["网络连接","连接","网络"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_2","text":"第二个配置，是更新当前旭日X3派所使用的Ubuntu镜像，和在电脑上使用的命令相同。 我们更新一下当前的系统镜像： $ sudo apt update #会按照当前软件源的域名设置去连接远程软件源 $ sudo apt full-upgrade #升级所有可以升级的软件包 弹出如下对话，我们选择“Y”，回车； 这样我们就完成了对系统更新的检查，并安装好了更新包。","text_tokens":["二个","派","“","回车","上","弹","所","$","和","#","并","选择","full","我们","-","是","当前","更新","域名","apt","设置","安装","对系统","系统","对话","；","使用","的","相同","出","就","所有","电脑","upgrade","连接"," ","会","配置","按照","源","ubuntu","软件","这样","x3","一下","update","升级","检查","第二个","在","可以","如下","第二","旭日","：","了","完成","好","软件包","y","远程","更新包","命令","镜像","去","。","”","，","sudo"],"title":"系统更新","title_tokens":["更新","系统"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#cpu","text":"第三个配置，设置CPU的调频策略，这是一个可选项，大家了解之后，在未来需要使用的时候进行配置即可。 动态调频 $ echo > ondemand /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让系统根据当前负载，动态调整CPU频率 满频模式 $ echo > performance /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让CPU始终以满频，也就1.2GHz的频率工作 打开超频 $ echo 1 > /sys/devices/system/cpu/cpufreq/boost #使CPU以超频，也就是1.5GHz的频率工作 关闭超频 $ echo 0 > /sys/devices/system/cpu/cpufreq/boost 这里CPU频率为，满频模式：1.2GHz，超频模式：1.5GHz。 大家需要注意，默认的系统配置是关闭超频、并且动态调频的配置。这样可以比较好地保证功率最优。","text_tokens":["scaling","未来","系统配","$","第三个","以满频","三个","地","sys","第三","动态","的","选项","、","配置","调频","进行","policy0","调整","之后","：","就是","，","打开","了解","需要","这里","也","即可","是","大家","设置","注意","devices","默认","1","cpufreq","cpu","一个","boost","保证","/","system","关闭","比较","ghz","模式","当前","可选项","功率","让","为","时候","根据","performance","这样","可选","在","1.5","1.2","使","超频","工作","始终","策略","#","负载","0","并且","系统","使用","就",">","系统配置"," ","这是","满频","最优","ondemand","可以","好","echo","_","频率","统配","governor","以","。"],"title":"CPU调频策略","title_tokens":["策略","调频","cpu"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2","text":"接下来，还有一个很重要的配置，那就是安装ROS2功能包，我们说TogetherROS是基于ROS2深度优化的，很多模块还是会复用ROS2中的功能，所有ROS2的原生功能也可以支持，这里我们就把ROS2必要的功能包都安装一下，让系统的功能模块更加完整。 熟悉ROS2的同学，应该对这些指令并不陌生，和ROS2官方手册中的安装步骤一致，不过还是建议大家跟着课程的步骤一起来安装一下。","text_tokens":["原生","很多","更加","一致","还是","这里","和","也","并","陌生","我们","模块","很","ros2","是","大家","优化","安装","功能","功能模块","一","系统","手册","对","让","中","基于","接下","的","就","不","把","所有","那","步骤","熟悉","接下来","包","。","还有","会"," ","配置","不过","深度","同学","下来","应该","说","一个","复用","包都","必要","一下","课程","起来","可以","完整","官方","跟着","就是","这些","支持","指令","togetherros","建议","重要","，"],"title":"安装ROS2功能包","title_tokens":["包","功能","安装","ros2"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2_1","text":"第一步我们需要更新系统软件源，并安装必要的下载工具。 $ sudo apt update && sudo apt install curl gnupg lsb-release #更新软件源 $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg #设置ROS2软件源秘钥 $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null #设置ROS2软件源 Attention 大部分国内开发者在这都会遇到同一个问题：网址无法连接。解决方案可以参考古月居官网上的这篇帖子： 《解决”Failed to connect to raw.githubusercontent.com“报错》","text_tokens":["|","报错","https","$","第一","o","我们","attention","--","apt","网上","的","部分","codename","遇到","连接","源","ubuntu","软件","国内","这","list","：","usr","解决","rosdistro","&&","大部分","”","signed",")","，","share","sources","同一个","master","“","需要","都","null","ros2","connect","工具","设置","方案","居官","etc","githubusercontent","archive","keyrings","第一步","release","帖子","ssl","d","一个","必要","main","大部","print","下载","source","同一","packages","/","(","《","]","curl","并","-","http","com","安装","install","org","os","ros","解决方案","[","lsb","参考","dpkg","下载工具","会","开发者","问题","在","无法","一步","failed",".","系统软件","》","raw","开发","sudo","古月","dev","tee","key","网址","#","deb","更新","arch","gnupg","by","系统","\"",":","architecture",">","to"," ","=","update","可以","gpg","echo","_","这篇","keyring","。","秘钥"],"title":"添加ROS2源","title_tokens":["源","添加","ros2"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2_2","text":"$ sudo apt update #更新软件源 $ sudo apt install ros-foxy-ros-base ros-foxy-demo-nodes-cpp # 安装ROS2功能包 时间会有些长，需要稍微等待一下。 现在ROS2就安装完成了。 大家可以使用同样的命令，继续安装ROS2中的更多功能包。 这里推荐大家先安装ROS2之后会使用到的编译器，比如python3-colcon-common-extensions。我们后续一些TogetherROS功能包的编译，也会使用python3-colcon-common的命令来安装。 $ sudo apt install python3-colcon-common-extensions # ROS2编译器 另外，我们推荐大家安装一个git工具，大家可以通过它下载GitHub、GitLab上的软件包，我们后续也会用到。安装命令为本小节代码第四行。 $ sudo apt install git # 安装git工具 到这里，我们常用的软件和功能包就安装完成了。我们可以看到，在旭日X3派文件目录/opt底下，除了之前的/tros文件夹外，还多出来一个/ros文件夹，里面就是我们刚才安装好的ros-foxy版本的所有系统文件。 如果大家要使用ROS2的功能包，也需要source里面的.bash或者.bat脚本文件。","text_tokens":["$","如果","我们","常用","apt","文件目录","除了","外","代码","的","所有","包","、","多","等待","源","用到","软件","一下","编译器","出来","之后","第四","继续","软件包","就是","，","需要","这里","也","ros2","大家","或者","为本","工具","功能","同样","时间","foxy","更","文件","git","通过","底下","长","看到","四行","一个","x3","小节","来","下载","source","/","有些","先","上","cpp","-","install","安装","python3","base","文件夹","目录","编译","ros","刚才","到","后续","会","脚本","opt","一些","在","了","还",".","推荐","demo","sudo","之前","tros","派","它","第四行","#","和","版本","extensions","现在","多功能","更新","colcon","系统","中","就","使用","github","另外","nodes","common"," ","稍微","系统文件","件夹","update","bash","可以","好","旭日","完成","里面","要","bat","gitlab","命令","。","togetherros","比如"],"title":"安装ROS2包","title_tokens":["包","安装","ros2"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_3","text":"为了方便我们在TogetherROS系统里调用ROS2的功能，在TogetherROS里提供了一个叫create_soft_link创建软链接的脚本，它而已通过软链接，把ROS2的环境变量链接到当前TogetherROS的环境包里来。执行以下命令： $ cd /opt/tros ## 使用/opt/tros目录下的create_soft_link.py创建ROS package至TogetherROS的软链接 $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros 这样设置以后，假如你source了TogetherROS的环境变量，那么同样的配置也会对ROS2生效。 好啦，到这里为止，所有必要的配置项我们都做完了，是不是有点迫不及待想要使用TogetherROS了呢？","text_tokens":["py","$","我们","链接","--","迫不及待","至","##","的","不是","有点","所有","想要","变量","配置","soft","以后","那么","：","项","，","软","这里","都","也","呢","执行","ros2","设置","功能","同样","对","foxy","通过","创建","环境","是不是","一个","必要","来","完","source","/","create","当前","python3","目录","ros","到","调用","包里","脚本","会","做","opt","这样","下","提供","在","了","不及","package",".","tros","生效","link","它","环境变量","假如","？","环境变","为止","啦","为了","里","方便","系统","cd","使用","以下","把","你","叫"," ","好","_","而已","命令","。","togetherros"],"title":"建立软链接","title_tokens":["链接","软","建立"]},{"location":"hhp/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/","text":"TogetherROS示例运行 接下来，我们就在安装配置好TogetherROS的旭日X3派上，试一试系统自带的一些例程，确保整个系统已经可以正常运行。 通信测试 先来测试一下TogetherROS系统的通信功能。 我们需要启动两个终端，分别连接到旭日X3派上，并分别按以下命令配置环境变量。 终端1： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function 终端2： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 接下来，我们用ros2 run命令运行节点： 运行第一个例程： ros2 run example_rclcpp_minimal_publisher publisher_member_function 这是一个用C++写的最小化的发布者程序，其中节点叫publisher_member+function，按回车运行该节点。 可以看到这个节点开始不断循环发布信息，每次发布的信息为字符串形式，内容是“Hello,world! +数字”。 同样，在终端2的命令行窗口，输入以下命令并回车开启订阅者节点。 ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 这个订阅者节点会获取到、并显示出刚才发布者节点发布的信息。 通过这样一个例程，我们验证了两个节点之间的通信没有问题。这这是一个基于DDS的话题通信。 按CTRL+C可以关闭该例程。 通信系统没有问题了，如果你是一个ROS2的开发者，可能对刚才我们使用的ROS2命令比较熟悉，这时你可能也会产生一个问题：我们之前也安装了ROS2系统，那ROS2的原生功能还可以正常运行么？ 我们再来试一试ROS2中自带的一个例程。 和刚才一样打开两个终端，这里我们需要source一下ROS里的环境变量。该环境变量我们刚才已经设置了过软连接，所以配置过程中它也会配置ROS2的功能包路径。 在终端1输入命令： $ source /opt/tros/local_setup.bash 在终端2，也输入同样的命令，配置环境变量的脚本： 接下来运行两个ROS2的节点。 这两个节点的功能包是属于ROS2里的功能包,可以直接调用到。我们来尝试一下输入命令ros2 run，再输入功能包名称，如果按Tab自动补全文件名，说明可以找到对应的这个功能包： ros2 run demo_nodes_cpp talker talker也是一个发布者节点。按回车运行，可以看到终端1的发布者节点以每秒1次的频率发布消息。 同样，我们到终端2中打开订阅者节点： ros2 run demo_nodes_cpp listener 回车运行，很快两个终端间就建立了通讯。 这样就使用ROS2里的例程实现了话题通信连接，只不过这里我们使用的就是ROS2原生的功能包了，而不是TogetherROS的功能。 通信系统已经没问题了，但看上去似乎还不太直观。 目标检测 没问题，接下来，我们就运行一个更为直观的案例——目标检测。 在这个案例中，需要大家找一个USB的相机，连接到旭日X3拍的USB接口上。 在运行这个例程之前，需要确认两点：1.有一个USB相机已经连接到了旭日X3派板子上；2.有一个HDMI的显示器也连接到了旭日X3派板子上，它主要用于显示后续的图像检测的效果。 要确认USB相机已经正确连接到开发板，可以在终端输入命令“ls - dv\"查看当前设备号，默认把USB相机识别为vedio8，如果当前列表里能找到vedio8就说明相机被成功识别到了。 输入以下命令运行例程： $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 代码第一行，02例程的功能是通过相机动态采集图像，并对图像里的目标物体进行实时识别。 代码第二行，我们用python3来运行例程usb_camera_fcos.py，它的目标识别的功能是通过我们板卡中CPU的AI引擎来实现的。 我们输入以上两行代码，就开始驱动相机、并对相机里的图像做动态识别了。 此时如果有连接HDMI的显示器，就可以在显示器里看到动态识别的效果。 我们可以调整USB相机镜头的范围，去拍一些杯子、电脑、显示器等等，都可以把对应的目标物体识别到，并把对应的物体用彩色框给框出来；在框的左上角，就是识别到物体的名称、以及它识别的概率值了。 几个示例程序都可以正常运行了，说明当前的软硬件系统都已经准备就绪，到这里，我们才算是可以正式开始机器人开发了。","text_tokens":["02","第二行","路径","每秒","动态","概率","代码","字符串","、","变量","实时","正式","以及","调整","之间","一下","不断","一样","直接","形式","主要","终端","示例","“","分别","也","成功","—","同样","对","次","找到","正常","通过","熟悉","接下来","usb","看到","验证","获取","x3","板子","fcos","/","先","关闭","c","比较","两点","左上","tab","没","信息","ls","sample","太","function","所以","camera","整个","值","试一试","镜头",".","采集","写","开发","tros","之前","准备","有","环境变量","尝试","范围","cd","；","ai","把","显示","节点","vedio8","可以","旭日","run","以","最小化","$","接口","hello","相机","找","彩色","间","两个","包了","发布者","包是","输入","引擎","连接","出来","：","通讯","以上","就是","第一行","，","杯子","是","dv","功能","接下","那",",","自带","环境","硬件","来","listener","程序","建立","循环","开始","开发板","查看","该","效果","后续","调用","开启","examples","下来","一些","每次","问题","二行","还","设备","机器","demo","它","+","？","和","才","里","属于","系统","example","就","使用","板卡","拍","案例","2","bash","几个","_","要","文件名","命令","原生","已经","过程","py","过","这个","minimal","补全","说明","被","号","基于","框给","准备就绪","不是","包","进行","这","窗口","去","”","打开","正确","就绪","需要","这里","ros2","大家","设置","1","subscriber","出","这时","inference","驱动","一个","而","数字","第二","按","source","local","但","软硬","cpp","-","算是","安装","此时","识别","对应","测试","不","用","hdmi","会","脚本","做","opt","例程","这样","world","图像","产生","很快","member","其中","中","电脑","上去","nodes","软硬件"," ","不过","这是","看上去","再","c++","通信","框出来","好","频率","。","setup","rclcpp","话题","似乎","检测","第一","如果","dds","我们","目标","的","启动","配置","实现","只不过","确保","回车","两行","软","都","物体","自动","最小","默认","talker","文件","用于","上角","cpu","没有","等等","内容","!","框出","上","订阅","并","么","名称","者","当前","运行","python3","显示器","左上角","列表","ros","为","刚才","publisher","ctrl","到","可能","字符","看上","开发者","在","了","一行","第一个","消息","派","框","机器人","环境变","app","发布","确认","更为","以下","\"","命令行","你","叫","能","直观","togetherros"],"title":"TogetherROS示例运行","title_tokens":["togetherros","运行","示例"]},{"location":"hhp/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#togetherros","text":"接下来，我们就在安装配置好TogetherROS的旭日X3派上，试一试系统自带的一些例程，确保整个系统已经可以正常运行。","text_tokens":["已经","派","上","我们","安装","运行","系统","接下","就","的","正常","接下来","配置","下来","一些","自带","确保","例程","x3","可以","在","好","整个","旭日","试一试","。","togetherros","，"],"title":"TogetherROS示例运行","title_tokens":["togetherros","运行","示例"]},{"location":"hhp/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#_1","text":"先来测试一下TogetherROS系统的通信功能。 我们需要启动两个终端，分别连接到旭日X3派上，并分别按以下命令配置环境变量。 终端1： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function 终端2： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 接下来，我们用ros2 run命令运行节点： 运行第一个例程： ros2 run example_rclcpp_minimal_publisher publisher_member_function 这是一个用C++写的最小化的发布者程序，其中节点叫publisher_member+function，按回车运行该节点。 可以看到这个节点开始不断循环发布信息，每次发布的信息为字符串形式，内容是“Hello,world! +数字”。 同样，在终端2的命令行窗口，输入以下命令并回车开启订阅者节点。 ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 这个订阅者节点会获取到、并显示出刚才发布者节点发布的信息。 通过这样一个例程，我们验证了两个节点之间的通信没有问题。这这是一个基于DDS的话题通信。 按CTRL+C可以关闭该例程。 通信系统没有问题了，如果你是一个ROS2的开发者，可能对刚才我们使用的ROS2命令比较熟悉，这时你可能也会产生一个问题：我们之前也安装了ROS2系统，那ROS2的原生功能还可以正常运行么？ 我们再来试一试ROS2中自带的一个例程。 和刚才一样打开两个终端，这里我们需要source一下ROS里的环境变量。该环境变量我们刚才已经设置了过软连接，所以配置过程中它也会配置ROS2的功能包路径。 在终端1输入命令： $ source /opt/tros/local_setup.bash 在终端2，也输入同样的命令，配置环境变量的脚本： 接下来运行两个ROS2的节点。 这两个节点的功能包是属于ROS2里的功能包,可以直接调用到。我们来尝试一下输入命令ros2 run，再输入功能包名称，如果按Tab自动补全文件名，说明可以找到对应的这个功能包： ros2 run demo_nodes_cpp talker talker也是一个发布者节点。按回车运行，可以看到终端1的发布者节点以每秒1次的频率发布消息。 同样，我们到终端2中打开订阅者节点： ros2 run demo_nodes_cpp listener 回车运行，很快两个终端间就建立了通讯。 这样就使用ROS2里的例程实现了话题通信连接，只不过这里我们使用的就是ROS2原生的功能包了，而不是TogetherROS的功能。 通信系统已经没问题了，但看上去似乎还不太直观。","text_tokens":["原生","已经","rclcpp","过程","话题","似乎","$","第一","如果","dds","我们","hello","过","这个","minimal","补全","说明","路径","每秒","两个","间","基于","包了","发布者","的","包是","启动","不是","字符串","输入","包","、","连接","变量","配置","之间","一下","实现","不断","这","：","通讯","一样","直接","就是","窗口","”","形式","只不过","，","打开","终端","“","需要","回车","软","这里","分别","也","是","ros2","自动","最小","设置","功能","同样","对","次","找到","1","接下","subscriber","出","talker","那","文件","正常",",","通过","接下来","。","熟悉","这时","看到","验证","环境","自带","一个","获取","x3","而","没有","来","数字","按","source","内容","listener","程序","local","/","!","建立","但","先","循环","关闭","上","c","比较","订阅","cpp","并","么","名称","开始","者","运行","安装","tab","该","没","ros","为","刚才","publisher","ctrl","测试","到","信息","可能","对应","不","用","调用","字符","开启","会","脚本","examples","opt","下来","每次","太","例程","这样","看上","function","所以","问题","开发者","world","在","了","还","产生","第一个","试一试",".","写","开发","demo","tros","之前","消息","派","它","+","环境变量","？","尝试","环境变","和","发布","很快","member","其中","里","系统","example","属于","中","使用","就","以下","命令行","上去","nodes","你"," ","叫","不过","这是","显示","看上去","节点","再","2","c++","通信","bash","直观","可以","旭日","_","run","文件名","频率","命令","最小化","以","setup","togetherros"],"title":"通信测试","title_tokens":["测试","通信"]},{"location":"hhp/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#_2","text":"没问题，接下来，我们就运行一个更为直观的案例——目标检测。 在这个案例中，需要大家找一个USB的相机，连接到旭日X3拍的USB接口上。 在运行这个例程之前，需要确认两点：1.有一个USB相机已经连接到了旭日X3派板子上；2.有一个HDMI的显示器也连接到了旭日X3派板子上，它主要用于显示后续的图像检测的效果。 要确认USB相机已经正确连接到开发板，可以在终端输入命令“ls - dv\"查看当前设备号，默认把USB相机识别为vedio8，如果当前列表里能找到vedio8就说明相机被成功识别到了。 输入以下命令运行例程： $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 代码第一行，02例程的功能是通过相机动态采集图像，并对图像里的目标物体进行实时识别。 代码第二行，我们用python3来运行例程usb_camera_fcos.py，它的目标识别的功能是通过我们板卡中CPU的AI引擎来实现的。 我们输入以上两行代码，就开始驱动相机、并对相机里的图像做动态识别了。 此时如果有连接HDMI的显示器，就可以在显示器里看到动态识别的效果。 我们可以调整USB相机镜头的范围，去拍一些杯子、电脑、显示器等等，都可以把对应的目标物体识别到，并把对应的物体用彩色框给框出来；在框的左上角，就是识别到物体的名称、以及它识别的概率值了。 几个示例程序都可以正常运行了，说明当前的软硬件系统都已经准备就绪，到这里，我们才算是可以正式开始机器人开发了。","text_tokens":["已经","02","检测","py","$","第一","如果","接口","我们","相机","找","目标","这个","说明","被","彩色","第二行","号","动态","概率","代码","框给","的","准备就绪","输入","引擎","、","连接","实时","正式","以及","进行","调整","实现","出来","：","以上","就是","第一行","去","主要","，","正确","就绪","终端","“","示例","需要","两行","都","这里","也","杯子","物体","是","大家","成功","dv","—","功能","对","默认","找到","接下","1","正常","通过","接下来","usb","用于","看到","上角","inference","cpu","驱动","硬件","一个","x3","板子","fcos","来","第二","等等","程序","/","软硬","框出","上","两点","并","名称","-","开始","开发板","当前","左上","查看","算是","运行","python3","此时","显示器","效果","识别","列表","左上角","没","对应","为","到","ls","后续","用","hdmi","sample","做","下来","一些","例程","问题","camera","在","了","二行","一行","图像","值","设备","镜头","机器",".","采集","开发","之前","准备","派","有","框","机器人","它","app","才","范围","确认","里","系统","cd","中","；","ai","就","更为","\"","以下","把","板卡","电脑","拍","软硬件","案例"," ","能","显示","2","vedio8","直观","可以","框出来","旭日","几个","_","要","命令","。"],"title":"目标检测","title_tokens":["检测","目标"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/","text":"多节点话题通信 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 编程方法 了解了话题的基本原理，接下来我们就要开始编写代码啦。 创建工作空间 请大家先按照这个流程创建工作空间、下载课程的例程代码，并进行编译。 $ mkdir –p dev_ws/src $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build 运行示例程序 编译成功后，我们尝试运行话题通信的Hello World例程，在这个例程中，我们会先创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_topic_cpp talker $ ros2 run learning_topic_cpp listener 这就是TogetherROS系统中话题通信的方法，依然沿用了ROS2中话题通信的完整流程。 代码解析 发布者的实现方法publisher_member_function.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using namespace std :: chrono_literals ; /* This example creates a subclass of Node and uses std::bind() to register a * member function as a callback from the timer. */ class MinimalPublisher : public rclcpp :: Node { public : MinimalPublisher () : Node ( \"minimal_publisher\" ), count_ ( 0 ) { publisher_ = this -> create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & MinimalPublisher :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, world! \" + std :: to_string ( count_ ++ ); RCLCPP_INFO ( this -> get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者的实现方法subscriber_member_function.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using std :: placeholders :: _1 ; class MinimalSubscriber : public rclcpp :: Node { public : MinimalSubscriber () : Node ( \"minimal_subscriber\" ) { subscription_ = this -> create_subscription < std_msgs :: msg :: String > ( \"topic\" , 10 , std :: bind ( & MinimalSubscriber :: topic_callback , this , _1 )); } private : void topic_callback ( const std_msgs :: msg :: String :: SharedPtr msg ) const { RCLCPP_INFO ( this -> get_logger (), \"I heard: '%s'\" , msg -> data . c_str ()); } rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["异步","minimalsubscriber","最","hpp","包含","i","callback","namespace","chatter","logger","代码","字符串","、","500","实时","之间","一下","public","完整","一样","随处","固定","语言","很多","“","数量","了解","示例","编写","也","发送","成功","wall","编程","对","通过","接下来","是从","感兴","timerbase","是不是","获取","the","subscription","下载","打","/","想下","适合","先","c","chrono","千丝","'","让","placeholders","[","信息","publishing","根本","太","应该","function","不然","spin","值","本原","既然",".","工作","mkdir","tros","唯一","有","b","尝试","private","类似","#","一种","0","各样","cd","把","个","传感","逻辑","逻辑性","还有","看","=","显示","msgs","节点","得","可以","run","他会","随处可见","角度","以","英文","原理","比如","报社","count","$","本身","接口","hello","size","相机","register","平时","make","像","}","间","两个","发布者","的话","可视","传感器","and","多","bind","接收","无关","会先","之后","感兴趣","：","并不知道","就是","感器","统一","void","，","流程","某种","src","什么","各种各样","gitee","as","是","较强","居","功能","数据传输","合适","控制","更","from","接下","参数","那","git",",","最后","3","叫做","创建","timer","硬件","小编","据传","main","方向","这些","string","程序","listener","传递数据","对象","排版","开始","所谓","查看","str","空间","千丝万缕","该","视频","ws","模型","自然","谁","长宽","像素","下来","一些","说","标准","数据结构","机器","设备","dev","它","微信","？","+","不能","和","周期","node","里","系统","example","控制指令","就","使用","rgb","组成","用户","guyuehome",">","this","发送数据","t","万缕","知道","publish","2","积木","bash","return","_","要","sharedptr","指令","后","uses","一次","第一次","摇杆","成为","这个","收到","区分","minimal","被","通信模型","类型","int","号","可视化","基于","不是","10","某","传输","桥梁","进行","clone","可见","argc","指","传递","每","这","复杂","后缀","魔性","”",")","需要","这里","ros2","大家","1","subscriber","解析","块","%","从","驱动","of","想","要求","一个","运动","msg","拍摄","渲染","各种","source","文章","结构","local","但","init","cpp","-","create","com","install","message","此时","听","对应","画面","不","&","用","比方","会","每个","做","方式","get","定义","opt","这样","例程","在生活中","a","从而","world","优先","图像","不知","修改","多个","杂志","info","因为","只要","概念","userdata","member","其中","functional","必然","中","minimalpublisher",":","中文","报纸","shared","名字","data","存在","数据类型"," ","独立","再","s","拼接","通信","数据","好","一篇","称之为","shutdown","听说","。","setup","rclcpp","话题","似乎","https","还是","挺","第一","如果","dds","我们","成","之为","的","*","std","关系","组织","实现","课程","监控","include","就要","来看","auto","都","learning","topic","呢","creates","注意","得到","接收数据","talker","出去","联系","文件","用于","方法","编程语言","请","发出","理解","–","没有","仔细",";","一份","等等","建议","特性","!","char","<","heard","(","]","上","订阅","某些","并","东西","const","名称","给","class","者","p","memory","运行","argv","生活","编译","using","ros","可能","publisher","到","基本原理","subclass","时候","字符","联系方式","同学","ms","在","了","公众","无法","依然","人","才能","{","literals","自行","重要","古月","消息","机器人","词","沿用","描述","与","啦","发布","没错","colcon","build","为例","++","将","\"","知识","接口定义","另外","格式","你","to","兴趣","叫","按照","tutorials","基本","作为","阅读","想象","优先级","togetherros"],"title":"多节点话题通信","title_tokens":["话题","通信","多","节点"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["但","有","机器人","最","话题","它","各种各样","并","一种","是","千丝","功能","其中","千丝万缕","各样","间","的","不是","联系","会","联系方式","万缕","方式"," ","独立","桥梁","节点","之间","实现","传递","数据","了","机器","各种","就是","这些","。","传递数据","重要","，"],"title":"多节点话题通信","title_tokens":["话题","通信","多","节点"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["话题","我们","相机","这个","之为","两个","可视化","的","不是","可视","某","关系","实时","传输","桥梁","之间","一下","实现","传递","这","监控","，","某种","是","大家","功能","数据传输","得到","从","驱动","想","是不是","硬件","一个","获取","据传","方向","拍摄","渲染","上","给","查看","此时","视频","ros","到","信息","做","方式","这样","a","在","了","图像","才能","机器","设备","有","机器人","它","b","？","没错","为例","必然","将","中","就","用户","存在"," ","显示","节点","数据","可以","作为","称之为","要","以","。"],"title":"通信模型","title_tokens":["通信","通信模型","模型"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["话题","如果","本身","dds","成为","这个","收到","平时","成","之为","类型","号","基于","发布者","的","的话","、","传输","接收","组织","实现","可见","每","之后","感兴趣","就是","随处","”","固定","，","“","需要","来看","什么","都","也","呢","发送","是","大家","居","数据传输","对","接收数据","出去","。","是从","感兴","从","要求","一个","小编","据传","没有","等等","打","文章","/","特性","对象","订阅","排版","名称","者","生活","模型","到","自然","比方","会","应该","这样","在生活中","了","公众","无法","机器","杂志","古月","有","机器人","微信","它","？","类似","和","发布","使用","就","知识","把","报纸","另外","格式","名字","数据类型","发送数据","兴趣"," ","叫","看","节点","数据","可以","好","称之为","他会","随处可见","角度","叫做","比如"],"title":"发布/订阅模型","title_tokens":["/","模型","订阅","发布"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["话题","似乎","还是","挺","摇杆","如果","我们","这个","区分","被","之为","通信模型","号","发布者","的","不是","、","多","一下","一样","魔性","，","很多","数量","也","发送","是","大家","注意","控制","对","1","。","3","是不是","一个","仔细","这些","想下","建议","订阅","东西","并","者","该","听","模型","ros","画面","可能","不","谁","每个","不然","优先","公众","了","人","机器","多个","指令","杂志","因为","唯一","有","机器人","和","发布","没错","里","控制指令","个","报纸","存在"," ","知道","节点","再","2","通信","可以","称之为","要","想象","优先级"],"title":"多对多通信","title_tokens":["通信","多","对"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["异步","后","话题","报社","第一","一次","第一次","如果","这个","收到","号","发布者","的","传感器","某","传输","指","这","并不知道","就是","感器","，","什么","也","是","较强","居","合适","控制","更","参数","那","用于","叫做","一个","发出","运动","一份","等等","文章","适合","特性","订阅","某些","者","所谓","让","可能","不","用","时候","根本","同学","一些","太","公众","了","不知","修改","古月","只要","有","词","？","类似","周期","发布","就","传感","报纸","逻辑","逻辑性","你","还有"," ","知道","通信","数据","可以","一篇","听说","阅读","。","指令","比如"],"title":"异步通信","title_tokens":["异步","通信"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["话题","包含","接口","我们","成","之为","像","发布者","的","、","传输","进行","无关","复杂","一样","后缀","统一","，","语言","这里","都","也","各种各样","是","编程","数据传输","文件","通过","最后","编程语言","块","一个","理解","据传","msg","等等","各种","结构","订阅","者","ros","对应","长宽","会","像素","每个","方式","定义","说","标准","这样","数据结构","在","了","图像","值","机器","既然",".","自行","消息","有","机器人","不能","和","描述","与","一种","发布","概念","系统","各样","中","就","rgb","组成","中文","接口定义","格式"," ","节点","拼接","积木","通信","得","数据","英文","可以","称之为","。","比如"],"title":"消息接口","title_tokens":["消息","接口"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_7","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。","text_tokens":["了解","话题","就要","编写","啦","我们","开始","代码","接下","的","基本原理","接下来","下来","基本","了","本原","。","原理","，"],"title":"编程方法","title_tokens":["编程","方法"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_8","text":"请大家先按照这个流程创建工作空间、下载课程的例程代码，并进行编译。 $ mkdir –p dev_ws/src $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build","text_tokens":["流程","先","mkdir","dev","https","src","$","并","gitee","p","这个","大家","com","userdata","colcon","空间","ws","build","cd","编译","代码","的",":","guyuehome","git","、","请","按照"," ","创建","进行","clone","tutorials","例程","课程","–","_","下载",".","。","/","togetherros","，","工作"],"title":"创建工作空间","title_tokens":["空间","创建","工作"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_9","text":"编译成功后，我们尝试运行话题通信的Hello World例程，在这个例程中，我们会先创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_topic_cpp talker $ ros2 run learning_topic_cpp listener 这就是TogetherROS系统中话题通信的方法，依然沿用了ROS2中话题通信的完整流程。","text_tokens":["流程","消息","setup","后","local","“","话题","尝试","$","订阅","周期","learning","topic","cpp","发送","hello","我们","沿用","是","者","这个","成功","发布","ros2","运行","install","chatter","系统","类型","编译","中","ros","发布者","的","到","talker","字符串","方法","字符"," ","定义","opt","创建","接收","例程","会先","一个","标准","通信","再","bash","从而","world","这","在","了","依然","完整","listener","_","run","就是","source",".","string","。","”","/","togetherros","，","tros"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_10","text":"发布者的实现方法publisher_member_function.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using namespace std :: chrono_literals ; /* This example creates a subclass of Node and uses std::bind() to register a * member function as a callback from the timer. */ class MinimalPublisher : public rclcpp :: Node { public : MinimalPublisher () : Node ( \"minimal_publisher\" ), count_ ( 0 ) { publisher_ = this -> create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & MinimalPublisher :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, world! \" + std :: to_string ( count_ ++ ); RCLCPP_INFO ( this -> get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者的实现方法subscriber_member_function.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using std :: placeholders :: _1 ; class MinimalSubscriber : public rclcpp :: Node { public : MinimalSubscriber () : Node ( \"minimal_subscriber\" ) { subscription_ = this -> create_subscription < std_msgs :: msg :: String > ( \"topic\" , 10 , std :: bind ( & MinimalSubscriber :: topic_callback , this , _1 )); } private : void topic_callback ( const std_msgs :: msg :: String :: SharedPtr msg ) const { RCLCPP_INFO ( this -> get_logger (), \"I heard: '%s'\" , msg -> data . c_str ()); } rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["minimalsubscriber","rclcpp","hpp","uses","count","i","hello","size","register","callback","minimal","namespace","make","}","int","logger","发布者","的","*","std","10","and","500","bind","实现","argc","public","：","void",")","include","auto","topic","as","creates","wall","from","1","subscriber",",","方法","timerbase","%","of","timer","main","msg","the","subscription",";","string","/","!","char","<","heard","(","init","]","c","cpp","订阅","const","class","-","者","create","chrono","memory","str","'","message","argv","using","placeholders","publisher","[","&","publishing","subclass","get","function","ms","a","world","spin","{",".","literals","info","+","private","#","node","0","发布","member","functional","example","++","minimalpublisher","\"",":",">","shared","this","data","to","t"," ","=","msgs","s","return","_","shutdown","sharedptr","publish"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/","text":"多节点服务通信 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 编程方法 了解了服务通信的原理，接下来我们就要开始编写代码啦，我们尝试通过服务实现一个加法求解器的功能。 运行示例程序 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 我们一起操作下这个例程。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_service_cpp server $ ros2 run learning_service_cpp client 2 3 话题和服务是最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 代码解析 服务器端add_two_ints_server.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <memory> void add ( const std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Request> request, std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Response> response ) { response->sum = request->a + request->b ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Incoming request\\na: %ld\" \" b: %ld\" , request->a, request->b ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"sending back response: [%ld]\" , ( long int ) response->sum ) ; } int main ( int argc, char **argv ) { rclcpp::init ( argc, argv ) ; std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared ( \"add_two_ints_server\" ) ; rclcpp::Service<learning_service_cpp::srv::AddTwoInts>::SharedPtr service = node->create_service<learning_service_cpp::srv::AddTwoInts> ( \"add_two_ints\" , & add ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Ready to add two ints.\" ) ; rclcpp::spin ( node ) ; rclcpp::shutdown () ; } 客户端add_two_ints_client.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <chrono> #include <cstdlib> #include <memory> using namespace std :: chrono_literals ; int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); if ( argc != 3 ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"usage: add_two_ints_client X Y\" ); return 1 ; } std :: shared_ptr < rclcpp :: Node > node = rclcpp :: Node :: make_shared ( \"add_two_ints_client\" ); rclcpp :: Client < learning_service_cpp :: srv :: AddTwoInts >:: SharedPtr client = node -> create_client < learning_service_cpp :: srv :: AddTwoInts > ( \"add_two_ints\" ); auto request = std :: make_shared < learning_service_cpp :: srv :: AddTwoInts :: Request > (); request -> a = atoll ( argv [ 1 ]); request -> b = atoll ( argv [ 2 ]); while ( ! client -> wait_for_service ( 1 s )) { if ( ! rclcpp :: ok ()) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Interrupted while waiting for the service. Exiting.\" ); return 0 ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"service not available, waiting again...\" ); } auto result = client -> async_send_request ( request ); // Wait for the result. if ( rclcpp :: spin_until_future_complete ( node , result ) == rclcpp :: FutureReturnCode :: SUCCESS ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"Sum: %ld\" , result . get () -> sum ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Failed to call service add_two_ints\" ); } rclcpp :: shutdown (); return 0 ; }","text_tokens":["异步","周期性","hpp","宕机","机制","sending","namespace","na","logger","代码","、","usage","界面","发","之间","数据通信","ld","一样","形式","并不需要","求解","srv","示例","了解","“","编写","数据通","也","发送","判断","—","编程","同样","对","相比","通过","接下来","async","看到","常见","获取","the","时","问","/","适合","chrono","service","请求","加法","ready","[","信息","一问一答","所以","response","sum","spin","向",".","tros","之前","唯一","b","尝试","一起","类似","#","一种","0","send","视觉","传感","客户端","还有","不同","=","节点","可以","run","同步","转圈","原理","ok","比如","$","available","反馈","服务器","接口","网页","相机","else","常用","苹果","位置","make","complete","}","两个","发布者","讲","传感器","越快","访问","多","接收","add","之后","：","exiting","就是","两种","感器","处理","void","浏览器","，","是","域名","居","功能","futurereturncode","控制","更","接下","最为",",","ptr","3","x","atoll","半天","服务","main","error","这些","程序","传递数据","网络","而是","封装","two","开始","if","while","核心","效果","模型","器","附近","后续","简称","call","加数","下来","标准","机器","答","failed","server","future","+","周期","和","addtwoints","node","越快越好","cstdlib","客户","服务器发送","控制指令","使用","就","request",">","上层","知道","高","2","bash","return","应答","_","要","sharedptr","命令","指令","...","后","过程","success","是否","这个","收到","成为","通信模型","int","想要","越好","传输","进行","incoming","argc","变成","传递","每","单向","”","发给",")","应用","需要","ros2","大家","完全","服务器端","针对","1","解析","这么","%","从","驱动","要求","一个","我","跟随","运动","back","msg","但是","各种","source","local","假设","但","init","cpp","这种","-","create","install","此时","圈圈","识别","页面","不","后者","&","会","get","定义","opt","这样","例程","在生活中","好像","当","前者","a","图像","y","多个","网站","坐标","同步性","info","浏览","状态","准确","其中","long","中","红色",":","电脑","shared","存在"," ","s","查询","通信","经常","数据","希望","称之为","尽快","shutdown","for","频率","cs","setup","。","那有","反应","rclcpp","话题","还是","我们","很","不好","目标","成","之为","结果","的","*","std","部分","学习","实现","课程","最新","继续","有所不同","操作","一般","until","include","然后","就要","等","来看","auto","都","learning","物体","展现","或者","转圈圈","计算","\\","得到","务器","出去","文件","一直","方法","一对","图像识别","没有",";","!","char","<","(","]","client","上","订阅","某些","并","const","给","者","memory","运行","argv","具体","生活","wait","using","ros","为","可能","到","not","时候","interrupted","求和","介绍","ints","下","提供","waiting","result","在","无法","了","人","{","literals","古月","消息","机器人","有所","返回","某个","啦","发布","将","again","\"","另外","你","to","按照","叫做","本"],"title":"多节点服务通信","title_tokens":["服务","通信","多","节点"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["异步","消息","话题","机制","一起","类似","订阅","这种","我们","准确","一种","者","是否","收到","发布","常用","—","效果","本","将","ros","发布者","使用","的","讲","另外","方法","。","你","传输"," ","知道","之间","节点","学习","我","实现","通信","服务","数据","可以","无法","问","多个","答","同步","单向","，"],"title":"多节点服务通信","title_tokens":["服务","通信","多","节点"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["话题","机制","反馈","我们","相机","成为","这个","目标","位置","通信模型","的","传输","发","实现","课程","变成","最新","继续","一样","有所不同","单向","形式","发给","，","并不需要","然后","应用","需要","发送","物体","是","或者","得到","对","更","通过","一直","这么","驱动","一个","跟随","我","运动","服务","图像识别","问","而是","订阅","并","这种","此时","service","请求","识别","模型","ros","到","信息","附近","时候","这样","好像","在","了","图像","机器","答","之前","机器人","有所","周期","和","发布","其中","中","红色","使用","另外","上层","你","不同","按照"," ","高","节点","查询","通信","数据","可以","希望","应答","尽快","频率","。","比如"],"title":"通信模型","title_tokens":["通信","通信模型","模型"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["比如","浏览","返回","某个","需要","机制","上","来看","反馈","某些","并","服务器","这种","发送","也","我们","网页","很","展现","或者","收到","域名","具体","生活","服务器端","此时","请求","针对","客户","模型","服务器发送","务器","处理","为","就","的","页面","信息","电脑","通过","简称","网站","。","时候","客户端","你","常见"," ","会","从","操作","进行","我","实现","通信","服务","在生活中","经常","数据","之后","/","在","向","应答","就是","问","cs","各种","答","叫做","形式","浏览器","，"],"title":"客户端/服务器模型","title_tokens":["客户端","客户","模型","务器","服务器","/","服务"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["浏览","过程","网络","话题","宕机","状态","也","服务器","我们","是","那有","越快越好","这个","转圈圈","或者","不好","判断","服务器端","圈圈","之为","客户","务器","中","可能","的","相比","到","信息","通过","一直","越快","。","客户端","越好","你","要求","半天","接收","通信","服务","所以","没有","可以","在","了","应答","称之为","转圈","同步","一般","浏览器","反应","，","假设"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["但","唯一","，","都","并","服务器","是","这个","大家","完全","居","同样","服务器端","通信模型","客户","模型","务器","中","的","不","。","客户端","存在","访问","看到","界面","一个","通信","服务","所以","每","没有","可以","人","一样","但是","多个","网站","比如","古月"],"title":"一对多通信","title_tokens":["通信","多","一对"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["比如","消息","srv","话题","还是","类似","反馈","和","也","我们","给","是","大家","苹果","请求","核心","位置","两个","ros","中","使用","的","文件","部分","后续","方法","还有"," ","会","定义","介绍","一个","标准","通信","服务","变成","传递","数据","msg","在","了","要","一样","命令",".","这些","。","坐标","传递数据","，"],"title":"服务接口","title_tokens":["服务","接口"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_7","text":"了解了服务通信的原理，接下来我们就要开始编写代码啦，我们尝试通过服务实现一个加法求解器的功能。","text_tokens":["求解","了解","就要","编写","尝试","啦","我们","开始","功能","加法","代码","接下","的","器","通过","接下来","下来","一个","实现","通信","服务","了","。","原理","，"],"title":"编程方法","title_tokens":["编程","方法"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_8","text":"当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 我们一起操作下这个例程。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_service_cpp server $ ros2 run learning_service_cpp client 2 3 话题和服务是最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。","text_tokens":["后","话题","周期性","$","反馈","服务器","我们","这个","收到","目标","常用","成","位置","结果","两个","的","想要","传感器","、","传输","进行","add","之后","数据通信","两种","感器","单向","”","操作","，","“","等","需要","数据通","learning","发送","是","ros2","计算","服务器端","针对","控制","得到","务器","更","出去","最为","通过","。","方法","3","要求","获取","服务","时","source","local","/","适合","client","cpp","封装","并","two","给","开始","install","service","请求","加法","识别","到","后者","一问一答","加数","opt","求和","例程","ints","下","前者","当","提供","机器",".","同步性","tros","server","一起","和","周期","啦","视觉","客户","将","控制指令","就","传感","客户端"," ","高","节点","2","通信","bash","数据","可以","应答","_","run","同步","setup","指令","比如"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_9","text":"服务器端add_two_ints_server.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <memory> void add ( const std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Request> request, std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Response> response ) { response->sum = request->a + request->b ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Incoming request\\na: %ld\" \" b: %ld\" , request->a, request->b ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"sending back response: [%ld]\" , ( long int ) response->sum ) ; } int main ( int argc, char **argv ) { rclcpp::init ( argc, argv ) ; std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared ( \"add_two_ints_server\" ) ; rclcpp::Service<learning_service_cpp::srv::AddTwoInts>::SharedPtr service = node->create_service<learning_service_cpp::srv::AddTwoInts> ( \"add_two_ints\" , & add ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Ready to add two ints.\" ) ; rclcpp::spin ( node ) ; rclcpp::shutdown () ; } 客户端add_two_ints_client.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <chrono> #include <cstdlib> #include <memory> using namespace std :: chrono_literals ; int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); if ( argc != 3 ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"usage: add_two_ints_client X Y\" ); return 1 ; } std :: shared_ptr < rclcpp :: Node > node = rclcpp :: Node :: make_shared ( \"add_two_ints_client\" ); rclcpp :: Client < learning_service_cpp :: srv :: AddTwoInts >:: SharedPtr client = node -> create_client < learning_service_cpp :: srv :: AddTwoInts > ( \"add_two_ints\" ); auto request = std :: make_shared < learning_service_cpp :: srv :: AddTwoInts :: Request > (); request -> a = atoll ( argv [ 1 ]); request -> b = atoll ( argv [ 2 ]); while ( ! client -> wait_for_service ( 1 s )) { if ( ! rclcpp :: ok ()) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Interrupted while waiting for the service. Exiting.\" ); return 0 ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"service not available, waiting again...\" ); } auto result = client -> async_send_request ( request ); // Wait for the result. if ( rclcpp :: spin_until_future_complete ( node , result ) == rclcpp :: FutureReturnCode :: SUCCESS ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"Sum: %ld\" , result . get () -> sum ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Failed to call service add_two_ints\" ); } rclcpp :: shutdown (); return 0 ; }","text_tokens":["...","rclcpp","hpp","available","sending","success","服务器","else","namespace","na","make","complete","int","}","logger","*","std","usage","add","incoming","argc","ld","：","exiting","void",")","until","include","srv","auto","learning","\\","服务器端","futurereturncode","务器","1",",","ptr","async","3","x","%","atoll","服务","main","back","the","error",";","/","!","char","<","(","init","]","client","cpp","const","two","-","create","if","memory","chrono","while","argv","service","wait","using","ready","[","&","not","interrupted","call","get","ints","a","response","sum","waiting","result","spin","y","{","failed",".","literals","info","server","future","+","b","#","addtwoints","node","0","cstdlib","send","客户","long","again","\"",":","request",">","shared","客户端","to"," ","=","s","2","return","_","shutdown","for","sharedptr","ok"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/","text":"多节点动作通信 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 编程方法 相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 运行示例程序 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_action_cpp server $ ros2 run learning_action_cpp client 代码解析 动作的服务器fibonacci_action_server.cpp： #include <inttypes.h> #include <memory> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO(jacobperron): Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionServer : public rclcpp :: Node { public : using Fibonacci = learning_action_cpp :: action :: Fibonacci ; using GoalHandleFibonacci = rclcpp_action :: ServerGoalHandle < Fibonacci > ; explicit MinimalActionServer ( const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : Node ( \"minimal_action_server\" , options ) { using namespace std :: placeholders ; this -> action_server_ = rclcpp_action :: create_server < Fibonacci > ( this -> get_node_base_interface (), this -> get_node_clock_interface (), this -> get_node_logging_interface (), this -> get_node_waitables_interface (), \"fibonacci\" , std :: bind ( & MinimalActionServer :: handle_goal , this , _1 , _2 ), std :: bind ( & MinimalActionServer :: handle_cancel , this , _1 ), std :: bind ( & MinimalActionServer :: handle_accepted , this , _1 )); } private : rclcpp_action :: Server < Fibonacci >:: SharedPtr action_server_ ; rclcpp_action :: GoalResponse handle_goal ( const rclcpp_action :: GoalUUID & uuid , std :: shared_ptr < const Fibonacci :: Goal > goal ) { RCLCPP_INFO ( this -> get_logger (), \"Received goal request with order %d\" , goal -> order ); ( void ) uuid ; // Let's reject sequences that are over 9000 if ( goal -> order > 9000 ) { return rclcpp_action :: GoalResponse :: REJECT ; } return rclcpp_action :: GoalResponse :: ACCEPT_AND_EXECUTE ; } rclcpp_action :: CancelResponse handle_cancel ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Received request to cancel goal\" ); ( void ) goal_handle ; return rclcpp_action :: CancelResponse :: ACCEPT ; } void execute ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Executing goal\" ); rclcpp :: Rate loop_rate ( 1 ); const auto goal = goal_handle -> get_goal (); auto feedback = std :: make_shared < Fibonacci :: Feedback > (); auto & sequence = feedback -> sequence ; sequence . push_back ( 0 ); sequence . push_back ( 1 ); auto result = std :: make_shared < Fibonacci :: Result > (); for ( int i = 1 ; ( i < goal -> order ) && rclcpp :: ok (); ++ i ) { // Check if there is a cancel request if ( goal_handle -> is_canceling ()) { result -> sequence = sequence ; goal_handle -> canceled ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Canceled\" ); return ; } // Update sequence sequence . push_back ( sequence [ i ] + sequence [ i - 1 ]); // Publish feedback goal_handle -> publish_feedback ( feedback ); RCLCPP_INFO ( this -> get_logger (), \"Publish Feedback\" ); loop_rate . sleep (); } // Check if goal is done if ( rclcpp :: ok ()) { result -> sequence = sequence ; goal_handle -> succeed ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Succeeded\" ); } } void handle_accepted ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { using namespace std :: placeholders ; // this needs to return quickly to avoid blocking the executor, so spin up a new thread std :: thread { std :: bind ( & MinimalActionServer :: execute , this , _1 ), goal_handle }. detach (); } }; // class MinimalActionServer int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); auto action_server = std :: make_shared < MinimalActionServer > (); rclcpp :: spin ( action_server ); rclcpp :: shutdown (); return 0 ; } 动作的客户端fibonacci_action_client.cpp： #include <inttypes.h> #include <memory> #include <string> #include <iostream> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO ( jacobperron ) : Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionClient : public rclcpp::Node { public: using Fibonacci = learning_action_cpp::action::Fibonacci ; using GoalHandleFibonacci = rclcpp_action::ClientGoalHandle<Fibonacci> ; explicit MinimalActionClient ( const rclcpp::NodeOptions & node_options = rclcpp::NodeOptions ()) : Node ( \"minimal_action_client\" , node_options ) , goal_done_ ( false ) { this->client_ptr_ = rclcpp_action::create_client<Fibonacci> ( this->get_node_base_interface () , this->get_node_graph_interface () , this->get_node_logging_interface () , this->get_node_waitables_interface () , \"fibonacci\" ) ; this->timer_ = this->create_wall_timer ( std::chrono::milliseconds ( 500 ) , std::bind ( & MinimalActionClient::send_goal, this )) ; } bool is_goal_done () const { return this->goal_done_ ; } void send_goal () { using namespace std::placeholders ; this->timer_->cancel () ; this->goal_done_ = false ; if ( !this->client_ptr_ ) { RCLCPP_ERROR ( this->get_logger () , \"Action client not initialized\" ) ; } if ( !this->client_ptr_->wait_for_action_server ( std::chrono::seconds ( 10 ))) { RCLCPP_ERROR ( this->get_logger () , \"Action server not available after waiting\" ) ; this->goal_done_ = true ; return ; } auto goal_msg = Fibonacci::Goal () ; goal_msg.order = 10 ; RCLCPP_INFO ( this->get_logger () , \"Sending goal\" ) ; auto send_goal_options = rclcpp_action::Client<Fibonacci>::SendGoalOptions () ; send_goal_options.goal_response_callback = std::bind ( & MinimalActionClient::goal_response_callback, this, _1 ) ; send_goal_options.feedback_callback = std::bind ( & MinimalActionClient::feedback_callback, this, _1, _2 ) ; send_goal_options.result_callback = std::bind ( & MinimalActionClient::result_callback, this, _1 ) ; auto goal_handle_future = this->client_ptr_->async_send_goal ( goal_msg, send_goal_options ) ; } private: rclcpp_action::Client<Fibonacci>::SharedPtr client_ptr_ ; rclcpp::TimerBase::SharedPtr timer_ ; bool goal_done_ ; void goal_response_callback ( std::shared_future<GoalHandleFibonacci::SharedPtr> future ) { auto goal_handle = future.get () ; if ( !goal_handle ) { RCLCPP_ERROR ( this->get_logger () , \"Goal was rejected by server\" ) ; } else { RCLCPP_INFO ( this->get_logger () , \"Goal accepted by server, waiting for result\" ) ; } } void feedback_callback ( GoalHandleFibonacci::SharedPtr, const std::shared_ptr<const Fibonacci::Feedback> feedback ) { RCLCPP_INFO ( this->get_logger () , \"Next number in sequence received: %\" PRId32, feedback->sequence.back ()) ; } void result_callback ( const GoalHandleFibonacci::WrappedResult & result ) { this->goal_done_ = true ; switch ( result.code ) { case rclcpp_action::ResultCode::SUCCEEDED: break ; case rclcpp_action::ResultCode::ABORTED: RCLCPP_ERROR ( this->get_logger () , \"Goal was aborted\" ) ; return ; case rclcpp_action::ResultCode::CANCELED: RCLCPP_ERROR ( this->get_logger () , \"Goal was canceled\" ) ; return ; default: RCLCPP_ERROR ( this->get_logger () , \"Unknown result code\" ) ; return ; } RCLCPP_INFO ( this->get_logger () , \"Result received\" ) ; for ( auto number : result.result->sequence ) { RCLCPP_INFO ( this->get_logger () , \"%\" PRId32, number ) ; } } } ; // class MinimalActionClient int main ( int argc, char ** argv ) { rclcpp::init ( argc, argv ) ; auto action_client = std::make_shared<MinimalActionClient> () ; while ( !action_client->is_goal_done ()) { rclcpp::spin_some ( action_client ) ; } rclcpp::shutdown () ; return 0 ; }","text_tokens":["其","hpp","机制","sending","i","let","callback","namespace","仅仅","logger","代码","avoid","goal","、","500","实时","part","用到","不仅","loop","一下","起来","较长","public","完整","一样","in","remove","rate","示例","也","发送","圈","—","order","编程","thread","wall","sequences","对","时间","相比","又","executing","timerbase","async","是不是","minimalactionclient","就此结束","只有","the","时","动作","一边","/","旋转","was","需求","先","上边","succeed","随时","chrono","'","that","请求","goaluuid","rejected","让","竟然","placeholders","[","信息","根本","true","check","are","某一","response","整个","spin","既然",".","tros","之前","有","度","private","类似","#","needs","executor","一种","0","send","简单","false","直到","把","客户端","code","aborted","看","=","节点","case","done","得","转个","可以","取消","run","转圈","ok","同步","wrappedresult","比如","$","available","反馈","after","服务器","接口","就此","else","所处","so","一","bool","make","像","}","两个","发布者","and","场景","interface","臂","多","bind","满足","之后","：","就是","accepted","resultcode","void","到底","，","流程","canceled","只能","什么","as","执行","是","导航","功能","合适","控制","便于","那",",","ptr","目的","timer","服务","main","来","error","execute","例子","通信接口","这些","string","程序","goalhandlefibonacci","initialized","开始","眼前","if","while","servergoalhandle","模型","break","options","with","抓取","调用","举个","还","机器","每隔","server","future","+","？","clock","动","和","周期","结束","node","clientgoalhandle","inttypes","系统","there","客户","当中","就","使用","分析","request",">","达到","this","合成","一点一点","知道","2","update","bash","blocking","_-","return","完成","_","哪里","sharedptr","命令","指令","进度条","action","后","有没有","过程","included","sendgoaloptions","送货","过","iostream","这个","收到","段时间","minimal","被","通信模型","int","基于","不是","seconds","10","智能","goalresponse","进行","argc","复杂","这","feedback","相对","fibonacci","&&",")","succeeded","cancel","需要","应用","模块","转","ros2","大家","it","服务器端","秘密","1","解析","这么","%","从","of","9000","想","push","一个","handle","运动","不仅仅","back","msg","含义","milliseconds","但是","source","graph","local","nodeoptions","假设","init","cpp","告诉","这种","多少度","-","create","20","遥控","install","识别","其实","不","&","quickly","会","get","30","定义","opt","这样","例程","当","a","同时","canceling","多个","坐标","一点","h","info","状态","毕竟","概念","装","应用层","中",":","shared","姿态","名字","prid32","some","minimalactionserver","received"," ","一段","再","s","还会","通信","数据","好","shutdown","for","up","setup","。","进度","rclcpp","话题","accept","管理","如果","我们","reject","应带","很","目标","三个","底层","jacobperron","number","detach","的","*","std","分拣","隐藏","肯定","由","waitables","行为","实现","is","include","uuid","等","over","auto","都","learning","表示","务器","一段时间","once","文件","方法","常常","动图","d","发现","一对","发出","理解","new","没有","仔细",";","干什么","sequence","!","char","<","键盘","cancelresponse","(","控","]","client","上","订阅","并","const","class","者","当前","memory","多少","机械","具体","运行","argv","base","wait","using","ros","可能","到","next","not","介绍","下","result","waiting","switch","在","了","才能","{","机器人","某个","送餐","现在","发布","没错","default","unknown","++","by","explicit","更为","360","\"","另外","to","1s","logging","sleep","publish","todo"],"title":"多节点动作通信","title_tokens":["动作","通信","多","节点"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["流程","键盘","机器人","某个","需要","等","应用","机制","上","管理","并","也","这种","我们","送餐","送货","一种","是","很","目标","这个","—","遥控","概念","功能","具体","被","仅仅","简单","系统","识别","对","中","ros","就","的","便于","那","分拣","另外","名字","常常","智能","、","目的","场景","这么"," ","会","从","行为","用到","不仅","满足","进行","一个","实现","运动","通信","理解","不仅仅","某一","复杂","可以","在","好","含义","完整","动作","机器","就是","这些","。","需求","，"],"title":"多节点动作通信","title_tokens":["动作","通信","多","节点"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["后","有没有","过程","机制","反馈","如果","我们","段时间","像","的","不是","10","、","肯定","行为","一下","进度","之后","这","到底","，","需要","发送","圈","转","是","表示","执行","合适","时间","想","一个","发出","运动","没有","动作","例子","旋转","假设","控","并","告诉","开始","多少度","眼前","当前","20","随时","多少","让","到","不","信息","根本","举个","30","这样","在","了","还","才能","机器","每隔","指令","一点","机器人","？","度","结束","现在","装","当中","直到","就","使用","360","更为","把","一点一点"," ","一段","知道","再","1s","通信","得","转个","可以","取消","完成","哪里","命令","转圈","。","ok","进度条","比如","一段时间"],"title":"通信模型","title_tokens":["通信","通信模型","模型"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["机器人","过程","后","动","类似","什么","反馈","和","周期","也","服务器","发送","状态","如果","执行","开始","是","结束","目标","收到","当前","这个","所处","就此","导航","机械","服务器端","控制","客户","模型","务器","让","中","使用","的","就","可能","信息","又","达到","抓取","姿态","客户端","臂"," ","实时","想","一个","再","一边","运动","服务","起来","当","通信","就此结束","之后","同时","整个","动作","干什么","机器","。","坐标","，"],"title":"客户端/服务器模型","title_tokens":["客户端","客户","模型","务器","服务器","/","服务"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["先","有","机器人","只能","都","和","服务器","发送","执行","大家","毕竟","服务器端","客户","务器","中","的","客户端","一个","下","运动","服务","通信","只有","可以","动作","完成","一样","但是","机器","才能","多个","命令","。","，"],"title":"一对多通信","title_tokens":["通信","多","一对"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["之前","action","有","过程","机制","反馈","也","接口","我们","过","一种","是","中","使用","的","那","文件","定义","进行","介绍","通信","数据","动作","通信接口","既然",".","同步","。","，"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["有","过程","上边","话题","其","应用","机制","反馈","周期","订阅","也","服务器","发送","模块","一种","和","应带","是","表示","大家","目标","三个","收到","发布","者","没错","底层","服务器端","请求","秘密","客户","其实","务器","应用层","竟然","两个","基于","使用","的","不是","发布者","隐藏","调用","客户端","动图"," ","看","会","发现","是不是","再","下","还会","一个","通信","服务","当","运动","实现","来","时","仔细","动作","就是","命令","。","，"],"title":"由服务和话题合成","title_tokens":["合成","话题","由","和","服务"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_7","text":"相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["之前","话题","和","并","我们","一","运行","分析","相比","的","例程","一下","起来","通信","服务","较长","动作","相对","。","程序","，"],"title":"编程方法","title_tokens":["编程","方法"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_8","text":"$ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_action_cpp server $ ros2 run learning_action_cpp client","text_tokens":["action","server","client","$","cpp","learning","ros2","install"," ","opt","bash","/","_","run","source",".","setup","local","tros"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_9","text":"动作的服务器fibonacci_action_server.cpp： #include <inttypes.h> #include <memory> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO(jacobperron): Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionServer : public rclcpp :: Node { public : using Fibonacci = learning_action_cpp :: action :: Fibonacci ; using GoalHandleFibonacci = rclcpp_action :: ServerGoalHandle < Fibonacci > ; explicit MinimalActionServer ( const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : Node ( \"minimal_action_server\" , options ) { using namespace std :: placeholders ; this -> action_server_ = rclcpp_action :: create_server < Fibonacci > ( this -> get_node_base_interface (), this -> get_node_clock_interface (), this -> get_node_logging_interface (), this -> get_node_waitables_interface (), \"fibonacci\" , std :: bind ( & MinimalActionServer :: handle_goal , this , _1 , _2 ), std :: bind ( & MinimalActionServer :: handle_cancel , this , _1 ), std :: bind ( & MinimalActionServer :: handle_accepted , this , _1 )); } private : rclcpp_action :: Server < Fibonacci >:: SharedPtr action_server_ ; rclcpp_action :: GoalResponse handle_goal ( const rclcpp_action :: GoalUUID & uuid , std :: shared_ptr < const Fibonacci :: Goal > goal ) { RCLCPP_INFO ( this -> get_logger (), \"Received goal request with order %d\" , goal -> order ); ( void ) uuid ; // Let's reject sequences that are over 9000 if ( goal -> order > 9000 ) { return rclcpp_action :: GoalResponse :: REJECT ; } return rclcpp_action :: GoalResponse :: ACCEPT_AND_EXECUTE ; } rclcpp_action :: CancelResponse handle_cancel ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Received request to cancel goal\" ); ( void ) goal_handle ; return rclcpp_action :: CancelResponse :: ACCEPT ; } void execute ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Executing goal\" ); rclcpp :: Rate loop_rate ( 1 ); const auto goal = goal_handle -> get_goal (); auto feedback = std :: make_shared < Fibonacci :: Feedback > (); auto & sequence = feedback -> sequence ; sequence . push_back ( 0 ); sequence . push_back ( 1 ); auto result = std :: make_shared < Fibonacci :: Result > (); for ( int i = 1 ; ( i < goal -> order ) && rclcpp :: ok (); ++ i ) { // Check if there is a cancel request if ( goal_handle -> is_canceling ()) { result -> sequence = sequence ; goal_handle -> canceled ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Canceled\" ); return ; } // Update sequence sequence . push_back ( sequence [ i ] + sequence [ i - 1 ]); // Publish feedback goal_handle -> publish_feedback ( feedback ); RCLCPP_INFO ( this -> get_logger (), \"Publish Feedback\" ); loop_rate . sleep (); } // Check if goal is done if ( rclcpp :: ok ()) { result -> sequence = sequence ; goal_handle -> succeed ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Succeeded\" ); } } void handle_accepted ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { using namespace std :: placeholders ; // this needs to return quickly to avoid blocking the executor, so spin up a new thread std :: thread { std :: bind ( & MinimalActionServer :: execute , this , _1 ), goal_handle }. detach (); } }; // class MinimalActionServer int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); auto action_server = std :: make_shared < MinimalActionServer > (); rclcpp :: spin ( action_server ); rclcpp :: shutdown (); return 0 ; } 动作的客户端fibonacci_action_client.cpp： #include <inttypes.h> #include <memory> #include <string> #include <iostream> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO ( jacobperron ) : Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionClient : public rclcpp::Node { public: using Fibonacci = learning_action_cpp::action::Fibonacci ; using GoalHandleFibonacci = rclcpp_action::ClientGoalHandle<Fibonacci> ; explicit MinimalActionClient ( const rclcpp::NodeOptions & node_options = rclcpp::NodeOptions ()) : Node ( \"minimal_action_client\" , node_options ) , goal_done_ ( false ) { this->client_ptr_ = rclcpp_action::create_client<Fibonacci> ( this->get_node_base_interface () , this->get_node_graph_interface () , this->get_node_logging_interface () , this->get_node_waitables_interface () , \"fibonacci\" ) ; this->timer_ = this->create_wall_timer ( std::chrono::milliseconds ( 500 ) , std::bind ( & MinimalActionClient::send_goal, this )) ; } bool is_goal_done () const { return this->goal_done_ ; } void send_goal () { using namespace std::placeholders ; this->timer_->cancel () ; this->goal_done_ = false ; if ( !this->client_ptr_ ) { RCLCPP_ERROR ( this->get_logger () , \"Action client not initialized\" ) ; } if ( !this->client_ptr_->wait_for_action_server ( std::chrono::seconds ( 10 ))) { RCLCPP_ERROR ( this->get_logger () , \"Action server not available after waiting\" ) ; this->goal_done_ = true ; return ; } auto goal_msg = Fibonacci::Goal () ; goal_msg.order = 10 ; RCLCPP_INFO ( this->get_logger () , \"Sending goal\" ) ; auto send_goal_options = rclcpp_action::Client<Fibonacci>::SendGoalOptions () ; send_goal_options.goal_response_callback = std::bind ( & MinimalActionClient::goal_response_callback, this, _1 ) ; send_goal_options.feedback_callback = std::bind ( & MinimalActionClient::feedback_callback, this, _1, _2 ) ; send_goal_options.result_callback = std::bind ( & MinimalActionClient::result_callback, this, _1 ) ; auto goal_handle_future = this->client_ptr_->async_send_goal ( goal_msg, send_goal_options ) ; } private: rclcpp_action::Client<Fibonacci>::SharedPtr client_ptr_ ; rclcpp::TimerBase::SharedPtr timer_ ; bool goal_done_ ; void goal_response_callback ( std::shared_future<GoalHandleFibonacci::SharedPtr> future ) { auto goal_handle = future.get () ; if ( !goal_handle ) { RCLCPP_ERROR ( this->get_logger () , \"Goal was rejected by server\" ) ; } else { RCLCPP_INFO ( this->get_logger () , \"Goal accepted by server, waiting for result\" ) ; } } void feedback_callback ( GoalHandleFibonacci::SharedPtr, const std::shared_ptr<const Fibonacci::Feedback> feedback ) { RCLCPP_INFO ( this->get_logger () , \"Next number in sequence received: %\" PRId32, feedback->sequence.back ()) ; } void result_callback ( const GoalHandleFibonacci::WrappedResult & result ) { this->goal_done_ = true ; switch ( result.code ) { case rclcpp_action::ResultCode::SUCCEEDED: break ; case rclcpp_action::ResultCode::ABORTED: RCLCPP_ERROR ( this->get_logger () , \"Goal was aborted\" ) ; return ; case rclcpp_action::ResultCode::CANCELED: RCLCPP_ERROR ( this->get_logger () , \"Goal was canceled\" ) ; return ; default: RCLCPP_ERROR ( this->get_logger () , \"Unknown result code\" ) ; return ; } RCLCPP_INFO ( this->get_logger () , \"Result received\" ) ; for ( auto number : result.result->sequence ) { RCLCPP_INFO ( this->get_logger () , \"%\" PRId32, number ) ; } } } ; // class MinimalActionClient int main ( int argc, char ** argv ) { rclcpp::init ( argc, argv ) ; auto action_client = std::make_shared<MinimalActionClient> () ; while ( !action_client->is_goal_done ()) { rclcpp::spin_some ( action_client ) ; } rclcpp::shutdown () ; return 0 ; }","text_tokens":["action","rclcpp","hpp","available","accept","included","after","sending","服务器","i","reject","sendgoaloptions","else","iostream","so","let","bool","callback","minimal","namespace","make","jacobperron","}","int","logger","number","detach","的","*","std","avoid","seconds","10","goal","and","500","interface","waitables","bind","goalresponse","part","loop","argc","public","feedback","：","is","fibonacci","accepted","in","&&","remove","resultcode","void",")","rate","include","cancel","succeeded","uuid","canceled","over","auto","learning","as","order","wall","thread","it","sequences","务器","1","once",",","ptr","executing","timerbase","async","d","%","of","9000","timer","push","minimalactionclient","handle","服务","main","back","the","new","msg","error","milliseconds","动作","execute",";","sequence","string","graph","goalhandlefibonacci","/","nodeoptions","!","char","was","<","cancelresponse","(","init","]","client","cpp","succeed","const","initialized","class","-","create","if","memory","chrono","while","'","that","argv","base","goaluuid","wait","servergoalhandle","rejected","using","placeholders","break","options","[","next","&","with","quickly","not","true","get","check","are","a","response","result","waiting","switch","canceling","spin","{",".","h","info","server","future","+","clock","private","#","needs","node","executor","0","clientgoalhandle","default","send","inttypes","unknown","++","by","there","客户","false","explicit","\"",":","request",">","shared","this","prid32","客户端","minimalactionserver","received","code","aborted","to","some"," ","=","s","2","update","case","done","blocking","_-","logging","return","_","shutdown","for","sleep","up","sharedptr","ok","publish","wrappedresult","todo"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/3.4_%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/","text":"零拷贝数据传输 在传统操作系统的数据传输过程中，系统内部会在磁盘、内存、缓存中多次进行数据拷贝，每次都会占用CPU的资源，数据量小的时候还好，随着数据量的增加，CPU的开销也会持续增加，尤其是在机器人图像数据的应用中 ，经常会发生这种问题，导致CPU都在做数据拷贝，没有时间处理其他的应用功能了，直接的感觉就是处理卡顿。 零拷贝技术 针对这种问题，零拷贝技术应运而生。 零拷贝主要的任务就是避免CPU将数据从一块存储拷贝到另外一块存储，避免让CPU做大量的数据拷贝任务，减少不必要的拷贝，或者让别的组件来做这一类简单的数据传输任务，让CPU解脱出来专注于别的任务。这样就可以让系统资源的利用更加有效。 TogetherROS中就提供了灵活、高效的零拷贝功能，可以显著降低大尺寸数据的通信延时和CPU占用，具体有多显著呢，我们不妨进行一个测试。 TogetherROS零拷贝性能测试 我们使用TogetherROS系统内部集成的性能测试工具——performance_test，来评估下开启零拷贝前后的性能差异，这里我们传输的样本数据量是4M。 未开启零拷贝进行数据传输 $ ros2 run performance_test perf_test --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #未开启 开启零拷贝数据传输： $ ros2 run performance_test perf_test --zero-copy --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #开启 好的，测试已经跑完了，我们把结果放到这里，来分析一下。 在这个测试中，关键有四个指标： 时延，也就是消息从发布者到订阅者的传输时间。不开启零拷贝的情况下，平均为0.004912s，开启零拷贝之后，速度快了差不多40倍，平均为0.000180s。 CPU使用率，表示通信活动所占用的CPU时间，大家可以看这个utime指标，开启零拷贝之后时间有显著的提升，消耗CPU的资源少了。 驻留内存，包括通信过程中分配的内存和共享内存，是这个maxrss中的数据，开启零拷贝之后，占用的内存也更少。 样本统计，包括测试中发送、接收以及丢失的消息数量，是这组数据，依然是开启零拷贝之后性能更好。 通过测试，对于大数据通信来讲，零拷贝在CPU消耗、内存占用以及通信延迟抖动方面的性能都会更好。 这里只是便于大家感受零拷贝技术的效果，具体编程中如何使用零拷贝机制呢？ 编程开发 为了方便大家使用，TogetherROS针对零拷贝功能进行了封装，风格类似ROS2中话题通信的接口，还是话题通信一样的流程，我们只需要修改几个函数就可以实现啦。 运行例程 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run hbmem_pubsub talker $ ros2 run hbmem_pubsub listener 代码解析 发布者publisher_hbmem.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" using namespace std :: chrono_literals ; class MinimalHbmemPublisher : public rclcpp :: Node { public : MinimalHbmemPublisher () : Node ( \"minimal_hbmem_publisher\" ), count_ ( 0 ) { // 创建publisher_hbmem，topic为\"topic\"，QOS为KEEPLAST(10)，以及默认的可靠传输 publisher_ = this -> create_publisher_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 ); // 定时器，每隔40毫秒调用一次timer_callback进行消息发送 timer_ = this -> create_wall_timer ( 40 ms , std :: bind ( & MinimalHbmemPublisher :: timer_callback , this )); } private : // 定时器回调函数 void timer_callback () { // 获取要发送的消息 auto loanedMsg = publisher_ -> borrow_loaned_message (); // 判断消息是否可用，可能出现获取消息失败导致消息不可用的情况 if ( loanedMsg . is_valid ()) { // 引用方式获取实际的消息 auto & msg = loanedMsg . get (); // 获取当前时间，单位为us auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()). count (); // 对消息的index和time_stamp进行赋值 msg . index = count_ ; msg . time_stamp = time_now ; // 打印发送消息 RCLCPP_INFO ( this -> get_logger (), \"message: %d\" , msg . index ); publisher_ -> publish ( std :: move ( loanedMsg )); // 注意，发送后，loanedMsg已不可用 // 计数器加一 count_ ++ ; } else { // 获取消息失败，丢弃该消息 RCLCPP_INFO ( this -> get_logger (), \"Failed to get LoanMessage!\" ); } } // 定时器 rclcpp :: TimerBase :: SharedPtr timer_ ; // hbmem publisher rclcpp :: PublisherHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr publisher_ ; // 计数器 size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者subscriber_hbmem.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" class MinimalHbmemSubscriber : public rclcpp :: Node { public : MinimalHbmemSubscriber () : Node ( \"minimal_hbmem_subscriber\" ) { // 创建subscription_hbmem，topic为\"sample\"，QOS为KEEPLAST(10)，以及默认的可靠传输 // 消息回调函数为topic_callback subscription_ = this -> create_subscription_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 , std :: bind ( & MinimalHbmemSubscriber :: topic_callback , this , std :: placeholders :: _1 )); } private : // 消息回调函数 void topic_callback ( const hbmem_pubsub :: msg :: SampleMessage :: SharedPtr msg ) const { // 注意，msg只能在回调函数中使用，回调函数返回后，该消息就会被释放 // 获取当前时间 auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()) . count (); // 计算延时并打印出来 RCLCPP_INFO ( this -> get_logger (), \"msg %d, time cost %dus\" , msg -> index , time_now - msg -> time_stamp ); } // hbmem subscription rclcpp :: SubscriptionHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemSubscriber > ()); rclcpp :: shutdown (); return 0 ; } 接口汇总 我们整理一下，与ROS2中的话题通信相比，TogetherROS带有零拷贝机制的话题通信接口是这样的。 在发布者中，我们可以使用PublisherHbmem来创建一个发布者对象，然后通过create_publisher_hbmem发布数据，而在订阅者中，SubscriptionHbmem用来创建一个订阅者对象，通过 create_subscription_hbmem订阅需要的数据，至于底层如何完成零拷贝的过程，都交给TogetherROS即可。","text_tokens":["hpp","别的","机制","--","callback","namespace","抖动","可用","logger","keep","代码","加一","、","解脱","runtime","以及","实际","一下","指标","public","数据通信","一样","直接","valid","灵活","主要","数量","数据通","也","发送","即可","判断","—","wall","编程","时间","对","卡顿","数据量","相比","通过","传统","timerbase","这组","time","跑","获取","单位","utime","subscription","更好","/","更加","延时","所","last","chrono","publisherhbmem","前后","让","placeholders","[","sample","导致","performance","占用","差异","四个","spin","尺寸",".","开发","tros","有","40","private","类似","#","少","开销","0","缓存","简单","不妨","cost","把","index","看","=","reliable","可以","整理","存储","depth","m","run","count","赋值","$","dus","接口","size","else","技术","make","}","倍","发布者","loanedmsg","多次","多","集成","bind","us","测试工具","接收","出来","之后","尤其","0.000180","now","perf","：","就是","处理","void","epoch","已","，","包括","流程","只能","是","工具","功能","数据传输","便于",",","创建","timer","必要","定时器","据传","main","来","放到","提升","通信接口","失败","统计","组件","随着","string","listener","对象","封装","if","大","快","效果","可靠","评估","该","共享","100","调用","minimalhbmemsubscriber","开启","不可","每次","问题","如何","函数","机器","每隔","failed","？","clock","和","node","r","于","系统","就","使用","分析",">","this","t","并打印","只","bash","性能","几个","return","_","要","完成","0.004912","sharedptr","keeplast","4m","已经","后","过程","感觉","一次","丢失","是否","这个","minimal","被","steady","来讲","int","10","borrow","传输","打印","进行","应运","argc","磁盘","这","分配","减少","duration","情况",")","应用","需要","用率","这里","ros2","大家","方面","针对","风格","1","subscriber","解析","%","从","一个","而","消耗","msg","利用","引用","拷贝到","完","有效","source","array4m","local","init","test","不必","maxrss","还好","cpp","这种","-","minimalhbmempublisher","create","install","message","测试","不","&","用","会","get","做","显著","30","活动","opt","方式","这样","例程","系统资源","zero","stamp","定时","图像","试工","修改","max","关键","loanmessage","info","任务","内部","降低","避免","为了","出现","方便","functional","拷贝","中",":","计数器","shared"," ","loaned","cast","s","通信","经常","copy","数据","好","释放","shutdown","内存","samplemessage","setup","。","rclcpp","话题","还是","我们","使用率","底层","只是","操作系统","结果","的","*","std","计数","对于","实现","其他","is","共享内存","操作","hbmem","include","pubsub","交给","然后","资源","auto","都","topic","时延","呢","差不多","表示","或者","计算","注意","一块","默认","talker","用来","延迟","d","cpu","样本","microseconds","history","没有",";","!","驻留","move","char","更少","<","(","]","未","订阅","const","class","不必要","者","不多","memory","当前","运行","argv","具体","一类","至于","平均","using","为","发生","publisher","到","可能","时候","丢弃","下","提供","ms","在","了","依然","小","持续","{","高效","subscriptionhbmem","literals","增加","消息","毫秒","机器人","返回","回调","与","啦","发布","零","带有","++","汇总","将","\"","应运而生","另外","大量","感受","to","since","速度","qos","专注","publish","togetherros"],"title":"零拷贝数据传输","title_tokens":["数据","数据传输","零","传输","拷贝","据传"]},{"location":"hhp/3.4_%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_1","text":"在传统操作系统的数据传输过程中，系统内部会在磁盘、内存、缓存中多次进行数据拷贝，每次都会占用CPU的资源，数据量小的时候还好，随着数据量的增加，CPU的开销也会持续增加，尤其是在机器人图像数据的应用中 ，经常会发生这种问题，导致CPU都在做数据拷贝，没有时间处理其他的应用功能了，直接的感觉就是处理卡顿。","text_tokens":["机器人","过程","应用","内部","资源","感觉","都","还好","也","这种","开销","是","缓存","功能","数据传输","系统","时间","拷贝","操作系统","处理","卡顿","中","数据量","的","发生","传统","多次","时候","、","传输","会","cpu"," ","做","导致","每次","进行","占用","磁盘","据传","数据","经常","尤其","问题","在","没有","其他","小","了","图像","持续","直接","内存","机器","就是","随着","。","操作","增加","，"],"title":"零拷贝数据传输","title_tokens":["数据","数据传输","零","传输","拷贝","据传"]},{"location":"hhp/3.4_%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_2","text":"针对这种问题，零拷贝技术应运而生。 零拷贝主要的任务就是避免CPU将数据从一块存储拷贝到另外一块存储，避免让CPU做大量的数据拷贝任务，减少不必要的拷贝，或者让别的组件来做这一类简单的数据传输任务，让CPU解脱出来专注于别的任务。这样就可以让系统资源的利用更加有效。 TogetherROS中就提供了灵活、高效的零拷贝功能，可以显著降低大尺寸数据的通信延时和CPU占用，具体有多显著呢，我们不妨进行一个测试。","text_tokens":["别的","我们","技术","的","、","解脱","传输","多","进行","应运","出来","这","减少","就是","灵活","主要","，","资源","呢","或者","功能","数据传输","针对","一块","cpu","从","一个","必要","据传","利用","来","拷贝到","有效","组件","更加","不必","延时","这种","不必要","大","具体","一类","让","测试","做","显著","这样","系统资源","占用","提供","问题","了","高效","尺寸","有","任务","降低","和","避免","于","零","简单","系统","不妨","拷贝","将","中","就","应运而生","另外","大量"," ","通信","数据","可以","存储","专注","。","togetherros"],"title":"零拷贝技术","title_tokens":["零","技术","拷贝"]},{"location":"hhp/3.4_%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#togetherros","text":"我们使用TogetherROS系统内部集成的性能测试工具——performance_test，来评估下开启零拷贝前后的性能差异，这里我们传输的样本数据量是4M。 未开启零拷贝进行数据传输 $ ros2 run performance_test perf_test --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #未开启 开启零拷贝数据传输： $ ros2 run performance_test perf_test --zero-copy --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #开启 好的，测试已经跑完了，我们把结果放到这里，来分析一下。 在这个测试中，关键有四个指标： 时延，也就是消息从发布者到订阅者的传输时间。不开启零拷贝的情况下，平均为0.004912s，开启零拷贝之后，速度快了差不多40倍，平均为0.000180s。 CPU使用率，表示通信活动所占用的CPU时间，大家可以看这个utime指标，开启零拷贝之后时间有显著的提升，消耗CPU的资源少了。 驻留内存，包括通信过程中分配的内存和共享内存，是这个maxrss中的数据，开启零拷贝之后，占用的内存也更少。 样本统计，包括测试中发送、接收以及丢失的消息数量，是这组数据，依然是开启零拷贝之后性能更好。 通过测试，对于大数据通信来讲，零拷贝在CPU消耗、内存占用以及通信延迟抖动方面的性能都会更好。 这里只是便于大家感受零拷贝技术的效果，具体编程中如何使用零拷贝机制呢？","text_tokens":["4m","已经","过程","机制","$","丢失","我们","使用率","这个","--","只是","技术","来讲","抖动","结果","keep","发布者","的","倍","10","、","传输","集成","runtime","以及","对于","测试工具","进行","接收","一下","指标","之后","分配","0.000180","perf","：","数据通信","就是","共享内存","情况","，","包括","数量","资源","用率","这里","都","数据通","也","时延","差不多","发送","呢","表示","是","ros2","大家","方面","—","工具","编程","数据传输","时间","数据量","1","便于","通过","延迟","这组","cpu","从","样本","跑","utime","据传","消耗","history","来","放到","提升","更好","完","统计","array4m","驻留","更少","test","maxrss","所","未","last","订阅","-","者","不多","大","具体","快","前后","效果","评估","平均","为","测试","到","不","共享","100","开启","会","显著","活动","30","performance","下","zero","占用","差异","如何","在","了","四个","依然","试工","max","关键","消息","有","？","内部","40","#","和","r","少","发布","零","系统","拷贝","中","使用","分析","把","感受"," ","看","reliable","s","速度","通信","性能","copy","数据","可以","好","depth","_","m","run","内存","0.004912","。","togetherros"],"title":"TogetherROS零拷贝性能测试","title_tokens":["零","拷贝","测试","togetherros","性能"]},{"location":"hhp/3.4_%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_3","text":"为了方便大家使用，TogetherROS针对零拷贝功能进行了封装，风格类似ROS2中话题通信的接口，还是话题通信一样的流程，我们只需要修改几个函数就可以实现啦。","text_tokens":["流程","话题","需要","还是","类似","封装","啦","接口","我们","ros2","大家","为了","功能","零","方便","针对","拷贝","风格","中","使用","的","就","进行","实现","通信","只","函数","可以","了","几个","一样","修改","。","togetherros","，"],"title":"编程开发","title_tokens":["编程","开发"]},{"location":"hhp/3.4_%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_4","text":"$ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run hbmem_pubsub talker $ ros2 run hbmem_pubsub listener","text_tokens":["pubsub","install","local","talker","listener"," ","_","$","run","opt","source",".","setup","/","ros2","hbmem","bash","tros"],"title":"运行例程","title_tokens":["例程","运行"]},{"location":"hhp/3.4_%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_5","text":"发布者publisher_hbmem.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" using namespace std :: chrono_literals ; class MinimalHbmemPublisher : public rclcpp :: Node { public : MinimalHbmemPublisher () : Node ( \"minimal_hbmem_publisher\" ), count_ ( 0 ) { // 创建publisher_hbmem，topic为\"topic\"，QOS为KEEPLAST(10)，以及默认的可靠传输 publisher_ = this -> create_publisher_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 ); // 定时器，每隔40毫秒调用一次timer_callback进行消息发送 timer_ = this -> create_wall_timer ( 40 ms , std :: bind ( & MinimalHbmemPublisher :: timer_callback , this )); } private : // 定时器回调函数 void timer_callback () { // 获取要发送的消息 auto loanedMsg = publisher_ -> borrow_loaned_message (); // 判断消息是否可用，可能出现获取消息失败导致消息不可用的情况 if ( loanedMsg . is_valid ()) { // 引用方式获取实际的消息 auto & msg = loanedMsg . get (); // 获取当前时间，单位为us auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()). count (); // 对消息的index和time_stamp进行赋值 msg . index = count_ ; msg . time_stamp = time_now ; // 打印发送消息 RCLCPP_INFO ( this -> get_logger (), \"message: %d\" , msg . index ); publisher_ -> publish ( std :: move ( loanedMsg )); // 注意，发送后，loanedMsg已不可用 // 计数器加一 count_ ++ ; } else { // 获取消息失败，丢弃该消息 RCLCPP_INFO ( this -> get_logger (), \"Failed to get LoanMessage!\" ); } } // 定时器 rclcpp :: TimerBase :: SharedPtr timer_ ; // hbmem publisher rclcpp :: PublisherHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr publisher_ ; // 计数器 size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者subscriber_hbmem.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" class MinimalHbmemSubscriber : public rclcpp :: Node { public : MinimalHbmemSubscriber () : Node ( \"minimal_hbmem_subscriber\" ) { // 创建subscription_hbmem，topic为\"sample\"，QOS为KEEPLAST(10)，以及默认的可靠传输 // 消息回调函数为topic_callback subscription_ = this -> create_subscription_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 , std :: bind ( & MinimalHbmemSubscriber :: topic_callback , this , std :: placeholders :: _1 )); } private : // 消息回调函数 void topic_callback ( const hbmem_pubsub :: msg :: SampleMessage :: SharedPtr msg ) const { // 注意，msg只能在回调函数中使用，回调函数返回后，该消息就会被释放 // 获取当前时间 auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()) . count (); // 计算延时并打印出来 RCLCPP_INFO ( this -> get_logger (), \"msg %d, time cost %dus\" , msg -> index , time_now - msg -> time_stamp ); } // hbmem subscription rclcpp :: SubscriptionHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["rclcpp","后","hpp","count","赋值","dus","一次","size","else","是否","callback","minimal","namespace","被","steady","make","}","可用","int","logger","发布者","的","*","std","loanedmsg","计数","10","borrow","加一","传输","bind","打印","以及","us","进行","实际","argc","出来","public","now","：","is","duration","valid","情况","void",")","epoch","，","hbmem","include","pubsub","已","只能","auto","topic","发送","判断","wall","计算","注意","时间","对","默认","1","subscriber",",","timerbase","d","%","time","创建","timer","获取","单位","定时器","microseconds","main","msg","subscription","引用",";","失败","string","/","!","move","char","<","(","init","]","延时","cpp","订阅","const","class","-","者","minimalhbmempublisher","create","if","chrono","memory","当前","publisherhbmem","message","argv","该","可靠","using","为","placeholders","publisher","可能","[","&","用","调用","minimalhbmemsubscriber","sample","不可","get","会","方式","导致","丢弃","ms","stamp","函数","在","spin","定时","{","每隔","failed",".","subscriptionhbmem","literals","loanmessage","info","消息","毫秒","返回","clock","40","private","回调","#","和","node","0","发布","出现","functional","++","中","cost","使用","\"",":","就","计数器",">","shared","this","to","index"," ","t","since","=","loaned","并打印","cast","publish","qos","return","释放","_","要","shutdown","sharedptr","samplemessage","keeplast"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/3.4_%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_6","text":"我们整理一下，与ROS2中的话题通信相比，TogetherROS带有零拷贝机制的话题通信接口是这样的。 在发布者中，我们可以使用PublisherHbmem来创建一个发布者对象，然后通过create_publisher_hbmem发布数据，而在订阅者中，SubscriptionHbmem用来创建一个订阅者对象，通过 create_subscription_hbmem订阅需要的数据，至于底层如何完成零拷贝的过程，都交给TogetherROS即可。","text_tokens":["交给","过程","然后","话题","需要","机制","对象","订阅","都","与","接口","我们","即可","是","ros2","create","者","发布","publisherhbmem","底层","带有","零","至于","拷贝","中","相比","的","发布者","使用","publisher","通过","用来"," ","创建","这样","一个","而","一下","通信","数据","如何","可以","在","来","hbmem","整理","subscription","_","通信接口","完成","subscriptionhbmem","。","togetherros","，"],"title":"接口汇总","title_tokens":["接口","汇总"]},{"location":"hhp/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/","text":"分布式通信配置 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如在这款机器人系统中，就有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用旭日派作为控制器，主要实现传感器驱动、电机控制、AI应用等功能，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个计算平台之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过TogehterROS都已经为我们准备好了，我们只需要在每一个计算上配置好TogehterROS或者ROS2的环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下分布式系统的魅力。 分布式网络搭建 旭日派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function # 旭日派端 $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function # PC端 神奇的事情就这样发生了，旭日X3派上安装的是TogetherROS，我的电脑上安装的是ROS2，他们只要处于同一网络中，就可以实现通信了，感觉就像在一个电脑里一样。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和旭日X3派端中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 话题分布式通信 之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 以话题通信为例，旭日派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串，我们看下效果如何。 $ ros2 run learning_topic_cpp talker # 旭日派端 $ ros2 run learning_topic_cpp listener # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，我们几乎不需要任何配置，代码也不需要做任何修改，一切都会变得如此轻松。","text_tokens":["已经","rclcpp","虚拟机","后","话题","拆解","放","机制","感觉","挺","$","变得","如果","我们","attention","hello","是否","一","minimal","布式","频繁","像","分布式系统","两个","代码","发布者","的","不是","小组","有点","能力","字符串","传感器","平台","智能","于是","、","而言","传输","遇到","减轻","配置","多","由","连接","用到","简而言之","之间","实际","繁多","实现","起来","一下","任务分配","每","这","分配","复杂","两者","：","一样","直接","几乎","就是","感器","岂","情况","处理","主要","监控","，","确保","pc","虚拟","很多","一系列","同一个","等","应用","资源","笔记","需要","编写","什么","都","learning","笔记本电脑","也","呢","topic","即可","是","ros2","或者","大家","完全","计算","功能","互通","计算能力","控制","卡顿","局域网","接下","talker","subscriber","接下来","方法","变化","请","togehterros","打通","驱动","环境","框架","一个","我","x3","export","运动","搭建","消耗","他们","没有","一句","算机","各种","这些","同一","结构","listener","适合","互联","<","不够","上边","网络","而是","上","原本","比较","所","订阅","cpp","模式","并","这种","者","系列","运行","安装","压力","具体","非常","效果","事情","没","ros","为","可能","publisher","到","不","信息","测试","发生","id","位于","控制器","用","全都","字符","会","做","examples","下来","这样","下","例程","轻松","看上","function","神奇","问题","提供","world","如何","在","了","还","分布式","小","无法","较","局域网络","则","才能","机器","远程","处于","修改","多个","体积","开发","此外","分布","准备","派","有","机器人","只要","桥接","带领","之前","任务","？","类似","一系","和","#","之一","放在","端","魅力","啦","相互","发布","毕竟","如此","并且","出现","典型","任何","里","方便","系统","member","为例","带来","将","派端","采用","中","your","ai","就","使用","局域","中有","计算机","组成","笔记本","命令行","电脑","传感","个",">","上去","感受","你","如","不同"," ","叫","电机","不过","分组","看","=","看上去","一切","节点","通信","只","经常","数据","domain","可以","好","希望","旭日","作为","加入","完成","_","run","这款","命令","以","。","togetherros","比如"],"title":"分布式通信配置","title_tokens":["分布","布式","分布式","配置","通信"]},{"location":"hhp/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。","text_tokens":["分布","机器人","不够","等","任务","拆解","？","上","如果","放在","计算","运行","功能","压力","出现","布式","里","计算能力","系统","将","卡顿","中","的","到","不是","计算机","能力","情况","。","全都","智能","平台","、","会","遇到","减轻"," ","多","一个","繁多","实现","经常","任务分配","这","可以","分配","分布式","算机","机器","就是","多个","这些","分布式系统","岂","处理","，"],"title":"分布式通信配置","title_tokens":["分布","布式","分布式","配置","通信"]},{"location":"hhp/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_2","text":"什么叫分布式？ 机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如在这款机器人系统中，就有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用旭日派作为控制器，主要实现传感器驱动、电机控制、AI应用等功能，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个计算平台之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过TogehterROS都已经为我们准备好了，我们只需要在每一个计算上配置好TogehterROS或者ROS2的环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下分布式系统的魅力。","text_tokens":["已经","放","挺","我们","一","布式","两个","分布式系统","的","有点","传感器","平台","于是","、","传输","由","多","减轻","配置","之间","实现","起来","每","这","分配","复杂","就是","感器","主要","监控","，","等","应用","资源","笔记","需要","什么","都","笔记本电脑","是","ros2","或者","大家","完全","计算","功能","控制","接下","接下来","变化","togehterros","驱动","环境","框架","一个","运动","消耗","算机","各种","这些","结构","适合","上边","原本","上","比较","这种","压力","非常","为","可能","到","不","信息","位于","控制器","做","下来","下","看上","在","了","还","分布式","小","较","机器","远程","体积","开发","此外","分布","准备","派","有","机器人","带领","？","任务","之一","魅力","相互","毕竟","并且","典型","任何","方便","系统","将","采用","中","ai","就","计算机","组成","笔记本","电脑","传感","上去","感受","不同","叫"," ","电机","不过","看上去","节点","通信","只","数据","可以","好","旭日","作为","这款","。","比如"],"title":"分布式通信","title_tokens":["布式","分布","通信","分布式"]},{"location":"hhp/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_3","text":"旭日派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function # 旭日派端 $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function # PC端 神奇的事情就这样发生了，旭日X3派上安装的是TogetherROS，我的电脑上安装的是ROS2，他们只要处于同一网络中，就可以实现通信了，感觉就像在一个电脑里一样。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["已经","rclcpp","虚拟机","后","话题","感觉","$","如果","我们","attention","minimal","像","两个","的","小组","能力","平台","而言","连接","配置","简而言之","之间","一下","实现","这","一样","直接","虚拟","确保","pc","，","很多","同一个","需要","什么","都","也","呢","是","ros2","计算","互通","局域网","接下","subscriber","接下来","请","打通","一个","我","x3","他们","算机","同一","互联","网络","而是","上","所","模式","并","安装","具体","效果","事情","为","publisher","发生","到","不","测试","用","会","做","examples","下来","这样","function","神奇","问题","在","了","无法","局域网络","处于","修改","只要","派","桥接","？","和","#","端","member","里","带来","派端","将","中","中有","就","使用","局域","命令行","计算机","个","电脑","你","如"," ","不过","分组","通信","可以","希望","旭日","完成","_","run","命令","。","togetherros"],"title":"分布式网络搭建","title_tokens":["搭建","分布","网络","布式","分布式"]},{"location":"hhp/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_4","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和旭日X3派端中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["<","同一个","机制","类似","$","和","如果","我们","即可","ros2","计算","没","派端","将","中","ros","your","就","的","到","小组","计算机","无法","id","电脑",">","不同"," ","配置","分组","=","一个","这样","x3","export","通信","实现","提供","问题","domain","两者","可以","在","了","分配","旭日","：","一句","加入","_","一样","算机","才能","处于","则","同一","。","，"],"title":"分布式网络分组","title_tokens":["分布","网络","布式","分布式","分组"]},{"location":"hhp/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_5","text":"之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 以话题通信为例，旭日派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串，我们看下效果如何。 $ ros2 run learning_topic_cpp talker # 旭日派端 $ ros2 run learning_topic_cpp listener # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，我们几乎不需要任何配置，代码也不需要做任何修改，一切都会变得如此轻松。","text_tokens":["话题","$","变得","hello","我们","是否","布式","频繁","代码","发布者","的","字符串","配置","用到","实际","几乎","直接","情况","pc","，","一系列","需要","编写","都","learning","topic","也","呢","ros2","talker","方法","没有","listener","网络","订阅","cpp","者","系列","效果","ros","测试","不","字符","会","做","例程","下","轻松","问题","world","如何","在","了","分布式","机器","修改","开发","之前","分布","派","机器人","？","一系","类似","#","端","啦","发布","如此","任何","为例","派端","中","使用","电脑"," ","看","一切","通信","可以","好","旭日","作为","_","run","以","。"],"title":"话题分布式通信","title_tokens":["分布","话题","布式","分布式","通信"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/","text":"数字输入与输出 数字输入与输出是最常用的一种外设通信方式，虽然每一个端口只有0和1两种状态，但却可以组合出各种各样的变化。 数字输入与输出原理 数字输入与输出，也称为通用输入输出，全称是General-purpose input/output，大部分情况下，我们都会用简称GPIO GPIO的功能，主要是指这个管脚可以作为数字信号的输入或者输出使用，到底是输入还是输出呢，这需要我们使用系统寄存器来进行配置。 当GPIO被设置为输入模式时，就可以读取这个管脚上的电平高低，从而实现读取外部信号的功能，比如外部按键的信号，就是这样读取的。 当GPIO被设置为输出模式时，我们就可以主动改变管脚的电平高低了，这样就能通过电平的变化，控制外部的设备，比如点亮或者熄灭一个LED灯。 除此之外，一些IO口还可以配置成其他功能，比如PWM输出，串口通信等等。 关于旭日X3派的管脚定义，大家可以参考这张图，他会显示每个管脚具体可以实现什么功能。 这里需要说明一点，旭日X3派的管脚序号定义有三种编码方式： 第一种就是Board编码，这种就是按照主板上管脚排针编号，分别对应1~40号排针。 第二种就是BCM编码，这种方式是参考 Broadcom SOC 的通道编号，侧重CPU寄存器，在使用BCM库或者使用python编程时，常采用的一种编码方式。 第三种就是X3编码，可以理解为是旭日X3派自己的编码方式，在使用旭日派自己的驱动库编程时，会使用到这种编码。 大家在后续编程开发中，需要结合函数接口的说明，使用对应的引脚编号，不然可能会出现意料之外的问题。 引脚复用配置工具 虽然从硬件上看，扩展出来的引脚只有40个，不过大部分引脚还可以配置成多种功能，这样延伸出来变化可就多了，那如何配置引脚的不同功能呢？ 我们可以使用旭日X3派中提供的srpi-config工具进行配置。 直接在终端中输入这个指令，就可以看到这样的窗口，okay配置对应管脚为专用功能，disabled配置对应管脚为GPIO模式，按照自己的需要进行配置即可，配置完成后重启才会生效。 了解了GPIO的概念，接下来我们就要开始编程啦。 数字输入编程 首先我们来看下最基本的数字输入测试，读取一个按键的状态。 硬件接线 我们将按键的一边连接到旭日X3派的38号引脚上，这是一个GPIO的接口，另一边连接到39号引脚，也就是GND。 原理很简单，按键没按下时，导线是断开的，GPIO是默认的状态，按键按下后，导线就会导通，GPIO的状态变成了GND。 这样，我们就可以通过电平的变化，知道按键的状态啦。 运行例程 我们不妨来运行一下，看下实际效果是不是这样。 $ sudo python3 simple_input.py 我们将一个按键开关接到对应的管脚上， 然后连接到旭日X3PI当中，运行刚才的程序。之后我们按下或是松开按键时，他都会打印出对应的电平变化。 按下显示的就是LOW，也就是低电平，松开就是HIGH，也就是高电平。 代码解析 数字输入的功能实现啦，我们来看下代码是如何实现的。 simple_input.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 input_pin = 38 # BOARD 编码 38 def main (): prev_value = None # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输入模式 GPIO . setup ( input_pin , GPIO . IN ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : # 读取管脚电平 value = GPIO . input ( input_pin ) if value != prev_value : if value == GPIO . HIGH : value_str = \"HIGH\" else : value_str = \"LOW\" print ( \"Value read from pin {} : {} \" . format ( input_pin , value_str )) prev_value = value time . sleep ( 1 ) finally : GPIO . cleanup () if __name__ == '__main__' : main () 我们在Python中需要引入X3Pi的GPIO库，从而使用对应的GPIO功能。 主函数里首先需要定义了一个变量来存储这个管脚的电平信号。 进行初始化，设置管脚的编码模式为BOARD模式，之后定义输入用的管脚，这里使用的是BOARD编码，因为他是第38个管脚，所以为38号。 之后的话就会进入到循环当中，这样的一个函数就可以读出当前的电平值。 没有按下按键的时候，38管脚和GND是断开的，他就是高电平，按下按键时，就和GND导通了，这个管脚就会编程低电平。 如果电平值和上一次存储的不一致，后面的判断就会判断出是升高还是降低，最后会把结果打印出来。 松开按键时同理。 数字输出编程 GPIO不止有输入功能，还有输出功能，大家应该经常看到电子设别上的LED灯吧，这就是典型的IO输出控制的设备，我们也来试一试。 硬件接线 我们将一个LED灯的正极连接到了2号引脚，这是5V电源，用来给LED供电的，不过LED电阻小，为了不至于烧坏，我们最好还是在电路中串联一个电阻来限制电流大小。 接下来，当LED的负极接到GND，也就是电源的0V上时，LED两边会因为有电势差而被点亮；当LED的负极也连接到高电平，也就是5V的时候，会因为两边没有电势差，也就不会被点亮。 这个负极的电平信号我们就用GPIO来输出，所以我们把LED的负极连接到任意的GPIO引脚上，比如38号，将这个引脚设置为输出模式，当输出高电平时，灯就会熄灭，输出低电平，灯就会被点亮。 把这两个动作放到一个循环中，就可以实现闪烁的功能啦。 运行示例程序 快来运行例程试一试吧，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行程序，就可以看到这个LED就会开始闪烁了。 $ sudo python3 simple_input.py 代码解析 simple_out.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 output_pin = 38 # BOARD 编码 38 def main (): # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输出模式，并且初始化为高电平 GPIO . setup ( output_pin , GPIO . OUT , initial = GPIO . HIGH ) # 记录当前管脚状态 curr_value = GPIO . HIGH print ( \"Starting demo now! Press CTRL+C to exit\" ) try : # 间隔1秒时间，循环控制LED灯亮灭 while True : time . sleep ( 1 ) GPIO . output ( output_pin , curr_value ) curr_value ^= GPIO . HIGH finally : GPIO . cleanup () if __name__ == '__main__' : main () 数字输入与输出集成 学习了GPIO的输入与输出功能后，我们就可以做一些自动化的功能了。 硬件接线 比如我们同时连接一个按键和LED灯，尝试实现按键被按下，灯被点亮，松开，灯熄灭，这样的功能。 运行示例程序 我们通过这个例程来试一试效果如何？ $ sudo python3 button_led.py 我们来看一下具体的操作，同样的，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。按下按键后，就可以看到LED被点亮了，松开之后，LED就熄灭了。 代码解析 button_led.py #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道： # 36号作为输出，可以点亮一个LED # 38号作为输入，可以接一个按钮 led_pin = 36 # BOARD 编码 36 but_pin = 38 # BOARD 编码 38 # 禁用警告信息 GPIO . setwarnings ( False ) def main (): prev_value = None # Pin Setup: GPIO . setmode ( GPIO . BOARD ) # BOARD pin-numbering scheme GPIO . setup ( led_pin , GPIO . OUT ) # LED pin set as output GPIO . setup ( but_pin , GPIO . IN ) # Button pin set as input # Initial state for LEDs: GPIO . output ( led_pin , GPIO . LOW ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : curr_value = GPIO . input ( but_pin ) if curr_value != prev_value : GPIO . output ( led_pin , curr_value ) prev_value = curr_value print ( \"Outputting {} to Pin {} \" . format ( curr_value , led_pin )) time . sleep ( 1 ) finally : GPIO . cleanup () # cleanup all GPIO if __name__ == '__main__' : main () 基本的配置还是一样的，引入基本的库，然后设置为BOARD模式，然后初始化两个管脚，一个用来读取按键的通断，一个用来控制LED的亮灭，之后只需要判断按键的状态来做出对应的控制LED的动作就可以了。","text_tokens":["最","自己","却","import","代码","烧坏","变量","实际","一下","设别","setmode","usr","一样","直接","in","输出","大部分","exit","主要","终端","示例","了解","也","读取","分别","即可","判断","编程","同样","读出","时间","bcm","通过","接下来","断开","变化","看到","pin","time","是不是","x3pi","x3","只有","时","电阻","动作","串口","寄存器","finally","一边","/","延伸","__","序号","一致","c","主板","'","没","high","吧","不止","信息","参考","另一边","true","后面","应该","所以","starting","不然","值","做出","试一试",".","接到","开发","sudo","负极","有","生效","40","管脚","尝试","#","导通","一种","0","并且","简单","各样","不妨","主","false","；","把","个","张图","还有","不同","输入输出","看","=","显示","led","灭","可以","旭日","第二种","存储","他会","意料之外","原理","比如","接","$","5v","改变","接口","else","常用","可","按键","三种","}","多种","input","第三","两个","soc","的话","秒","输入","接线","连接","多","集成","警告","39","出来","之后","now","：","all","就是","两种","同理","到底","，","他","python","编码","什么","as","各种各样","通断","端口","是","工具","功能","扩展","leds","控制","from","接下","setwarnings","那","simple",",","最后","编码方式","cleanup","but","硬件","专用","引入","main","禁用","来","放到","大部","二种","general","disabled","程序","循环","不至于","低电平","button","开始","if","while","str","快","效果","purpose","io","okay","后续","简称","board","36","output","下来","一些","大小","问题","如何","函数","hobot","还","设备","两边","结合","demo","主动","通道","？","+","和","除此","才","称为","curr","srpi","里","系统","当中","间隔","使用","就","电流","^","关于","知道","2","只","format","bin","pwm","完成","_","编号","串联","实物","高电平","指令","try","后","0v","py","一次","这个","说明","被","亮","引脚","号","初始","虽然","不是","出是","打印","电势","进行","变成","指","每","这","press","常","窗口","情况","第一种","env",")","需要","这里","开关","~","供电","组合","大家","寄存","设置","1","出","自动化","解析","scheme","从","驱动","一个","而","数字","第二","print","low","按","各种","def","但","数字信号","这种","-","通用","read","numbering","侧重","除此之外","对应","测试","不","用","外设","会","每个","做","方式","定义","或是","电平","这样","例程","当","从而","首先","同时","限制","排针","一点","因为","重启","降低","set","任意","状态","信号","记录","为了","概念","出现","典型","高低","实际效果","value","采用","中",":","意料","正极","name"," ","不过","这是","通信","经常","for","prev","。","setup","电路","还是","第一","如果","第三种","我们","升高","很","成","broadcom","结果","的","不会","灯亮","部分","初始化","最好","配置","电势差","学习","实现","其他","口","initial","操作","导线","然后","就要","来看","都","呢","或者","gnd","自动","熄灭","进入","默认","用来","cpu","点亮","全称","复用","理解","没有","gpio","之外","等等","!","(","上","模式","给","电子","当前","运行","具体","python3","外部","至于","为","刚才","可能","ctrl","库","到","松开","时候","out","第","下","提供","灯","none","在","了","小","按下","{","派","电源","38","与","啦","按钮","将","会导通","\"","闪烁","state","to","按照","能","基本","config","作为","sleep","上时","outputting"],"title":"数字输入与输出","title_tokens":["数字","与","输出","输入"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_1","text":"数字输入与输出是最常用的一种外设通信方式，虽然每一个端口只有0和1两种状态，但却可以组合出各种各样的变化。","text_tokens":["但","最","状态","和","与","各种各样","一种","端口","是","0","组合","常用","却","各样","1","的","虽然","出","输入","变化","外设","方式","一个","通信","每","只有","可以","数字","两种","各种","输出","。","，"],"title":"数字输入与输出","title_tokens":["数字","与","输出","输入"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_2","text":"数字输入与输出，也称为通用输入输出，全称是General-purpose input/output，大部分情况下，我们都会用简称GPIO GPIO的功能，主要是指这个管脚可以作为数字信号的输入或者输出使用，到底是输入还是输出呢，这需要我们使用系统寄存器来进行配置。 当GPIO被设置为输入模式时，就可以读取这个管脚上的电平高低，从而实现读取外部信号的功能，比如外部按键的信号，就是这样读取的。 当GPIO被设置为输出模式时，我们就可以主动改变管脚的电平高低了，这样就能通过电平的变化，控制外部的设备，比如点亮或者熄灭一个LED灯。 除此之外，一些IO口还可以配置成其他功能，比如PWM输出，串口通信等等。 关于旭日X3派的管脚定义，大家可以参考这张图，他会显示每个管脚具体可以实现什么功能。 这里需要说明一点，旭日X3派的管脚序号定义有三种编码方式： 第一种就是Board编码，这种就是按照主板上管脚排针编号，分别对应1~40号排针。 第二种就是BCM编码，这种方式是参考 Broadcom SOC 的通道编号，侧重CPU寄存器，在使用BCM库或者使用python编程时，常采用的一种编码方式。 第三种就是X3编码，可以理解为是旭日X3派自己的编码方式，在使用旭日派自己的驱动库编程时，会使用到这种编码。 大家在后续编程开发中，需要结合函数接口的说明，使用对应的引脚编号，不然可能会出现意料之外的问题。","text_tokens":["自己","还是","第一","改变","第三种","我们","接口","这个","成","说明","被","引脚","按键","三种","broadcom","input","号","第三","的","soc","输入","部分","配置","进行","实现","指","这","其他","：","口","常","就是","输出","大部分","情况","主要","到底","第一种","，","python","需要","编码","都","什么","这里","也","读取","呢","分别","~","是","或者","大家","寄存","设置","功能","编程","熄灭","控制","bcm","1","通过","变化","编码方式","cpu","点亮","全称","驱动","一个","x3","理解","gpio","来","数字","大部","时","general","第二","之外","寄存器","串口","等等","二种","/","数字信号","序号","上","模式","这种","主板","-","通用","具体","外部","purpose","侧重","除此之外","io","对应","为","可能","库","到","参考","后续","用","简称","board","会","每个","output","方式","定义","一些","电平","这样","下","当","灯","从而","问题","不然","函数","在","了","还","设备","结合","排针","一点","开发","派","有","主动","通道","40","管脚","除此","与","一种","称为","信号","出现","高低","系统","采用","中","使用","就","意料","张图","关于","输入输出"," ","按照","能","显示","led","通信","可以","pwm","作为","旭日","第二种","编号","他会","意料之外","。","比如"],"title":"数字输入与输出原理","title_tokens":["数字","与","输出","原理","输入"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_3","text":"虽然从硬件上看，扩展出来的引脚只有40个，不过大部分引脚还可以配置成多种功能，这样延伸出来变化可就多了，那如何配置引脚的不同功能呢？ 我们可以使用旭日X3派中提供的srpi-config工具进行配置。 直接在终端中输入这个指令，就可以看到这样的窗口，okay配置对应管脚为专用功能，disabled配置对应管脚为GPIO模式，按照自己的需要进行配置即可，配置完成后重启才会生效。 了解了GPIO的概念，接下来我们就要开始编程啦。","text_tokens":["后","自己","我们","这个","成","可","引脚","多种","的","虽然","部分","输入","多","配置","进行","出来","直接","窗口","大部分","，","终端","了解","就要","需要","呢","即可","工具","编程","功能","扩展","接下","那","接下来","变化","看到","从","硬件","专用","x3","只有","gpio","大部","disabled","延伸","上","模式","-","开始","对应","为","okay","会","下来","这样","提供","如何","在","了","还","派","重启","生效","？","40","管脚","才","啦","概念","srpi","中","就","使用","个","不同"," ","看","按照","不过","config","可以","旭日","完成","。","指令"],"title":"引脚复用配置工具","title_tokens":["工具","引脚","复用","配置"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_4","text":"首先我们来看下最基本的数字输入测试，读取一个按键的状态。","text_tokens":["首先","。","，","测试","最","数字","按键","来看","状态","读取","我们","的","下","一个","基本","输入"],"title":"数字输入编程","title_tokens":["数字","编程","输入"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_5","text":"我们将按键的一边连接到旭日X3派的38号引脚上，这是一个GPIO的接口，另一边连接到39号引脚，也就是GND。 原理很简单，按键没按下时，导线是断开的，GPIO是默认的状态，按键按下后，导线就会导通，GPIO的状态变成了GND。 这样，我们就可以通过电平的变化，知道按键的状态啦。","text_tokens":["派","导线","后","上","38","状态","也","啦","接口","我们","很","是","gnd","引脚","简单","按键","将","号","没","默认","会导通","就","的","到","另一边","通过","。","断开","变化","连接"," ","知道","这是","39","电平","一个","下","x3","这样","变成","可以","gpio","了","旭日","时","按下","就是","按","一边","原理","，"],"title":"硬件接线","title_tokens":["接线","硬件"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_6","text":"我们不妨来运行一下，看下实际效果是不是这样。 $ sudo python3 simple_input.py 我们将一个按键开关接到对应的管脚上， 然后连接到旭日X3PI当中，运行刚才的程序。之后我们按下或是松开按键时，他都会打印出对应的电平变化。 按下显示的就是LOW，也就是低电平，松开就是HIGH，也就是高电平。","text_tokens":["他","然后","py","管脚","上","$","开关","都","低电平","也","我们","运行","python3","实际效果","效果","按键","不妨","input","将","当中","对应","刚才","high","的","不是","到","松开","出","simple","变化","连接"," ","看","会","打印","或是","显示","是不是","x3pi","电平","这样","实际","下","一下","一个","之后","来","旭日","时","_","按下","low","就是","高电平",".","。","程序","接到","，","sudo"],"title":"运行例程","title_tokens":["例程","运行"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_7","text":"数字输入的功能实现啦，我们来看下代码是如何实现的。 simple_input.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 input_pin = 38 # BOARD 编码 38 def main (): prev_value = None # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输入模式 GPIO . setup ( input_pin , GPIO . IN ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : # 读取管脚电平 value = GPIO . input ( input_pin ) if value != prev_value : if value == GPIO . HIGH : value_str = \"HIGH\" else : value_str = \"LOW\" print ( \"Value read from pin {} : {} \" . format ( input_pin , value_str )) prev_value = value time . sleep ( 1 ) finally : GPIO . cleanup () if __name__ == '__main__' : main () 我们在Python中需要引入X3Pi的GPIO库，从而使用对应的GPIO功能。 主函数里首先需要定义了一个变量来存储这个管脚的电平信号。 进行初始化，设置管脚的编码模式为BOARD模式，之后定义输入用的管脚，这里使用的是BOARD编码，因为他是第38个管脚，所以为38号。 之后的话就会进入到循环当中，这样的一个函数就可以读出当前的电平值。 没有按下按键的时候，38管脚和GND是断开的，他就是高电平，按下按键时，就和GND导通了，这个管脚就会编程低电平。 如果电平值和上一次存储的不一致，后面的判断就会判断出是升高还是降低，最后会把结果打印出来。 松开按键时同理。","text_tokens":["py","还是","一次","如果","我们","升高","else","这个","按键","import","}","input","号","结果","代码","初始","的","的话","出是","输入","初始化","变量","打印","进行","实现","出来","之后","setmode","now","：","usr","press","in","就是","同理","exit","env",")","，","他","python","需要","来看","编码","这里","as","读取","是","判断","gnd","编程","设置","功能","进入","读出","from","1","simple",",","。","最后","断开","pin","time","cleanup","硬件","x3pi","一个","引入","main","没有","gpio","来","数字","时","print","low","finally","高电平","/","!","def","循环","(","__","一致","c","上","低电平","模式","if","当前","while","str","read","'","python3","high","对应","为","ctrl","库","到","不","松开","用","时候","board","true","会","后面","定义","第","电平","这样","下","所以","starting","从而","首先","如何","hobot","none","在","函数","了","按下","值","{",".","demo","因为","通道","+","管脚","降低","38","#","和","啦","导通","信号","里","value","主","当中","中","使用","\"",":","就","把","个","name","to"," ","=","format","bin","可以","存储","_","编号","sleep","prev","setup","try"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_8","text":"GPIO不止有输入功能，还有输出功能，大家应该经常看到电子设别上的LED灯吧，这就是典型的IO输出控制的设备，我们也来试一试。","text_tokens":["有","上","也","我们","电子","大家","功能","典型","控制","io","吧","不止","的","输入","看到","还有","led","应该","设别","经常","灯","这","gpio","来","就是","设备","试一试","输出","。","，"],"title":"数字输出编程","title_tokens":["数字","编程","输出"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_9","text":"我们将一个LED灯的正极连接到了2号引脚，这是5V电源，用来给LED供电的，不过LED电阻小，为了不至于烧坏，我们最好还是在电路中串联一个电阻来限制电流大小。 接下来，当LED的负极接到GND，也就是电源的0V上时，LED两边会因为有电势差而被点亮；当LED的负极也连接到高电平，也就是5V的时候，会因为两边没有电势差，也就不会被点亮。 这个负极的电平信号我们就用GPIO来输出，所以我们把LED的负极连接到任意的GPIO引脚上，比如38号，将这个引脚设置为输出模式，当输出高电平时，灯就会熄灭，输出低电平，灯就会被点亮。 把这两个动作放到一个循环中，就可以实现闪烁的功能啦。","text_tokens":["0v","电路","还是","5v","我们","这个","被","引脚","号","两个","的","烧坏","不会","最好","连接","电势","电势差","实现","这","就是","输出","，","也","供电","gnd","设置","功能","熄灭","接下","接下来","。","用来","点亮","一个","而","没有","gpio","来","放到","电阻","时","动作","高电平","循环","上","不至于","低电平","模式","给","至于","为","到","用","时候","会","下来","大小","电平","所以","当","灯","限制","在","了","小","两边","接到","因为","负极","有","电源","任意","38","啦","信号","为了","将","中","；","就","电流","闪烁","把","正极"," ","不过","这是","led","2","可以","串联","上时","比如"],"title":"硬件接线","title_tokens":["接线","硬件"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_10","text":"快来运行例程试一试吧，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行程序，就可以看到这个LED就会开始闪烁了。 $ sudo python3 simple_input.py","text_tokens":["然后","py","$","开始","这个","运行","设置","python3","快","将","input","刚才","吧","就","的","到","闪烁","simple","看到","连接","按照","会"," ","x3pi","led","例程","可以","来","了","完成","_","实物","试一试",".","。","程序","，","sudo"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_11","text":"simple_out.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 output_pin = 38 # BOARD 编码 38 def main (): # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输出模式，并且初始化为高电平 GPIO . setup ( output_pin , GPIO . OUT , initial = GPIO . HIGH ) # 记录当前管脚状态 curr_value = GPIO . HIGH print ( \"Starting demo now! Press CTRL+C to exit\" ) try : # 间隔1秒时间，循环控制LED灯亮灭 while True : time . sleep ( 1 ) GPIO . output ( output_pin , curr_value ) curr_value ^= GPIO . HIGH finally : GPIO . cleanup () if __name__ == '__main__' : main ()","text_tokens":["py","import","初始","的","秒","灯亮","初始化","setmode","now","：","usr","initial","press","输出","exit",")","env","，","编码","as","设置","控制","时间","1","simple",",","pin","time","cleanup","硬件","main","gpio","print","finally","高电平","/","!","def","循环","(","__","c","模式","if","当前","while","'","python3","high","为","ctrl","board","true","output","out","定义","电平","starting","hobot",".","demo","通道","+","管脚","38","#","状态","记录","并且","curr","value","间隔","使用","\"",":","^","name","to"," ","=","led","灭","bin","_","编号","sleep","setup","try"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_12","text":"学习了GPIO的输入与输出功能后，我们就可以做一些自动化的功能了。","text_tokens":["自动化","。","功能","gpio","了","后","我们","可以","做","自动","就","与","输出","一些","学习","的","，","输入"],"title":"数字输入与输出集成","title_tokens":["数字","集成","与","输出","输入"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_13","text":"比如我们同时连接一个按键和LED灯，尝试实现按键被按下，灯被点亮，松开，灯熄灭，这样的功能。","text_tokens":["比如","尝试","和","我们","功能","被","熄灭","按键","的","松开","连接","点亮","led","这样","一个","下","实现","灯","同时","按","。","，"],"title":"硬件接线","title_tokens":["接线","硬件"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_14","text":"我们通过这个例程来试一试效果如何？ $ sudo python3 button_led.py 我们来看一下具体的操作，同样的，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。按下按键后，就可以看到LED被点亮了，松开之后，LED就熄灭了。","text_tokens":["后","然后","？","py","来看","$","button","我们","这个","设置","运行","具体","python3","同样","被","熄灭","效果","按键","将","刚才","就","的","到","松开","通过","看到","连接"," ","按照","点亮","led","x3pi","例程","一下","之后","如何","可以","来","了","_","完成","按下","实物","试一试",".","。","程序","操作","，","sudo"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_15","text":"button_led.py #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道： # 36号作为输出，可以点亮一个LED # 38号作为输入，可以接一个按钮 led_pin = 36 # BOARD 编码 36 but_pin = 38 # BOARD 编码 38 # 禁用警告信息 GPIO . setwarnings ( False ) def main (): prev_value = None # Pin Setup: GPIO . setmode ( GPIO . BOARD ) # BOARD pin-numbering scheme GPIO . setup ( led_pin , GPIO . OUT ) # LED pin set as output GPIO . setup ( but_pin , GPIO . IN ) # Button pin set as input # Initial state for LEDs: GPIO . output ( led_pin , GPIO . LOW ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : curr_value = GPIO . input ( but_pin ) if curr_value != prev_value : GPIO . output ( led_pin , curr_value ) prev_value = curr_value print ( \"Outputting {} to Pin {} \" . format ( curr_value , led_pin )) time . sleep ( 1 ) finally : GPIO . cleanup () # cleanup all GPIO if __name__ == '__main__' : main () 基本的配置还是一样的，引入基本的库，然后设置为BOARD模式，然后初始化两个管脚，一个用来读取按键的通断，一个用来控制LED的亮灭，之后只需要判断按键的状态来做出对应的控制LED的动作就可以了。","text_tokens":["py","接","还是","亮","按键","import","}","号","input","两个","初始","的","输入","初始化","配置","警告","之后","setmode","now","：","usr","initial","press","in","all","一样","输出","exit",")","env","，","然后","需要","编码","as","读取","通断","判断","设置","leds","控制","1","setwarnings",",","。","用来","pin","点亮","time","but","scheme","cleanup","一个","引入","main","gpio","禁用","来","print","动作","low","finally","/","!","def","(","__","c","模式","button","-","if","while","'","numbering","python3","对应","为","ctrl","库","信息","board","true","36","output","out","定义","starting","hobot","none","了","做出","{",".","demo","通道","+","管脚","set","38","#","状态","按钮","curr","false","value","使用","\"",":","就","state","name","to"," ","=","led","基本","format","灭","bin","只","可以","作为","_","for","sleep","prev","setup","outputting","try"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/","text":"PWM脉冲宽度调制 我们已经可以用GPIO控制LED灯一闪一闪亮晶晶了，这样只有亮和灭的状态似乎还是太简单了，能不能对LED的亮度进行调整呢？ 当然没问题，这就要用到接下来学习的PWM脉冲宽度调制了。 PWM脉冲宽度调制原理 在GPIO的数字输入和输出模式中，只有高低电平，高电平一般是3.3V或者5V，低电平就是0V，如果我想要一个折中一点的电压怎么办呢？PWM大家了解一下。 PWM，全称是脉冲宽度调制 ， 是一种对模拟信号电平进行数字编码的方法，通过高分辨率计数器，调制出一定占空比的方波，通过这种方式对模拟信号的电平进行编码。 通俗点来说，如果我们有一个10W的灯泡，在一个小时中亮了半个小时，那我们宏观来看，它在这一个小时中的功率就是5W，这样就相当于是它的电压被降低了。而我们还可以通过改变这一个小时中，灯泡被点亮的时长，来等效出不同的电压。 然后，我们把一个小时缩短为很小的一个时间，到达一定的微分程度，表现出来的就是电压的变化，而这个很小的时间，就是PWM频率的倒数，被点亮的时间在这个很小的时间中所占的百分比就叫做占空比。 这里大家也要注意，虽然PWM在尽力呈现出模拟信号的样子，但本质还是数字信号，因为在给定的某一任何时刻，引脚只能高电平或者低电平。 通过PWM技术，可以让数字电路产生类似模拟信号的效果，从而实现类似的无级控制，比如风扇的转速，或者屏幕的亮度，很多都是通过PWM技术实现的调节。 PWM编程 接下来我们就来试一试，通过PWM让一个LED实现不同亮度的变化，也就是我们常见的呼吸灯了。 硬件接线 还是用这个LED灯，一端连接电阻，再到5V高电平的引脚，另外一端，接到33号引脚的PWM接口。 运行示例程序 大家先来运行例程，看看效果如何。 $ sudo python3 simple_pwm.py 我们来看一下实物的操作，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。就可以看到这样的一个呼吸灯的效果了。 代码解析 simple_pwm.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 支持PWM的管脚: 32 and 33, 在使用PWM时，必须确保该管脚没有被其他功能占用 output_pin = 33 def main (): # Pin Setup: # Board pin-numbering scheme GPIO . setmode ( GPIO . BOARD ) # 支持的频率范围： 48KHz ~ 192MHz p = GPIO . PWM ( output_pin , 48000 ) # 初始占空比 25%， 先每0.25秒增加5%占空比，达到100%之后再每0.25秒减少5%占空比 val = 25 incr = 5 p . ChangeDutyCycle ( val ) p . start ( val ) print ( \"PWM running. Press CTRL+C to exit.\" ) try : while True : time . sleep ( 0.25 ) if val >= 100 : incr = - incr if val <= 0 : incr = - incr val += incr p . ChangeDutyCycle ( val ) finally : p . stop () GPIO . cleanup () if __name__ == '__main__' : main () 一样的引入GPIO的库，然后设置管脚编码模式为BOARD，然后创建一个PWM的实例化对象p，同时设置他的频率，之后就可以通过ChangeDutyCycle来改变他的占空比，在循环当中，占空比大于等于100时，就会以5%的梯度减小；当小于等于0时，就会以5%的梯度增大。","text_tokens":["模拟","相当于","当然","import","代码","脉冲","用到","任何时刻","调整","调制","一下","setmode","化","usr","一样","输出","exit","支持","很多","changedutycycle","示例","了解","占空比","也","stop","编程","对","时间","占","通过","接下来","变化","看到","pin","常见","time","10w","val","中所","x3pi","只有","电阻","时","finally","时刻","/","先","__","c","倒数","百分比","48khz","'","没","让","true","减小","太","占用","5","试一试","32","风扇",".","25%","接到","sudo","有","呈现","管脚","类似","#","一种","范围","0","简单","；","把","晶晶","不同","亮晶晶","=","led","灭","可以","中亮","以","原理","比如","宽度","当于","$","5v","改变","时长","接口","一","技术","高分","实例","秒","100%","输入","and","接线","连接","很小","出来","之后","：","就是","，","他","只能","本质","编码","as","是","数字电路","start","尽力","功能","控制","接下","那","simple",",","通俗","必须","48000","cleanup","折中","创建","硬件","引入","表现","main","来","程序","缩短","循环","对象","低电平","if","while","小于","功率","效果","该","灯一闪","100","无级","board","output","下来","v","问题","如何","hobot","还","它","+","？","不能","和","任何","呼吸","高分辨率","当中","就","使用","0.25","现出",">","达到","微分","高","半个","点","bin","pwm","_","要","完成","实物","高电平","try","5%","已经","0v","一端","py","何时","incr","这个","被","亮","引脚","号","初始","虽然","想要","某","5w","进行","亮度","梯度","每","这","减少","屏幕","到达","press","env",")","这里","~","大家","设置","出","样子","解析","scheme","一个","我","而","分辨","数字","print","def","但","25","数字信号","这种","-","一定","numbering","看看","调节","用","会","转速","方式","电平","这样","例程","当","从而","同时","产生","程度","增大","running","一点","因为","模拟信号","降低","状态","灯泡","信号","等效","中",":","计数器","name"," ","百分","再","频率","。","setup","似乎","电路","还是","如果","我们","分辨率","3.3","的","计数","大于","学习","实现","其他","呈现出","一般","操作","确保","然后","就要","怎么办","数字编码","来看","都","呢","或者","注意","192mhz","方法","点亮","全称","辨率","数字电","电压","没有","gpio","!","<","相当","(","等于","模式","小时","p","运行","python3","给定","为","刚才","ctrl","到","库","灯","在","了","一闪","增加","来说","将","宏观","方波","\"","另外","to","按照","怎么","能","33","sleep","叫做"],"title":"PWM脉冲宽度调制","title_tokens":["pwm","调制","宽度","脉冲"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm","text":"我们已经可以用GPIO控制LED灯一闪一闪亮晶晶了，这样只有亮和灭的状态似乎还是太简单了，能不能对LED的亮度进行调整呢？ 当然没问题，这就要用到接下来学习的PWM脉冲宽度调制了。","text_tokens":["已经","似乎","就要","？","宽度","还是","不能","状态","和","呢","我们","亮","简单","当然","控制","对","没","接下","的","灯一闪","晶晶","用","接下来"," ","亮晶晶","能","脉冲","下来","用到","太","led","进行","这样","亮度","调整","学习","调制","灭","问题","只有","这","可以","gpio","了","pwm","一闪","。","，"],"title":"PWM脉冲宽度调制","title_tokens":["pwm","调制","宽度","脉冲"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm_1","text":"在GPIO的数字输入和输出模式中，只有高低电平，高电平一般是3.3V或者5V，低电平就是0V，如果我想要一个折中一点的电压怎么办呢？PWM大家了解一下。 PWM，全称是脉冲宽度调制 ， 是一种对模拟信号电平进行数字编码的方法，通过高分辨率计数器，调制出一定占空比的方波，通过这种方式对模拟信号的电平进行编码。 通俗点来说，如果我们有一个10W的灯泡，在一个小时中亮了半个小时，那我们宏观来看，它在这一个小时中的功率就是5W，这样就相当于是它的电压被降低了。而我们还可以通过改变这一个小时中，灯泡被点亮的时长，来等效出不同的电压。 然后，我们把一个小时缩短为很小的一个时间，到达一定的微分程度，表现出来的就是电压的变化，而这个很小的时间，就是PWM频率的倒数，被点亮的时间在这个很小的时间中所占的百分比就叫做占空比。 这里大家也要注意，虽然PWM在尽力呈现出模拟信号的样子，但本质还是数字信号，因为在给定的某一任何时刻，引脚只能高电平或者低电平。 通过PWM技术，可以让数字电路产生类似模拟信号的效果，从而实现类似的无级控制，比如风扇的转速，或者屏幕的亮度，很多都是通过PWM技术实现的调节。","text_tokens":["0v","宽度","模拟","电路","当于","还是","5v","何时","如果","改变","时长","我们","这个","一","被","技术","分辨率","高分","相当于","3.3","引脚","的","虽然","输入","想要","计数","某","5w","脉冲","任何时刻","进行","亮度","调制","一下","实现","很小","出来","这","屏幕","到达","呈现出","就是","输出","一般","，","很多","然后","了解","怎么办","只能","数字编码","来看","编码","占空比","这里","本质","都","也","呢","是","数字电路","或者","大家","尽力","注意","控制","对","时间","占","出","样子","那","通过","通俗","方法","变化","点亮","全称","10w","折中","辨率","中所","叫做","一个","我","而","数字电","分辨","表现","只有","电压","gpio","来","数字","高电平","时刻","缩短","但","相当","数字信号","倒数","低电平","模式","小时","这种","百分比","一定","功率","效果","给定","让","为","调节","无级","转速","方式","电平","这样","v","从而","在","了","还","产生","程度","风扇","一点","因为","有","模拟信号","呈现","它","？","降低","类似","和","灯泡","一种","来说","信号","等效","任何","高分辨率","宏观","中","方波","就","把","计数器","现出","微分","不同"," ","怎么","高","半个","点","百分","可以","pwm","要","中亮","频率","。","比如"],"title":"PWM脉冲宽度调制原理","title_tokens":["pwm","宽度","脉冲","原理","调制"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm_2","text":"接下来我们就来试一试，通过PWM让一个LED实现不同亮度的变化，也就是我们常见的呼吸灯了。","text_tokens":["也","我们","呼吸","让","接下","的","就","通过","接下来","变化","不同","常见","下来","led","一个","亮度","实现","灯","来","了","pwm","就是","试一试","。","，"],"title":"PWM编程","title_tokens":["pwm","编程"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_1","text":"还是用这个LED灯，一端连接电阻，再到5V高电平的引脚，另外一端，接到33号引脚的PWM接口。","text_tokens":["一端","还是","5v","接口","这个","引脚","号","的","到","用","另外","。","连接","led","电平","再","33","灯","电阻","pwm","高电平","接到","，"],"title":"硬件接线","title_tokens":["接线","硬件"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_2","text":"大家先来运行例程，看看效果如何。 $ sudo python3 simple_pwm.py 我们来看一下实物的操作，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。就可以看到这样的一个呼吸灯的效果了。","text_tokens":["先","然后","py","来看","$","我们","大家","运行","设置","python3","效果","看看","呼吸","将","刚才","就","的","到","simple","看到","连接"," ","按照","x3pi","例程","这样","一个","一下","灯","如何","可以","来","了","pwm","_","完成","实物",".","。","程序","操作","，","sudo"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_3","text":"simple_pwm.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 支持PWM的管脚: 32 and 33, 在使用PWM时，必须确保该管脚没有被其他功能占用 output_pin = 33 def main (): # Pin Setup: # Board pin-numbering scheme GPIO . setmode ( GPIO . BOARD ) # 支持的频率范围： 48KHz ~ 192MHz p = GPIO . PWM ( output_pin , 48000 ) # 初始占空比 25%， 先每0.25秒增加5%占空比，达到100%之后再每0.25秒减少5%占空比 val = 25 incr = 5 p . ChangeDutyCycle ( val ) p . start ( val ) print ( \"PWM running. Press CTRL+C to exit.\" ) try : while True : time . sleep ( 0.25 ) if val >= 100 : incr = - incr if val <= 0 : incr = - incr val += incr p . ChangeDutyCycle ( val ) finally : p . stop () GPIO . cleanup () if __name__ == '__main__' : main () 一样的引入GPIO的库，然后设置管脚编码模式为BOARD，然后创建一个PWM的实例化对象p，同时设置他的频率，之后就可以通过ChangeDutyCycle来改变他的占空比，在循环当中，占空比大于等于100时，就会以5%的梯度减小；当小于等于0时，就会以5%的梯度增大。","text_tokens":["5%","py","incr","改变","被","import","实例","初始","的","秒","100%","and","大于","梯度","之后","每","其他","setmode","减少","：","化","usr","一样","press","exit","支持","确保",")","env","，","changedutycycle","他","然后","编码","占空比","as","~","start","stop","设置","功能","192mhz","simple",",","通过","。","必须","pin","48000","scheme","time","cleanup","val","创建","一个","引入","main","没有","gpio","来","时","print","finally","/","!","def","<","先","25","(","循环","__","c","等于","对象","模式","-","p","48khz","if","while","'","numbering","小于","python3","该","为","ctrl","库","100","board","true","会","output","减小","占用","当","同时","hobot","在","5","32",".","25%","增大","running","增加","+","管脚","#","范围","0","当中","；","使用","\"",":","0.25","就",">","达到","name","to"," ","=","再","33","bin","可以","pwm","_","sleep","频率","以","setup","try"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/","text":"UART串口通信 现在的传感器和执行器种类越来越多，需要和控制器传输的数据也是多种多样，只用GPIO来控制和读取的话，只有0和1的状态，未免还是有点麻烦，各种各样的通信方法也层出不穷，UART串口通信绝对是最为常用的一种。 串口通信原理 串行通信是一种通讯协议，也可以简称为串口，可以理解为数据是串成一串的，所以也就只能一位一位的发送，这样传输的速度虽然受到了限制，但是对硬件线路的要求小，只需要一对传输线，一个发送，一个接收，就可以实现双向通信了。 一般情况下，串口模块发送数据的管脚叫做TX，接收数据的管脚叫做RX。发送端发过去的数据，需要对方串口模块的接收端来接收，所以一侧发送端的TX需要连接到另外一侧的接收端RX，接收和发送在两方看来是相对的，所以我们接线的时候，要记住永远是TX引脚连接到RX引脚，接反了数据就传输不了了。 硬件连接 接下来，我们就尝试通过一个串口模块来实现电脑和旭日X3Pi的串口通信。 在接线方面，我们先交叉连接串口模块和旭日X3Pi的RX、TX，同时为了让两边具有相同的参考电平，还要将两者的GND连接到一起，然后再把串口模块连接到电脑就可以了。 运行示例程序 接下来就可以运行串口通信的例程了。 $ sudo python3 test_serial.py 实物接线完成后，在旭日X3派的终端中输入指令启动例程，很快就可以在终端中看到串口向外发送的数据了。 在串口连接的电脑中打开一个串口软件，用来接收和发送数据，设置好端口和波特率，就能看到旭日X3派发过来的数据了。我们再使用电脑的串口软件尝试下发送数据给旭日X3派，输入1234，点击发送，可以看到，X3Pi的终端这边也成功的接收到了数据并且打印出来了。 代码解析 test_serial.py： #!/usr/bin/env python3 import sys import os import time # 导入python串口库 import serial import serial.tools.list_ports def serialTest (): print ( \"List of enabled UART:\" ) os . system ( 'ls /dev/tty[a-zA-Z]*' ) uart_dev = input ( \"请输入需要测试的串口设备名:\" ) baudrate = input ( \"请输入波特率(9600,19200,38400,57600,115200,921600):\" ) try : ser = serial . Serial ( uart_dev , int ( baudrate ), timeout = 1 ) # 1s timeout except Exception as e : print ( \"open serial failed! \\n \" ) print ( ser ) print ( \"Starting demo now! Press CTRL+C to exit\" ) while True : test_data = \"AA55\" write_num = ser . write ( test_data . encode ( 'UTF-8' )) print ( \"Send: \" , test_data ) received_data = ser . read ( write_num ) . decode ( 'UTF-8' ) if received_data : print ( \"Recv: \" , received_data ) time . sleep ( 1 ) ser . close () return 0 if __name__ == '__main__' : if serialTest () != 0 : print ( \"Serial test failed!\" ) else : print ( \"Serial test success!\" ) X3Pi这边如果要使用串口，直接使用serial库就可以了，这里我们先调用系统的库，打印出当前有哪些串口，然后手动输入选择串口的设备名，再输入串口的波特率，就可以进项串口的初始化了，初始化成功之后就会进入循环。 循环中，X3Pi会每隔一秒发送一次AA55，同时还会判断是否接收到了数据，如果接收到了数据也会打印出来。","text_tokens":["38400","import","代码","有点","、","serialtest","名","usr","直接","exit","tools","终端","示例","派发","close","也","读取","绝对","发送","一秒","判断","成功","对","通过","接下来","进项","波特","看到","exception","time","x3pi","x3","只有","还要","串口","/","先","两方","__","c","za","'","让","encode","[","参考","ls","控制器","true","串成","所以","starting","对方",".","sudo","有","尝试","管脚","一起","接收端","#","一种","0","并且","send","各样","未免","把","传感","哪些","8","=","越来越","可以","一位","旭日","原理","导入","$","过来","else","常用","向外","多种","具有","input","相同","的话","输入","传感器","接线","连接","多","接收","软件","出来","记住","enabled","之后","now","：","通讯","感器","，","python","只能","as","各种各样","执行","是","端口","open","控制","接下","最为",",","921600","硬件","main","来","程序","循环","if","线路","while","os","简称","调用","下来","9600","麻烦","种类","设备","多种多样","两边","每隔","timeout","failed","串行","demo","dev","+","和","tx","系统","n","就","使用","发送数据","只","永远","except","bin","return","_","要","完成","实物","指令","try","后","py","一次","success","是否","引脚","sys","int","初始","虽然","传输","打印","tty","相对","57600","press","情况","env",")","打开","需要","这里","模块","方面","设置","一串","1","出","解析","of","要求","一个","多样","print","但是","各种","def","system","test","执行器","ports","-","read","19200","测试","会","看来","电平","这样","例程","a","同时","限制","手动","z","状态","为了","num","很快","e","中","serial",":","电脑","data","received","name"," ","再","还会","通信","数据","端发","好","。","115200","还是","如果","我们","这边","的","启动","*","初始化","aa55","实现","点击","两者","受到","只用","一般","然后","端的","双向","gnd","\\","write","进入","接收数据","过去","协议","方法","用来","交叉","请","一对","理解","gpio","双向通信","越来","!","ser","(","]","选择","给","baudrate","当前","运行","python3","1234","接反","uart","为","ctrl","层出不穷","到","库","时候","下","一侧","在","了","小","派","decode","recv","不了","现在","utf","将","\"","另外","to","波特率","能","速度","1s","rx","sleep","叫做","传输线","list"],"title":"UART异步串口通信","title_tokens":["异步","通信","串口","uart"]},{"location":"hhp/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#uart","text":"现在的传感器和执行器种类越来越多，需要和控制器传输的数据也是多种多样，只用GPIO来控制和读取的话，只有0和1的状态，未免还是有点麻烦，各种各样的通信方法也层出不穷，UART串口通信绝对是最为常用的一种。","text_tokens":["需要","还是","执行器","状态","和","也","读取","各种各样","绝对","一种","执行","现在","是","0","常用","控制","各样","uart","多种","1","的","未免","的话","有点","层出不穷","最为","传感","传感器","控制器","方法","。","传输","多","通信","麻烦","数据","只有","越来越","种类","多样","gpio","来","串口","感器","多种多样","各种","只用","越来","，"],"title":"UART串口通信","title_tokens":["通信","串口","uart"]},{"location":"hhp/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_1","text":"串行通信是一种通讯协议，也可以简称为串口，可以理解为数据是串成一串的，所以也就只能一位一位的发送，这样传输的速度虽然受到了限制，但是对硬件线路的要求小，只需要一对传输线，一个发送，一个接收，就可以实现双向通信了。 一般情况下，串口模块发送数据的管脚叫做TX，接收数据的管脚叫做RX。发送端发过去的数据，需要对方串口模块的接收端来接收，所以一侧发送端的TX需要连接到另外一侧的接收端RX，接收和发送在两方看来是相对的，所以我们接线的时候，要记住永远是TX引脚连接到RX引脚，接反了数据就传输不了了。","text_tokens":["我们","引脚","的","虽然","接线","传输","连接","接收","实现","记住","通讯","相对","受到","情况","一般","，","只能","需要","端的","也","双向","发送","模块","是","一串","对","接收数据","过去","协议","。","要求","硬件","一对","一个","理解","来","串口","但是","双向通信","两方","线路","接反","为","到","简称","时候","看来","这样","下","串成","一侧","所以","限制","在","了","小","对方","串行","不了","管脚","接收端","和","一种","tx","就","另外","发送数据"," ","速度","通信","只","rx","永远","数据","端发","可以","一位","要","叫做","传输线"],"title":"串口通信原理","title_tokens":["原理","通信","串口"]},{"location":"hhp/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_2","text":"接下来，我们就尝试通过一个串口模块来实现电脑和旭日X3Pi的串口通信。 在接线方面，我们先交叉连接串口模块和旭日X3Pi的RX、TX，同时为了让两边具有相同的参考电平，还要将两者的GND连接到一起，然后再把串口模块连接到电脑就可以了。","text_tokens":["先","然后","尝试","一起","和","模块","我们","方面","为了","gnd","tx","具有","将","让","接下","的","就","相同","到","参考","把","电脑","通过","接下来","交叉","、","接线","连接"," ","下来","x3pi","电平","一个","再","实现","通信","rx","还要","同时","两者","在","来","可以","旭日","了","串口","两边","。","，"],"title":"硬件连接","title_tokens":["连接","硬件"]},{"location":"hhp/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_3","text":"接下来就可以运行串口通信的例程了。 $ sudo python3 test_serial.py 实物接线完成后，在旭日X3派的终端中输入指令启动例程，很快就可以在终端中看到串口向外发送的数据了。 在串口连接的电脑中打开一个串口软件，用来接收和发送数据，设置好端口和波特率，就能看到旭日X3派发过来的数据了。我们再使用电脑的串口软件尝试下发送数据给旭日X3派，输入1234，点击发送，可以看到，X3Pi的终端这边也成功的接收到了数据并且打印出来了。","text_tokens":["派","终端","后","test","派发","py","尝试","$","和","过来","也","发送","我们","给","端口","成功","运行","设置","向外","python3","很快","1234","这边","并且","中","serial","接下","就","的","启动","使用","到","输入","电脑","接下来","用来","波特","看到","发送数据","接线","连接"," ","波特率","打印","能","下来","软件","接收","例程","一个","x3","再","通信","下","点击","x3pi","出来","数据","可以","在","了","好","旭日","_","串口","完成","实物",".","。","指令","，","打开","sudo"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"hhp/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_4","text":"test_serial.py： #!/usr/bin/env python3 import sys import os import time # 导入python串口库 import serial import serial.tools.list_ports def serialTest (): print ( \"List of enabled UART:\" ) os . system ( 'ls /dev/tty[a-zA-Z]*' ) uart_dev = input ( \"请输入需要测试的串口设备名:\" ) baudrate = input ( \"请输入波特率(9600,19200,38400,57600,115200,921600):\" ) try : ser = serial . Serial ( uart_dev , int ( baudrate ), timeout = 1 ) # 1s timeout except Exception as e : print ( \"open serial failed! \\n \" ) print ( ser ) print ( \"Starting demo now! Press CTRL+C to exit\" ) while True : test_data = \"AA55\" write_num = ser . write ( test_data . encode ( 'UTF-8' )) print ( \"Send: \" , test_data ) received_data = ser . read ( write_num ) . decode ( 'UTF-8' ) if received_data : print ( \"Recv: \" , received_data ) time . sleep ( 1 ) ser . close () return 0 if __name__ == '__main__' : if serialTest () != 0 : print ( \"Serial test failed!\" ) else : print ( \"Serial test success!\" ) X3Pi这边如果要使用串口，直接使用serial库就可以了，这里我们先调用系统的库，打印出当前有哪些串口，然后手动输入选择串口的设备名，再输入串口的波特率，就可以进项串口的初始化了，初始化成功之后就会进入循环。 循环中，X3Pi会每隔一秒发送一次AA55，同时还会判断是否接收到了数据，如果接收到了数据也会打印出来。","text_tokens":["115200","导入","py","一次","success","如果","我们","else","是否","38400","这边","sys","import","int","input","初始","的","*","输入","初始化","打印","serialtest","aa55","接收","名","出来","enabled","之后","tty","now","：","usr","57600","press","直接","exit",")","env","，","tools","然后","python","需要","这里","as","close","发送","也","一秒","判断","成功","\\","write","open","进入","1","出",",","进项","波特","exception","请","921600","time","of","x3pi","main","print","串口","/","!","def","先","system","(","ser","循环","__","test","]","c","za","ports","选择","-","baudrate","if","当前","while","read","'","python3","os","uart","ctrl","encode","[","库","测试","19200","到","ls","调用","true","会","9600","starting","a","同时","了","设备","每隔","timeout",".","failed","手动","demo","dev","z","decode","有","recv","+","#","0","utf","num","send","系统","n","e","中","serial","使用","\"",":","就","哪些","data","received","name","to"," ","波特率","8","=","再","还会","1s","except","bin","数据","可以","return","_","要","sleep","。","list","try"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/","text":"SPI同步串行通信 UART串口通信中的数据只能一位一位的传输，如果数据量比较大的时候，传输速率会受到很大影响，此时我们就可以考虑使用同步串行通信了，比如SPI。 SPI通信原理 SPI，全称是Serial Peripheral Interface，也就是串行外设接口，同样是一种通信协议，在很多芯片中都有集成。 相比之前学习的UART串口通信，他多了两根线，其中一个是时钟信号，另一个是设备使能信号，用来控制设备是否启用，所以也产生了主从设备的概念。 MISO ：Master Input Slave Output，主设备数据输入，从设备数据输出； MOSI ：Master Output Slave Input，主设备数据输出，从设备数据输入； SCLK ：Serial Clock，时钟信号，由主设备产生； CS ：Chip Select，从设备使能信号，由主设备控制。 这样，在一组SPI通信的系统中，可以连接多个设备，想要和哪个设备通信时，就使能这个设备，除能其他设备。 我们在开发中常见的SPI设备会有一些传感器，还有电阻屏之类的。 硬件连线 在SPI的通信中，有一个管脚负责发送，另外一个管脚负责接收，如果我们把同一组SPI的发送和接收接到一起，岂不是能接收到自己发送的数据吗？ 我们不妨来试一试，这里使用一个跳线帽直接把19，21两个SPI的通信管脚短接。 运行示例程序 大家来运行例程，看看会发生什么？ $ sudo python3 test_spi.py 在旭日X3派的终端中，输入运行例程的指令，接下来我们就可以看到通过SPI传输并收到的数据啦，相当于是左手传递给右手，自己给自己循环传输数据了。 代码解析 test_spi.py： #!/usr/bin/env python3 import sys import os import time # 导入spidev模块 import spidev def BytesToHex ( Bytes ): return '' . join ([ \"0x %02X \" % x for x in Bytes ]) . strip () def spidevTest (): # 设置spi的bus号（0, 1, 2）和片选(0, 1) spi_bus = input ( \"Please input SPI bus num:\" ) spi_device = input ( \"Please input SPI cs num:\" ) # 创建spidev类的对象以访问基于spidev的Python函数。 spi = spidev . SpiDev () # 打开spi总线句柄 spi . open ( int ( spi_bus ), int ( spi_device )) # 设置 spi 频率为 12MHz spi . max_speed_hz = 12000000 print ( \"Starting demo now! Press CTRL+C to exit\" ) # 发送 [0x55, 0xAA], 接收的数据应该也是 [0x55, 0xAA] try : while True : resp = spi . xfer2 ([ 0x55 , 0xAA ]) print ( BytesToHex ( resp )) time . sleep ( 1 ) except KeyboardInterrupt : spi . close () if __name__ == '__main__' : print ( \"List of enabled spi controllers:\" ) os . system ( 'ls /dev/spidev*' ) spidevTest () 在python中使用spidev这个库，初始化X3Pi的SPI，之后使用xerf2发送数据，同时接收数据，并打印出来，会发现打印出来的就是我们发送的。","text_tokens":["速率","自己","py","当于","$","19","spidev","如果","接口","我们","speed","影响","是否","这个","负责","跳线","收到","0xaa","传输速率","相当于","sys","一组","import","int","input","号","两个","基于","代码","初始","的","不是","0x","由主","*","sclk","输入","想要","传感器","join","初始化","访问","interface","传输","连接","多","spi","集成","打印","21","接收","学习","屏","传递","出来","enabled","之后","其他","now","：","mosi","usr","直接","in","就是","受到","考虑","输出","感器","press","exit","xerf2","岂","env",")","芯片","，","打开","很多","他","终端","master","示例","只能","python","都","这里","什么","也","close","发送","模块","是","bytes","大家","chip","设置","同样","open","控制","接收数据","数据量","协议","相比","接下","1","通过",",","接下来","。","用来","解析","看到","常见","x","%","全称","从","time","of","创建","发现","硬件","x3pi","一个","x3","main","来","时","电阻","print","串口","片选","程序","/","!","）","hz","def","相当","循环","(","system","__","test","]","比较","c","类","对象","短接","并","给","使能","通信协议","if","while","很大","大","运行","左手","python3","此时","'","controllers","os","peripheral","uart","看看","12000000","为","ctrl","发生","[","到","（","库","ls","02x","时候","两根","strip","true","resp","外设","会","output","吗","bytestohex","下来","一些","应该","这样","例程","传输数据","句柄","所以","starting","帽","函数","在","了","keyboardinterrupt","同时","除能","产生","设备","试一试","多个",".","使","另","指令","max","接到","串行","开发","sudo","之前","线","demo","派","有","dev","时钟","clock","？","管脚","右手","一起","总线","12mhz","+","和","#","device","啦","try","一种","信号","0","概念","num","0x55","select","其中","系统","哪个","不妨","主","中","；","serial","就","使用","之类",":","把","\"","传感","另外","同","还有","to","name"," ","发送数据","能","slave","=","please","并打印","miso","2","启用","通信","except","spidevtest","bin","数据","bus","可以","一位","旭日","return","_","连线","for","xfer2","sleep","cs","频率","以","同步","主从","原理","list","比如","导入"],"title":"SPI同步串行通信","title_tokens":["串行","通信","同步","spi"]},{"location":"hhp/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#spi","text":"UART串口通信中的数据只能一位一位的传输，如果数据量比较大的时候，传输速率会受到很大影响，此时我们就可以考虑使用同步串行通信了，比如SPI。","text_tokens":["比如","只能","速率","比较","串行","如果","我们","影响","很大","大","传输速率","此时","uart","中","数据量","的","就","使用","时候","传输","会","spi","通信","数据","可以","了","一位","串口","受到","考虑","同步","。","，"],"title":"SPI同步串行通信","title_tokens":["串行","通信","同步","spi"]},{"location":"hhp/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#spi_1","text":"SPI，全称是Serial Peripheral Interface，也就是串行外设接口，同样是一种通信协议，在很多芯片中都有集成。 相比之前学习的UART串口通信，他多了两根线，其中一个是时钟信号，另一个是设备使能信号，用来控制设备是否启用，所以也产生了主从设备的概念。 MISO ：Master Input Slave Output，主设备数据输入，从设备数据输出； MOSI ：Master Output Slave Input，主设备数据输出，从设备数据输入； SCLK ：Serial Clock，时钟信号，由主设备产生； CS ：Chip Select，从设备使能信号，由主设备控制。 这样，在一组SPI通信的系统中，可以连接多个设备，想要和哪个设备通信时，就使能这个设备，除能其他设备。 我们在开发中常见的SPI设备会有一些传感器，还有电阻屏之类的。","text_tokens":["接口","我们","是否","这个","一组","input","的","由主","sclk","输入","想要","传感器","interface","连接","多","spi","集成","学习","屏","其他","：","mosi","就是","感器","输出","，","芯片","很多","他","master","都","也","是","chip","同样","控制","相比","协议","。","用来","常见","全称","从","一个","时","电阻","串口","使能","通信协议","peripheral","uart","两根","外设","会","output","一些","这样","所以","在","了","除能","产生","设备","多个","使","另","串行","开发","之前","线","有","时钟","clock","和","一种","信号","概念","select","其中","系统","哪个","主","中","；","serial","就","之类","传感","还有"," ","能","slave","miso","启用","通信","数据","可以","cs","主从"],"title":"SPI通信原理","title_tokens":["原理","通信","spi"]},{"location":"hhp/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_1","text":"在SPI的通信中，有一个管脚负责发送，另外一个管脚负责接收，如果我们把同一组SPI的发送和接收接到一起，岂不是能接收到自己发送的数据吗？ 我们不妨来试一试，这里使用一个跳线帽直接把19，21两个SPI的通信管脚短接。","text_tokens":["有","？","自己","管脚","一起","这里","19","和","短接","如果","发送","我们","负责","跳线","一组","不妨","两个","中","使用","的","不是","到","把","另外","同"," ","spi","能","吗","21","接收","一个","通信","数据","帽","在","来","直接","试一试","。","岂","接到","，"],"title":"硬件连线","title_tokens":["连线","硬件"]},{"location":"hhp/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_2","text":"大家来运行例程，看看会发生什么？ $ sudo python3 test_spi.py 在旭日X3派的终端中，输入运行例程的指令，接下来我们就可以看到通过SPI传输并收到的数据啦，相当于是左手传递给右手，自己给自己循环传输数据了。","text_tokens":["派","终端","相当","循环","test","？","py","右手","自己","当于","$","什么","并","啦","我们","给","是","大家","收到","运行","左手","python3","相当于","看看","中","发生","的","接下","就","输入","通过","接下来","看到","传输","会"," ","spi","下来","例程","x3","传输数据","传递","数据","可以","在","来","了","旭日","_",".","。","指令","，","sudo"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"hhp/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_3","text":"test_spi.py： #!/usr/bin/env python3 import sys import os import time # 导入spidev模块 import spidev def BytesToHex ( Bytes ): return '' . join ([ \"0x %02X \" % x for x in Bytes ]) . strip () def spidevTest (): # 设置spi的bus号（0, 1, 2）和片选(0, 1) spi_bus = input ( \"Please input SPI bus num:\" ) spi_device = input ( \"Please input SPI cs num:\" ) # 创建spidev类的对象以访问基于spidev的Python函数。 spi = spidev . SpiDev () # 打开spi总线句柄 spi . open ( int ( spi_bus ), int ( spi_device )) # 设置 spi 频率为 12MHz spi . max_speed_hz = 12000000 print ( \"Starting demo now! Press CTRL+C to exit\" ) # 发送 [0x55, 0xAA], 接收的数据应该也是 [0x55, 0xAA] try : while True : resp = spi . xfer2 ([ 0x55 , 0xAA ]) print ( BytesToHex ( resp )) time . sleep ( 1 ) except KeyboardInterrupt : spi . close () if __name__ == '__main__' : print ( \"List of enabled spi controllers:\" ) os . system ( 'ls /dev/spidev*' ) spidevTest () 在python中使用spidev这个库，初始化X3Pi的SPI，之后使用xerf2发送数据，同时接收数据，并打印出来，会发现打印出来的就是我们发送的。","text_tokens":["py","spidev","我们","speed","这个","0xaa","sys","import","int","号","input","基于","初始","的","0x","*","join","初始化","访问","spi","打印","接收","出来","enabled","之后","now","：","usr","press","in","就是","xerf2","exit",")","env","，","打开","python","也","close","发送","模块","是","bytes","设置","open","接收数据","1",",","x","%","time","of","发现","创建","x3pi","main","print","片选","/","!","）","hz","def","system","(","__","test","]","c","类","对象","if","while","'","controllers","python3","os","12000000","为","ctrl","[","库","ls","02x","strip","true","resp","会","bytestohex","应该","句柄","starting","同时","函数","keyboardinterrupt","在",".","max","demo","dev","+","总线","12mhz","#","和","device","try","0","num","0x55","中","使用","\"",":","name","to","发送数据"," ","=","please","并打印","2","except","spidevtest","bin","bus","数据","return","_","for","xfer2","sleep","cs","频率","以","。","（","list","导入"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/","text":"I2C同步串行通信 SPI通信虽然功能更强大了，但是需要4根线做连接，还是有点复杂，接下来I2C的连线就简单很多了。 I2C通信原理 I2C也是一种常用的串行通信方式，和SPI一样可以连接多个设备，重点是它只需要两根线就可以完成。 不过他的两根线和UART不同，不全是传输数据用的，I2C中的一根线是时钟线，另一根才是传输数据的，这根线可以双向的传输数据。 I2C通信中可以有多个主设备或者从设备，只要能通过地址找到彼此的位置即可。 主器件用于启动总线传送数据，并产生时钟给各种从机，此时任何被寻址的器件均被认为是从机。在总线上主和从、发和收的关系不是恒定的，而取决于此时数据传送方向。如果主机要发送数据给从机，主机首先得找到从机的地址，然后主动发送数据过去，最后也得由主机终止数据传送；如果主机要接收从机的数据，同样由主机得找到从机的地址，然后主机接收从器件发送的数据，最后由主机终止接收过程。 因为I2C的特性，使用I2C的设备比SPI多很多，比如图中的紫外线传感器，陀螺仪之类的，都是使用I2C进行通信的。 硬件接线 我们找来一个常用的陀螺仪模块，按照这里的接线图连接到旭日X3派的40PIN接口上，这里除了I2C通信的两根线之外，另外两根是电源线，负责给这个模块供电的，让它正常工作起来。 运行示例程序 接线是挺简单的，我们继续来运行这个例程，看下能否收到数据。 $ sudo python3 mpu6500_i2c.py 在终端启动例程，很快就可以看到通过I2C读取到了大量传感器的数据，这些就是陀螺仪模块的原始数据，收到之后我们就可以进行结算处理啦，这就是我们后续机器人开发的需要解决的问题了。 代码解析 mpu6500_i2c.py： #!/usr/bin/env python3 import smbus , time def MPU6050_start (): # alter sample rate (stability) samp_rate_div = 0 # sample rate = 8 kHz/(1+samp_rate_div) bus . write_byte_data ( MPU6050_ADDR , SMPLRT_DIV , samp_rate_div ) time . sleep ( 0.1 ) # reset all sensors bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x00 ) time . sleep ( 0.1 ) # power management and crystal settings bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x01 ) time . sleep ( 0.1 ) #Write to Configuration register bus . write_byte_data ( MPU6050_ADDR , CONFIG , 0 ) time . sleep ( 0.1 ) #Write to Gyro configuration register gyro_config_sel = [ 0b00000 , 0b010000 , 0b10000 , 0b11000 ] # byte registers gyro_config_vals = [ 250.0 , 500.0 , 1000.0 , 2000.0 ] # degrees/sec gyro_indx = 0 bus . write_byte_data ( MPU6050_ADDR , GYRO_CONFIG , int ( gyro_config_sel [ gyro_indx ])) time . sleep ( 0.1 ) #Write to Accel configuration register accel_config_sel = [ 0b00000 , 0b01000 , 0b10000 , 0b11000 ] # byte registers accel_config_vals = [ 2.0 , 4.0 , 8.0 , 16.0 ] # g (g = 9.81 m/s^2) accel_indx = 0 bus . write_byte_data ( MPU6050_ADDR , ACCEL_CONFIG , int ( accel_config_sel [ accel_indx ])) time . sleep ( 0.1 ) # interrupt register (related to overflow of data [FIFO]) bus . write_byte_data ( MPU6050_ADDR , INT_ENABLE , 1 ) time . sleep ( 0.1 ) return gyro_config_vals [ gyro_indx ], accel_config_vals [ accel_indx ] def read_raw_bits ( register ): # read accel and gyro values high = bus . read_byte_data ( MPU6050_ADDR , register ) low = bus . read_byte_data ( MPU6050_ADDR , register + 1 ) # combine higha and low for unsigned bit value value = (( high << 8 ) | low ) # convert to +- value if ( value > 32768 ): value -= 65536 return value def mpu6050_conv (): # raw acceleration bits acc_x = read_raw_bits ( ACCEL_XOUT_H ) acc_y = read_raw_bits ( ACCEL_YOUT_H ) acc_z = read_raw_bits ( ACCEL_ZOUT_H ) # raw temp bits ## t_val = read_raw_bits(TEMP_OUT_H) # uncomment to read temp # raw gyroscope bits gyro_x = read_raw_bits ( GYRO_XOUT_H ) gyro_y = read_raw_bits ( GYRO_YOUT_H ) gyro_z = read_raw_bits ( GYRO_ZOUT_H ) #convert to acceleration in g and gyro dps a_x = ( acc_x / ( 2.0 ** 15.0 )) * accel_sens a_y = ( acc_y / ( 2.0 ** 15.0 )) * accel_sens a_z = ( acc_z / ( 2.0 ** 15.0 )) * accel_sens w_x = ( gyro_x / ( 2.0 ** 15.0 )) * gyro_sens w_y = ( gyro_y / ( 2.0 ** 15.0 )) * gyro_sens w_z = ( gyro_z / ( 2.0 ** 15.0 )) * gyro_sens ## temp = ((t_val)/333.87)+21.0 # uncomment and add below in return return a_x , a_y , a_z , w_x , w_y , w_z # MPU6050 Registers MPU6050_ADDR = 0x68 PWR_MGMT_1 = 0x6B SMPLRT_DIV = 0x19 CONFIG = 0x1A GYRO_CONFIG = 0x1B ACCEL_CONFIG = 0x1C INT_ENABLE = 0x38 ACCEL_XOUT_H = 0x3B ACCEL_YOUT_H = 0x3D ACCEL_ZOUT_H = 0x3F TEMP_OUT_H = 0x41 GYRO_XOUT_H = 0x43 GYRO_YOUT_H = 0x45 GYRO_ZOUT_H = 0x47 # start I2C driver bus = smbus . SMBus ( 0 ) # start comm with i2c bus gyro_sens , accel_sens = MPU6050_start () # instantiate gyro/accel while True : print ( mpu6050_conv ()) 这里我们看一下怎么使用I2C和陀螺仪通信来获取信息。主体上有三个大的函数，而这三个函数的功能都比较单一，第一个函数通过给陀螺仪发送数据来进行初始化的设置，比如配置陀螺仪的电源寄存器，加速度寄存器等；第二个函数则是从陀螺仪读取数据；第三个函数则是将读取到的函数进行计算，从而变成真正的加速度等信息。 具体的读写操作可以看下面的代码片段，也是直接调用函数指定地址和数据就好了。 这里我们也能看到几个关键的参数，比如陀螺仪MPU6050的地址是0x68，通过这个地址才能确认到陀螺仪的存在，然后进行初始化，初始化完成之后进入循环，不停的将数据打印出来。","text_tokens":["不全是","陀螺仪","寻址","从机","地址","import","代码","##","有点","、","0x3f","一下","起来","usr","一样","0x01","in","直接","上主","rate","原始","很多","终端","示例","也","读取","发送","values","即可","同样","stability","找到","传送数据","正常","通过","接下来","是从","看到","time","val","获取信息","configuration","related","获取","x3","第二个","寄存器","/","0x41","比较","0x3b","主体","均","temp","high","让","below","[","interrupt","信息","这根","sample","true","片段","传输数据","reset",".","强大","开发","raw","工作","sudo","二个","有","取决于","#","一种","0","简单","settings","主","power","；","vals","真正","传感","不同","看","8","gyro","16.0","=","图中","读写操作","得","fifo","可以","旭日","m","同步","原理","比如","|","$","接口","找","register","负责","常用","smbus","位置","g","第三","除了","0x45","传感器","and","bits","2000.0","接线","连接","多","spi","接收","add","出来","之后","：","单一","all","就是","感器","处理","div","，","他","接线图","加速","陀螺","是","恒定","start","功能","0x43","更","接下","参数",",","convert","最后","x","读取数据","硬件","uncomment","enable","认为","方向","来","mpu6050","这些","程序","一根","循环","indx","0b10000","if","电源线","while","大","9.81","with","后续","调用","driver","下来","问题","函数","则","设备","机器","串行","线","主动","registers","它","+","和","才","zout","任何","就","使用","pwr","15.0","0x6b","500.0",">","^","发送数据","t","21.0","2","只","根线","bin","unsigned","return","几个","完成","要","_","0x1b","比","读写","过程","调用函数","py","线图","这个","收到","被","int","byte","初始","原始数据","虽然","不是","传输","打印","进行","4","变成","复杂","这","yout","env",")","需要","这里","彼此","4.0","模块","下面","供电","寄存","设置","0.1","1","bit","mpu6500","解析","从","of","0b00000","一个","8.0","而","第二","management","comm","print","但是","low","各种","def","-","read","此时","32768","0b11000","用","取决","做","方式","1000.0","例程","addr","khz","首先","+-","a","instantiate","从而","发和收","产生","y","多个","关键","h","0x19","因为","只要","重点","65536","z","时钟","总线","0x47","40pin","degrees","主机","很快","value","0x1a","中","之类",":","xout","data","存在"," ","不过","s","通信","bus","数据","好","0b010000","紫外线","sec","连线","for","。","指定","传送","250.0","还是","挺","第一","如果","第三个","我们","三个","w","gyroscope","samp","的","启动","*","conv","能否","初始化","关系","由","配置","0x38","crystal","acc","继续","解决","combine","操作","然后","等","都","双向","sens","或者","计算","write","sensors","mgmt","进入","过去","accel","用于","之外","取信","结算","0x1c","!","特性","<","(","]","acceleration","上","并","终止","0x3d","给","运行","dps","python3","具体","uart","0x00","不停","到","机","两根","out","紫外","下","加速度","i2c","在","了","overflow","第一个","才能","另","0b01000","派","机器人","电源","啦","alter","0x68","确认","333.87","将","smplrt","sel","另外","大量","器件","to","按照","能","怎么","2.0","速度","config","higha","外线","sleep"],"title":"I2C同步串行通信","title_tokens":["i2c","通信","串行","同步"]},{"location":"hhp/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#i2c","text":"SPI通信虽然功能更强大了，但是需要4根线做连接，还是有点复杂，接下来I2C的连线就简单很多了。","text_tokens":["很多","需要","还是","功能","简单","更","接下","的","虽然","就","有点","接下来","连接","spi","做","下来","4","通信","根线","i2c","复杂","了","连线","但是","。","强大","，"],"title":"I2C同步串行通信","title_tokens":["i2c","通信","串行","同步"]},{"location":"hhp/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#i2c_1","text":"I2C也是一种常用的串行通信方式，和SPI一样可以连接多个设备，重点是它只需要两根线就可以完成。 不过他的两根线和UART不同，不全是传输数据用的，I2C中的一根线是时钟线，另一根才是传输数据的，这根线可以双向的传输数据。 I2C通信中可以有多个主设备或者从设备，只要能通过地址找到彼此的位置即可。 主器件用于启动总线传送数据，并产生时钟给各种从机，此时任何被寻址的器件均被认为是从机。在总线上主和从、发和收的关系不是恒定的，而取决于此时数据传送方向。如果主机要发送数据给从机，主机首先得找到从机的地址，然后主动发送数据过去，最后也得由主机终止数据传送；如果主机要接收从机的数据，同样由主机得找到从机的地址，然后主机接收从器件发送的数据，最后由主机终止接收过程。 因为I2C的特性，使用I2C的设备比SPI多很多，比如图中的紫外线传感器，陀螺仪之类的，都是使用I2C进行通信的。","text_tokens":["不全是","陀螺仪","过程","寻址","如果","常用","从机","被","位置","地址","的","不是","启动","传感器","、","关系","连接","传输","由","spi","多","进行","接收","一样","感器","，","上主","他","很多","然后","需要","都","彼此","也","双向","发送","陀螺","即可","是","恒定","或者","同样","过去","找到","传送数据","通过","用于","最后","是从","从","而","认为","方向","各种","特性","一根","并","终止","给","均","此时","uart","机","用","这根","两根","取决","方式","紫外","传输数据","i2c","首先","在","发和收","产生","设备","多个","另","串行","因为","线","只要","重点","有","取决于","主动","它","时钟","总线","和","才","一种","主机","任何","主","中","；","之类","就","使用","传感","器件","发送数据","不同"," ","不过","能","图中","通信","只","得","数据","可以","紫外线","完成","要","外线","。","传送","比","比如"],"title":"I2C通信原理","title_tokens":["i2c","原理","通信"]},{"location":"hhp/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_1","text":"我们找来一个常用的陀螺仪模块，按照这里的接线图连接到旭日X3派的40PIN接口上，这里除了I2C通信的两根线之外，另外两根是电源线，负责给这个模块供电的，让它正常工作起来。","text_tokens":["线","陀螺仪","派","电源","它","上","接线图","这里","40pin","陀螺","模块","我们","接口","给","是","找","线图","电源线","负责","常用","这个","供电","除了","让","的","到","正常","另外","两根","接线","连接","按照","一个","x3","通信","起来","i2c","来","旭日","之外","。","，","工作"],"title":"硬件接线","title_tokens":["接线","硬件"]},{"location":"hhp/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_2","text":"接线是挺简单的，我们继续来运行这个例程，看下能否收到数据。 $ sudo python3 mpu6500_i2c.py 在终端启动例程，很快就可以看到通过I2C读取到了大量传感器的数据，这些就是陀螺仪模块的原始数据，收到之后我们就可以进行结算处理啦，这就是我们后续机器人开发的需要解决的问题了。","text_tokens":["原始","终端","陀螺仪","机器人","需要","py","挺","$","读取","陀螺","我们","模块","啦","是","这个","收到","运行","python3","很快","简单","就","的","到","启动","原始数据","传感","通过","大量","能否","mpu6500","传感器","后续","看到","接线"," ","看","进行","例程","下","问题","i2c","数据","之后","这","可以","在","来","了","_","继续","就是","感器","结算","机器","解决",".","这些","。","开发","处理","，","sudo"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"hhp/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_3","text":"mpu6500_i2c.py： #!/usr/bin/env python3 import smbus , time def MPU6050_start (): # alter sample rate (stability) samp_rate_div = 0 # sample rate = 8 kHz/(1+samp_rate_div) bus . write_byte_data ( MPU6050_ADDR , SMPLRT_DIV , samp_rate_div ) time . sleep ( 0.1 ) # reset all sensors bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x00 ) time . sleep ( 0.1 ) # power management and crystal settings bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x01 ) time . sleep ( 0.1 ) #Write to Configuration register bus . write_byte_data ( MPU6050_ADDR , CONFIG , 0 ) time . sleep ( 0.1 ) #Write to Gyro configuration register gyro_config_sel = [ 0b00000 , 0b010000 , 0b10000 , 0b11000 ] # byte registers gyro_config_vals = [ 250.0 , 500.0 , 1000.0 , 2000.0 ] # degrees/sec gyro_indx = 0 bus . write_byte_data ( MPU6050_ADDR , GYRO_CONFIG , int ( gyro_config_sel [ gyro_indx ])) time . sleep ( 0.1 ) #Write to Accel configuration register accel_config_sel = [ 0b00000 , 0b01000 , 0b10000 , 0b11000 ] # byte registers accel_config_vals = [ 2.0 , 4.0 , 8.0 , 16.0 ] # g (g = 9.81 m/s^2) accel_indx = 0 bus . write_byte_data ( MPU6050_ADDR , ACCEL_CONFIG , int ( accel_config_sel [ accel_indx ])) time . sleep ( 0.1 ) # interrupt register (related to overflow of data [FIFO]) bus . write_byte_data ( MPU6050_ADDR , INT_ENABLE , 1 ) time . sleep ( 0.1 ) return gyro_config_vals [ gyro_indx ], accel_config_vals [ accel_indx ] def read_raw_bits ( register ): # read accel and gyro values high = bus . read_byte_data ( MPU6050_ADDR , register ) low = bus . read_byte_data ( MPU6050_ADDR , register + 1 ) # combine higha and low for unsigned bit value value = (( high << 8 ) | low ) # convert to +- value if ( value > 32768 ): value -= 65536 return value def mpu6050_conv (): # raw acceleration bits acc_x = read_raw_bits ( ACCEL_XOUT_H ) acc_y = read_raw_bits ( ACCEL_YOUT_H ) acc_z = read_raw_bits ( ACCEL_ZOUT_H ) # raw temp bits ## t_val = read_raw_bits(TEMP_OUT_H) # uncomment to read temp # raw gyroscope bits gyro_x = read_raw_bits ( GYRO_XOUT_H ) gyro_y = read_raw_bits ( GYRO_YOUT_H ) gyro_z = read_raw_bits ( GYRO_ZOUT_H ) #convert to acceleration in g and gyro dps a_x = ( acc_x / ( 2.0 ** 15.0 )) * accel_sens a_y = ( acc_y / ( 2.0 ** 15.0 )) * accel_sens a_z = ( acc_z / ( 2.0 ** 15.0 )) * accel_sens w_x = ( gyro_x / ( 2.0 ** 15.0 )) * gyro_sens w_y = ( gyro_y / ( 2.0 ** 15.0 )) * gyro_sens w_z = ( gyro_z / ( 2.0 ** 15.0 )) * gyro_sens ## temp = ((t_val)/333.87)+21.0 # uncomment and add below in return return a_x , a_y , a_z , w_x , w_y , w_z # MPU6050 Registers MPU6050_ADDR = 0x68 PWR_MGMT_1 = 0x6B SMPLRT_DIV = 0x19 CONFIG = 0x1A GYRO_CONFIG = 0x1B ACCEL_CONFIG = 0x1C INT_ENABLE = 0x38 ACCEL_XOUT_H = 0x3B ACCEL_YOUT_H = 0x3D ACCEL_ZOUT_H = 0x3F TEMP_OUT_H = 0x41 GYRO_XOUT_H = 0x43 GYRO_YOUT_H = 0x45 GYRO_ZOUT_H = 0x47 # start I2C driver bus = smbus . SMBus ( 0 ) # start comm with i2c bus gyro_sens , accel_sens = MPU6050_start () # instantiate gyro/accel while True : print ( mpu6050_conv ()) 这里我们看一下怎么使用I2C和陀螺仪通信来获取信息。主体上有三个大的函数，而这三个函数的功能都比较单一，第一个函数通过给陀螺仪发送数据来进行初始化的设置，比如配置陀螺仪的电源寄存器，加速度寄存器等；第二个函数则是从陀螺仪读取数据；第三个函数则是将读取到的函数进行计算，从而变成真正的加速度等信息。 具体的读写操作可以看下面的代码片段，也是直接调用函数指定地址和数据就好了。 这里我们也能看到几个关键的参数，比如陀螺仪MPU6050的地址是0x68，通过这个地址才能确认到陀螺仪的存在，然后进行初始化，初始化完成之后进入循环，不停的将数据打印出来。","text_tokens":["|","陀螺仪","读写","调用函数","py","第一","第三个","我们","register","这个","三个","w","smbus","gyroscope","地址","samp","import","int","g","byte","第三","0x45","##","初始","的","代码","*","conv","初始化","and","bits","2000.0","配置","打印","0x3f","进行","0x38","add","crystal","一下","变成","出来","之后","这","：","单一","usr","all","0x01","acc","in","直接","combine","yout","div",")","env","，","rate","操作","然后","等","这里","都","4.0","加速","也","读取","陀螺","values","sens","发送","下面","start","是","计算","寄存","设置","功能","stability","write","sensors","0.1","mgmt","进入","0x43","就","accel","1","bit","参数",",","通过","mpu6500","convert","是从","看到","x","读取数据","time","of","val","获取信息","configuration","0b00000","8.0","related","获取","而","uncomment","一个","enable","第二个","来","mpu6050","management","comm","print","第二","取信","low","寄存器","0x1c","/","!","def","<","循环","(","]","acceleration","0x41","上","比较","indx","0x3d","0x3b","0b10000","-","主体","if","给","while","read","大","dps","python3","具体","9.81","temp","high","0x00","不停","32768","below","[","0b11000","到","interrupt","信息","with","调用","driver","sample","true","片段","out","1000.0","加速度","addr","khz","i2c","reset","+-","a","instantiate","overflow","函数","从而","了","则","y","第一个","才能",".","关键","raw","h","0b01000","0x19","二个","65536","z","有","registers","电源","+","0x47","#","和","alter","zout","0","degrees","0x68","确认","333.87","settings","value","power","将","0x1a","smplrt","；","sel","pwr","使用",":","xout","15.0","vals","0x6b","真正","500.0",">","data","^","存在","发送数据","to","t"," ","看","8","怎么","gyro","能","16.0","=","21.0","2.0","s","2","速度","读写操作","通信","bus","bin","config","fifo","数据","可以","好","0b010000","unsigned","return","sec","几个","higha","_","m","for","完成","sleep","0x1b","。","指定","250.0","比如"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/","text":"USB外设驱动 在电脑上，我们最常用的接口之一，应该就是USB了，相比之前讲到的外设通信方法，USB更加复杂，速度也更快。 USB通信原理 USB不仅是我们生活中最常用的一种接口，也是一种串行总线的通讯方式。他类似于UART，有两根线用来传输数据。 而且USB还有专门的接口规范，比如我们常听说的USB Type A、Type C。例如这里列出来的USB口，打印机常用的B口，手机上用的C口，都是标准的USB接口。 USB的接口规范，使用广泛，很多成熟的外设都是采用的USB接口。 摄像头驱动 比如USB摄像头。 硬件接线 这里我们使用一个USB摄像头，通过一个相机驱动把它跑起来，并且可以看到图像数据。 方法有很多中，TogetherROS兼容ROS2的所有功能，那我们就先试试ROS2中的标准方法，在旭日X3PI上直接安装一个usb_cam功能包。 ROS2相机驱动 安装与配置 首先安装ROS2的相机驱动包： # 安装功能包 $ sudo apt install ros-foxy-usb-cam 安装好之后，为了让系统能够找到该功能包，需要进入tros的目录，建立对应的软连接。 # 建立软连接 $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 因为旭日X3Pi可以连接csi摄像头，设备名占用了video0-7，所以外接的USB摄像头会被自动分配到video8，我们需要在ROS2的功能包中修改一下设备号。 # 修改配置文件 $ cd /opt/tros/share/usb_cam/config $ sudo vim params.yaml 然后给这个设备添加权限，最后再设置TogetherROS的环境变量就可以使用啦。 # 添加可执行权限 $ sudo chmod 777 /dev/video8 # 添加环境变量 $ source /opt/tros/local_setup.bash 运行相机驱动 我们来试一试。 $ ros2 launch usb_cam demo_launch.py #启动相机，X3Pi $ ros2 run rqt_image_view rqt_image_view #查看图像，PC 这里直接在X3Pi中启动usb_cam的launch文件，然后再启动一个能和他通信的Ubuntu桌面系统，打开rqt_image_view，选择对应的话题，就可以看到图像了。也就是说明我们成功的用TROS驱动了这个USB摄像头。 TogetherROS相机驱动 除此之外，TogetherROS中也提供了USB摄像头的驱动节点，连接摄像头之后，直接设置设备的权限和TogetherROS的环境变量就可以使用了。 $ source /opt/tros/local_setup.bash $ sudo chmod 777 /dev/video8 $ ros2 launch hobot_usb_cam hobot_usb_cam.launch.py 之后可以再打开一个新的终端，输入对应的指令，然后启动websocket这个节点，就可以把image这个话题的数据发送到网页了。 $ source /opt/tros/local_setup.bash $ cd /opt/tros/lib/websocket/webservice $ sudo chmod +x ./sbin/nginx $ sudo ./sbin/nginx -p . $ ros2 run websocket websocket --ros-args -p image_topic: = /image -p image_type: = mjpeg -p only_show_image: = true 这时我们直接打开在通一个局域网下的浏览器，输入X3Pi的地址，就可以进去到一个网页，点击左上方web端展示即可看到USB摄像头的实时画面。 激光雷达驱动 移动机器人中常用的激光雷达大多也是USB借口的，比如这款rplidar。 安装与配置 如果我们想把它跑起来，同样需要一个驱动包，大家可以在工作空间中下载雷达的驱动包，然后进行编译。编译完成后，添加环境变量就可以使用这个功能包了。 # 下载源码 $ mkdir -p catkin_ws/src $ cd ~/catkin_ws/src $ git clone -b ros2 https://github.com/slamtec/rplidar_ros.git # 编译 $ cd ~/catkin_ws $ colcon build --symlink-install # 添加环境变量 $ source ~/catkin_ws/install/setup.bash # 添加权限 $ sudo chmod 777 /dev/ttyUSB0 还要记得给激光雷达的USB口设置对应的权限。 运行激光雷达驱动 驱动安装好之后，就可以启动雷达了。 在旭日X3派的终端中，运行启动激光雷达的launch文件。 $ ros2 launch rplidar_ros2 rplidar_launch.py #启动雷达，X3PI $ ros2 run rviz2 rviz2 #查看点云，PC 启动成功后，我们在电脑端的Ubuntu系统中，在ros2环境下打开rviz2，然后将世界坐标系改为laser，然后添加LaserScan的可视化选项，并且把Reliability Policy的选项改为System Default，此时就可以看到激光雷达的点云数据了。","text_tokens":["印机","借口","最","--","reliability","地址","mjpeg","新","、","变量","实时","不仅","讲到","广泛","名","成熟","起来","一下","直接","手机","试试","很多","终端","也就是说","也","发送","即可","成功","同样","foxy","找到","相比","通过","usb","看到","兼容","包中","跑","x3pi","x3","还要","下载","/","先","更加","专门","c","web","规范","左上","让","ttyusb0","true","应该","传输数据","所以","占用","试一试",".","工作","mkdir","sudo","之前","tros","有","b","环境变量","类似","#","之一","一种","并且","送到","cd","桌面","局域","把","yaml","还有","=","websocket","节点","可以","旭日","run","配置文件","原理","比如","上用","$","接口","网页","相机","常用","apt","可","包了","可视","输入","权限","选项","接线","连接","串行总线","出来","之后","：","通讯","就是","浏览器","，","世界","他","src","雷达","only","执行","csi","是","功能","更","那","git","最后","x","激光","环境","image","硬件","坐标系","来","建立","查看","快","空间","该","ws","标准","hobot","launch","设备","机器","串行","demo","线","dev","它","+","能够","和","摄像头","除此","左上方","于","系统","使用","就","github","改为","bash","rplidar","_","完成","laserscan","指令","后","明","py","这个","被","lib","号","像头","可视化","所有","包","传输","打印","soft","clone","进行","复杂","分配","移动","常","pc","share","打开","需要","这里","~","ros2","大家","设置","laser","添加","view","局域网","通","这时","就是说","驱动","想","一个","source","点云","local","源码","system","rviz2","移动机器人","-","create","激光雷达","com","安装","install","video0","摄像","此时","除此之外","目录","catkin","对应","画面","777","policy","用","外设","会","方式","opt","7","a","首先","图像","修改","坐标","因为","浏览","link","总线","端","type","为了","采用","中",":","电脑","nginx","展示"," ","再","通信","数据","好","听说","chmod","setup","。","话题","https","如果","而且","我们","再启动","的","启动","配置","ubuntu","video8","点击","webservice","列出","口","slamtec","然后","sbin","软","都","topic","端的","自动","进入","打印机","文件","方法","用来","动机","params","rqt","args","之外","上","例如","选择","symlink","给","p","运行","生活","python3","show","uart","编译","ros","到","记得","cam","两根","上方","下","提供","在","了","大多","进去","派","机器人","外接","环境变","发送到","与","啦","default","colcon","build","将","能","列出来","速度","vim","config","这款","togetherros"],"title":"USB外设驱动","title_tokens":["驱动","外设","usb"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#usb","text":"在电脑上，我们最常用的接口之一，应该就是USB了，相比之前讲到的外设通信方法，USB更加复杂，速度也更快。","text_tokens":["之前","更加","最","上","之一","也","接口","我们","常用","快","更","相比","的","电脑","usb","方法","外设","应该","讲到","速度","通信","复杂","在","了","就是","。","，"],"title":"USB外设驱动","title_tokens":["驱动","外设","usb"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#usb_1","text":"USB不仅是我们生活中最常用的一种接口，也是一种串行总线的通讯方式。他类似于UART，有两根线用来传输数据。 而且USB还有专门的接口规范，比如我们常听说的USB Type A、Type C。例如这里列出来的USB口，打印机常用的B口，手机上用的C口，都是标准的USB接口。 USB的接口规范，使用广泛，很多成熟的外设都是采用的USB接口。","text_tokens":["线","他","比如","有","，","印机","上用","最","b","专门","总线","c","类似","这里","都","很多","规范","也","而且","接口","一种","我们","例如","是","type","常用","于","生活","uart","采用","中","使用","的","打印机","usb","用来","两根","、","还有","传输"," ","外设","打印","方式","不仅","串行总线","列出来","标准","广泛","传输数据","成熟","a","数据","出来","列出","口","通讯","常","听说","手机","。","串行"],"title":"USB通信原理","title_tokens":["原理","usb","通信"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_1","text":"比如USB摄像头。","text_tokens":["usb","摄像","像头","摄像头","。","比如"],"title":"摄像头驱动","title_tokens":["驱动","像头","摄像头","摄像"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_2","text":"这里我们使用一个USB摄像头，通过一个相机驱动把它跑起来，并且可以看到图像数据。 方法有很多中，TogetherROS兼容ROS2的所有功能，那我们就先试试ROS2中的标准方法，在旭日X3PI上直接安装一个usb_cam功能包。","text_tokens":["试试","很多","先","有","它","上","这里","摄像头","我们","相机","ros2","安装","功能","并且","摄像","像头","中","使用","的","就","把","所有","那","通过","usb","方法","cam","包","看到","兼容"," ","驱动","跑","x3pi","一个","标准","起来","数据","可以","在","旭日","图像","_","直接","。","togetherros","，"],"title":"硬件接线","title_tokens":["接线","硬件"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#ros2","text":"","text_tokens":[],"title":"ROS2相机驱动","title_tokens":["驱动","相机","ros2"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_3","text":"首先安装ROS2的相机驱动包： # 安装功能包 $ sudo apt install ros-foxy-usb-cam 安装好之后，为了让系统能够找到该功能包，需要进入tros的目录，建立对应的软连接。 # 建立软连接 $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 因为旭日X3Pi可以连接csi摄像头，设备名占用了video0-7，所以外接的USB摄像头会被自动分配到video8，我们需要在ROS2的功能包中修改一下设备号。 # 修改配置文件 $ cd /opt/tros/share/usb_cam/config $ sudo vim params.yaml 然后给这个设备添加权限，最后再设置TogetherROS的环境变量就可以使用啦。 # 添加可执行权限 $ sudo chmod 777 /dev/video8 # 添加环境变量 $ source /opt/tros/local_setup.bash","text_tokens":["py","$","我们","相机","这个","--","apt","被","可","号","像头","的","包","权限","连接","变量","配置","soft","名","video8","一下","之后","分配","：","，","share","然后","需要","软","执行","csi","ros2","自动","设置","功能","进入","foxy","添加","找到","文件","usb","最后","params","包中","驱动","环境","x3pi","配置文件","source","/","local","建立","setup","给","-","create","安装","install","video0","python3","摄像","该","目录","让","ros","对应","777","到","cam","会","opt","7","所以","占用","首先","在","了","设备","修改",".","tros","因为","sudo","dev","外接","link","环境变量","环境变","#","能够","摄像头","啦","为了","系统","cd","就","使用","yaml"," ","vim","再","bash","config","可以","好","旭日","_","chmod","。","togetherros"],"title":"安装与配置","title_tokens":["安装","与","配置"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_4","text":"我们来试一试。 $ ros2 launch usb_cam demo_launch.py #启动相机，X3Pi $ ros2 run rqt_image_view rqt_image_view #查看图像，PC 这里直接在X3Pi中启动usb_cam的launch文件，然后再启动一个能和他通信的Ubuntu桌面系统，打开rqt_image_view，选择对应的话题，就可以看到图像了。也就是说明我们成功的用TROS驱动了这个USB摄像头。","text_tokens":["他","也就是说","然后","话题","明","py","$","这里","#","和","摄像头","选择","我们","相机","打开","ros2","这个","成功","查看","摄像","系统","再启动","像头","view","中","桌面","对应","的","就","启动","文件","用","usb","cam","rqt","看到"," ","就是说","能","驱动","ubuntu","image","x3pi","一个","通信","可以","在","来","了","图像","launch","_","直接","run","就是","试一试",".","。","pc","，","demo","tros"],"title":"运行相机驱动","title_tokens":["驱动","相机","运行"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#togetherros","text":"除此之外，TogetherROS中也提供了USB摄像头的驱动节点，连接摄像头之后，直接设置设备的权限和TogetherROS的环境变量就可以使用了。 $ source /opt/tros/local_setup.bash $ sudo chmod 777 /dev/video8 $ ros2 launch hobot_usb_cam hobot_usb_cam.launch.py 之后可以再打开一个新的终端，输入对应的指令，然后启动websocket这个节点，就可以把image这个话题的数据发送到网页了。 $ source /opt/tros/local_setup.bash $ cd /opt/tros/lib/websocket/webservice $ sudo chmod +x ./sbin/nginx $ sudo ./sbin/nginx -p . $ ros2 run websocket websocket --ros-args -p image_topic: = /image -p image_type: = mjpeg -p only_show_image: = true 这时我们直接打开在通一个局域网下的浏览器，输入X3Pi的地址，就可以进去到一个网页，点击左上方web端展示即可看到USB摄像头的实时画面。","text_tokens":["话题","py","$","我们","网页","这个","--","lib","地址","mjpeg","像头","的","启动","新","输入","权限","连接","变量","实时","video8","点击","webservice","之后","直接","浏览器","，","打开","终端","然后","sbin","topic","也","only","发送","即可","ros2","设置","局域网","usb","。","通","这时","看到","x","args","驱动","环境","image","x3pi","一个","之外","source","local","/","web","-","p","左上","摄像","show","除此之外","对应","ros","画面","777","到","cam","true","上方","opt","下","提供","hobot","在","了","launch","设备",".","sudo","tros","dev","进去","浏览","+","环境变量","环境变","除此","和","摄像头","发送到","端","type","左上方","送到","cd","中","就","使用",":","局域","把","nginx","展示"," ","=","websocket","节点","再","bash","数据","可以","_","run","chmod","setup","指令","togetherros"],"title":"TogetherROS相机驱动","title_tokens":["驱动","togetherros","相机"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_5","text":"移动机器人中常用的激光雷达大多也是USB借口的，比如这款rplidar。","text_tokens":["借口","机器人","，","雷达","也","移动机器人","是","常用","激光雷达","中","的","usb","。","动机","激光","rplidar","移动","机器","这款","大多","比如"],"title":"激光雷达驱动","title_tokens":["激光雷达","激光","驱动","雷达"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_6","text":"如果我们想把它跑起来，同样需要一个驱动包，大家可以在工作空间中下载雷达的驱动包，然后进行编译。编译完成后，添加环境变量就可以使用这个功能包了。 # 下载源码 $ mkdir -p catkin_ws/src $ cd ~/catkin_ws/src $ git clone -b ros2 https://github.com/slamtec/rplidar_ros.git # 编译 $ cd ~/catkin_ws $ colcon build --symlink-install # 添加环境变量 $ source ~/catkin_ws/install/setup.bash # 添加权限 $ sudo chmod 777 /dev/ttyUSB0 还要记得给激光雷达的USB口设置对应的权限。","text_tokens":["后","https","$","如果","我们","这个","--","包了","的","包","权限","变量","进行","clone","起来","口","slamtec","，","然后","src","需要","雷达","~","ros2","大家","设置","功能","同样","添加","git","。","usb","跑","驱动","想","环境","激光","一个","还要","下载","source","/","源码","symlink","给","-","p","激光雷达","com","install","空间","ws","编译","catkin","ros","ttyusb0","对应","777","记得","在",".","mkdir","工作","sudo","dev","它","b","环境变量","环境变","#","colcon","build","cd","中","就","使用",":","github","把"," ","bash","rplidar","可以","完成","_","chmod","setup"],"title":"安装与配置","title_tokens":["安装","与","配置"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_7","text":"驱动安装好之后，就可以启动雷达了。 在旭日X3派的终端中，运行启动激光雷达的launch文件。 $ ros2 launch rplidar_ros2 rplidar_launch.py #启动雷达，X3PI $ ros2 run rviz2 rviz2 #查看点云，PC 启动成功后，我们在电脑端的Ubuntu系统中，在ros2环境下打开rviz2，然后将世界坐标系改为laser，然后添加LaserScan的可视化选项，并且把Reliability Policy的选项改为System Default，此时就可以看到激光雷达的点云数据了。","text_tokens":["派","终端","后","rviz2","然后","system","py","雷达","$","#","端的","我们","ros2","成功","reliability","激光雷达","查看","default","安装","运行","并且","此时","系统","laser","将","添加","中","laserscan","可视化","就","的","policy","启动","把","可视","文件","电脑","改为","世界","选项","看到"," ","驱动","激光","ubuntu","环境","x3pi","坐标系","下","x3","rplidar","数据","之后","可以","好","了","在","旭日","launch","_","run","点云",".","。","坐标","pc","，","打开"],"title":"运行激光雷达驱动","title_tokens":["激光雷达","运行","雷达","激光","驱动"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/","text":"机器视觉介绍 机器视觉概念 机器视觉， 就是用计算机来模拟人的视觉功能，但这并不仅仅是人眼的简单延伸，更重要的是像人脑一样，可以从客观事物的图像中提取信息，进行处理并加以理解，最终用于实际检测、控制等场景。 获取图像信息相对简单，但想让机器人理解图像中千变万化的物品，就难上加难了。 为了解决这一系列复杂的问题，机器视觉也是一个涉猎广泛的交叉学科，横跨人工智能、神经生物学、物理学、计算机科学、图像处理、模式识别等诸多领域。时至今日，在各个领域中，都有大量开发者或组织参与其中，也积累了众多技术，不过依然还有很多问题亟待解决，就像我们对自己大脑的研究也只是冰山一角一样，机器视觉的研究也将会是一个长久的工作。 机器视觉相关的关键技术也有不少，比如视觉图像的采集和信号处理，这个过程主要是通过传感器硬件采集外部光信号的过程，光信号最终会转变成数字电路的信号，便于下一步的处理；类似左边图片中看到的效果，获取图像之后，更重要的是要识别图像中的物体、确定物体的位置、或者检测物品的变化，这就要用到模式识别或者机器学习等技术，这个部分也是当今机器视觉研究的重点。 和人类的两只眼睛不同，机器用于获取图像的传感器种类较为丰富，可以是一个摄像头，也可以是两个摄像头，还可以是三个、四个、很多个摄像头，不仅可以获取颜色信息，还可以通过红外相机获取深度或者能量信息，这可比人眼获取的信息丰富多了，当然，这也会对后期的处理带来不同的计算压力。 在工业领域，机器视觉系统已经被广泛用于自动检验、工件加工、装配自动化以及生产过程控制等工作。随着机器人的快速发展和应用，机器视觉也逐渐应用于农业机器人、AMR物流机器人、服务机器人、无人驾驶汽车等各种机器人，活跃在农场、物流、仓储、交通、医院等多种环境中。 机器视觉流程 人类视觉擅长于对复杂、非结构化的场景进行定性解释，但机器视觉凭借速度、精度和可重复性等优势，非常适合对结构化场景进行定量测量。 一般来讲，典型的机器视觉系统可以分为如图所示的三个部分：图像采集、图像分析和控制输出。 图像采集注重对原始光学信号的采样，是整个视觉系统的传感部分，核心是相机和相关的配件。 其中光源用于照明待检测的物体，并突显其特征，便于让相机能够更好的捕捉图像。光源是影响机器视觉系统成像质量的重要因素，好的光源和照明效果对机器视觉判断影响很大。当前，机器视觉的光源已经突破人眼的可见光范围，其光谱范围跨越红外光（IR）、可见光、紫外光（UV）乃至X射线波段，可实现更精细和更广泛的检测范围，以及特殊成像需求。 相机被喻为机器视觉系统的“眼睛”，承担着图像信息采集的重要任务。图像传感器又是相机的核心元器件，主要有CCD和CMOS两种类型，其工作原理是将相机镜头接收到的光学信号转化成数字信号。选择合适的相机是机器视觉系统设计的重要环节，不仅直接决定了采集图像的质量和速度，同时也与整个系统的运行模式相关。 图像处理系统接收到相机传来的数字图像之后，通过各种软件算法进行图像特征提取、特征分析和数据标定，最后进行判断。这是各种视觉算法研究最为集中的部分，从传统的模式识别算法，到当前热门的各种机器学习方法，都是为了更好的让机器理解环境。 对于人来讲，识别某一个物体是苹果似乎理所当然，但是对于机器人来讲，就需要提取各种各样不同种类、颜色、形状的苹果特征，然后训练得到一个苹果的“模型”，再通过这个模型对实时图像做匹配，从而分析面前这个东西到底是不是苹果。 在机器人系统中，视觉识别的结果最终要和机器人的某些行为绑定，也就是第三个部分——控制输出，包含I/O接口、运动控制、可视化显示等。当图像处理系统完成图像分析后，将判断的结果发给机器人控制系统，接下来机器人完成运动控制。比如视觉识别到了抓取目标的位置，通过IO口控制夹爪完成抓取和放置，过程中识别的结果和运动的状态，都可以在上位机中显示，方便我们监控。 就机器视觉而言，在这三个部分中，图像分析占据了绝对的核心，涉及的方法、使用的各种开源软件或者框架非常多，这也是我们后续开发的重点，TogetherROS中提供了大量的算法、工具和功能支持。 旭日X3派配置 了解了机器视觉的基本原理和流程，相信大家对视觉应用已经充满了期待，我们这就准备开始。 后续课程中，我们将继续在旭日X3派的开发板上，使用TogetherROS实现各种各样的视觉例程，不过我们得先找到一个相机，比如usb相机或者MIPI接口配套的相机模块，然后连接到开发板对应的接口上。 电脑和开发板之前通过网线连接，便于我们查看视觉处理的结果，速度更快。 如果有HDMI屏幕的话，也可以准备好，稍后需要使用的时候插上查看结果，如果没有的话，也没有影响，后续我们会使用一套网络传输工具，通过板卡的IP地址，就可以看到图像处理的实时状态啦。 USB相机图像采集 关于相机的驱动，请大家也再确认一下，这是后续视觉处理的基础。 如果是USB相机的话，可以参考这个过程验证下是否可以顺利看到图像。 # 旭日X3派 $ sudo apt install ros-foxy-usb-cam $ cd /opt/tros $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros $ source /opt/tros/local_setup.bash $ ros2 launch usb_cam demo_launch.py # 修改params.yaml配置文件中的设备号 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view MIPI相机图像采集 如果使用的是MIPI相机的话，可以参考这个流程驱动相机并显示图像。 # 旭日X3派 $ source /opt/tros/local_setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p video_device: = F37 -p image_width: = 960 -p image_height: = 540 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view 为了提高图像的编码和传输效率，我们建议大家使用MIPI接口的相机，后续应用功能我们也会以该相机为主。","text_tokens":["今日","其","模拟","自己","o","包含","i","大脑","--","至今","研究","喻为","人眼","仅仅","当然","长久","地址","一般来讲","可重复性","、","实时","以及","射线","用到","不仅","amr","广泛","实际","一下","注重","所示","一样","直接","输出","医院","支持","工业","主要","非","冰山一角","原始","很多","一系列","“","了解","突破","也","绝对","判断","驾驶","重复性","—","f37","定性","height","对","foxy","重复","匹配","众多","找到","ccd","通过","又","接下来","usb","传统","参与","看到","变化","精度","绑定","mipi","验证","是不是","关键技术","获取","x3","诸多","更好","生产","传来","/","适合","需求","先","延伸","特殊","很大","转变成","采样","光","让","信息","参考","转变","特征","光源","神经","擅长于","整个","四个","后期","测量","镜头","本原","涉及",".","采集","开发","工作","sudo","之前","准备","tros","有","类似","#","可比","范围","当今","简单","承担","视觉","各样","cd","；","乃至","计算机","yaml","个","传感","领域","还有","不同","=","显示","事物","得","可以","涉猎","旭日","run","以","配置文件","原理","标定","着","比如","转化","左边","$","接口","相机","图像处理","苹果","apt","技术","可","位置","像","多种","第三","两个","的话","可视","光学","传感器","无人","精细","场景","而言","连接","提高","多","接收","软件","科学","之后","充满","工件","：","就是","感器","两种","处理","到底","，","流程","农场","编码","各种各样","爪","是","数字电路","亟待","紫外光","工具","功能","合适","控制","更","插上","接下","便于","最为","相关","提取","快速","最后","环境","image","硬件","训练","检验","服务","来","算机","随着","成像","网络","加以","红外光","开始","开发板","查看","压力","快","核心","效果","该","模型","io","优势","后续","抓取","确定","下来","数字图像","两只","问题","种类","还","客观","launch","机器","设备","不少","理所当然","demo","网线","一系","和","能够","摄像头","或","于","系统","带来","video","就","分析","各个","使用","计算机科学","板卡","关于","bash","结构化","完成","要","_","（","width","已经","后","过程","py","波段","交通","元器件","是否","这个","被","占据","时至今日","来讲","类型","机中","号","像头","可视化","光谱","540","不是","智能","某","传输","分为","进行","soft","装配","可见","发展","变成","这","复杂","人工","红外","特征分析","如图所示","屏幕","相对","”","发给","定量","pc","重要环节","应用","需要","活跃","特征提取","模块","热门","ros2","大家","难上加难","元器","view","农业","自动化","颜色","x射线","理学","突显","从","深度","驱动","想","框架","一个","运动","顺利","不仅仅","ir","数字","照明","但是","各种","source","丰富","结构","local","但","uv","数字信号","效率","-","create","算法","install","交叉学科","摄像","眼睛","识别","人工智能","对应","加工","用","hdmi","夹","会","物流","做","opt","模式识别","例程","当","从而","同时","图像","一步","修改","关键","重点","图片","物理学","link","任务","复性","决定","状态","质量","信号","为了","稍后","概念","典型","捕捉","其中","面前","方便","中",":","电脑","开源"," ","不过","960","这是","再","数据","好","信号处理","千变万化","各个领域","配套","。","setup","横跨","配件","似乎","检测","电路","如果","第三个","我们","物品","影响","目标","三个","只是","人脑","结果","形状","环节","转化成","的","部分","最终","配置","行为","对于","学习","相信","组织","解释","实现","课程","口","继续","汽车","解决","无人驾驶","一般","监控","放置","ip地址","然后","等","就要","都","物体","冰山","或者","物理","自动","计算","可见光","一套","得到","逐渐","学科","文件","设计","用于","方法","params","交叉","rqt","请","args","生物","数字电","上位","理解","非常适合","没有","亟待解决","建议","仓储","）","生物学","凭借","擅长","上","某些","并","模式","选择","东西","p","当前","系列","运行","python3","外部","非常","ros","到","因素","能量","基本原理","客观事物","跨越","cmos","时候","cam","集中","紫外","介绍","下","提供","开发者","在","了","依然","人","重要","派","机器人","基础","与","啦","确认","长于","一角","将","为主","化成","人类","大量","待","器件","速度","期待","积累","控制系统","基本","device","较为","togetherros"],"title":"机器视觉介绍","title_tokens":["机器","视觉","介绍"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_1","text":"","text_tokens":[],"title":"机器视觉介绍","title_tokens":["机器","视觉","介绍"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_2","text":"机器视觉， 就是用计算机来模拟人的视觉功能，但这并不仅仅是人眼的简单延伸，更重要的是像人脑一样，可以从客观事物的图像中提取信息，进行处理并加以理解，最终用于实际检测、控制等场景。 获取图像信息相对简单，但想让机器人理解图像中千变万化的物品，就难上加难了。 为了解决这一系列复杂的问题，机器视觉也是一个涉猎广泛的交叉学科，横跨人工智能、神经生物学、物理学、计算机科学、图像处理、模式识别等诸多领域。时至今日，在各个领域中，都有大量开发者或组织参与其中，也积累了众多技术，不过依然还有很多问题亟待解决，就像我们对自己大脑的研究也只是冰山一角一样，机器视觉的研究也将会是一个长久的工作。 机器视觉相关的关键技术也有不少，比如视觉图像的采集和信号处理，这个过程主要是通过传感器硬件采集外部光信号的过程，光信号最终会转变成数字电路的信号，便于下一步的处理；类似左边图片中看到的效果，获取图像之后，更重要的是要识别图像中的物体、确定物体的位置、或者检测物品的变化，这就要用到模式识别或者机器学习等技术，这个部分也是当今机器视觉研究的重点。 和人类的两只眼睛不同，机器用于获取图像的传感器种类较为丰富，可以是一个摄像头，也可以是两个摄像头，还可以是三个、四个、很多个摄像头，不仅可以获取颜色信息，还可以通过红外相机获取深度或者能量信息，这可比人眼获取的信息丰富多了，当然，这也会对后期的处理带来不同的计算压力。 在工业领域，机器视觉系统已经被广泛用于自动检验、工件加工、装配自动化以及生产过程控制等工作。随着机器人的快速发展和应用，机器视觉也逐渐应用于农业机器人、AMR物流机器人、服务机器人、无人驾驶汽车等各种机器人，活跃在农场、物流、仓储、交通、医院等多种环境中。","text_tokens":["已经","今日","过程","检测","左边","模拟","自己","电路","交通","我们","物品","相机","大脑","这个","三个","图像处理","只是","至今","研究","技术","人眼","仅仅","人脑","位置","时至今日","像","长久","当然","被","多种","像头","两个","的","部分","传感器","无人","智能","、","场景","最终","多","以及","用到","不仅","进行","amr","学习","广泛","实际","组织","装配","发展","变成","科学","之后","这","复杂","人工","红外","工件","一样","相对","就是","感器","解决","汽车","无人驾驶","医院","工业","处理","主要","，","冰山一角","很多","一系列","农场","等","就要","应用","活跃","都","也","物体","冰山","是","数字电路","或者","难上加难","物理","亟待","计算","自动","驾驶","功能","控制","对","逐渐","更","众多","便于","农业","学科","相关","自动化","通过","提取","用于","快速","颜色","交叉","参与","看到","变化","理学","从","深度","想","环境","关键技术","硬件","一个","获取","生物","数字电","理解","检验","服务","不仅仅","来","诸多","数字","算机","亟待解决","各种","丰富","生产","随着","仓储","生物学","但","延伸","加以","并","模式","系列","转变成","交叉学科","压力","外部","摄像","眼睛","效果","识别","人工智能","光","让","信息","能量","加工","客观事物","转变","用","会","物流","神经","确定","模式识别","下","两只","问题","开发者","种类","在","了","依然","还","四个","图像","人","客观","一步","后期","机器","采集","关键","重要","开发","工作","不少","重点","有","机器人","图片","物理学","一系","类似","和","摄像头","或","可比","信号","为了","当今","于","其中","简单","系统","视觉","带来","一角","将","中","；","就","各个","计算机","计算机科学","人类","个","传感","领域","大量","还有","不同"," ","不过","事物","积累","可以","涉猎","信号处理","千变万化","各个领域","要","。","较为","横跨","比如"],"title":"机器视觉概念","title_tokens":["机器","概念","视觉"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_3","text":"人类视觉擅长于对复杂、非结构化的场景进行定性解释，但机器视觉凭借速度、精度和可重复性等优势，非常适合对结构化场景进行定量测量。 一般来讲，典型的机器视觉系统可以分为如图所示的三个部分：图像采集、图像分析和控制输出。 图像采集注重对原始光学信号的采样，是整个视觉系统的传感部分，核心是相机和相关的配件。 其中光源用于照明待检测的物体，并突显其特征，便于让相机能够更好的捕捉图像。光源是影响机器视觉系统成像质量的重要因素，好的光源和照明效果对机器视觉判断影响很大。当前，机器视觉的光源已经突破人眼的可见光范围，其光谱范围跨越红外光（IR）、可见光、紫外光（UV）乃至X射线波段，可实现更精细和更广泛的检测范围，以及特殊成像需求。 相机被喻为机器视觉系统的“眼睛”，承担着图像信息采集的重要任务。图像传感器又是相机的核心元器件，主要有CCD和CMOS两种类型，其工作原理是将相机镜头接收到的光学信号转化成数字信号。选择合适的相机是机器视觉系统设计的重要环节，不仅直接决定了采集图像的质量和速度，同时也与整个系统的运行模式相关。 图像处理系统接收到相机传来的数字图像之后，通过各种软件算法进行图像特征提取、特征分析和数据标定，最后进行判断。这是各种视觉算法研究最为集中的部分，从传统的模式识别算法，到当前热门的各种机器学习方法，都是为了更好的让机器理解环境。 对于人来讲，识别某一个物体是苹果似乎理所当然，但是对于机器人来讲，就需要提取各种各样不同种类、颜色、形状的苹果特征，然后训练得到一个苹果的“模型”，再通过这个模型对实时图像做匹配，从而分析面前这个东西到底是不是苹果。 在机器人系统中，视觉识别的结果最终要和机器人的某些行为绑定，也就是第三个部分——控制输出，包含I/O接口、运动控制、可视化显示等。当图像处理系统完成图像分析后，将判断的结果发给机器人控制系统，接下来机器人完成运动控制。比如视觉识别到了抓取目标的位置，通过IO口控制夹爪完成抓取和放置，过程中识别的结果和运动的状态，都可以在上位机中显示，方便我们监控。 就机器视觉而言，在这三个部分中，图像分析占据了绝对的核心，涉及的方法、使用的各种开源软件或者框架非常多，这也是我们后续开发的重点，TogetherROS中提供了大量的算法、工具和功能支持。","text_tokens":["已经","后","过程","其","检测","似乎","波段","元器件","o","包含","第三个","i","接口","我们","相机","影响","这个","目标","三个","图像处理","苹果","研究","被","人眼","可","喻为","位置","来讲","当然","类型","机中","占据","结果","第三","形状","环节","一般来讲","光谱","转化成","的","不是","可视化","可视","光学","部分","传感器","可重复性","某","、","精细","场景","最终","实时","而言","多","分为","行为","射线","以及","对于","不仅","进行","接收","软件","广泛","学习","可见","解释","实现","注重","复杂","所示","红外","之后","这","：","如图所示","特征分析","口","直接","就是","感器","两种","输出","支持","”","一般","主要","非","定量","，","着","处理","原始","重要环节","到底","发给","比如","放置","“","然后","等","需要","突破","特征提取","都","接下来","也","各种各样","绝对","物体","热门","是","判断","爪","或者","重复性","紫外光","—","定性","工具","功能","可见光","合适","元器","控制","得到","对","重复","更","匹配","ccd","便于","最为","接下","相关","又","设计","用于","通过","提取","最后","传统","方法","x射线","精度","颜色","绑定","突显","从","环境","是不是","框架","一个","上位","理解","训练","非常适合","运动","ir","数字","更好","照明","但是","各种","传来","结构","/","适合","需求","）","但","uv","凭借","成像","数字信号","擅长","某些","并","红外光","选择","模式","特殊","东西","监控","当前","算法","很大","运行","非常","核心","效果","采样","眼睛","识别","模型","让","优势","io","到","因素","信息","后续","跨越","抓取","特征","cmos","光源","夹","做","集中","下来","紫外","数字图像","擅长于","模式识别","当","提供","从而","同时","种类","在","整个","了","图像","人","测量","机器","镜头","涉及","采集","重要","理所当然","工作","开发","重点","有","机器人","任务","复性","决定","和","能够","与","状态","质量","信号","范围","为了","长于","典型","捕捉","其中","面前","系统","承担","视觉","各样","方便","将","中","乃至","分析","就","使用","化成","人类","传感","大量","待","器件","开源","不同"," ","这是","显示","再","速度","控制系统","数据","可以","好","结构化","原理","完成","要","。","（","togetherros","标定","配件","转化"],"title":"机器视觉流程","title_tokens":["机器","流程","视觉"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#x3","text":"了解了机器视觉的基本原理和流程，相信大家对视觉应用已经充满了期待，我们这就准备开始。 后续课程中，我们将继续在旭日X3派的开发板上，使用TogetherROS实现各种各样的视觉例程，不过我们得先找到一个相机，比如usb相机或者MIPI接口配套的相机模块，然后连接到开发板对应的接口上。 电脑和开发板之前通过网线连接，便于我们查看视觉处理的结果，速度更快。 如果有HDMI屏幕的话，也可以准备好，稍后需要使用的时候插上查看结果，如果没有的话，也没有影响，后续我们会使用一套网络传输工具，通过板卡的IP地址，就可以看到图像处理的实时状态啦。","text_tokens":["已经","如果","接口","我们","相机","影响","图像处理","地址","结果","的","的话","连接","传输","实时","相信","实现","课程","这","充满","屏幕","继续","处理","，","ip地址","流程","然后","了解","应用","需要","各种各样","也","模块","大家","或者","工具","一套","对","更","插上","找到","便于","通过","usb","看到","mipi","一个","x3","没有","各种","先","网络","上","开始","开发板","查看","快","对应","到","基本原理","后续","hdmi","时候","会","例程","在","了","图像","机器","本原","开发","之前","准备","派","有","网线","状态","和","啦","稍后","视觉","各样","将","中","就","使用","板卡","电脑"," ","不过","期待","速度","基本","得","可以","好","旭日","配套","。","原理","togetherros","比如"],"title":"旭日X3派配置","title_tokens":["旭日","x3","派","配置"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#usb","text":"关于相机的驱动，请大家也再确认一下，这是后续视觉处理的基础。 如果是USB相机的话，可以参考这个过程验证下是否可以顺利看到图像。 # 旭日X3派 $ sudo apt install ros-foxy-usb-cam $ cd /opt/tros $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros $ source /opt/tros/local_setup.bash $ ros2 launch usb_cam demo_launch.py # 修改params.yaml配置文件中的设备号 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view","text_tokens":["过程","py","$","如果","相机","是否","这个","--","apt","号","的","的话","配置","soft","一下","处理","pc","，","也","是","ros2","大家","foxy","view","文件","usb","。","params","rqt","看到","请","验证","驱动","image","x3","顺利","配置文件","source","local","/","-","create","install","python3","ros","参考","后续","cam","opt","下","图像","launch","设备","修改",".","demo","tros","sudo","派","link","基础","#","确认","视觉","cd","中","yaml","关于"," ","这是","再","bash","可以","旭日","_","run","setup"],"title":"USB相机图像采集","title_tokens":["相机","usb","图像","采集"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#mipi","text":"如果使用的是MIPI相机的话，可以参考这个流程驱动相机并显示图像。 # 旭日X3派 $ source /opt/tros/local_setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p video_device: = F37 -p image_width: = 960 -p image_height: = 540 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view 为了提高图像的编码和传输效率，我们建议大家使用MIPI接口的相机，后续应用功能我们也会以该相机为主。","text_tokens":["流程","派","setup","local","应用","编码","$","效率","#","device","如果","并","和","我们","接口","也","相机","是","ros2","这个","--","-","p","f37","为了","大家","功能","height","该","foxy","ros","video","view","使用","的",":","的话","540","参考","为主","后续","cam","rqt","提高","mipi"," ","args","传输","会","驱动","opt","=","显示","image","width","960","x3","bash","建议","可以","旭日","图像","_","run","source","以",".","。","/","pc","，","tros"],"title":"MIPI相机图像采集","title_tokens":["相机","mipi","图像","采集"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/","text":"CV图像加速处理 OpenCV是一个著名的机器视觉处理库，相信大家都有听过，这个库中有很多图像处理的基础算法，比如灰度变化、图像滤波等，不过这个库为了保证较好的通用性，主要通过软件实现各种算法，TogetherROS对此作了大量优化，我们一起来看看。 TogetherROS视觉加速 TogetherROS中集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 效果这么好，具体该如何使用呢？ 高斯滤波 我们先来看下图像处理中常用的高斯滤波算法，OpenCV和hobotcv，正面PK一下，我们也看看在程序中如何使用hobotcv的图像处理加速算法。 运行示例程序 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/hobot_cv/config/ . $ ros2 launch hobot_cv hobot_cv_gaussian_blur.launch.py 代码解析 代码地址：https://c-gitlab.horizon.ai/HHP/box/hobot_cv/-/blob/develop/test/test_gaussian_blur.cpp // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include <algorithm> #include <chrono> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <utility> #include \"hobotcv_gaussian_blur.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" void analyse_result ( cv :: Mat & out_filter , cv :: Mat & cls_filter , std :: string flag_name ) { auto start_time = std :: chrono :: steady_clock :: now (); std :: cout << \"\" << std :: endl ; std :: cout << \"analyse_result start \" << std :: endl ; std :: cout << \"---------\" << flag_name << std :: endl ; std :: cout << \"out_filter type:\" << out_filter . type () << \",cols:\" << out_filter . cols << \",rows:\" << out_filter . rows << \",channel:\" << out_filter . channels () << std :: endl ; std :: cout << \"cls_filter type:\" << cls_filter . type () << \",cols:\" << cls_filter . cols << \",rows:\" << cls_filter . rows << \",channel:\" << cls_filter . channels () << std :: endl ; double minvalue , maxvalue ; cv :: Point mixIdx , maxIdx ; cv :: minMaxLoc ( out_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"out_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"out_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"out_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: minMaxLoc ( cls_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"cls_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"cls_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"cls_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: Mat mat_diff = cv :: abs ( out_filter - cls_filter ); cv :: Scalar sum_error = cv :: sum ( mat_diff >= 1 ); cv :: Scalar mean_error = cv :: sum ( mat_diff ) / ( mat_diff . rows * mat_diff . cols ); cv :: minMaxLoc ( mat_diff , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"\" << std :: endl ; std :: cout << \"diff diff diff\" << std :: endl ; std :: cout << \"mat_diff minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"mat_diff min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"mat_diff max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; std :: cout << \"\" << std :: endl ; std :: cout << \"error sum:\" << sum_error [ 0 ] << \",max:\" << maxvalue << \",mean_error:\" << mean_error [ 0 ] << std :: endl ; int time_used_ms_end = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: steady_clock :: now () - start_time ) . count (); std :: cout << \"analyse_result,time_used_ms_end:\" << time_used_ms_end << std :: endl ; std :: cout << \"analyse_result end \" << std :: endl ; std :: cout << \"\" << std :: endl ; } int main () { int32_t ret = -1 ; HobotGaussianBlurParam blur_param ; HOBOTCV_INITIALIZE_GAUSSIAN_BLUR_PARAM ( & blur_param ); HobotCVGaussianBlurHandle handle ; ret = HobotCVGaussianBlurCreate ( blur_param , & handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurCreate failed, error msg:%d \\n \" , ret ); return -1 ; } for ( int i = 0 ; i < 5 ; i ++ ) { std :: string m_tof_file_s = \"images/frame1_\" + std :: to_string ( i ) + \".png\" ; std :: cout << \"===================\" << std :: endl ; std :: cout << \"image name :\" << m_tof_file_s << std :: endl ; cv :: Mat src = cv :: imread ( m_tof_file_s , CV_16UC1 ); cv :: Mat dst ; cv :: medianBlur ( src , src , 3 ); auto start_time_infe = std :: chrono :: steady_clock :: now (); ret = HobotCVGaussianBlurProcess ( handle , & src , & dst ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurProcess failed, error msg:%d \\n \" , ret ); return -1 ; } int infe_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_infe ). count (); std :: cout << \"infe cost time:\" << infe_time << std :: endl ; auto start_time_gauss = std :: chrono :: steady_clock :: now (); cv :: Mat gaussian_tof ; cv :: GaussianBlur ( src , gaussian_tof , cv :: Size ( 3 , 3 ), 0 , 0 , cv :: BORDER_REPLICATE ); int guss_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_gauss ). count (); std :: cout << \"guss_time cost time:\" << guss_time << std :: endl ; float save_rate = float (( guss_time * 1.0 - infe_time * 1.0 ) / guss_time ); std :: cout << \"hobotcv save rate:\" << save_rate << std :: endl ; analyse_result ( dst , gaussian_tof , \"GaussianBlur\" ); std :: cout << \"-------------------------\" << std :: endl ; std :: cout << \"\" << std :: endl ; } ret = HobotCVGaussianBlurDestroy ( handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurDestroy failed, error msg:%d \\n \" , ret ); return -1 ; } return 0 ; } 图像裁剪与缩放 再来看另外一个案例，图像的裁剪与缩放，比如这样一幅图片，我们尝试剪裁左上角的一小块图像出来，或者对裁剪的某一块图像放大来看看。 运行示例程序 # 配置TogetherROS环境 source /opt/tros/setup.bash # 从TogetherROS的安装路径中拷贝出运行示例需要的模型和配置文件。 cp -r /opt/tros/lib/hobot_cv/config/ . # 启动launch文件 ros2 launch hobot_cv hobot_cv_crop_resize.launch.py 代码解析 代码地址：https://c-gitlab.horizon.ai/HHP/box/hobot_cv/-/blob/develop/src/test.cpp // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include \"include/hobotcv_imgproc.h\" #include \"include/utils.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/core/types.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/opencv.hpp\" #include <fstream> #include <string> #include <chrono> #include <iostream> void writeImg ( cv :: Mat & mat , std :: string imgfile ) { cv :: Mat img_bgr ; cv :: cvtColor ( mat , img_bgr , cv :: COLOR_YUV2BGR_NV12 ); cv :: imwrite ( imgfile , img_bgr ); } int main () { std :: string image_file = \"config/test.jpg\" ; cv :: Mat bgr_mat = cv :: imread ( image_file , cv :: IMREAD_COLOR ); auto src_height = bgr_mat . rows ; auto src_width = bgr_mat . cols ; cv :: Mat srcmat_nv12 ; BGRToNv12 ( bgr_mat , srcmat_nv12 ); auto dst_height = src_height / 2 ; auto dst_width = src_width / 2 ; cv :: Mat dstmat_nv12 ( dst_height * 3 / 2 , dst_width , CV_8UC1 ); auto before_resize = std :: chrono :: system_clock :: now (); auto ret = hobot_cv :: hobotcv_resize ( srcmat_nv12 , src_height , src_width , dstmat_nv12 , dst_height , dst_width ); auto after_resize = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_resize - before_resize ). count (); if ( 0 == ret ) { std :: cout << \"resize finish, time: \" << interval << \"ms\" << std :: endl ; } writeImg ( dstmat_nv12 , \"./resize.jpg\" ); auto before_crop = std :: chrono :: system_clock :: now (); auto cropmat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , 200 , 200 , cv :: Range ( 0 , 200 ), cv :: Range ( 0 , 200 )); auto after_crop = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_crop - before_crop ). count (); std :: cout << \"crop finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropmat , \"./crop.jpg\" ); auto before_cropResize = std :: chrono :: system_clock :: now (); auto cropResizemat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , src_height , src_width , cv :: Range ( 200 , 400 ), cv :: Range ( 200 , 400 )); auto after_cropResize = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_cropResize - before_cropResize ). count (); std :: cout << \"cropResize finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropResizemat , \"./cropResize.jpg\" ); return 0 ; }","text_tokens":["hpp","initialize","i","优化","color","crop","地址","库中","point","路径","代码","、","率","types","express","part","一下","起来","maxvalue","in","without","主要","rate","很多","opencv2","示例","分别","也","编程","height","对","缩放","minvalue","通过","剪裁","变化","兼容","hobotcvgaussianblurhandle","time","fstream","filter","the","be","/","旋转","trade","png","先","file","协同","c","robotics","cp","chrono","左上","gaussian","ret","[","混合","img","range","any","mat","save","sum","5",".","bgrtonv12","开发","tros","有","尝试","cls","#","end","0","iterator","视觉","校正","cost","ai","多倍","opencv","放大","灰度","=","cols","小块","hhp","可以","m","配置文件","比如","count","$","2021","after","接口","size","裁剪","常用","图像处理","一","hobotgaussianblurparam","int32","}","倍","引擎","and","medianblur","集成","软件","nv12","出来","now","：","all","inc","处理","void","，","src","algorithm","加速","滤波","地平线","是","start","对此","更","帧","便于","一小块",",","tof","3","x","finish","image","环境","硬件","images","一幅","imgfile","做到","main","来","提升","error","作","200","string","程序","算子","gauss","cv","cropresize","畸变","if","效果","该","purpose","模型","高斯","如何","hobot","400","launch","min","机器","failed","work","+","？","clock","和","r","owned","系统","n","使用",">","this","案例","copied","t","box","2","bash","性能","return","pk","_","gitlab","minmaxloc","width","py","way","disclosed","过","iostream","这个","lib","steady","int","or","某","cvtcolor","著名","进行","imgproc","duration","replicate","writeimg",")","confidential","应用","需要","通用性","ros2","大家","甚至","imread","material","风格","1","出","resize","guss","cropresizemat","解析","这么","before","%","of","从","一个","handle","消耗","msg","hobotcvgaussianblurdestroy","milliseconds","interval","各种","source","hobotcvgaussianblurcreate","软硬","diff","system","test","scalar","8uc1","cout","效率","cpp","utils","-","通用","算法","安装","正面","听","看看","测试","imwrite","transmitted","&","opt","这样","系统资源","图像","y","max","h","图片","降低","jpg","printf","为了","type","dst","rights","no","拷贝","中",":","软硬件","double","name","flag"," ","不过","cast","s","再","may","secrets","好","for","setup","。","core","https","queue","而且","我们","底层","frame1","16uc1","的","analyse","启动","*","std","对比","配置","相信","实现","rows","togetherros","endl","copyright","is","芯片","include","infe","等","blob","资源","来看","auto","都","呢","horizon","cropmat","或者","abs","imgcodecs","\\","border","一块","channels","文件","gaussianblur","方法","contains","上角","srcmat","d","hobotcvgaussianblurprocess","microseconds","reserved",";","保证","-------------------------","<","bgr","(","]","上","例如","blur","yuv2bgr","used","运行","utility","具体","左上角","地平","reproduced","float","库","到","map","out","下","param","information","ms","result","在","了","permission","较","{","iomanip","一小","channel","基础","与","---------","by","++","develop","\"","written","大量","另外","1.0","to","mixidx","mean","maxidx","dstmat","config","hobotcv","proprietary"],"title":"CV图像处理加速","title_tokens":["图像处理","cv","图像","加速","处理"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#cv","text":"OpenCV是一个著名的机器视觉处理库，相信大家都有听过，这个库中有很多图像处理的基础算法，比如灰度变化、图像滤波等，不过这个库为了保证较好的通用性，主要通过软件实现各种算法，TogetherROS对此作了大量优化，我们一起来看看。","text_tokens":["比如","很多","有","等","通用性","基础","都","滤波","过","我们","是","通用","这个","大家","为了","算法","对此","图像处理","优化","一","视觉","听","库中","看看","的","库","opencv","通过","大量","灰度","变化","、","不过","著名","软件","相信","一个","实现","起来","主要","好","了","图像","较","作","机器","各种","保证","。","处理","togetherros","，"],"title":"CV图像加速处理","title_tokens":["处理","加速","cv","图像"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#togetherros","text":"TogetherROS中集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 效果这么好，具体该如何使用呢？","text_tokens":["而且","接口","我们","常用","底层","倍","的","引擎","对比","、","率","集成","进行","软件","实现","处理","，","芯片","等","应用","资源","加速","滤波","分别","地平线","呢","甚至","编程","缩放","风格","更","帧","便于","通过","方法","兼容","3","这么","硬件","做到","消耗","提升","旋转","算子","软硬","cv","协同","上","效率","例如","畸变","运行","具体","效果","该","地平","库","混合","测试","到","高斯","系统资源","如何","hobot","在","了","图像","开发","？","降低","与","系统","视觉","校正","中","使用","多倍","opencv","软硬件"," ","2","性能","可以","好","。","togetherros"],"title":"TogetherROS视觉加速","title_tokens":["加速","togetherros","视觉"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_1","text":"我们先来看下图像处理中常用的高斯滤波算法，OpenCV和hobotcv，正面PK一下，我们也看看在程序中如何使用hobotcv的图像处理加速算法。","text_tokens":["先","来看","加速","滤波","和","也","我们","常用","算法","图像处理","正面","看看","中","使用","的","opencv","高斯","下","一下","如何","在","pk","图像","hobotcv","。","程序","处理","，"],"title":"高斯滤波","title_tokens":["滤波","高斯"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_2","text":"$ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/hobot_cv/config/ . $ ros2 launch hobot_cv hobot_cv_gaussian_blur.launch.py","text_tokens":["cv","py","$","blur","r","cp","-","ros2","gaussian","lib"," ","opt","bash","config","hobot","_","launch","source",".","setup","/","tros"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_3","text":"代码地址：https://c-gitlab.horizon.ai/HHP/box/hobot_cv/-/blob/develop/test/test_gaussian_blur.cpp // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include <algorithm> #include <chrono> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <utility> #include \"hobotcv_gaussian_blur.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" void analyse_result ( cv :: Mat & out_filter , cv :: Mat & cls_filter , std :: string flag_name ) { auto start_time = std :: chrono :: steady_clock :: now (); std :: cout << \"\" << std :: endl ; std :: cout << \"analyse_result start \" << std :: endl ; std :: cout << \"---------\" << flag_name << std :: endl ; std :: cout << \"out_filter type:\" << out_filter . type () << \",cols:\" << out_filter . cols << \",rows:\" << out_filter . rows << \",channel:\" << out_filter . channels () << std :: endl ; std :: cout << \"cls_filter type:\" << cls_filter . type () << \",cols:\" << cls_filter . cols << \",rows:\" << cls_filter . rows << \",channel:\" << cls_filter . channels () << std :: endl ; double minvalue , maxvalue ; cv :: Point mixIdx , maxIdx ; cv :: minMaxLoc ( out_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"out_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"out_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"out_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: minMaxLoc ( cls_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"cls_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"cls_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"cls_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: Mat mat_diff = cv :: abs ( out_filter - cls_filter ); cv :: Scalar sum_error = cv :: sum ( mat_diff >= 1 ); cv :: Scalar mean_error = cv :: sum ( mat_diff ) / ( mat_diff . rows * mat_diff . cols ); cv :: minMaxLoc ( mat_diff , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"\" << std :: endl ; std :: cout << \"diff diff diff\" << std :: endl ; std :: cout << \"mat_diff minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"mat_diff min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"mat_diff max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; std :: cout << \"\" << std :: endl ; std :: cout << \"error sum:\" << sum_error [ 0 ] << \",max:\" << maxvalue << \",mean_error:\" << mean_error [ 0 ] << std :: endl ; int time_used_ms_end = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: steady_clock :: now () - start_time ) . count (); std :: cout << \"analyse_result,time_used_ms_end:\" << time_used_ms_end << std :: endl ; std :: cout << \"analyse_result end \" << std :: endl ; std :: cout << \"\" << std :: endl ; } int main () { int32_t ret = -1 ; HobotGaussianBlurParam blur_param ; HOBOTCV_INITIALIZE_GAUSSIAN_BLUR_PARAM ( & blur_param ); HobotCVGaussianBlurHandle handle ; ret = HobotCVGaussianBlurCreate ( blur_param , & handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurCreate failed, error msg:%d \\n \" , ret ); return -1 ; } for ( int i = 0 ; i < 5 ; i ++ ) { std :: string m_tof_file_s = \"images/frame1_\" + std :: to_string ( i ) + \".png\" ; std :: cout << \"===================\" << std :: endl ; std :: cout << \"image name :\" << m_tof_file_s << std :: endl ; cv :: Mat src = cv :: imread ( m_tof_file_s , CV_16UC1 ); cv :: Mat dst ; cv :: medianBlur ( src , src , 3 ); auto start_time_infe = std :: chrono :: steady_clock :: now (); ret = HobotCVGaussianBlurProcess ( handle , & src , & dst ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurProcess failed, error msg:%d \\n \" , ret ); return -1 ; } int infe_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_infe ). count (); std :: cout << \"infe cost time:\" << infe_time << std :: endl ; auto start_time_gauss = std :: chrono :: steady_clock :: now (); cv :: Mat gaussian_tof ; cv :: GaussianBlur ( src , gaussian_tof , cv :: Size ( 3 , 3 ), 0 , 0 , cv :: BORDER_REPLICATE ); int guss_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_gauss ). count (); std :: cout << \"guss_time cost time:\" << guss_time << std :: endl ; float save_rate = float (( guss_time * 1.0 - infe_time * 1.0 ) / guss_time ); std :: cout << \"hobotcv save rate:\" << save_rate << std :: endl ; analyse_result ( dst , gaussian_tof , \"GaussianBlur\" ); std :: cout << \"-------------------------\" << std :: endl ; std :: cout << \"\" << std :: endl ; } ret = HobotCVGaussianBlurDestroy ( handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurDestroy failed, error msg:%d \\n \" , ret ); return -1 ; } return 0 ; }","text_tokens":["core","https","hpp","count","way","2021","queue","disclosed","initialize","i","size","iostream","frame1","hobotgaussianblurparam","int32","steady","地址","16uc1","int","}","point","代码","analyse","or","*","std","and","medianblur","express","part","rows","imgproc","maxvalue","endl","now","：","copyright","all","is","in","inc","duration","replicate","without","void",")","rate","include","confidential","opencv2","infe","src","blob","algorithm","auto","horizon","start","abs","imgcodecs","\\","border","imread","material","minvalue","1","channels","guss",",","gaussianblur","tof","contains","hobotcvgaussianblurhandle","3","d","x","%","of","time","image","images","fstream","filter","hobotcvgaussianblurprocess","handle","microseconds","main","the","msg","reserved","hobotcvgaussianblurdestroy","error","milliseconds",";","be","string","-------------------------","trade","/","png","hobotcvgaussianblurcreate","<","diff","file","gauss","(","test","cv","]","scalar","c","cout","cpp","robotics","blur","-","if","chrono","used","gaussian","utility","purpose","ret","reproduced","[","float","map","transmitted","&","out","any","param","mat","information","ms","save","result","sum","hobot","permission","5","min","{","y","failed",".","iomanip","max","work","h","+","clock","cls","channel","#","---------","printf","end","0","type","dst","rights","owned","no","by","iterator","++","n","develop","ai","cost","\"",":","written",">","this","double","1.0","name","copied","flag"," ","mixidx","t","to","box","=","cast","s","may","cols","mean","maxidx","secrets","hhp","return","_","m","for","gitlab","hobotcv","minmaxloc","proprietary"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_4","text":"再来看另外一个案例，图像的裁剪与缩放，比如这样一幅图片，我们尝试剪裁左上角的一小块图像出来，或者对裁剪的某一块图像放大来看看。","text_tokens":["一小","图片","，","尝试","来看","与","我们","裁剪","或者","左上","左上角","一块","对","看看","缩放","的","一小块","放大","另外","剪裁","某","案例","上角","一幅","这样","再","一个","小块","出来","来","图像","。","比如"],"title":"图像裁剪与缩放","title_tokens":["缩放","图像","裁剪","与"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_5","text":"# 配置TogetherROS环境 source /opt/tros/setup.bash # 从TogetherROS的安装路径中拷贝出运行示例需要的模型和配置文件。 cp -r /opt/tros/lib/hobot_cv/config/ . # 启动launch文件 ros2 launch hobot_cv hobot_cv_crop_resize.launch.py","text_tokens":["示例","需要","cv","py","#","和","cp","-","r","ros2","安装","运行","lib","crop","模型","拷贝","路径","中","的","出","启动","文件","resize","。"," ","配置","从","opt","环境","bash","config","配置文件","hobot","_","launch","source",".","setup","/","togetherros","tros"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_6","text":"代码地址：https://c-gitlab.horizon.ai/HHP/box/hobot_cv/-/blob/develop/src/test.cpp // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include \"include/hobotcv_imgproc.h\" #include \"include/utils.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/core/types.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/opencv.hpp\" #include <fstream> #include <string> #include <chrono> #include <iostream> void writeImg ( cv :: Mat & mat , std :: string imgfile ) { cv :: Mat img_bgr ; cv :: cvtColor ( mat , img_bgr , cv :: COLOR_YUV2BGR_NV12 ); cv :: imwrite ( imgfile , img_bgr ); } int main () { std :: string image_file = \"config/test.jpg\" ; cv :: Mat bgr_mat = cv :: imread ( image_file , cv :: IMREAD_COLOR ); auto src_height = bgr_mat . rows ; auto src_width = bgr_mat . cols ; cv :: Mat srcmat_nv12 ; BGRToNv12 ( bgr_mat , srcmat_nv12 ); auto dst_height = src_height / 2 ; auto dst_width = src_width / 2 ; cv :: Mat dstmat_nv12 ( dst_height * 3 / 2 , dst_width , CV_8UC1 ); auto before_resize = std :: chrono :: system_clock :: now (); auto ret = hobot_cv :: hobotcv_resize ( srcmat_nv12 , src_height , src_width , dstmat_nv12 , dst_height , dst_width ); auto after_resize = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_resize - before_resize ). count (); if ( 0 == ret ) { std :: cout << \"resize finish, time: \" << interval << \"ms\" << std :: endl ; } writeImg ( dstmat_nv12 , \"./resize.jpg\" ); auto before_crop = std :: chrono :: system_clock :: now (); auto cropmat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , 200 , 200 , cv :: Range ( 0 , 200 ), cv :: Range ( 0 , 200 )); auto after_crop = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_crop - before_crop ). count (); std :: cout << \"crop finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropmat , \"./crop.jpg\" ); auto before_cropResize = std :: chrono :: system_clock :: now (); auto cropResizemat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , src_height , src_width , cv :: Range ( 200 , 400 ), cv :: Range ( 200 , 400 )); auto after_cropResize = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_cropResize - before_cropResize ). count (); std :: cout << \"cropResize finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropResizemat , \"./cropResize.jpg\" ); return 0 ; }","text_tokens":["core","https","hpp","count","way","2021","after","disclosed","iostream","color","crop","地址","}","int","代码","or","*","std","and","cvtcolor","types","express","part","nv12","rows","imgproc","endl","now","：","copyright","all","is","in","inc","duration","without","writeimg","void",")","include","confidential","opencv2","src","blob","auto","horizon","cropmat","imgcodecs","height","imread","material","resize","cropresizemat",",","contains","srcmat","3","before","finish","of","time","image","imgfile","fstream","main","the","reserved","milliseconds","interval",";","200","be","string","trade","/","<","bgr","file","system","(","test","cv","c","8uc1","utils","cpp","cout","cropresize","robotics","-","if","chrono","yuv2bgr","used","purpose","ret","reproduced","imwrite","transmitted","&","img","range","any","mat","information","ms","400","hobot","permission","{",".","bgrtonv12","work","h","clock","jpg","#","0","dst","rights","owned","no","by","develop","ai","\"",":","written","opencv",">","this","copied"," ","box","=","cast","2","may","cols","secrets","config","hhp","dstmat","return","_","for","gitlab","hobotcv","proprietary","width"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/","text":"模型推理框架 智能机器人与机器学习是紧密相连的，机器学习又可以分成数据采集、标注、训练、推理等环节，其中数据的训练需要消耗大量算力，适合在服务器或者云端进行，不过训练好的模型可是要部署到机器人端进行推理运算的，所以模型推理的效率如何，直接决定了机器人视觉处理的效率，这刚好是TogetherROS所擅长的地方。 Hobot DNN模型推理库 TogetherROS集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 hobot_dnn是在地平线X3开发板上利用BPU处理器实现AI推理功能，基于地平线EasyDNN和ROS2 Node进行二次开发，为应用开发提供更简单易用的模型集成开发接口，包括模型管理、基于模型描述的输入处理及结果解析，以及模型输出内存分配管理等功能。 关于hobot_dnn的使用逻辑流程如这张图所示，供大家参考，我们后续也会通过具体的案例解释代码的实现过程。 算法与应用库 在Hobot DNN模型推理库的基础上，地平线还提供了一套基于TogetherROS系统的AI算法包，称为BOXs，这样我们就不需要从零构建算法，基于这些标准而高效的算法，可以更关注应用层面的APP开发。 从这张图中我们可以看到，这套AI算法包中包含两大块，一个是基础算法，一个是应用算法。 基础算法中主要是图像分类、语义分割和目标检测这些常用的算法，应用层面就会基于这些算法和某些场景，动态实现更为复杂的人体识别、骨骼点识别、手势识别等具体的功能，这些模块就可以和机器人运功功能直接结合，节省了我们开发AI视觉部分的时间。 模型推理测试 这套模型推理和算法库的效果如何呢？ 我们先来体验一个TogetherROS自带的案例，识别这张图片中的人，以及每个人的骨骼关键点。 # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。config中为example使用的模型，回灌使用的本地图片 $ cp -r /opt/tros/lib/dnn_node_example/config/ . # 使用本地jpg格式图片通过同步模式进行回环预测，并存储渲染后的图片 $ ros2 launch dnn_node_example hobot_dnn_node_example_feedback.launch.py","text_tokens":["回环","后","过程","检测","py","分割","$","管理","层面","服务器","这套","接口","我们","包含","目标","常用","底层","lib","结果","动态","路径","环节","基于","代码","的","处理器","输入","部分","引擎","包","智能","boxs","、","场景","二次开发","集成","配置","以及","进行","理器","学习","运功","充足","实际","实现","解释","这张","这","分配","人工","所示","复杂","feedback","云端","直接","调教","输出","预测","处理","主要","标注","芯片","，","包括","很多","推理","流程","回灌","示例","等","需要","应用","人体","也","地平线","模块","呢","是","ros2","或者","不用","分成","大家","功能","一套","刚好","时间","务器","更","众多","出","文件","又","通过","解析","看到","包中","从","自带","easydnn","框架","环境","一个","x3","而","训练","服务","运算","消耗","配置文件","利用","来","渲染","source","bpu","这些","/","适合","易用","节省","先","setup","擅长","上","借助","所","效率","某些","模式","并","cp","-","部署","开发板","算法","算力","安装","具体","运行","效果","识别","人工智能","地平","模型","分类","为","到","库","不","参考","测试","jpg","后续","本地","骨骼","会","每个","手势","opt","供","dnn","这样","标准","所以","提供","开发者","如何","hobot","在","了","还","体验","图像","语义","人","launch","机器","高效",".","采集","结合","关键","开发","关注","tros","中为","图片","机器人","构建","？","基础","相连","决定","和","与","端","啦","node","描述","称为","app","大块","#","r","很快","零","其中","简单","系统","example","视觉","拷贝","中","及","ai","使用","就","更为","大量","逻辑","格式","张图","二次","开源","关于","如"," ","案例","不过","紧密","点","可是","bash","数据","config","两大块","可以","好","保障","存储","_","要","内存","地方","花费","关键点","同步","。","togetherros"],"title":"模型推理框架","title_tokens":["推理","框架","模型"]},{"location":"hhp/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_1","text":"智能机器人与机器学习是紧密相连的，机器学习又可以分成数据采集、标注、训练、推理等环节，其中数据的训练需要消耗大量算力，适合在服务器或者云端进行，不过训练好的模型可是要部署到机器人端进行推理运算的，所以模型推理的效率如何，直接决定了机器人视觉处理的效率，这刚好是TogetherROS所擅长的地方。","text_tokens":["推理","机器人","等","需要","擅长","所","相连","效率","决定","与","端","服务器","是","或者","部署","分成","算力","其中","视觉","刚好","模型","务器","环节","的","到","又","大量","。","智能","、","不过","紧密","进行","学习","训练","服务","可是","运算","所以","数据","消耗","如何","可以","在","好","了","这","云端","要","直接","机器","地方","采集","处理","togetherros","标注","适合","，"],"title":"模型推理框架","title_tokens":["推理","框架","模型"]},{"location":"hhp/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#hobot-dnn","text":"TogetherROS集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 hobot_dnn是在地平线X3开发板上利用BPU处理器实现AI推理功能，基于地平线EasyDNN和ROS2 Node进行二次开发，为应用开发提供更简单易用的模型集成开发接口，包括模型管理、基于模型描述的输入处理及结果解析，以及模型输出内存分配管理等功能。 关于hobot_dnn的使用逻辑流程如这张图所示，供大家参考，我们后续也会通过具体的案例解释代码的实现过程。","text_tokens":["过程","管理","这套","接口","我们","底层","结果","基于","代码","的","处理器","输入","引擎","智能","、","二次开发","集成","以及","理器","进行","充足","实际","实现","解释","这","分配","人工","所示","调教","输出","处理","，","芯片","包括","很多","推理","流程","等","应用","也","地平线","是","ros2","大家","不用","功能","时间","更","众多","通过","解析","easydnn","x3","训练","利用","bpu","易用","上","借助","部署","开发板","算力","具体","人工智能","地平","模型","为","库","参考","后续","会","供","dnn","提供","开发者","hobot","在","了","开发","和","描述","啦","node","很快","简单","系统","中","及","ai","使用","就","逻辑","张图","二次","开源","关于","如"," ","案例","数据","可以","保障","_","内存","花费","。","togetherros"],"title":"Hobot DNN模型推理库","title_tokens":["推理","hobot"," ","模型","dnn","库"]},{"location":"hhp/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_2","text":"在Hobot DNN模型推理库的基础上，地平线还提供了一套基于TogetherROS系统的AI算法包，称为BOXs，这样我们就不需要从零构建算法，基于这些标准而高效的算法，可以更关注应用层面的APP开发。 从这张图中我们可以看到，这套AI算法包中包含两大块，一个是基础算法，一个是应用算法。 基础算法中主要是图像分类、语义分割和目标检测这些常用的算法，应用层面就会基于这些算法和某些场景，动态实现更为复杂的人体识别、骨骼点识别、手势识别等具体的功能，这些模块就可以和机器人运功功能直接结合，节省了我们开发AI视觉部分的时间。","text_tokens":["检测","分割","层面","这套","包含","我们","目标","常用","动态","基于","的","部分","包","boxs","、","场景","运功","实现","这","复杂","直接","主要","，","推理","等","需要","应用","人体","地平线","模块","是","功能","一套","时间","更","看到","包中","从","一个","而","这些","节省","上","某些","算法","具体","识别","地平","模型","分类","库","不","骨骼","会","手势","dnn","这样","标准","提供","hobot","在","了","还","图像","语义","机器","高效","结合","关注","开发","机器人","构建","基础","app","和","称为","大块","零","系统","视觉","中","ai","就","更为","张图"," ","点","两大块","可以","。","togetherros"],"title":"算法与应用库","title_tokens":["算法","库","应用","与"]},{"location":"hhp/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_3","text":"这套模型推理和算法库的效果如何呢？ 我们先来体验一个TogetherROS自带的案例，识别这张图片中的人，以及每个人的骨骼关键点。 # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。config中为example使用的模型，回灌使用的本地图片 $ cp -r /opt/tros/lib/dnn_node_example/config/ . # 使用本地jpg格式图片通过同步模式进行回环预测，并存储渲染后的图片 $ ros2 launch dnn_node_example hobot_dnn_node_example_feedback.launch.py","text_tokens":["回环","后","py","$","这套","我们","lib","路径","的","配置","以及","进行","这张","feedback","预测","，","推理","回灌","示例","需要","呢","ros2","出","文件","通过","。","从","自带","环境","一个","配置文件","来","渲染","source","/","先","模式","并","cp","-","算法","安装","运行","效果","识别","模型","库","本地","骨骼","每个","opt","dnn","如何","hobot","体验","人","launch",".","关键","中为","tros","图片","？","jpg","和","#","node","r","example","拷贝","中","使用","格式","案例"," ","bash","config","存储","_","关键点","同步","setup","togetherros"],"title":"模型推理测试","title_tokens":["测试","推理","模型"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/","text":"图像物体分类 接下来我们继续学习基于Hobot CNN模型推理库之上的视觉应用。 机器人要感知周边环境，那就得确定看到的图像中都有什么，比如地上有一只猫，旁边有一个桌子之类的，这个猫和桌子就是具体的物体分类啦。 图像分类原理 如果是人来识别一只猫的话，似乎再简单不过了，无论黑猫、白猫还是花猫，我们一眼就可以看出来。 不过这件事对于机器人来讲可没有那么简单，为了能够让机器准确识别一只猫，无数学者可是研究了几十年啊，虽然还赶不上人类的智慧，但是这件事已经没有那么遥不可及了。 比如说我们要让机器识别图像中有一只猫，我们就得先教会机器什么是猫，对此我们就得把各种各样猫的照片给计算机看，目的就是让机器学习，看的越多，识别的也就越准。 我们那里找这么多猫的图片呢？ 大家可能听说过一个著名的视觉对象数据库——ImageNet，里边有超过1400万张标注过的图像，2万多个类别，我们就可以利用这个庞大的数据库，找到很多猫的照片。 然后就搭建神经网络，把这些数据放进去训练了，调教出一套比较好的识别模型。 接下来把这套模型部署到机器人上，之后每当有一幅图像收到之后，就传到这个模型中，也就是模型推理，推理的结果就是类似这样的数据，概率最大的，也就是机器识别到的物体啦。 关于机器学习，理论众多，大家可以学习专门的课程，我们课上还是重点讲解在TogetherROS中的实现方法。 编程开发方法 我们来看这样一张图片，大家很快就可以发现这是一只斑马。 运行示例程序 我们如何用机器来识别它呢，大家先来运行这个案例，这是基于ImageNet数据集训练的模型，可以识别1000种常见的物体，我们看一下效果如何？ $ cd /app/ai_inference/01_basic_sample/ $ sudo python3 ./test_mobilenetv1.py 代码解析 test_mobilenetv1.py： #!/usr/bin/env python3 from hobot_dnn import pyeasy_dnn as dnn import numpy as np import cv2 def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_BGR2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] if __name__ == '__main__' : # test classification result models = dnn . load ( '../models/mobilenetv1_224x224_nv12.bin' ) # test input and output properties print ( \"=\" * 10 , \"inputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) print ( \"inputs[0] name is:\" , models [ 0 ] . inputs [ 0 ] . name ) print ( \"=\" * 10 , \"outputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . outputs [ 0 ] . properties ) print ( \"outputs[0] name is:\" , models [ 0 ] . outputs [ 0 ] . name ) # 打开图片 img_file = cv2 . imread ( './zebra_cls.jpg' ) # 把图片缩放到模型的输入尺寸 # 获取算法模型的输入tensor 的尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) des_dim = ( w , h ) resized_data = cv2 . resize ( img_file , des_dim , interpolation = cv2 . INTER_AREA ) nv12_data = bgr2nv12_opencv ( resized_data ) # 模型推理 outputs = models [ 0 ] . forward ( nv12_data ) print ( \"=\" * 10 , \"Get output[0] numpy data\" , \"=\" * 10 ) print ( \"output[0] buffer numpy info: \" ) print ( \"shape: \" , outputs [ 0 ] . buffer . shape ) print ( \"dtype: \" , outputs [ 0 ] . buffer . dtype ) # print(\"First 10 results:\", outputs[0].buffer[0][:10]) # 从输出结果中得到值最大的那个序号，比如 zebra 就是第 340 个值，应该大于 0.99 print ( \"=\" * 10 , \"Classification result\" , \"=\" * 10 ) assert np . argmax ( outputs [ 0 ] . buffer ) == 340 # 输出类别序号和预测概率值 print ( \"cls id: %d Confidence: %f \" % ( np . argmax ( outputs [ 0 ] . buffer ), outputs [ 0 ] . buffer [ 0 ][ np . argmax ( outputs [ 0 ] . buffer )])) Mobilenetv2物体分类 用图片进行识别不太过瘾，毕竟是静态的图像，没问题，TogetherROS中还提供了实时物体分类的案例，我们继续来体验一下。 为了实时显示视觉识别的效果，这里我们需要启动TogetherROS中的一个web服务器，它会把视觉识别的实时效果，通过网络传输出来，我们直接在浏览器中就可以看到结果啦。也是便于我们开发调试的一个重要工具。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . 运行例程： $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/mobilenetv2workconfig.json image_width: = 480 image_height: = 272 在浏览器中登录192.168.1.10，就可以看到分类效果啦：","text_tokens":["最大","192.168","这套","transpose","load","color","研究","import","概率","代码","庞大","imagenet","、","实时","runtime","inputs","一下","种","就可以看","usr","直接","输出","预测","很多","示例","也","旁边","开发方法","—","编程","height","classification","智慧","众多","找到","通过","接下来","看到","白猫","常见","1.10","forward","获取","十年","搭建","无数","/","先","file","__","专门","序号","比较","每当","web","pro","interpolation","cp","部署","'","没","事","让","[","id","sample","斑马","神经","01","img","这件","应该","几十年","体验","值","尺寸",".","开发","sudo","tros","有","cls","类似","#","area","0","简单","视觉","各样","cd","ai","mobilenetv2","把","计算机","opencv","调试","看","=","显示","websocket","超过","des","可是","得","cnn","可以","理论","那个","原理","bgr2nv12","比如","shape","..","$","服务器","else","找","缩","可","argmax","input","的话","输入","assert","万张","and","多","nv12","出来","之后","：","就是","调教","浏览器","，","first","bgr2yuv","照片","什么","万多","各种各样","as","是","对此","工具","from","接下","便于","那",",","nchw","数据库","教会","目的","3","x","272","环境","image","一幅","训练","服务","main","来","放到","算机","yuv420p","这些","程序","网络","放进去","properties","对象","zeros","神经网","if","效果","numpy","模型","buffer","啊","不可","output","确定","下来","问题","如何","hobot","还","launch","机器","resized","它","+","？","和","能够","node","r","0.99","它会","example","周边环境","放进","就","案例","关于","2","bash","bin","zebra","return","_","要","width","已经","inter","py","1400","过","confidence","这个","收到","lib","登录","来讲","1000","基于","课上","虽然","类别","10","之上","cv2","json","传输","cvtcolor","著名","进行","4","讲解","&&","标注","env",")","pyeasy","打开","share","推理","感知","应用","需要","这里","ros2","大家","f","imread","1","出","resize","解析","inference","这么","%","万多个","从","一个","like","340","mobilenetv2workconfig","利用","print","但是","各种","source","def","uv","test","周边","黑猫","reshape","-","算法","识别","越","据库","过瘾","用","集","get","opt","dnn","这样","例程","图像","y","多个","h","info","神经网络","重点","图片","浏览","jpg","准确","为了","type","毕竟","很快","赶不上","中","之类","中有",":","data","nginx","name","静态"," ","不过","传到","outputs","这是","再","数据","一张","好","听说","chmod","人来","。","setup","benchmark","越准","似乎","i420","还是","如果","我们","一只","花猫","w","结果","的","启动","*","dtype","大于","对于","不太","学习","实现","桌子","课程","webservice","dim","那么","继续","is","无论","个值","packed","然后","sbin","遥不可及","来看","都","学者","呢","results","物体","计算","一套","tensor","得到","务器","planar","一眼","480","地上","方法","mobilenetv1","d","发现","没有","models","比如说","!","(","]","上","给","p","里边","运行","具体","python3","几十","hw","分类","可能","库","到","第","提供","result","多猫","了","在","layout","重要","进去","机器人","app","啦","webserver","猫","224x224","\"","人类","那里","config","np","basic","togetherros"],"title":"图像物体分类","title_tokens":["物体","图像","分类"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_1","text":"接下来我们继续学习基于Hobot CNN模型推理库之上的视觉应用。 机器人要感知周边环境，那就得确定看到的图像中都有什么，比如地上有一只猫，旁边有一个桌子之类的，这个猫和桌子就是具体的物体分类啦。","text_tokens":["比如","推理","有","机器人","感知","应用","周边","都","什么","和","啦","我们","物体","旁边","一只","这个","猫","具体","视觉","周边环境","模型","分类","中","基于","之类","接下","的","库","就","那","地上","接下来","之上","看到"," ","确定","下来","环境","学习","一个","桌子","得","cnn","hobot","图像","继续","要","机器","就是","。","，"],"title":"图像物体分类","title_tokens":["物体","图像","分类"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_2","text":"如果是人来识别一只猫的话，似乎再简单不过了，无论黑猫、白猫还是花猫，我们一眼就可以看出来。 不过这件事对于机器人来讲可没有那么简单，为了能够让机器准确识别一只猫，无数学者可是研究了几十年啊，虽然还赶不上人类的智慧，但是这件事已经没有那么遥不可及了。 比如说我们要让机器识别图像中有一只猫，我们就得先教会机器什么是猫，对此我们就得把各种各样猫的照片给计算机看，目的就是让机器学习，看的越多，识别的也就越准。 我们那里找这么多猫的图片呢？ 大家可能听说过一个著名的视觉对象数据库——ImageNet，里边有超过1400万张标注过的图像，2万多个类别，我们就可以利用这个庞大的数据库，找到很多猫的照片。 然后就搭建神经网络，把这些数据放进去训练了，调教出一套比较好的识别模型。 接下来把这套模型部署到机器人上，之后每当有一幅图像收到之后，就传到这个模型中，也就是模型推理，推理的结果就是类似这样的数据，概率最大的，也就是机器识别到的物体啦。 关于机器学习，理论众多，大家可以学习专门的课程，我们课上还是重点讲解在TogetherROS中的实现方法。","text_tokens":["已经","最大","似乎","还是","如果","1400","这套","我们","过","一只","找","这个","收到","花猫","研究","可","来讲","结果","概率","的","虽然","的话","课上","庞大","类别","imagenet","万张","、","多","对于","著名","学习","实现","课程","讲解","出来","之后","那么","就可以看","就是","无论","调教","标注","，","很多","推理","然后","遥不可及","照片","什么","学者","各种各样","也","呢","万多","物体","是","大家","对此","—","计算","一套","智慧","众多","找到","接下","一眼","出","接下来","方法","数据库","教会","目的","白猫","这么","万多个","一幅","一个","训练","十年","搭建","没有","无数","利用","算机","但是","各种","比如说","这些","先","网络","放进去","专门","比较","上","每当","对象","黑猫","给","神经网","里边","部署","几十","识别","越","模型","据库","事","让","可能","到","啊","不可","神经","下来","这件","这样","几十年","越准","多猫","了","还","在","图像","机器","多个","进去","神经网络","重点","图片","机器人","有","？","类似","能够","啦","准确","为了","猫","赶不上","简单","各样","视觉","放进","中","中有","就","把","计算机","人类","关于"," ","看","不过","传到","超过","再","2","那里","可是","得","数据","可以","好","理论","要","听说","人来","。","togetherros","比如"],"title":"图像分类原理","title_tokens":["原理","图像","分类"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_3","text":"我们来看这样一张图片，大家很快就可以发现这是一只斑马。","text_tokens":["一张","。","图片","可以","很快","斑马","来看","发现","就","这是","大家","我们","这样","一只","，"],"title":"编程开发方法","title_tokens":["编程","方法","开发方法","开发"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_4","text":"我们如何用机器来识别它呢，大家先来运行这个案例，这是基于ImageNet数据集训练的模型，可以识别1000种常见的物体，我们看一下效果如何？ $ cd /app/ai_inference/01_basic_sample/ $ sudo python3 ./test_mobilenetv1.py","text_tokens":["先","它","test","？","py","$","app","呢","我们","物体","这个","大家","运行","python3","效果","识别","模型","1000","cd","基于","ai","的","用","imagenet","mobilenetv1","sample","案例","inference","常见"," ","集","看","01","这是","一下","训练","数据","种","如何","可以","来","_","机器","basic",".","/","，","sudo"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_5","text":"test_mobilenetv1.py： #!/usr/bin/env python3 from hobot_dnn import pyeasy_dnn as dnn import numpy as np import cv2 def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_BGR2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] if __name__ == '__main__' : # test classification result models = dnn . load ( '../models/mobilenetv1_224x224_nv12.bin' ) # test input and output properties print ( \"=\" * 10 , \"inputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) print ( \"inputs[0] name is:\" , models [ 0 ] . inputs [ 0 ] . name ) print ( \"=\" * 10 , \"outputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . outputs [ 0 ] . properties ) print ( \"outputs[0] name is:\" , models [ 0 ] . outputs [ 0 ] . name ) # 打开图片 img_file = cv2 . imread ( './zebra_cls.jpg' ) # 把图片缩放到模型的输入尺寸 # 获取算法模型的输入tensor 的尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) des_dim = ( w , h ) resized_data = cv2 . resize ( img_file , des_dim , interpolation = cv2 . INTER_AREA ) nv12_data = bgr2nv12_opencv ( resized_data ) # 模型推理 outputs = models [ 0 ] . forward ( nv12_data ) print ( \"=\" * 10 , \"Get output[0] numpy data\" , \"=\" * 10 ) print ( \"output[0] buffer numpy info: \" ) print ( \"shape: \" , outputs [ 0 ] . buffer . shape ) print ( \"dtype: \" , outputs [ 0 ] . buffer . dtype ) # print(\"First 10 results:\", outputs[0].buffer[0][:10]) # 从输出结果中得到值最大的那个序号，比如 zebra 就是第 340 个值，应该大于 0.99 print ( \"=\" * 10 , \"Classification result\" , \"=\" * 10 ) assert np . argmax ( outputs [ 0 ] . buffer ) == 340 # 输出类别序号和预测概率值 print ( \"cls id: %d Confidence: %f \" % ( np . argmax ( outputs [ 0 ] . buffer ), outputs [ 0 ] . buffer [ 0 ][ np . argmax ( outputs [ 0 ] . buffer )]))","text_tokens":["inter","最大","shape","py","i420","..","transpose","load","else","confidence","w","缩","color","argmax","import","input","结果","概率","的","*","dtype","输入","10","assert","cv2","类别","and","cvtcolor","大于","4","inputs","nv12","dim","：","usr","is","就是","个值","输出","预测",")","env","，","pyeasy","打开","比如","first","推理","packed","bgr2yuv","as","results","f","height","imread","tensor","classification","得到","planar","from","1","resize",",","nchw","mobilenetv1","3","d","%","从","image","forward","like","获取","main","340","models","放到","print","yuv420p","/","!","def","uv","file","(","properties","test","]","__","序号","zeros","pro","reshape","interpolation","if","算法","'","python3","hw","numpy","模型","[","buffer","id","get","output","img","第","dnn","应该","result","hobot","值","y","尺寸",".","layout","h","resized","info","图片","cls","jpg","#","和","area","0.99","0","type","224x224","中","\"",":","把","opencv","data","name"," ","outputs","=","2","des","bin","zebra","np","return","_","那个","bgr2nv12","width"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#mobilenetv2","text":"用图片进行识别不太过瘾，毕竟是静态的图像，没问题，TogetherROS中还提供了实时物体分类的案例，我们继续来体验一下。 为了实时显示视觉识别的效果，这里我们需要启动TogetherROS中的一个web服务器，它会把视觉识别的实时效果，通过网络传输出来，我们直接在浏览器中就可以看到结果啦。也是便于我们开发调试的一个重要工具。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . 运行例程： $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/mobilenetv2workconfig.json image_width: = 480 image_height: = 272 在浏览器中登录192.168.1.10，就可以看到分类效果啦：","text_tokens":["py","$","192.168","服务器","我们","lib","登录","结果","的","启动","json","实时","传输","不太","runtime","进行","一下","webservice","出来","：","继续","直接","&&","浏览器","，","share","sbin","需要","这里","benchmark","也","物体","是","ros2","工具","height","务器","便于","480","通过","看到","x","272","image","1.10","一个","服务","mobilenetv2workconfig","来","source","/","setup","file","网络","web","cp","-","p","运行","效果","识别","分类","没","过瘾","用","opt","dnn","例程","提供","问题","hobot","在","了","还","体验","图像","launch",".","重要","开发","tros","浏览","图片","+","#","啦","node","r","webserver","为了","毕竟","它会","example","视觉","cd","中","就",":","把","调试","nginx","案例","静态"," ","=","显示","websocket","bash","config","可以","_","chmod","。","togetherros","width"],"title":"Mobilenetv2物体分类","title_tokens":["mobilenetv2","物体","分类"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/","text":"动态目标检测 图像物体分类重在分析图像中存在的物体是什么，便于机器理解看到的环境信息，另外一种场景，机器不仅要识别某一物体，还要知道这个物体所在的位置，当物体在运动时，更要快速连续的跟踪，这就是目标检测，重在分析识别到物体在图像中的位置。 目标检测原理 假设我们要识别图像中这只狗的位置，以最为常用的YOLO算法为例，它会运用单个卷积神经网络(CNN) ，将图像分成网格，并预测每个网格的对象概率和边界框。 比如，对于这个图像，Yolo的CNN网络将输入的图片分割成7x7的网格，然后每个网格负责去检测那些中心点落在该格子内的目标，比如，小狗这个目标的中心点在左下角的网格中，那该网格就负责预测狗这个对象。 每个网格中将有多个边界框，在训练时，我们希望每个对象只有一个边界框，比如最终只有一个边界框把这只狗包起来。因此，我们根据哪个边界框与之前标注的重叠度最高，预测对象的位置和概率。 最终包围对象的边界框，就是识别的结果，使用四个描述符进行说明： 边界框的中心位置 边界框的高度 边界框的宽度 识别到对象所属的类 这样就完成了对目标的实时检测，拿到目标的信息之后，就可以进行后续的机器人行为控制了。 我们对目标检测系统运行速度的要求一般都比较高，可以实时处理视频流，比如车辆行驶的动态监测、自然环境中的目标识别，有着非常广泛的应用价值。 回到TogetherROS和旭日X3派的开发板，我们来看下这套软硬件结合的目标检测系统，效率如何。 MIPI相机目标检测 接下来，我们要利用MIPI相机，动态识别图像中各种各样的物体以及他们所在的位置，推理过程使用的是基于COCO数据集训练的80个类别，也就是可以识别80种常用的物体位置。 运行例程 $ cd /app/ai_inference/03_mipi_camera_sample/ $ python3 ./mipi_camera.py 代码解析 mipi_camera.py： #!/usr/bin/env python3 import numpy as np import cv2 import colorsys # Camera API libs from hobot_vio import libsrcampy as srcampy from hobot_dnn import pyeasy_dnn as dnn # detection model class names def get_classes (): return np . array ([ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" , \"bus\" , \"train\" , \"truck\" , \"boat\" , \"traffic light\" , \"fire hydrant\" , \"stop sign\" , \"parking meter\" , \"bench\" , \"bird\" , \"cat\" , \"dog\" , \"horse\" , \"sheep\" , \"cow\" , \"elephant\" , \"bear\" , \"zebra\" , \"giraffe\" , \"backpack\" , \"umbrella\" , \"handbag\" , \"tie\" , \"suitcase\" , \"frisbee\" , \"skis\" , \"snowboard\" , \"sports ball\" , \"kite\" , \"baseball bat\" , \"baseball glove\" , \"skateboard\" , \"surfboard\" , \"tennis racket\" , \"bottle\" , \"wine glass\" , \"cup\" , \"fork\" , \"knife\" , \"spoon\" , \"bowl\" , \"banana\" , \"apple\" , \"sandwich\" , \"orange\" , \"broccoli\" , \"carrot\" , \"hot dog\" , \"pizza\" , \"donut\" , \"cake\" , \"chair\" , \"couch\" , \"potted plant\" , \"bed\" , \"dining table\" , \"toilet\" , \"tv\" , \"laptop\" , \"mouse\" , \"remote\" , \"keyboard\" , \"cell phone\" , \"microwave\" , \"oven\" , \"toaster\" , \"sink\" , \"refrigerator\" , \"book\" , \"clock\" , \"vase\" , \"scissors\" , \"teddy bear\" , \"hair drier\" , \"toothbrush\" ]) def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_RGB2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] def postprocess ( model_output , model_hw_shape , origin_image = None , origin_img_shape = None , score_threshold = 0.5 , nms_threshold = 0.6 , dump_image = False ): input_height = model_hw_shape [ 0 ] input_width = model_hw_shape [ 1 ] if origin_image is not None : origin_image_shape = origin_image . shape [ 0 : 2 ] else : origin_image_shape = origin_img_shape prediction_bbox = decode ( outputs = model_output , score_threshold = score_threshold , origin_shape = origin_image_shape , input_size = 512 ) prediction_bbox = nms ( prediction_bbox , iou_threshold = nms_threshold ) prediction_bbox = np . array ( prediction_bbox ) topk = min ( prediction_bbox . shape [ 0 ], 1000 ) if topk != 0 : idx = np . argpartition ( prediction_bbox [ ... , 4 ], - topk )[ - topk :] prediction_bbox = prediction_bbox [ idx ] if dump_image and origin_image is not None : draw_bboxs ( origin_image , prediction_bbox ) return prediction_bbox def draw_bboxs ( image , bboxes , gt_classes_index = None , classes = get_classes ()): \"\"\"draw the bboxes in the original image \"\"\" num_classes = len ( classes ) image_h , image_w , channel = image . shape hsv_tuples = [( 1.0 * x / num_classes , 1. , 1. ) for x in range ( num_classes )] colors = list ( map ( lambda x : colorsys . hsv_to_rgb ( * x ), hsv_tuples )) colors = list ( map ( lambda x : ( int ( x [ 0 ] * 255 ), int ( x [ 1 ] * 255 ), int ( x [ 2 ] * 255 )), colors )) fontScale = 0.5 bbox_thick = int ( 0.6 * ( image_h + image_w ) / 600 ) for i , bbox in enumerate ( bboxes ): coor = np . array ( bbox [: 4 ], dtype = np . int32 ) if gt_classes_index == None : class_index = int ( bbox [ 5 ]) score = bbox [ 4 ] else : class_index = gt_classes_index [ i ] score = 1 bbox_color = colors [ class_index ] c1 , c2 = ( coor [ 0 ], coor [ 1 ]), ( coor [ 2 ], coor [ 3 ]) cv2 . rectangle ( image , c1 , c2 , bbox_color , bbox_thick ) classes_name = classes [ class_index ] bbox_mess = ' %s : %.2f ' % ( classes_name , score ) t_size = cv2 . getTextSize ( bbox_mess , 0 , fontScale , thickness = bbox_thick // 2 )[ 0 ] cv2 . rectangle ( image , c1 , ( c1 [ 0 ] + t_size [ 0 ], c1 [ 1 ] - t_size [ 1 ] - 3 ), bbox_color , - 1 ) cv2 . putText ( image , bbox_mess , ( c1 [ 0 ], c1 [ 1 ] - 2 ), cv2 . FONT_HERSHEY_SIMPLEX , fontScale , ( 0 , 0 , 0 ), bbox_thick // 2 , lineType = cv2 . LINE_AA ) print ( \" {} is in the picture with confidence: {:.4f} , bbox: {} \" . format ( classes_name , score , coor )) # cv2.imwrite(\"demo.jpg\", image) return image def decode ( outputs , score_threshold , origin_shape , input_size = 512 ): def _distance2bbox ( points , distance ): x1 = points [ ... , 0 ] - distance [ ... , 0 ] y1 = points [ ... , 1 ] - distance [ ... , 1 ] x2 = points [ ... , 0 ] + distance [ ... , 2 ] y2 = points [ ... , 1 ] + distance [ ... , 3 ] return np . stack ([ x1 , y1 , x2 , y2 ], - 1 ) def _scores ( cls , ce ): cls = 1 / ( 1 + np . exp ( - cls )) ce = 1 / ( 1 + np . exp ( - ce )) return np . sqrt ( ce * cls ) def _bbox ( bbox , stride , origin_shape , input_size ): h , w = bbox . shape [ 1 : 3 ] yv , xv = np . meshgrid ( np . arange ( h ), np . arange ( w )) xy = ( np . stack (( yv , xv ), 2 ) + 0.5 ) * stride bbox = _distance2bbox ( xy , bbox ) # opencv read, shape[1] is w, shape[0] is h scale_w = origin_shape [ 1 ] / input_size scale_h = origin_shape [ 0 ] / input_size scale = max ( origin_shape [ 0 ], origin_shape [ 1 ]) / input_size # origin img is pad resized #bbox = bbox * scale # origin img is resized bbox = bbox * [ scale_w , scale_h , scale_w , scale_h ] return bbox bboxes = list () strides = [ 8 , 16 , 32 , 64 , 128 ] for i in range ( len ( strides )): cls = outputs [ i ] . buffer bbox = outputs [ i + 5 ] . buffer ce = outputs [ i + 10 ] . buffer scores = _scores ( cls , ce ) classes = np . argmax ( scores , axis =- 1 ) classes = np . reshape ( classes , [ - 1 , 1 ]) max_score = np . max ( scores , axis =- 1 ) max_score = np . reshape ( max_score , [ - 1 , 1 ]) bbox = _bbox ( bbox , strides [ i ], origin_shape , input_size ) bbox = np . reshape ( bbox , [ - 1 , 4 ]) pred_bbox = np . concatenate ([ bbox , max_score , classes ], axis = 1 ) index = pred_bbox [ ... , 4 ] > score_threshold pred_bbox = pred_bbox [ index ] bboxes . append ( pred_bbox ) return np . concatenate ( bboxes ) def nms ( bboxes , iou_threshold , sigma = 0.3 , method = 'nms' ): def bboxes_iou ( boxes1 , boxes2 ): boxes1 = np . array ( boxes1 ) boxes2 = np . array ( boxes2 ) boxes1_area = ( boxes1 [ ... , 2 ] - boxes1 [ ... , 0 ]) * \\ ( boxes1 [ ... , 3 ] - boxes1 [ ... , 1 ]) boxes2_area = ( boxes2 [ ... , 2 ] - boxes2 [ ... , 0 ]) * \\ ( boxes2 [ ... , 3 ] - boxes2 [ ... , 1 ]) left_up = np . maximum ( boxes1 [ ... , : 2 ], boxes2 [ ... , : 2 ]) right_down = np . minimum ( boxes1 [ ... , 2 :], boxes2 [ ... , 2 :]) inter_section = np . maximum ( right_down - left_up , 0.0 ) inter_area = inter_section [ ... , 0 ] * inter_section [ ... , 1 ] union_area = boxes1_area + boxes2_area - inter_area ious = np . maximum ( 1.0 * inter_area / union_area , np . finfo ( np . float32 ) . eps ) return ious classes_in_img = list ( set ( bboxes [:, 5 ])) best_bboxes = [] for cls in classes_in_img : cls_mask = ( bboxes [:, 5 ] == cls ) cls_bboxes = bboxes [ cls_mask ] while len ( cls_bboxes ) > 0 : max_ind = np . argmax ( cls_bboxes [:, 4 ]) best_bbox = cls_bboxes [ max_ind ] best_bboxes . append ( best_bbox ) cls_bboxes = np . concatenate ( [ cls_bboxes [: max_ind ], cls_bboxes [ max_ind + 1 :]]) iou = bboxes_iou ( best_bbox [ np . newaxis , : 4 ], cls_bboxes [:, : 4 ]) weight = np . ones (( len ( iou ),), dtype = np . float32 ) assert method in [ 'nms' , 'soft-nms' ] if method == 'nms' : iou_mask = iou > iou_threshold weight [ iou_mask ] = 0.0 if method == 'soft-nms' : weight = np . exp ( - ( 1.0 * iou ** 2 / sigma )) cls_bboxes [:, 4 ] = cls_bboxes [:, 4 ] * weight score_mask = cls_bboxes [:, 4 ] > 0. cls_bboxes = cls_bboxes [ score_mask ] return best_bboxes def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) if __name__ == '__main__' : models = dnn . load ( '../models/fcos_512x512_nv12.bin' ) # 打印输入 tensor 的属性 print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) # 打印输出 tensor 的属性 print ( len ( models [ 0 ] . outputs )) for output in models [ 0 ] . outputs : print_properties ( output . properties ) # 获取 Camera 句柄 cam = srcampy . Camera () # 打开 f37 摄像头，并且把输出突出缩小成算法模型的输入尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) # 打开 F37, 初始化视频 pipeline 0 ，设置帧率30fps，缩放图像为 512 x 512 cam . open_cam ( 0 , 1 , 30 , w , h ) # Get HDMI display object disp = srcampy . Display () # For the meaning of parameters, please refer to the relevant documents of HDMI display disp . display ( 0 , 1920 , 1080 ) input_shape = ( h , w ) while True : # 从相机获取分辨率为 512x512 的nv12格式的图像数据， 参数 2 代表从硬件模块IPU中获取 img = cam . get_img ( 2 , 512 , 512 ) # 把图像数据转成 numpy 数据类型 img = np . frombuffer ( img , dtype = np . uint8 ) # 模型推理 outputs = models [ 0 ] . forward ( img ) # 对算法结果进行过滤，去掉执行度低的检测框，计算检测框的交并比去除冗余框，把检测框的坐标还原到原图位置上 prediction_bbox = postprocess ( outputs , input_shape , origin_img_shape = ( 1080 , 1920 )) # 从新获取一张图像，大小缩放成与显示器的分辨率一样的 1920 x 1080, 并且转换成 bgr格式，方便进行绘图操作 origin_image = cam . get_img ( 2 , 1920 , 1080 ) origin_nv12 = np . frombuffer ( origin_image , dtype = np . uint8 ) . reshape ( 1620 , 1920 ) origin_bgr = cv2 . cvtColor ( origin_nv12 , cv2 . COLOR_YUV420SP2BGR ) # 把算法运行后得到的物体检测框绘制到图像上 box_bgr = draw_bboxs ( origin_bgr , prediction_bbox ) # X3 的HDMI输出模块的输入图像格式需要是NV12的，所以需要先把bgr格式转成NV12 box_nv12 = bgr2nv12_opencv ( box_bgr ) # 把 NV12 格式的图像输出给显示器 disp . set_img ( box_nv12 . tobytes ()) cam . close_cam () USB相机目标检测 如果大家手上没有MIPI接口的相机，使用USB相机也可以实现同样的功能。 运行例程 $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 动态目标检测 大家如果没有HDMI显示器的话，也没有问题，刚才的例程，也可以这样来运行，我们通过统一网络环境中的浏览器就可以动态看到结果啦。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/fcosworkconfig.json image_width: = 480 image_height: = 272","text_tokens":["train","02","缩小","yuv420sp2bgr","这套","transpose","i","load","低","color","linetype","内","rectangle","import","scores","left","动态","小成","概率","代码","新","teddy","、","实时","率","代表","以及","runtime","relevant","不仅","广泛","lambda","inputs","起来","种","font","usr","一样","去掉","in","api","输出","预测","sports","去除","边界","过滤","score","也","close","microwave","stop","最高","c2","f37","价值","height","同样","对","缩放","手上","打印输出","通过","接下来","usb","狗","看到","监测","mipi","跟踪","forward","获取","x3","tie","axis","fcos","还要","只有","the","pipeline","dog","时","bear","左下角","/","phone","03","行驶","先","file","__","比较","类","pro","cp","gettextsize","'","运用","属性","maximum","handbag","[","7x7","信息","bird","根据","sample","true","meaning","255","神经","img","range","iou","句柄","所以","parameters","camera","某一","四个","5","c1","len","32","尺寸",".","bed","冗余","64","book","开发","racket","tros","之前","有","0.5","度","cls","#","area","一种","0","并且","table","original","mouse","哪个","各样","false","cd","mess","ai","把","网格","scissors","个","opencv","卷积","index","documents","8","=","显示","websocket","cnn","可以","旭日","以","libs","原理","bgr2nv12","比如","fontscale","重叠","shape","宽度","aa","..","中将","$","threshold","0.6","接口","size","相机","else","负责","常用","car","绘图","apple","位置","int32","argmax","}","input","sqrt","因此","pred","的话","连续","输入","assert","and","落","parking","场景","simplex","1080","nv12","转成","有着","所在","之后","skis","缩小成","object","baseball","：","argpartition","0.0","就是","vase","dump","30fps","统一","处理","libsrcampy","浏览器","，","names","pizza","boxes1","truck","什么","laptop","各种各样","as","cow","执行","是","traffic","功能","open","oven","控制","colorsys","from","帧","接下","便于","最为","参数","minimum",",","nchw","快速","ball","broccoli","3","x","272","换成","环境","image","硬件","rgb2yuv","训练","服务","main","fcosworkconfig","weight","来","cat","thick","包围","yuv420p","detection","1620","bboxes","knife","网络","puttext","y1","properties","对象","zeros","神经网","if","开发板","classes","while","该","视频","numpy","模型","buffer","自然","glass","meter","with","后续","banana","output","下来","origin","描述符","大小","问题","如何","hobot","display","launch","min","机器","sign","结合","giraffe","demo","resized","+","clock","draw","和","picture","车辆","摄像头","node","r","boat","它会","distance","系统","example","分析","就","使用","rgb","finfo","distance2bbox",">","hydrant","t","知道","高","concatenate","box","600","dining","2","只","format","bash","bin","zebra","ious","return","bboxs","完成","要","单个","_","bat","spoon","比","width","...","inter","后","过程","append","py","分割","scale","boxes2","confidence","这个","hot","说明","sheep","lib","类型","int","1000","像头","基于","初始","2f","类别","包","cv2","10","y2","skateboard","x1","backpack","json","cvtcolor","打印","进行","soft","4","这","toaster","ipu","sandwich","bench","snowboard","去","orange","&&","yolo",")","标注","env","pyeasy","打开","share","推理","tv","应用","需要","格子","union","模块","转","ros2","大家","分成","section","设置","frisbee","gt","light","1","nms","wine","解析","inference","%","bowl","of","从","要求","中心","一个","tennis","like","best","运动","coco","高度","分辨","利用","newaxis","print","horse","重在","各种","source","cup","fork","umbrella","cake","hsv","toothbrush","所属","假设","def","软硬","uv","refrigerator","xy","tuples","arange","512x512","exp","效率","reshape","-","算法","read","转换成","0.3","postprocess","摄像","bottle","识别","ones","frombuffer","meshgrid","imwrite","视频流","sink","hdmi","每个","集","get","colors","plant","30","opt","couch","dnn","这样","例程","当","图像","airplane","fire","y","512","多个","refer","right","坐标","max","h","神经网络","浏览","图片","model","自然环境","kite","set","jpg","thickness","donut","type","num","4f","方便","disp","中",":","那该","chair","data","软硬件","存在","数据类型","name","nginx"," ","tobytes","outputs","please","line","s","bus","数据","一张","希望","for","更要","up","chmod","enumerate","x2","。","setup","benchmark","suitcase","检测","i420","如果","我们","method","目标","w","points","成","分辨率","结果","的","carrot","uint8","启动","*","dtype","128","初始化","最终","pad","sigma","行为","对于","实现","webservice","keyboard","1920","is","中心点","down","float32","一般","strides","操作","yv","packed","然后","sbin","来看","都","glove","potted","toilet","stack","物体","cell","绘制","计算","remote","\\","16","tensor","得到","ce","planar","bbox","480","surfboard","ind","coor","辨率","理解","他们","没有","左下","models","idx","!","array","bgr","(","hershey","]","上","并","拿到","交","转换","实时处理","class","drier","给","p","运行","python3","非常","回到","hw","显示器","分类","elephant","srcampy","为","刚才","到","那些","map","not","vio","cam","%.","person","下","none","在","了","原图","xv","{","还原","hair","layout","小狗","框","派","机器人","decode","channel","app","与","描述","啦","webserver","图像格式","为例","motorcycle","topk","将","下角","\"","80","mask","另外","格式","输出模块","1.0","to","突出","bicycle","速度","config","prediction","np","eps","stride","togetherros","list"],"title":"动态目标检测","title_tokens":["动态","目标","检测"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_1","text":"图像物体分类重在分析图像中存在的物体是什么，便于机器理解看到的环境信息，另外一种场景，机器不仅要识别某一物体，还要知道这个物体所在的位置，当物体在运动时，更要快速连续的跟踪，这就是目标检测，重在分析识别到物体在图像中的位置。","text_tokens":["检测","什么","一种","物体","是","这个","目标","位置","识别","分类","中","分析","的","便于","到","信息","连续","另外","快速","存在","看到","场景","知道","跟踪","环境","不仅","理解","运动","当","某一","还要","所在","这","在","时","图像","重在","要","机器","更要","就是","。","，"],"title":"动态目标检测","title_tokens":["动态","目标","检测"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_2","text":"假设我们要识别图像中这只狗的位置，以最为常用的YOLO算法为例，它会运用单个卷积神经网络(CNN) ，将图像分成网格，并预测每个网格的对象概率和边界框。 比如，对于这个图像，Yolo的CNN网络将输入的图片分割成7x7的网格，然后每个网格负责去检测那些中心点落在该格子内的目标，比如，小狗这个目标的中心点在左下角的网格中，那该网格就负责预测狗这个对象。 每个网格中将有多个边界框，在训练时，我们希望每个对象只有一个边界框，比如最终只有一个边界框把这只狗包起来。因此，我们根据哪个边界框与之前标注的重叠度最高，预测对象的位置和概率。 最终包围对象的边界框，就是识别的结果，使用四个描述符进行说明： 边界框的中心位置 边界框的高度 边界框的宽度 识别到对象所属的类 这样就完成了对目标的实时检测，拿到目标的信息之后，就可以进行后续的机器人行为控制了。 我们对目标检测系统运行速度的要求一般都比较高，可以实时处理视频流，比如车辆行驶的动态监测、自然环境中的目标识别，有着非常广泛的应用价值。 回到TogetherROS和旭日X3派的开发板，我们来看下这套软硬件结合的目标检测系统，效率如何。","text_tokens":["重叠","检测","宽度","分割","中将","这套","我们","这个","负责","目标","常用","成","说明","位置","内","结果","动态","概率","因此","的","输入","包","落","、","最终","实时","行为","对于","进行","广泛","起来","有着","之后","这","：","中心点","就是","预测","去","yolo","一般",")","标注","，","处理","边界","然后","应用","来看","都","格子","最高","分成","价值","控制","对","最为","狗","监测","环境","要求","中心","硬件","一个","x3","训练","高度","只有","左下","时","包围","左下角","所属","假设","行驶","软硬","(","网络","比较","类","对象","效率","并","拿到","神经网","实时处理","开发板","算法","运行","非常","运用","回到","该","识别","视频","7x7","那些","到","信息","自然","后续","视频流","根据","每个","神经","描述符","这样","下","如何","在","了","四个","图像","机器","多个","结合","开发","之前","神经网络","框","图片","小狗","有","机器人","自然环境","派","度","和","与","描述","车辆","它会","为例","哪个","系统","将","中","下角","就","使用","那该","网格","把","卷积","软硬件"," ","高","速度","只","cnn","希望","可以","旭日","完成","要","单个","以","。","togetherros","比如"],"title":"目标检测原理","title_tokens":["原理","检测","目标"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#mipi","text":"接下来，我们要利用MIPI相机，动态识别图像中各种各样的物体以及他们所在的位置，推理过程使用的是基于COCO数据集训练的80个类别，也就是可以识别80种常用的物体位置。","text_tokens":["推理","过程","各种各样","也","我们","物体","相机","是","常用","位置","识别","各样","动态","中","基于","接下","的","使用","个","80","接下来","类别","mipi","集","以及","下来","coco","训练","数据","所在","他们","利用","可以","种","图像","要","就是","各种","。","，"],"title":"MIPI相机目标检测","title_tokens":["检测","相机","mipi","目标"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_3","text":"$ cd /app/ai_inference/03_mipi_camera_sample/ $ python3 ./mipi_camera.py","text_tokens":["python3","sample","inference","py"," ","_","mipi","$","app","cd",".","ai","/","03","camera"],"title":"运行例程","title_tokens":["例程","运行"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_4","text":"mipi_camera.py： #!/usr/bin/env python3 import numpy as np import cv2 import colorsys # Camera API libs from hobot_vio import libsrcampy as srcampy from hobot_dnn import pyeasy_dnn as dnn # detection model class names def get_classes (): return np . array ([ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" , \"bus\" , \"train\" , \"truck\" , \"boat\" , \"traffic light\" , \"fire hydrant\" , \"stop sign\" , \"parking meter\" , \"bench\" , \"bird\" , \"cat\" , \"dog\" , \"horse\" , \"sheep\" , \"cow\" , \"elephant\" , \"bear\" , \"zebra\" , \"giraffe\" , \"backpack\" , \"umbrella\" , \"handbag\" , \"tie\" , \"suitcase\" , \"frisbee\" , \"skis\" , \"snowboard\" , \"sports ball\" , \"kite\" , \"baseball bat\" , \"baseball glove\" , \"skateboard\" , \"surfboard\" , \"tennis racket\" , \"bottle\" , \"wine glass\" , \"cup\" , \"fork\" , \"knife\" , \"spoon\" , \"bowl\" , \"banana\" , \"apple\" , \"sandwich\" , \"orange\" , \"broccoli\" , \"carrot\" , \"hot dog\" , \"pizza\" , \"donut\" , \"cake\" , \"chair\" , \"couch\" , \"potted plant\" , \"bed\" , \"dining table\" , \"toilet\" , \"tv\" , \"laptop\" , \"mouse\" , \"remote\" , \"keyboard\" , \"cell phone\" , \"microwave\" , \"oven\" , \"toaster\" , \"sink\" , \"refrigerator\" , \"book\" , \"clock\" , \"vase\" , \"scissors\" , \"teddy bear\" , \"hair drier\" , \"toothbrush\" ]) def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_RGB2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] def postprocess ( model_output , model_hw_shape , origin_image = None , origin_img_shape = None , score_threshold = 0.5 , nms_threshold = 0.6 , dump_image = False ): input_height = model_hw_shape [ 0 ] input_width = model_hw_shape [ 1 ] if origin_image is not None : origin_image_shape = origin_image . shape [ 0 : 2 ] else : origin_image_shape = origin_img_shape prediction_bbox = decode ( outputs = model_output , score_threshold = score_threshold , origin_shape = origin_image_shape , input_size = 512 ) prediction_bbox = nms ( prediction_bbox , iou_threshold = nms_threshold ) prediction_bbox = np . array ( prediction_bbox ) topk = min ( prediction_bbox . shape [ 0 ], 1000 ) if topk != 0 : idx = np . argpartition ( prediction_bbox [ ... , 4 ], - topk )[ - topk :] prediction_bbox = prediction_bbox [ idx ] if dump_image and origin_image is not None : draw_bboxs ( origin_image , prediction_bbox ) return prediction_bbox def draw_bboxs ( image , bboxes , gt_classes_index = None , classes = get_classes ()): \"\"\"draw the bboxes in the original image \"\"\" num_classes = len ( classes ) image_h , image_w , channel = image . shape hsv_tuples = [( 1.0 * x / num_classes , 1. , 1. ) for x in range ( num_classes )] colors = list ( map ( lambda x : colorsys . hsv_to_rgb ( * x ), hsv_tuples )) colors = list ( map ( lambda x : ( int ( x [ 0 ] * 255 ), int ( x [ 1 ] * 255 ), int ( x [ 2 ] * 255 )), colors )) fontScale = 0.5 bbox_thick = int ( 0.6 * ( image_h + image_w ) / 600 ) for i , bbox in enumerate ( bboxes ): coor = np . array ( bbox [: 4 ], dtype = np . int32 ) if gt_classes_index == None : class_index = int ( bbox [ 5 ]) score = bbox [ 4 ] else : class_index = gt_classes_index [ i ] score = 1 bbox_color = colors [ class_index ] c1 , c2 = ( coor [ 0 ], coor [ 1 ]), ( coor [ 2 ], coor [ 3 ]) cv2 . rectangle ( image , c1 , c2 , bbox_color , bbox_thick ) classes_name = classes [ class_index ] bbox_mess = ' %s : %.2f ' % ( classes_name , score ) t_size = cv2 . getTextSize ( bbox_mess , 0 , fontScale , thickness = bbox_thick // 2 )[ 0 ] cv2 . rectangle ( image , c1 , ( c1 [ 0 ] + t_size [ 0 ], c1 [ 1 ] - t_size [ 1 ] - 3 ), bbox_color , - 1 ) cv2 . putText ( image , bbox_mess , ( c1 [ 0 ], c1 [ 1 ] - 2 ), cv2 . FONT_HERSHEY_SIMPLEX , fontScale , ( 0 , 0 , 0 ), bbox_thick // 2 , lineType = cv2 . LINE_AA ) print ( \" {} is in the picture with confidence: {:.4f} , bbox: {} \" . format ( classes_name , score , coor )) # cv2.imwrite(\"demo.jpg\", image) return image def decode ( outputs , score_threshold , origin_shape , input_size = 512 ): def _distance2bbox ( points , distance ): x1 = points [ ... , 0 ] - distance [ ... , 0 ] y1 = points [ ... , 1 ] - distance [ ... , 1 ] x2 = points [ ... , 0 ] + distance [ ... , 2 ] y2 = points [ ... , 1 ] + distance [ ... , 3 ] return np . stack ([ x1 , y1 , x2 , y2 ], - 1 ) def _scores ( cls , ce ): cls = 1 / ( 1 + np . exp ( - cls )) ce = 1 / ( 1 + np . exp ( - ce )) return np . sqrt ( ce * cls ) def _bbox ( bbox , stride , origin_shape , input_size ): h , w = bbox . shape [ 1 : 3 ] yv , xv = np . meshgrid ( np . arange ( h ), np . arange ( w )) xy = ( np . stack (( yv , xv ), 2 ) + 0.5 ) * stride bbox = _distance2bbox ( xy , bbox ) # opencv read, shape[1] is w, shape[0] is h scale_w = origin_shape [ 1 ] / input_size scale_h = origin_shape [ 0 ] / input_size scale = max ( origin_shape [ 0 ], origin_shape [ 1 ]) / input_size # origin img is pad resized #bbox = bbox * scale # origin img is resized bbox = bbox * [ scale_w , scale_h , scale_w , scale_h ] return bbox bboxes = list () strides = [ 8 , 16 , 32 , 64 , 128 ] for i in range ( len ( strides )): cls = outputs [ i ] . buffer bbox = outputs [ i + 5 ] . buffer ce = outputs [ i + 10 ] . buffer scores = _scores ( cls , ce ) classes = np . argmax ( scores , axis =- 1 ) classes = np . reshape ( classes , [ - 1 , 1 ]) max_score = np . max ( scores , axis =- 1 ) max_score = np . reshape ( max_score , [ - 1 , 1 ]) bbox = _bbox ( bbox , strides [ i ], origin_shape , input_size ) bbox = np . reshape ( bbox , [ - 1 , 4 ]) pred_bbox = np . concatenate ([ bbox , max_score , classes ], axis = 1 ) index = pred_bbox [ ... , 4 ] > score_threshold pred_bbox = pred_bbox [ index ] bboxes . append ( pred_bbox ) return np . concatenate ( bboxes ) def nms ( bboxes , iou_threshold , sigma = 0.3 , method = 'nms' ): def bboxes_iou ( boxes1 , boxes2 ): boxes1 = np . array ( boxes1 ) boxes2 = np . array ( boxes2 ) boxes1_area = ( boxes1 [ ... , 2 ] - boxes1 [ ... , 0 ]) * \\ ( boxes1 [ ... , 3 ] - boxes1 [ ... , 1 ]) boxes2_area = ( boxes2 [ ... , 2 ] - boxes2 [ ... , 0 ]) * \\ ( boxes2 [ ... , 3 ] - boxes2 [ ... , 1 ]) left_up = np . maximum ( boxes1 [ ... , : 2 ], boxes2 [ ... , : 2 ]) right_down = np . minimum ( boxes1 [ ... , 2 :], boxes2 [ ... , 2 :]) inter_section = np . maximum ( right_down - left_up , 0.0 ) inter_area = inter_section [ ... , 0 ] * inter_section [ ... , 1 ] union_area = boxes1_area + boxes2_area - inter_area ious = np . maximum ( 1.0 * inter_area / union_area , np . finfo ( np . float32 ) . eps ) return ious classes_in_img = list ( set ( bboxes [:, 5 ])) best_bboxes = [] for cls in classes_in_img : cls_mask = ( bboxes [:, 5 ] == cls ) cls_bboxes = bboxes [ cls_mask ] while len ( cls_bboxes ) > 0 : max_ind = np . argmax ( cls_bboxes [:, 4 ]) best_bbox = cls_bboxes [ max_ind ] best_bboxes . append ( best_bbox ) cls_bboxes = np . concatenate ( [ cls_bboxes [: max_ind ], cls_bboxes [ max_ind + 1 :]]) iou = bboxes_iou ( best_bbox [ np . newaxis , : 4 ], cls_bboxes [:, : 4 ]) weight = np . ones (( len ( iou ),), dtype = np . float32 ) assert method in [ 'nms' , 'soft-nms' ] if method == 'nms' : iou_mask = iou > iou_threshold weight [ iou_mask ] = 0.0 if method == 'soft-nms' : weight = np . exp ( - ( 1.0 * iou ** 2 / sigma )) cls_bboxes [:, 4 ] = cls_bboxes [:, 4 ] * weight score_mask = cls_bboxes [:, 4 ] > 0. cls_bboxes = cls_bboxes [ score_mask ] return best_bboxes def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) if __name__ == '__main__' : models = dnn . load ( '../models/fcos_512x512_nv12.bin' ) # 打印输入 tensor 的属性 print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) # 打印输出 tensor 的属性 print ( len ( models [ 0 ] . outputs )) for output in models [ 0 ] . outputs : print_properties ( output . properties ) # 获取 Camera 句柄 cam = srcampy . Camera () # 打开 f37 摄像头，并且把输出突出缩小成算法模型的输入尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) # 打开 F37, 初始化视频 pipeline 0 ，设置帧率30fps，缩放图像为 512 x 512 cam . open_cam ( 0 , 1 , 30 , w , h ) # Get HDMI display object disp = srcampy . Display () # For the meaning of parameters, please refer to the relevant documents of HDMI display disp . display ( 0 , 1920 , 1080 ) input_shape = ( h , w ) while True : # 从相机获取分辨率为 512x512 的nv12格式的图像数据， 参数 2 代表从硬件模块IPU中获取 img = cam . get_img ( 2 , 512 , 512 ) # 把图像数据转成 numpy 数据类型 img = np . frombuffer ( img , dtype = np . uint8 ) # 模型推理 outputs = models [ 0 ] . forward ( img ) # 对算法结果进行过滤，去掉执行度低的检测框，计算检测框的交并比去除冗余框，把检测框的坐标还原到原图位置上 prediction_bbox = postprocess ( outputs , input_shape , origin_img_shape = ( 1080 , 1920 )) # 从新获取一张图像，大小缩放成与显示器的分辨率一样的 1920 x 1080, 并且转换成 bgr格式，方便进行绘图操作 origin_image = cam . get_img ( 2 , 1920 , 1080 ) origin_nv12 = np . frombuffer ( origin_image , dtype = np . uint8 ) . reshape ( 1620 , 1920 ) origin_bgr = cv2 . cvtColor ( origin_nv12 , cv2 . COLOR_YUV420SP2BGR ) # 把算法运行后得到的物体检测框绘制到图像上 box_bgr = draw_bboxs ( origin_bgr , prediction_bbox ) # X3 的HDMI输出模块的输入图像格式需要是NV12的，所以需要先把bgr格式转成NV12 box_nv12 = bgr2nv12_opencv ( box_bgr ) # 把 NV12 格式的图像输出给显示器 disp . set_img ( box_nv12 . tobytes ()) cam . close_cam ()","text_tokens":["train","缩小","yuv420sp2bgr","i","transpose","load","低","color","linetype","rectangle","scores","import","left","小成","新","teddy","率","代表","relevant","inputs","lambda","font","usr","一样","去掉","in","api","输出","sports","去除","过滤","score","close","microwave","stop","c2","f37","height","对","缩放","打印输出","mipi","forward","获取","x3","tie","axis","fcos","the","pipeline","dog","bear","/","phone","先","__","pro","gettextsize","'","属性","maximum","handbag","[","bird","true","meaning","255","img","range","iou","句柄","所以","parameters","camera","5","c1","len","32","尺寸",".","bed","冗余","64","book","racket","0.5","度","cls","#","area","0","并且","table","original","mouse","false","mess","scissors","把","opencv","index","documents","8","=","显示","libs","bgr2nv12","fontscale","shape","aa","..","threshold","0.6","size","相机","else","car","绘图","apple","int32","argmax","位置","}","input","sqrt","pred","输入","assert","and","parking","simplex","1080","nv12","转成","缩小成","skis","object","baseball","：","argpartition","0.0","vase","dump","30fps","libsrcampy","，","names","pizza","boxes1","truck","laptop","as","cow","执行","是","traffic","open","oven","colorsys","from","帧","参数","minimum",",","nchw","ball","broccoli","3","x","换成","image","硬件","rgb2yuv","main","weight","cat","thick","yuv420p","detection","1620","bboxes","knife","puttext","y1","properties","zeros","if","classes","while","视频","numpy","模型","buffer","glass","meter","with","banana","output","origin","大小","display","hobot","min","sign","giraffe","demo","resized","+","clock","draw","picture","摄像头","boat","distance","finfo","rgb","distance2bbox",">","hydrant","t","concatenate","box","600","dining","2","format","bin","zebra","ious","return","bboxs","_","bat","spoon","比","width","...","inter","后","append","py","scale","boxes2","confidence","hot","sheep","类型","int","1000","像头","初始","2f","10","cv2","y2","skateboard","x1","backpack","cvtcolor","打印","soft","进行","4","toaster","ipu","sandwich","bench","snowboard","orange",")","env","pyeasy","打开","推理","tv","需要","union","模块","转","section","设置","frisbee","gt","light","1","nms","wine","%","bowl","of","从","tennis","like","best","分辨","newaxis","print","horse","cup","fork","umbrella","cake","hsv","toothbrush","def","uv","refrigerator","xy","tuples","arange","512x512","exp","reshape","-","算法","read","转换成","0.3","postprocess","摄像","bottle","ones","frombuffer","meshgrid","imwrite","hdmi","sink","get","colors","plant","30","couch","dnn","图像","airplane","fire","y","512","refer","right","坐标","max","h","model","kite","set","jpg","thickness","donut","type","num","4f","方便","disp","中",":","chair","data","数据类型","name"," ","tobytes","outputs","please","line","s","bus","数据","一张","for","up","enumerate","x2","suitcase","检测","i420","method","w","points","成","分辨率","结果","carrot","的","uint8","*","dtype","128","初始化","pad","sigma","keyboard","1920","is","down","float32","操作","strides","yv","packed","glove","potted","toilet","stack","物体","cell","绘制","计算","remote","\\","16","tensor","得到","ce","planar","bbox","surfboard","ind","coor","辨率","models","idx","!","array","bgr","(","hershey","]","上","并","交","转换","class","drier","给","运行","python3","hw","显示器","elephant","srcampy","为","到","map","not","vio","cam","%.","person","none","原图","xv","{","还原","hair","layout","框","decode","channel","与","图像格式","motorcycle","topk","\"","mask","输出模块","格式","1.0","to","突出","bicycle","prediction","np","eps","stride","list"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#usb","text":"如果大家手上没有MIPI接口的相机，使用USB相机也可以实现同样的功能。","text_tokens":["没有","usb","，","可以","同样","功能","。","mipi","手上","如果","也","接口","使用","的","相机","实现","大家"],"title":"USB相机目标检测","title_tokens":["检测","相机","usb","目标"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_5","text":"$ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py","text_tokens":["fcos","usb","python3","sample","02","inference","py"," ","_","$","app","cd",".","ai","/","camera"],"title":"运行例程","title_tokens":["例程","运行"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_6","text":"大家如果没有HDMI显示器的话，也没有问题，刚才的例程，也可以这样来运行，我们通过统一网络环境中的浏览器就可以动态看到结果啦。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/fcosworkconfig.json image_width: = 480 image_height: = 272","text_tokens":["py","$","如果","我们","lib","动态","结果","的","的话","启动","json","runtime","webservice","&&","统一","浏览器","，","share","sbin","也","ros2","大家","height","480","通过","。","看到","x","272","环境","image","服务","fcosworkconfig","没有","来","source","/","file","网络","cp","-","p","运行","显示器","刚才","hdmi","opt","dnn","例程","这样","问题","hobot","launch",".","tros","浏览","+","#","啦","node","r","webserver","example","cd","中","就",":","nginx"," ","=","显示","websocket","bash","config","可以","_","chmod","setup","benchmark","width"],"title":"动态目标检测","title_tokens":["动态","目标","检测"]},{"location":"hhp/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/","text":"人体检测与跟踪 不知道大家有没有玩过类似XBOX的体感游戏机，上边会有一个相机，动态识别我们的动作，比如跳舞、打球，是不是还挺神奇的，这就是人体检测与跟踪的应用。 TogetherROS中也集成了一套类似的算法，可以识别人体、人头、人脸、人手等一系列关键点，我们来体验一下。 编程开发方法 先来看一个人体识别的基础应用，我们驱动相机后，实时采样视觉信息，然后再通过检测算法，识别每一幅图片中人体位置，并把识别的结果保存成一张图片，便于我们查看。 运行例程 # 下载例程代码（与之前课程下载的代码一致） $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build # 终端1，运行相机 $ source /opt/tros/setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p out_format: = nv12 -p image_width: = 960 -p image_height: = 544 -p video_device: = F37 # 终端2，运行例程 $ source /opt/tros/setup.bash $ source ./install/local_setup.bash $ mkdir -p config && cp -r /opt/tros/lib/dnn_node_example/config/multitask_body_kps_960x544.hbm config/ $ ros2 run cpp_dnn_demo cpp_dnn_demo --ros-args -p image: = config/test.jpg 代码解析 #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" #include \"dnn_node/dnn_node.h\" #include \"dnn_node/util/image_proc.h\" #include \"sensor_msgs/msg/image.hpp\" using namespace hobot :: dnn_node ; class BodyDetNode : public DnnNode { public : BodyDetNode ( const std :: string & node_name = \"body_det\" , const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : DnnNode ( node_name , options ) { // 获取模型输入图片的尺寸，包括图片的宽model_input_width_和高model_input_height ，用于模型前处理 if ( Init () != 0 || GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ) < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Node init fail!\" ); } //创建图片消息的subscriber，订阅的topic为”/image_raw”，消息类型为sensor_msgs::msg::Image。订阅到的图片用于算法模型推理 ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( \"/image_raw\" , 10 , std :: bind ( & BodyDetNode :: FeedImg , this , std :: placeholders :: _1 )); } ~ BodyDetNode () override {} void FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr msg ); protected : int SetNodePara () override { if ( ! dnn_node_para_ptr_ ) return -1 ; //指定模型推理使用的模型文件名和模型名 dnn_node_para_ptr_ -> model_file = \"config/multitask_body_kps_960x544.hbm\" ; dnn_node_para_ptr_ -> model_name = \"multitask_body_kps_960x544\" ; //指定模型输出的人体框的解析方法，其中人体框输出索引为box_output_index_ //使用的解析方法为hobot_dnn预定义的检测框解析方法FaceHandDetectionOutputParser。 std :: shared_ptr < OutputParser > box_out_parser = std :: make_shared < FaceHandDetectionOutputParser > (); dnn_node_para_ptr_ -> output_parsers_ . emplace_back ( std :: make_pair ( box_output_index_ , box_out_parser ) ); return 0 ; } int PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) override ; private : int model_input_width_ = -1 ; int model_input_height_ = -1 ; const int32_t box_output_index_ = 1 ; sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg_ ; rclcpp :: Subscription < sensor_msgs :: msg :: Image >:: ConstSharedPtr ros_img_subscription_ = nullptr ; }; //输出模型结果，并将结果渲染到图片后保存在本地 int BodyDetNode::PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( node_output -> outputs . empty () || static_cast < int32_t > ( node_output -> outputs . size ()) < box_output_index_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid outputs\" ); return -1 ; } auto * filter2d_result = dynamic_cast < Filter2DResult *> ( node_output -> outputs [ box_output_index_ ]. get ()); if ( ! filter2d_result ) return -1 ; std :: stringstream ss ; ss << \"img encoding: \" << img_msg_ -> encoding << \", stamp: \" << img_msg_ -> header . stamp . sec << \",\" << img_msg_ -> header . stamp . nanosec << \" \\n out box size: \" << filter2d_result -> boxes . size () << \" \\n \" ; cv :: Mat nv12 ( img_msg_ -> height * 3 / 2 , img_msg_ -> width , CV_8UC1 , const_cast < char *> ( reinterpret_cast < const char *> ( img_msg_ -> data . data ()))); cv :: Mat bgr ; cv :: cvtColor ( nv12 , bgr , CV_YUV2BGR_NV12 ); for ( auto & rect : filter2d_result -> boxes ) { ss << \"rect: \" << rect . left << \" \" << rect . top << \" \" << rect . right << \" \" << rect . bottom << \" \\n \" ; // 图片渲染 cv :: rectangle ( bgr , cv :: Point ( rect . left , rect . top ), cv :: Point ( rect . right , rect . bottom ), cv :: Scalar ( 255 , 0 , 0 ), 3 ); } std :: string result_image = \"render_\" + std :: to_string ( img_msg_ -> header . stamp . sec ) + \".\" + std :: to_string ( img_msg_ -> header . stamp . nanosec ) + \".jpg\" ; ss << \"Render img to file: \" << result_image ; RCLCPP_INFO ( rclcpp :: get_logger ( \"example\" ), \"%s\" , ss . str (). c_str ()); cv :: imwrite ( result_image , bgr ); return 0 ; } //将nv12格式的图片转成模型输入的数据类型DNNInput后，输入给推理任务 void BodyDetNode::FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg ) return ; if ( \"nv12\" != img_msg -> encoding ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Only support nv12 img encoding!\" ); return ; } img_msg_ = img_msg ; // 创建模型输入数据 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { ImageProc :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ )}; // 运行推理，DnnNode基类中定义并实现的启动推理接口。 Run ( inputs ); } int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < BodyDetNode > ()); rclcpp :: shutdown (); return 0 ; } 人体检测与跟踪 结果保存成图片，虽然便于保留数据，但是不利于动态看到效果，我们不如再来实时动态效果显示。 在这个案例中，我们在之前人体识别的基础上，进一步实现了人体部位的识别和骨骼、眼神等关键点的识别，比如头、脸、身体、手掌、眼睛。 识别的结果同样是通过浏览器来进行查看。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . $ ros2 launch /opt/tros/share/mono2d_body_detection/launch/hobot_mono2d_body_detection.launch.py","text_tokens":["hpp","emplace","--","namespace","rectangle","facehanddetectionoutputparser","left","point","动态","logger","invalid","代码","reinterpret","、","实时","inputs","名","一下","public","部位","输出","imageproc","终端","opencv2","一系列","也","pair","开发方法","f37","编程","height","同样","544","通过","看到","mipi","跟踪","是不是","获取","动作","subscription","下载","/","先","file","义","脸","上边","一致","top","c","cp","override","采样","proc","placeholders","para","[","信息","本地","rect","255","img","mat","体验","spin","尺寸",".","raw","开发","mkdir","tros","之前","有","private","类似","#","0","人脸","手掌","视觉","cd","把","encoding","玩过","index","=","显示","websocket","msgs","可以","run","不利于","constsharedptr","比如","|","$","接口","size","相机","int32","位置","make","}","input","保存","输入","dynamic","集成","bind","眼神","nv12","kps","就是","处理","util","void","浏览器","，","包括","src","gitee","only","是","outputparser","便于","git",",","ptr","3","x","跳舞","image","创建","一幅","服务","main","来","error","detection","string","cv","if","查看","str","ws","效果","模型","options","bodydetnode","骨骼","游戏机","output","hobot","还","前","launch","demo","dev","+","一系","人手","和","node","r","fail","example","n","不如","video","使用","guyuehome",">","this","render","案例","t","知道","高","box","2","bash","format","return","_","文件名","（","width","hbm","有没有","后","py","这个","预定","header","lib","类型","int","boxes","不是","虽然","10","dnnnodeoutput","cvtcolor","support","进行","clone","parser","argc","imgproc","进一步","每","这","&&","”",")","share","推理","应用","dnnnode","~","转","ros2","大家","filter2d","bottom","parsers","1","subscriber","索引","解析","%","驱动","一个","back","msg","渲染","但是","source","960x544","local","nodeoptions","init","test","feedimg","8uc1","scalar","setnodepara","cpp","-","create","算法","com","install","postprocess","眼睛","识别","static","getnv12pyramidfromnv12img","不","imwrite","&","会","get","nanosec","opt","定义","dnn","例程","利于","stamp","一步","body","right","关键","h","info","浏览","图片","model","任务","jpg","体感","userdata","其中","sensor","中",":","shared","data","数据类型","nginx","name"," ","960","outputs","cast","det","再","s","数据","一张","sec","nullptr","shutdown","for","chmod","关键点","setup","。","指定","rclcpp","core","https","检测","挺","我们","身体","dnninput","成","结果","的","启动","*","std","打球","实现","课程","webservice","ss","include","头","empty","然后","sbin","等","来看","auto","人体","topic","保留","imgcodecs","\\","人头","一套","文件","用于","方法","xbox","args","游戏","没有",";","!","char","）","<","bgr","(","]","protected","上","订阅","并","const","给","class","p","yuv2bgr","系列","运行","argv","动态效果","using","ros","宽","为","到","cam","out","神奇","result","在","了","{","vector","消息","框","stringstream","基础","与","webserver","filter2dresult","colcon","build","不利","将","\"","格式","mono2d","to","multitask","基类","tutorials","config","getmodelinputsize","device","togetherros"],"title":"人体检测与跟踪","title_tokens":["跟踪","检测","人体","与"]},{"location":"hhp/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_1","text":"不知道大家有没有玩过类似XBOX的体感游戏机，上边会有一个相机，动态识别我们的动作，比如跳舞、打球，是不是还挺神奇的，这就是人体检测与跟踪的应用。 TogetherROS中也集成了一套类似的算法，可以识别人体、人头、人脸、人手等一系列关键点，我们来体验一下。","text_tokens":["比如","有","有没有","一系列","上边","检测","应用","等","关键","类似","挺","人手","体感","人体","与","也","一系","我们","相机","大家","算法","系列","人脸","人头","一套","识别","动态","中","的","不是","不","玩过","、","xbox","会"," ","跳舞","知道","游戏机","跟踪","集成","是不是","游戏","一个","打球","一下","神奇","没有","这","可以","了","还","来","体验","动作","就是","关键点","。","togetherros","，"],"title":"人体检测与跟踪","title_tokens":["跟踪","检测","人体","与"]},{"location":"hhp/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_2","text":"先来看一个人体识别的基础应用，我们驱动相机后，实时采样视觉信息，然后再通过检测算法，识别每一幅图片中人体位置，并把识别的结果保存成一张图片，便于我们查看。","text_tokens":["先","图片","后","然后","检测","应用","来看","基础","人体","并","我们","相机","算法","查看","成","位置","识别","采样","视觉","结果","中","的","保存","便于","信息","把","通过","实时","驱动","一幅","再","一个","每","一张","。","，"],"title":"编程开发方法","title_tokens":["编程","方法","开发方法","开发"]},{"location":"hhp/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_3","text":"# 下载例程代码（与之前课程下载的代码一致） $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build # 终端1，运行相机 $ source /opt/tros/setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p out_format: = nv12 -p image_width: = 960 -p image_height: = 544 -p video_device: = F37 # 终端2，运行例程 $ source /opt/tros/setup.bash $ source ./install/local_setup.bash $ mkdir -p config && cp -r /opt/tros/lib/dnn_node_example/config/multitask_body_kps_960x544.hbm config/ $ ros2 run cpp_dnn_demo cpp_dnn_demo --ros-args -p image: = config/test.jpg","text_tokens":["https","$","相机","--","lib","代码","的","clone","nv12","课程","kps","&&","，","终端","src","gitee","ros2","f37","height","544","1","git","mipi","args","image","下载","source","960x544","local","/","）","setup","test","一致","cpp","cp","-","p","com","运行","install","ws","ros","cam","out","opt","dnn","例程","body",".","mkdir","tros","之前","dev","demo","jpg","#","与","node","r","userdata","colcon","build","example","cd","video",":","guyuehome"," ","multitask","960","hbm","=","tutorials","2","bash","format","config","_","run","device","（","togetherros","width"],"title":"运行例程","title_tokens":["例程","运行"]},{"location":"hhp/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_4","text":"#include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" #include \"dnn_node/dnn_node.h\" #include \"dnn_node/util/image_proc.h\" #include \"sensor_msgs/msg/image.hpp\" using namespace hobot :: dnn_node ; class BodyDetNode : public DnnNode { public : BodyDetNode ( const std :: string & node_name = \"body_det\" , const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : DnnNode ( node_name , options ) { // 获取模型输入图片的尺寸，包括图片的宽model_input_width_和高model_input_height ，用于模型前处理 if ( Init () != 0 || GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ) < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Node init fail!\" ); } //创建图片消息的subscriber，订阅的topic为”/image_raw”，消息类型为sensor_msgs::msg::Image。订阅到的图片用于算法模型推理 ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( \"/image_raw\" , 10 , std :: bind ( & BodyDetNode :: FeedImg , this , std :: placeholders :: _1 )); } ~ BodyDetNode () override {} void FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr msg ); protected : int SetNodePara () override { if ( ! dnn_node_para_ptr_ ) return -1 ; //指定模型推理使用的模型文件名和模型名 dnn_node_para_ptr_ -> model_file = \"config/multitask_body_kps_960x544.hbm\" ; dnn_node_para_ptr_ -> model_name = \"multitask_body_kps_960x544\" ; //指定模型输出的人体框的解析方法，其中人体框输出索引为box_output_index_ //使用的解析方法为hobot_dnn预定义的检测框解析方法FaceHandDetectionOutputParser。 std :: shared_ptr < OutputParser > box_out_parser = std :: make_shared < FaceHandDetectionOutputParser > (); dnn_node_para_ptr_ -> output_parsers_ . emplace_back ( std :: make_pair ( box_output_index_ , box_out_parser ) ); return 0 ; } int PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) override ; private : int model_input_width_ = -1 ; int model_input_height_ = -1 ; const int32_t box_output_index_ = 1 ; sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg_ ; rclcpp :: Subscription < sensor_msgs :: msg :: Image >:: ConstSharedPtr ros_img_subscription_ = nullptr ; }; //输出模型结果，并将结果渲染到图片后保存在本地 int BodyDetNode::PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( node_output -> outputs . empty () || static_cast < int32_t > ( node_output -> outputs . size ()) < box_output_index_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid outputs\" ); return -1 ; } auto * filter2d_result = dynamic_cast < Filter2DResult *> ( node_output -> outputs [ box_output_index_ ]. get ()); if ( ! filter2d_result ) return -1 ; std :: stringstream ss ; ss << \"img encoding: \" << img_msg_ -> encoding << \", stamp: \" << img_msg_ -> header . stamp . sec << \",\" << img_msg_ -> header . stamp . nanosec << \" \\n out box size: \" << filter2d_result -> boxes . size () << \" \\n \" ; cv :: Mat nv12 ( img_msg_ -> height * 3 / 2 , img_msg_ -> width , CV_8UC1 , const_cast < char *> ( reinterpret_cast < const char *> ( img_msg_ -> data . data ()))); cv :: Mat bgr ; cv :: cvtColor ( nv12 , bgr , CV_YUV2BGR_NV12 ); for ( auto & rect : filter2d_result -> boxes ) { ss << \"rect: \" << rect . left << \" \" << rect . top << \" \" << rect . right << \" \" << rect . bottom << \" \\n \" ; // 图片渲染 cv :: rectangle ( bgr , cv :: Point ( rect . left , rect . top ), cv :: Point ( rect . right , rect . bottom ), cv :: Scalar ( 255 , 0 , 0 ), 3 ); } std :: string result_image = \"render_\" + std :: to_string ( img_msg_ -> header . stamp . sec ) + \".\" + std :: to_string ( img_msg_ -> header . stamp . nanosec ) + \".jpg\" ; ss << \"Render img to file: \" << result_image ; RCLCPP_INFO ( rclcpp :: get_logger ( \"example\" ), \"%s\" , ss . str (). c_str ()); cv :: imwrite ( result_image , bgr ); return 0 ; } //将nv12格式的图片转成模型输入的数据类型DNNInput后，输入给推理任务 void BodyDetNode::FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg ) return ; if ( \"nv12\" != img_msg -> encoding ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Only support nv12 img encoding!\" ); return ; } img_msg_ = img_msg ; // 创建模型输入数据 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { ImageProc :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ )}; // 运行推理，DnnNode基类中定义并实现的启动推理接口。 Run ( inputs ); } int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < BodyDetNode > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["|","rclcpp","core","后","hpp","检测","接口","size","emplace","dnninput","成","namespace","预定","int32","header","make","rectangle","类型","}","int","facehanddetectionoutputparser","input","logger","结果","boxes","invalid","left","point","的","保存","启动","*","std","输入","reinterpret","dynamic","10","dnnnodeoutput","bind","cvtcolor","support","inputs","名","parser","nv12","实现","imgproc","argc","kps","public","ss","输出","”","处理","util",")","void","，","include","imageproc","包括","opencv2","推理","empty","dnnnode","auto","人体","topic","~","only","pair","转","filter2d","imgcodecs","\\","height","outputparser","bottom","parsers","1","subscriber","文件","索引",",","用于","ptr","解析","方法","3","%","image","创建","获取","main","back","msg","error","subscription",";","渲染","960x544","string","/","!","nodeoptions","char","<","bgr","file","义","(","init","]","cv","feedimg","protected","8uc1","top","setnodepara","订阅","scalar","c","并","const","给","class","-","if","create","override","算法","yuv2bgr","str","运行","argv","postprocess","模型","using","proc","宽","为","options","ros","到","placeholders","bodydetnode","para","&","[","imwrite","本地","rect","255","get","img","output","out","nanosec","定义","dnn","mat","stamp","result","hobot","在","前","spin","body","{","尺寸",".","right","h","raw","info","vector","消息","框","图片","stringstream","model","+","任务","private","jpg","#","和","node","fail","0","filter2dresult","其中","example","sensor","n","将","getnv12pyramidfromnv12img","中","使用","\"",":",">","shared","this","encoding","data","格式","render","数据类型","name","t","index"," ","to","高","multitask","hbm","=","box","outputs","msgs","det","cast","2","s","基类","config","数据","getmodelinputsize","return","sec","nullptr","_","shutdown","static","for","文件名","run","。","指定","constsharedptr","width"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_5","text":"结果保存成图片，虽然便于保留数据，但是不利于动态看到效果，我们不如再来实时动态效果显示。 在这个案例中，我们在之前人体识别的基础上，进一步实现了人体部位的识别和骨骼、眼神等关键点的识别，比如头、脸、身体、手掌、眼睛。 识别的结果同样是通过浏览器来进行查看。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . $ ros2 launch /opt/tros/share/mono2d_body_detection/launch/hobot_mono2d_body_detection.launch.py","text_tokens":["py","$","我们","身体","这个","成","lib","结果","动态","的","保存","虽然","启动","、","实时","眼神","进行","实现","进一步","webservice","部位","&&","浏览器","，","share","头","sbin","等","人体","保留","是","ros2","同样","便于","通过","看到","x","服务","来","但是","detection","source","/","setup","脸","上","cp","-","p","查看","运行","眼睛","效果","识别","动态效果","骨骼","opt","例程","利于","hobot","在","了","一步","launch","body",".","关键","tros","之前","浏览","图片","+","基础","和","#","r","webserver","手掌","不利","不如","cd","中","mono2d","nginx","案例"," ","显示","websocket","再","bash","数据","config","_","chmod","关键点","。","不利于","比如"],"title":"人体检测与跟踪","title_tokens":["跟踪","检测","人体","与"]},{"location":"hhp/5.7_%E5%8D%95%E7%9B%AE3D%E5%AE%A4%E5%86%85%E6%A3%80%E6%B5%8B/","text":"单目3D室内检测 接下来，我们继续学习物体 3D 检测算法。 机器人有时候不仅仅要识别出人，还要识别出房间里有什么东西，这就是室内物体 3D 检测啦。 在TogetherROS上，就集成了这样一套算法，接下来让我们一起来体验以下吧。 先来看一张图片，很明显大家可以看到图中有两个垃圾桶。 运行示例程序 # 配置ROS2环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。 $ cp -r /opt/tros/lib/mono3d_indoor_detection/config/ . # 启动launch文件 $ ros2 launch /opt/tros/share/mono3d_indoor_detection/launch/mono3d_indoor_detection.launch.py [ INFO ] [ 1654858490 .168592166 ] [ mono3d_detection ] : target type: trash_can [ INFO ] [ 1654858490 .168644750 ] [ mono3d_detection ] : target type: width, value: 236 .816406 [ INFO ] [ 1654858490 .168704333 ] [ mono3d_detection ] : target type: height, value: 305 .664062 [ INFO ] [ 1654858490 .168759584 ] [ mono3d_detection ] : target type: length, value: 224 .182129 [ INFO ] [ 1654858490 .168812334 ] [ mono3d_detection ] : target type: rotation, value: -1571.989179 [ INFO ] [ 1654858490 .168862543 ] [ mono3d_detection ] : target type: x, value: -191.977829 [ INFO ] [ 1654858490 .168916168 ] [ mono3d_detection ] : target type: y, value: -143.963307 [ INFO ] [ 1654858490 .168966502 ] [ mono3d_detection ] : target type: z, value: 714 .024127 [ INFO ] [ 1654858490 .169016794 ] [ mono3d_detection ] : target type: depth, value: 714 .024127 [ INFO ] [ 1654858490 .169067461 ] [ mono3d_detection ] : target type: score, value: 0 .973215 [ INFO ] [ 1654858490 .169168795 ] [ mono3d_detection ] : target type: trash_can [ INFO ] [ 1654858490 .169212837 ] [ mono3d_detection ] : target type: width, value: 253 .051758 [ INFO ] [ 1654858490 .169265004 ] [ mono3d_detection ] : target type: height, value: 282 .348633 [ INFO ] [ 1654858490 .169317046 ] [ mono3d_detection ] : target type: length, value: 257 .934570 [ INFO ] [ 1654858490 .169368921 ] [ mono3d_detection ] : target type: rotation, value: -1542.727947 [ INFO ] [ 1654858490 .169418671 ] [ mono3d_detection ] : target type: x, value: 552 .459776 [ INFO ] [ 1654858490 .169470588 ] [ mono3d_detection ] : target type: y, value: -164.073169 [ INFO ] [ 1654858490 .169517505 ] [ mono3d_detection ] : target type: z, value: 1088 .358164 [ INFO ] [ 1654858490 .169566839 ] [ mono3d_detection ] : target type: depth, value: 1088 .358164 [ INFO ] [ 1654858490 .169616464 ] [ mono3d_detection ] : target type: score, value: 0 .875521 很明显，已经识别到了两个垃圾桶。 代码解析 // Copyright (c) 2022，Horizon Robotics. // // Licensed under the Apache License, Version 2.0 (the \"License\"); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \"AS IS\" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. #include \"include/centernet_3d_detection_node.h\" #include <unistd.h> #include <fstream> #include <memory> #include <string> #include <vector> #include \"dnn_node/dnn_node.h\" #include \"include/image_utils.h\" #include \"rclcpp/rclcpp.hpp\" #include <sys/stat.h> #ifdef CV_BRIDGE_PKG_ENABLED #include <cv_bridge/cv_bridge.h> #endif using hobot :: easy_dnn :: OutputDescription ; using hobot :: easy_dnn :: OutputParser ; CenterNet3DDetectionNode :: CenterNet3DDetectionNode ( const std :: string & node_name , const NodeOptions & options ) : DnnNode ( node_name , options ), output_frameCount_ ( 0 ) { this -> declare_parameter < int > ( \"is_sync_mode\" , is_sync_mode_ ); this -> declare_parameter < std :: string > ( \"config_file_path\" , config_file_path_ ); this -> declare_parameter < int > ( \"shared_mem\" , shared_mem_ ); this -> declare_parameter < std :: string > ( \"ai_msg_pub_topic_name\" , msg_pub_topic_name_ ); this -> declare_parameter < std :: string > ( \"image_sub_topic_name\" , ros_img_topic_name_ ); this -> declare_parameter < std :: string > ( \"feed_image\" , feed_image_ ); this -> get_parameter < int > ( \"is_sync_mode\" , is_sync_mode_ ); this -> get_parameter < std :: string > ( \"config_file_path\" , config_file_path_ ); this -> get_parameter < int > ( \"shared_mem\" , shared_mem_ ); this -> get_parameter < std :: string > ( \"ai_msg_pub_topic_name\" , msg_pub_topic_name_ ); this -> get_parameter < std :: string > ( \"image_sub_topic_name\" , ros_img_topic_name_ ); this -> get_parameter < std :: string > ( \"feed_image\" , feed_image_ ); model_file_name_ = config_file_path_ + \"/centernet.hbm\" ; mkdir ( \"./result/\" , 666 ); std :: stringstream ss ; ss << \"Parameter:\" << \" \\n config_file_path_:\" << config_file_path_ << \" \\n shared_men:\" << shared_mem_ << \" \\n is_sync_mode_: \" << is_sync_mode_ << \" \\n model_file_name_: \" << model_file_name_ << \" \\n feed_image:\" << feed_image_ ; RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); if ( Start () == 0 ) { RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"start success!!!\" ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"start fail!!!\" ); } } CenterNet3DDetectionNode ::~ CenterNet3DDetectionNode () {} int CenterNet3DDetectionNode :: Start () { int ret = Init (); if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Init failed!\" ); return ret ; } ret = GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ); if ( ret < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get model input size fail!\" ); return ret ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"The model input width is %d and height is %d\" , model_input_width_ , model_input_height_ ); msg_publisher_ = this -> create_publisher < ai_msgs :: msg :: PerceptionTargets > ( msg_pub_topic_name_ , 10 ); RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"msg_pub_topic_name: %s\" , msg_pub_topic_name_ . data ()); if ( ! feed_image_ . empty ()) { std :: cout << \"mono3d read image:\" << feed_image_ << \" to detect\" << std :: endl ; PredictByImage ( feed_image_ ); return 0 ; } // RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Detect images that use subscriptions\" ); if ( shared_mem_ ) { #ifdef SHARED_MEM_ENABLED RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Create hbmem_subscription with topic_name: %s\" , sharedmem_img_topic_name_ . c_str ()); sharedmem_img_subscription_ = this -> create_subscription_hbmem < hbm_img_msgs :: msg :: HbmMsg1080P > ( sharedmem_img_topic_name_ , 10 , std :: bind ( & CenterNet3DDetectionNode :: SharedMemImgProcess , this , std :: placeholders :: _1 )); #else RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Unsupport shared mem\" ); #endif } else { RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Create subscription with topic_name: %s\" , ros_img_topic_name_ . c_str ()); ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( ros_img_topic_name_ , 10 , std :: bind ( & CenterNet3DDetectionNode :: RosImgProcess , this , std :: placeholders :: _1 )); } return 0 ; } int CenterNet3DDetectionNode :: SetNodePara () { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Set node para.\" ); if ( ! dnn_node_para_ptr_ ) { return -1 ; } dnn_node_para_ptr_ -> model_file = model_file_name_ ; dnn_node_para_ptr_ -> model_name = model_name_ ; dnn_node_para_ptr_ -> model_task_type = model_task_type_ ; dnn_node_para_ptr_ -> task_num = 1 ; return 0 ; } int CenterNet3DDetectionNode :: SetOutputParser () { // set output parser auto model_manage = GetModel (); if ( ! model_manage || ! dnn_node_para_ptr_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Invalid model\" ); return -1 ; } if ( model_manage -> GetOutputCount () < model_output_count_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Error! Model %s output count is %d, unmatch with count %d\" , dnn_node_para_ptr_ -> model_name . c_str (), model_manage -> GetOutputCount (), model_output_count_ ); return -1 ; } for ( int i = 0 ; i < output_index_ ; ++ i ) { std :: shared_ptr < OutputParser > assist_parser = std :: make_shared < CenterNet3DAssistParser > (); model_manage -> SetOutputParser ( i , assist_parser ); } // set 3D paser auto output_desc = std :: make_shared < OutputDescription > ( model_manage , output_index_ , \"3D_branch\" ); for ( int i = 0 ; i < output_index_ ; ++ i ) { output_desc -> GetDependencies (). push_back ( i ); } output_desc -> SetType ( \"3D\" ); model_manage -> SetOutputDescription ( output_desc ); std :: shared_ptr < OutputParser > out_parser = std :: make_shared < CenterNet3DOutputParser > ( config_file_path_ ); model_manage -> SetOutputParser ( output_index_ , out_parser ); return 0 ; } #define CV_DRAW_LINE(p0, p1) \\ cv::line(image, cv::Point(points[p0][0], points[p0][1]), \\ cv::Point(points[p1][0], points[p1][1]), \\ CV_RGB(0, 255, 0), 2); #define CV_PUT_TEXT(text, px, py, offset) \\ { double fontScale = 3.0l; int thickness = 3u, baseline; \\ cv::Size text_size = cv::getTextSize(text, \\ cv::HersheyFonts::FONT_HERSHEY_PLAIN, fontScale, thickness, &baseline); \\ cv::Point point(px , py); \\ point.y += offset;\\ cv::Rect rect(point.x, point.y, \\ text_size.width, text_size.height); \\ point.y += text_size.height;\\ offset += text_size.height;\\ cv::putText(image, text, point, \\ cv::HersheyFonts::FONT_HERSHEY_PLAIN, \\ fontScale, CV_RGB(0, 255, 128), thickness); } void Render3DBox ( const BBox3D & box , cv :: Mat & image ) { auto & points = box . corners2d_upscale ; CV_DRAW_LINE ( 0 , 1 ) CV_DRAW_LINE ( 0 , 3 ) CV_DRAW_LINE ( 0 , 4 ) CV_DRAW_LINE ( 1 , 2 ) CV_DRAW_LINE ( 1 , 5 ) CV_DRAW_LINE ( 2 , 3 ) CV_DRAW_LINE ( 2 , 6 ) CV_DRAW_LINE ( 3 , 7 ) CV_DRAW_LINE ( 4 , 5 ) CV_DRAW_LINE ( 4 , 7 ) CV_DRAW_LINE ( 5 , 6 ) CV_DRAW_LINE ( 6 , 7 ) std :: string box_type = std :: to_string ( box . class_label ); std :: string score = std :: to_string ( box . score ); int offset = 0 ; if ( - M_PI_2 <= box . r || box . r <= M_PI_2 ) { CV_PUT_TEXT ( box_type , points [ 7 ][ 0 ], points [ 7 ][ 1 ], offset ); CV_PUT_TEXT ( score , points [ 7 ][ 0 ], points [ 7 ][ 1 ], offset ); } else { CV_PUT_TEXT ( box_type , points [ 6 ][ 0 ], points [ 6 ][ 1 ], offset ); CV_PUT_TEXT ( score , points [ 6 ][ 0 ], points [ 6 ][ 1 ], offset ); } } int CenterNet3DDetectionNode :: PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( ! msg_publisher_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid msg_publisher_\" ); return -1 ; } struct timespec time_start = { 0 , 0 }; clock_gettime ( CLOCK_REALTIME , & time_start ); ai_msgs :: msg :: Perf perf ; perf . set__type ( \"PostProcess\" ); perf . stamp_start . sec = time_start . tv_sec ; perf . stamp_start . nanosec = time_start . tv_nsec ; auto centernet_3d_output = std :: dynamic_pointer_cast < CenterNet3DOutput > ( node_output ); if ( centernet_3d_output ) { std :: stringstream ss ; ss << \"3D output dection info\" ; if ( centernet_3d_output -> image_msg_header_ ) { ss << \", frame_id: \" << centernet_3d_output -> image_msg_header_ -> frame_id << \", stamp: \" << centernet_3d_output -> image_msg_header_ -> stamp . sec << \".\" << centernet_3d_output -> image_msg_header_ -> stamp . nanosec ; } RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); } const auto & outputs = node_output -> outputs ; RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"outputs size: %d\" , outputs . size ()); if ( outputs . empty () || static_cast < int32_t > ( outputs . size ()) < model_output_count_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Invalid outputs\" ); return -1 ; } int smart_fps = 0 ; { auto tp_now = std :: chrono :: system_clock :: now (); output_frameCount_ ++ ; auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - output_tp_ ) . count (); if ( interval >= 1000 ) { smart_fps = output_frameCount_ ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Smart fps = %d\" , smart_fps ); output_frameCount_ = 0 ; output_tp_ = std :: chrono :: system_clock :: now (); } } ai_msgs :: msg :: PerceptionTargets :: UniquePtr pub_data ( new ai_msgs :: msg :: PerceptionTargets ()); if ( centernet_3d_output -> image_msg_header_ ) { pub_data -> header . set__stamp ( centernet_3d_output -> image_msg_header_ -> stamp ); pub_data -> header . set__frame_id ( centernet_3d_output -> image_msg_header_ -> frame_id ); } pub_data -> set__fps ( smart_fps ); auto * det_result = dynamic_cast < CenterNet3DDetResult *> ( outputs [ output_index_ ]. get ()); if ( ! det_result ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"invalid cast\" ); } else { RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"out box size: %d\" , det_result -> boxes . size ()); std :: map < std :: string , ai_msgs :: msg :: Target > target_list ; std :: vector < ai_msgs :: msg :: Target > targets ; targets . reserve ( det_result -> boxes . size ()); for ( auto & box : det_result -> boxes ) { ai_msgs :: msg :: Target target ; switch ( box . class_label ) { case BBox3D :: CHARGING_BASE : target . type = \"charging_base\" ; break ; case BBox3D :: SLIPPER : target . type = \"slipper\" ; break ; case BBox3D :: TRASH_CAN : target . type = \"trash_can\" ; break ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s\" , target . type . c_str ()); ai_msgs :: msg :: Attribute attribute ; ai_msgs :: msg :: Point point ; attribute . type = \"width\" ; attribute . value = box . w * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"height\" ; attribute . value = box . h * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"length\" ; attribute . value = box . l * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"rotation\" ; attribute . value = box . r * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"x\" ; attribute . value = box . x * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"y\" ; attribute . value = box . y * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"z\" ; attribute . value = box . z * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"depth\" ; attribute . value = box . d * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"score\" ; attribute . value = box . score * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), box . score ); target . attributes . push_back ( attribute ); // 8 corners /* 4----------5 6----------7 /| /| /| /| / | / | / | / | / | / | / | / | 7---|------6 |5---|------4 | | | | || | | | | | | || | | | | 0------|---1| 2------|---3 | / | / | / | / | / ^ | / | / v | / |/ |/ |/ |/ 3----------2 1----------0 */ for ( const auto & corners : box . corners2d_upscale ) { geometry_msgs :: msg :: Point32 g_point ; g_point . x = corners [ 0 ]; g_point . y = corners [ 1 ]; point . point . push_back ( g_point ); } point . type = \"corners\" ; target . points . push_back ( point ); targets . push_back ( target ); } pub_data -> targets = std :: move ( targets ); if ( ! centernet_3d_output -> image_name_ . empty ()) { auto img_bgr = cv :: imread ( centernet_3d_output -> image_name_ ); for ( auto & box : det_result -> boxes ) { Render3DBox ( box , img_bgr ); } std :: string :: size_type iPos = centernet_3d_output -> image_name_ . find_last_of ( '/' ) + 1 ; std :: string filename = centernet_3d_output -> image_name_ . substr ( iPos , centernet_3d_output -> image_name_ . length () - iPos ); cv :: imwrite ( \"./result/\" + filename , img_bgr ); } } clock_gettime ( CLOCK_REALTIME , & time_start ); perf . stamp_end . sec = time_start . tv_sec ; perf . stamp_end . nanosec = time_start . tv_nsec ; pub_data -> perfs . emplace_back ( perf ); msg_publisher_ -> publish ( std :: move ( pub_data )); return 0 ; } int CenterNet3DDetectionNode :: Predict ( std :: vector < std :: shared_ptr < DNNInput >> & inputs , const std :: shared_ptr < std :: vector < hbDNNRoi >> rois , std :: shared_ptr < DnnNodeOutput > dnn_output ) { return Run ( inputs , dnn_output , rois , is_sync_mode_ == 1 ); } void CenterNet3DDetectionNode :: RosImgProcess ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg || ! rclcpp :: ok ()) { return ; } std :: stringstream ss ; ss << \"Recved img encoding: \" << img_msg -> encoding << \", h: \" << img_msg -> height << \", w: \" << img_msg -> width << \", step: \" << img_msg -> step << \", frame_id: \" << img_msg -> header . frame_id << \", stamp: \" << img_msg -> header . stamp . sec << \".\" << img_msg -> header . stamp . nanosec << \", data size: \" << img_msg -> data . size (); RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); auto tp_start = std :: chrono :: system_clock :: now (); // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; if ( \"rgb8\" == img_msg -> encoding ) { #ifdef CV_BRIDGE_PKG_ENABLED auto cv_img = cv_bridge :: cvtColorForDisplay ( cv_bridge :: toCvShare ( img_msg ), \"bgr8\" ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after cvtColorForDisplay cost ms: %d\" , interval ); } pyramid = ImageUtils :: GetNV12Pyramid ( cv_img -> image , model_input_height_ , model_input_width_ ); #else RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Unsupport cv bridge\" ); #endif } else if ( \"nv12\" == img_msg -> encoding ) { pyramid = ImageUtils :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ ); } if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail\" ); return ; } { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after GetNV12Pyramid cost ms: %d\" , interval ); } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Dnn node begin to predict\" ); // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = img_msg -> width ; dnn_output -> src_img_height_ = img_msg -> height ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( img_msg -> header . frame_id ); dnn_output -> image_msg_header_ -> set__stamp ( img_msg -> header . stamp ); dnn_output -> image_name_ = \"\" ; // 3. 开始预测 uint32_t ret = Predict ( inputs , nullptr , dnn_output ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after Predict cost ms: %d\" , interval ); } if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"predict img failed!\" ); } return ; } int CenterNet3DDetectionNode :: PredictByImage ( const std :: string & image ) { // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; // bgr img，支持将图片resize到模型输入size pyramid = ImageUtils :: GetNV12Pyramid ( image , ImageType :: BGR , model_input_height_ , model_input_width_ ); if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail with image: %s\" , image . c_str ()); return -1 ; } // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = 1920 ; dnn_output -> src_img_height_ = 1024 ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( \"test_frame\" ); dnn_output -> image_msg_header_ -> set__stamp ( rclcpp :: Time ()); dnn_output -> image_name_ = image ; // dnn_output->image_msg_header->set__frame_id(std::to_string(img_msg->index)); // dnn_output->image_msg_header->set__stamp(img_msg->time_stamp); // 3. 开始预测 uint32_t ret = Predict ( inputs , nullptr , dnn_output ); if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"predict img failed!\" ); } return ret ; } #ifdef SHARED_MEM_ENABLED void CenterNet3DDetectionNode :: SharedMemImgProcess ( const hbm_img_msgs :: msg :: HbmMsg1080P :: ConstSharedPtr img_msg ) { if ( ! img_msg || ! rclcpp :: ok ()) { return ; } RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"go into shared mem\" ); // dump recved img msg // std::ofstream ofs(\"img_\" + std::to_string(img_msg->index) + \".\" + // std::string(reinterpret_cast<const char*>(img_msg->encoding.data()))); // ofs.write(reinterpret_cast<const char*>(img_msg->data.data()), // img_msg->data_size); auto tp_start = std :: chrono :: system_clock :: now (); // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; if ( \"nv12\" == std :: string ( reinterpret_cast < const char *> ( img_msg -> encoding . data ()))) { pyramid = ImageUtils :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ ); } else { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"share mem unsupported img encoding: %s\" , img_msg -> encoding ); } if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail!\" ); return ; } { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after GetNV12Pyramid cost ms: %d\" , interval ); } // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = img_msg -> width ; dnn_output -> src_img_height_ = img_msg -> height ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( std :: to_string ( img_msg -> index )); dnn_output -> image_msg_header_ -> set__stamp ( img_msg -> time_stamp ); // 3. 开始预测 int ret = Predict ( inputs , nullptr , dnn_output ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after Predict cost ms: %d\" , interval ); } // 4. 处理预测结果，如渲染到图片或者发布预测结果 if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Run predict failed!\" ); } return ; } #endif","text_tokens":["hpp","i","framecount","666","rotation","emplace","仅仅","conditions","warn","路径","logger","169517505","getmodel","invalid","代码","单目","point","reinterpret","ipos","target","express","不仅","obtain","inputs","起来","nsec","ifdef","font","in","预测","without","at","settype","支持","168704333","score","示例","552","室内","assist","upscale","smart","282","height","outputdescription","子类","257","305","168812334","通过","接下来","看到","law","sharedmemimgprocess","time","under","有时候","fstream","feed","还要","the","bridge","subscription","875521","/","imageutils","先","file","see","__","runinfertask","c","last","robotics","realtime","cp","168644750","http","gettextsize","implied","declare","that","org","chrono","targets","'","find","ret","让","para","placeholders","吧","[","6","id","垃圾桶","rect","168759584","255","img","any","agreed","mat","体验","垃圾","5",".","version","mkdir","tros","有","setoutputparser","trash","1542.727947","hersheyfonts","#","end","0","geometry","cost","ai","encoding","index","attribute","8","=","msgs","case","图中","hbmmsg1080p","生成","可以","depth","sharedmem","m","gettime","run","predictbyimage","配置文件","ok","constsharedptr","fontscale","|","centernet3ddetresult","centernet3doutputparser","count","$","169016794","unmatch","after","p1","size","接口","else","imagetype","filename","----------","一","int32","make","}","g","714","input","两个","mono3d","px","168966502","输入","dynamic","and","集成","bind","224","length","nv12","143.963307","enabled","an","recved","now","perf","apache","就是","dump","处理","void","，","license","src","什么","distributed","centernet3ddetectionnode","as","start","path","outputparser","charging","接下","define","perfs",",","ptr","www","169566839","3","x","timespec","房间","环境","image","创建","images","pi","error","tocvshare","detection","mode","detect","string","出人","程序","required","endif","051758","rgb8","puttext","plain","cv","frame","l","对象","task","开始","if","stat","str","dection","on","模型","break","options","with","bbox3d","struct","358164","output","下来","816406","v","hobot","launch","setoutputdescription","机器","failed","debug","centernet","169168795","+","clock","draw","node","corners2d","r","fail","reserve","168916168","里","example","n","language","p0","就","使用","rgb",">","this","^","mem","t","box","substr","2","except","bash","pyramid","bgr8","return","169212837","_","要","pym","253","hbm","width","已经","---","ofstream","py","success","corners","459776","branch","lib","header","render3dbox","sys","类型","int","2022","1000","boxes","or","3.0","10","dnnnodeoutput","4","parser","这","传入","duration",")","share","169418671","tv","需要","dnnnode","~","paser","ros2","大家","f","begin","imread","169265004","1","出","resize","use","fps","解析","parameter","169470588","%","从","3d","of","push","licensed","不仅仅","back","msg","centernet3doutput","milliseconds","interval","渲染","sub","source","nodeoptions","text","unless","system","init","test","将会","utils","cout","can","setnodepara","973215","nv12pyramidinput","-","create","算法","read","安装","postprocess","1088","you","识别","go","------","164.073169","static","getnv12pyramidfromnv12img","imwrite","&","perceptiontargets","get","nanosec","opt","7","dnn","这样","desc","pkg","point32","unsupport","a","stamp","348633","y","h","info","z","图片","specific","model","baseline","set","thickness","uniqueptr","type","num","236","value","sensor","拷贝","中",":","3u","shared","data","double","数据类型","name"," ","men","outputs","cast","line","either","s","may","det","182129","copy","明显","数据","一张","put","sec","nullptr","for","easy","。","setup","rclcpp","warranties","检测","我们","1571.989179","很","points","w","dnninput","成","169067461","manage","结果","的","启动","*","std","128","getdependencies","024127","limitations","kind","配置","学习","applicable","endl","rois","copyright","1920","继续","is","ss","hbmem","934570","include","empty","来看","auto","有时","topic","horizon","物体","step","或者","664062","\\","write","一套","1654858490","getoutputcount","getnv12pyramid","文件","d","169616464","centernet3dassistparser","new","slipper",";","191.977829","unsupported","!","move","char","168862543","<","basis","governing","bgr","(","uint32","hershey","]","168592166","上","东西","sync","const","class","memory","into","attributes","运行","1024","base","label","using","ros","为","publisher","到","hbdnnroi","map","permissions","predict","not","subscriptions","时候","169368921","writing","out","software","ms","result","switch","在","了","ofs","tp","{","indoor","unistd","pub","169317046","vector","机器人","stringstream","rosimgprocess","啦","发布","by","++","licenses","将","\"","以下","cvtcolorfordisplay","to","如","2.0","pointer","config","compliance","getmodelinputsize","offset","作为","publish","togetherros","list"],"title":"单目3D室内检测","title_tokens":["3d","室内","检测","单目"]},{"location":"hhp/5.7_%E5%8D%95%E7%9B%AE3D%E5%AE%A4%E5%86%85%E6%A3%80%E6%B5%8B/#3d","text":"接下来，我们继续学习物体 3D 检测算法。 机器人有时候不仅仅要识别出人，还要识别出房间里有什么东西，这就是室内物体 3D 检测啦。 在TogetherROS上，就集成了这样一套算法，接下来让我们一起来体验以下吧。 先来看一张图片，很明显大家可以看到图中有两个垃圾桶。","text_tokens":["先","有","机器人","图片","检测","室内","上","来看","什么","有时","东西","啦","我们","物体","很","大家","算法","一","仅仅","里","一套","识别","让","两个","吧","接下","就","出","以下","接下来","垃圾桶","时候","看到"," ","集成","3d","下来","房间","不仅","学习","有时候","这样","图中","起来","不仅仅","明显","还要","这","一张","在","了","体验","可以","垃圾","出人","继续","要","机器","就是","。","togetherros","，"],"title":"单目3D室内检测","title_tokens":["3d","室内","检测","单目"]},{"location":"hhp/5.7_%E5%8D%95%E7%9B%AE3D%E5%AE%A4%E5%86%85%E6%A3%80%E6%B5%8B/#_1","text":"# 配置ROS2环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。 $ cp -r /opt/tros/lib/mono3d_indoor_detection/config/ . # 启动launch文件 $ ros2 launch /opt/tros/share/mono3d_indoor_detection/launch/mono3d_indoor_detection.launch.py [ INFO ] [ 1654858490 .168592166 ] [ mono3d_detection ] : target type: trash_can [ INFO ] [ 1654858490 .168644750 ] [ mono3d_detection ] : target type: width, value: 236 .816406 [ INFO ] [ 1654858490 .168704333 ] [ mono3d_detection ] : target type: height, value: 305 .664062 [ INFO ] [ 1654858490 .168759584 ] [ mono3d_detection ] : target type: length, value: 224 .182129 [ INFO ] [ 1654858490 .168812334 ] [ mono3d_detection ] : target type: rotation, value: -1571.989179 [ INFO ] [ 1654858490 .168862543 ] [ mono3d_detection ] : target type: x, value: -191.977829 [ INFO ] [ 1654858490 .168916168 ] [ mono3d_detection ] : target type: y, value: -143.963307 [ INFO ] [ 1654858490 .168966502 ] [ mono3d_detection ] : target type: z, value: 714 .024127 [ INFO ] [ 1654858490 .169016794 ] [ mono3d_detection ] : target type: depth, value: 714 .024127 [ INFO ] [ 1654858490 .169067461 ] [ mono3d_detection ] : target type: score, value: 0 .973215 [ INFO ] [ 1654858490 .169168795 ] [ mono3d_detection ] : target type: trash_can [ INFO ] [ 1654858490 .169212837 ] [ mono3d_detection ] : target type: width, value: 253 .051758 [ INFO ] [ 1654858490 .169265004 ] [ mono3d_detection ] : target type: height, value: 282 .348633 [ INFO ] [ 1654858490 .169317046 ] [ mono3d_detection ] : target type: length, value: 257 .934570 [ INFO ] [ 1654858490 .169368921 ] [ mono3d_detection ] : target type: rotation, value: -1542.727947 [ INFO ] [ 1654858490 .169418671 ] [ mono3d_detection ] : target type: x, value: 552 .459776 [ INFO ] [ 1654858490 .169470588 ] [ mono3d_detection ] : target type: y, value: -164.073169 [ INFO ] [ 1654858490 .169517505 ] [ mono3d_detection ] : target type: z, value: 1088 .358164 [ INFO ] [ 1654858490 .169566839 ] [ mono3d_detection ] : target type: depth, value: 1088 .358164 [ INFO ] [ 1654858490 .169616464 ] [ mono3d_detection ] : target type: score, value: 0 .875521 很明显，已经识别到了两个垃圾桶。","text_tokens":["已经","py","$","169016794","1571.989179","rotation","459776","很","lib","169067461","路径","714","169517505","两个","mono3d","的","启动","168966502","024127","配置","target","224","length","143.963307","，","share","934570","168704333","169418671","score","示例","552","需要","ros2","282","664062","height","1654858490","169265004","257","出","305","168812334","文件",",","169470588","169566839","x","从","环境","169616464","配置文件","875521","detection","source","191.977829","/","168862543","051758","setup","]","168592166","can","973215","cp","-","168644750","安装","运行","1088","识别","164.073169","[","到","垃圾桶","169368921","168759584","358164","opt","816406","了","垃圾","348633","launch","y",".","indoor","info","tros","169168795","169317046","z","trash","1542.727947","#","r","0","type","168916168","236","value","拷贝","中",":"," ","182129","bash","明显","config","169212837","depth","_","253","。","width"],"title":"运行示例程序","title_tokens":["程序","运行","示例"]},{"location":"hhp/5.7_%E5%8D%95%E7%9B%AE3D%E5%AE%A4%E5%86%85%E6%A3%80%E6%B5%8B/#_2","text":"// Copyright (c) 2022，Horizon Robotics. // // Licensed under the Apache License, Version 2.0 (the \"License\"); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \"AS IS\" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. #include \"include/centernet_3d_detection_node.h\" #include <unistd.h> #include <fstream> #include <memory> #include <string> #include <vector> #include \"dnn_node/dnn_node.h\" #include \"include/image_utils.h\" #include \"rclcpp/rclcpp.hpp\" #include <sys/stat.h> #ifdef CV_BRIDGE_PKG_ENABLED #include <cv_bridge/cv_bridge.h> #endif using hobot :: easy_dnn :: OutputDescription ; using hobot :: easy_dnn :: OutputParser ; CenterNet3DDetectionNode :: CenterNet3DDetectionNode ( const std :: string & node_name , const NodeOptions & options ) : DnnNode ( node_name , options ), output_frameCount_ ( 0 ) { this -> declare_parameter < int > ( \"is_sync_mode\" , is_sync_mode_ ); this -> declare_parameter < std :: string > ( \"config_file_path\" , config_file_path_ ); this -> declare_parameter < int > ( \"shared_mem\" , shared_mem_ ); this -> declare_parameter < std :: string > ( \"ai_msg_pub_topic_name\" , msg_pub_topic_name_ ); this -> declare_parameter < std :: string > ( \"image_sub_topic_name\" , ros_img_topic_name_ ); this -> declare_parameter < std :: string > ( \"feed_image\" , feed_image_ ); this -> get_parameter < int > ( \"is_sync_mode\" , is_sync_mode_ ); this -> get_parameter < std :: string > ( \"config_file_path\" , config_file_path_ ); this -> get_parameter < int > ( \"shared_mem\" , shared_mem_ ); this -> get_parameter < std :: string > ( \"ai_msg_pub_topic_name\" , msg_pub_topic_name_ ); this -> get_parameter < std :: string > ( \"image_sub_topic_name\" , ros_img_topic_name_ ); this -> get_parameter < std :: string > ( \"feed_image\" , feed_image_ ); model_file_name_ = config_file_path_ + \"/centernet.hbm\" ; mkdir ( \"./result/\" , 666 ); std :: stringstream ss ; ss << \"Parameter:\" << \" \\n config_file_path_:\" << config_file_path_ << \" \\n shared_men:\" << shared_mem_ << \" \\n is_sync_mode_: \" << is_sync_mode_ << \" \\n model_file_name_: \" << model_file_name_ << \" \\n feed_image:\" << feed_image_ ; RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); if ( Start () == 0 ) { RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"start success!!!\" ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"start fail!!!\" ); } } CenterNet3DDetectionNode ::~ CenterNet3DDetectionNode () {} int CenterNet3DDetectionNode :: Start () { int ret = Init (); if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Init failed!\" ); return ret ; } ret = GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ); if ( ret < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get model input size fail!\" ); return ret ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"The model input width is %d and height is %d\" , model_input_width_ , model_input_height_ ); msg_publisher_ = this -> create_publisher < ai_msgs :: msg :: PerceptionTargets > ( msg_pub_topic_name_ , 10 ); RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"msg_pub_topic_name: %s\" , msg_pub_topic_name_ . data ()); if ( ! feed_image_ . empty ()) { std :: cout << \"mono3d read image:\" << feed_image_ << \" to detect\" << std :: endl ; PredictByImage ( feed_image_ ); return 0 ; } // RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Detect images that use subscriptions\" ); if ( shared_mem_ ) { #ifdef SHARED_MEM_ENABLED RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Create hbmem_subscription with topic_name: %s\" , sharedmem_img_topic_name_ . c_str ()); sharedmem_img_subscription_ = this -> create_subscription_hbmem < hbm_img_msgs :: msg :: HbmMsg1080P > ( sharedmem_img_topic_name_ , 10 , std :: bind ( & CenterNet3DDetectionNode :: SharedMemImgProcess , this , std :: placeholders :: _1 )); #else RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Unsupport shared mem\" ); #endif } else { RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Create subscription with topic_name: %s\" , ros_img_topic_name_ . c_str ()); ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( ros_img_topic_name_ , 10 , std :: bind ( & CenterNet3DDetectionNode :: RosImgProcess , this , std :: placeholders :: _1 )); } return 0 ; } int CenterNet3DDetectionNode :: SetNodePara () { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Set node para.\" ); if ( ! dnn_node_para_ptr_ ) { return -1 ; } dnn_node_para_ptr_ -> model_file = model_file_name_ ; dnn_node_para_ptr_ -> model_name = model_name_ ; dnn_node_para_ptr_ -> model_task_type = model_task_type_ ; dnn_node_para_ptr_ -> task_num = 1 ; return 0 ; } int CenterNet3DDetectionNode :: SetOutputParser () { // set output parser auto model_manage = GetModel (); if ( ! model_manage || ! dnn_node_para_ptr_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Invalid model\" ); return -1 ; } if ( model_manage -> GetOutputCount () < model_output_count_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Error! Model %s output count is %d, unmatch with count %d\" , dnn_node_para_ptr_ -> model_name . c_str (), model_manage -> GetOutputCount (), model_output_count_ ); return -1 ; } for ( int i = 0 ; i < output_index_ ; ++ i ) { std :: shared_ptr < OutputParser > assist_parser = std :: make_shared < CenterNet3DAssistParser > (); model_manage -> SetOutputParser ( i , assist_parser ); } // set 3D paser auto output_desc = std :: make_shared < OutputDescription > ( model_manage , output_index_ , \"3D_branch\" ); for ( int i = 0 ; i < output_index_ ; ++ i ) { output_desc -> GetDependencies (). push_back ( i ); } output_desc -> SetType ( \"3D\" ); model_manage -> SetOutputDescription ( output_desc ); std :: shared_ptr < OutputParser > out_parser = std :: make_shared < CenterNet3DOutputParser > ( config_file_path_ ); model_manage -> SetOutputParser ( output_index_ , out_parser ); return 0 ; } #define CV_DRAW_LINE(p0, p1) \\ cv::line(image, cv::Point(points[p0][0], points[p0][1]), \\ cv::Point(points[p1][0], points[p1][1]), \\ CV_RGB(0, 255, 0), 2); #define CV_PUT_TEXT(text, px, py, offset) \\ { double fontScale = 3.0l; int thickness = 3u, baseline; \\ cv::Size text_size = cv::getTextSize(text, \\ cv::HersheyFonts::FONT_HERSHEY_PLAIN, fontScale, thickness, &baseline); \\ cv::Point point(px , py); \\ point.y += offset;\\ cv::Rect rect(point.x, point.y, \\ text_size.width, text_size.height); \\ point.y += text_size.height;\\ offset += text_size.height;\\ cv::putText(image, text, point, \\ cv::HersheyFonts::FONT_HERSHEY_PLAIN, \\ fontScale, CV_RGB(0, 255, 128), thickness); } void Render3DBox ( const BBox3D & box , cv :: Mat & image ) { auto & points = box . corners2d_upscale ; CV_DRAW_LINE ( 0 , 1 ) CV_DRAW_LINE ( 0 , 3 ) CV_DRAW_LINE ( 0 , 4 ) CV_DRAW_LINE ( 1 , 2 ) CV_DRAW_LINE ( 1 , 5 ) CV_DRAW_LINE ( 2 , 3 ) CV_DRAW_LINE ( 2 , 6 ) CV_DRAW_LINE ( 3 , 7 ) CV_DRAW_LINE ( 4 , 5 ) CV_DRAW_LINE ( 4 , 7 ) CV_DRAW_LINE ( 5 , 6 ) CV_DRAW_LINE ( 6 , 7 ) std :: string box_type = std :: to_string ( box . class_label ); std :: string score = std :: to_string ( box . score ); int offset = 0 ; if ( - M_PI_2 <= box . r || box . r <= M_PI_2 ) { CV_PUT_TEXT ( box_type , points [ 7 ][ 0 ], points [ 7 ][ 1 ], offset ); CV_PUT_TEXT ( score , points [ 7 ][ 0 ], points [ 7 ][ 1 ], offset ); } else { CV_PUT_TEXT ( box_type , points [ 6 ][ 0 ], points [ 6 ][ 1 ], offset ); CV_PUT_TEXT ( score , points [ 6 ][ 0 ], points [ 6 ][ 1 ], offset ); } } int CenterNet3DDetectionNode :: PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( ! msg_publisher_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid msg_publisher_\" ); return -1 ; } struct timespec time_start = { 0 , 0 }; clock_gettime ( CLOCK_REALTIME , & time_start ); ai_msgs :: msg :: Perf perf ; perf . set__type ( \"PostProcess\" ); perf . stamp_start . sec = time_start . tv_sec ; perf . stamp_start . nanosec = time_start . tv_nsec ; auto centernet_3d_output = std :: dynamic_pointer_cast < CenterNet3DOutput > ( node_output ); if ( centernet_3d_output ) { std :: stringstream ss ; ss << \"3D output dection info\" ; if ( centernet_3d_output -> image_msg_header_ ) { ss << \", frame_id: \" << centernet_3d_output -> image_msg_header_ -> frame_id << \", stamp: \" << centernet_3d_output -> image_msg_header_ -> stamp . sec << \".\" << centernet_3d_output -> image_msg_header_ -> stamp . nanosec ; } RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); } const auto & outputs = node_output -> outputs ; RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"outputs size: %d\" , outputs . size ()); if ( outputs . empty () || static_cast < int32_t > ( outputs . size ()) < model_output_count_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Invalid outputs\" ); return -1 ; } int smart_fps = 0 ; { auto tp_now = std :: chrono :: system_clock :: now (); output_frameCount_ ++ ; auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - output_tp_ ) . count (); if ( interval >= 1000 ) { smart_fps = output_frameCount_ ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Smart fps = %d\" , smart_fps ); output_frameCount_ = 0 ; output_tp_ = std :: chrono :: system_clock :: now (); } } ai_msgs :: msg :: PerceptionTargets :: UniquePtr pub_data ( new ai_msgs :: msg :: PerceptionTargets ()); if ( centernet_3d_output -> image_msg_header_ ) { pub_data -> header . set__stamp ( centernet_3d_output -> image_msg_header_ -> stamp ); pub_data -> header . set__frame_id ( centernet_3d_output -> image_msg_header_ -> frame_id ); } pub_data -> set__fps ( smart_fps ); auto * det_result = dynamic_cast < CenterNet3DDetResult *> ( outputs [ output_index_ ]. get ()); if ( ! det_result ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"invalid cast\" ); } else { RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"out box size: %d\" , det_result -> boxes . size ()); std :: map < std :: string , ai_msgs :: msg :: Target > target_list ; std :: vector < ai_msgs :: msg :: Target > targets ; targets . reserve ( det_result -> boxes . size ()); for ( auto & box : det_result -> boxes ) { ai_msgs :: msg :: Target target ; switch ( box . class_label ) { case BBox3D :: CHARGING_BASE : target . type = \"charging_base\" ; break ; case BBox3D :: SLIPPER : target . type = \"slipper\" ; break ; case BBox3D :: TRASH_CAN : target . type = \"trash_can\" ; break ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s\" , target . type . c_str ()); ai_msgs :: msg :: Attribute attribute ; ai_msgs :: msg :: Point point ; attribute . type = \"width\" ; attribute . value = box . w * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"height\" ; attribute . value = box . h * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"length\" ; attribute . value = box . l * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"rotation\" ; attribute . value = box . r * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"x\" ; attribute . value = box . x * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"y\" ; attribute . value = box . y * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"z\" ; attribute . value = box . z * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"depth\" ; attribute . value = box . d * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"score\" ; attribute . value = box . score * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), box . score ); target . attributes . push_back ( attribute ); // 8 corners /* 4----------5 6----------7 /| /| /| /| / | / | / | / | / | / | / | / | 7---|------6 |5---|------4 | | | | || | | | | | | || | | | | 0------|---1| 2------|---3 | / | / | / | / | / ^ | / | / v | / |/ |/ |/ |/ 3----------2 1----------0 */ for ( const auto & corners : box . corners2d_upscale ) { geometry_msgs :: msg :: Point32 g_point ; g_point . x = corners [ 0 ]; g_point . y = corners [ 1 ]; point . point . push_back ( g_point ); } point . type = \"corners\" ; target . points . push_back ( point ); targets . push_back ( target ); } pub_data -> targets = std :: move ( targets ); if ( ! centernet_3d_output -> image_name_ . empty ()) { auto img_bgr = cv :: imread ( centernet_3d_output -> image_name_ ); for ( auto & box : det_result -> boxes ) { Render3DBox ( box , img_bgr ); } std :: string :: size_type iPos = centernet_3d_output -> image_name_ . find_last_of ( '/' ) + 1 ; std :: string filename = centernet_3d_output -> image_name_ . substr ( iPos , centernet_3d_output -> image_name_ . length () - iPos ); cv :: imwrite ( \"./result/\" + filename , img_bgr ); } } clock_gettime ( CLOCK_REALTIME , & time_start ); perf . stamp_end . sec = time_start . tv_sec ; perf . stamp_end . nanosec = time_start . tv_nsec ; pub_data -> perfs . emplace_back ( perf ); msg_publisher_ -> publish ( std :: move ( pub_data )); return 0 ; } int CenterNet3DDetectionNode :: Predict ( std :: vector < std :: shared_ptr < DNNInput >> & inputs , const std :: shared_ptr < std :: vector < hbDNNRoi >> rois , std :: shared_ptr < DnnNodeOutput > dnn_output ) { return Run ( inputs , dnn_output , rois , is_sync_mode_ == 1 ); } void CenterNet3DDetectionNode :: RosImgProcess ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg || ! rclcpp :: ok ()) { return ; } std :: stringstream ss ; ss << \"Recved img encoding: \" << img_msg -> encoding << \", h: \" << img_msg -> height << \", w: \" << img_msg -> width << \", step: \" << img_msg -> step << \", frame_id: \" << img_msg -> header . frame_id << \", stamp: \" << img_msg -> header . stamp . sec << \".\" << img_msg -> header . stamp . nanosec << \", data size: \" << img_msg -> data . size (); RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); auto tp_start = std :: chrono :: system_clock :: now (); // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; if ( \"rgb8\" == img_msg -> encoding ) { #ifdef CV_BRIDGE_PKG_ENABLED auto cv_img = cv_bridge :: cvtColorForDisplay ( cv_bridge :: toCvShare ( img_msg ), \"bgr8\" ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after cvtColorForDisplay cost ms: %d\" , interval ); } pyramid = ImageUtils :: GetNV12Pyramid ( cv_img -> image , model_input_height_ , model_input_width_ ); #else RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Unsupport cv bridge\" ); #endif } else if ( \"nv12\" == img_msg -> encoding ) { pyramid = ImageUtils :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ ); } if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail\" ); return ; } { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after GetNV12Pyramid cost ms: %d\" , interval ); } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Dnn node begin to predict\" ); // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = img_msg -> width ; dnn_output -> src_img_height_ = img_msg -> height ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( img_msg -> header . frame_id ); dnn_output -> image_msg_header_ -> set__stamp ( img_msg -> header . stamp ); dnn_output -> image_name_ = \"\" ; // 3. 开始预测 uint32_t ret = Predict ( inputs , nullptr , dnn_output ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after Predict cost ms: %d\" , interval ); } if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"predict img failed!\" ); } return ; } int CenterNet3DDetectionNode :: PredictByImage ( const std :: string & image ) { // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; // bgr img，支持将图片resize到模型输入size pyramid = ImageUtils :: GetNV12Pyramid ( image , ImageType :: BGR , model_input_height_ , model_input_width_ ); if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail with image: %s\" , image . c_str ()); return -1 ; } // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = 1920 ; dnn_output -> src_img_height_ = 1024 ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( \"test_frame\" ); dnn_output -> image_msg_header_ -> set__stamp ( rclcpp :: Time ()); dnn_output -> image_name_ = image ; // dnn_output->image_msg_header->set__frame_id(std::to_string(img_msg->index)); // dnn_output->image_msg_header->set__stamp(img_msg->time_stamp); // 3. 开始预测 uint32_t ret = Predict ( inputs , nullptr , dnn_output ); if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"predict img failed!\" ); } return ret ; } #ifdef SHARED_MEM_ENABLED void CenterNet3DDetectionNode :: SharedMemImgProcess ( const hbm_img_msgs :: msg :: HbmMsg1080P :: ConstSharedPtr img_msg ) { if ( ! img_msg || ! rclcpp :: ok ()) { return ; } RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"go into shared mem\" ); // dump recved img msg // std::ofstream ofs(\"img_\" + std::to_string(img_msg->index) + \".\" + // std::string(reinterpret_cast<const char*>(img_msg->encoding.data()))); // ofs.write(reinterpret_cast<const char*>(img_msg->data.data()), // img_msg->data_size); auto tp_start = std :: chrono :: system_clock :: now (); // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; if ( \"nv12\" == std :: string ( reinterpret_cast < const char *> ( img_msg -> encoding . data ()))) { pyramid = ImageUtils :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ ); } else { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"share mem unsupported img encoding: %s\" , img_msg -> encoding ); } if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail!\" ); return ; } { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after GetNV12Pyramid cost ms: %d\" , interval ); } // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = img_msg -> width ; dnn_output -> src_img_height_ = img_msg -> height ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( std :: to_string ( img_msg -> index )); dnn_output -> image_msg_header_ -> set__stamp ( img_msg -> time_stamp ); // 3. 开始预测 int ret = Predict ( inputs , nullptr , dnn_output ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after Predict cost ms: %d\" , interval ); } // 4. 处理预测结果，如渲染到图片或者发布预测结果 if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Run predict failed!\" ); } return ; } #endif","text_tokens":["hpp","i","framecount","666","rotation","emplace","conditions","warn","point","logger","getmodel","invalid","reinterpret","ipos","target","express","obtain","inputs","nsec","ifdef","font","in","预测","without","at","settype","支持","score","assist","upscale","smart","outputdescription","height","子类","通过","law","sharedmemimgprocess","time","under","fstream","feed","the","bridge","subscription","/","imageutils","file","see","__","runinfertask","c","last","robotics","realtime","http","gettextsize","implied","declare","that","org","chrono","targets","'","find","ret","para","placeholders","[","6","id","rect","255","img","any","agreed","mat","5",".","version","mkdir","setoutputparser","trash","hersheyfonts","#","end","0","geometry","cost","ai","encoding","index","attribute","8","=","msgs","case","hbmmsg1080p","生成","sharedmem","m","gettime","depth","run","predictbyimage","ok","constsharedptr","fontscale","|","centernet3ddetresult","centernet3doutputparser","count","after","unmatch","p1","size","接口","else","imagetype","filename","----------","int32","make","}","g","input","mono3d","px","输入","dynamic","and","bind","length","nv12","enabled","an","recved","now","perf","apache","dump","处理","void","，","license","src","distributed","centernet3ddetectionnode","as","start","path","outputparser","charging","define","perfs",",","ptr","www","3","x","timespec","image","创建","images","pi","error","tocvshare","detection","mode","detect","string","required","endif","rgb8","puttext","plain","cv","frame","l","对象","task","开始","if","stat","str","dection","on","模型","break","options","with","bbox3d","struct","output","v","hobot","setoutputdescription","failed","debug","centernet","+","clock","draw","node","corners2d","r","fail","reserve","example","n","language","p0","使用","rgb",">","this","^","mem","t","box","substr","2","except","pyramid","bgr8","return","_","pym","width","hbm","---","ofstream","py","success","corners","branch","header","render3dbox","sys","类型","int","2022","1000","boxes","or","3.0","10","dnnnodeoutput","4","parser","传入","duration",")","share","tv","dnnnode","~","paser","f","begin","imread","1","resize","use","fps","parameter","%","of","3d","push","licensed","back","msg","centernet3doutput","milliseconds","interval","渲染","sub","nodeoptions","text","unless","system","init","test","将会","utils","cout","setnodepara","can","nv12pyramidinput","-","create","read","postprocess","you","go","------","static","getnv12pyramidfromnv12img","imwrite","&","perceptiontargets","get","nanosec","7","dnn","desc","pkg","point32","unsupport","a","stamp","y","h","info","z","图片","specific","model","baseline","set","thickness","uniqueptr","type","num","sensor","value",":","3u","shared","data","double","数据类型","name"," ","men","outputs","cast","line","either","s","may","det","copy","数据","put","sec","nullptr","for","easy","rclcpp","warranties","points","w","dnninput","成","manage","结果","的","*","std","128","getdependencies","limitations","kind","applicable","endl","rois","copyright","1920","ss","is","hbmem","include","empty","auto","topic","horizon","step","或者","\\","write","getoutputcount","getnv12pyramid","d","centernet3dassistparser","new","slipper",";","unsupported","!","move","char","<","basis","governing","bgr","(","uint32","hershey","]","sync","const","class","memory","into","attributes","1024","base","label","using","ros","为","publisher","hbdnnroi","到","map","permissions","predict","not","subscriptions","writing","out","software","ms","result","switch","ofs","tp","{","unistd","indoor","pub","vector","stringstream","rosimgprocess","发布","by","++","licenses","将","\"","cvtcolorfordisplay","to","如","2.0","pointer","config","compliance","getmodelinputsize","offset","作为","publish","list"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/6.1_SLAM%E5%BB%BA%E5%9B%BE/","text":"SLAM建图 从这一节开始，我们开始尝试将 TogetherROS 与机器人联系起来做一些小项目。 第一节将开始学习 SLAM 技术。SLAM一般指即时定位与地图构建，即时定位与地图构建（Simultaneous Localization and Mapping，简称SLAM） 这个章节，我们将联系ROS2 和 TogetherROS ，使用 ROS2 的 SLAM-Toolbox 作为建图算法，在仿真环境中构建地图。 准备工作 1、安装 SLAM - Toolbox建立软链接 $ sudo apt-get install ros-foxy-slam-toolbox $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 2、搭载仿真环境，此处采用 turtlebot3 仿真环境 $ sudo apt-get install ros-foxy-gazebo-* $ sudo apt install ros-foxy-turtlebot3 $ sudo apt install ros-foxy-turtlebot3-bringup $ sudo apt install ros-foxy-turtlebot3-simulations $ sudo apt install ros-foxy-teleop-twist-keyboard 使用介绍 首先在 PC 端启动仿真环境 $ source /opt/ros/foxy/setup.bash $ export TURTLEBOT3_MODEL = burger $ ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py Attention 第一次加载可能比较慢，原因是正在下载部分需要的插件。 打开后，即可看到如图: 在PC端打开一个新终端： $ source /opt/ros/foxy/setup.bash $ ros2 launch turtlebot3_bringup rviz2.launch.py 此时会打开一个RVIZ2 ，需要添加“map” 如下图： 旭日X3 派运行 SLAM-Toolbox： # 配置TogetherROS环境 $ source /opt/tros/setup.bash #启动SLAM launch文件 $ ros2 launch slam_toolbox online_sync_launch.py 此处有可能会遇到缺少lib文件问题，如果发生的话如下操作： $ sudo vi /etc/ld.so.conf #在其后增加： /usr/local/lib #保存退出： $ sudo ldconfig PC端再打开一个新终端，遥控建图： $ source /opt/ros/foxy/setup.bash $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 效果如图： 建图结果","text_tokens":["后","py","第一节","第一","$","一次","第一次","toolbox","如图","如果","我们","链接","attention","ldconfig","这个","--","so","apt","技术","lib","结果","的","其后","启动","的话","*","保存","新","部分","图","and","、","遇到","配置","较慢","soft","学习","起来","指","这","keyboard","ld","：","usr","turtlebot3","一般","建图","pc","”","simultaneous","，","打开","操作","终端","“","需要","软","即可","退出","是","ros2","此处","etc","foxy","添加","章节","1","联系","simulations","文件","localization","看到","从","slam","环境","一个","export","x3","如下","下载","source","/","即时","local","）","建立","setup","burger","地图","rviz2","项目","比较","定位","sync","开始","-","create","算法","遥控","安装","install","运行","python3","此时","conf","效果","gazebo","ros","可能","发生","map","简称","会","get","做","teleop","缺少","搭载","opt","一些","仿真","介绍","问题","首先","world","在","小","launch","机器","online",".","增加","工作","sudo","tros","准备","比较慢","派","有","机器人","model","link","加载","构建","尝试","和","与","端","#","mapping","将","cd","采用","中","twist","插件","使用","vi",":","正在"," ","=","再","2","bash","原因","一节","旭日","作为","_","bringup","run","。","（","togetherros"],"title":"SLAM地图构建","title_tokens":["构建","slam","地图"]},{"location":"hhp/6.1_SLAM%E5%BB%BA%E5%9B%BE/#slam","text":"从这一节开始，我们开始尝试将 TogetherROS 与机器人联系起来做一些小项目。 第一节将开始学习 SLAM 技术。SLAM一般指即时定位与地图构建，即时定位与地图构建（Simultaneous Localization and Mapping，简称SLAM） 这个章节，我们将联系ROS2 和 TogetherROS ，使用 ROS2 的 SLAM-Toolbox 作为建图算法，在仿真环境中构建地图。","text_tokens":["建图","机器人","地图","项目","构建","尝试","第一节","第一","定位","和","与","toolbox","我们","开始","-","ros2","这个","算法","技术","mapping","将","章节","中","使用","的","联系","简称","localization","and"," ","做","从","一些","slam","仿真","环境","学习","即时","起来","指","这","一节","simultaneous","在","小","作为","机器","。","（","一般","togetherros","，","）"],"title":"SLAM建图","title_tokens":["建图","slam"]},{"location":"hhp/6.1_SLAM%E5%BB%BA%E5%9B%BE/#_1","text":"1、安装 SLAM - Toolbox建立软链接 $ sudo apt-get install ros-foxy-slam-toolbox $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 2、搭载仿真环境，此处采用 turtlebot3 仿真环境 $ sudo apt-get install ros-foxy-gazebo-* $ sudo apt install ros-foxy-turtlebot3 $ sudo apt install ros-foxy-turtlebot3-bringup $ sudo apt install ros-foxy-turtlebot3-simulations $ sudo apt install ros-foxy-teleop-twist-keyboard","text_tokens":["tros","link","py","软","$","建立","toolbox","链接","-","create","--","apt","安装","install","此处","python3","gazebo","cd","foxy","采用","ros","twist","1","simulations","*","、"," ","get","teleop","搭载","opt","slam","soft","仿真","环境","2","keyboard","_","bringup",".","turtlebot3","/","，","sudo"],"title":"准备工作","title_tokens":["准备","工作"]},{"location":"hhp/6.1_SLAM%E5%BB%BA%E5%9B%BE/#_2","text":"首先在 PC 端启动仿真环境 $ source /opt/ros/foxy/setup.bash $ export TURTLEBOT3_MODEL = burger $ ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py Attention 第一次加载可能比较慢，原因是正在下载部分需要的插件。 打开后，即可看到如图: 在PC端打开一个新终端： $ source /opt/ros/foxy/setup.bash $ ros2 launch turtlebot3_bringup rviz2.launch.py 此时会打开一个RVIZ2 ，需要添加“map” 如下图： 旭日X3 派运行 SLAM-Toolbox： # 配置TogetherROS环境 $ source /opt/tros/setup.bash #启动SLAM launch文件 $ ros2 launch slam_toolbox online_sync_launch.py 此处有可能会遇到缺少lib文件问题，如果发生的话如下操作： $ sudo vi /etc/ld.so.conf #在其后增加： /usr/local/lib #保存退出： $ sudo ldconfig PC端再打开一个新终端，遥控建图： $ source /opt/ros/foxy/setup.bash $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 效果如图：","text_tokens":["后","py","$","第一","一次","第一次","如图","toolbox","如果","ldconfig","attention","so","lib","的","其后","启动","的话","保存","新","部分","图","遇到","配置","较慢","keyboard","ld","：","usr","”","turtlebot3","操作","pc","建图","，","打开","终端","“","需要","即可","退出","是","ros2","此处","etc","foxy","添加","文件","看到","环境","slam","一个","export","x3","如下","下载","source","/","local","burger","setup","rviz2","比较","sync","-","遥控","运行","此时","conf","效果","gazebo","ros","可能","发生","map","会","teleop","缺少","opt","仿真","问题","首先","world","在","launch","online",".","增加","比较慢","tros","sudo","派","有","model","加载","#","端","vi","twist","插件",":","正在"," ","=","再","bash","原因","旭日","_","bringup","run","。","togetherros"],"title":"使用介绍","title_tokens":["介绍","使用"]},{"location":"hhp/6.1_SLAM%E5%BB%BA%E5%9B%BE/#_3","text":"","text_tokens":[],"title":"建图结果","title_tokens":["建图","结果"]},{"location":"hhp/6.2_%E5%B0%8F%E8%BD%A6%E4%BA%BA%E4%BD%93%E8%B7%9F%E9%9A%8F/","text":"小车人体跟随 之前我们介绍了如何利用 X3派 进行人体检测和跟踪，那么加入我们想要将体检测和跟踪和真实机器人做一个结合会是一种什么样的体验呢？ 这里，我们将通过X3派检测到的人体目标进行一个移动跟踪，最终的一个效果就是当装配着X3派和摄像头的小车面前出现一个人物时，小车将会跟随着人体一起移动。接下来，让我们一起来体验一下吧。 编程开发方法 先来看整个程序的流程图： 这里，我们将通过 Gazebo 仿真环境下的虚拟小车作为真实机器，首先，让我们来做一些准备工作。 在PC端搭建一个仿真环境： $ sudo apt-get install ros-foxy-gazebo-* $ sudo apt install ros-foxy-turtlebot3 $ sudo apt install ros-foxy-turtlebot3-simulations 使用介绍 首先在 PC 端启动仿真环境 $ source /opt/ros/foxy/setup.bash $ export TURTLEBOT3_MODEL = burger $ ros2 launch turtlebot3_gazebo empty_world.launch.py Attention 第一次加载可能比较慢，原因是正在下载部分需要的插件。 如下图所见： 旭日X3 派运行 如下指令： # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从TogetherROS的安装路径中拷贝出运行示例需要的配置文件。 $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . #启动launch文件 $ ros2 launch body_tracking hobot_body_tracking_without_gesture.launch.py 接下来，只需要你站在摄像头面前左右前后移动，就会发现仿真环境下的小车也会跟着你移动。 再来看终端输出的信息： $ ros2 topic echo /cmd_vel linear: x: 0.5 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: -0.5 --- linear: x: 0.5 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: -0.5 --- 跟随效果","text_tokens":["站","---","检测","py","$","第一","一次","第一次","我们","attention","目标","apt","一","lib","路径","像头","的","启动","*","真实","部分","想要","最终","配置","较慢","进行","装配","一下","将体","起来","那么","：","移动","跟着","0.0","就是","输出","without","turtlebot3","虚拟","pc","，","流程","人物","终端","empty","示例","需要","来看","什么","小车","人体","这里","也","topic","呢","左右","是","开发方法","ros2","编程","foxy","angular","接下","出","simulations","文件","通过","接下来","方法","tracking","x","跟踪","从","发现","环境","跟随","一个","x3","export","搭建","配置文件","利用","来","如下","时","下载","detection","source","随着","程序","跟","/","先","setup","burger","所见","比较","将会","vel","cp","-","install","运行","安装","摄像","前后","流程图","效果","什么样","gazebo","让","ros","吧","可能","到","信息","会","get","做","图所见","下来","一些","opt","仿真","介绍","下","当","首先","world","如何","hobot","在","了","体验","整个","launch","body","y","机器",".","结合","gesture","开发","工作","sudo","之前","准备","比较慢","派","tros","机器人","0.5","model","z","加载","？","一起","和","#","摄像头","端","一种","r","出现","面前","拷贝","将","中","插件","使用","就",":","正在","mono2d","你","cmd"," ","=","再","linear","只","bash","原因","config","旭日","作为","加入","_","echo","。","指令","togetherros","着"],"title":"小车人体跟随","title_tokens":["跟随","小车","人体"]},{"location":"hhp/6.2_%E5%B0%8F%E8%BD%A6%E4%BA%BA%E4%BD%93%E8%B7%9F%E9%9A%8F/#_1","text":"之前我们介绍了如何利用 X3派 进行人体检测和跟踪，那么加入我们想要将体检测和跟踪和真实机器人做一个结合会是一种什么样的体验呢？ 这里，我们将通过X3派检测到的人体目标进行一个移动跟踪，最终的一个效果就是当装配着X3派和摄像头的小车面前出现一个人物时，小车将会跟随着人体一起移动。接下来，让我们一起来体验一下吧。","text_tokens":["之前","人物","派","机器人","检测","？","将会","一起","什么","这里","人体","和","摄像头","小车","呢","我们","一种","是","目标","一","出现","摄像","面前","效果","什么样","将","像头","让","吧","接下","的","到","真实","想要","通过","接下来","最终"," ","会","做","跟踪","下来","进行","介绍","一个","装配","x3","一下","将体","起来","当","如何","利用","那么","了","体验","时","加入","移动","机器","就是","随着","。","跟","结合","着","，"],"title":"小车人体跟随","title_tokens":["跟随","小车","人体"]},{"location":"hhp/6.2_%E5%B0%8F%E8%BD%A6%E4%BA%BA%E4%BD%93%E8%B7%9F%E9%9A%8F/#_2","text":"先来看整个程序的流程图： 这里，我们将通过 Gazebo 仿真环境下的虚拟小车作为真实机器，首先，让我们来做一些准备工作。 在PC端搭建一个仿真环境： $ sudo apt-get install ros-foxy-gazebo-* $ sudo apt install ros-foxy-turtlebot3 $ sudo apt install ros-foxy-turtlebot3-simulations","text_tokens":["流程","先","准备","turtlebot3","来看","$","这里","小车","端","我们","-","apt","install","流程图","gazebo","将","foxy","让","ros","的","simulations","*","真实","通过"," ","get","做","一些","环境","仿真","一个","下","首先","搭建","在","整个","来","：","作为","机器","。","程序","虚拟","pc","，","工作","sudo"],"title":"编程开发方法","title_tokens":["编程","方法","开发方法","开发"]},{"location":"hhp/6.2_%E5%B0%8F%E8%BD%A6%E4%BA%BA%E4%BD%93%E8%B7%9F%E9%9A%8F/#_3","text":"首先在 PC 端启动仿真环境 $ source /opt/ros/foxy/setup.bash $ export TURTLEBOT3_MODEL = burger $ ros2 launch turtlebot3_gazebo empty_world.launch.py Attention 第一次加载可能比较慢，原因是正在下载部分需要的插件。 如下图所见： 旭日X3 派运行 如下指令： # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从TogetherROS的安装路径中拷贝出运行示例需要的配置文件。 $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . #启动launch文件 $ ros2 launch body_tracking hobot_body_tracking_without_gesture.launch.py 接下来，只需要你站在摄像头面前左右前后移动，就会发现仿真环境下的小车也会跟着你移动。 再来看终端输出的信息： $ ros2 topic echo /cmd_vel linear: x: 0.5 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: -0.5 --- linear: x: 0.5 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: -0.5 ---","text_tokens":["站","---","py","$","第一","一次","第一次","attention","lib","路径","像头","的","启动","部分","配置","较慢","：","移动","跟着","0.0","输出","without","turtlebot3","pc","，","终端","empty","示例","需要","来看","小车","topic","也","左右","是","ros2","foxy","angular","接下","出","文件","tracking","接下来","x","从","发现","环境","export","x3","配置文件","如下","下载","detection","source","/","burger","setup","所见","比较","vel","cp","-","运行","安装","摄像","前后","gazebo","ros","可能","信息","会","图所见","opt","下来","仿真","下","首先","world","hobot","在","launch","body","y",".","gesture","比较慢","tros","派","z","0.5","model","加载","#","端","摄像头","r","面前","拷贝","中","插件","就",":","正在","mono2d","你","cmd"," ","=","再","linear","只","bash","原因","config","旭日","echo","_","。","指令","togetherros"],"title":"使用介绍","title_tokens":["介绍","使用"]},{"location":"hhp/6.2_%E5%B0%8F%E8%BD%A6%E4%BA%BA%E4%BD%93%E8%B7%9F%E9%9A%8F/#_4","text":"","text_tokens":[],"title":"跟随效果","title_tokens":["跟随","效果"]}]}