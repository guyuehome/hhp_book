{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。 本教程将会以旭日X3派为平台，介绍地平线机器人开发平台的使用原理与方法。 教程链接汇总 旭日X3派开发板使用手册： https://developer.horizon.ai/api/v1/fileData/documents_pi/index.html 机器人开发平台使用手册： https://developer.horizon.ai/api/v1/fileData/TogetherROS/index.html 视频课程： https://class.guyuehome.com/all/10284445/19617453 图文教程： https://hhp.guyuehome.com/ 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/92 博客泡圈： https://www.guyuehome.com/","text_tokens":["硬件","非常复杂","算法","10284445","hhp","传感器","class","动作","带来","正式","https","ai","多","com","6","视频","使用","手册","大脑","计算","课程","各样","_","以","为","非常","问答","使用手册","主控","链接","机器人","all","博客","filedata","各种各样","、","api","x3","派","19617453","驱动","等","规控","旭日","将会","。","/","操作系统","机器","地平","介绍","index","www","，","感知","软件","pi","togetherros","全新","html","id","复杂",":","等等","月","是","方法","一个","汇总","地平线","系统","感器","horizon","给","推出","bubble","的"," ","教程",".","执行","引言","帮助","工具","传感","原理","年","电机","部分","guyuehome","行业","层面","平台","开发","各种","本","circledetail","数据","：","在","更","documents","包括","环境","泡圈","与","2022","作为","开发板","一代","图文","程式","92","信息","进行","v1","developer","操作"],"title":"**引言**","title_tokens":["*","引言"]},{"location":"#_1","text":"机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。 本教程将会以旭日X3派为平台，介绍地平线机器人开发平台的使用原理与方法。","text_tokens":["硬件","非常复杂","算法","传感器","动作","带来","正式","多","6","使用","大脑","计算","各样","以","为","非常","主控","机器人","各种各样","、","x3","派","驱动","等","规控","旭日","将会","。","操作系统","机器","地平","介绍","，","感知","软件","全新","复杂","等等","月","是","方法","一个","地平线","系统","感器","给","推出","的"," ","教程","执行","帮助","工具","传感","原理","年","电机","部分","行业","层面","平台","开发","各种","本","数据","：","在","更","包括","环境","与","2022","作为","一代","程式","信息","进行","操作"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"旭日X3派开发板使用手册： https://developer.horizon.ai/api/v1/fileData/documents_pi/index.html 机器人开发平台使用手册： https://developer.horizon.ai/api/v1/fileData/TogetherROS/index.html 视频课程： https://class.guyuehome.com/all/10284445/19617453 图文教程： https://hhp.guyuehome.com/ 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/92 博客泡圈： https://www.guyuehome.com/","text_tokens":["id",":","问答","guyuehome","使用手册","10284445","hhp","class","ai","https","平台","机器人","com","开发","all","视频","filedata","使用","circledetail","博客","：","手册","api","x3","派","19617453","documents","horizon","旭日","课程","泡圈","/","开发板","_","机器","图文","bubble","92"," ","index","教程","www","v1","developer",".","pi","togetherros","html"],"title":"教程链接汇总","title_tokens":["链接","汇总","教程"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["华语","许可","ros","不得","限于","培养","复制","销售","法律","武汉","线上","ai","仅限","com","通过","视频","和","使用","传播","究其","社区","课程","合作","提供","如需","生态","及","超过","声明","为","有限","单位","交流学习","畅销","《","面向","任何","图书","科技","+","明者","或","授权","其它","机器人","请","一体","、","）","内容","小时","企业","累积","等","个人","课件","拥有","法律责任","。","学习","机器","用户","居","2011","知名","网站","www","创建","有权","，","校企","依法","建立","高校","对本","高质","至今","公司","创新","是","违反","修改","不","上述","精锋","均","责任","版权","模式","微控","镜像","未经","地区","学习者","致力","被","赋能","未来","古月","万人","源码","面向未来","》","的","捆绑"," ","人才培养",".","但","优质","集","实践","@","120","产品","所有","追究其","作品","年","声明者","guyuehome","努力","质量","人才","书面","有限公司","上","平台","高质量","众多","将","开发","本","追究","学","万字","联系","交流","出版","包括","与","brand","致力于","抄录","（","合法","进行","构建","1000"],"title":"关于我们","title_tokens":["关于","我们"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["华语","ros","培养","线上","ai","com","通过","视频","社区","课程","合作","提供","生态","及","超过","为","交流学习","畅销","《","面向","图书","+","机器人","一体","、","）","内容","小时","企业","累积","等","。","学习","机器","用户","居","2011","知名","www","创建","，","校企","建立","高校","高质","至今","创新","是","模式","地区","学习者","致力","赋能","未来","古月","万人","面向未来","》","的"," ","人才培养",".","优质","集","实践","120","年","guyuehome","努力","质量","人才","平台","众多","高质量","开发","万字","交流","出版","与","致力于","（","构建","1000"],"title":"学机器人，上古月居","title_tokens":["机器","居","上","机器人","古月","，","学"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["许可","不得","限于","复制","销售","法律","武汉","仅限","com","视频","和","使用","传播","究其","课程","如需","声明","有限","为","单位","任何","科技","明者","或","授权","其它","请","、","等","个人","课件","拥有","法律责任","。","学习","用户","居","网站","有权","，","依法","对本","公司","违反","修改","不","上述","精锋","均","责任","版权","微控","镜像","未经","被","古月","源码","的","捆绑"," ",".","但","@","产品","所有","追究其","作品","声明者","guyuehome","书面","有限公司","追究","将","本","联系","包括","与","brand","抄录","合法","进行"],"title":"版权声明","title_tokens":["声明","版权"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/","text":"智能机器人发展与现状 智能机器人正在改变着我们的生活，想象这样一种场景。 也许不知不觉的某一天，我们就会发现类似这样的机器人会真实出现在生活当中。 科技的发展日新月异，智能机器人也突飞猛进，伴随机器人发展而生的机器人操作系统，也是机器人重要的发展动力之一。 智能机器人举例 提到智能机器人，大家脑海里会映射出什么样的情景呢？ 是不是会有很多科幻电影中变形金刚、大白机器人、星球大战等场景呢？ 智能机器人这个概念，只是一个科幻词汇么？当然不是的，其实在我们身边，已经有越来越多智能机器人出现，我们来看看他们都在哪里？ 扫地机器人 先来看一个大家最熟悉的一个类型——扫地机器人。现在的扫地机器人，除了可以完成扫地、拖地这样一些基本功能之外，还搭载了激光雷达、相机、红外等十几种传感器。 一个全新的扫地机器人虽然是第一次来到你家，但是它可能用到 5 分到 10 分钟时间，很快就可以通过它的传感器对你的家庭环境了如指掌，也就是把实际的家庭环境做成了一张地图，这样他就会知道哪里是卧室，哪里是餐厅，哪里是厨房，不同的区域用多大的风力，用多大的水量来去清扫最为合适，它都会智能化地来做判断。 除此之外，它还得知道怎么样去躲避各种障碍物，比如说家里面的宠物、地上摆放的插线板，各种各样的杂物等等。 所以看似非常小的一个扫地机器人，其实已经是一个很智能化的家用设备了，正在潜移默化地改变着我们的生活。 自动化仓储 第二个案例，虽然大部分人在生活中不会直接接触，但却和每一个人息息相关，那就是自动化仓储。 这是京东某个实际部署运营的一套自动化的仓库，在里面可以看到各种各样的机器人，比如工业机械臂、移动机器人等等，这套立体仓库当中大量的货架也是自动化的，这就是一个典型的机器人应用场景。 之前有一个关于京东的新闻报道，里边讲到，从我们下单那刻开始，到商品分拣出来放到快递员手上，只需要20分钟。比如我们要买个手机，下单付款，20分钟之后，这个手机已经从这么庞大的仓库中顺利找到，并且完成了包装、打标、分配等一系列工序。这样，我们在绝大部分城市，基本都可以体验到下单之后，当天或者隔天收货的体验，为什么它可以做到如此高效，就是因为背后这一套由机器人组成的自动化系统，借助大数据的分析，甚至可以做到在你下单之前，平台就知道你将要买什么东西。比如说你会按照一个月的频率买米买面，那平台就可以预测到上个月你买的米应该快吃完了，然后就会在距离你家最近的一个仓库里面备货。 当你下单之后，这袋米可能半个小时送到你手上了。 自动驾驶 第三个案例，那就是当今最为热门的技术之一——自动驾驶。 自动驾驶汽车也是典型的移动机器人系统，为了保证绝对安全的驾驶过程，汽车上装配了非常多的传感器，以及极为复杂的控制算法。 视频中我们看到的是华为自动驾驶系统在实际路面上测试的效果，自动驾驶汽车通过多个相机、雷达、超声波，实时构建周围环境的三维信息，不仅可以动态识别路面上的行人车辆、车道线、交通指示灯等，还可以安全完成超车、会车、跟车、转向等重要功能，同时对突发状况也可以及时处理，比如躲避突然出现的车辆、礼让行人等，最终自动行驶入库，把我们安全顺利的送到目的地。 虽然自动驾驶相关的技术和法律法规还在不断完善中，但是相信有一天我们每个人都可以体验自动驾驶的乐趣，而且这一天不会太远。 智能机器人发展 机器人的发展横跨几十年，经历了三个重要时期。 2000年前，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 2015年之后，智能机器人市场迅速爆发，到2025年，国内人工智能市场有望达到1164亿元，而作为人工智能重要载体的机器人，市场更会达到1463亿元。 行业的快速发展，必将带动大量专业人才的需求，人才缺口也将逐年扩大，2025年，预计国内机器人行业的人才缺口将超过450万，人工智能方面的缺口更会达到1000万。 面对如此严峻的人才需求，国内各高校从2016年起，陆续开设机器人和人工智能专业，为人才的供给提供有力保障。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角。 机器人操作系统 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是机器人操作系统。 ROS的诞生 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣、做饭、收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法：既然自己做不到，那为什么不联合所有人一起干呢？如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在这几个图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面，却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS怀揣“提高机器人软件复用率”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 ROS的特点 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。","text_tokens":["斯坦福大学","吃","不到","明智","新鲜","这款","研究","越来","据库","索引","业生","第二","有力","所以","特性","出现","记录","拖地","可能","障碍物","乐意","一切","运营","最","上市","立体仓库","缺少","万左右","已经","时至今日","增长速度","横跨","功能","personal","围绕","简单","一天","团队","收拾","促使","仓储","报道","最终","自己","问题","做法","熟悉","因为","开源","生态系统","维基百科","都","应用软件","测试","生态系","以","判断","活跃","统统","乐趣","变形","正在","了如指掌","维基百","更会","清晰","标准","开设","之外","除了","你","实时","深知","案例","频繁","收货","机器人","分拣","摆放","要","？","隔天","、","为什么","地域","快速","下单","也许","等","驱动","发布","如何","速度","生产","新闻","手上","超车","半个","开发者","出来","其他","劳动力","却","，","缩短","电影","处理","迅速","这是","地图","就","高校","当时","ros1","整理","物体","完","这样","出","自动","商品","太","没有","减速","已有","进步","剪头发","访问","在生活中","不","论坛","也","经历","杂物","效率","只要","对于","得以","给出","达到","当天","被","思考","视觉","感器","买面","动态","需求","怀揣","后","基本功能","局部","三维","星球","因","虽然","答案","电路","部件","的","或者","动力","备货","变形金刚","肩膀","教程","站","法规","此","地","工序","最高","了","工业生产","福大","充足","比如","放到","动机","曲线","逐年","基于","头发","传感","独立","相关","大家","复用","突发状况","四足","向前","完全","身边","潜移","同时","将","十年","台球","开发","各种","华为","一张","地上","类似","日新月异","就是","小","尽量","控制","包","这么","还","推进","近几年","应该","快递","中","环境","2000","作为","周围","资金","精致","上个月","么","制造","拉开","命令","5","10","迅猛","只是","移动机器人","；","很","复合","更加","1000","推动","结晶","四项","许可证","许可","车","不知","说明","最近","提高","从中","基本上","传感器","木头","三个","来看","相机","针对","苹果","浏览","排名","ai","扩大","用多大","必将","他们","通过","度","视频","不同","和","线板","windows","初期","体系","算是","联合","它","计算","起","课程","入库","二个","缺口","驾驶","大部","亿元","提供","肯定","行人","一大","多项","可以","2025","超过","同一","发展","率","闻报","为","大战","为了","分","什么","红外","水下","光靠","可为","基本功","不断丰富","类型","实际","状况","这个","找到","然后","跑","讨论","先","买米","狗","才","以叠","向前走","轮子","什么样","智能","各种各样","热门","某","人才需求","高","多万","关于","这","40","完成","词汇","臂","由","转向","逐渐","友好","而生","。","实现","操作系统","广泛","以上","这袋","突然","机器","并且","做到","太远","别人","通信","仿生","有没有","index","怎么","伴随","玩耍","不知不觉","媒体","packages","及时处理","两个","由示","那","呢","复杂","当然","用","公司","等等","时候","2","提到","采购","有望","科幻","嵌入式","预计","之前","一个","尝试","核心","突飞","线","各","甚至","对","按照","典型","频率","1463","一种","一系","之后","风力","会","自动化","特点","自身","概念","增长","他","源码","讲","陪","哪里","绝大","工厂","轰动","不要","浪潮","清扫","但","总体","超声","活动","法律法规","家庭","帮助","礼让","维基","一大步","诞生","第一","部分","市场","几年","将要","人才","层面","面对","雷达","伺服","数据库","c","全人类","得到","普遍","同样","此时","如此","每","：","上边","京东","一次","做出","无论是","指示灯","丰富","立体","与","而言","体验","厨房","情景","智能化","事情","柔性","载体","各项","把","robot","员","下来","青年","次数","有","跟车","时间","最为","多个","主角","多媒体系统","有志","斯坦福","元素","改变","这里","answers","现状","模块","正式","左右","多","”","怎么样","只能","家用","使用","上图","基本","不会","时期","金刚","其中","着","只","有人","当中","大有可为","突发","集合","十几种","各样","说干就干","重新","数字","生态","革命","东西","绝对","无聊","强悍","映射","年前","框架","严峻","电气","全人","宽松","包装","米","450","任何","专业人才","干","代表","科技","主要","去","教器","效果","部署","零","付款","餐厅","查看","状","熨烫","成为","扫地","小时","全球","圈","人数","劳动","距离","汽车","做成","代","技术","拉开序幕","打","一家","图中","律法","用户","叠","棒","开始","网站","本身","活跃度","正如","分钟","激光雷达","安全","路面","发现","第三个","全新","一群","身影","分享","几种","呈","至今","月","是","顺利","第二个","总称","“","—","商业","当","要求","发状","是不是","研发","不多","移动","周围环境","手机","1164","discourse","高效","科幻电影","服务","不仅","井喷","送餐","下载","合适","供给","人工智能","整合","给","无论","想法","大白","及时","250","一套"," ","之一","新",".","一步","到","指示","用于","序幕","潜移默化","毛巾","现在","无疑","2016","产品","得","所有","计算机","工具","上个","低","巨人","第一次","送到","爆发","助推","背后","随着","linux","万","80","这一波","分析","而","数据","造","控制器","不想","沉淀","最后","俗称","更","识别","国家","大部分","20","自主","做","声波","操控","保障","这套","繁荣","张图","既然","信息","热点","浏览量","货架","机械","几十","除此之外","衣服","构建","完善","搭载","涉及","支持","百科","新鲜事","举例","ros","一款","几个","长远","伺服电机","来讲","预测","每个","今日","算法","分配","不断完善","新月","之内","法律","动作","做饭","比如说","通常","ros2","庞大","接触","越来越","陆续","某个","2015","社区","里会","其实","十几","来","家","远","100","新闻报道","买","引擎","新增","关注","pr2","资源","我们","趋势","人类","车辆","这些","上去","一系列","方式","访问量","15","很快","宠物","机制","性能","专业","息息相关","大","买个","总而言之","有限","同理","非常","所有人","加","设备","问答","起来","外观","减速机","水量","国内","发表","突飞猛进","a","你家","个","软件系统","创意","组成","领域","程度","知道","但是","参考","装配","统计","快","相信","那刻","打标","一个月","智慧","里面","时代","借助","个人","提出","家庭环境","不过","释放","行驶","躲避","真的","车道","b","目的地","多媒体","四大","插","情况","仓库","软件","工业","感知","方面","前夜","根据","交通","一起","里边","驱动器","为例","日常","激光","页面","生活","真实","如果","聊天","人","过程","模块化","需要","从","款","看到","wiki","后期","系列","存储","看看","保证","看似","地来","卧室","超声波","默化","目标","依然","重要","学术","直接","25","几十年","系统","控制算法","全球化","应用","检测","容易","当今","算机","嵌入","开发工具","万人","不断","2007","人工","洗衣","猛进","不是","原型","大步","商业化","设计","区域","带动","成果","脑海","实验室","一些","条","第三","大学","并","org","绝大部分","最佳","实验","执行","障碍","想象","除此","年","电机","零部件","于","用到","行业","具备","agv","平台","上","以及","目的","而且","场景","极为","在","人形","还是","150","之","跨平台","不觉","城市","回答","大量","星球大战","来到","差不多","很多","操作","更为"],"title":"智能机器人发展与现状","title_tokens":["机器","现状","机器人","与","发展","智能"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_1","text":"智能机器人正在改变着我们的生活，想象这样一种场景。 也许不知不觉的某一天，我们就会发现类似这样的机器人会真实出现在生活当中。 科技的发展日新月异，智能机器人也突飞猛进，伴随机器人发展而生的机器人操作系统，也是机器人重要的发展动力之一。","text_tokens":["就","不知","想象","生活","真实","这样","正在","是","突飞猛进","改变","科技","出现","新月","也","发展","机器人","突飞","智能","重要","某","类似","日新月异","场景","一种","在","着","一天","系统","也许","当中","会","而生","。","我们","操作系统","机器","不觉","的","猛进","动力"," ","之一","伴随","，","操作","不知不觉","发现"],"title":"智能机器人发展与现状","title_tokens":["机器","现状","机器人","与","发展","智能"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_2","text":"提到智能机器人，大家脑海里会映射出什么样的情景呢？ 是不是会有很多科幻电影中变形金刚、大白机器人、星球大战等场景呢？ 智能机器人这个概念，只是一个科幻词汇么？当然不是的，其实在我们身边，已经有越来越多智能机器人出现，我们来看看他们都在哪里？","text_tokens":["大战","呢","什么","有","当然","越来","提到","变形","出","大家","科幻","出现","这个","看看","是不是","身边","一个","多","机器人","他们","越来越","什么样","已经","？","智能","、","场景","在","金刚","科幻电影","里会","其实","来","等","词汇","会","中","概念","我们","都","星球","机器","哪里","的","不是","情景","么","大白","变形金刚","星球大战"," ","脑海","只是","，","很多","映射","电影"],"title":"智能机器人举例","title_tokens":["机器","机器人","举例","智能"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_3","text":"先来看一个大家最熟悉的一个类型——扫地机器人。现在的扫地机器人，除了可以完成扫地、拖地这样一些基本功能之外，还搭载了激光雷达、相机、红外等十几种传感器。 一个全新的扫地机器人虽然是第一次来到你家，但是它可能用到 5 分到 10 分钟时间，很快就可以通过它的传感器对你的家庭环境了如指掌，也就是把实际的家庭环境做成了一张地图，这样他就会知道哪里是卧室，哪里是餐厅，哪里是厨房，不同的区域用多大的风力，用多大的水量来去清扫最为合适，它都会智能化地来做判断。 除此之外，它还得知道怎么样去躲避各种障碍物，比如说家里面的宠物、地上摆放的插线板，各种各样的杂物等等。 所以看似非常小的一个扫地机器人，其实已经是一个很智能化的家用设备了，正在潜移默化地改变着我们的生活。","text_tokens":["时间","最为","所以","传感器","改变","来看","相机","拖地","可能","障碍物","比如说","最","用多大","通过","已经","不同","怎么样","家用","功能","基本","线板","十几","家","其实","来","着","它","十几种","我们","各样","很快","宠物","熟悉","可以","都","非常","分","判断","设备","红外","了如指掌","正在","基本功","水量","类型","实际","去","之外","你家","除了","先","你","知道","餐厅","机器人","但是","摆放","智能","、","各种各样","扫地","完成","等","里面","做成","。","家庭环境","机器","躲避","插","分钟","激光雷达","怎么","，","全新","地图","就","激光","生活","几种","等等","这样","是","—","也","一个","杂物","看似","地来","卧室","默化","对","感器","风力","合适","会","基本功能","他","虽然","哪里","的","区域"," ","一些","清扫","地","了","到","潜移默化","家庭","现在","障碍","比如","除此","得","传感","第一","大家","第一次","用到","潜移","雷达","各种","一张","地上","就是","小","一次","还","环境","做","厨房","5","10","智能化","来到","除此之外","把","很","搭载"],"title":"扫地机器人","title_tokens":["扫地","机器人","机器"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_4","text":"第二个案例，虽然大部分人在生活中不会直接接触，但却和每一个人息息相关，那就是自动化仓储。 这是京东某个实际部署运营的一套自动化的仓库，在里面可以看到各种各样的机器人，比如工业机械臂、移动机器人等等，这套立体仓库当中大量的货架也是自动化的，这就是一个典型的机器人应用场景。 之前有一个关于京东的新闻报道，里边讲到，从我们下单那刻开始，到商品分拣出来放到快递员手上，只需要20分钟。比如我们要买个手机，下单付款，20分钟之后，这个手机已经从这么庞大的仓库中顺利找到，并且完成了包装、打标、分配等一系列工序。这样，我们在绝大部分城市，基本都可以体验到下单之后，当天或者隔天收货的体验，为什么它可以做到如此高效，就是因为背后这一套由机器人组成的自动化系统，借助大数据的分析，甚至可以做到在你下单之前，平台就知道你将要买什么东西。比如说你会按照一个月的频率买米买面，那平台就可以预测到上个月你买的米应该快吃完了，然后就会在距离你家最近的一个仓库里面备货。 当你下单之后，这袋米可能半个小时送到你手上了。","text_tokens":["吃","有","最近","预测","第二","分配","可能","比如说","运营","立体仓库","庞大","接触","已经","和","某个","基本","不会","只","当中","它","新闻报道","买","二个","我们","大部","仓储","各样","报道","一系列","东西","因为","可以","息息相关","大","买个","都","闻报","什么","包装","米","实际","这个","找到","然后","部署","你家","付款","组成","你","买米","案例","知道","收货","机器人","分拣","要","隔天","为什么","各种各样","、","快","小时","那刻","打标","关于","这","一个月","下单","里面","臂","完成","等","由","借助","距离","。","新闻","手上","这袋","机器","并且","半个","做到","出来","开始","却","分钟","仓库","，","工业","里边","这是","就","那","生活","人","等等","完","需要","这样","自动","是","从","商品","顺利","第二个","看到","在生活中","系列","之前","当","也","一个","移动","手机","甚至","按照","典型","直接","当天","频率","高效","一系","之后","系统","买面","应用","会","自动化","讲","虽然","的","绝大","或者","备货","一套"," ","但","工序","了","到","绝大部分","比如","放到","动机","上个","相关","部分","送到","背后","将要","平台","分析","各种","数据","如此","每","就是","京东","场景","在","这么","应该","快递","立体","大部分","20","中","体验","这套","城市","上个月","大量","机械","货架","移动机器人","员"],"title":"自动化仓储","title_tokens":["自动化","仓储","自动"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_5","text":"第三个案例，那就是当今最为热门的技术之一——自动驾驶。 自动驾驶汽车也是典型的移动机器人系统，为了保证绝对安全的驾驶过程，汽车上装配了非常多的传感器，以及极为复杂的控制算法。 视频中我们看到的是华为自动驾驶系统在实际路面上测试的效果，自动驾驶汽车通过多个相机、雷达、超声波，实时构建周围环境的三维信息，不仅可以动态识别路面上的行人车辆、车道线、交通指示灯等，还可以安全完成超车、会车、跟车、转向等重要功能，同时对突发状况也可以及时处理，比如躲避突然出现的车辆、礼让行人等，最终自动行驶入库，把我们安全顺利的送到目的地。 虽然自动驾驶相关的技术和法律法规还在不断完善中，但是相信有一天我们每个人都可以体验自动驾驶的乐趣，而且这一天不会太远。","text_tokens":["车","有","跟车","最为","多个","完善","每个","算法","传感器","不断完善","三个","出现","相机","法律","多","通过","视频","和","功能","不会","一天","突发","入库","我们","驾驶","车辆","行人","最终","绝对","可以","都","测试","为了","非常","乐趣","实际","状况","效果","实时","案例","机器人","但是","热门","装配","、","相信","这","完成","等","汽车","转向","技术","。","超车","突然","机器","律法","行驶","躲避","太远","车道","目的地","，","安全","路面","第三个","交通","处理","及时处理","那","复杂","人","过程","自动","是","顺利","看到","—","发状","也","保证","超声波","线","移动","周围环境","重要","对","典型","不仅","系统","感器","控制算法","动态","当今","会","三维","不断","虽然","的","及时"," ","之一","法规","第三","了","超声","指示","法律法规","比如","礼让","动机","传感","相关","送到","突发状况","雷达","同时","上","以及","华为","目的","就是","而且","极为","控制","在","还","识别","指示灯","中","环境","体验","声波","周围","信息","移动机器人","把","构建"],"title":"自动驾驶","title_tokens":["驾驶","自动"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_6","text":"机器人的发展横跨几十年，经历了三个重要时期。 2000年前，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 2015年之后，智能机器人市场迅速爆发，到2025年，国内人工智能市场有望达到1164亿元，而作为人工智能重要载体的机器人，市场更会达到1463亿元。 行业的快速发展，必将带动大量专业人才的需求，人才缺口也将逐年扩大，2025年，预计国内机器人行业的人才缺口将超过450万，人工智能方面的缺口更会达到1000万。 面对如此严峻的人才需求，国内各高校从2016年起，陆续开设机器人和人工智能专业，为人才的供给提供有力保障。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角。","text_tokens":["伺服电机","最为","主角","业生","有力","传感器","三个","出现","动作","ai","正式","扩大","多","缺少","必将","陆续","和","只能","横跨","时期","2015","计算","起","课程","关注","缺口","我们","驾驶","人类","亿元","提供","数字","专业","大","2025","超过","年前","发展","有限","为","严峻","电气","设备","减速机","450","国内","不断丰富","类型","专业人才","更会","主要","教器","开设","狗","机器人","但是","状","智能","、","成为","高","人才需求","快速","劳动","这","驱动","等","时代","逐渐","汽车","技术","生产","拉开序幕","。","提出","操作系统","机器","释放","不过","劳动力","仿生","，","工业","感知","方面","前夜","软件","迅速","驱动器","由示","这是","高校","呈","过程","自动","太","减速","是","没有","有望","从","预计","要求","也","经历","各","依然","重要","对","按照","达到","1164","1463","思考","几十年","服务","之后","视觉","感器","井喷","系统","应用","检测","送餐","需求","算机","供给","后","局部","人工智能","不断","人工","的","动力","工厂","带动"," ","之一","并","了","到","最佳","工业生产","序幕","执行","家庭","帮助","2016","逐年","计算机","传感","年","电机","于","市场","四足","爆发","行业","完全","随着","人才","层面","面对","万","伺服","agv","将","十年","开发","而","此时","如此","就是","控制器","控制","俗称","更","丰富","环境","2000","而言","自主","作为","保障","操控","大量","热点","拉开","命令","几十","智能化","载体","操作","更加","1000"],"title":"智能机器人发展","title_tokens":["机器","发展","机器人","智能"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_7","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是机器人操作系统。","text_tokens":["福大","斯坦福大学","非常","那","复杂","人","越来","独立","操作","是","有志","斯坦福","青年","这个","针对","层面","一个","上","尝试","机器人","越来越","对于","已经","开发","智能","重要","给出","就是","高效","系统","完成","团队","如何","技术","。","操作系统","机器","答案","的","不是","或者","问题","可以","，","大学","一群"],"title":"机器人操作系统","title_tokens":["机器","系统","机器人","操作","操作系统"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros","text":"2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣、做饭、收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法：既然自己做不到，那为什么不联合所有人一起干呢？如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在这几个图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面，却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS怀揣“提高机器人软件复用率”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。","text_tokens":["ros","身影","一款","不到","几个","有","这款","研究","提高","今日","从中","所以","木头","之内","苹果","可能","做饭","一切","多","”","他们","已经","和","时至今日","横跨","personal","其中","功能","初期","社区","家","有人","只","联合","收拾","100","pr2","促使","我们","肯定","说干就干","一系列","很快","一大","自己","因为","无聊","可以","专业","性能","强悍","同一","都","应用软件","发展","率","框架","所有人","什么","统统","水下","光靠","外观","干","标准","这个","找到","个","软件系统","组成","你","深知","才","以叠","向前走","领域","机器人","但是","要","熨烫","为什么","？","、","成为","快速","圈","这","完成","个人","等","臂","代","而生","。","实现","广泛","打","图中","机器","叠","出来","真的","别人","有没有","却","分钟","玩耍","，","软件","一起","处理","当时","分享","那","呢","就","如果","用","复杂","聊天","为例","时候","2","物体","整理","至今","这样","是","款","没有","看到","剪头发","“","不","后期","—","系列","也","一个","效率","只要","目标","移动","得以","甚至","手机","重要","学术","一系","服务","系统","应用","容易","怀揣","2007","陪","部件","电路","虽然","因","无论","洗衣","的","原型","想法","大步","设计","一套"," ","轰动","实验室","一些","条","并","了","用于","实验","充足","毛巾","帮助","动机","所有","一大步","基于","诞生","头发","独立","年","第一","低","零部件","大家","复用","第一次","向前","层面","平台","上","台球","开发","各种","普遍","同样","此时","：","而且","类似","就是","不想","在","一次","还","最后","做出","更","无论是","人形","还是","中","做","资金","精致","繁荣","既然","5","机械","事情","柔性","移动机器人","很多","很","衣服","robot","复合","涉及","推动"],"title":"ROS的诞生","title_tokens":["诞生","的","ros"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros_1","text":"提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["结晶","许可证","许可","ros","明智","有","长远","来讲","时间","提高","越来","多媒体系统","这里","特性","模块","通常","ros2","上市","多","他们","越来越","和","使用","功能","围绕","windows","简单","体系","家","社区","来","着","远","引擎","集合","新增","促使","我们","人类","重新","这些","上去","各样","生态","自己","做法","机制","多项","可以","开源","生态系统","都","发展","生态系","以","率","同理","非常","全人","宽松","代表","这个","a","创意","跑","零","组成","领域","向前走","案例","轮子","机器人","智能","、","各种各样","全球","这","智慧","汽车","做成","由","友好","技术","。","实现","一家","机器","做到","多媒体","b","别人","通信","四大","本身","正如","软件","，","缩短","媒体","工业","一起","就","分享","ros1","那","公司","采购","模块化","这样","是","从","已有","进步","总称","嵌入式","商业","也","一个","核心","目标","对","直接","被","系统","全球化","应用","会","特点","自身","嵌入","开发工具","整合","给","的","不是","商业化","设计","肩膀"," ","成果","不要","站","此","新","一步","并","了","到","比如","产品","工具","巨人","大家","复用","部分","向前","完全","人才","具备","linux","同时","c","将","上","全人类","平台","开发","各种","：","就是","造","沉淀","尽量","在","最后","还","推进","更","中","之","做","跨平台","制造","智能化","；","把","很多","支持","下来"],"title":"ROS的特点","title_tokens":["特点","的","ros"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros_2","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。","text_tokens":["四项","ros","说明","次数","几个","有","新鲜","越来","最为","据库","索引","每个","基本上","元素","这里","记录","来看","浏览","answers","乐意","左右","排名","万左右","多","通过","度","越来越","已经","和","使用","不同","上图","增长速度","功能","基本","其中","社区","其实","算是","大有可为","资源","趋势","我们","大部","方式","这些","访问量","15","革命","问题","可以","大","维基百科","都","发展","总而言之","非常","什么","活跃","加","问答","起来","正在","可为","维基百","任何","代表","发表","清晰","讨论","程度","频繁","机器人","查看","参考","？","地域","、","多万","统计","快","全球","快速","人数","关于","这","40","等","发布","速度","。","提出","以上","机器","用户","开发者","棒","其他","网站","活跃度","index","情况","根据","，","packages","两个","这是","就","日常","呢","页面","人","等等","月","是","从","访问","wiki","看到","不","论坛","存储","一个","核心","研发","不多","重要","discourse","25","应用","下载","增长","万人","整合","源码","给","的","绝大","动力","250"," ","教程","浪潮","新",".","总体","最高","了","org","到","绝大部分","活动","现在","比如","曲线","无疑","维基","相关","大家","部分","几年","助推","万","数据库","得到","上","80","这一波","开发","各种","数据","：","上边","就是","每","在","包","近几年","国家","20","中","大部分","而言","150","作为","张图","回答","浏览量","各项","；","差不多","迅猛","很多","很","更为","百科","新鲜事"],"title":"ROS的社区","title_tokens":["的","社区","ros"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/","text":"智能机器人开发平台介绍 机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 以操作系统为例，应用最为广泛的ROS系统在不断迭代，不过在智能时代洪流的冲击下，还是涌现出一些问题。 ROS的一些问题 ROS逐渐成为标准，大量机器人应用被贡献到社区，虽然提高了代码的通用性，但却难以发挥硬件的完整性能； 大量应用聚焦在机器人运动控制与定位导航等基础功能，智能化的应用较少； 在软件资源格外丰富的社区中，还缺少系统化的内容，帮助用户快速实现相关资源的复用。 很多开发者都在魔改ROS，去适配自己的机器人，所以机器人的研发成本非常高。从机械选型、系统定制、算法开发到数据闭环，每个过程都要付出高昂的成本，在这么高昂的成本下，做机器人是非常困难的一件事情。 在算法层面，机器人算法仍处于早期阶段，很多感知算法还停留在理论阶段，无法服务与实际场景，机器学习发展迅速，不过对于很多开发者来讲，数据的采集、标注、训练都是一个庞大的工作量，部署运行不仅十分困难，还要消耗大量的算力成本。 智能机器人涉及的领域和方法较多，目前整体的学习成本偏高，想要实现智能化应用的难度就更高，问题的出现，也带来了机遇与挑战。 地平线机器人开发平台 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。这套机器人开发平台的目的是打造软硬协同、极致优化、丰富易用的机器人开发组件与生态，由图中这几个部分组成，我们一一来看下。 平台的底层主要依托于地平线AIOT边缘AI芯片——旭日3和旭日5，内部集成了地平线最先进的伯努利2.0架构的AI 引擎，可提供 5TOPS 以上的等效算力。如此强大的算力支持，保证了智能机器人开发的基础条件。 芯片是基础建设，在此之上更重要的是一系列软件设施，正如我们电脑上的windows和linux，一套优质的操作系统，是上层应用软件开发的必要条件，TogetherROS在ROS系统的基础上，进行了大量的改良和优化，可以为开发者提供高效实用的系统环境。 在此之上，平台还会提供大量的机器人参考算法和应用功能示例，比如常用的建图、定位、导航，还有智能机器人中至关重要的智能化功能，比如一些基础算法，图像分类、图像分割、目标检测等，还有应用功能，人脸检测、人体跟踪、骨骼点检测、手势识别、语音处理等等，提供基于大量数据训练的模型，借助底层AI引擎的支持，可以快速、稳定的实现各种各样的智能应用。 同时平台还会配套一系列加速机器人开发的工具链，比如代码编写工具、系统调试工具、数据标注和训练工具等。 古月居和地平线也会共同打造机器人开发者社区，持续分享技术内容，沉淀更多开发者的智慧，更多机器人产业中的合作伙伴也会陆续加入，共同打造最为丰富的机器人开发者套件，建设智能机器人开发的生态圈。 在这个机器人开发平台之中，最为重要的就是TogetherROS系统了，起到了承上启下、连接各项功能的作用，我们将通过一系列课程为大家深入浅出的介绍。 TogetherROS的特点 在ROS系统庞大社区资源的基础上，结合智能机器人的发展和产业需求，TogetherROS应运而生。 TogetherROS有三个核心特点： 开源兼容，秉承开源精神的力量 TogetherROS和ROS系统一样，也是一套完全开源的系统，所有开发者都可以继续二次开发，接口方面和ROS2完全兼容，ROS2原有的功能也都可以继续复用，已有的机器人代码可以十分便利的迁移过来。 极致性能优化 相比ROS的通用化，TogetherROS更多考虑的是如何充分挖掘底层硬件的性能，比如提高数据传输的效率、增强人工智能处理的能力，在后续的使用案例中，大家可以充分感受到这一点。 丰富易用的软硬件组件 比如各种各样的传感器和开发套件，再比如算法模块、感知应用、机器人功能，还有提高开发效率的各种编程、部署工具。 TogetherROS系统框架 具体展开来看，TogetherROS的系统框架如图所示，其中深蓝色部分为地平线优化、新增的模块，其他是目前复用ROS2中的模块： 在系统通信的中间件部分，保留了ROS2中原本针对不同DDS的通信框架，与ROS2 foxy版本的接口完全兼容，方便复用ROS丰富工具包进行原型验证，在此之上增加了“zero-copy” 零拷贝 的通信机制，降低大数据传输时延和系统资源消耗。 在组件功能部分，TogetherROS提供“hobot CV” 视觉加速库 ，软硬件协同，可以提升CV算子性能、降低系统资源消耗；针对AI模型的推理，封装了“hobot_dnn” 功能包，可以调用底层芯片的AI引擎，简化板端AI开发与部署，释放BPU的算力。可以支持丰富的机器人传感器型号，比如相机、雷达、IMU、GPS等，节省驱动开发的时间，可以聚焦在机器人应用开发上。 除此之外，TogetherROS还会提供丰富的 软件调试和性能调优工具 ，方便用户定位问题和优化系统性能，在具体的行业应用中，还支持最小化和模块化的剪裁，利于部署在资源受限的嵌入式产品中。 总之，TogetherROS出于ROS，又不止于ROS，ROS原有的功能依然继承，重点是借助硬件能力，充分优化系统的性能，提高机器人开发的效率。","text_tokens":["由图","挑战","应运","所以","出现","套件","最","缺少","组件","6","集成","软硬件","调用","功能","5tops","合作","hobot","自己","问题","开源","继续","都","以","应用软件","通用化","中间","机遇","定位","至关","标准","聚焦","之外","案例","机器人","内部","配套","要","、","内容","快速","驱动","等","旭日","如何","原有","开发者","居","其他","节省","现出","却","，","示例","处理","迅速","定制","就","难以","一样","已有","重点","也","效率","基础","对于","被","系统化","视觉","感器","模型","需求","软硬","调优","虽然","的","共同","此","了","一一","处于","比如","基于","传感","相关","大家","复用","完全","接口","同时","将","开发","各种","二次","贡献","架构","就是","控制","包","这么","还","能力","环境","中","作为","连接","应运而生","算子","5","进行","；","偏高","分类","感受","冲击","提高","完整","较","传感器","三个","来看","针对","相机","又","ai","通过","难度","和","跟踪","不同","windows","迁移","大脑","计算","课程","兼容","提供","充分","骨骼","验证","传输","可以","提升","发展","利于","为","人脸","实际","主控","这个","过来","智能","各种各样","高","这","逐渐","规控","。","广泛","操作系统","实现","以上","型号","学习","机器","增加","介绍","通信","迭代","库","标注","涌现出","togetherros","定位问题","推理","复杂","中间件","等等","便利","下","持续","嵌入式","十分困难","人体","一个","魔","核心","dnn","常用","一系","地平线","之中","采集","会","深蓝","特点","手势","一点","洪流","工作量","等效","但","加速","产业","再","定位导航","帮助","dds","通用性","部分","系统资源","层面","数据传输","雷达","语音","挖掘","如此","：","困难","还会","电脑","丰富","生态圈","编程","与","可","2022","出于","改","底层","智能化","事情","协同","各项","版本","最小","有","时间","最为","硬件","增强","模块","正式","目前","社区资源","易用","多","”","分割","使用","成本","其中","继承","工作","一件","各样","_","链","不止","生态","力量","建图","必要","框架","条件","拷贝","主要","去","部署","代码","零","强大","蓝色","aiot","图像","成为","优化","整体","适配","改良","方便","停留","技术","还有","用户","地平","加入","剪裁","正如","全新","还要","分享","bpu","秉承","月","先进","是","保留","方法","“","—","导航","研发","稳定","高效","付出","服务","不仅","受限","精神","深入","古月","上层","人工智能","调试","给","推出","芯片","作用","一套"," ","板端","优质","所示","到","之上","边缘","起到","原本","产品","所有","降低","工具","3","消耗","阶段","linux","数据","沉淀","zero","无法","更","识别","foxy","具体","闭环","格外","做","一代","这套","程式","运行","信息","机械","除此之外","打造","支持","涉及","伯努利","ros","几个","来讲","非常复杂","每个","算法","实用","动作","带来","建设","ros2","考虑","庞大","陆续","社区","引擎","资源","新增","我们","一系列","机制","性能","大","相比","理论","想要","合作伙伴","非常","必要条件","时延","简化","少","imu","训练","组成","领域","至关重要","参考","二次开发","涌现","智慧","时代","借助","伙伴","深入浅出","不过","释放","gps","工具包","仍","据传","运动","软件","感知","极致","方面","为例","如图所示","展开","过程","模块化","从","后续","通用","系列","设施","保证","早期","目标","依然","重要","系统","算力","应用","软件资源","检测","嵌入","不断","2.0","封装","人工","承上启下","原型","结合","选型","一些","执行","总之","发挥","依托","除此","年","电机","高昂","点","于","最小化","行业","编写","平台","上","cv","十分","目的","场景","在","还是","深蓝色","包括","-","大量","copy","很多","操作"],"title":"智能机器人开发平台介绍","title_tokens":["机器","介绍","平台","机器人","开发","智能"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#_1","text":"机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 以操作系统为例，应用最为广泛的ROS系统在不断迭代，不过在智能时代洪流的冲击下，还是涌现出一些问题。","text_tokens":["执行","非常","为例","ros","复杂","等等","冲击","传感","操作","硬件","最为","电机","非常复杂","是","部分","算法","下","传感器","主控","动作","层面","一个","平台","机器人","各种","智能","各种各样","：","、","数据","在","系统","感器","涌现","驱动","大脑","计算","规控","等","应用","时代","还是","包括","环境","。","广泛","操作系统","作为","不断","各样","机器","不过","程式","洪流","的","信息","问题"," ","迭代","现出","进行","涌现出","一些","，","感知","软件","以"],"title":"智能机器人开发平台介绍","title_tokens":["机器","介绍","平台","机器人","开发","智能"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#ros","text":"ROS逐渐成为标准，大量机器人应用被贡献到社区，虽然提高了代码的通用性，但却难以发挥硬件的完整性能； 大量应用聚焦在机器人运动控制与定位导航等基础功能，智能化的应用较少； 在软件资源格外丰富的社区中，还缺少系统化的内容，帮助用户快速实现相关资源的复用。 很多开发者都在魔改ROS，去适配自己的机器人，所以机器人的研发成本非常高。从机械选型、系统定制、算法开发到数据闭环，每个过程都要付出高昂的成本，在这么高昂的成本下，做机器人是非常困难的一件事情。 在算法层面，机器人算法仍处于早期阶段，很多感知算法还停留在理论阶段，无法服务与实际场景，机器学习发展迅速，不过对于很多开发者来讲，数据的采集、标注、训练都是一个庞大的工作量，部署运行不仅十分困难，还要消耗大量的算力成本。 智能机器人涉及的领域和方法较多，目前整体的学习成本偏高，想要实现智能化应用的难度就更高，问题的出现，也带来了机遇与挑战。","text_tokens":["ros","来讲","提高","硬件","挑战","完整","每个","算法","所以","较","出现","带来","目前","缺少","庞大","多","难度","和","成本","功能","社区","工作","一件","资源","自己","问题","性能","都","发展","理论","想要","非常","机遇","定位","少","实际","训练","标准","去","聚焦","部署","代码","领域","机器人","要","智能","成为","高","内容","、","快速","整体","适配","等","逐渐","停留","。","实现","学习","机器","不过","用户","开发者","仍","却","运动","标注","，","软件","感知","迅速","定制","就","还要","难以","过程","是","从","通用","下","方法","十分困难","也","导航","一个","魔","研发","基础","早期","对于","被","系统化","付出","服务","不仅","系统","算力","采集","应用","软件资源","虽然","的","工作量","选型"," ","但","了","到","定位导航","处于","帮助","通用性","发挥","相关","复用","高昂","消耗","阶段","层面","开发","十分","数据","贡献","场景","困难","在","控制","这么","还","无法","更","丰富","中","与","闭环","格外","做","大量","运行","改","机械","智能化","事情","；","很多","偏高","涉及"],"title":"ROS的一些问题","title_tokens":["问题","的","一些","ros"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#_2","text":"2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。这套机器人开发平台的目的是打造软硬协同、极致优化、丰富易用的机器人开发组件与生态，由图中这几个部分组成，我们一一来看下。 平台的底层主要依托于地平线AIOT边缘AI芯片——旭日3和旭日5，内部集成了地平线最先进的伯努利2.0架构的AI 引擎，可提供 5TOPS 以上的等效算力。如此强大的算力支持，保证了智能机器人开发的基础条件。 芯片是基础建设，在此之上更重要的是一系列软件设施，正如我们电脑上的windows和linux，一套优质的操作系统，是上层应用软件开发的必要条件，TogetherROS在ROS系统的基础上，进行了大量的改良和优化，可以为开发者提供高效实用的系统环境。 在此之上，平台还会提供大量的机器人参考算法和应用功能示例，比如常用的建图、定位、导航，还有智能机器人中至关重要的智能化功能，比如一些基础算法，图像分类、图像分割、目标检测等，还有应用功能，人脸检测、人体跟踪、骨骼点检测、手势识别、语音处理等等，提供基于大量数据训练的模型，借助底层AI引擎的支持，可以快速、稳定的实现各种各样的智能应用。 同时平台还会配套一系列加速机器人开发的工具链，比如代码编写工具、系统调试工具、数据标注和训练工具等。 古月居和地平线也会共同打造机器人开发者社区，持续分享技术内容，沉淀更多开发者的智慧，更多机器人产业中的合作伙伴也会陆续加入，共同打造最为丰富的机器人开发者套件，建设智能机器人开发的生态圈。 在这个机器人开发平台之中，最为重要的就是TogetherROS系统了，起到了承上启下、连接各项功能的作用，我们将通过一系列课程为大家深入浅出的介绍。","text_tokens":["伯努利","ros","几个","最为","由图","算法","实用","来看","套件","带来","正式","ai","最","易用","多","建设","组件","6","集成","分割","和","跟踪","陆续","通过","windows","功能","社区","引擎","5tops","课程","合作","我们","提供","各样","一系列","链","生态","骨骼","可以","应用软件","建图","必要","为","合作伙伴","条件","人脸","必要条件","定位","主要","至关","训练","这个","代码","组成","强大","至关重要","aiot","机器人","图像","内部","参考","配套","智能","、","各种各样","内容","优化","快速","改良","这","智慧","等","伙伴","旭日","借助","深入浅出","技术","。","实现","操作系统","以上","机器","还有","开发者","地平","居","加入","介绍","正如","标注","，","软件","极致","示例","togetherros","全新","处理","分享","等等","月","先进","是","下","持续","—","系列","人体","设施","也","保证","导航","基础","目标","稳定","重要","常用","高效","一系","地平线","系统","算力","模型","应用","检测","之中","深入","会","软硬","古月","上层","手势","调试","给","2.0","推出","的","等效","承上启下","芯片","共同","作用","一套"," ","此","一些","加速","优质","了","一一","产业","之上","边缘","帮助","比如","起到","依托","工具","基于","3","年","部分","点","大家","于","行业","linux","层面","同时","编写","平台","上","将","语音","开发","各种","数据","如此","目的","架构","沉淀","就是","在","还会","更","电脑","识别","丰富","生态圈","中","环境","与","可","2022","连接","一代","这套","大量","底层","5","智能化","进行","协同","各项","打造","分类","操作","支持"],"title":"地平线机器人开发平台","title_tokens":["机器","地平","地平线","平台","机器人","开发"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#togetherros","text":"在ROS系统庞大社区资源的基础上，结合智能机器人的发展和产业需求，TogetherROS应运而生。 TogetherROS有三个核心特点： 开源兼容，秉承开源精神的力量 TogetherROS和ROS系统一样，也是一套完全开源的系统，所有开发者都可以继续二次开发，接口方面和ROS2完全兼容，ROS2原有的功能也都可以继续复用，已有的机器人代码可以十分便利的迁移过来。 极致性能优化 相比ROS的通用化，TogetherROS更多考虑的是如何充分挖掘底层硬件的性能，比如提高数据传输的效率、增强人工智能处理的能力，在后续的使用案例中，大家可以充分感受到这一点。 丰富易用的软硬件组件 比如各种各样的传感器和开发套件，再比如算法模块、感知应用、机器人功能，还有提高开发效率的各种编程、部署工具。","text_tokens":["ros","感受","有","硬件","提高","增强","应运","算法","传感器","三个","套件","模块","社区资源","ros2","易用","多","庞大","考虑","软硬件","组件","和","使用","功能","迁移","社区","资源","兼容","各样","充分","力量","传输","开源","可以","性能","继续","都","发展","相比","通用化","部署","代码","案例","机器人","过来","智能","、","各种各样","二次开发","优化","这","如何","。","原有","机器","还有","开发者","据传","，","感知","极致","方面","togetherros","处理","秉承","便利","是","后续","一样","已有","通用","也","核心","效率","基础","系统","感器","需求","精神","应用","软硬","特点","人工智能","一点","人工","的","结合","一套"," ","到","产业","再","比如","所有","工具","传感","大家","复用","完全","接口","数据传输","上","开发","十分","各种","二次","挖掘","：","数据","在","更","能力","丰富","编程","中","应运而生","底层"],"title":"TogetherROS的特点","title_tokens":["togetherros","特点","的"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#togetherros_1","text":"具体展开来看，TogetherROS的系统框架如图所示，其中深蓝色部分为地平线优化、新增的模块，其他是目前复用ROS2中的模块： 在系统通信的中间件部分，保留了ROS2中原本针对不同DDS的通信框架，与ROS2 foxy版本的接口完全兼容，方便复用ROS丰富工具包进行原型验证，在此之上增加了“zero-copy” 零拷贝 的通信机制，降低大数据传输时延和系统资源消耗。 在组件功能部分，TogetherROS提供“hobot CV” 视觉加速库 ，软硬件协同，可以提升CV算子性能、降低系统资源消耗；针对AI模型的推理，封装了“hobot_dnn” 功能包，可以调用底层芯片的AI引擎，简化板端AI开发与部署，释放BPU的算力。可以支持丰富的机器人传感器型号，比如相机、雷达、IMU、GPS等，节省驱动开发的时间，可以聚焦在机器人应用开发上。 除此之外，TogetherROS还会提供丰富的 软件调试和性能调优工具 ，方便用户定位问题和优化系统性能，在具体的行业应用中，还支持最小化和模块化的剪裁，利于部署在资源受限的嵌入式产品中。 总之，TogetherROS出于ROS，又不止于ROS，ROS原有的功能依然继承，重点是借助硬件能力，充分优化系统的性能，提高机器人开发的效率。","text_tokens":["ros","时间","硬件","提高","传感器","来看","针对","相机","又","模块","ai","目前","ros2","”","组件","软硬件","调用","不同","和","功能","其中","继承","引擎","新增","兼容","资源","提供","hobot","_","充分","不止","验证","传输","问题","机制","可以","性能","大","提升","利于","为","框架","中间","定位","时延","简化","拷贝","imu","聚焦","部署","之外","零","蓝色","机器人","、","优化","方便","等","驱动","借助","。","型号","原有","机器","增加","释放","gps","地平","用户","其他","工具包","通信","节省","据传","剪裁","库","，","软件","togetherros","定位问题","推理","如图所示","中间件","bpu","展开","模块化","是","保留","重点","嵌入式","“","效率","dnn","依然","地平线","视觉","系统","算力","模型","感器","应用","受限","深蓝","软硬","调优","嵌入","调试","封装","的","原型","芯片"," ","板端","此","加速","了","所示","之上","比如","dds","原本","产品","除此","总之","降低","工具","传感","部分","复用","系统资源","消耗","于","最小化","行业","完全","接口","数据传输","雷达","上","cv","开发","数据","：","在","zero","包","还会","还","能力","foxy","具体","丰富","深蓝色","中","与","-","出于","算子","底层","最小","版本","进行","copy","协同","；","除此之外","支持"],"title":"TogetherROS系统框架","title_tokens":["框架","系统","togetherros"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/","text":"TogetherROS与ROS性能对比 ROS2 vs ROS1 先来看下两个大版本ROS的系统架构。 在这张图中，左侧是ROS1，右侧是ROS2，两者最明显的变化，就是Master。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery——自发现机制，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的DDS系统。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于共享内存的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了，Linux、windows、MacOS、RTOS都可以。 ROS2系统架构 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个ROS Middleware，简称RMW，也就是制定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 TogetherROS vs ROS2 TogetherROS就是在这样一个ROS2架构的基础上，继续进行了优化，原本DDS通信的部分依然保留，可以适配不同厂家的DDS通信系统，在此之上，针对功能性的组件进行了众多优化和补充，在上一节中我们也给大家介绍了这套框架。 优化之后的TogetherROS系统，在数据传输和AI处理方面，到底有多少提升呢，我们来看具体的对比数据。 通信效率量化对比 先来看下操作系统至关重要的数据通信功能，我们针对ROS中最为常用的大数据传输模式——话题通信进行了测试。 在单元测试中，使用同样的算力平台，分别安装TogetherROS和ROS2系统，然后在其中运行一个话题通信的发布者与订阅者，实现不同数据量的传输。经过数据统计，我们可以看到，在数据通信延时方面，随着数据量的增加，ROS2系统在通信延时、发送端和接收端的CPU占用率上，都会程线性增加，可以预想，在数据量较大的情况下，系统的通信负荷会非常严重。 而在TogetherROS系统中，由于使用了零拷贝的传输机制，传输数据量的增加，并不会导致延时和CPU占用率的增加，极大程度节省了系统资源。 在场景测试中，我们尽量模拟真实机器人的应用，使用TogetherROS和ROS2系统连接了多个相机、雷达和里程计等传感器，作为大量数据的输入来源，继续进行了测试，结果和之前的单元测试类似，ROS2系统此时的CPU占用率已经超过90%，想要运行数据传输之外的应用功能，几乎是不可能的，通信延时也达到了15ms以上，这在某些实时性要求比较高的应用中，是不可接受的。 而在TogetherROS系统中，CPU占用和通信延时也微乎其微，更多系统资源都可以让给应用处理。 CV图像处理量化对比 再来看下智能机器人中视觉感知层面的处理，TogetherROS系统集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 模型推理 在AI处理方面，ROS2原生系统中并没有太多支持，只能依赖社区中的资源，很难充分发挥硬件的算力。 对此，TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 传感器驱动管理 在传感器层面，是大量数据传输的来源，TogetherROS也重点进行了优化，针对常用的传感器类型，系统中内置参数配置、系统调用和内存管理机制，同样是在芯片的硬件层面进行了加速和隔离，保障数据流的稳定生成。 机器人开发工具 机器人开发过程中的性能优化和调试，也是非常繁杂的工作，TogetherROS系统自带火焰图等工具，可以实现系统层面的调优和测试，便于开发者挖掘系统性能。 以上这些都是TogetherROS在ROS系统之上的优化和补充，未来更多特性也会不断迭代推出，让智能机器人的开发更加简单。","text_tokens":["负荷","火焰","而已","能够","该","所以","名字","特性","可能","节点","最","占用率","组件","调用","集成","已经","软硬件","成","功能","简单","opencv","会成","对比","hobot","接受","接收端","问题","熟悉","走","开源","继续","都","测试","配置","隔离","中间","数据通信","一团乱","自家","至关","标准","之外","除了","实时","频繁","机器人","要","数据量","？","量化","、","内置","产品开发","管理","不爽","结果","发布","驱动","等","发","如何","/","开发者","其他","节省","，","处理","移植","就","ros1","丢","让","udp","完","常","这样","太","一样","没有","重点","图像处理","理器","不","会程","也","调教","效率","只要","基础","对于","达到","未来","视觉","感器","最大","需求","模型","软硬","调优","明显","的","应用层","交道","此","macos","啦","了","自带","充足","比如","数据通","基于","传感","大家","复用","接收","用率","接口","有且","将","多少","开发","左侧","变化","各种","架构","就是","类似","哪些","尽量","应该","中","选项","作为","连接","更换","可选","么","算子","进行","高斯","更加","来源","下边","提高","传感器","来看","针对","相机","简单明了","数据流","ai","通过","15ms","和","不同","举","windows","发布者","它","兼容","提供","肯定","诟病","充分","传输","可以","超过","提升","率","交付","为","从而","为了","国际标准","厂家","量","通信协议","帧","类型","实际","这个","然后","找到","唯一","先","线性","比较","请","层","过来","高","智能","程序","某","分别","这","cpu","消失","。","广泛","操作系统","实现","以上","突然","滤波","机器","增加","管理机制","做到","通信","介绍","库","迭代","rtos","togetherros","两个","广泛应用","建立","推理","用","复杂","呢","当然","公司","时候","2","多倍","下","收","之前","vs","只有","乱麻","一个","模式","dnn","90%","甚至","按照","常用","一种","之后","地平线","较大","联网","模拟","会","切换","补充","但","加速","简称","分发","再","dds","预想","内存","部分","系统资源","时","传输数据","层面","数据传输","雷达","畸变","同样","此时","挖掘","每","opensplice","丰富","接入","编程","与","改","底层","版本","协同","把","一团","有","管理器","时间","最为","多个","硬件","角色","这里","严重","例子","多","端","使用","只能","成本","基本","其中","不会","工作","符合","共享","共享内存","5g","重新","导致","里","制定","框架","校正","交给","里程","占用","拷贝","主要","选择","部署","代码","零","客户端","风格","图像","原生","加密","优化","图","适配","物","里程计","一家","某些","还有","用户","地平","发现","bpu","是","保留","方法","—","商业","便于","要求","繁杂","写","延迟","稳定","对此","延时","安装","人工智能","实时性","调试","给","推出","芯片","国际","单元","一套"," ","例如","fastrtps","到","之上","通信接口","原本","产品","得","所有","降低","工具","3","听","消耗","轻松","输入","花费","一团乱麻","linux","随着","众多","而","数据","自","无法","更","适用","具体","不可","做","依赖","发成","协议","张图","这套","保障","运行","信息","右侧","不太","完善","支持","缩放","ros","来讲","每个","旋转","带来","间层","ros2","充分发挥","单元测试","变得","一行","功能性","开发成本","社区","其实","几乎","指挥","引擎","资源","我们","这些","内","很快","好","机制","性能","大","解决","由于","相比","想要","非常","混合","彼此","训练","软件系统","满足","程度","至关重要","库会","两者","客户","统计","middleware","属性","借助","master","可选项","另外","定义","不过","系统集成","据传","rmw","情况","话题","软件","感知","方面","减少","厂商","如果","真实","生成","过程","需要","经过","看到","参数","发送","不用","极大","目标","依然","重要","订阅","系统","算力","应用","开发工具","封装","只不过","不断","人工","微乎其微","不是","设计","并","一节","发挥","省略","很难","进程","ceo","于","听说","另","打交道","者","到底","上","平台","cv","而且","tcp","场景","在","倍","让给","大量","discovery","很多","操作","中间层"],"title":"性能对比","title_tokens":["性能","对比"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#togetherrosros","text":"","text_tokens":[],"title":"TogetherROS与ROS性能对比","title_tokens":["ros","性能","对比","与","togetherros"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#ros2-vs-ros1","text":"先来看下两个大版本ROS的系统架构。 在这张图中，左侧是ROS1，右侧是ROS2，两者最明显的变化，就是Master。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery——自发现机制，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的DDS系统。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于共享内存的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了，Linux、windows、MacOS、RTOS都可以。","text_tokens":["ros","而已","下边","管理器","角色","名字","来看","节点","简单明了","间层","ros2","最","通过","调用","和","变得","成","windows","简单","指挥","它","会成","共享","共享内存","我们","提供","肯定","这些","内","好","走","机制","可以","里","大","都","从而","彼此","中间","通信协议","一团乱","至关","标准","这个","找到","主要","先","频繁","至关重要","客户端","图像","库会","请","层","两者","、","程序","客户","管理","这","发布","驱动","master","可选项","消失","。","另外","操作系统","突然","不过","通信","，","rtos","发现","两个","建立","就","ros1","复杂","如果","让","公司","udp","时候","需要","是","一样","下","方法","理器","不","—","只有","乱麻","写","也","一个","稳定","重要","系统","应用","会","安装","封装","只不过","明显","的","应用层"," ","一套","交道","macos","但","了","再","通信接口","比如","dds","得","所有","基于","内存","听","进程","接收","ceo","打交道","一团乱麻","接口","有且","linux","雷达","将","上","开发","左侧","变化","而","数据","架构","就是","类似","tcp","哪些","在","自","中","选项","连接","依赖","协议","张图","更换","可选","大量","信息","discovery","右侧","底层","版本","进行","把","不太","操作","很多","一团","中间层","完善","更加"],"title":"ROS2 vs ROS1","title_tokens":["vs","ros2","ros1"," "]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#ros2","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个ROS Middleware，简称RMW，也就是制定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。","text_tokens":["ros","能够","来讲","多个","提高","该","每个","所以","这里","带来","ros2","最","多","例子","不同","举","成本","一行","功能","基本","开发成本","社区","其实","简单","符合","5g","我们","提供","重新","肯定","诟病","这些","好","问题","熟悉","开源","可以","性能","制定","都","解决","相比","率","交付","想要","为","为了","配置","国际标准","厂家","交给","通信协议","自家","标准","选择","这个","之外","软件系统","除了","唯一","代码","然后","先","频繁","满足","部署","要","过来","加密","？","、","程序","某","产品开发","middleware","不爽","适配","属性","这","等","发","如何","master","物","。","/","广泛","实现","一家","定义","还有","不过","用户","其他","通信","rmw","，","软件","减少","广泛应用","移植","就","厂商","ros1","丢","用","如果","当然","udp","完","常","这样","是","一样","收","不","商业","写","不用","也","一个","延迟","只要","对于","目标","稳定","按照","一种","系统","联网","最大","应用","需求","切换","安装","给","的","不是","国际","设计"," ","fastrtps","并","了","简称","再","比如","dds","产品","得","省略","基于","复用","时","轻松","于","听说","另","接口","层面","开发","变化","各种","数据","类似","就是","每","tcp","场景","在","应该","无法","opensplice","更","适用","丰富","接入","中","做","发成","协议","更换","么","改","底层","版本","把"],"title":"ROS2系统架构","title_tokens":["ros2","系统","架构"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#togetherros-vs-ros2","text":"TogetherROS就是在这样一个ROS2架构的基础上，继续进行了优化，原本DDS通信的部分依然保留，可以适配不同厂家的DDS通信系统，在此之上，针对功能性的组件进行了众多优化和补充，在上一节中我们也给大家介绍了这套框架。 优化之后的TogetherROS系统，在数据传输和AI处理方面，到底有多少提升呢，我们来看具体的对比数据。","text_tokens":["框架","之上","dds","呢","原本","厂家","有","方面","这样","部分","保留","大家","到底","针对","来看","数据传输","也","一个","ai","ros2","上","众多","多少","基础","组件","不同","和","依然","数据","架构","就是","功能","优化","功能性","在","适配","之后","系统","具体","中","对比","。","补充","我们","给","这套","的","通信","介绍","据传","传输"," ","进行","可以","此","，","继续","提升","了","togetherros","处理","一节"],"title":"TogetherROS vs ROS2","title_tokens":["vs","ros2","togetherros"," "]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_1","text":"先来看下操作系统至关重要的数据通信功能，我们针对ROS中最为常用的大数据传输模式——话题通信进行了测试。 在单元测试中，使用同样的算力平台，分别安装TogetherROS和ROS2系统，然后在其中运行一个话题通信的发布者与订阅者，实现不同数据量的传输。经过数据统计，我们可以看到，在数据通信延时方面，随着数据量的增加，ROS2系统在通信延时、发送端和接收端的CPU占用率上，都会程线性增加，可以预想，在数据量较大的情况下，系统的通信负荷会非常严重。 而在TogetherROS系统中，由于使用了零拷贝的传输机制，传输数据量的增加，并不会导致延时和CPU占用率的增加，极大程度节省了系统资源。 在场景测试中，我们尽量模拟真实机器人的应用，使用TogetherROS和ROS2系统连接了多个相机、雷达和里程计等传感器，作为大量数据的输入来源，继续进行了测试，结果和之前的单元测试类似，ROS2系统此时的CPU占用率已经超过90%，想要运行数据传输之外的应用功能，几乎是不可能的，通信延时也达到了15ms以上，这在某些实时性要求比较高的应用中，是不可接受的。 而在TogetherROS系统中，CPU占用和通信延时也微乎其微，更多系统资源都可以让给应用处理。","text_tokens":["负荷","ros","来源","最为","多个","传感器","来看","针对","严重","相机","可能","ros2","占用率","端","多","单元测试","已经","和","使用","不同","15ms","功能","其中","发布者","不会","几乎","资源","我们","接受","接收端","导致","传输","机制","可以","大","超过","继续","都","由于","测试","想要","非常","数据通信","量","里程","占用","拷贝","至关","然后","之外","零","先","线性","程度","实时","至关重要","机器人","比较","数据量","高","、","统计","分别","结果","这","发布","等","cpu","。","实现","操作系统","里程计","以上","某些","机器","增加","通信","节省","据传","情况","话题","，","方面","togetherros","处理","真实","是","经过","下","看到","—","不","之前","发送","要求","会程","也","一个","极大","模式","90%","重要","常用","达到","订阅","系统","算力","较大","模拟","应用","感器","会","延时","安装","实时性","的","微乎其微","单元"," ","了","并","预想","数据通","传感","系统资源","接收","者","输入","传输数据","用率","随着","数据传输","雷达","平台","上","同样","数据","而","类似","此时","尽量","场景","在","更","让给","中","与","不可","作为","连接","大量","运行","进行","操作"],"title":"通信效率量化对比","title_tokens":["通信","效率","量化","对比"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#cv","text":"再来看下智能机器人中视觉感知层面的处理，TogetherROS系统集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。","text_tokens":["缩放","硬件","旋转","来看","通过","软硬件","集成","opencv","引擎","资源","兼容","对比","我们","hobot","可以","性能","提升","测试","率","混合","校正","帧","风格","机器人","图像","智能","、","分别","等","。","实现","滤波","机器","地平","做到","系统集成","库","，","感知","软件","togetherros","处理","2","多倍","下","方法","便于","效率","甚至","常用","地平线","视觉","系统","应用","软硬","的","芯片"," ","例如","加速","了","到","再","降低","3","系统资源","消耗","接口","层面","畸变","上","cv","开发","而且","倍","在","更","具体","编程","中","与","运行","算子","底层","进行","协同","高斯"],"title":"CV图像处理量化对比","title_tokens":["图像","cv","对比","量化","处理","图像处理"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_2","text":"在AI处理方面，ROS2原生系统中并没有太多支持，只能依赖社区中的资源，很难充分发挥硬件的算力。 对此，TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。","text_tokens":["充足","处理","推理","就","发挥","bpu","基于","时间","硬件","方面","太","没有","很难","实际","训练","花费","部署","不用","ai","调教","ros2","众多","多","充分发挥","dnn","开发","集成","上","原生","只能","使用","和","数据","智能","在","社区","系统","算力","模型","应用","借助","对此","引擎","资源","人工智能","中","。","提供","hobot","依赖","保障","这套","充分","开发者","人工","的","很快","系统集成","了","芯片"," ","库","开源","底层","可以","啦","，","很多","并","分发","支持","togetherros"],"title":"模型推理","title_tokens":["模型","推理"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_3","text":"在传感器层面，是大量数据传输的来源，TogetherROS也重点进行了优化，针对常用的传感器类型，系统中内置参数配置、系统调用和内存管理机制，同样是在芯片的硬件层面进行了加速和隔离，保障数据流的稳定生成。","text_tokens":["配置","来源","隔离","生成","传感","内存","硬件","是","类型","重点","传感器","参数","针对","数据流","层面","数据传输","也","调用","和","稳定","内置","数据","、","常用","同样","优化","在","管理","感器","系统","中","。","保障","管理机制","的","大量","芯片","据传","传输","机制","进行","，","加速","了","togetherros"],"title":"传感器驱动管理","title_tokens":["传感器","管理","感器","驱动","传感"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_4","text":"机器人开发过程中的性能优化和调试，也是非常繁杂的工作，TogetherROS系统自带火焰图等工具，可以实现系统层面的调优和测试，便于开发者挖掘系统性能。 以上这些都是TogetherROS在ROS系统之上的优化和补充，未来更多特性也会不断迭代推出，让智能机器人的开发更加简单。","text_tokens":["之上","非常","火焰","ros","更加","让","工具","过程","是","便于","特性","繁杂","层面","也","多","机器人","开发","和","智能","挖掘","优化","图","在","简单","未来","系统","更","工作","等","会","调优","中","。","实现","补充","以上","调试","不断","这些","机器","推出","开发者","的"," ","迭代","性能","可以","，","都","测试","togetherros","自带"],"title":"机器人开发工具","title_tokens":["机器","工具","机器人","开发","开发工具"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/","text":"TogetherROS应用场景 相比手机、电脑等通用平台，机器人的类型可是千变万化，构建机器人操作系统的难度就远比手机和电脑的操作系统要复杂很多。机器人的主流应用大致可以分为服务机器人、工业机器人、特种机器人三个方向，无论是在哪一方向，都会面临很多问题。比如传感器、执行器等器件选型复杂，不同场景下需要的性能和参数都有所不同，这就要求操作系统得兼容尽量多的器件。 不同场景下的计算平台算力和资源差异很大，一般都需要进行定制化的裁剪和优化，这就得有一系列工具便于系统的定制和裁剪。每个场景中的应用功能变化也很大，各种算法的集成和开发要尽量简单，算法基于的数据也在持续迭代，需要一套工具链来提供迭代和升级。 针对各种各样的需求变化，TogetherROS系统都提供了支持。 服务机器人 在服务机器人领域，场景和功能尤其复杂，有家里的扫地机器人，有餐厅里的送餐机器人，有咖啡店里的双臂机器人，还有物流送货的飞行机器人，虽然每一个机器人平台的构型不同，但都需要动态处理多种多样的环境变化，这就需要TogetherROS系统基于大量数据的AI处理和丰富的组件功能支持，快速推动各种功能的落地。 工业机器人 在工业机器人领域，目前的机器人主要以工业机械臂和物流移动机器人形态为主，场景相比服务机器人要标准很多，核心目的是要提高生产效率，这就要求机器人可以长期稳定的运行，同时实时处理各项运动功能，TogetherROS系统可裁剪和性能稳定等特点，都可以符合要求。 特种机器人 而在特种机器人的应用领域，结合了服务和工业场景中的不少特点，机器人形态多变，得动态处理各种复杂场景里的事件，例如火灾、地震、管道等场景，更是会发生很多不可预料的情况，TogetherROS系统中的AI处理可以较好的保障不同环境中的感知效果，同时端云联动，可以实现大量数据的训练和部署，不断提高对复杂环境的处理能力。 可见，TogetherROS系统充分考虑了众多应用场景的需求，不仅可以满足智能机器人开发过程中的每一个环节，也考虑到了机器人未来在产业中的应用效果。","text_tokens":["分为","有","提高","每个","算法","较","传感器","三个","针对","ai","目前","多","考虑","组件","难度","集成","和","不同","家里","有所不同","功能","差异","简单","可见","远","计算","符合","一般","资源","兼容","提供","大致","各样","一系列","充分","好","问题","可以","性能","里","实时处理","咖啡","都","以","相比","飞行","哪","化","面临","火灾","类型","链来","主要","标准","效果","训练","部署","满足","多样","领域","实时","餐厅","机器人","要","为主","构型","、","各种各样","智能","扫地","优化","快速","这","一","等","臂","器件","裁剪","生产","。","实现","操作系统","尤其","机器","还有","地震","执行器","迭代","运动","情况","，","工业","感知","togetherros","处理","定制","预料","充分考虑","就","复杂","千变万化","不少","过程","需要","特种","升级","是","有所","环节","事件","通用","下","持续","便于","参数","系列","要求","也","一个","核心","可是","效率","移动","稳定","手机","物流","多种","对","联动","一系","管道","服务","未来","不仅","系统","算力","感器","应用","需求","送餐","动态","会","特点","比","很大","双臂","不断","虽然","无论","的","结合","选型","一套"," ","例如","多种多样","但","了","到","产业","执行","比如","动机","得","工具","基于","传感","落地","端云","同时","平台","众多","方向","变化","各种","开发","咖啡店","符合要求","而","数据","发生","每","目的","尽量","场景","在","更是","主流","无论是","电脑","能力","丰富","中","环境","形态","可","多变","不可","保障","应用领域","大量","长期","运行","机械","进行","各项","移动机器人","送货","很多","操作","构建","支持","推动"],"title":"应用场景","title_tokens":["场景","应用"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#togetherros","text":"相比手机、电脑等通用平台，机器人的类型可是千变万化，构建机器人操作系统的难度就远比手机和电脑的操作系统要复杂很多。机器人的主流应用大致可以分为服务机器人、工业机器人、特种机器人三个方向，无论是在哪一方向，都会面临很多问题。比如传感器、执行器等器件选型复杂，不同场景下需要的性能和参数都有所不同，这就要求操作系统得兼容尽量多的器件。 不同场景下的计算平台算力和资源差异很大，一般都需要进行定制化的裁剪和优化，这就得有一系列工具便于系统的定制和裁剪。每个场景中的应用功能变化也很大，各种算法的集成和开发要尽量简单，算法基于的数据也在持续迭代，需要一套工具链来提供迭代和升级。 针对各种各样的需求变化，TogetherROS系统都提供了支持。","text_tokens":["分为","有","每个","算法","传感器","三个","针对","多","难度","集成","和","不同","有所不同","功能","差异","简单","远","计算","一般","资源","兼容","提供","大致","各样","一系列","问题","可以","性能","都","相比","哪","化","面临","类型","链来","机器人","要","、","各种各样","优化","这","一","等","器件","裁剪","。","操作系统","机器","执行器","迭代","，","工业","togetherros","定制","就","复杂","千变万化","需要","特种","升级","有所","通用","下","持续","便于","参数","系列","要求","也","可是","手机","一系","服务","系统","算力","感器","应用","需求","会","比","很大","无论","的","选型","一套"," ","了","执行","比如","得","工具","基于","传感","平台","方向","变化","各种","开发","数据","尽量","场景","在","主流","无论是","电脑","中","进行","很多","操作","构建","支持"],"title":"TogetherROS应用场景","title_tokens":["场景","togetherros","应用"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_1","text":"在服务机器人领域，场景和功能尤其复杂，有家里的扫地机器人，有餐厅里的送餐机器人，有咖啡店里的双臂机器人，还有物流送货的飞行机器人，虽然每一个机器人平台的构型不同，但都需要动态处理多种多样的环境变化，这就需要TogetherROS系统基于大量数据的AI处理和丰富的组件功能支持，快速推动各种功能的落地。","text_tokens":["就","复杂","飞行","有","基于","需要","落地","多样","领域","一个","ai","平台","餐厅","机器人","组件","变化","各种","和","家里","咖啡店","物流","构型","不同","每","扫地","功能","场景","多种","在","数据","快速","服务","这","系统","送餐","动态","丰富","环境","。","尤其","都","双臂","机器","还有","虽然","支持","的","大量","里","多种多样","咖啡","，","送货","但","togetherros","处理","推动"],"title":"服务机器人","title_tokens":["机器","机器人","服务"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_2","text":"在工业机器人领域，目前的机器人主要以工业机械臂和物流移动机器人形态为主，场景相比服务机器人要标准很多，核心目的是要提高生产效率，这就要求机器人可以长期稳定的运行，同时实时处理各项运动功能，TogetherROS系统可裁剪和性能稳定等特点，都可以符合要求。","text_tokens":["就","动机","提高","是","主要","标准","要求","领域","实时","同时","目前","核心","机器人","效率","符合要求","移动","和","为主","要","物流","稳定","目的","功能","场景","在","服务","这","系统","等","臂","符合","裁剪","特点","生产","。","形态","可","都","机器","的","长期","运行","机械","运动","可以","各项","性能","移动机器人","实时处理","，","工业","很多","以","相比","处理","togetherros"],"title":"工业机器人","title_tokens":["机器","机器人","工业"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_3","text":"而在特种机器人的应用领域，结合了服务和工业场景中的不少特点，机器人形态多变，得动态处理各种复杂场景里的事件，例如火灾、地震、管道等场景，更是会发生很多不可预料的情况，TogetherROS系统中的AI处理可以较好的保障不同环境中的感知效果，同时端云联动，可以实现大量数据的训练和部署，不断提高对复杂环境的处理能力。 可见，TogetherROS系统充分考虑了众多应用场景的需求，不仅可以满足智能机器人开发过程中的每一个环节，也考虑到了机器人未来在产业中的应用效果。","text_tokens":["提高","较","ai","考虑","和","不同","可见","充分","好","可以","里","火灾","训练","效果","部署","满足","领域","机器人","智能","、","等","。","实现","机器","地震","情况","，","感知","工业","togetherros","处理","预料","充分考虑","复杂","不少","过程","特种","环节","事件","也","一个","对","联动","管道","服务","未来","不仅","系统","应用","动态","需求","会","特点","不断","的","结合"," ","例如","了","到","产业","得","端云","同时","众多","开发","各种","而","数据","发生","每","场景","在","更是","能力","中","环境","形态","不可","多变","保障","应用领域","大量","很多"],"title":"特种机器人","title_tokens":["机器","机器人","特种"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/","text":"旭日X3派介绍 TogetherROS是一个软件层面的系统，要想使用它，当然得找一个硬件层面的计算平台，安装之后才能使用啦。 之前我们提到，TogetherROS会基于地平线的AI芯片，充分发挥硬件性能，我们如何使用这颗芯片呢？ 旭日X3派 没问题，地平线已经为我们准备好了，那就是搭载旭日X3芯片的机器人开发板——旭日X3派。 第一眼看上去，大家是否会想到树莓派呢？没错，为了适应开发者的使用习惯，兼容市面上大量已有的模块，旭日X3派的整体外观和接口形态都接近树莓派，不过面向的开发对象以及板卡的计算实力，和树莓派就完全不同了。 类似这些常用的传感器，旭日X3派统统都可以支持，未来还有更多机器人套件会出现在大家身边。 大家可以在这张表中，看到旭日X3派的硬件资源，CPU是四核A53，频率1.2Hz，在系统内还可以进行超频，BPU就是硬件级的AI引擎，这是旭日X3派相比市面上其他开发板，最大的不同，也是核心性能的主要来源，类似于业界常听到的NPU，这里使用的是地平线机器人独有的伯努利2.0架构，可以提供5Tops的等效算力支持。 内存方面，大家可以选择2GB或者4GB的版本，存储使用的是SD卡，我们可以自行选择，只要大于8GB就可以啦。 在多媒体方面，旭日X3派支持硬件级别的H265和H264编解码，常用的图像和视频都可以流畅播放。 接口方面，尽量可以满足我们常用外接设备和开发的需求，这里是一个CSI的相机接口，板载USB有3个，包含1个USB3.0和2个USB2.0，这里是一个板载的调试串口，我们可以通过它获取系统层面的很多调试信息，也可以与板卡进行通信。 板卡上也搭载了有线网络和无线网络，这个有线网口我们可以直接用网线连接到电脑，就可以在电脑上远程登录和板卡通信了，或者连接到路由器，让板卡直接上网，无线网络和蓝牙是一个二合一的模块，我们也可以直接通过wiki，让板卡连接到某个网络中。 显示接口主要是这里的HDMI，如果我们先要看到系统界面，或者后续很多视觉例程的识别效果，都可以通过HDMI外接一个显示器进行显示。 最后还有至关重要的扩展接口，有40个引脚，和树莓派的接口定义一致，什么GPIO、串口、I2C、SPI等等，一应俱全。 这块板卡我们在使用的时候，推荐使用5V3A的电源，通过TypeC线连接到这里供电，官方提供的系统目前是Ubuntu20.04，使用起来和原生系统没有太大差别。 总体来讲， 旭日X3派是一款面向生态开发者的嵌入式AI开发板，接口兼容树莓派，具有5Tops的端侧推理算力，以及4核ARM A53的处理能力。 面对个人开发者，旭日X3派可以让每一位开发者拥有自己的AI开发套件，不再受开发板高昂的价格限制，面对高等院校，使用旭日X3派开发套件探索AI和机器人应用是学习的开始，有助于学生快速入门人工智能与机器人开发，面对产业，旭日X3派以及地平线的AI工具链，可以帮助客户将产品尽快推向市场，快速落地智能机器人方向的解决方案。 旭日X3M芯片 在旭日X3派上，最为核心的当然就是这颗AI芯片了，这是关于芯片的具体信息，供大家参考。 值得一提的是，随着芯片的技术迭代，2023年，地平线将推出X5芯片，比较大的变化是CPU升级到了8核A55，主频提升到1.8GHz，BPU的算力也将达到8Tops，还加入了GPU，以及更多可扩展的接口。 在使用旭日X3派的过程中，大家也可以期待旭日X5派了。 旭日X3派接口 好啦，还是回到旭日X3派的开发接口上来，我们再做一个整理，这些就是我们使用开发板进行智能机器人开发过程中，最为常用的接口啦。 大家目前在树莓派或者其他开发板上使用的绝大部分模块，基本都可以在旭日X3派上复用，同时还有更多智能化的玩法等着大家。 关于40Pin扩展接口的序号排布，大家可以看这里，引脚的序号是从靠近HDMI板卡内测的开始算起，是引脚1，然后依次蛇形计数，分别是1、2、3、4、5，一直到这里是39和40。 这张图片是40PIN扩展接口的详细定义，有3.3V和5V的电源信号，有I2C、I2S、SPI、UART等通信接口，还有很多可动态配置的GPIO信号，基本可以满足各种各样的机器人开发啦。 好啦，关于旭日X3派这块开发板我们已经了解清楚了，具体该如何使用呢，我们操作起来。","text_tokens":["才能","该","出现","供电","套件","已经","二合一","5tops","显示器","例程","自己","问题","不再","都","官方","配置","看上","超频","统统","远程","一应","至关","市面","机器人","要","？","、","快速","派","等","旭日","csi","如何","拥有","开发者","其他","，","处理","这是","习惯","就","调试信息","让","整理","太","升级","级别","没有","已有","自行","也","是否","只要","登录","达到","未来","视觉","感器","外接","最大","解码","需求","动态","39","探索","的","或者","h265","啦","了","想到","面上","一直","基于","传感","上来","是从","大家","复用","完全","接口","身边","将","同时","x5","开发","变化","各种","类似","就是","架构","尽量","还","能力","一致","第一眼","中","开发板","连接","推向","无线","5","进行","4gb","外","来源","引脚","听到","准备","传感器","相机","线网","受","ai","通过","视频","和","不同","40pin","1.2","接设备","解决方案","它","计算","起","兼容","这张","提供","大部","arm","充分","口","接近","可以","一眼","提升","为","为了","二合","5v","什么","包含","ubuntu20.04","hz","h264","这个","然后","先","有线网","界面","比较","靠近","智能","学生","各种各样","分别","x3","关于","这","40","cpu","院校","。","spi","学习","机器","有助于","usb","介绍","通信","迭代","媒体","togetherros","推理","那","呢","独有","俱全","当然","卡","用","v","等等","2","时候","提到","入门","i2s","3.3","嵌入式","之前","一个","没错","核心","线","常用","频率","之后","地平线","会","等效","绝大","尽快","常听到","差别","总体","分发","产业","再","序号","5v3a","串口","适应","帮助","内存","第一","部分","市场","无线网","层面","面对","gpu","方向","这颗","每","看","想","核","电脑","与","可","四核","硬件资源","合一","智能化","版本","i2c","显示","有","最为","硬件","ghz","这里","值得一提的是","模块","目前","多","使用","基本","推荐","助于","着","获取","a55","各样","链","生态","高等院校","限制","主要","选择","效果","依次","x3m","编解码","图像","期待","树莓","原生","整体","计数","玩法","技术","还有","上网","接口定义","地平","开始","加入","值得","路由器","bpu","gpio","路由","是","—","业界","大于","市面上","方案","安装","看上去","人工智能","调试","推出","蛇形","芯片","typec"," ","到","通信接口","找","产品","得","工具","3","张表中","2023","一位","清楚","usb3.0","随着","sd","回到","最后","更","识别","网络","级","具体","有线","大部分","蓝牙","内测","电源","做","4","usb2.0","具有","信息","hdmi","支持","搭载","伯努利","一款","来讲","a53","这块","主频","充分发挥","某个","排布","有助","无线网络","引擎","资源","图片","我们","上去","这些","内","好","npu","性能","大","对象","解决","相比","板卡","设备","8gb","起来","外观","面向","算","个","满足","至关重要","了解","参考","2gb","客户","8","高等","板载","个人","定义","不过","多媒体","软件","方面","推向市场","uart","如果","过程","后续","看到","播放","wiki","存储","8tops","价格","1.8","重要","直接","详细","供","系统","算力","应用","嵌入","2.0","人工","扩展","端侧","绝大部分","信号","1","发挥","没","年","流畅","高昂","于","落地","平台","上","以及","网线","在","还是","形态","实力","大量","一应俱全","很多","操作"],"title":"旭日X3派介绍","title_tokens":["派","介绍","x3","旭日"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3","text":"TogetherROS是一个软件层面的系统，要想使用它，当然得找一个硬件层面的计算平台，安装之后才能使用啦。 之前我们提到，TogetherROS会基于地平线的AI芯片，充分发挥硬件性能，我们如何使用这颗芯片呢？","text_tokens":["呢","当然","找","得","才能","发挥","基于","提到","硬件","是","之前","层面","一个","ai","平台","充分发挥","要","使用","？","这颗","分发","想","之后","地平线","系统","它","计算","会","如何","安装","。","我们","充分","地平","的","芯片"," ","性能","啦","软件","，","togetherros"],"title":"旭日X3派介绍","title_tokens":["派","介绍","x3","旭日"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3_1","text":"没问题，地平线已经为我们准备好了，那就是搭载旭日X3芯片的机器人开发板——旭日X3派。 第一眼看上去，大家是否会想到树莓派呢？没错，为了适应开发者的使用习惯，兼容市面上大量已有的模块，旭日X3派的整体外观和接口形态都接近树莓派，不过面向的开发对象以及板卡的计算实力，和树莓派就完全不同了。 类似这些常用的传感器，旭日X3派统统都可以支持，未来还有更多机器人套件会出现在大家身边。 大家可以在这张表中，看到旭日X3派的硬件资源，CPU是四核A53，频率1.2Hz，在系统内还可以进行超频，BPU就是硬件级的AI引擎，这是旭日X3派相比市面上其他开发板，最大的不同，也是核心性能的主要来源，类似于业界常听到的NPU，这里使用的是地平线机器人独有的伯努利2.0架构，可以提供5Tops的等效算力支持。 内存方面，大家可以选择2GB或者4GB的版本，存储使用的是SD卡，我们可以自行选择，只要大于8GB就可以啦。 在多媒体方面，旭日X3派支持硬件级别的H265和H264编解码，常用的图像和视频都可以流畅播放。 接口方面，尽量可以满足我们常用外接设备和开发的需求，这里是一个CSI的相机接口，板载USB有3个，包含1个USB3.0和2个USB2.0，这里是一个板载的调试串口，我们可以通过它获取系统层面的很多调试信息，也可以与板卡进行通信。 板卡上也搭载了有线网络和无线网络，这个有线网口我们可以直接用网线连接到电脑，就可以在电脑上远程登录和板卡通信了，或者连接到路由器，让板卡直接上网，无线网络和蓝牙是一个二合一的模块，我们也可以直接通过wiki，让板卡连接到某个网络中。 显示接口主要是这里的HDMI，如果我们先要看到系统界面，或者后续很多视觉例程的识别效果，都可以通过HDMI外接一个显示器进行显示。 最后还有至关重要的扩展接口，有40个引脚，和树莓派的接口定义一致，什么GPIO、串口、I2C、SPI等等，一应俱全。 这块板卡我们在使用的时候，推荐使用5V3A的电源，通过TypeC线连接到这里供电，官方提供的系统目前是Ubuntu20.04，使用起来和原生系统没有太大差别。 总体来讲， 旭日X3派是一款面向生态开发者的嵌入式AI开发板，接口兼容树莓派，具有5Tops的端侧推理算力，以及4核ARM A53的处理能力。 面对个人开发者，旭日X3派可以让每一位开发者拥有自己的AI开发套件，不再受开发板高昂的价格限制，面对高等院校，使用旭日X3派开发套件探索AI和机器人应用是学习的开始，有助于学生快速入门人工智能与机器人开发，面对产业，旭日X3派以及地平线的AI工具链，可以帮助客户将产品尽快推向市场，快速落地智能机器人方向的解决方案。","text_tokens":["出现","供电","套件","已经","二合一","5tops","显示器","例程","自己","问题","不再","都","官方","看上","超频","统统","远程","一应","至关","市面","机器人","要","？","、","快速","派","旭日","csi","拥有","开发者","其他","，","处理","这是","习惯","就","调试信息","让","太","级别","没有","已有","自行","也","是否","只要","登录","未来","视觉","感器","外接","最大","解码","需求","探索","的","或者","h265","啦","了","想到","面上","传感","大家","完全","接口","身边","将","开发","类似","就是","架构","尽量","还","能力","一致","第一眼","中","开发板","连接","推向","无线","进行","4gb","外","来源","引脚","听到","准备","传感器","相机","线网","受","ai","通过","视频","和","不同","1.2","接设备","解决方案","计算","它","兼容","提供","arm","口","接近","可以","一眼","为","为了","二合","什么","包含","ubuntu20.04","hz","h264","这个","先","有线网","界面","智能","学生","x3","这","40","cpu","院校","。","spi","学习","机器","有助于","usb","通信","媒体","推理","那","呢","独有","俱全","卡","用","等等","2","时候","入门","嵌入式","一个","没错","核心","线","常用","频率","地平线","会","等效","尽快","常听到","差别","总体","产业","5v3a","串口","适应","帮助","内存","第一","市场","无线网","层面","面对","方向","每","核","电脑","与","四核","硬件资源","合一","版本","i2c","显示","有","硬件","这里","模块","目前","多","使用","推荐","助于","获取","链","生态","高等院校","限制","主要","选择","效果","编解码","图像","树莓","原生","整体","还有","上网","接口定义","地平","开始","路由器","bpu","gpio","路由","是","—","业界","大于","市面上","方案","看上去","人工智能","调试","芯片","typec"," ","到","产品","工具","3","张表中","一位","usb3.0","sd","最后","更","识别","网络","级","有线","蓝牙","电源","4","usb2.0","具有","信息","hdmi","支持","搭载","伯努利","一款","来讲","a53","这块","某个","有助","无线网络","引擎","资源","我们","上去","这些","内","好","npu","性能","大","对象","解决","相比","板卡","设备","8gb","起来","外观","面向","个","满足","至关重要","2gb","客户","高等","板载","个人","定义","不过","多媒体","方面","推向市场","如果","后续","看到","播放","wiki","存储","价格","重要","直接","系统","算力","应用","嵌入","2.0","人工","扩展","端侧","1","没","流畅","高昂","于","落地","上","以及","网线","在","形态","实力","大量","一应俱全","很多"],"title":"旭日X3派","title_tokens":["派","x3","旭日"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3m","text":"在旭日X3派上，最为核心的当然就是这颗AI芯片了，这是关于芯片的具体信息，供大家参考。 值得一提的是，随着芯片的技术迭代，2023年，地平线将推出X5芯片，比较大的变化是CPU升级到了8核A55，主频提升到1.8GHz，BPU的算力也将达到8Tops，还加入了GPU，以及更多可扩展的接口。 在使用旭日X3派的过程中，大家也可以期待旭日X5派了。","text_tokens":["这是","当然","bpu","过程","最为","ghz","年","2023","是","升级","大家","主频","值得一提的是","随着","8tops","接口","gpu","也","ai","将","上","x5","核心","多","比较","以及","参考","变化","期待","使用","1.8","这颗","就是","达到","在","x3","供","地平线","派","关于","8","核","算力","还","旭日","更","具体","cpu","技术","中","。","a55","可","推出","地平","的","芯片","信息","加入"," ","迭代","扩展","可以","大","，","提升","了","值得","到"],"title":"旭日X3M芯片","title_tokens":["芯片","x3m","旭日"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3_2","text":"好啦，还是回到旭日X3派的开发接口上来，我们再做一个整理，这些就是我们使用开发板进行智能机器人开发过程中，最为常用的接口啦。 大家目前在树莓派或者其他开发板上使用的绝大部分模块，基本都可以在旭日X3派上复用，同时还有更多智能化的玩法等着大家。 关于40Pin扩展接口的序号排布，大家可以看这里，引脚的序号是从靠近HDMI板卡内测的开始算起，是引脚1，然后依次蛇形计数，分别是1、2、3、4、5，一直到这里是39和40。 这张图片是40PIN扩展接口的详细定义，有3.3V和5V的电源信号，有I2C、I2S、SPI、UART等通信接口，还有很多可动态配置的GPIO信号，基本可以满足各种各样的机器人开发啦。 好啦，关于旭日X3派这块开发板我们已经了解清楚了，具体该如何使用呢，我们操作起来。","text_tokens":["引脚","有","最为","该","这块","这里","模块","目前","多","已经","40pin","使用","和","基本","排布","着","起","图片","这张","我们","大部","各样","这些","好","可以","都","5v","配置","板卡","起来","算","依次","然后","满足","了解","机器人","树莓","靠近","智能","、","各种各样","分别","x3","派","关于","40","等","旭日","计数","玩法","如何","。","定义","spi","机器","还有","其他","开始","通信","，","uart","呢","v","gpio","整理","过程","2","i2s","是","3.3","一个","常用","详细","动态","39","蛇形","的","绝大","或者"," ","扩展","啦","了","到","绝大部分","再","信号","序号","1","一直","通信接口","上来","是从","3","大家","部分","复用","清楚","接口","同时","上","回到","开发","各种","就是","看","在","更","还是","具体","大部分","中","可","内测","开发板","做","电源","4","5","智能化","进行","hdmi","i2c","很多","操作"],"title":"旭日X3派接口","title_tokens":["派","接口","x3","旭日"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/","text":"TogetherROS系统安装 我们在旭日X3派上安装系统镜像，并进一步完成TogetherROS系统的安装，大家如果手上有开发板的话，建议跟随课程一起操作。 先来了解一下TogetherROS系统安装的整体流程： 第一步，要完成硬件的准备，我们需要找到一块旭日X3派的开发板，并且准备好电源线、SD卡、读卡器、串口模块等必要的配件，当然还需要有一台操作的电脑啦。 硬件都准备好之后，就可以进入第二步，给旭日X3派下载并安装Ubuntu系统镜像，这是TogetherROS系统运行必要的底层环境。 第三步，就可以开始安装TogetherROS啦。 安装完成后，我们还需要进一步完成一些配置工作，可以也让旭日X3派板卡上的各项功能都运行起来，保证TogetherROS的顺利运行。 最后一步，就是体验TogetherROS出厂自带的一些例程啦，确定一切安装顺利，为后续机器人开发最好准备。 接下来，我们就按照这个流程，开始操作。 硬件准备 先来完成硬件准备： 找到一块旭日X3派的板卡，准备好一套5V3A的电源和TypeC电源线，稍后会连接到这里的电源接口，给板卡供电。 然后准备好一张8GB以上的SD卡和读卡器，下一步我们会在上边烧写系统镜像。 接下来使用一个串口模块，连接旭日X3派和笔记本电脑，便于下一步看到系统镜像的启动信息。 如果大家有网线和HDMI显示器的话，也可以先准备好，在之后的操作中用的上，如果没有也没关系，不影响TogetherROS系统的基本使用。 硬件准备齐全之后，就可以进入第二步了。 安装Ubuntu系统 我们来给旭日X3派安装Ubuntu系统，关于系统镜像和烧写工具，都可以在地平线AI社区中找到。 下载SD卡镜像 首先登录地平线AI社区，点击”产品中心——资源中心“， 进入页面后下拉至”X3派资料包“专区，点击下载其中的”旭日X3派系统镜像“，会有一个压缩包，把它保存到当前电脑桌面。 此外，我们稍后将镜像烧写到SD卡里，需要用到烧写小工具，如果大家电脑上没有合适的工具，可以下拉到”工具“专区，点击下载”烧录 工具rufus\"。 下载完后我们来看一下两个压缩文件中的内容： 其中一个是烧写X3派镜像文件的工具，压缩包中有两个文件，一个是system_sdcard.img文件，是我们稍后会用于烧写SD卡的镜像文件；另一个是disk_nand.img文件，用于烧写旭日X3派中的flash文件，大多数情况下都用不到； 另一个压缩包里是我们稍后用于烧写镜像的rufus工具。 我们把两个压缩包都解压出来，然后把SD卡放进读卡器、插到电脑端 接下来就可以开始烧写SD卡镜像。 烧写SD卡镜像 运行解压出来的烧写工具rufus。启动后需要确认几个参数： 第一个是确定烧写到哪个磁盘上。工具软件会默认搜索当前读取到的SD卡，下图所示磁盘名称，就是演示时插好的16GB的SD卡。 下一步我们点击“选择”，找到需要烧写的镜像文件。演示中已经把需要的system_sdcrd.img文件放在了桌面上，选中它点击“打开”； 下面的内容就可以用默认的配置，点击“开始”会弹出警告告诉我们将把磁盘里的所有文件都清除掉，这没有问题，我们点击“选择“，就开始烧写SD卡镜像了。 进度条显示“准备就绪”后，点击“关闭”，此时你的SD卡镜像就已经烧写完成了，我们把SD卡的读卡器拔出来。 连接串口 接下来把SD卡插到旭日X3派上。 把串口模块连接到电脑的USB上。 连接好串口模块后，为了确保串口已经跟电脑连接成功、并且安装好了驱动，我们可以右键“我的电脑”图标、选择“管理”，在打开的”计算机管理“界面中找到”设备管理器——端口“，检查一下你的USB串口是否已经显示出了对应的设备。演示中的端口号为COM6,说明串口已经成功驱动了。 如果没有看到自己的设备号、或者设备号前有一个叹号或者问号标记，说明你的驱动没有安装好，可以搜索网络上的技术博客，来完成串口模块的驱动安装。 关闭“计算机管理”窗口，接下来就要通过串口与旭日X3派进行连接了。这里我们需要用到一个串口小工具，大家可以使用自己常用的工具。 演示中使用的串口工具是MobaXterm,十分推荐大家使用这个工具，里面集成了开发过程中需要使用的各种小工具，我们后续的串口通讯、SSH网络通讯，都会使用这些工具完成。 打开MobaXterm,点击左上角的\"Session\"； 找到里面的“Serial\"串口选项，点击打开；串口号选择本机连接到旭日X3派的相应端口，演示中为COM6; 波特率选择921600。选项好后点击“OK”。 现在串口已经连接成功了，但当前旭日X3派的板子还没有上电，所以没有任何信息弹出。 我们把电源线与旭日X3派连接好。 可以看到弹出了日志提醒：“当前系统正在启动”。等待系统加载完成。 现在可以看到系统已经加载成功了。 串口登录系统 接下来我们需要登录系统。我们有两个账号可以用来登录： 账号1：用户名为root，密码也为root； 账号2：用户名为storise，密码也为storise； 这里演示使用root用户来登录。输入用户名、密码，回车，需要等待大约1分钟，因为第一次登录需要展开一些系统必要的安装软件，安装好后系统会自动重启。 系统自动重启后，再次使用root用户登录。现在你的UBUNTU系统就已经安装好了。 我们可以使用LINUX系统常用的一些命令行进行查看和设置，比如ls查看当前命令，pwd查看当前路径，还可以使用mkdir命令创建文件夹，比如这里,一个test文件夹就创建成功了。 到这里为止，旭日X3派上的Ubuntu系统就安装成功啦，我们继续下一步。 安装TogetherROS系统 安装TogetherROS系统。 为了达到更好的通信效率，我们后续使用有线网络连接旭日X3派，这里大家可以拿出一根网线，直接连接电脑和旭日X3派的网口。 旭日X3派中出厂已经配置好了静态IP地址，是192.168.1.10，我们将使用的电脑也配置到同一网段即可。 配置有线网络 接下来请大家拿一根网线，连接旭日X3派和电脑。 然后，在电脑端打开控制面板，找到“查看网络状态和任务”。 找到已经连接成功的以太网，点击它； 会弹出一个窗口，我们点击“属性”。 再次弹出窗口，我们双击选择“Internet协议版本4”。 然后会弹出一个配置IP地址的窗口，我们勾选”使用下面的IP地址“。 按照如下信息填入： IP地址：192.168.1.100 子网掩码：255.255.255.0 默认网关：192.168.1.1 我们使用的旭日X3派的板子IP为192.168.1.10，所以IP后三位除了.10和网关.1以外，大家可以选用1-255之间的任意数字，这里使用.100； 填写完在所有窗口点击“确定”，最后关闭窗口。现在网络的配置就完成了，此时电脑端的静态IP就是192.168.1.100,我们通过这个IP与旭日X3派产生连接。 SSH远程登录 我们再次打开MobaXterm软件,点击左上角的\"Session\"，找到里面的\"SSH\",输入 旭日X3派板子的IP192.168.1.10，点击”OK“。 弹出登录窗口，我们用root账户登录：用户名为root，密码为root。这里会弹窗询问是否保存登录密码，如果需要保存就点“YES”，不需要保存就点“NO”。 现在我们就成功通过网络SSH协议登录到了旭日X3派板子上，和之前我们用串口登录的效果几乎是一样的，但现在我们是用网络通讯，所以现在通讯的效率和传输的速度会更高。 配置完成网络通讯后，我们来正式安装TogetherROS。 下载TogetherROS安装包 拷贝安装包 我们打开地平线社区的网站，在“产品中心”页面下拉到“机器人平台”，这里面都是TogetherROS相关的资源。 我们找到其中的\"TogetherROS DEB安装包\"，点击下载到电脑端。大概有300多兆的文件大小，很快就能下载完成。 这里我们先使用DEB安装包，来直接安装编译好的二进制文件。未来课程中我们会介绍如何通过源码编译的方式进行安装。 接下来我们进行TogetherROS镜像文件的复制安装。 安装TogetherROS 首先我们需要把电脑端的TogetherROS镜像文件，拷贝到旭日X3派板端。 大家可以在电脑上右键打开一个终端，并使用scp命令进行文件拷贝，命令格式为：scp + 空格 + .\\ + <要拷贝的文件名> + 用户名 + @ + 旭日X3派的IP地址 + :/ +旭日X3派上的文件目录名。 演示中使用的命令如下： $ scp . \\t ros_debV1_20220607894835.0.deb root@192.169.1.10:/userdata 这样就可以将TogetherROS镜像文件从电脑端拷贝到旭日X3派的userdata目录下。 除了这种拷贝方法，大家还可以使用MobaXterm软件，它提供了一种基于SCP命令的可视化的文件复制方式。 大家可以点击MobaXterm软件页面左侧的“SSH browser”，左边显示的目录就是旭日X3派板子上的文件目录结构。 我们找到板子上对应的userdata文件夹，双击打开它。 使用MobaXterm软件，可以把togetherROS镜像文件从电脑本机上直接拖到板子的文件目录底下。 现在TogetherROS安装包已经传输完成。我们在命令行中进入板子的userdata文件夹下，再确认安装包已经存放到了文件夹。命令行： $ cd /userdata/ $ ls 确认完毕后，我们用LINUX命令行dpkg进行安装，命令格式为:\"dpkg -i <要安装的包的名称>“，大家根据自己实际的版本号进行安装。此处使用命令为： $ dpkg -i tros_debV1_20220607094835.0.deb 等待安装完成，我们用命令“cd /opt\"进入opt文件夹，用ls命令检查一下该路径下的文件，可以看到opt文件夹下有一个tros文件夹，这个文件夹里就是我们刚刚安装好的TogetherROS的所有系统文件了。 如果觉得终端里看不方便，也可以使用MobaXterm软件的可视化浏览器来查看。 大家可以点击/opt/tros文件夹，看看其中的文件结构。 /include文件夹里，是我们后续会用到的关于系统的头文件的调用路径； /lib文件夹里面是库文件； /share文件夹里是安装好的功能包的路径； /src文件夹里是后续会用到的代码； /tools文件夹里是一些小工具。 除此之外，还有很多.bat,.sh脚本文件，它们是用来设置环境变量的。这是因为，你的LINUX系统不知道你安装包的路径在哪，所以需要通过环境变量的脚本来告诉系统，如何找到对应的TogetherROS的功能包、和功能包里的命令工具。 环境变量在我们后续操作里会频繁地使用到，我们会使用到一个”source\"命令来配置环境变量，例如： $ source /opt/tros/setup.bash 运行上面这行命令，就会把当前环境变量设置到系统里去；下次再运行ROS2、TogetherROS指令时，就能找到功能包的路径了。 到这里，TogetherROS也安装完成，下一节我们将对开发板和TogetherROS进行配置。","text_tokens":["sdcard","bash","不到","完后",">","第二","该","所以","供电","计算机管理","网段","一切","<","调用","集成","已经","功能","专区","设置","标记","的话","显示器","pwd","例程","自己","问题","因为","填写","继续","都","检查一下","影响","配置","指令","tools","storise","正在","远程","mobaxterm","大多数","之外","除了","你","解压","频繁","再次","机器人","要","ip192.168","、","觉得","内容","拷贝到","掉","管理","派","等","驱动","旭日","速度","如何","中有","/","手上","com6","出来","share","session","，","bat","窗口","掩码","检查","这是","账号","就","下拉至","关系","让","地址","这样","出","自动","921600","没有","一样","scp","格式","波特率","理器","不","端口号","也","ssh","是否","效率","登录","电脑桌","烧录","这种","达到","双击","右键","未来","大概","192.169","后","询问","ip地址","保存","哪个","的","告诉","或者","号","它们","我","啦","地","了","自带","面上","静态","拖","比如","笔记本电脑","串","基于","相关","大家","接口","将","对应","1.10","端的","开发","各种","左侧","跟随","一张","二步","就是","波特","小","控制","包","还","一根","会弹","t","环境","中","选项","test","开发板","连接","首先","填入","清除","上电","压缩","命令","10","进行","进度","；","即可","说明","启动","提醒","压缩文件","准备","ok","来看","浏览","ai","网口","打开","准备就绪","通过","和","镜像文件","大多","下次","齐全","资料","它","计算","课程","行","$","提供","tros","传输","可以","同一","img","为","为了","左边","进制","拔出来","密码","实际","这个","找到","然后","+","多兆","先","cd","界面","博客","请","高","第三步","x3","控制面板","关于","这","完成","。","以上","制面","机器","并且","子网","usb","通信","介绍","库","创建","是因为","加载","选用","togetherros","配件","两个","255.255","用","卡","当然","2","路径","下","就要","当前","之前","一个","确定","对","按照","常用","一种","之后","地平线","此外","会","包里","勾选","源码","存放","机","下图","ip","名","但","再","5v3a","串口","src","账户","第一","板子","255.0","时","rufus","i","system","安装包","拿出","此时","：","上边","压缩包","看","一次","16gb","电脑","面板","一台","与","体验","以外","派板","底层","版本","各项","把","上面","显示","下来","下拉","有","管理器","1.100","硬件","产生","ubuntu","复制","目录","件夹","这里","选中","此处","模块","叹","正式","deb","端","”","就绪","disk","使用","基本","其中","确认","推荐","放在","工作","端口","第二步","网络连接","_","数字","接下","下面","工具软件","文件目录","一块","稍后","里","必要","日志","放进","命令行","哪","中心","警告","脚本","任何","建议","桌面上","拷贝","去","选择","效果","终端","代码","如下","查看","跟","整体","关闭","方便","三步","技术","卡里","300","回车","还有","用户","地平","开始","进一步","网站","网络通讯","文件大小","分钟","读取","1.1","第一个","名称","完在","左上",":","底下","图标","是","顺利","搜索","方法","以太网","“","—","便于","写","镜像","用户名","下载","合适","\\","安装","相应","拿","给","lib","进度条","空格","typec","一套"," ",";","完毕","例如","系统文件",".","一步","所示","状态","到","没关系","用于","桌面","多数","@","现在","弹","可视","就点","环境变","产品","debv1","所有","工具","计算机","最好","拔出","第一次","输入","userdata","linux","进入","sd","任务","文件","本","编译","browser","最后","中用","刚刚","更","setup","网络","有线","电源","左上角","协议","4","运行","信息","机上","一下","点击","hdmi","除此之外","重启","接下来","网关","ros","192.168","下拉到","几个","问号","口号","第一步","二进制","root","成功","ros2","前","任意","社区","确保","几乎","大小","来","里会","100","资源","烧","我们","方式","这些","大约","流程","很快","好","flash","之间","能","以太","source","\"","板卡","opt","设备","8gb","起来","笔记","internet","磁盘","255","变量","户名","了解","知道","文件夹","属性","电源接口","里面","名为","no","结构","好后","插","情况","ls","根据","软件","等待","三位","一起","页面","如果","展开","演示","过程","没关","需要","子网掩码","笔记本",",","后续","从","电源线","看到","用来","参数","看看","保证","版本号","20220607894835.0","sdcrd","sh","浏览器","serial","直接","include","系统","算机","20220607094835.0","中为","nand","文件名","拉到","读卡器","一些","第三","电脑桌面","并","头文件","一节","通讯","1","烧写","可视化","除此","读卡","另","yes","用到","默认","更好","dpkg","弹窗","上","平台","十分","网线","在","mkdir","为止","弹出","-","出厂","很多","操作","环境变量","上角"],"title":"系统安装","title_tokens":["系统","安装"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros","text":"我们在旭日X3派上安装系统镜像，并进一步完成TogetherROS系统的安装，大家如果手上有开发板的话，建议跟随课程一起操作。 先来了解一下TogetherROS系统安装的整体流程： 第一步，要完成硬件的准备，我们需要找到一块旭日X3派的开发板，并且准备好电源线、SD卡、读卡器、串口模块等必要的配件，当然还需要有一台操作的电脑啦。 硬件都准备好之后，就可以进入第二步，给旭日X3派下载并安装Ubuntu系统镜像，这是TogetherROS系统运行必要的底层环境。 第三步，就可以开始安装TogetherROS啦。 安装完成后，我们还需要进一步完成一些配置工作，可以也让旭日X3派板卡上的各项功能都运行起来，保证TogetherROS的顺利运行。 最后一步，就是体验TogetherROS出厂自带的一些例程啦，确定一切安装顺利，为后续机器人开发最好准备。 接下来，我们就按照这个流程，开始操作。","text_tokens":["有","硬件","第一步","第二","ubuntu","准备","一切","模块","功能","来","工作","课程","我们","第二步","的话","流程","例程","接下","好","可以","一块","都","必要","为","配置","板卡","起来","建议","这个","找到","先","了解","机器人","要","、","第三步","x3","整体","派","完成","等","旭日","三步","。","手上","机器","并且","开始","进一步","，","togetherros","一起","配件","这是","就","如果","卡","当然","让","需要","顺利","后续","电源线","也","保证","确定","镜像","按照","之后","系统","下载","后","安装","给","的"," ","读卡器","啦","一些","一步","第三","并","自带","串口","读卡","第一","最好","大家","进入","上","sd","开发","跟随","：","二步","就是","在","还","最后","电脑","环境","一台","体验","开发板","电源","运行","出厂","一下","底层","各项","操作","下来","接下来"],"title":"TogetherROS系统安装","title_tokens":["系统","togetherros","安装"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_1","text":"先来完成硬件准备： 找到一块旭日X3派的板卡，准备好一套5V3A的电源和TypeC电源线，稍后会连接到这里的电源接口，给板卡供电。 然后准备好一张8GB以上的SD卡和读卡器，下一步我们会在上边烧写系统镜像。 接下来使用一个串口模块，连接旭日X3派和笔记本电脑，便于下一步看到系统镜像的启动信息。 如果大家有网线和HDMI显示器的话，也可以先准备好，在之后的操作中用的上，如果没有也没关系，不影响TogetherROS系统的基本使用。 硬件准备齐全之后，就可以进入第二步了。","text_tokens":["有","启动","硬件","第二","准备","这里","供电","模块","和","使用","基本","来","齐全","我们","第二步","的话","显示器","接下","好","可以","一块","稍后","影响","板卡","8gb","笔记","下来","找到","然后","先","x3","派","完成","电源接口","旭日","。","以上","，","togetherros","就","卡","如果","关系","没关","笔记本","没有","电源线","下","看到","不","便于","也","一个","镜像","之后","系统","会","给","的","typec","一套"," ","读卡器","一步","了","到","没关系","5v3a","串口","烧写","笔记本电脑","读卡","大家","接口","进入","上","sd","网线","一张","：","上边","二步","在","中用","电脑","电源","连接","信息","hdmi","操作","显示","接下来"],"title":"硬件准备","title_tokens":["准备","硬件"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#ubuntu","text":"我们来给旭日X3派安装Ubuntu系统，关于系统镜像和烧写工具，都可以在地平线AI社区中找到。","text_tokens":["工具","ubuntu","找到","写","ai","镜像","和","在","x3","社区","地平线","派","系统","来","关于","旭日","安装","烧","中","。","我们","给","地平","可以","，","都"],"title":"安装Ubuntu系统","title_tokens":["ubuntu","系统","安装"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#sd","text":"首先登录地平线AI社区，点击”产品中心——资源中心“， 进入页面后下拉至”X3派资料包“专区，点击下载其中的”旭日X3派系统镜像“，会有一个压缩包，把它保存到当前电脑桌面。 此外，我们稍后将镜像烧写到SD卡里，需要用到烧写小工具，如果大家电脑上没有合适的工具，可以下拉到”工具“专区，点击下载”烧录 工具rufus\"。 下载完后我们来看一下两个压缩文件中的内容： 其中一个是烧写X3派镜像文件的工具，压缩包中有两个文件，一个是system_sdcard.img文件，是我们稍后会用于烧写SD卡的镜像文件；另一个是disk_nand.img文件，用于烧写旭日X3派中的flash文件，大多数情况下都用不到； 另一个压缩包里是我们稍后用于烧写镜像的rufus工具。 我们把两个压缩包都解压出来，然后把SD卡放进读卡器、插到电脑端 接下来就可以开始烧写SD卡镜像。","text_tokens":["sdcard","下拉","不到","下拉到","有","完后","压缩文件","来看","ai","端","”","disk","其中","镜像文件","社区","大多","专区","它","资料","资源","烧","我们","_","接下","flash","可以","稍后","里","img","都","\"","放进","中心","大多数","然后","解压","、","内容","x3","派","旭日","卡里","中有","。","地平","出来","开始","插","情况","，","两个","就","下拉至","用","页面","如果","卡","需要","是","没有","下","“","—","当前","写","一个","镜像","登录","电脑桌","烧录","地平线","系统","此外","下载","合适","会","后","保存","nand","的","拉到"," ","读卡器",".","电脑桌面","到","用于","桌面","多数","烧写","产品","工具","读卡","大家","另","用到","rufus","进入","将","上","sd","文件","system","：","压缩包","小","包","电脑","中","首先","一下","压缩","点击","；","把","下来","接下来"],"title":"下载SD卡镜像","title_tokens":["sd","卡","镜像","下载"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#sd_1","text":"运行解压出来的烧写工具rufus。启动后需要确认几个参数： 第一个是确定烧写到哪个磁盘上。工具软件会默认搜索当前读取到的SD卡，下图所示磁盘名称，就是演示时插好的16GB的SD卡。 下一步我们点击“选择”，找到需要烧写的镜像文件。演示中已经把需要的system_sdcrd.img文件放在了桌面上，选中它点击“打开”； 下面的内容就可以用默认的配置，点击“开始”会弹出警告告诉我们将把磁盘里的所有文件都清除掉，这没有问题，我们点击“选择“，就开始烧写SD卡镜像了。 进度条显示“准备就绪”后，点击“关闭”，此时你的SD卡镜像就已经烧写完成了，我们把SD卡的读卡器拔出来。","text_tokens":["几个","启动","准备","选中","打开","”","就绪","准备就绪","已经","确认","镜像文件","放在","它","烧","我们","_","好","下面","问题","工具软件","可以","里","img","都","配置","警告","拔出来","磁盘","桌面上","选择","找到","你","解压","内容","掉","关闭","这","完成","。","出来","开始","插","读取","软件","，","第一个","名称","就","用","卡","演示","需要","出","是","搜索","没有","下","“","参数","当前","写","一个","确定","镜像","sdcrd","会","后","哪个","下图","的","进度条","告诉"," ","读卡器",".","一步","了","所示","到","桌面","面上","烧写","所有","工具","读卡","第一","拔出","时","rufus","默认","将","上","sd","文件","system","此时","：","就是","16gb","会弹","中","清除","运行","点击","进度","；","把","显示"],"title":"烧写SD卡镜像","title_tokens":["sd","烧写","卡","镜像"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_2","text":"接下来把SD卡插到旭日X3派上。 把串口模块连接到电脑的USB上。 连接好串口模块后，为了确保串口已经跟电脑连接成功、并且安装好了驱动，我们可以右键“我的电脑”图标、选择“管理”，在打开的”计算机管理“界面中找到”设备管理器——端口“，检查一下你的USB串口是否已经显示出了对应的设备。演示中的端口号为COM6,说明串口已经成功驱动了。 如果没有看到自己的设备号、或者设备号前有一个叹号或者问号标记，说明你的驱动没有安装好，可以搜索网络上的技术博客，来完成串口模块的驱动安装。 关闭“计算机管理”窗口，接下来就要通过串口与旭日X3派进行连接了。这里我们需要用到一个串口小工具，大家可以使用自己常用的工具。 演示中使用的串口工具是MobaXterm,十分推荐大家使用这个工具，里面集成了开发过程中需要使用的各种小工具，我们后续的串口通讯、SSH网络通讯，都会使用这些工具完成。 打开MobaXterm,点击左上角的\"Session\"； 找到里面的“Serial\"串口选项，点击打开；串口号选择本机连接到旭日X3派的相应端口，演示中为COM6; 波特率选择921600。选项好后点击“OK”。 现在串口已经连接成功了，但当前旭日X3派的板子还没有上电，所以没有任何信息弹出。 我们把电源线与旭日X3派连接好。 可以看到弹出了日志提醒：“当前系统正在启动”。等待系统加载完成。 现在可以看到系统已经加载成功了。","text_tokens":["说明","问号","有","管理器","启动","提醒","口号","所以","这里","ok","计算机管理","模块","叹","成功","打开","”","通过","集成","已经","前","使用","推荐","确保","来","计算","端口","我们","标记","这些","接下","好","自己","可以","检查一下","都","为","为了","\"","日志","设备","下来","正在","任何","mobaxterm","选择","找到","这个","你","界面","博客","跟","、","x3","管理","关闭","派","完成","驱动","里面","旭日","技术","。","com6","并且","usb","网络通讯","好后","session","插","加载","，","等待","窗口","检查","左上","卡","如果","演示","过程","需要","出","图标",",","是","没有","搜索","后续","921600","看到","就要","“","理器","—","波特率","当前","电源线","端口号","一个","ssh","是否","常用","serial","右键","系统","算机","会","后","安装","相应","机","中为","的","或者","号"," ",";","我","但","了","到","通讯","现在","弹","串口","串","计算机","工具","板子","大家","用到","上","sd","对应","十分","开发","各种","上角","本","：","波特","小","在","还","电脑","网络","弹出","中","与","选项","电源","连接","左上角","上电","信息","一下","点击","进行","；","把","显示","接下来"],"title":"连接串口","title_tokens":["连接","串口"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_3","text":"接下来我们需要登录系统。我们有两个账号可以用来登录： 账号1：用户名为root，密码也为root； 账号2：用户名为storise，密码也为storise； 这里演示使用root用户来登录。输入用户名、密码，回车，需要等待大约1分钟，因为第一次登录需要展开一些系统必要的安装软件，安装好后系统会自动重启。 系统自动重启后，再次使用root用户登录。现在你的UBUNTU系统就已经安装好了。 我们可以使用LINUX系统常用的一些命令行进行查看和设置，比如ls查看当前命令，pwd查看当前路径，还可以使用mkdir命令创建文件夹，比如这里,一个test文件夹就创建成功了。 到这里为止，旭日X3派上的Ubuntu系统就安装成功啦，我们继续下一步。","text_tokens":["有","ubuntu","件夹","这里","root","成功","已经","和","使用","来","设置","我们","大约","pwd","接下","好","因为","可以","继续","必要","为","命令行","密码","storise","户名","你","再次","查看","文件夹","、","x3","派","名为","旭日","。","回车","用户","好后","创建","分钟","ls","，","等待","软件","两个","账号","就","展开","2","演示","需要","自动","路径",",","下","用来","当前","也","一个","登录","常用","用户名","系统","会","后","安装","的"," ","一些","啦","一步","了","到","现在","1","比如","第一","第一次","输入","linux","上","文件","：","一次","还","mkdir","为止","test","命令","进行","；","重启","下来","接下来"],"title":"串口登录系统","title_tokens":["系统","登录","串口"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros_1","text":"安装TogetherROS系统。 为了达到更好的通信效率，我们后续使用有线网络连接旭日X3派，这里大家可以拿出一根网线，直接连接电脑和旭日X3派的网口。 旭日X3派中出厂已经配置好了静态IP地址，是192.168.1.10，我们将使用的电脑也配置到同一网段即可。","text_tokens":["为了","静态","配置","192.168","地址","是","后续","大家","这里","更好","网段","也","网口","将","1.10","效率","已经","拿出","使用","网线","和","达到","直接","x3","派","系统","一根","电脑","旭日","网络","到","安装","有线","中","。","ip地址","我们","网络连接","连接","的","出厂","好","通信"," ","可以",".","，","同一","了","togetherros","即可"],"title":"安装TogetherROS系统","title_tokens":["系统","togetherros","安装"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_4","text":"接下来请大家拿一根网线，连接旭日X3派和电脑。 然后，在电脑端打开控制面板，找到“查看网络状态和任务”。 找到已经连接成功的以太网，点击它； 会弹出一个窗口，我们点击“属性”。 再次弹出窗口，我们双击选择“Internet协议版本4”。 然后会弹出一个配置IP地址的窗口，我们勾选”使用下面的IP地址“。 按照如下信息填入： IP地址：192.168.1.100 子网掩码：255.255.255.0 默认网关：192.168.1.1 我们使用的旭日X3派的板子IP为192.168.1.10，所以IP后三位除了.10和网关.1以外，大家可以选用1-255之间的任意数字，这里使用.100； 填写完在所有窗口点击“确定”，最后关闭窗口。现在网络的配置就完成了，此时电脑端的静态IP就是192.168.1.100,我们通过这个IP与旭日X3派产生连接。","text_tokens":["网关","192.168","1.100","产生","所以","这里","成功","端","打开","”","通过","已经","和","使用","任意","它","100","我们","数字","接下","下面","可以","之间","填写","以太","为","配置","internet","255","选择","然后","找到","这个","除了","如下","再次","查看","请","x3","控制面板","属性","派","关闭","完成","旭日","。","制面","子网","1.1","，","三位","选用","窗口","掩码","完在","255.255","就","地址","出","子网掩码",",","以太网","“","一个","确定","按照","双击","后","ip地址","勾选","拿","的","ip"," ",".","了","状态","静态","弹","1","现在","所有","板子","255.0","大家","默认","1.10","任务","端的","网线","此时","：","就是","在","控制","最后","一根","电脑","面板","会弹","网络","与","-","连接","填入","协议","以外","4","信息","点击","版本","10","；","下来","接下来"],"title":"配置有线网络","title_tokens":["网络","有线","配置"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#ssh","text":"我们再次打开MobaXterm软件,点击左上角的\"Session\"，找到里面的\"SSH\",输入 旭日X3派板子的IP192.168.1.10，点击”OK“。 弹出登录窗口，我们用root账户登录：用户名为root，密码为root。这里会弹窗询问是否保存登录密码，如果需要保存就点“YES”，不需要保存就点“NO”。 现在我们就成功通过网络SSH协议登录到了旭日X3派板子上，和之前我们用串口登录的效果几乎是一样的，但现在我们是用网络通讯，所以现在通讯的效率和传输的速度会更高。 配置完成网络通讯后，我们来正式安装TogetherROS。","text_tokens":["所以","这里","ok","root","正式","成功","打开","”","通过","和","几乎","来","我们","传输","为","\"","配置","密码","mobaxterm","找到","效果","再次","ip192.168","高","x3","派","完成","里面","名为","旭日","速度","no","。","用户","网络通讯","session","软件","，","窗口","togetherros","就","用","左上","如果","需要","出","是",",","一样","“","不","之前","ssh","是否","效率","登录","会","后","询问","安装","保存","的"," ",".","但","了","到","通讯","弹","现在","串口","就点","账户","板子","输入","yes","弹窗","1.10","上","：","更","网络","左上角","协议","点击","上角"],"title":"SSH远程登录","title_tokens":["远程","登录","ssh"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros_2","text":"","text_tokens":[],"title":"下载TogetherROS安装包","title_tokens":["安装包","togetherros","安装","下载"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_5","text":"我们打开地平线社区的网站，在“产品中心”页面下拉到“机器人平台”，这里面都是TogetherROS相关的资源。 我们找到其中的\"TogetherROS DEB安装包\"，点击下载到电脑端。大概有300多兆的文件大小，很快就能下载完成。 这里我们先使用DEB安装包，来直接安装编译好的二进制文件。未来课程中我们会介绍如何通过源码编译的方式进行安装。 接下来我们进行TogetherROS镜像文件的复制安装。","text_tokens":["\"","就","下拉","页面","产品","下拉到","有","能","进制","中心","是","相关","复制","“","这里","二进制","找到","多兆","先","deb","平台","打开","”","机器人","端","文件","安装包","编译","使用","通过","镜像","直接","其中","镜像文件","在","社区","地平线","大小","这","电脑","完成","里面","来","下载","大概","未来","会","到","资源","安装","课程","中","。","如何","我们","300","源码","方式","机器","地平","的","很快","接下","网站","好","介绍","拉到","文件大小"," ","点击","进行","，","都","togetherros","下来","接下来"],"title":"拷贝安装包","title_tokens":["拷贝","安装","安装包"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros_3","text":"首先我们需要把电脑端的TogetherROS镜像文件，拷贝到旭日X3派板端。 大家可以在电脑上右键打开一个终端，并使用scp命令进行文件拷贝，命令格式为：scp + 空格 + .\\ + <要拷贝的文件名> + 用户名 + @ + 旭日X3派的IP地址 + :/ +旭日X3派上的文件目录名。 演示中使用的命令如下： $ scp . \\t ros_debV1_20220607894835.0.deb root@192.169.1.10:/userdata 这样就可以将TogetherROS镜像文件从电脑端拷贝到旭日X3派的userdata目录下。 除了这种拷贝方法，大家还可以使用MobaXterm软件，它提供了一种基于SCP命令的可视化的文件复制方式。 大家可以点击MobaXterm软件页面左侧的“SSH browser”，左边显示的目录就是旭日X3派板子上的文件目录结构。 我们找到板子上对应的userdata文件夹，双击打开它。 使用MobaXterm软件，可以把togetherROS镜像文件从电脑本机上直接拖到板子的文件目录底下。 现在TogetherROS安装包已经传输完成。我们在命令行中进入板子的userdata文件夹下，再确认安装包已经存放到了文件夹。命令行： $ cd /userdata/ $ ls 确认完毕后，我们用LINUX命令行dpkg进行安装，命令格式为:\"dpkg -i <要安装的包的名称>“，大家根据自己实际的版本号进行安装。此处使用命令为： $ dpkg -i tros_debV1_20220607094835.0.deb 等待安装完成，我们用命令“cd /opt\"进入opt文件夹，用ls命令检查一下该路径下的文件，可以看到opt文件夹下有一个tros文件夹，这个文件夹里就是我们刚刚安装好的TogetherROS的所有系统文件了。 如果觉得终端里看不方便，也可以使用MobaXterm软件的可视化浏览器来查看。 大家可以点击/opt/tros文件夹，看看其中的文件结构。 /include文件夹里，是我们后续会用到的关于系统的头文件的调用路径； /lib文件夹里面是库文件； /share文件夹里是安装好的功能包的路径； /src文件夹里是后续会用到的代码； /tools文件夹里是一些小工具。 除此之外，还有很多.bat,.sh脚本文件，它们是用来设置环境变量的。这是因为，你的LINUX系统不知道你安装包的路径在哪，所以需要通过环境变量的脚本来告诉系统，如何找到对应的TogetherROS的功能包、和功能包里的命令工具。 环境变量在我们后续操作里会频繁地使用到，我们会使用到一个”source\"命令来配置环境变量，例如： $ source /opt/tros/setup.bash 运行上面这行命令，就会把当前环境变量设置到系统里去；下次再运行ROS2、TogetherROS指令时，就能找到功能包的路径了。 到这里，TogetherROS也安装完成，下一节我们将对开发板和TogetherROS进行配置。","text_tokens":["bash","ros","有",">","该","所以","目录","复制","件夹","这里","root","此处","浏览","<","deb","ros2","端","打开","”","调用","通过","已经","和","使用","功能","其中","镜像文件","确认","里会","来","下次","它","设置","行","$","我们","提供","方式","tros","_","好","自己","传输","文件目录","因为","可以","里","检查一下","能","source","为","左边","\"","配置","指令","opt","tools","命令行","哪","脚本","变量","拷贝","实际","mobaxterm","去","户名","找到","+","这个","终端","除了","代码","如下","cd","之外","你","频繁","知道","文件夹","查看","要","觉得","、","拷贝到","x3","派","关于","方便","完成","里面","这","旭日","如何","。","/","结构","还有","用户","share","库","ls","是因为","根据","，","软件","等待","bat","togetherros","名称","检查","就","用","页面","如果",":","底下","地址","演示","需要","这样","是","从","路径","scp","后续",",","格式","下","方法","“","看到","不","用来","当前","看看","也","一个","ssh","版本号","镜像","20220607894835.0","对","这种","浏览器","include","双击","直接","一种","sh","用户名","右键","系统","192.169","会","\\","后","安装","ip地址","20220607094835.0","包里","存放","lib","的","空格","文件名","告诉","它们"," ","完毕","例如","系统文件",".","名","一些","地","并","了","到","头文件","一节","再","@","拖","现在","可视","环境变","src","可视化","debv1","所有","除此","基于","工具","操作","板子","大家","时","userdata","用到","linux","dpkg","进入","i","将","上","1.10","对应","端的","文件","开发","左侧","本","安装包","browser","：","就是","看","小","在","包","还","刚刚","setup","电脑","t","中","环境","-","开发板","首先","运行","机上","一下","派板","命令","点击","进行","版本","；","除此之外","把","很多","环境变量","上面","显示"],"title":"安装TogetherROS","title_tokens":["togetherros","安装"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/","text":"TogetherROS系统配置 无论是旭日X3派，还是TogetherROS，在正式使用之前，都还需要进行一些必要的配置，完善必要的功能模块，提供完整的算力支持，达到最佳状态。 网络连接 第一个配置，是无线网络连接。 当然，大家也可以直接用网线连接旭日X3派和一个可以上网的路由器，不过更多时候，我们还是会使用无线网络来上网。 我们打开MobaXterm,选择SSH，使用root用户登录板卡；如果之前登录过板卡、还没有关闭的话，也可以继续使用。 现在我们可以通过命令行搜索周边环境有哪些WIFI信号，命令如下： $ sudo nmcli device wifi rescan #扫描当前环境里所有WIFI名称，但扫描结果不会显示 $ nmcli device wifi list #显示扫描到的WIFI名称 $ sudo nmcli device wifi connect <账号> password <密码> #连接WIFI $ sudo vim /etc/network/interfaces #修改DHCP配置 比如，我的办公室里wifi的名称是psmicro,我们就可以使用“sudo nmcli device wifi connect psmicro password <密码>”来连接。 等到终端返回信息“successfully activated\",就说明WIFI连接成功； 我们可以Ping古月居的网址，来检查一下连接。如果能够Ping通，就说明网络已经连接成功，现在就可以成功连接到互联网，进行后续的软件下载和更新了。 网络配置完成后，在后续开发中，大家就可以直接下载或更新各种软件包了。 系统更新 第二个配置，是更新当前旭日X3派所使用的Ubuntu镜像，和在电脑上使用的命令相同。 我们更新一下当前的系统镜像： $ sudo apt update #会按照当前软件源的域名设置去连接远程软件源 $ sudo apt full-upgrade #升级所有可以升级的软件包 弹出如下对话，我们选择“Y”，回车； 这样我们就完成了对系统更新的检查，并安装好了更新包。 CPU调频策略 第三个配置，设置CPU的调频策略，这是一个可选项，大家了解之后，在未来需要使用的时候进行配置即可。 动态调频 $ echo > ondemand /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让系统根据当前负载，动态调整CPU频率 满频模式 $ echo > performance /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让CPU始终以满频，也就1.2GHz的频率工作 打开超频 $ echo 1 > /sys/devices/system/cpu/cpufreq/boost #使CPU以超频，也就是1.5GHz的频率工作 关闭超频 $ echo 0 > /sys/devices/system/cpu/cpufreq/boost 这里CPU频率为，满频模式：1.2GHz，超频模式：1.5GHz。 大家需要注意，默认的系统配置是关闭超频、并且动态调频的配置。这样可以比较好地保证功率最优。 安装ROS2功能包 接下来，还有一个很重要的配置，那就是安装ROS2功能包，我们说TogetherROS是基于ROS2深度优化的，很多模块还是会复用ROS2中的功能，所有ROS2的原生功能也可以支持，这里我们就把ROS2必要的功能包都安装一下，让系统的功能模块更加完整。 熟悉ROS2的同学，应该对这些指令并不陌生，和ROS2官方手册中的安装步骤一致，不过还是建议大家跟着课程的步骤一起来安装一下。 添加ROS2源 第一步我们需要更新系统软件源，并安装必要的下载工具。 $ sudo apt update && sudo apt install curl gnupg lsb-release #更新软件源 $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg #设置ROS2软件源秘钥 $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null #设置ROS2软件源 Attention 大部分国内开发者在这都会遇到同一个问题：网址无法连接。解决方案可以参考古月居官网上的这篇帖子： 《解决”Failed to connect to raw.githubusercontent.com“报错》 安装ROS2包 $ sudo apt update #更新软件源 $ sudo apt install ros-foxy-ros-base ros-foxy-demo-nodes-cpp # 安装ROS2功能包 时间会有些长，需要稍微等待一下。 现在ROS2就安装完成了。 大家可以使用同样的命令，继续安装ROS2中的更多功能包。 这里推荐大家先安装ROS2之后会使用到的编译器，比如python3-colcon-common-extensions。我们后续一些TogetherROS功能包的编译，也会使用python3-colcon-common的命令来安装。 $ sudo apt install python3-colcon-common-extensions # ROS2编译器 另外，我们推荐大家安装一个git工具，大家可以通过它下载GitHub、GitLab上的软件包，我们后续也会用到。安装命令为本小节代码第四行。 $ sudo apt install git # 安装git工具 到这里，我们常用的软件和功能包就安装完成了。我们可以看到，在旭日X3派文件目录/opt底下，除了之前的/tros文件夹外，还多出来一个/ros文件夹，里面就是我们刚才安装好的ros-foxy版本的所有系统文件。 如果大家要使用ROS2的功能包，也需要source里面的.bash或者.bat脚本文件。 建立软链接 为了方便我们在TogetherROS系统李调用ROS2的功能，在TogetherROS里提供了一个叫create_soft_link创建软链接的脚本，它而已通过软链接，把ROS2的环境变量链接到当前TogetherROS的环境包里来。执行以下命令： $ cd /opt/tros ## 使用/opt/tros目录下的create_soft_link.py创建ROS package至TogetherROS的软链接 $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros 这样设置以后，假如你source了TogetherROS的环境变量，那么同样的配置也会对ROS2生效。 好啦，到这里为止，所有必要的配置项我们都做完了，是不是有点迫不及待想要使用TogetherROS了呢？","text_tokens":["bash","有点","能够","而已",">","第二","<","网址","governor","调用","已经","公室","手册","功能","设置","域名","统配","的话","迫不及待","1.5","install","问题","熟悉","继续","都","检查一下","以","第四行","官方","0","配置","指令","超频","《","远程","mobaxterm","link","除了","你","要","？","稍微","、","结果","派","一","旭日","策略","o","package","githubusercontent","os","/","arch","居","开发者","出来","share","，","bat","对话","检查","这是","账号","就","居官","长","让","软","devices","完","这样","出","升级","没有","以下","不","也","ssh","scaling","这篇","登录","keyrings","达到","未来","动态","后","psmicro","》","boost","的","或者","我","地","啦","了","cpp","比如","始终","办公室","基于","大家","负载","复用","满频","返回","archive","开发","各种","|","功率","就是","哪些","包","还","应该","一致","环境","中","by","network","选项","连接","调频","echo","可选","命令","无线","进行","；","外","很","rosdistro","以后","即可","更加",")","interfaces","说明","py","policy0","完整","ssl","三个","线网","小节","打开","通过","和","达到最佳","1.2","生效","解决方案","它","课程","$","y","二个","提供","大部","tros","print","successfully","--","=","可以","同一","key","为","为了","密码","gnupg","rescan","先","extensions","soft","wifi","刚才","cd","链接","至","比较","x3","互联","这","完成","扫描","cpu","。","假如","并且","创建","dhcp","packages","togetherros","建立","用","那","(","当然","呢","时候","下","当前","之前","周边","一个","模式","对","full","按照","常用","频率","null","之后","联网","会","包里","update","使","系统配","软件包","但","更新包","第一","release","sources","部分","python3","无线网","system","同样","vim","：","device","多功能","无论是","电脑","报错","通","list","对系统","usr","版本","把","注意","下来","显示","有","时间","ghz","相同","tee","ubuntu","目录","sudo","这里","件夹","cpufreq","signed","模块","正式","deb","多","”","同学","demo","使用","不会","推荐","工作","下载工具","网络连接","_","周边环境","接下","遇到","文件目录","里","必要","秘钥","[","命令行","脚本","建议","去","选择","http","终端","代码","如下","最优","原生","优化","关闭","方便","网上","回车","还有","上网","用户","architecture","##","第三个","路由器","第一个","名称",":","底下","路由","是","搜索","第二个","项","“","attention","是不是","系统配置","镜像","curl","为本","帖子","过","failed","下载","以满频","编译器","古月","安装","方案","d","无论","说"," ","upgrade","系统文件",".","colcon","一步","状态","到","现在","弹","环境变","]","所有","password","工具","nmcli","nodes","etc","create","李","文件","编译","activated","更","无法","那么","foxy","网络","git","大部分","做","信息","keyring","一下","添加","完善","支持","接下来","源","ondemand","ros","包都","第一步","ping","调整","root","成功","ros2","https","com","来","无线网络","我们","这些","main","好","解决","source","想要","base","\"","板卡","深度","&&","opt","起来","国内","变量","或","了解","文件夹","参考","系统软件","codename","#","同一个","里面","可选项","master","common","另外","不过","to","connect","第四","跟着","根据","软件","等待","如果","raw","需要","所",",","后续","修改","看到","陌生","保证","重要","等到","直接","系统","算力","不是","一些","第三","sys","并","org","最佳","信号","执行","更新","1","办公","github","performance","四行","apt","默认","用到","dpkg","上","互联网","网线","dev","在","gpg","功能模块","为止","还是","-","叫","不及","lsb","步骤","gitlab","很多","环境变量","有些"],"title":"系统配置","title_tokens":["系统配","配置","系统","系统配置","统配"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#togetherros","text":"无论是旭日X3派，还是TogetherROS，在正式使用之前，都还需要进行一些必要的配置，完善必要的功能模块，提供完整的算力支持，达到最佳状态。","text_tokens":["配置","需要","完善","完整","之前","模块","正式","使用","达到最佳","达到","功能","在","x3","还","派","无论是","算力","功能模块","旭日","还是","。","提供","支持","无论","的","最佳","进行","一些","，","都","状态","togetherros","必要"],"title":"TogetherROS系统配置","title_tokens":["系统配","配置","系统","系统配置","togetherros","统配"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_1","text":"第一个配置，是无线网络连接。 当然，大家也可以直接用网线连接旭日X3派和一个可以上网的路由器，不过更多时候，我们还是会使用无线网络来上网。 我们打开MobaXterm,选择SSH，使用root用户登录板卡；如果之前登录过板卡、还没有关闭的话，也可以继续使用。 现在我们可以通过命令行搜索周边环境有哪些WIFI信号，命令如下： $ sudo nmcli device wifi rescan #扫描当前环境里所有WIFI名称，但扫描结果不会显示 $ nmcli device wifi list #显示扫描到的WIFI名称 $ sudo nmcli device wifi connect <账号> password <密码> #连接WIFI $ sudo vim /etc/network/interfaces #修改DHCP配置 比如，我的办公室里wifi的名称是psmicro,我们就可以使用“sudo nmcli device wifi connect psmicro password <密码>”来连接。 等到终端返回信息“successfully activated\",就说明WIFI连接成功； 我们可以Ping古月居的网址，来检查一下连接。如果能够Ping通，就说明网络已经连接成功，现在就可以成功连接到互联网，进行后续的软件下载和更新了。 网络配置完成后，在后续开发中，大家就可以直接下载或更新各种软件包了。","text_tokens":["interfaces","说明","有","能够",">","ping","sudo","root","线网","<","网址","成功","多","打开","通过","”","已经","和","使用","公室","不会","来","无线网络","$","我们","的话","successfully","周边环境","可以","里","继续","检查一下","\"","配置","板卡","命令行","密码","mobaxterm","选择","终端","rescan","如下","或","wifi","、","x3","互联","关闭","派","结果","#","完成","旭日","扫描","。","/","不过","上网","用户","居","connect","dhcp","，","软件","路由器","第一个","名称","检查","账号","就","用","当然","如果","时候","路由","是",",","后续","没有","搜索","修改","“","当前","之前","周边","也","一个","ssh","登录","等到","直接","过","联网","下载","会","后","古月","psmicro","的","软件包"," ","我","但","了","到","信号","现在","更新","比如","办公","办公室","所有","password","第一","nmcli","大家","无线网","返回","etc","开发","各种","互联网","网线","vim","：","哪些","device","在","还","activated","更","通","还是","网络","环境","list","中","network","连接","信息","一下","命令","无线","进行","；","显示"],"title":"网络连接","title_tokens":["网络","网络连接","连接"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_2","text":"第二个配置，是更新当前旭日X3派所使用的Ubuntu镜像，和在电脑上使用的命令相同。 我们更新一下当前的系统镜像： $ sudo apt update #会按照当前软件源的域名设置去连接远程软件源 $ sudo apt full-upgrade #升级所有可以升级的软件包 弹出如下对话，我们选择“Y”，回车； 这样我们就完成了对系统更新的检查，并安装好了更新包。","text_tokens":["源","检查","弹","更新","配置","就","更新包","所有","这样","所","是","相同","远程","第二","apt","ubuntu","升级","第二个","出","sudo","“","当前","去","选择","如下","上","”","镜像","和","使用","：","按照","full","在","x3","派","系统","电脑","#","完成","旭日","会","设置","并","域名","安装","$","。","update","二个","我们","-","连接","y","回车","对系统","的","软件包","好","一下","命令"," ","upgrade","可以","；","，","软件","了","对话"],"title":"系统更新","title_tokens":["系统","更新"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#cpu","text":"第三个配置，设置CPU的调频策略，这是一个可选项，大家了解之后，在未来需要使用的时候进行配置即可。 动态调频 $ echo > ondemand /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让系统根据当前负载，动态调整CPU频率 满频模式 $ echo > performance /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让CPU始终以满频，也就1.2GHz的频率工作 打开超频 $ echo 1 > /sys/devices/system/cpu/cpufreq/boost #使CPU以超频，也就是1.5GHz的频率工作 关闭超频 $ echo 0 > /sys/devices/system/cpu/cpufreq/boost 这里CPU频率为，满频模式：1.2GHz，超频模式：1.5GHz。 大家需要注意，默认的系统配置是关闭超频、并且动态调频的配置。这样可以比较好地保证功率最优。","text_tokens":["ondemand","ghz","policy0",">","这里","三个","调整","cpufreq","governor","打开","使用","1.2","工作","设置","$","统配","_","1.5","好","可以","以","为","0","配置","超频","最优","了解","比较","、","关闭","#","策略","可选项","cpu","。","/","并且","根据","，","第三个","即可","这是","就","让","时候","devices","需要","这样","是","当前","也","一个","scaling","保证","系统配置","模式","频率","之后","未来","系统","动态","以满频","使","系统配","boost","的"," ","地","sys","第三","1","始终","performance","大家","负载","满频","默认","system","：","功率","就是","在","选项","调频","echo","可选","进行","注意"],"title":"CPU调频策略","title_tokens":["策略","调频","cpu"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2","text":"接下来，还有一个很重要的配置，那就是安装ROS2功能包，我们说TogetherROS是基于ROS2深度优化的，很多模块还是会复用ROS2中的功能，所有ROS2的原生功能也可以支持，这里我们就把ROS2必要的功能包都安装一下，让系统的功能模块更加完整。 熟悉ROS2的同学，应该对这些指令并不陌生，和ROS2官方手册中的安装步骤一致，不过还是建议大家跟着课程的步骤一起来安装一下。","text_tokens":["官方","就","配置","那","深度","更加","指令","让","所有","基于","包都","起来","是","完整","大家","复用","建议","这里","不","陌生","模块","一个","也","ros2","同学","原生","和","重要","对","手册","就是","功能","优化","包","系统","应该","功能模块","一","还是","一致","会","课程","安装","中","必要","。","我们","这些","还有","不过","的","接下","说","步骤","一下"," ","熟悉","可以","跟着","把","，","很","很多","并","togetherros","支持","下来","接下来"],"title":"安装ROS2功能包","title_tokens":["功能","ros2","包","安装"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2_1","text":"第一步我们需要更新系统软件源，并安装必要的下载工具。 $ sudo apt update && sudo apt install curl gnupg lsb-release #更新软件源 $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg #设置ROS2软件源秘钥 $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null #设置ROS2软件源 Attention 大部分国内开发者在这都会遇到同一个问题：网址无法连接。解决方案可以参考古月居官网上的这篇帖子： 《解决”Failed to connect to raw.githubusercontent.com“报错》","text_tokens":["源","ros","第一步",">","tee","ubuntu","ssl","sudo","signed","网址","https","ros2","deb","com","”","解决方案","下载工具","设置","$","我们","大部","_","main","print","--","遇到","install","问题","=","可以","同一","都","key","解决","source","必要","[","秘钥","\"","&&","《","国内","http","gnupg","参考","系统软件","codename","这","#","同一个","o","master","网上","githubusercontent","os","。","/","arch","architecture","开发者","to","share","connect","软件","，","packages","居官","(",":","raw","需要","“","attention","这篇","一个","curl","keyrings","null","帖子","系统","failed","下载","会","方案","安装","古月","d","update","》","的"," ",".","一步","并","org","更新","]","工具","第一","apt","release","sources","部分","dpkg","archive","etc","开发","|","：","dev","在","gpg","无法","报错","大部分","list","by","-","连接","lsb","echo","keyring","usr","rosdistro",")"],"title":"添加ROS2源","title_tokens":["添加","ros2","源"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2_2","text":"$ sudo apt update #更新软件源 $ sudo apt install ros-foxy-ros-base ros-foxy-demo-nodes-cpp # 安装ROS2功能包 时间会有些长，需要稍微等待一下。 现在ROS2就安装完成了。 大家可以使用同样的命令，继续安装ROS2中的更多功能包。 这里推荐大家先安装ROS2之后会使用到的编译器，比如python3-colcon-common-extensions。我们后续一些TogetherROS功能包的编译，也会使用python3-colcon-common的命令来安装。 $ sudo apt install python3-colcon-common-extensions # ROS2编译器 另外，我们推荐大家安装一个git工具，大家可以通过它下载GitHub、GitLab上的软件包，我们后续也会用到。安装命令为本小节代码第四行。 $ sudo apt install git # 安装git工具 到这里，我们常用的软件和功能包就安装完成了。我们可以看到，在旭日X3派文件目录/opt底下，除了之前的/tros文件夹外，还多出来一个/ros文件夹，里面就是我们刚才安装好的ros-foxy版本的所有系统文件。 如果大家要使用ROS2的功能包，也需要source里面的.bash或者.bat脚本文件。","text_tokens":["源","bash","ros","时间","目录","sudo","这里","件夹","小节","ros2","多","通过","demo","和","使用","功能","推荐","来","它","$","我们","tros","好","install","文件目录","可以","继续","第四行","source","base","opt","脚本","除了","代码","先","extensions","刚才","文件夹","要","稍微","、","x3","派","#","完成","里面","旭日","common","。","另外","/","出来","第四","软件","等待","，","bat","togetherros","长","就","如果","底下","需要","后续","看到","之前","也","一个","为本","常用","之后","系统","下载","编译器","会","安装","update","的","软件包","或者"," ","系统文件","一些","colcon",".","了","到","cpp","现在","更新","比如","github","所有","工具","四行","apt","大家","用到","nodes","python3","上","文件","编译","同样","就是","多功能","包","在","还","更","foxy","git","中","-","一下","命令","版本","gitlab","外","有些"],"title":"安装ROS2包","title_tokens":["包","ros2","安装"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_3","text":"为了方便我们在TogetherROS系统李调用ROS2的功能，在TogetherROS里提供了一个叫create_soft_link创建软链接的脚本，它而已通过软链接，把ROS2的环境变量链接到当前TogetherROS的环境包里来。执行以下命令： $ cd /opt/tros ## 使用/opt/tros目录下的create_soft_link.py创建ROS package至TogetherROS的软链接 $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros 这样设置以后，假如你source了TogetherROS的环境变量，那么同样的配置也会对ROS2生效。 好啦，到这里为止，所有必要的配置项我们都做完了，是不是有点迫不及待想要使用TogetherROS了呢？","text_tokens":["ros","py","有点","而已","目录","这里","ros2","通过","调用","使用","功能","生效","来","它","设置","$","我们","提供","tros","_","迫不及待","--","好","里","都","source","必要","想要","为了","配置","opt","脚本","变量","link","cd","soft","你","至","链接","？","方便","package","。","/","假如","##","创建","，","togetherros","呢","软","完","这样","以下","下","项","当前","是不是","也","一个","对","系统","会","包里","的","不是"," ",".","啦","了","到","执行","环境变","所有","python3","create","李","同样","：","在","那么","为止","foxy","环境","叫","做","不及","命令","把","环境变量","以后"],"title":"建立软链接","title_tokens":["链接","建立","软"]},{"location":"TogetherROS/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/","text":"TogetherROS示例运行 接下来，我们就在安装配置好TogetherROS的旭日X3派上，试一试系统自带的一些例程，确保整个系统已经可以正常运行。 通信测试 先来测试一下TogetherROS系统的通信功能。 我们需要启动两个终端，分别连接到旭日X3派上，并分别按以下命令配置环境变量。 终端1： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function 终端2： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 接下来，我们用ros2 run命令运行节点： 运行第一个例程： ros2 run example_rclcpp_minimal_publisher publisher_member_function 这是一个用C++写的最小化的发布者程序，其中节点叫publisher_member+function，按回车运行该节点。 可以看到这个节点开始不断循环发布信息，每次发布的信息为字符串形式，内容是“Hello,world! +数字”。 同样，在终端2的命令行窗口，输入以下命令并回车开启订阅者节点。 ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 这个订阅者节点会获取到、并显示出刚才发布者节点发布的信息。 通过这样一个例程，我们验证了两个节点之间的通信没有问题。这这是一个基于DDS的话题通信。 按CTRL+C可以关闭该例程。 通信系统没有问题了，如果你是一个ROS2的开发者，可能对刚才我们使用的ROS2命令比较熟悉，这时你可能也会产生一个问题：我们之前也安装了ROS2系统，那ROS2的原生功能还可以正常运行么？ 我们再来试一试ROS2中自带的一个例程。 和刚才一样打开两个终端，这里我们需要source一下ROS里的环境变量。该环境变量我们刚才已经设置了过软连接，所以配置过程中它也会配置ROS2的功能包路径。 在终端1输入命令： $ source /opt/tros/local_setup.bash 在终端2，也输入同样的命令，配置环境变量的脚本： 接下来运行两个ROS2的节点。 这两个节点的功能包是属于ROS2里的功能包,可以直接调用到。我们来尝试一下输入命令ros2 run，再输入功能包名称，如果按Tab自动补全文件名，说明可以找到对应的这个功能包： ros2 run demo_nodes_cpp talker talker也是一个发布者节点。按回车运行，可以看到终端1的发布者节点以每秒1次的频率发布消息。 同样，我们到终端2中打开订阅者节点： ros2 run demo_nodes_cpp listener 回车运行，很快两个终端间就建立了通讯。 这样就使用ROS2里的例程实现了话题通信连接，只不过这里我们使用的就是ROS2原生的功能包了，而不是TogetherROS的功能。 通信系统已经没问题了，但看上去似乎还不太直观。 目标检测 没问题，接下来，我们就运行一个更为直观的案例——目标检测。 在这个案例中，需要大家找一个USB的相机，连接到旭日X3拍的USB接口上。 在运行这个例程之前，需要确认两点：1.有一个USB相机已经连接到了旭日X3派板子上；2.有一个HDMI的显示器也连接到了旭日X3派板子上，它主要用于显示后续的图像检测的效果。 要确认USB相机已经正确连接到开发板，可以在终端输入命令“ls - dv\"查看当前设备号，默认把USB相机识别为vedio8，如果当前列表里能找到vedio8就说明相机被成功识别到了。 输入以下命令运行例程： $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 代码第一行，02例程的功能是通过相机动态采集图像，并对图像里的目标物体进行实时识别。 代码第二行，我们用python3来运行例程usb_camera_fcos.py，它的目标识别的功能是通过我们板卡中CPU的AI引擎来实现的。 我们输入以上两行代码，就开始驱动相机、并对相机里的图像做动态识别了。 此时如果有连接HDMI的显示器，就可以在显示器里看到动态识别的效果。 我们可以调整USB相机镜头的范围，去拍一些杯子、电脑、显示器等等，都可以把对应的目标物体识别到，并把对应的物体用彩色框给框出来；在框的左上角，就是识别到物体的名称、以及它识别的概率值了。 几个示例程序都可以正常运行了，说明当前的软硬件系统都已经准备就绪，到这里，我们才算是可以正式开始机器人开发了。","text_tokens":["bash","该","第二","所以","可能","节点","publisher","vedio8","包是","调用","软硬件","已经","minimal","功能","次","设置","范围","显示器","例程","问题","熟悉","都","以","测试","配置","看上","你","实时","案例","机器人","要","？","、","内容","派","发布","驱动","旭日","/","开发者","出来","示例","，","窗口","这是","彩色","就","软","物体","这样","出","自动","太","没有","以下","一样","不","也","02","直观","被","正常","动态","似乎","软硬","tab","的","号","了","自带","cpp","概率","字符","拍","基于","大家","接口","对应","开发","就是","包","还","sample","环境","中","开发板","连接","么","命令","进行","循环","；","说明","py","整个","启动","准备","相机","ai","world","!","通过","打开","准备就绪","和","发布者","算是","框出","它","$","tros","examples","验证","可以","为","二行","这个","找到","+","先","cd","才","刚才","比较","程序","分别","形式","x3","这","试一试","cpu","。","实现","以上","机器","usb","通信","镜头","togetherros","两个","建立","用","ctrl","那","等等","2","路径","第二行","当前","之前","杯子","字符串","function","一个","尝试","inference","对","频率","采集","会","c++","example","member","框","但","再","按","dds","第一","板子","run","python3","c","app","包了","同样","此时","：","电脑","两点","列表","最小","listener","把","两行","显示","下来","有","硬件","产生","这里","正确","正式","”","就绪","demo","使用","其中","确认","获取","_","数字","接下","里","dv","命令行","属于","脚本","间","主要","去","效果","终端","代码","图像","查看","原生","subscriber","关闭","回车","开始","hello","第一个","名称","左上","是","消息","“","—","写","过","安装","看上去"," ",".","到","用于","环境变","找","输入","nodes","文件","而","setup","识别","fcos","做","左上角","运行","信息","每次","一下","camera","框给","hdmi","接下来","ros","几个","调整","成功","ros2","一行","确保","来","引擎","我们","上去","很快","好","之间","能","source","\"","板卡","opt","设备","变量","补全","不过","ls","话题","如果","过程","需要",",","后续","第一行","看到","框出来","目标","值","每秒","订阅","直接","系统","检测","talker","不断","只不过","不是","local","文件名","开启","rclcpp","一些","并","通讯","1","没","这时","者","最小化","默认","上","以及","在","-","叫","环境变量","更为","上角"],"title":"示例运行","title_tokens":["运行","示例"]},{"location":"TogetherROS/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#togetherros","text":"接下来，我们就在安装配置好TogetherROS的旭日X3派上，试一试系统自带的一些例程，确保整个系统已经可以正常运行。","text_tokens":["就","配置","整个","下来","上","已经","在","x3","确保","派","系统","正常","旭日","试一试","安装","。","我们","的","接下","例程","运行","好","可以","一些","，","togetherros","自带","接下来"],"title":"TogetherROS示例运行","title_tokens":["运行","togetherros","示例"]},{"location":"TogetherROS/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#_1","text":"先来测试一下TogetherROS系统的通信功能。 我们需要启动两个终端，分别连接到旭日X3派上，并分别按以下命令配置环境变量。 终端1： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function 终端2： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 接下来，我们用ros2 run命令运行节点： 运行第一个例程： ros2 run example_rclcpp_minimal_publisher publisher_member_function 这是一个用C++写的最小化的发布者程序，其中节点叫publisher_member+function，按回车运行该节点。 可以看到这个节点开始不断循环发布信息，每次发布的信息为字符串形式，内容是“Hello,world! +数字”。 同样，在终端2的命令行窗口，输入以下命令并回车开启订阅者节点。 ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 这个订阅者节点会获取到、并显示出刚才发布者节点发布的信息。 通过这样一个例程，我们验证了两个节点之间的通信没有问题。这这是一个基于DDS的话题通信。 按CTRL+C可以关闭该例程。 通信系统没有问题了，如果你是一个ROS2的开发者，可能对刚才我们使用的ROS2命令比较熟悉，这时你可能也会产生一个问题：我们之前也安装了ROS2系统，那ROS2的原生功能还可以正常运行么？ 我们再来试一试ROS2中自带的一个例程。 和刚才一样打开两个终端，这里我们需要source一下ROS里的环境变量。该环境变量我们刚才已经设置了过软连接，所以配置过程中它也会配置ROS2的功能包路径。 在终端1输入命令： $ source /opt/tros/local_setup.bash 在终端2，也输入同样的命令，配置环境变量的脚本： 接下来运行两个ROS2的节点。 这两个节点的功能包是属于ROS2里的功能包,可以直接调用到。我们来尝试一下输入命令ros2 run，再输入功能包名称，如果按Tab自动补全文件名，说明可以找到对应的这个功能包： ros2 run demo_nodes_cpp talker talker也是一个发布者节点。按回车运行，可以看到终端1的发布者节点以每秒1次的频率发布消息。 同样，我们到终端2中打开订阅者节点： ros2 run demo_nodes_cpp listener 回车运行，很快两个终端间就建立了通讯。 这样就使用ROS2里的例程实现了话题通信连接，只不过这里我们使用的就是ROS2原生的功能包了，而不是TogetherROS的功能。 通信系统已经没问题了，但看上去似乎还不太直观。","text_tokens":["bash","ros","说明","启动","产生","该","所以","这里","可能","节点","publisher","ros2","world","!","”","通过","打开","已经","和","使用","包是","调用","demo","minimal","功能","发布者","其中","次","来","它","设置","$","获取","我们","tros","examples","_","上去","数字","例程","接下","很快","验证","问题","熟悉","可以","之间","里","以","测试","source","为","配置","opt","看上","命令行","属于","脚本","变量","间","补全","这个","找到","+","终端","先","你","刚才","比较","原生","？","、","subscriber","程序","内容","分别","形式","x3","关闭","派","这","发布","旭日","试一试","。","/","实现","回车","不过","开发者","开始","通信","hello","话题","，","窗口","togetherros","两个","第一个","名称","这是","建立","就","用","ctrl","那","如果","软","2","过程","需要","显示","出","是",",","这样","没有","以下","一样","路径","看到","自动","“","消息","不","之前","字符串","写","function","也","一个","尝试","直观","对","每秒","订阅","直接","频率","系统","过","正常","会","talker","似乎","安装","看上去","不断","只不过","c++","tab","的","不是","local","example","开启","文件名"," ","member",".","rclcpp","但","并","了","到","自带","cpp","通讯","再","按","太","1","环境变","dds","字符","没","基于","第一","这时","run","者","输入","最小化","nodes","c","上","对应","文件","开发","包了","同样","而","：","就是","在","包","还","setup","环境","中","叫","连接","运行","信息","每次","一下","么","命令","最小","循环","listener","环境变量","下来","接下来"],"title":"通信测试","title_tokens":["通信","测试"]},{"location":"TogetherROS/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#_2","text":"没问题，接下来，我们就运行一个更为直观的案例——目标检测。 在这个案例中，需要大家找一个USB的相机，连接到旭日X3拍的USB接口上。 在运行这个例程之前，需要确认两点：1.有一个USB相机已经连接到了旭日X3派板子上；2.有一个HDMI的显示器也连接到了旭日X3派板子上，它主要用于显示后续的图像检测的效果。 要确认USB相机已经正确连接到开发板，可以在终端输入命令“ls - dv\"查看当前设备号，默认把USB相机识别为vedio8，如果当前列表里能找到vedio8就说明相机被成功识别到了。 输入以下命令运行例程： $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 代码第一行，02例程的功能是通过相机动态采集图像，并对图像里的目标物体进行实时识别。 代码第二行，我们用python3来运行例程usb_camera_fcos.py，它的目标识别的功能是通过我们板卡中CPU的AI引擎来实现的。 我们输入以上两行代码，就开始驱动相机、并对相机里的图像做动态识别了。 此时如果有连接HDMI的显示器，就可以在显示器里看到动态识别的效果。 我们可以调整USB相机镜头的范围，去拍一些杯子、电脑、显示器等等，都可以把对应的目标物体识别到，并把对应的物体用彩色框给框出来；在框的左上角，就是识别到物体的名称、以及它识别的概率值了。 几个示例程序都可以正常运行了，说明当前的软硬件系统都已经准备就绪，到这里，我们才算是可以正式开始机器人开发了。","text_tokens":["说明","py","几个","有","硬件","第二","准备","这里","调整","相机","正确","vedio8","成功","ai","正式","就绪","通过","软硬件","准备就绪","已经","一行","功能","确认","算是","来","框出","它","引擎","$","范围","我们","显示器","_","例程","接下","问题","可以","里","dv","能","都","为","\"","板卡","二行","设备","下来","主要","去","这个","效果","找到","终端","代码","cd","实时","才","案例","图像","查看","机器人","要","、","程序","x3","派","驱动","旭日","cpu","。","/","实现","以上","机器","出来","开始","usb","ls","镜头","，","示例","名称","彩色","就","用","左上","如果","物体","等等","2","需要","是","后续","以下","第一行","看到","“","—","第二行","当前","之前","杯子","也","一个","框出来","02","目标","inference","直观","值","对","被","系统","采集","动态","检测","正常","软硬","的","号"," ","框",".","一些","了","并","到","用于","1","概率","找","没","拍","第一","板子","大家","输入","默认","python3","接口","上","对应","app","开发","上角","以及","此时","：","就是","在","识别","sample","两点","电脑","中","列表","fcos","-","开发板","连接","做","左上角","运行","命令","camera","框给","hdmi","进行","；","把","更为","两行","显示","接下来"],"title":"目标检测","title_tokens":["检测","目标"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/","text":"多节点话题通信 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 编程方法 了解了话题的基本原理，接下来我们就要开始编写代码啦。 创建工作空间 请大家先按照这个流程创建工作空间、下载课程的例程代码，并进行编译。 $ mkdir –p dev_ws/src $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build 运行示例程序 编译成功后，我们尝试运行话题通信的Hello World例程，在这个例程中，我们会先创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_topic_cpp talker $ ros2 run learning_topic_cpp listener 这就是TogetherROS系统中话题通信的方法，依然沿用了ROS2中话题通信的完整流程。 代码解析 发布者的实现方法publisher_member_function.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using namespace std :: chrono_literals ; /* This example creates a subclass of Node and uses std::bind() to register a * member function as a callback from the timer. */ class MinimalPublisher : public rclcpp :: Node { public : MinimalPublisher () : Node ( \"minimal_publisher\" ), count_ ( 0 ) { publisher_ = this -> create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & MinimalPublisher :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, world! \" + std :: to_string ( count_ ++ ); RCLCPP_INFO ( this -> get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者的实现方法subscriber_member_function.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using std :: placeholders :: _1 ; class MinimalSubscriber : public rclcpp :: Node { public : MinimalSubscriber () : Node ( \"minimal_subscriber\" ) { subscription_ = this -> create_subscription < std_msgs :: msg :: String > ( \"topic\" , 10 , std :: bind ( & MinimalSubscriber :: topic_callback , this , _1 )); } private : void topic_callback ( const std_msgs :: msg :: String :: SharedPtr msg ) const { RCLCPP_INFO ( this -> get_logger (), \"I heard: '%s'\" , msg -> data . c_str ()); } rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["bash","固定","发出","才能","该",">","argv","名字","特性","无关","可能","节点","<","叫做","publisher","最","sharedptr","argc","沿用","minimal","功能","成","报纸","的话","知识","例程","install","因为","private","都","以","存在","兴趣","0","指令","data","桥梁","像素","标准","你","实时","ws","机器人","要","？","、","const","驱动","发布","/","hpp","居","500","，","示例","长宽","就","关系","让","这样","太","没有","一样","minimalsubscriber","格式","在生活中","不","理解","自行","也","size","传递","只要","public","他会","被","感器","shared","模型","控制指令","似乎","后","数据结构","的","号","所谓","啦","中文","了","cpp","build","比如","字符","基于","传感","独立","是从","原理","大家","接收","接口","将","对应","各种","后缀","类似","就是","联系","控制","应该","t","中","作为","ms","语言","rgb","小编","微信","进行","10",")","spin","不知","接收数据","出去","完整","传感器","class","chrono","来看","相机","world","!","通过","视频","和","发布者","callback","它","课程","$","tros","传输","=","可以","千丝","从而","functional","return","英文","什么","包含","auto","void","类型","监控","这个","+","唯一","随处可见","先","cd","排版","请","词","谁","文章","各种各样","程序","某","这","比方","。","实现","机器","适合","通信","创建","register","togetherros","两个","info","会先","用","那","呢","复杂","*","(","等等","2","时候","块","就要","公众","数量","字符串","function","一个","没错","尝试","优先级","message","s","对","按照","一种","之后","creates","会","概念","收到","example","member","但","摇杆","魔性","再","dds","src","publishing","string","第一","std","placeholders","一份","run","数据传输","得到","i","c","tutorials","不能","方向","某种","此时","每","：","看","想","拍摄","一次","根本","&","编程","与","联系方式","listener","把","区分","注意","显示","下来","感兴","get","感兴趣","–","有","硬件","多个","这里","描述","逻辑性","杂志","多","”","同学","使用","千丝万缕","其中","基本","node","可见","工作","++","{","平时","获取","from","shutdown","各样","角度","_","接下","东西","指","%","里","[","learning","建议","间","代码","图像","查看","成为","subscriber","积木","wall","heard","打","某些","还有","接口定义","用户","开始","本身","uses","hello","minimalpublisher","名称","发送数据","memory","logger","一篇",":","是","subscription","消息","方法","“","要求","是不是","the","as","像","数据类型","make","下载","合适","init","literals","古月","chatter","给","通信模型","说"," ",";","画面","基本原理",".","colcon","到","统一","用于","周期","可视","and","]","得","3","听","编程语言","guyuehome","第一次","userdata","create","文件","编译","随处","数据","自然","最后","setup","无法","更","publish","git","做","msg","挺","既然","信息","运行","一下","接下来","bind","ros","仔细","每个","char","}","timer","https","成功","ros2","timerbase","com","int","万缕","拼接","阅读","gitee","subclass","组织","count","我们","方式","这些","main","流程","msgs","this","好","之间","对象","渲染","source","必然","\"","opt","设备","解析","不然","a","个","称之为","组成","知道","了解","传递数据","#","想下","另外","定义","结构","报社","to","b","据传","运动","逻辑","话题","str","为例","生活","如果","人","需要","从",",","修改","p","参数","发送","较强","值","重要","依然","include","订阅","优先","系统","topic","talker","using","clone","不是","local","一些","rclcpp","'","并","本原","空间","1","并不知道","想象","可视化","者","听说","异步","namespace","编写","上","dev","在","of","mkdir","还是","-","叫","很多","之为"],"title":"多节点话题通信","title_tokens":["节点","通信","多","话题"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["有","桥梁","独立","是","并","间","节点","最","传递","机器人","各种","重要","各种各样","万缕","数据","就是","功能","千丝万缕","联系","其中","一种","传递数据","它","会","。","实现","各样","这些","机器","方式","的","不是","联系方式"," ","之间","话题","，","但","了","千丝"],"title":"多节点话题通信","title_tokens":["节点","通信","多","话题"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["ros","有","才能","硬件","相机","节点","视频","功能","它","获取","我们","方式","传输","可以","之间","以","渲染","存在","必然","设备","桥梁","监控","这个","a","称之为","实时","机器人","图像","查看","要","？","某","这","驱动","。","实现","机器","用户","b","据传","话题","，","两个","为例","就","关系","这样","是","从","是不是","一个","没错","传递","给","的","不是"," ","了","到","可视","可视化","大家","数据传输","得到","将","上","方向","某种","数据","此时","想","拍摄","在","中","作为","做","信息","一下","之为","显示"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["感兴","感兴趣","固定","接收数据","有","出去","名字","特性","来看","节点","杂志","叫做","”","和","使用","成","发布者","可见","它","报纸","平时","组织","的话","角度","知识","好","传输","可以","都","对象","兴趣","什么","类型","这个","称之为","随处可见","排版","机器人","？","文章","成为","、","发布","比方","另外","/","实现","。","打","机器","居","本身","据传","话题","，","名称","发送数据","就","呢","生活","如果","等等","需要","这样","是","从","没有","格式","公众","“","在生活中","发送","要求","也","一个","对","他会","订阅","之后","模型","数据类型","会","古月","收到","的","号"," ","了","到","比如","dds","基于","是从","大家","接收","者","数据传输","随处","数据","每","就是","看","类似","自然","应该","无法","叫","小编","微信","把","之为"],"title":"发布/订阅模型","title_tokens":["订阅","/","模型","发布"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["ros","仔细","有","多个","每个","该","可能","节点","杂志","多","和","发布者","报纸","我们","这些","东西","因为","可以","里","存在","指令","建议","不然","这个","个","唯一","称之为","知道","机器人","要","谁","、","想下","发布","。","机器","通信","话题","，","如果","人","2","是","一样","公众","不","数量","发送","是不是","也","一个","没错","优先级","对","订阅","被","优先","模型","控制指令","似乎","的","不是","通信模型","号"," ","画面","并","了","摇杆","魔性","再","1","想象","3","听","大家","者","控制","还是","挺","一下","很多","之为","区分","注意"],"title":"多对多通信","title_tokens":["通信","多","对"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["不知","发出","有","传感器","特性","可能","逻辑性","叫做","同学","发布者","阅读","报纸","指","传输","可以","指令","什么","这个","你","知道","词","？","文章","某","这","发布","。","某些","还有","居","报社","适合","通信","运动","逻辑","话题","，","就","一篇","那","用","如果","让","时候","等等","是","太","修改","公众","不","参数","也","一个","只要","较强","订阅","感器","合适","后","古月","收到","的","号"," ","所谓","一些","了","用于","周期","比如","并不知道","传感","第一","第一次","一份","听说","者","异步","数据","类似","就是","控制","一次","根本","更"],"title":"异步通信","title_tokens":["通信","异步"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["ros","有","每个","这里","无关","描述","节点","通过","和","成","发布者","拼接","我们","方式","各样","传输","可以","都","英文","包含","像素","标准","称之为","组成","图像","机器人","、","各种各样","积木","发布","。","定义","结构","机器","接口定义","通信","据传","话题","，","长宽","就","复杂","等等","块","这样","是","一样","格式","消息","理解","自行","也","一个","值","订阅","一种","像","系统","会","概念","数据结构","的","说"," ",".","中文","了","统一","比如","得","编程语言","者","接口","数据传输","对应","不能","文件","各种","后缀","数据","在","最后","编程","中","与","msg","语言","既然","rgb","进行","之为"],"title":"消息接口","title_tokens":["接口","消息"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_7","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。","text_tokens":["原理","就要","代码","编写","了解","基本","。","我们","的","接下","开始","基本原理","话题","，","啦","了","本原","下来","接下来"],"title":"编程方法","title_tokens":["编程","方法"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_8","text":"请大家先按照这个流程创建工作空间、下载课程的例程代码，并进行编译。 $ mkdir –p dev_ws/src $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build","text_tokens":["build","–","src",":","大家","guyuehome","p","userdata","这个","代码","先","cd","https","tutorials","ws","com","请","编译","、","按照","dev","mkdir","工作","下载","gitee","git","课程","$","。","/","clone","_","流程","的","例程"," ","创建","进行",".","，","colcon","并","togetherros","空间"],"title":"创建工作空间","title_tokens":["空间","工作","创建"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_9","text":"编译成功后，我们尝试运行话题通信的Hello World例程，在这个例程中，我们会先创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_topic_cpp talker $ ros2 run learning_topic_cpp listener 这就是TogetherROS系统中话题通信的方法，依然沿用了ROS2中话题通信的完整流程。","text_tokens":["再","会先","周期","bash","ros","cpp","字符","opt","string","learning","是","完整","类型","消息","接收","run","“","者","方法","标准","这个","字符串","发送","一个","成功","尝试","ros2","world","”","编译","沿用","依然","就是","订阅","发布者","在","setup","这","系统","发布","topic","talker","后","中","$","。","定义","我们","/","togetherros","chatter","tros","_","的","例程","local","运行","流程","通信","install","hello"," ","创建","listener","话题","，",".","了","到","source","从而"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_10","text":"发布者的实现方法publisher_member_function.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using namespace std :: chrono_literals ; /* This example creates a subclass of Node and uses std::bind() to register a * member function as a callback from the timer. */ class MinimalPublisher : public rclcpp :: Node { public : MinimalPublisher () : Node ( \"minimal_publisher\" ), count_ ( 0 ) { publisher_ = this -> create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & MinimalPublisher :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, world! \" + std :: to_string ( count_ ++ ); RCLCPP_INFO ( this -> get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者的实现方法subscriber_member_function.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using std :: placeholders :: _1 ; class MinimalSubscriber : public rclcpp :: Node { public : MinimalSubscriber () : Node ( \"minimal_subscriber\" ) { subscription_ = this -> create_subscription < std_msgs :: msg :: String > ( \"topic\" , 10 , std :: bind ( & MinimalSubscriber :: topic_callback , this , _1 )); } private : void topic_callback ( const std_msgs :: msg :: String :: SharedPtr msg ) const { RCLCPP_INFO ( this -> get_logger (), \"I heard: '%s'\" , msg -> data . c_str ()); } rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["bind","spin",">","char","argv","class","}","chrono","<","timer","publisher","timerbase","sharedptr","world","!","argc","int","minimal","发布者","node","callback","++","{","subclass","count","from","shutdown","_","main","msgs","this","=","%","private","[","functional","\"","0","return","data","auto","void","a","+","subscriber","const","#","wall","发布","heard","实现","/","hpp","500","to","uses","hello","register","minimalpublisher","info","str","memory","logger","(","*",":",",","minimalsubscriber","subscription","方法","function","size","the","message","public","as","s","include","订阅","creates","shared","make","init","topic","literals","using","的","example"," ",";","member",".","rclcpp","'","cpp","and","1","publishing","]","string","std","placeholders","者","namespace","i","c","create","：","of","publish","t","&","-","msg","ms","10",")","get"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/","text":"多节点服务通信 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 编程方法 了解了服务通信的原理，接下来我们就要开始编写代码啦，我们尝试通过服务实现一个加法求解器的功能。 运行示例程序 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 我们一起操作下这个例程。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_service_cpp server $ ros2 run learning_service_cpp client 2 3 话题和服务是最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 代码解析 服务器端add_two_ints_server.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <memory> void add ( const std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Request> request, std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Response> response ) { response->sum = request->a + request->b ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Incoming request\\na: %ld\" \" b: %ld\" , request->a, request->b ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"sending back response: [%ld]\" , ( long int ) response->sum ) ; } int main ( int argc, char **argv ) { rclcpp::init ( argc, argv ) ; std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared ( \"add_two_ints_server\" ) ; rclcpp::Service<learning_service_cpp::srv::AddTwoInts>::SharedPtr service = node->create_service<learning_service_cpp::srv::AddTwoInts> ( \"add_two_ints\" , & add ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Ready to add two ints.\" ) ; rclcpp::spin ( node ) ; rclcpp::shutdown () ; } 客户端add_two_ints_client.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <chrono> #include <cstdlib> #include <memory> using namespace std :: chrono_literals ; int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); if ( argc != 3 ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"usage: add_two_ints_client X Y\" ); return 1 ; } std :: shared_ptr < rclcpp :: Node > node = rclcpp :: Node :: make_shared ( \"add_two_ints_client\" ); rclcpp :: Client < learning_service_cpp :: srv :: AddTwoInts >:: SharedPtr client = node -> create_client < learning_service_cpp :: srv :: AddTwoInts > ( \"add_two_ints\" ); auto request = std :: make_shared < learning_service_cpp :: srv :: AddTwoInts :: Request > (); request -> a = atoll ( argv [ 1 ]); request -> b = atoll ( argv [ 2 ]); while ( ! client -> wait_for_service ( 1 s )) { if ( ! rclcpp :: ok ()) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Interrupted while waiting for the service. Exiting.\" ); return 0 ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"service not available, waiting again...\" ); } auto result = client -> async_send_request ( request ); // Wait for the result. if ( rclcpp :: spin_until_future_complete ( node , result ) == rclcpp :: FutureReturnCode :: SUCCESS ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"Sum: %ld\" , result . get () -> sum ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Failed to call service add_two_ints\" ); } rclcpp :: shutdown (); return 0 ; }","text_tokens":["back","bash",">","argv","所以","可能","节点","server","<","叫做","sharedptr","argc","功能","成","available","域名","until","网页","例程","install","求解","继续","都","存在","0","指令","判断","数据通信","红色","标准","你","机器人","要","应答","宕机","、","结果","const","答","发布","驱动","等","发","希望","/","na","hpp","居","，","示例","处理","就","物体","usage","这样","一样","没有","访问","在生活中","不","也","是否","传递","这种","视觉","感器","shared","模型","并不需要","addtwoints","控制指令","后","request","的","或者","我","啦","了","cpp","比如","一直","数据通","传感","原理","大家","接收","完全","接口","返回","两种","将","各种","client","跟随","越快越好","类似","就是","控制","这么","success","中","long","命令","加法","进行","很","变成",")","spin","出去","周期性","传感器","ok","chrono","来看","相机","针对","苹果","浏览","!","通过","和","不同","发布者","计算","课程","$","y","提供","tros","传输","=","可以","为","return","auto","void","interrupted","这个","然后","+","唯一","服务器发送","界面","高","程序","形式","半天","。","实现","学习","机器","while","sending","适合","通信","介绍","两个","info","查询","(","*","时候","2","cstdlib","有所","下","就要","之前","一个","尝试","核心","一问一答","s","对","图像识别","按照","常用","频率","一种","好像","之后","会","讲","收到","尽快","转圈","但","简称","请求","常见","求和","two","std","x","部分","时","run","得到","同样","此时","：","每","后者","电脑","&","编程","result","for","srv","下来","get","最为","多个","那有","问","经常","多","”","send","使用","其中","node","ld","{","again","获取","shutdown","_","接下","%","同步性","[","response","learning","error","展现","效果","代码","客户端","图像","成为","发给","务器","某些","同步","还有","开始","网站","call","memory","logger",":","是","附近","complete","消息","方法","“","—","当","要求","waiting","the","atoll","向","服务","failed","make","init","\\","古月","上层","literals","not","给","通信模型"," ",";",".","状态","到","sum","周期","exiting","]","3","反应","假设","create","准确","文件","本","前者","数据","单向","setup","无法","识别","更","器","具体","网络","msg","运行","信息","不好","接下来","ros","一对","服务器","char","}","ros2","service","wait","某个","int","有所不同","位置","反馈","一般","我们","这些","main","add","future","机制","之间","相比","source","想要","ready","\"","opt","解析","a","称之为","知道","了解","但是","客户","...","传递数据","#","另外","定义","to","b","运动","话题","ints","一起","incoming","futurereturncode","页面","生活","人","过程","if","需要","else","从","后续",",","看到","发送","目标","越好","include","而是","订阅","浏览器","转圈圈","应用","using","封装","local","越快","ptr","rclcpp","并","async","1","cs","者","服务器端","异步","namespace","编写","上","坐标","加数","在","还是","最新","圈圈","-","操作","之为"],"title":"多节点服务通信","title_tokens":["节点","通信","多","服务"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["ros","多个","消息","方法","者","—","问","效果","节点","异步","你","将","知道","是否","准确","本","使用","数据","这种","单向","常用","订阅","发布者","一种","类似","服务","无法","答","发布","另外","实现","我们","。","讲","收到","学习","同步","的","通信","传输"," ","机制","可以","之间","我","话题","，","一起"],"title":"多节点服务通信","title_tokens":["节点","通信","多","服务"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["ros","问","相机","节点","通过","service","和","使用","不同","有所不同","其中","位置","反馈","课程","我们","传输","机制","可以","继续","红色","这个","然后","你","图像","机器人","应答","高","成为","形式","答","驱动","发布","发给","发","希望","另外","实现","。","机器","通信","运动","话题","，","查询","物体","时候","需要","这样","是","有所","一样","附近","之前","发送","一个","目标","对","图像识别","按照","而是","订阅","频率","好像","这种","服务","并不需要","应用","模型","上层","的","通信模型","或者"," ","尽快","我","并","了","到","请求","周期","比如","一直","得到","此时","跟随","数据","单向","在","这么","更","识别","最新","中","信息","变成"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["请求","就","比如","页面","生活","常见","时候","cs","操作","需要","服务器","从","并","问","服务器端","在生活中","展现","来看","针对","发送","浏览","你","返回","也","叫做","服务器发送","上","客户端","经常","通过","各种","应答","某个","数据","客户","这种","此时","浏览器","就是","向","形式","在","服务","之后","反馈","答","模型","电脑","具体","会","域名","。","/","实现","务器","我们","某些","收到","网页","的","或者","网站","信息","通信"," ","机制","进行","我","，","很","简称","处理","为"],"title":"客户端/服务器模型","title_tokens":["/","服务","模型","客户端","服务器","务器","客户"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["一直","判断","过程","反应","服务器","是","没有","所以","那有","接收","服务器端","假设","这个","要求","可能","称之为","浏览","你","也","客户端","通过","宕机","越好","应答","越快越好","客户","浏览器","在","半天","服务","转圈圈","不好","一般","网络","到","中","。","务器","圈圈","我们","之为","同步","的","或者","信息","越快","通信","可以","转圈","话题","，","了","状态","相比"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["比如","人","多个","是","服务器","一样","没有","访问","大家","看到","所以","服务器端","不","这个","完全","唯一","一个","界面","客户端","但是","同样","客户","每","服务","模型","古月","中","。","务器","居","的","通信模型","网站","通信","可以","，","但","都","并","存在"],"title":"一对多通信","title_tokens":["多","通信","一对"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["请求","比如","ros","是","后续","部分","一样","大家","消息","方法","标准","苹果","也","一个","核心","传递","文件","要","和","使用","数据","类似","传递数据","坐标","在","位置","服务","反馈","还是","会","中","。","定义","我们","msg","这些","还有","给","的","通信","介绍","命令"," ","话题","，",".","了","变成","srv","两个"],"title":"服务接口","title_tokens":["接口","服务"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_7","text":"了解了服务通信的原理，接下来我们就要开始编写代码啦，我们尝试通过服务实现一个加法求解器的功能。","text_tokens":["原理","就要","代码","一个","编写","了解","尝试","通过","功能","服务","器","。","实现","我们","的","接下","开始","通信","加法","求解","啦","，","了","下来","接下来"],"title":"编程方法","title_tokens":["编程","方法"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_8","text":"当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 我们一起操作下这个例程。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_service_cpp server $ ros2 run learning_service_cpp client 2 3 话题和服务是最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。","text_tokens":["bash","最为","出去","周期性","服务器","传感器","针对","节点","server","ros2","”","通过","service","和","成","位置","反馈","计算","$","获取","我们","提供","tros","_","例程","add","install","传输","可以","同步性","source","想要","指令","opt","数据通信","learning","这个","客户端","应答","高","、","客户","结果","等","。","务器","/","同步","机器","开始","适合","通信","话题","，","ints","一起","两个","就","2","需要","是","下","方法","“","当","发送","要求","目标","一问一答","常用","服务","之后","视觉","感器","控制指令","后","封装","给","收到","的","local"," ","啦",".","并","到","cpp","请求","周期","比如","求和","数据通","传感","3","two","时","run","服务器端","两种","得到","将","前者","client","数据","单向","加数","控制","setup","后者","更","识别","加法","进行","操作"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_9","text":"服务器端add_two_ints_server.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <memory> void add ( const std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Request> request, std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Response> response ) { response->sum = request->a + request->b ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Incoming request\\na: %ld\" \" b: %ld\" , request->a, request->b ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"sending back response: [%ld]\" , ( long int ) response->sum ) ; } int main ( int argc, char **argv ) { rclcpp::init ( argc, argv ) ; std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared ( \"add_two_ints_server\" ) ; rclcpp::Service<learning_service_cpp::srv::AddTwoInts>::SharedPtr service = node->create_service<learning_service_cpp::srv::AddTwoInts> ( \"add_two_ints\" , & add ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Ready to add two ints.\" ) ; rclcpp::spin ( node ) ; rclcpp::shutdown () ; } 客户端add_two_ints_client.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <chrono> #include <cstdlib> #include <memory> using namespace std :: chrono_literals ; int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); if ( argc != 3 ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"usage: add_two_ints_client X Y\" ); return 1 ; } std :: shared_ptr < rclcpp :: Node > node = rclcpp :: Node :: make_shared ( \"add_two_ints_client\" ); rclcpp :: Client < learning_service_cpp :: srv :: AddTwoInts >:: SharedPtr client = node -> create_client < learning_service_cpp :: srv :: AddTwoInts > ( \"add_two_ints\" ); auto request = std :: make_shared < learning_service_cpp :: srv :: AddTwoInts :: Request > (); request -> a = atoll ( argv [ 1 ]); request -> b = atoll ( argv [ 2 ]); while ( ! client -> wait_for_service ( 1 s )) { if ( ! rclcpp :: ok ()) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Interrupted while waiting for the service. Exiting.\" ); return 0 ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"service not available, waiting again...\" ); } auto result = client -> async_send_request ( request ); // Wait for the result. if ( rclcpp :: spin_until_future_complete ( node , result ) == rclcpp :: FutureReturnCode :: SUCCESS ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"Sum: %ld\" , result . get () -> sum ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Failed to call service add_two_ints\" ); } rclcpp :: shutdown (); return 0 ; }","text_tokens":["back","spin","服务器",">","char","argv","}","ok","chrono","server","<","sharedptr","!","service","argc","wait","send","int","available","node","ld","{","again","y","shutdown","until","_","main","add","future","=","%","[","ready","\"","return","0","response","auto","void","learning","interrupted","error","a","+","客户端","客户","...","const","#","/","务器","na","while","hpp","to","sending","b","call","ints","incoming","info","futurereturncode","memory","logger","(","*",":","2","if","usage","else",",","cstdlib","complete","waiting","the","atoll","s","include","服务","addtwoints","failed","shared","make","init","\\","literals","using","request","not","ptr"," ",";",".","rclcpp","cpp","sum","async","exiting","1","]","3","two","std","x","服务器端","namespace","create","client","：","success","&","-","result","long","for","srv",")","get"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/","text":"多节点动作通信 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 编程方法 相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 运行示例程序 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_action_cpp server $ ros2 run learning_action_cpp client 代码解析 动作的服务器fibonacci_action_server.cpp： #include <inttypes.h> #include <memory> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO(jacobperron): Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionServer : public rclcpp :: Node { public : using Fibonacci = learning_action_cpp :: action :: Fibonacci ; using GoalHandleFibonacci = rclcpp_action :: ServerGoalHandle < Fibonacci > ; explicit MinimalActionServer ( const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : Node ( \"minimal_action_server\" , options ) { using namespace std :: placeholders ; this -> action_server_ = rclcpp_action :: create_server < Fibonacci > ( this -> get_node_base_interface (), this -> get_node_clock_interface (), this -> get_node_logging_interface (), this -> get_node_waitables_interface (), \"fibonacci\" , std :: bind ( & MinimalActionServer :: handle_goal , this , _1 , _2 ), std :: bind ( & MinimalActionServer :: handle_cancel , this , _1 ), std :: bind ( & MinimalActionServer :: handle_accepted , this , _1 )); } private : rclcpp_action :: Server < Fibonacci >:: SharedPtr action_server_ ; rclcpp_action :: GoalResponse handle_goal ( const rclcpp_action :: GoalUUID & uuid , std :: shared_ptr < const Fibonacci :: Goal > goal ) { RCLCPP_INFO ( this -> get_logger (), \"Received goal request with order %d\" , goal -> order ); ( void ) uuid ; // Let's reject sequences that are over 9000 if ( goal -> order > 9000 ) { return rclcpp_action :: GoalResponse :: REJECT ; } return rclcpp_action :: GoalResponse :: ACCEPT_AND_EXECUTE ; } rclcpp_action :: CancelResponse handle_cancel ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Received request to cancel goal\" ); ( void ) goal_handle ; return rclcpp_action :: CancelResponse :: ACCEPT ; } void execute ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Executing goal\" ); rclcpp :: Rate loop_rate ( 1 ); const auto goal = goal_handle -> get_goal (); auto feedback = std :: make_shared < Fibonacci :: Feedback > (); auto & sequence = feedback -> sequence ; sequence . push_back ( 0 ); sequence . push_back ( 1 ); auto result = std :: make_shared < Fibonacci :: Result > (); for ( int i = 1 ; ( i < goal -> order ) && rclcpp :: ok (); ++ i ) { // Check if there is a cancel request if ( goal_handle -> is_canceling ()) { result -> sequence = sequence ; goal_handle -> canceled ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Canceled\" ); return ; } // Update sequence sequence . push_back ( sequence [ i ] + sequence [ i - 1 ]); // Publish feedback goal_handle -> publish_feedback ( feedback ); RCLCPP_INFO ( this -> get_logger (), \"Publish Feedback\" ); loop_rate . sleep (); } // Check if goal is done if ( rclcpp :: ok ()) { result -> sequence = sequence ; goal_handle -> succeed ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Succeeded\" ); } } void handle_accepted ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { using namespace std :: placeholders ; // this needs to return quickly to avoid blocking the executor, so spin up a new thread std :: thread { std :: bind ( & MinimalActionServer :: execute , this , _1 ), goal_handle }. detach (); } }; // class MinimalActionServer int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); auto action_server = std :: make_shared < MinimalActionServer > (); rclcpp :: spin ( action_server ); rclcpp :: shutdown (); return 0 ; } 动作的客户端fibonacci_action_client.cpp： #include <inttypes.h> #include <memory> #include <string> #include <iostream> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO ( jacobperron ) : Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionClient : public rclcpp::Node { public: using Fibonacci = learning_action_cpp::action::Fibonacci ; using GoalHandleFibonacci = rclcpp_action::ClientGoalHandle<Fibonacci> ; explicit MinimalActionClient ( const rclcpp::NodeOptions & node_options = rclcpp::NodeOptions ()) : Node ( \"minimal_action_client\" , node_options ) , goal_done_ ( false ) { this->client_ptr_ = rclcpp_action::create_client<Fibonacci> ( this->get_node_base_interface () , this->get_node_graph_interface () , this->get_node_logging_interface () , this->get_node_waitables_interface () , \"fibonacci\" ) ; this->timer_ = this->create_wall_timer ( std::chrono::milliseconds ( 500 ) , std::bind ( & MinimalActionClient::send_goal, this )) ; } bool is_goal_done () const { return this->goal_done_ ; } void send_goal () { using namespace std::placeholders ; this->timer_->cancel () ; this->goal_done_ = false ; if ( !this->client_ptr_ ) { RCLCPP_ERROR ( this->get_logger () , \"Action client not initialized\" ) ; } if ( !this->client_ptr_->wait_for_action_server ( std::chrono::seconds ( 10 ))) { RCLCPP_ERROR ( this->get_logger () , \"Action server not available after waiting\" ) ; this->goal_done_ = true ; return ; } auto goal_msg = Fibonacci::Goal () ; goal_msg.order = 10 ; RCLCPP_INFO ( this->get_logger () , \"Sending goal\" ) ; auto send_goal_options = rclcpp_action::Client<Fibonacci>::SendGoalOptions () ; send_goal_options.goal_response_callback = std::bind ( & MinimalActionClient::goal_response_callback, this, _1 ) ; send_goal_options.feedback_callback = std::bind ( & MinimalActionClient::feedback_callback, this, _1, _2 ) ; send_goal_options.result_callback = std::bind ( & MinimalActionClient::result_callback, this, _1 ) ; auto goal_handle_future = this->client_ptr_->async_send_goal ( goal_msg, send_goal_options ) ; } private: rclcpp_action::Client<Fibonacci>::SharedPtr client_ptr_ ; rclcpp::TimerBase::SharedPtr timer_ ; bool goal_done_ ; void goal_response_callback ( std::shared_future<GoalHandleFibonacci::SharedPtr> future ) { auto goal_handle = future.get () ; if ( !goal_handle ) { RCLCPP_ERROR ( this->get_logger () , \"Goal was rejected by server\" ) ; } else { RCLCPP_INFO ( this->get_logger () , \"Goal accepted by server, waiting for result\" ) ; } } void feedback_callback ( GoalHandleFibonacci::SharedPtr, const std::shared_ptr<const Fibonacci::Feedback> feedback ) { RCLCPP_INFO ( this->get_logger () , \"Next number in sequence received: %\" PRId32, feedback->sequence.back ()) ; } void result_callback ( const GoalHandleFibonacci::WrappedResult & result ) { this->goal_done_ = true ; switch ( result.code ) { case rclcpp_action::ResultCode::SUCCEEDED: break ; case rclcpp_action::ResultCode::ABORTED: RCLCPP_ERROR ( this->get_logger () , \"Goal was aborted\" ) ; return ; case rclcpp_action::ResultCode::CANCELED: RCLCPP_ERROR ( this->get_logger () , \"Goal was canceled\" ) ; return ; default: RCLCPP_ERROR ( this->get_logger () , \"Unknown result code\" ) ; return ; } RCLCPP_INFO ( this->get_logger () , \"Result received\" ) ; for ( auto number : result.result->sequence ) { RCLCPP_INFO ( this->get_logger () , \"%\" PRId32, number ) ; } } } ; // class MinimalActionClient int main ( int argc, char ** argv ) { rclcpp::init ( argc, argv ) ; auto action_client = std::make_shared<MinimalActionClient> () ; while ( !action_client->is_goal_done ()) { rclcpp::spin_some ( action_client ) ; } rclcpp::shutdown () ; return 0 ; }","text_tokens":["back","bash","发出","才能","每隔",">","argv","once","名字","可能","节点","server","<","sharedptr","milliseconds","调用","argc","就此结束","minimal","功能","available","简单","cancelresponse","reject","code","resultcode","例程","install","private","都","goalhandlefibonacci","sleep","blocking","0","指令","unknown","表示","switch","实时","机器人","分拣","？","动","、","管理","动图","const","一","等","发布","accept","/","hpp","500","accepted","，","示例","so","就","让","这样","没有","一样","不","理解","也","sequence","todo","public","这种","装","达到","interface","被","干什么","shared","模型","需求","let","后","眼前","request","姿态","一点一点","的","告诉","应用层","了","cpp","handle","aborted","比如","基于","360","uuid","大家","接口","多少","同时","常常","一段时间","client","类似","就是","控制","这么","还","中","sendgoaloptions","by","detach","succeeded","仅仅","executing","命令","10","进行","进度","很",")","spin","整个","较长","done","某一","remove","完整","三个","ok","class","chrono","prid32","又","case","with","!","度","直到","和","发布者","callback","are","$","tros","肯定","=","可以","return","什么","auto","h","void","就此","succeed","这个","+","先","多少度","智能","程序","initialized","这","完成","臂","由","cancel","quickly","wrappedresult","。","实现","合成","机器","while","seconds","sending","通信","介绍","有没有","included","new","_-","两个","info","inttypes","那","复杂","(","*","2","转个","下","当前","之前","after","只有","一个","没错","received","s","对","waitables","一种","goal","之后","会","check","取消","概念","update","一点","哪里","收到","explicit","转圈","请求","再","string","action","std","placeholders","时","run","i","：","上边","看","想","还会","根本","&","编程","result","底层","for","送货","把","get","有","时间","多个","clientgoalhandle","fibonacci","含义","模块","隐藏","例子","多","结束","send","使用","只能","there","execute","node","当中","++","{","9000","shutdown","_","%","[","response","转","其","learning","error","thread","代码","客户端","随时","push","was","圈","canceling","wall","true","务器","同步","开始","应带","clock","some","loop","发现","part","memory","logger",":","是","方法","—","便于","当","不仅仅","是不是","waiting","导航","the","相对","as","that","avoid","像","服务","不仅","过","送餐","make","init","合适","d","not","break","进度条","通信模型","竟然"," ",";","goalresponse","抓取",".","状态","到","it","needs","周期","现在","通信接口","and","所处","行为","]","得","false","秘密","假设","create","文件","分析","in","数据","next","setup","识别","publish","具体","20","msg","既然","运行","信息","iostream","一下","rate","机械","bind","一边","ros","仔细","一对","服务器","bool","number","char","段时间","}","旋转","动作","order","timer","ros2","timerbase","wait","某个","int","logging","其实","控","反馈","来","一段","我们","30","这些","main","流程","this","好","future","机制","键盘","相比","source","sequences","base","\"","is","&&","毕竟","opt","起来","解析","over","executor","a","满足","知道","minimalactionserver","但是","jacobperron","客户","#","举个","nodeoptions","up","minimalactionclient","另外","定义","canceled","to","default","运动","话题","如果","过程","if","需要","else","从",",","发送","目标","goaluuid","include","订阅","系统","应用","using","不是","local","ptr","rclcpp","'","并","执行","async","1","feedback","graph","服务器端","者","用到","到底","namespace","上","遥控","目的","坐标","场景","of","在","rejected","options","servergoalhandle","-","1s","更为"],"title":"多节点动作通信","title_tokens":["节点","通信","多","动作"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["就","ros","那","复杂","对","行为","某一","需要","是","从","完整","名字","—","便于","用到","不仅仅","这个","动作","理解","满足","含义","也","一个","上","机器人","分拣","目标","常常","遥控","某个","智能","、","这种","目的","就是","功能","场景","一种","在","被","这么","简单","管理","不仅","系统","识别","送餐","等","需求","应用","具体","会","中","概念","。","实现","我们","另外","这些","机器","的","流程","仅仅","通信","好"," ","运动","机制","可以","进行","键盘","送货","，","很","并"],"title":"多节点动作通信","title_tokens":["节点","通信","多","动作"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["发出","才能","时间","每隔","段时间","ok","旋转","动作","例子","结束","度","直到","使用","控","反馈","当中","一段","我们","30","肯定","机制","可以","指令","转","表示","知道","机器人","多少度","随时","？","、","圈","这","完成","举个","。","机器","开始","通信","有没有","运动","，","就","如果","让","过程","转个","需要","这样","是","没有","不","当前","发送","一个","装","像","之后","合适","后","取消","眼前","一点","一点一点","哪里","的","不是","告诉","进度条"," ","转圈","了","并","到","再","执行","现在","比如","行为","得","360","假设","到底","多少","一段时间","想","在","根本","还","20","1s","信息","一下","命令","10","进度","把","更为"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["再","执行","周期","就","一边","所处","什么","如果","让","整个","过程","起来","就此","服务器","是","服务器端","当前","这个","当","动作","发送","可能","又","实时","也","同时","一个","客户端","导航","机器人","结束","目标","和","使用","动","就此结束","客户","类似","达到","坐标","想","控制","服务","之后","干什么","反馈","模型","臂","后","中","。","务器","姿态","机器","收到","的","开始","信息","通信"," ","运动","机械","抓取","，","状态"],"title":"客户端/服务器模型","title_tokens":["/","服务","模型","客户端","服务器","务器","客户"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["执行","毕竟","有","才能","多个","服务器","大家","一样","下","服务器端","动作","发送","只有","先","一个","客户端","机器人","但是","和","只能","客户","服务","完成","中","。","务器","机器","的","通信","命令","运动","可以","，","都"],"title":"一对多通信","title_tokens":["多","通信","一对"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["通信接口","那","有","过程","action","是","之前","动作","接口","也","文件","使用","数据","一种","过","反馈","中","。","定义","我们","同步","的","既然","通信","介绍","机制","进行",".","，"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["请求","再","周期","仔细","有","基于","表示","过程","其","是","服务器","大家","时","秘密","下","服务器端","者","三个","当","动作","发送","是不是","模块","一个","隐藏","客户端","也","没错","调用","目标","和","使用","上边","客户","就是","看","发布者","订阅","还会","一种","动图","服务","其实","反馈","来","发布","应用","会","。","务器","实现","收到","的","不是","通信","竟然","命令"," ","运动","应用层","机制","底层","应带","话题","，","发现","两个"],"title":"由服务和话题合成","title_tokens":["服务","由","话题","和","合成"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_7","text":"相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["较长","起来","之前","动作","分析","和","相对","程序","服务","一","。","我们","的","例程","运行","通信","一下","话题","，","并","相比"],"title":"编程方法","title_tokens":["编程","方法"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_8","text":"$ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_action_cpp server $ ros2 run learning_action_cpp client","text_tokens":["bash","opt","action","learning","run","server","ros2","client","setup","$","/","tros","_","local","install"," ",".","source","cpp"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_9","text":"动作的服务器fibonacci_action_server.cpp： #include <inttypes.h> #include <memory> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO(jacobperron): Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionServer : public rclcpp :: Node { public : using Fibonacci = learning_action_cpp :: action :: Fibonacci ; using GoalHandleFibonacci = rclcpp_action :: ServerGoalHandle < Fibonacci > ; explicit MinimalActionServer ( const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : Node ( \"minimal_action_server\" , options ) { using namespace std :: placeholders ; this -> action_server_ = rclcpp_action :: create_server < Fibonacci > ( this -> get_node_base_interface (), this -> get_node_clock_interface (), this -> get_node_logging_interface (), this -> get_node_waitables_interface (), \"fibonacci\" , std :: bind ( & MinimalActionServer :: handle_goal , this , _1 , _2 ), std :: bind ( & MinimalActionServer :: handle_cancel , this , _1 ), std :: bind ( & MinimalActionServer :: handle_accepted , this , _1 )); } private : rclcpp_action :: Server < Fibonacci >:: SharedPtr action_server_ ; rclcpp_action :: GoalResponse handle_goal ( const rclcpp_action :: GoalUUID & uuid , std :: shared_ptr < const Fibonacci :: Goal > goal ) { RCLCPP_INFO ( this -> get_logger (), \"Received goal request with order %d\" , goal -> order ); ( void ) uuid ; // Let's reject sequences that are over 9000 if ( goal -> order > 9000 ) { return rclcpp_action :: GoalResponse :: REJECT ; } return rclcpp_action :: GoalResponse :: ACCEPT_AND_EXECUTE ; } rclcpp_action :: CancelResponse handle_cancel ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Received request to cancel goal\" ); ( void ) goal_handle ; return rclcpp_action :: CancelResponse :: ACCEPT ; } void execute ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Executing goal\" ); rclcpp :: Rate loop_rate ( 1 ); const auto goal = goal_handle -> get_goal (); auto feedback = std :: make_shared < Fibonacci :: Feedback > (); auto & sequence = feedback -> sequence ; sequence . push_back ( 0 ); sequence . push_back ( 1 ); auto result = std :: make_shared < Fibonacci :: Result > (); for ( int i = 1 ; ( i < goal -> order ) && rclcpp :: ok (); ++ i ) { // Check if there is a cancel request if ( goal_handle -> is_canceling ()) { result -> sequence = sequence ; goal_handle -> canceled ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Canceled\" ); return ; } // Update sequence sequence . push_back ( sequence [ i ] + sequence [ i - 1 ]); // Publish feedback goal_handle -> publish_feedback ( feedback ); RCLCPP_INFO ( this -> get_logger (), \"Publish Feedback\" ); loop_rate . sleep (); } // Check if goal is done if ( rclcpp :: ok ()) { result -> sequence = sequence ; goal_handle -> succeed ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Succeeded\" ); } } void handle_accepted ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { using namespace std :: placeholders ; // this needs to return quickly to avoid blocking the executor, so spin up a new thread std :: thread { std :: bind ( & MinimalActionServer :: execute , this , _1 ), goal_handle }. detach (); } }; // class MinimalActionServer int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); auto action_server = std :: make_shared < MinimalActionServer > (); rclcpp :: spin ( action_server ); rclcpp :: shutdown (); return 0 ; } 动作的客户端fibonacci_action_client.cpp： #include <inttypes.h> #include <memory> #include <string> #include <iostream> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO ( jacobperron ) : Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionClient : public rclcpp::Node { public: using Fibonacci = learning_action_cpp::action::Fibonacci ; using GoalHandleFibonacci = rclcpp_action::ClientGoalHandle<Fibonacci> ; explicit MinimalActionClient ( const rclcpp::NodeOptions & node_options = rclcpp::NodeOptions ()) : Node ( \"minimal_action_client\" , node_options ) , goal_done_ ( false ) { this->client_ptr_ = rclcpp_action::create_client<Fibonacci> ( this->get_node_base_interface () , this->get_node_graph_interface () , this->get_node_logging_interface () , this->get_node_waitables_interface () , \"fibonacci\" ) ; this->timer_ = this->create_wall_timer ( std::chrono::milliseconds ( 500 ) , std::bind ( & MinimalActionClient::send_goal, this )) ; } bool is_goal_done () const { return this->goal_done_ ; } void send_goal () { using namespace std::placeholders ; this->timer_->cancel () ; this->goal_done_ = false ; if ( !this->client_ptr_ ) { RCLCPP_ERROR ( this->get_logger () , \"Action client not initialized\" ) ; } if ( !this->client_ptr_->wait_for_action_server ( std::chrono::seconds ( 10 ))) { RCLCPP_ERROR ( this->get_logger () , \"Action server not available after waiting\" ) ; this->goal_done_ = true ; return ; } auto goal_msg = Fibonacci::Goal () ; goal_msg.order = 10 ; RCLCPP_INFO ( this->get_logger () , \"Sending goal\" ) ; auto send_goal_options = rclcpp_action::Client<Fibonacci>::SendGoalOptions () ; send_goal_options.goal_response_callback = std::bind ( & MinimalActionClient::goal_response_callback, this, _1 ) ; send_goal_options.feedback_callback = std::bind ( & MinimalActionClient::feedback_callback, this, _1, _2 ) ; send_goal_options.result_callback = std::bind ( & MinimalActionClient::result_callback, this, _1 ) ; auto goal_handle_future = this->client_ptr_->async_send_goal ( goal_msg, send_goal_options ) ; } private: rclcpp_action::Client<Fibonacci>::SharedPtr client_ptr_ ; rclcpp::TimerBase::SharedPtr timer_ ; bool goal_done_ ; void goal_response_callback ( std::shared_future<GoalHandleFibonacci::SharedPtr> future ) { auto goal_handle = future.get () ; if ( !goal_handle ) { RCLCPP_ERROR ( this->get_logger () , \"Goal was rejected by server\" ) ; } else { RCLCPP_INFO ( this->get_logger () , \"Goal accepted by server, waiting for result\" ) ; } } void feedback_callback ( GoalHandleFibonacci::SharedPtr, const std::shared_ptr<const Fibonacci::Feedback> feedback ) { RCLCPP_INFO ( this->get_logger () , \"Next number in sequence received: %\" PRId32, feedback->sequence.back ()) ; } void result_callback ( const GoalHandleFibonacci::WrappedResult & result ) { this->goal_done_ = true ; switch ( result.code ) { case rclcpp_action::ResultCode::SUCCEEDED: break ; case rclcpp_action::ResultCode::ABORTED: RCLCPP_ERROR ( this->get_logger () , \"Goal was aborted\" ) ; return ; case rclcpp_action::ResultCode::CANCELED: RCLCPP_ERROR ( this->get_logger () , \"Goal was canceled\" ) ; return ; default: RCLCPP_ERROR ( this->get_logger () , \"Unknown result code\" ) ; return ; } RCLCPP_INFO ( this->get_logger () , \"Result received\" ) ; for ( auto number : result.result->sequence ) { RCLCPP_INFO ( this->get_logger () , \"%\" PRId32, number ) ; } } } ; // class MinimalActionClient int main ( int argc, char ** argv ) { rclcpp::init ( argc, argv ) ; auto action_client = std::make_shared<MinimalActionClient> () ; while ( !action_client->is_goal_done ()) { rclcpp::spin_some ( action_client ) ; } rclcpp::shutdown () ; return 0 ; }","text_tokens":["back","bind","spin","done","remove","服务器","clientgoalhandle",">","char","argv","bool","number","fibonacci","once","class","}","ok","chrono","动作","prid32","server","<","order","timer","with","timerbase","sharedptr","milliseconds","!","wait","argc","send","int","there","logging","minimal","execute","available","node","callback","++","{","cancelresponse","are","reject","9000","code","shutdown","resultcode","_","main","this","future","=","%","case","private","goalhandlefibonacci","sleep","sequences","[","base","blocking","\"","is","return","0","&&","unknown","response","auto","h","void","learning","error","switch","over","executor","succeed","thread","a","+","minimalactionserver","客户端","jacobperron","push","was","客户","initialized","canceling","const","#","wall","true","nodeoptions","cancel","accept","quickly","up","minimalactionclient","wrappedresult","务器","/","canceled","while","hpp","500","to","seconds","sending","accepted","default","included","new","_-","clock","some","loop","info","part","inttypes","memory","logger","so","(","*",":","2","if","else",",","after","waiting","sequence","the","received","goaluuid","todo","public","as","s","that","include","interface","waitables","goal","avoid","服务","let","shared","make","init","check","using","request","d","update","not","break","explicit","的","ptr"," ",";","goalresponse",".","rclcpp","'","it","handle","cpp","needs","async","aborted","1","and","false","]","feedback","string","action","std","placeholders","uuid","graph","namespace","i","create","in","client","：","next","of","rejected","publish","options","servergoalhandle","&","sendgoaloptions","by","-","detach","msg","result","succeeded","iostream","executing","rate","10","for",")","get"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/","text":"零拷贝数据传输 在传统操作系统的数据传输过程中，系统内部会在磁盘、内存、缓存中多次进行数据拷贝，每次都会占用CPU的资源，数据量小的时候还好，随着数据量的增加，CPU的开销也会持续增加，尤其是在机器人图像数据的应用中 ，经常会发生这种问题，导致CPU都在做数据拷贝，没有时间处理其他的应用功能了，直接的感觉就是处理卡顿。 零拷贝技术 针对这种问题，零拷贝技术应运而生。 零拷贝主要的任务就是避免CPU将数据从一块存储拷贝到另外一块存储，避免让CPU做大量的数据拷贝任务，减少不必要的拷贝，或者让别的组件来做这一类简单的数据传输任务，让CPU解脱出来专注于别的任务。这样就可以让系统资源的利用更加有效。 TogetherROS中就提供了灵活、高效的零拷贝功能，可以显著降低大尺寸数据的通信延时和CPU占用，具体有多显著呢，我们不妨进行一个测试。 TogetherROS零拷贝性能测试 我们使用TogetherROS系统内部集成的性能测试工具——performance_test，来评估下开启零拷贝前后的性能差异，这里我们传输的样本数据量是4M。 未开启零拷贝进行数据传输 $ ros2 run performance_test perf_test --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #未开启 开启零拷贝数据传输： $ ros2 run performance_test perf_test --zero-copy --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #开启 好的，测试已经跑完了，我们把结果放到这里，来分析一下。 在这个测试中，关键有四个指标： 时延，也就是消息从发布者到订阅者的传输时间。不开启零拷贝的情况下，平均为0.004912s，开启零拷贝之后，速度快了差不多40倍，平均为0.000180s。 CPU使用率，表示通信活动所占用的CPU时间，大家可以看这个utime指标，开启零拷贝之后时间有显著的提升，消耗CPU的资源少了。 驻留内存，包括通信过程中分配的内存和共享内存，是这个maxrss中的数据，开启零拷贝之后，占用的内存也更少。 样本统计，包括测试中发送、接收以及丢失的消息数量，是这组数据，依然是开启零拷贝之后性能更好。 通过测试，对于大数据通信来讲，零拷贝在CPU消耗、内存占用以及通信延迟抖动方面的性能都会更好。 这里只是便于大家感受零拷贝技术的效果，具体编程中如何使用零拷贝机制呢？ 编程开发 为了方便大家使用，TogetherROS针对零拷贝功能进行了封装，风格类似ROS2中话题通信的接口，还是话题通信一样的流程，我们只需要修改几个函数就可以实现啦。 运行例程 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run hbmem_pubsub talker $ ros2 run hbmem_pubsub listener 代码解析 发布者publisher_hbmem.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" using namespace std :: chrono_literals ; class MinimalHbmemPublisher : public rclcpp :: Node { public : MinimalHbmemPublisher () : Node ( \"minimal_hbmem_publisher\" ), count_ ( 0 ) { // 创建publisher_hbmem，topic为\"topic\"，QOS为KEEPLAST(10)，以及默认的可靠传输 publisher_ = this -> create_publisher_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 ); // 定时器，每隔40毫秒调用一次timer_callback进行消息发送 timer_ = this -> create_wall_timer ( 40 ms , std :: bind ( & MinimalHbmemPublisher :: timer_callback , this )); } private : // 定时器回调函数 void timer_callback () { // 获取要发送的消息 auto loanedMsg = publisher_ -> borrow_loaned_message (); // 判断消息是否可用，可能出现获取消息失败导致消息不可用的情况 if ( loanedMsg . is_valid ()) { // 引用方式获取实际的消息 auto & msg = loanedMsg . get (); // 获取当前时间，单位为us auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()). count (); // 对消息的index和time_stamp进行赋值 msg . index = count_ ; msg . time_stamp = time_now ; // 打印发送消息 RCLCPP_INFO ( this -> get_logger (), \"message: %d\" , msg . index ); publisher_ -> publish ( std :: move ( loanedMsg )); // 注意，发送后，loanedMsg已不可用 // 计数器加一 count_ ++ ; } else { // 获取消息失败，丢弃该消息 RCLCPP_INFO ( this -> get_logger (), \"Failed to get LoanMessage!\" ); } } // 定时器 rclcpp :: TimerBase :: SharedPtr timer_ ; // hbmem publisher rclcpp :: PublisherHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr publisher_ ; // 计数器 size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者subscriber_hbmem.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" class MinimalHbmemSubscriber : public rclcpp :: Node { public : MinimalHbmemSubscriber () : Node ( \"minimal_hbmem_subscriber\" ) { // 创建subscription_hbmem，topic为\"sample\"，QOS为KEEPLAST(10)，以及默认的可靠传输 // 消息回调函数为topic_callback subscription_ = this -> create_subscription_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 , std :: bind ( & MinimalHbmemSubscriber :: topic_callback , this , std :: placeholders :: _1 )); } private : // 消息回调函数 void topic_callback ( const hbmem_pubsub :: msg :: SampleMessage :: SharedPtr msg ) const { // 注意，msg只能在回调函数中使用，回调函数返回后，该消息就会被释放 // 获取当前时间 auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()) . count (); // 计算延时并打印出来 RCLCPP_INFO ( this -> get_logger (), \"msg %d, time cost %dus\" , msg -> index , time_now - msg -> time_stamp ); } // hbmem subscription rclcpp :: SubscriptionHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemSubscriber > ()); rclcpp :: shutdown (); return 0 ; } 接口汇总 我们整理一下，与ROS2中的话题通信相比，TogetherROS带有零拷贝机制的话题通信接口是这样的。 在发布者中，我们可以使用PublisherHbmem来创建一个发布者对象，然后通过create_publisher_hbmem发布数据，而在订阅者中，SubscriptionHbmem用来创建一个订阅者对象，通过 create_subscription_hbmem订阅需要的数据，至于底层如何完成零拷贝的过程，都交给TogetherROS即可。","text_tokens":["bash","每隔","应运",">","该","argv","出现","可能","<","publisher","sharedptr","组件","调用","集成","已经","argc","minimal","功能","差异","简单","未","例程","maxrss","问题","install","丢失","private","都","测试","单位","0","判断","表示","数据通信","专注","subscriptionhbmem","机器人","内部","数据量","要","？","、","拷贝到","结果","计数器","const","卡顿","发布","速度","如何","/","hpp","valid","出来","其他","不必","，","使用率","处理","不必要","就","让","整理","perf","完","这样","没有","一样","不","也","m","size","是否","对于","public","这种","被","epoch","shared","传统","打印","后","reliable","的","或者","啦","了","cpp","samplemessage","尺寸","放到","数据通","带有","大家","接收","用率","接口","返回","将","开发","publisherhbmem","类似","就是","小","sample","t","中","test","ms","应运而生","duration","array4m","10","进行","只是","r","即可",")","keep","更加","评估","spin","感受","加一","history","class","chrono","针对","max","!","更少","通过","和","发布者","callback","计算","$","提供","tros","steady","--","传输","=","可以","提升","为","为了","functional","return","试工","auto","void","样本","指标","关键","实际","解脱","跑","这个","然后","这","40","完成","cpu","。","实现","操作系统","机器","增加","microseconds","通信","index","创建","togetherros","有效","info","cost","(","呢","用","丢弃","*","4m","时候","下","持续","平均","数量","当前","一个","now","message","s","对","move","汇总","之后","引用","会","前后","活动","string","内存","std","placeholders","系统资源","run","depth","数据传输","发生","：","看","显著","一次","可靠","&","编程","与","底层","listener","把","注意","0.000180","last","get","有","时间","灵活","这里","runtime","经常","多","使用","只能","node","只","可用","++","{","共享","共享内存","获取","shutdown","_","导致","一块","%","必要","[","交给","占用","拷贝","主要","效果","零","utime","代码","风格","图像","subscriber","开销","方便","wall","函数","计数","技术","尤其","loanmessage","clock","0.004912","memory","logger",":","是","subscription","消息","borrow","—","便于","loanedmsg","不妨","延迟","不多","qos","高效","failed","make","init","literals","延时","keeplast","d","since"," ",";",".","至于","到","已","通信接口","利用","]","降低","工具","失败","并打印","消耗","回调","随着","create","任务","测试工具","分析","而","数据","zero","setup","publish","具体","不可","做","msg","运行","每次","一下","多次","bind","time","几个","来讲","四个","定时器","char","分配","}","timer","ros2","timerbase","int","来","100","资源","count","还好","我们","30","方式","main","流程","this","好","机制","性能","大","对象","相比","hbmem","source","pubsub","\"","is","opt","时延","磁盘","解析","少","缓存","stamp","赋值","统计","快","#","别的","另外","loaned","释放","to","据传","情况","话题","minimalhbmemsubscriber","定时","方面","减少","cast","minimalhbmempublisher","过程","if","需要","else","所","从",",","修改","用来","存储","发送","dus","us","依然","include","直接","订阅","系统","应用","topic","talker","using","封装","这组","local","开启","rclcpp","避免","1","performance","于","者","默认","更好","namespace","以及","抖动","倍","在","毫秒","感觉","还是","包括","一类","-","大量","驻留","copy","差不多","操作"],"title":"零拷贝数据传输","title_tokens":["拷贝","零","传输","据传","数据传输","数据"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_1","text":"在传统操作系统的数据传输过程中，系统内部会在磁盘、内存、缓存中多次进行数据拷贝，每次都会占用CPU的资源，数据量小的时候还好，随着数据量的增加，CPU的开销也会持续增加，尤其是在机器人图像数据的应用中 ，经常会发生这种问题，导致CPU都在做数据拷贝，没有时间处理其他的应用功能了，直接的感觉就是处理卡顿。","text_tokens":["多次","时候","过程","内存","时间","是","磁盘","没有","占用","拷贝","持续","缓存","随着","数据传输","也","经常","机器人","图像","内部","数据量","、","数据","发生","这种","功能","小","直接","在","就是","感觉","系统","开销","卡顿","应用","会","传统","cpu","资源","中","。","还好","操作系统","尤其","做","机器","增加","导致","的","其他","每次","问题","据传","传输"," ","进行","，","操作","都","了","处理"],"title":"零拷贝数据传输","title_tokens":["拷贝","零","传输","据传","数据传输","数据"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_2","text":"针对这种问题，零拷贝技术应运而生。 零拷贝主要的任务就是避免CPU将数据从一块存储拷贝到另外一块存储，避免让CPU做大量的数据拷贝任务，减少不必要的拷贝，或者让别的组件来做这一类简单的数据传输任务，让CPU解脱出来专注于别的任务。这样就可以让系统资源的利用更加有效。 TogetherROS中就提供了灵活、高效的零拷贝功能，可以显著降低大尺寸数据的通信延时和CPU占用，具体有多显著呢，我们不妨进行一个测试。","text_tokens":["有","应运","灵活","针对","多","组件","和","功能","简单","来","资源","我们","提供","问题","传输","可以","一块","大","测试","必要","占用","拷贝","解脱","主要","零","专注","、","拷贝到","这","别的","cpu","技术","。","另外","出来","不必","通信","据传","，","togetherros","有效","减少","不必要","就","呢","让","这样","从","存储","不妨","一个","这种","高效","系统","延时","的","或者"," ","了","避免","尺寸","利用","降低","系统资源","于","数据传输","将","任务","数据","就是","显著","具体","中","一类","做","应运而生","大量","进行","更加"],"title":"零拷贝技术","title_tokens":["拷贝","零","技术"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#togetherros","text":"我们使用TogetherROS系统内部集成的性能测试工具——performance_test，来评估下开启零拷贝前后的性能差异，这里我们传输的样本数据量是4M。 未开启零拷贝进行数据传输 $ ros2 run performance_test perf_test --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #未开启 开启零拷贝数据传输： $ ros2 run performance_test perf_test --zero-copy --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #开启 好的，测试已经跑完了，我们把结果放到这里，来分析一下。 在这个测试中，关键有四个指标： 时延，也就是消息从发布者到订阅者的传输时间。不开启零拷贝的情况下，平均为0.004912s，开启零拷贝之后，速度快了差不多40倍，平均为0.000180s。 CPU使用率，表示通信活动所占用的CPU时间，大家可以看这个utime指标，开启零拷贝之后时间有显著的提升，消耗CPU的资源少了。 驻留内存，包括通信过程中分配的内存和共享内存，是这个maxrss中的数据，开启零拷贝之后，占用的内存也更少。 样本统计，包括测试中发送、接收以及丢失的消息数量，是这组数据，依然是开启零拷贝之后性能更好。 通过测试，对于大数据通信来讲，零拷贝在CPU消耗、内存占用以及通信延迟抖动方面的性能都会更好。 这里只是便于大家感受零拷贝技术的效果，具体编程中如何使用零拷贝机制呢？","text_tokens":["last","感受","有","history","时间","来讲","四个","分配","这里","max","runtime","ros2","更少","通过","集成","已经","和","使用","发布者","差异","来","100","未","共享","资源","共享内存","$","我们","0.000180","30","_","--","好","maxrss","传输","丢失","机制","性能","可以","大","提升","都","测试","为","试工","表示","数据通信","样本","时延","指标","关键","占用","少","拷贝","跑","这个","效果","零","utime","内部","数据量","？","、","统计","快","结果","#","评估","发布","速度","40","如何","cpu","技术","。","通信","据传","情况","，","使用率","方面","togetherros","0.004912","呢","4m","过程","perf","完","所","是","从","消息","下","—","不","平均","数量","便于","发送","也","m","延迟","不多","对于","依然","s","订阅","之后","系统","会","reliable","这组","的","前后","开启"," ","了","到","活动","1","放到","数据通","工具","performance","内存","大家","接收","消耗","run","depth","者","更好","用率","数据传输","测试工具","分析","以及","抖动","数据","：","就是","看","显著","倍","zero","在","具体","包括","中","编程","-","test","驻留","一下","array4m","10","进行","copy","差不多","只是","r","把","keep"],"title":"TogetherROS零拷贝性能测试","title_tokens":["拷贝","零","性能","测试","togetherros"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_3","text":"为了方便大家使用，TogetherROS针对零拷贝功能进行了封装，风格类似ROS2中话题通信的接口，还是话题通信一样的流程，我们只需要修改几个函数就可以实现啦。","text_tokens":["为了","就","几个","需要","大家","一样","修改","拷贝","针对","零","接口","ros2","风格","使用","类似","功能","只","方便","还是","函数","中","。","实现","我们","封装","的","流程","通信","进行","可以","话题","，","啦","了","togetherros"],"title":"编程开发","title_tokens":["编程","开发"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_4","text":"$ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run hbmem_pubsub talker $ ros2 run hbmem_pubsub listener","text_tokens":["_","run","pubsub","bash","local","opt","setup","install"," ","ros2","talker","listener",".","$","/","hbmem","source","tros"],"title":"运行例程","title_tokens":["运行","例程"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_5","text":"发布者publisher_hbmem.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" using namespace std :: chrono_literals ; class MinimalHbmemPublisher : public rclcpp :: Node { public : MinimalHbmemPublisher () : Node ( \"minimal_hbmem_publisher\" ), count_ ( 0 ) { // 创建publisher_hbmem，topic为\"topic\"，QOS为KEEPLAST(10)，以及默认的可靠传输 publisher_ = this -> create_publisher_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 ); // 定时器，每隔40毫秒调用一次timer_callback进行消息发送 timer_ = this -> create_wall_timer ( 40 ms , std :: bind ( & MinimalHbmemPublisher :: timer_callback , this )); } private : // 定时器回调函数 void timer_callback () { // 获取要发送的消息 auto loanedMsg = publisher_ -> borrow_loaned_message (); // 判断消息是否可用，可能出现获取消息失败导致消息不可用的情况 if ( loanedMsg . is_valid ()) { // 引用方式获取实际的消息 auto & msg = loanedMsg . get (); // 获取当前时间，单位为us auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()). count (); // 对消息的index和time_stamp进行赋值 msg . index = count_ ; msg . time_stamp = time_now ; // 打印发送消息 RCLCPP_INFO ( this -> get_logger (), \"message: %d\" , msg . index ); publisher_ -> publish ( std :: move ( loanedMsg )); // 注意，发送后，loanedMsg已不可用 // 计数器加一 count_ ++ ; } else { // 获取消息失败，丢弃该消息 RCLCPP_INFO ( this -> get_logger (), \"Failed to get LoanMessage!\" ); } } // 定时器 rclcpp :: TimerBase :: SharedPtr timer_ ; // hbmem publisher rclcpp :: PublisherHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr publisher_ ; // 计数器 size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者subscriber_hbmem.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" class MinimalHbmemSubscriber : public rclcpp :: Node { public : MinimalHbmemSubscriber () : Node ( \"minimal_hbmem_subscriber\" ) { // 创建subscription_hbmem，topic为\"sample\"，QOS为KEEPLAST(10)，以及默认的可靠传输 // 消息回调函数为topic_callback subscription_ = this -> create_subscription_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 , std :: bind ( & MinimalHbmemSubscriber :: topic_callback , this , std :: placeholders :: _1 )); } private : // 消息回调函数 void topic_callback ( const hbmem_pubsub :: msg :: SampleMessage :: SharedPtr msg ) const { // 注意，msg只能在回调函数中使用，回调函数返回后，该消息就会被释放 // 获取当前时间 auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()) . count (); // 计算延时并打印出来 RCLCPP_INFO ( this -> get_logger (), \"msg %d, time cost %dus\" , msg -> index , time_now - msg -> time_stamp ); } // hbmem subscription rclcpp :: SubscriptionHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["bind","spin","time","加一","时间","每隔",">","定时器","该","char","argv","class","}","chrono","出现","可能","<","timer","publisher","timerbase","sharedptr","!","调用","argc","和","只能","int","使用","minimal","发布者","node","callback","可用","++","计算","{","count","获取","shutdown","方式","steady","_","main","导致","this","传输","=","%","private","hbmem","为","[","单位","functional","pubsub","\"","0","is","return","判断","auto","void","实际","subscriptionhbmem","要","stamp","赋值","subscriber","计数器","#","40","发布","wall","函数","const","计数","/","loaned","loanmessage","释放","hpp","valid","to","出来","microseconds","index","创建","情况","clock","，","minimalhbmemsubscriber","定时","info","cost","cast","memory","logger","就","(","用","丢弃","*",":","minimalhbmempublisher","if","else",",","subscription","消息","borrow","当前","发送","loanedmsg","size","dus","us","是否","now","message","public","对","qos","include","move","订阅","被","epoch","failed","shared","make","init","引用","topic","会","literals","打印","后","using","keeplast","d","延时","的","since"," ",";",".","rclcpp","已","cpp","samplemessage","1","]","string","失败","std","placeholders","并打印","者","默认","回调","返回","namespace","create","以及","publisherhbmem","：","毫秒","在","一次","sample","publish","t","可靠","&","中","-","不可","msg","ms","duration","10","进行","注意",")","get"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_6","text":"我们整理一下，与ROS2中的话题通信相比，TogetherROS带有零拷贝机制的话题通信接口是这样的。 在发布者中，我们可以使用PublisherHbmem来创建一个发布者对象，然后通过create_publisher_hbmem发布数据，而在订阅者中，SubscriptionHbmem用来创建一个订阅者对象，通过 create_subscription_hbmem订阅需要的数据，至于底层如何完成零拷贝的过程，都交给TogetherROS即可。","text_tokens":["通信接口","带有","整理","过程","交给","需要","这样","是","subscription","拷贝","者","用来","然后","零","接口","一个","publisher","ros2","create","subscriptionhbmem","通过","使用","publisherhbmem","数据","而","订阅","发布者","在","来","完成","发布","如何","中","与","。","我们","_","的","通信","一下"," ","机制","创建","可以","底层","话题","，","至于","都","对象","相比","hbmem","即可","togetherros"],"title":"接口汇总","title_tokens":["接口","汇总"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/","text":"分布式通信配置 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如在这款机器人系统中，就有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用旭日派作为控制器，主要实现传感器驱动、电机控制、AI应用等功能，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个计算平台之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过TogehterROS都已经为我们准备好了，我们只需要在每一个计算上配置好TogehterROS或者ROS2的环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下分布式系统的魅力。 分布式网络搭建 旭日派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function # 旭日派端 $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function # PC端 神奇的事情就这样发生了，旭日X3派上安装的是TogetherROS，我的电脑上安装的是ROS2，他们只要处于同一网络中，就可以实现通信了，感觉就像在一个电脑里一样。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和旭日X3派端中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 话题分布式通信 之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 以话题通信为例，旭日派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串，我们看下效果如何。 $ ros2 run learning_topic_cpp talker # 旭日派端 $ ros2 run learning_topic_cpp listener # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，我们几乎不需要任何配置，代码也不需要做任何修改，一切都会变得如此轻松。","text_tokens":["ros","感受","有","有点","才能","这款","多个",">","分配","较","准备","传感器","出现","可能","节点","带来","<","一切","ai","publisher","ros2","经常","多","端","他们","world","已经","不同","和","使用","带领","domain","计算能力","变得","minimal","功能","发布者","体积","确保","放在","只","发布","几乎","计算","资源","打通","$","虚拟机","我们","提供","上去","这些","examples","_","一系列","例程","接下","布式","pc","遇到","好","问题","传输","机制","=","可以","之间","里","如","同一","都","以","测试","为","框架","非常","配置","毕竟","什么","看上","命令行","起来","分组","笔记","下来","learning","远程","减轻","任何","监控","实际","主要","效果","个","代码","组成","你","频繁","机器人","比较","请","两者","？","智能","、","subscriber","x3","互联","放","派","这","方便","卡顿","等","驱动","由","旭日","一","完成","同一个","#","希望","中有","：","。","实现","如何","结构","机器","分布","并且","不过","适合","通信","加入","一句","hello","运动","情况","则","话题","，","export","togetherros","处理","两个","id","即可","全都","就","为例","用","复杂","呢","如果","魅力","需要","这样","所","是","笔记本","一样","没有","修改","下","方法","不","attention","压力","之前","系列","字符串","function","采用","也","一个","是否","任务分配","只要","模式","派端","这种","典型","直接","而是","订阅","像","一系","类似","系统","感器","神奇","应用","此外","岂","算机","会","后","topic","看上去","不够","安装","talker","如此","虚拟","的","不是","或者","桥接","于是"," ","member","小组","之一","我","rclcpp","啦","了","并","到","cpp","处于","繁多","比如","拆解","原本","笔记本电脑","字符","局域网络","没","计算机","传感","电机","大家","消耗","位于","run","者","轻松","用到","局域","完全","分布式","将","搭建","平台","分布式系统","上","任务","编写","开发","各种","变化","数据","上边","每","就是","控制器","小","发生","在","控制","togehterros","还","感觉","看","能力","电脑","无法","网络","具体","中","环境","而言","叫","作为","做","连接","局域网","your","挺","运行","信息","一下","命令","事情","listener","简而言之","很多","互通","相互","接下来"],"title":"分布式通信配置","title_tokens":["分布","配置","布式","通信","分布式"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。","text_tokens":["全都","繁多","拆解","如果","计算机","多个","减轻","分配","出现","压力","分布式","一个","将","平台","经常","分布式系统","机器人","任务","多","上","任务分配","？","智能","、","计算能力","就是","功能","放在","能力","这","卡顿","等","系统","计算","岂","算机","会","不够","中","。","实现","这些","机器","分布","的","不是","布式","运行","遇到"," ","可以","情况","里","，","到","处理"],"title":"分布式通信配置","title_tokens":["分布","配置","布式","通信","分布式"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_2","text":"什么叫分布式？ 机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如在这款机器人系统中，就有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用旭日派作为控制器，主要实现传感器驱动、电机控制、AI应用等功能，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个计算平台之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过TogehterROS都已经为我们准备好了，我们只需要在每一个计算上配置好TogehterROS或者ROS2的环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下分布式系统的魅力。","text_tokens":["感受","有","有点","这款","较","分配","准备","传感器","可能","节点","ai","ros2","多","已经","不同","带领","功能","体积","只","计算","资源","我们","上去","这些","接下","布式","好","传输","可以","之间","都","为","框架","非常","配置","毕竟","什么","看上","起来","笔记","下来","远程","减轻","任何","监控","主要","组成","机器人","比较","？","、","放","派","这","方便","一","驱动","等","由","旭日","。","实现","结构","机器","分布","并且","不过","适合","通信","运动","，","两个","就","复杂","魅力","需要","是","笔记本","下","不","压力","采用","一个","这种","典型","系统","感器","应用","此外","算机","看上去","的","或者","于是"," ","之一","了","到","比如","原本","笔记本电脑","计算机","传感","电机","大家","消耗","位于","完全","分布式","将","平台","上","分布式系统","任务","开发","各种","变化","数据","上边","每","就是","控制器","小","在","控制","togehterros","还","电脑","中","环境","叫","作为","做","挺","信息","相互","接下来"],"title":"分布式通信","title_tokens":["分布","通信","分布式","布式"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_3","text":"旭日派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function # 旭日派端 $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function # PC端 神奇的事情就这样发生了，旭日X3派上安装的是TogetherROS，我的电脑上安装的是ROS2，他们只要处于同一网络中，就可以实现通信了，感觉就像在一个电脑里一样。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["带来","publisher","ros2","端","他们","已经","和","使用","minimal","确保","计算","打通","$","虚拟机","我们","examples","_","接下","pc","问题","可以","之间","里","如","同一","都","测试","为","配置","什么","命令行","分组","效果","个","你","请","？","subscriber","x3","互联","派","这","#","完成","同一个","旭日","希望","中有","。","实现","不过","通信","话题","，","togetherros","两个","就","用","呢","如果","需要","这样","所","是","一样","修改","不","attention","function","也","一个","模式","只要","派端","而是","直接","像","神奇","会","算机","后","安装","虚拟","的","桥接"," ","member","小组","我","rclcpp","了","并","到","处于","局域网络","计算机","run","局域","将","平台","上","发生","在","感觉","能力","电脑","无法","网络","具体","中","而言","局域网","连接","做","一下","命令","事情","简而言之","很多","互通","下来","接下来"],"title":"分布式网络搭建","title_tokens":["分布","布式","分布式","搭建","网络"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_4","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和旭日X3派端中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["id","处于","就","配置","ros","如果","才能","没","计算机","分组","这样",">","一样","分配","<","一个","将","ros2","和","domain","两者","派端","不同","：","类似","在","x3","无法","电脑","同一个","计算","旭日","算机","中","$","。","实现","我们","提供","your","_","的","加入","通信","问题","一句"," ","机制","小组","可以","=","则","，","同一","了","export","到","即可"],"title":"分布式网络分组","title_tokens":["分布","布式","分布式","网络","分组"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_5","text":"之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 以话题通信为例，旭日派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串，我们看下效果如何。 $ ros2 run learning_topic_cpp talker # 旭日派端 $ ros2 run learning_topic_cpp listener # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，我们几乎不需要任何配置，代码也不需要做任何修改，一切都会变得如此轻松。","text_tokens":["ros","一切","ros2","world","端","变得","使用","发布者","几乎","$","我们","_","一系列","例程","pc","布式","好","问题","可以","都","以","测试","配置","learning","任何","实际","效果","代码","频繁","机器人","？","派","#","发布","旭日","如何","。","机器","分布","通信","hello","情况","话题","，","为例","呢","需要","没有","修改","下","方法","不","系列","之前","字符串","也","是否","派端","直接","订阅","一系","topic","talker","会","的"," ","啦","了","cpp","字符","轻松","run","者","用到","分布式","编写","开发","如此","类似","看","在","电脑","网络","中","作为","做","listener"],"title":"话题分布式通信","title_tokens":["分布","布式","通信","分布式","话题"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/","text":"数字输入与输出 数字输入与输出是最常用的一种外设通信方式，虽然每一个端口只有0和1两种状态，但却可以组合出各种各样的变化。 数字输入与输出原理 数字输入与输出，也称为通用输入输出，全称是General-purpose input/output，大部分情况下，我们都会用简称GPIO GPIO的功能，主要是指这个管脚可以作为数字信号的输入或者输出使用，到底是输入还是输出呢，这需要我们使用系统寄存器来进行配置。 当GPIO被设置为输入模式时，就可以读取这个管脚上的电平高低，从而实现读取外部信号的功能，比如外部按键的信号，就是这样读取的。 当GPIO被设置为输出模式时，我们就可以主动改变管脚的电平高低了，这样就能通过电平的变化，控制外部的设备，比如点亮或者熄灭一个LED灯。 除此之外，一些IO口还可以配置成其他功能，比如PWM输出，串口通信等等。 关于旭日X3派的管脚定义，大家可以参考这张图，他会显示每个管脚具体可以实现什么功能。 这里需要说明一点，旭日X3派的管脚序号定义有三种编码方式： 第一种就是Board编码，这种就是按照主板上管脚排针编号，分别对应1~40号排针。 第二种就是BCM编码，这种方式是参考 Broadcom SOC 的通道编号，侧重CPU寄存器，在使用BCM库或者使用python编程时，常采用的一种编码方式。 第三种就是X3编码，可以理解为是旭日X3派自己的编码方式，在使用旭日派自己的驱动库编程时，会使用到这种编码。 大家在后续编程开发中，需要结合函数接口的说明，使用对应的引脚编号，不然可能会出现意料之外的问题。 引脚复用配置工具 虽然从硬件上看，扩展出来的引脚只有40个，不过大部分引脚还可以配置成多种功能，这样延伸出来变化可就多了，那如何配置引脚的不同功能呢？ 我们可以使用旭日X3派中提供的srpi-config工具进行配置。 直接在终端中输入这个指令，就可以看到这样的窗口，okay配置对应管脚为专用功能，disabled配置对应管脚为GPIO模式，按照自己的需要进行配置即可，配置完成后重启才会生效。 了解了GPIO的概念，接下来我们就要开始编程啦。 数字输入编程 首先我们来看下最基本的数字输入测试，读取一个按键的状态。 硬件接线 我们将按键的一边连接到旭日X3派的38号引脚上，这是一个GPIO的接口，另一边连接到39号引脚，也就是GND。 原理很简单，按键没按下时，导线是断开的，GPIO是默认的状态，按键按下后，导线就会导通，GPIO的状态变成了GND。 这样，我们就可以通过电平的变化，知道按键的状态啦。 运行例程 我们不妨来运行一下，看下实际效果是不是这样。 $ sudo python3 simple_input.py 我们将一个按键开关接到对应的管脚上， 然后连接到旭日X3PI当中，运行刚才的程序。之后我们按下或是松开按键时，他都会打印出对应的电平变化。 按下显示的就是LOW，也就是低电平，松开就是HIGH，也就是高电平。 代码解析 数字输入的功能实现啦，我们来看下代码是如何实现的。 simple_input.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 input_pin = 38 # BOARD 编码 38 def main (): prev_value = None # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输入模式 GPIO . setup ( input_pin , GPIO . IN ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : # 读取管脚电平 value = GPIO . input ( input_pin ) if value != prev_value : if value == GPIO . HIGH : value_str = \"HIGH\" else : value_str = \"LOW\" print ( \"Value read from pin {} : {} \" . format ( input_pin , value_str )) prev_value = value time . sleep ( 1 ) finally : GPIO . cleanup () if __name__ == '__main__' : main () 我们在Python中需要引入X3Pi的GPIO库，从而使用对应的GPIO功能。 主函数里首先需要定义了一个变量来存储这个管脚的电平信号。 进行初始化，设置管脚的编码模式为BOARD模式，之后定义输入用的管脚，这里使用的是BOARD编码，因为他是第38个管脚，所以为38号。 之后的话就会进入到循环当中，这样的一个函数就可以读出当前的电平值。 没有按下按键的时候，38管脚和GND是断开的，他就是高电平，按下按键时，就和GND导通了，这个管脚就会编程低电平。 如果电平值和上一次存储的不一致，后面的判断就会判断出是升高还是降低，最后会把结果打印出来。 松开按键时同理。 数字输出编程 GPIO不止有输入功能，还有输出功能，大家应该经常看到电子设别上的LED灯吧，这就是典型的IO输出控制的设备，我们也来试一试。 硬件接线 我们将一个LED灯的正极连接到了2号引脚，这是5V电源，用来给LED供电的，不过LED电阻小，为了不至于烧坏，我们最好还是在电路中串联一个电阻来限制电流大小。 接下来，当LED的负极接到GND，也就是电源的0V上时，LED两边会因为有电势差而被点亮；当LED的负极也连接到高电平，也就是5V的时候，会因为两边没有电势差，也就不会被点亮。 这个负极的电平信号我们就用GPIO来输出，所以我们把LED的负极连接到任意的GPIO引脚上，比如38号，将这个引脚设置为输出模式，当输出高电平时，灯就会熄灭，输出低电平，灯就会被点亮。 把这两个动作放到一个循环中，就可以实现闪烁的功能啦。 运行示例程序 快来运行例程试一试吧，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行程序，就可以看到这个LED就会开始闪烁了。 $ sudo python3 simple_input.py 代码解析 simple_out.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 output_pin = 38 # BOARD 编码 38 def main (): # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输出模式，并且初始化为高电平 GPIO . setup ( output_pin , GPIO . OUT , initial = GPIO . HIGH ) # 记录当前管脚状态 curr_value = GPIO . HIGH print ( \"Starting demo now! Press CTRL+C to exit\" ) try : # 间隔1秒时间，循环控制LED灯亮灭 while True : time . sleep ( 1 ) GPIO . output ( output_pin , curr_value ) curr_value ^= GPIO . HIGH finally : GPIO . cleanup () if __name__ == '__main__' : main () 数字输入与输出集成 学习了GPIO的输入与输出功能后，我们就可以做一些自动化的功能了。 硬件接线 比如我们同时连接一个按键和LED灯，尝试实现按键被按下，灯被点亮，松开，灯熄灭，这样的功能。 运行示例程序 我们通过这个例程来试一试效果如何？ $ sudo python3 button_led.py 我们来看一下具体的操作，同样的，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。按下按键后，就可以看到LED被点亮了，松开之后，LED就熄灭了。 代码解析 button_led.py #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道： # 36号作为输出，可以点亮一个LED # 38号作为输入，可以接一个按钮 led_pin = 36 # BOARD 编码 36 but_pin = 38 # BOARD 编码 38 # 禁用警告信息 GPIO . setwarnings ( False ) def main (): prev_value = None # Pin Setup: GPIO . setmode ( GPIO . BOARD ) # BOARD pin-numbering scheme GPIO . setup ( led_pin , GPIO . OUT ) # LED pin set as output GPIO . setup ( but_pin , GPIO . IN ) # Button pin set as input # Initial state for LEDs: GPIO . output ( led_pin , GPIO . LOW ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : curr_value = GPIO . input ( but_pin ) if curr_value != prev_value : GPIO . output ( led_pin , curr_value ) prev_value = curr_value print ( \"Outputting {} to Pin {} \" . format ( curr_value , led_pin )) time . sleep ( 1 ) finally : GPIO . cleanup () # cleanup all GPIO if __name__ == '__main__' : main () 基本的配置还是一样的，引入基本的库，然后设置为BOARD模式，然后初始化两个管脚，一个用来读取按键的通断，一个用来控制LED的亮灭，之后只需要判断按键的状态来做出对应的控制LED的动作就可以了。","text_tokens":["name","prev","接","38","python","第二","broadcom","所以","config","记录","出现","供电","可能","最","集成","接到","功能","成","简单","开关","设置","hobot","的话","吧","例程","自己","问题","因为","^","都","测试","sleep","0","寄存","配置","指令","或是","判断","读出","high","按下","之外","烧坏","led","？","outputting","结果","派","主动","驱动","旭日","外设","侧重","如何","/","出来","其他","称为","电子","却","press","bcm","，","示例","窗口","这是","就","常","这样","出","秒","寄存器","自动","排针","没有","一样","不","理解","松开","也","soc","这种","他会","被","组合","39","后","打印","scheme","虽然","电路","的","或者","三种","号","啦","了","出是","比如","放到","电势差","原理","大家","复用","read","意料","接口","两种","将","同时","对应","开发","各种","变化","就是","小","控制","还","应该","一致","value","中","作为","连接","首先","闪烁","禁用","第一种","专用","进行","循环","；","很","导通","变成","即可",")","说明","py","引脚","来看","!","通过","和","不同","第","生效","编号","$","提供","大部","print","按键","srpi","口","=","可以","初始化","为","从而","为了","5v","什么","主板","numbering","管脚","灭","接线","实际","这个","然后","+","才","刚才","all","电流","各种各样","程序","分别","x3pi","x3","关于","这","40","完成","试一试","cpu","。","实现","学习","编码","while","finally","并且","数字信号","通信","实际效果","库","两个","引入","用","呢","那","(","ctrl","等等","时候","2","下","就要","当前","只有","电势","一个","now","尝试","模式","按钮","import","常用","按照","典型","一种","之后","会","自动化","概念","他","高低","一点","但","简称","按","另一边","序号","initial","串口","第一","部分","时","python3","c","同样","：","每","看","一次","做出","低电平","编程","与","可","low","usr","for","把","but","下来","显示","有","时间","exit","硬件","sudo","改变","这里","经常","多","demo","使用","out","正极","基本","不会","只","当中","编码方式","第三种","{","端口","意料之外","output","from","电阻","各样","_","不止","数字","接下","熄灭","指","里","general","限制","36","none","io","警告","导线","主要","效果","终端","代码","true","函数","第二种","会导通","还有","升高","开始","读取","input","setmode","gpio",":","~","是","点亮","当","是不是","采用","不妨","高电平","curr","不至于","as","灯","给","设别"," ",".","至于","状态","到","延伸","pwm","两边","false","降低","工具","实物","最好","输入","进入","断开","gnd","in","而","负极","最后","setup","simple","具体","大部分","电源","做","张图","运行","信息","一下","除此之外","重启","接下来","一边","time","starting","每个","leds","}","动作","主","env","电平","任意","输入输出","大小","来","pin","disabled","我们","方式","main","board","初始","能","外部","同理","间隔","\"","设备","解析","set","变量","不然","通道","个","了解","知道","参考","快","#","__","format","定义","不过","to","bin","亮","button","purpose","情况","串联","str","如果","if","需要","else","从","后续",",","0v","通用","看到","用来","存储","def","cleanup","值","多种","直接","try","系统","灯亮","通断","不是","结合","setwarnings","扩展","一些","第三","'","信号","1","除此","没","默认","到底","上","okay","在","二种","上时","还是","全称","后面","输出","-","state","操作"],"title":"数字输入与输出","title_tokens":["与","输入","输出","数字"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_1","text":"数字输入与输出是最常用的一种外设通信方式，虽然每一个端口只有0和1两种状态，但却可以组合出各种各样的变化。","text_tokens":["0","1","出","是","输入","只有","两种","一个","最","各种","变化","和","各种各样","每","常用","一种","组合","外设","输出","端口","与","。","方式","各样","虽然","数字","的","通信","却","可以","，","但","状态"],"title":"数字输入与输出","title_tokens":["与","输入","输出","数字"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_2","text":"数字输入与输出，也称为通用输入输出，全称是General-purpose input/output，大部分情况下，我们都会用简称GPIO GPIO的功能，主要是指这个管脚可以作为数字信号的输入或者输出使用，到底是输入还是输出呢，这需要我们使用系统寄存器来进行配置。 当GPIO被设置为输入模式时，就可以读取这个管脚上的电平高低，从而实现读取外部信号的功能，比如外部按键的信号，就是这样读取的。 当GPIO被设置为输出模式时，我们就可以主动改变管脚的电平高低了，这样就能通过电平的变化，控制外部的设备，比如点亮或者熄灭一个LED灯。 除此之外，一些IO口还可以配置成其他功能，比如PWM输出，串口通信等等。 关于旭日X3派的管脚定义，大家可以参考这张图，他会显示每个管脚具体可以实现什么功能。 这里需要说明一点，旭日X3派的管脚序号定义有三种编码方式： 第一种就是Board编码，这种就是按照主板上管脚排针编号，分别对应1~40号排针。 第二种就是BCM编码，这种方式是参考 Broadcom SOC 的通道编号，侧重CPU寄存器，在使用BCM库或者使用python编程时，常采用的一种编码方式。 第三种就是X3编码，可以理解为是旭日X3派自己的编码方式，在使用旭日派自己的驱动库编程时，会使用到这种编码。 大家在后续编程开发中，需要结合函数接口的说明，使用对应的引脚编号，不然可能会出现意料之外的问题。","text_tokens":["说明","有","引脚","每个","第二","broadcom","python","改变","这里","出现","可能","通过","电平","使用","输入输出","功能","成","编号","来","编码方式","第三种","设置","意料之外","我们","output","大部","方式","按键","数字","口","熄灭","指","board","自己","问题","可以","能","都","general","外部","为","从而","寄存","配置","什么","主板","io","设备","管脚","主要","通道","这个","不然","之外","参考","led","分别","x3","关于","这","主动","派","40","驱动","旭日","函数","第二种","侧重","cpu","。","/","实现","定义","编码","其他","数字信号","称为","通信","库","purpose","情况","读取","input","bcm","，","就","用","呢","gpio","~","等等","需要","常","这样","是","寄存器","后续","排针","通用","点亮","下","当","理解","采用","也","一个","模式","soc","这种","按照","他会","一种","被","灯","系统","会","高低","一点","的","或者","三种","结合","号"," ","一些","第三","简称","了","到","信号","序号","1","比如","pwm","串口","除此","第一","部分","大家","时","输入","到底","意料","接口","上","对应","开发","变化","：","就是","控制","在","还","二种","还是","具体","全称","输出","大部分","编程","中","与","-","作为","张图","第一种","进行","除此之外","显示"],"title":"数字输入与输出原理","title_tokens":["输入","数字","原理","输出","与"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_3","text":"虽然从硬件上看，扩展出来的引脚只有40个，不过大部分引脚还可以配置成多种功能，这样延伸出来变化可就多了，那如何配置引脚的不同功能呢？ 我们可以使用旭日X3派中提供的srpi-config工具进行配置。 直接在终端中输入这个指令，就可以看到这样的窗口，okay配置对应管脚为专用功能，disabled配置对应管脚为GPIO模式，按照自己的需要进行配置即可，配置完成后重启才会生效。 了解了GPIO的概念，接下来我们就要开始编程啦。","text_tokens":["引脚","硬件","config","多","不同","使用","成","功能","生效","disabled","我们","提供","大部","srpi","接下","自己","可以","为","配置","指令","管脚","这个","个","终端","才","了解","？","x3","派","40","完成","旭日","如何","。","不过","出来","开始","，","窗口","就","那","呢","gpio","需要","这样","从","看到","就要","只有","模式","多种","按照","直接","会","后","概念","虽然","的"," ","扩展","啦","了","延伸","工具","部分","输入","上","对应","变化","看","okay","在","还","大部分","中","编程","可","-","专用","进行","重启","即可","下来","接下来"],"title":"引脚复用配置工具","title_tokens":["工具","复用","引脚","配置"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_4","text":"首先我们来看下最基本的数字输入测试，读取一个按键的状态。","text_tokens":["基本","输入","数字","的","来看","测试","按键","状态","一个","最","读取","，","。","我们","首先","下"],"title":"数字输入编程","title_tokens":["输入","数字","编程"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_5","text":"我们将按键的一边连接到旭日X3派的38号引脚上，这是一个GPIO的接口，另一边连接到39号引脚，也就是GND。 原理很简单，按键没按下时，导线是断开的，GPIO是默认的状态，按键按下后，导线就会导通，GPIO的状态变成了GND。 这样，我们就可以通过电平的变化，知道按键的状态啦。","text_tokens":["这是","另一边","按","一边","就","引脚","gpio","没","原理","38","这样","是","时","按下","下","导线","默认","接口","也","将","一个","上","断开","知道","通过","gnd","变化","电平","就是","x3","简单","派","旭日","39","后","。","我们","会导通","连接","按键","的","号"," ","可以","啦","，","很","了","状态","到","变成"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_6","text":"我们不妨来运行一下，看下实际效果是不是这样。 $ sudo python3 simple_input.py 我们将一个按键开关接到对应的管脚上， 然后连接到旭日X3PI当中，运行刚才的程序。之后我们按下或是松开按键时，他都会打印出对应的电平变化。 按下显示的就是LOW，也就是低电平，松开就是HIGH，也就是高电平。","text_tokens":["或是","py","high","这样","管脚","出","时","按下","下","实际","sudo","效果","然后","python3","松开","是不是","不妨","也","将","一个","对应","上","刚才","高电平","变化","电平","接到","程序","就是","看","x3pi","开关","之后","来","simple","当中","低电平","旭日","会","打印","$","。","low","我们","他","连接","_","按键","的","不是","运行","一下","实际效果"," ","input",".","，","都","到","显示"],"title":"运行例程","title_tokens":["运行","例程"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_7","text":"数字输入的功能实现啦，我们来看下代码是如何实现的。 simple_input.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 input_pin = 38 # BOARD 编码 38 def main (): prev_value = None # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输入模式 GPIO . setup ( input_pin , GPIO . IN ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : # 读取管脚电平 value = GPIO . input ( input_pin ) if value != prev_value : if value == GPIO . HIGH : value_str = \"HIGH\" else : value_str = \"LOW\" print ( \"Value read from pin {} : {} \" . format ( input_pin , value_str )) prev_value = value time . sleep ( 1 ) finally : GPIO . cleanup () if __name__ == '__main__' : main () 我们在Python中需要引入X3Pi的GPIO库，从而使用对应的GPIO功能。 主函数里首先需要定义了一个变量来存储这个管脚的电平信号。 进行初始化，设置管脚的编码模式为BOARD模式，之后定义输入用的管脚，这里使用的是BOARD编码，因为他是第38个管脚，所以为38号。 之后的话就会进入到循环当中，这样的一个函数就可以读出当前的电平值。 没有按下按键的时候，38管脚和GND是断开的，他就是高电平，按下按键时，就和GND导通了，这个管脚就会编程低电平。 如果电平值和上一次存储的不一致，后面的判断就会判断出是升高还是降低，最后会把结果打印出来。 松开按键时同理。","text_tokens":["name","py","time","prev","exit","38","硬件","starting","python","所以","这里","}","来看","主","env","!","demo","电平","使用","和","功能","第","编号","来","当中","{","设置","pin","我们","from","hobot","的话","_","main","print","按键","数字","board","因为","=","初始","可以","里","初始化","sleep","为","从而","同理","\"","none","判断","读出","high","管脚","变量","按下","通道","这个","+","个","代码","x3pi","结果","#","true","函数","如何","__","。","实现","/","定义","format","编码","while","finally","to","升高","bin","出来","库","press","input","读取","，","str","引入","就","(","setmode","ctrl","用","gpio",":","如果","时候","if","需要","else","这样","是",",","没有","下","不","当前","存储","def","松开","一个","now","模式","cleanup","高电平","值","as","import","try","之后","会","打印","他","的","号"," ","啦",".","'","了","到","出是","信号","1","降低","时","read","输入","python3","进入","c","对应","断开","上","gnd","in","：","就是","在","一次","最后","setup","低电平","simple","还是","一致","后面","value","编程","中","low","首先","usr","进行","循环","把","导通",")"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_8","text":"GPIO不止有输入功能，还有输出功能，大家应该经常看到电子设别上的LED灯吧，这就是典型的IO输出控制的设备，我们也来试一试。","text_tokens":["gpio","有","io","设备","大家","看到","输入","也","上","经常","led","就是","功能","典型","控制","灯","应该","这","来","试一试","输出","。","我们","还有","不止","吧","的","设别","电子","，"],"title":"数字输出编程","title_tokens":["输出","数字","编程"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_9","text":"我们将一个LED灯的正极连接到了2号引脚，这是5V电源，用来给LED供电的，不过LED电阻小，为了不至于烧坏，我们最好还是在电路中串联一个电阻来限制电流大小。 接下来，当LED的负极接到GND，也就是电源的0V上时，LED两边会因为有电势差而被点亮；当LED的负极也连接到高电平，也就是5V的时候，会因为两边没有电势差，也就不会被点亮。 这个负极的电平信号我们就用GPIO来输出，所以我们把LED的负极连接到任意的GPIO引脚上，比如38号，将这个引脚设置为输出模式，当输出高电平时，灯就会熄灭，输出低电平，灯就会被点亮。 把这两个动作放到一个循环中，就可以实现闪烁的功能啦。","text_tokens":["引脚","有","38","所以","供电","动作","电平","任意","接到","正极","功能","不会","大小","来","设置","我们","电阻","接下","熄灭","因为","可以","为","为了","限制","5v","这个","烧坏","led","电流","这","。","实现","不过","，","两个","串联","这是","就","用","gpio","时候","2","没有","0v","点亮","用来","当","电势","也","一个","高电平","模式","不至于","被","灯","会","给","电路","的","号"," ","啦","至于","了","到","信号","两边","比如","电势差","放到","最好","时","将","上","gnd","而","就是","小","负极","在","低电平","上时","还是","输出","中","电源","连接","闪烁","循环","；","把","下来","接下来"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_10","text":"快来运行例程试一试吧，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行程序，就可以看到这个LED就会开始闪烁了。 $ sudo python3 simple_input.py","text_tokens":["就","py","实物","看到","sudo","这个","然后","python3","将","刚才","led","程序","按照","快","x3pi","来","完成","simple","试一试","会","设置","$","。","连接","_","闪烁","吧","例程","的","开始","运行"," ","可以","input",".","，","了","到"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_11","text":"simple_out.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 output_pin = 38 # BOARD 编码 38 def main (): # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输出模式，并且初始化为高电平 GPIO . setup ( output_pin , GPIO . OUT , initial = GPIO . HIGH ) # 记录当前管脚状态 curr_value = GPIO . HIGH print ( \"Starting demo now! Press CTRL+C to exit\" ) try : # 间隔1秒时间，循环控制LED灯亮灭 while True : time . sleep ( 1 ) GPIO . output ( output_pin , curr_value ) curr_value ^= GPIO . HIGH finally : GPIO . cleanup () if __name__ == '__main__' : main ()","text_tokens":["name","py","time","时间","exit","38","硬件","starting","记录","env","!","demo","电平","使用","out","编号","设置","pin","output","hobot","_","main","print","board","=","初始","^","初始化","sleep","为","间隔","\"","high","管脚","灭","通道","+","led","#","true","__","/","定义","编码","并且","while","finally","to","bin","press","，","(","setmode","ctrl","gpio",":","if","秒",",","当前","def","now","模式","高电平","curr","cleanup","as","import","try","灯亮","的"," ",".","'","状态","initial","1","python3","c","：","控制","setup","simple","输出","value","usr","循环",")"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_12","text":"学习了GPIO的输入与输出功能后，我们就可以做一些自动化的功能了。","text_tokens":["功能","输入","的","就","gpio","。","可以","后","输出","一些","，","自动","与","了","我们","自动化","做","学习"],"title":"数字输入与输出集成","title_tokens":["输入","数字","输出","集成","与"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_13","text":"比如我们同时连接一个按键和LED灯，尝试实现按键被按下，灯被点亮，松开，灯熄灭，这样的功能。","text_tokens":["按","比如","这样","点亮","下","松开","一个","同时","尝试","和","led","功能","被","灯","。","实现","我们","连接","按键","的","熄灭","，"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_14","text":"我们通过这个例程来试一试效果如何？ $ sudo python3 button_led.py 我们来看一下具体的操作，同样的，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。按下按键后，就可以看到LED被点亮了，松开之后，LED就熄灭了。","text_tokens":["就","py","实物","按下","看到","点亮","sudo","这个","效果","来看","python3","然后","松开","将","刚才","通过","led","？","同样","程序","按照","x3pi","被","之后","来","完成","试一试","如何","具体","设置","后","$","。","我们","连接","_","按键","例程","的","运行","熄灭","一下"," ","button","可以",".","，","操作","了","到"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_15","text":"button_led.py #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道： # 36号作为输出，可以点亮一个LED # 38号作为输入，可以接一个按钮 led_pin = 36 # BOARD 编码 36 but_pin = 38 # BOARD 编码 38 # 禁用警告信息 GPIO . setwarnings ( False ) def main (): prev_value = None # Pin Setup: GPIO . setmode ( GPIO . BOARD ) # BOARD pin-numbering scheme GPIO . setup ( led_pin , GPIO . OUT ) # LED pin set as output GPIO . setup ( but_pin , GPIO . IN ) # Button pin set as input # Initial state for LEDs: GPIO . output ( led_pin , GPIO . LOW ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : curr_value = GPIO . input ( but_pin ) if curr_value != prev_value : GPIO . output ( led_pin , curr_value ) prev_value = curr_value print ( \"Outputting {} to Pin {} \" . format ( curr_value , led_pin )) time . sleep ( 1 ) finally : GPIO . cleanup () # cleanup all GPIO if __name__ == '__main__' : main () 基本的配置还是一样的，引入基本的库，然后设置为BOARD模式，然后初始化两个管脚，一个用来读取按键的通断，一个用来控制LED的亮灭，之后只需要判断按键的状态来做出对应的控制LED的动作就可以了。","text_tokens":["name","py","time","prev","接","exit","38","starting","leds","}","动作","env","!","demo","使用","out","基本","只","来","{","设置","pin","output","hobot","_","main","print","按键","board","=","初始","可以","初始化","sleep","为","36","\"","none","配置","判断","numbering","警告","管脚","灭","set","通道","然后","+","all","led","outputting","#","true","__","format","定义","/","。","编码","while","finally","to","bin","亮","button","库","press","input","读取","，","两个","引入","就","ctrl","(","setmode","gpio",":","if","需要",",","一样","点亮","用来","def","一个","now","模式","cleanup","curr","按钮","as","import","try","之后","通断","scheme","的","号"," ","setwarnings",".","'","了","状态","initial","1","false","输入","python3","c","对应","in","：","控制","setup","做出","还是","输出","value","low","-","作为","信息","禁用","usr","state","for","but",")"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/","text":"PWM脉冲宽度调制 我们已经可以用GPIO控制LED灯一闪一闪亮晶晶了，这样只有亮和灭的状态似乎还是太简单了，能不能对LED的亮度进行调整呢？ 当然没问题，这就要用到接下来学习的PWM脉冲宽度调制了。 PWM脉冲宽度调制原理 在GPIO的数字输入和输出模式中，只有高低电平，高电平一般是3.3V或者5V，低电平就是0V，如果我想要一个折中一点的电压怎么办呢？PWM大家了解一下。 PWM，全称是脉冲宽度调制 ， 是一种对模拟信号电平进行数字编码的方法，通过高分辨率计数器，调制出一定占空比的方波，通过这种方式对模拟信号的电平进行编码。 通俗点来说，如果我们有一个10W的灯泡，在一个小时中亮了半个小时，那我们宏观来看，它在这一个小时中的功率就是5W，这样就相当于是它的电压被降低了。而我们还可以通过改变这一个小时中，灯泡被点亮的时长，来等效出不同的电压。 然后，我们把一个小时缩短为很小的一个时间，到达一定的微分程度，表现出来的就是电压的变化，而这个很小的时间，就是PWM频率的倒数，被点亮的时间在这个很小的时间中所占的百分比就叫做占空比。 这里大家也要注意，虽然PWM在尽力呈现出模拟信号的样子，但本质还是数字信号，因为在给定的某一任何时刻，引脚只能高电平或者低电平。 通过PWM技术，可以让数字电路产生类似模拟信号的效果，从而实现类似的无级控制，比如风扇的转速，或者屏幕的亮度，很多都是通过PWM技术实现的调节。 PWM编程 接下来我们就来试一试，通过PWM让一个LED实现不同亮度的变化，也就是我们常见的呼吸灯了。 硬件接线 还是用这个LED灯，一端连接电阻，再到5V高电平的引脚，另外一端，接到33号引脚的PWM接口。 运行示例程序 大家先来运行例程，看看效果如何。 $ sudo python3 simple_pwm.py 我们来看一下实物的操作，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。就可以看到这样的一个呼吸灯的效果了。 代码解析 simple_pwm.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 支持PWM的管脚: 32 and 33, 在使用PWM时，必须确保该管脚没有被其他功能占用 output_pin = 33 def main (): # Pin Setup: # Board pin-numbering scheme GPIO . setmode ( GPIO . BOARD ) # 支持的频率范围： 48KHz ~ 192MHz p = GPIO . PWM ( output_pin , 48000 ) # 初始占空比 25%， 先每0.25秒增加5%占空比，达到100%之后再每0.25秒减少5%占空比 val = 25 incr = 5 p . ChangeDutyCycle ( val ) p . start ( val ) print ( \"PWM running. Press CTRL+C to exit.\" ) try : while True : time . sleep ( 0.25 ) if val >= 100 : incr = - incr if val <= 0 : incr = - incr val += incr p . ChangeDutyCycle ( val ) finally : p . stop () GPIO . cleanup () if __name__ == '__main__' : main () 一样的引入GPIO的库，然后设置管脚编码模式为BOARD，然后创建一个PWM的实例化对象p，同时设置他的频率，之后就可以通过ChangeDutyCycle来改变他的占空比，在循环当中，占空比大于等于100时，就会以5%的梯度减小；当小于等于0时，就会以5%的梯度增大。","text_tokens":["name","高分辨率","该",">","转速","<","叫做","已经","接到","功能","简单","设置","incr","范围","hobot","例程","时刻","stop","问题","因为","32","都","以","sleep","0","梯度","5%","时长","要","led","？","计数器","一","小于","如何","/","半个","出来","其他","电压","现出","press","，","缩短","示例","就","让","48khz","这样","出","秒","太","没有","一样","也","这种","达到","被","表现","似乎","scheme","虽然","电路","脉冲","的","或者","号","我","了","百分比","比如","192mhz","原理","倒数","大家","接口","将","同时","当于","变化","到达","功率","就是","类似","控制","还","占空比","中","连接","5","进行","循环","；","分辨率","微分",")","py","引脚","何时","来看","很小","!","通过","和","不同","屏幕","灯泡","它","$","print","数字编码","=","可以","为","从而","5v","numbering","管脚","灭","接线","这个","然后","+","先","中所","刚才","10w","高","程序","某","x3pi","样子","这","5w","完成","试一试","。","实现","呼吸","学习","编码","增加","while","finally","数字信号","库","创建","无级","怎么","模拟信号","引入","ctrl","用","呢","那","当然","v","(","3.3","亮晶晶","就要","只有","一个","模式","给定","对","import","按照","频率","一种","之后","相当于","模拟","会","尽力","他","running","一点","等效","减小","但","再","常见","实例","折中","时","python3","c","不能","：","每","占","低电平","编程","通俗","风扇","48000","usr","把","晶晶","注意","下来","有","时间","exit","硬件","产生","sudo","改变","这里","百分","只能","使用","怎么办","当中","呈现","output","电阻","必须","数字电路","_","数字","接下","高分","化","任何","占用","宽度","效果","代码","小时","true","计数","技术","25%","方波","setmode","gpio",":","~","是","点亮","方法","任何时刻","0.25","当","高电平","as","大于","灯","辨率","数字电"," ","中亮","本质",".","状态","到","and","pwm","降低","实物","输入","调节","而","相当","setup","simple","分辨","运行","一下","支持","接下来","time","调整","env","电平","确保","来","changedutycycle","100","一般","pin","调制","呈现出","我们","方式","main","board","亮度","初始","能","对象","想要","\"","等于","解析","程度","了解","#","__","另外","33","to","bin","亮","减少","start","如果","if","来说",",","0v","增大","看到","p","def","看看","cleanup","宏观","25","try","灯一闪","100%","一闪","'","信号","没","点","一端","用到","val","在","还是","全称","输出","-","很多","操作","一定"],"title":"PWM脉冲宽度调制","title_tokens":["宽度","调制","脉冲","pwm"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm","text":"我们已经可以用GPIO控制LED灯一闪一闪亮晶晶了，这样只有亮和灭的状态似乎还是太简单了，能不能对LED的亮度进行调整呢？ 当然没问题，这就要用到接下来学习的PWM脉冲宽度调制了。","text_tokens":["pwm","用","呢","当然","gpio","没","这样","灭","太","宽度","亮晶晶","就要","调整","用到","只有","不能","已经","和","led","？","对","控制","简单","灯一闪","这","还是","似乎","调制","。","我们","学习","脉冲","的","接下","亮","问题","亮度"," ","可以","一闪","进行","晶晶","，","能","了","状态","下来","接下来"],"title":"PWM脉冲宽度调制","title_tokens":["宽度","调制","脉冲","pwm"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm_1","text":"在GPIO的数字输入和输出模式中，只有高低电平，高电平一般是3.3V或者5V，低电平就是0V，如果我想要一个折中一点的电压怎么办呢？PWM大家了解一下。 PWM，全称是脉冲宽度调制 ， 是一种对模拟信号电平进行数字编码的方法，通过高分辨率计数器，调制出一定占空比的方波，通过这种方式对模拟信号的电平进行编码。 通俗点来说，如果我们有一个10W的灯泡，在一个小时中亮了半个小时，那我们宏观来看，它在这一个小时中的功率就是5W，这样就相当于是它的电压被降低了。而我们还可以通过改变这一个小时中，灯泡被点亮的时长，来等效出不同的电压。 然后，我们把一个小时缩短为很小的一个时间，到达一定的微分程度，表现出来的就是电压的变化，而这个很小的时间，就是PWM频率的倒数，被点亮的时间在这个很小的时间中所占的百分比就叫做占空比。 这里大家也要注意，虽然PWM在尽力呈现出模拟信号的样子，但本质还是数字信号，因为在给定的某一任何时刻，引脚只能高电平或者低电平。 通过PWM技术，可以让数字电路产生类似模拟信号的效果，从而实现类似的无级控制，比如风扇的转速，或者屏幕的亮度，很多都是通过PWM技术实现的调节。","text_tokens":["有","引脚","高分辨率","时间","何时","产生","改变","这里","来看","很小","转速","叫做","通过","百分","电平","和","不同","只能","屏幕","灯泡","怎么办","来","它","一般","调制","呈现","呈现出","我们","方式","数字电路","数字","数字编码","时刻","亮度","因为","可以","都","想要","为","从而","5v","高分","时长","任何","宽度","这个","然后","效果","程度","中所","了解","要","10w","？","高","某","小时","样子","计数器","这","5w","一","计数","技术","。","实现","半个","编码","出来","数字信号","电压","现出","无级","怎么","，","缩短","模拟信号","方波","就","那","呢","如果","gpio","v","让","这样","出","是","来说","0v","3.3","方法","点亮","任何时刻","只有","也","一个","模式","高电平","给定","宏观","对","这种","频率","一种","被","表现","辨率","相当于","模拟","尽力","数字电","一点","虽然","电路","脉冲","的","等效","或者"," ","我","中亮","本质","但","了","信号","百分比","pwm","比如","降低","倒数","折中","大家","点","输入","调节","当于","变化","而","到达","功率","就是","类似","占","在","控制","还","相当","低电平","还是","分辨","全称","输出","占空比","中","通俗","风扇","一下","进行","把","分辨率","微分","很多","一定","注意"],"title":"PWM脉冲宽度调制原理","title_tokens":["脉冲","pwm","原理","调制","宽度"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm_2","text":"接下来我们就来试一试，通过PWM让一个LED实现不同亮度的变化，也就是我们常见的呼吸灯了。","text_tokens":["就","pwm","常见","让","也","一个","通过","变化","不同","led","就是","灯","来","试一试","。","实现","我们","呼吸","的","接下","亮度","，","了","下来","接下来"],"title":"PWM编程","title_tokens":["编程","pwm"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_1","text":"还是用这个LED灯，一端连接电阻，再到5V高电平的引脚，另外一端，接到33号引脚的PWM接口。","text_tokens":["再","5v","pwm","用","引脚","一端","这个","接口","高电平","电平","led","接到","灯","还是","另外","。","33","电阻","连接","的","号","，","到"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_2","text":"大家先来运行例程，看看效果如何。 $ sudo python3 simple_pwm.py 我们来看一下实物的操作，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。就可以看到这样的一个呼吸灯的效果了。","text_tokens":["就","pwm","py","实物","这样","大家","看到","sudo","效果","来看","python3","看看","然后","先","将","刚才","一个","程序","按照","x3pi","灯","来","simple","完成","如何","设置","$","。","我们","呼吸","连接","_","例程","的","运行","一下"," ","可以",".","，","操作","了","到"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_3","text":"simple_pwm.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 支持PWM的管脚: 32 and 33, 在使用PWM时，必须确保该管脚没有被其他功能占用 output_pin = 33 def main (): # Pin Setup: # Board pin-numbering scheme GPIO . setmode ( GPIO . BOARD ) # 支持的频率范围： 48KHz ~ 192MHz p = GPIO . PWM ( output_pin , 48000 ) # 初始占空比 25%， 先每0.25秒增加5%占空比，达到100%之后再每0.25秒减少5%占空比 val = 25 incr = 5 p . ChangeDutyCycle ( val ) p . start ( val ) print ( \"PWM running. Press CTRL+C to exit.\" ) try : while True : time . sleep ( 0.25 ) if val >= 100 : incr = - incr if val <= 0 : incr = - incr val += incr p . ChangeDutyCycle ( val ) finally : p . stop () GPIO . cleanup () if __name__ == '__main__' : main () 一样的引入GPIO的库，然后设置管脚编码模式为BOARD，然后创建一个PWM的实例化对象p，同时设置他的频率，之后就可以通过ChangeDutyCycle来改变他的占空比，在循环当中，占空比大于等于100时，就会以5%的梯度减小；当小于等于0时，就会以5%的梯度增大。","text_tokens":["name","py","time","exit","该",">","改变","<","env","!","通过","使用","功能","确保","来","当中","changedutycycle","100","设置","pin","incr","范围","output","必须","hobot","_","main","print","stop","board","=","初始","可以","32","对象","以","sleep","为","\"","0","梯度","numbering","化","5%","管脚","等于","占用","然后","+","先","#","true","小于","__","。","/","33","增加","while","finally","编码","to","其他","bin","25%","库","创建","press","，","减少","start","引入","就","(","setmode","ctrl","gpio",":","48khz","~","if","秒",",","没有","一样","增大","p","0.25","当","def","一个","模式","cleanup","as","import","大于","达到","频率","被","25","之后","try","会","scheme","他","running","的","减小","100%"," ",".","'","再","and","pwm","实例","192mhz","时","python3","同时","c","val","：","每","在","setup","simple","占空比","-","48000","usr","5","循环","；","支持",")"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/","text":"UART串口通信 现在的传感器和执行器种类越来越多，需要和控制器传输的数据也是多种多样，只用GPIO来控制和读取的话，只有0和1的状态，未免还是有点麻烦，各种各样的通信方法也层出不穷，UART串口通信绝对是最为常用的一种。 串口通信原理 串行通信是一种通讯协议，也可以简称为串口，可以理解为数据是串成一串的，所以也就只能一位一位的发送，这样传输的速度虽然受到了限制，但是对硬件线路的要求小，只需要一对传输线，一个发送，一个接收，就可以实现双向通信了。 一般情况下，串口模块发送数据的管脚叫做TX，接收数据的管脚叫做RX。发送端发过去的数据，需要对方串口模块的接收端来接收，所以一侧发送端的TX需要连接到另外一侧的接收端RX，接收和发送在两方看来是相对的，所以我们接线的时候，要记住永远是TX引脚连接到RX引脚，接反了数据就传输不了了。 硬件连接 接下来，我们就尝试通过一个串口模块来实现电脑和旭日X3Pi的串口通信。 在接线方面，我们先交叉连接串口模块和旭日X3Pi的RX、TX，同时为了让两边具有相同的参考电平，还要将两者的GND连接到一起，然后再把串口模块连接到电脑就可以了。 运行示例程序 接下来就可以运行串口通信的例程了。 $ sudo python3 test_serial.py 实物接线完成后，在旭日X3派的终端中输入指令启动例程，很快就可以在终端中看到串口向外发送的数据了。 在串口连接的电脑中打开一个串口软件，用来接收和发送数据，设置好端口和波特率，就能看到旭日X3派发过来的数据了。我们再使用电脑的串口软件尝试下发送数据给旭日X3派，输入1234，点击发送，可以看到，X3Pi的终端这边也成功的接收到了数据并且打印出来了。 代码解析 test_serial.py： #!/usr/bin/env python3 import sys import os import time # 导入python串口库 import serial import serial.tools.list_ports def serialTest (): print ( \"List of enabled UART:\" ) os . system ( 'ls /dev/tty[a-zA-Z]*' ) uart_dev = input ( \"请输入需要测试的串口设备名:\" ) baudrate = input ( \"请输入波特率(9600,19200,38400,57600,115200,921600):\" ) try : ser = serial . Serial ( uart_dev , int ( baudrate ), timeout = 1 ) # 1s timeout except Exception as e : print ( \"open serial failed! \\n \" ) print ( ser ) print ( \"Starting demo now! Press CTRL+C to exit\" ) while True : test_data = \"AA55\" write_num = ser . write ( test_data . encode ( 'UTF-8' )) print ( \"Send: \" , test_data ) received_data = ser . read ( write_num ) . decode ( 'UTF-8' ) if received_data : print ( \"Recv: \" , received_data ) time . sleep ( 1 ) ser . close () return 0 if __name__ == '__main__' : if serialTest () != 0 : print ( \"Serial test failed!\" ) else : print ( \"Serial test success!\" ) X3Pi这边如果要使用串口，直接使用serial库就可以了，这里我们先调用系统的库，打印出当前有哪些串口，然后手动输入选择串口的设备名，再输入串口的波特率，就可以进项串口的初始化了，初始化成功之后就会进入循环。 循环中，X3Pi会每隔一秒发送一次AA55，同时还会判断是否接收到了数据，如果接收到了数据也会打印出来。","text_tokens":["name","有点","except","越来","每隔","python","所以","叫做","调用","设置","1234","看来","的话","接收端","timeout","例程","串成","测试","sleep","0","指令","判断","tools","data","一串","n","要","、","派","速度","旭日","os","未免","/","只用","出来","永远","press","，","示例","就","让","这样","出","921600","波特率","理解","也","是否","感器","后","打印","虽然","的","多种多样","了","close","传感","原理","接收","read","同时","将","端的","各种","波特","小","哪些","控制","success","中","test","连接","115200","循环",")","py","接收数据","引脚","启动","传感器","麻烦","num","打开","!","通过","串行","和","z","$","过去","print","encode","enabled","传输","=","可以","这边","初始化","为","为了","return","端发","管脚","aa55","接线","然后","+","多样","先","请","过来","各种各样","程序","x3pi","x3","完成","。","实现","并且","while","手动","通信","库","导入","(","ctrl","*","时候","一秒","下","当前","只有","一个","尝试","now","received","57600","对","import","常用","一种","之后","会","名","简称","线路","再","串口","38400","python3","c","受到","system","：","还会","一次","电脑","list","usr","把","下来","rx","有","最为","硬件","exit","相同","sudo","这里","一侧","模块","多","demo","send","只能","使用","只","接反","端口","各样","_","接下","utf","绝对","[","限制","exception","选择","终端","代码","进项","两方","decode","true","双向","执行器","读取","input","发送数据","还要","gpio",":","是","方法","要求","相对","as","传输线","种类","failed","write","\\","19200","给","ports"," ",".","状态","到","现在","两边","]","实物","交叉","一位","za","输入","进入","gnd","数据","控制器","协议","ser","具有","运行","点击","双向通信","接下来","time","一对","starting","env","成功","越来越","电平","int","来","一般","我们","main","很快","好","初始","对方","能","层出不穷","\"","设备","解析","a","但是","参考","tx","两者","9600","e","向外","8","#","__","另外","to","bin","tty","情况","ls","软件","方面","uart","一起","recv","如果","if","需要","else",",","看到","用来","def","发送","记住","多种","serial","直接","try","系统","open","不了","sys","'","通讯","执行","serialtest","1","派发","dev","在","of","还是","-","1s","baudrate"],"title":"UART异步串口通信","title_tokens":["通信","异步","uart","串口"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#uart","text":"现在的传感器和执行器种类越来越多，需要和控制器传输的数据也是多种多样，只用GPIO来控制和读取的话，只有0和1的状态，未免还是有点麻烦，各种各样的通信方法也层出不穷，UART串口通信绝对是最为常用的一种。","text_tokens":["执行","0","现在","1","串口","gpio","有点","传感","越来","需要","最为","是","方法","传感器","麻烦","只有","多样","也","多","越来越","各种","和","数据","多种","各种各样","常用","控制器","一种","控制","种类","感器","来","还是","未免","。","的话","只用","各样","的","执行器","通信","传输","绝对","多种多样","读取","，","状态","层出不穷","uart"],"title":"UART串口通信","title_tokens":["通信","uart","串口"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_1","text":"串行通信是一种通讯协议，也可以简称为串口，可以理解为数据是串成一串的，所以也就只能一位一位的发送，这样传输的速度虽然受到了限制，但是对硬件线路的要求小，只需要一对传输线，一个发送，一个接收，就可以实现双向通信了。 一般情况下，串口模块发送数据的管脚叫做TX，接收数据的管脚叫做RX。发送端发过去的数据，需要对方串口模块的接收端来接收，所以一侧发送端的TX需要连接到另外一侧的接收端RX，接收和发送在两方看来是相对的，所以我们接线的时候，要记住永远是TX引脚连接到RX引脚，接反了数据就传输不了了。","text_tokens":["一对","接收数据","rx","引脚","硬件","所以","一侧","模块","叫做","串行","和","只能","只","来","一般","接反","看来","我们","过去","接收端","串成","传输","可以","对方","为","限制","端发","管脚","接线","一串","两方","但是","要","tx","速度","双向","。","实现","另外","通信","永远","情况","，","发送数据","就","时候","需要","这样","是","下","理解","发送","要求","也","一个","记住","相对","对","传输线","一种","虽然","的"," ","不了","了","简称","到","线路","通讯","串口","一位","接收","受到","端的","数据","小","在","连接","协议","双向通信"],"title":"串口通信原理","title_tokens":["通信","原理","串口"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_2","text":"接下来，我们就尝试通过一个串口模块来实现电脑和旭日X3Pi的串口通信。 在接线方面，我们先交叉连接串口模块和旭日X3Pi的RX、TX，同时为了让两边具有相同的参考电平，还要将两者的GND连接到一起，然后再把串口模块连接到电脑就可以了。","text_tokens":["为了","再","就","串口","两边","还要","rx","让","交叉","相同","接线","然后","先","模块","一个","同时","尝试","将","通过","gnd","参考","和","tx","电平","两者","、","x3pi","在","来","电脑","旭日","。","实现","我们","连接","的","接下","具有","了","通信"," ","可以","把","，","方面","到","一起","下来","接下来"],"title":"硬件连接","title_tokens":["硬件","连接"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_3","text":"接下来就可以运行串口通信的例程了。 $ sudo python3 test_serial.py 实物接线完成后，在旭日X3派的终端中输入指令启动例程，很快就可以在终端中看到串口向外发送的数据了。 在串口连接的电脑中打开一个串口软件，用来接收和发送数据，设置好端口和波特率，就能看到旭日X3派发过来的数据了。我们再使用电脑的串口软件尝试下发送数据给旭日X3派，输入1234，点击发送，可以看到，X3Pi的终端这边也成功的接收到了数据并且打印出来了。","text_tokens":["再","发送数据","就","串口","指令","py","实物","启动","接线","接收","看到","波特率","sudo","输入","用来","下","python3","终端","发送","也","一个","成功","尝试","打开","派发","和","过来","使用","数据","serial","向外","波特","x3pi","在","x3","派","电脑","完成","旭日","设置","后","1234","打印","中","$","。","端口","我们","test","连接","给","_","并且","的","接下","例程","运行","很快","通信","好","这边","出来"," ","点击","可以",".","，","软件","能","了","到","下来","接下来"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_4","text":"test_serial.py： #!/usr/bin/env python3 import sys import os import time # 导入python串口库 import serial import serial.tools.list_ports def serialTest (): print ( \"List of enabled UART:\" ) os . system ( 'ls /dev/tty[a-zA-Z]*' ) uart_dev = input ( \"请输入需要测试的串口设备名:\" ) baudrate = input ( \"请输入波特率(9600,19200,38400,57600,115200,921600):\" ) try : ser = serial . Serial ( uart_dev , int ( baudrate ), timeout = 1 ) # 1s timeout except Exception as e : print ( \"open serial failed! \\n \" ) print ( ser ) print ( \"Starting demo now! Press CTRL+C to exit\" ) while True : test_data = \"AA55\" write_num = ser . write ( test_data . encode ( 'UTF-8' )) print ( \"Send: \" , test_data ) received_data = ser . read ( write_num ) . decode ( 'UTF-8' ) if received_data : print ( \"Recv: \" , received_data ) time . sleep ( 1 ) ser . close () return 0 if __name__ == '__main__' : if serialTest () != 0 : print ( \"Serial test failed!\" ) else : print ( \"Serial test success!\" ) X3Pi这边如果要使用串口，直接使用serial库就可以了，这里我们先调用系统的库，打印出当前有哪些串口，然后手动输入选择串口的设备名，再输入串口的波特率，就可以进项串口的初始化了，初始化成功之后就会进入循环。 循环中，X3Pi会每隔一秒发送一次AA55，同时还会判断是否接收到了数据，如果接收到了数据也会打印出来。","text_tokens":["name","py","time","有","except","exit","每隔","starting","python","这里","env","成功","num","!","调用","demo","send","使用","int","z","我们","_","main","print","encode","timeout","enabled","utf","=","初始","可以","这边","测试","初始化","sleep","[","\"","return","0","判断","tools","data","设备","aa55","exception","选择","a","+","然后","先","进项","n","请","要","9600","e","x3pi","8","decode","#","true","__","os","。","/","while","to","手动","bin","出来","库","导入","tty","ls","press","input","，","uart","recv","就","(","ctrl","*","如果",":","if","需要","else","出",",","921600","一秒","波特率","当前","def","发送","也","now","是否","received","57600","as","import","serial","直接","try","之后","failed","系统","write","会","\\","打印","19200","open","ports","的"," ",".","名","'","sys","了","到","再","serialtest","1","串口","]","close","za","38400","接收","read","输入","python3","进入","同时","c","system","数据","：","波特","哪些","dev","of","还会","一次","success","list","中","-","test","ser","1s","115200","usr","baudrate","循环",")"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/","text":"SPI同步串行通信 UART串口通信中的数据只能一位一位的传输，如果数据量比较大的时候，传输速率会受到很大影响，此时我们就可以考虑使用同步串行通信了，比如SPI。 SPI通信原理 SPI，全称是Serial Peripheral Interface，也就是串行外设接口，同样是一种通信协议，在很多芯片中都有集成。 相比之前学习的UART串口通信，他多了两根线，其中一个是时钟信号，另一个是设备使能信号，用来控制设备是否启用，所以也产生了主从设备的概念。 MISO ：Master Input Slave Output，主设备数据输入，从设备数据输出； MOSI ：Master Output Slave Input，主设备数据输出，从设备数据输入； SCLK ：Serial Clock，时钟信号，由主设备产生； CS ：Chip Select，从设备使能信号，由主设备控制。 这样，在一组SPI通信的系统中，可以连接多个设备，想要和哪个设备通信时，就使能这个设备，除能其他设备。 我们在开发中常见的SPI设备会有一些传感器，还有电阻屏之类的。 硬件连线 在SPI的通信中，有一个管脚负责发送，另外一个管脚负责接收，如果我们把同一组SPI的发送和接收接到一起，岂不是能接收到自己发送的数据吗？ 我们不妨来试一试，这里使用一个跳线帽直接把19，21两个SPI的通信管脚短接。 运行示例程序 大家来运行例程，看看会发生什么？ $ sudo python3 test_spi.py 在旭日X3派的终端中，输入运行例程的指令，接下来我们就可以看到通过SPI传输并收到的数据啦，相当于是左手传递给右手，自己给自己循环传输数据了。 代码解析 test_spi.py： #!/usr/bin/env python3 import sys import os import time # 导入spidev模块 import spidev def BytesToHex ( Bytes ): return '' . join ([ \"0x %02X \" % x for x in Bytes ]) . strip () def spidevTest (): # 设置spi的bus号（0, 1, 2）和片选(0, 1) spi_bus = input ( \"Please input SPI bus num:\" ) spi_device = input ( \"Please input SPI cs num:\" ) # 创建spidev类的对象以访问基于spidev的Python函数。 spi = spidev . SpiDev () # 打开spi总线句柄 spi . open ( int ( spi_bus ), int ( spi_device )) # 设置 spi 频率为 12MHz spi . max_speed_hz = 12000000 print ( \"Starting demo now! Press CTRL+C to exit\" ) # 发送 [0x55, 0xAA], 接收的数据应该也是 [0x55, 0xAA] try : while True : resp = spi . xfer2 ([ 0x55 , 0xAA ]) print ( BytesToHex ( resp )) time . sleep ( 1 ) except KeyboardInterrupt : spi . close () if __name__ == '__main__' : print ( \"List of enabled spi controllers:\" ) os . system ( 'ls /dev/spidev*' ) spidevTest () 在python中使用spidev这个库，初始化X3Pi的SPI，之后使用xerf2发送数据，同时接收数据，并打印出来，会发现打印出来的就是我们发送的。","text_tokens":["02x","name","speed","py","time","有","接收数据","except","exit","多个","硬件","产生","starting","python","所以","片选","传感器","这里","sudo","12000000","max","主","模块","env","num","考虑","多","跳线","帽","集成","串行","和","只能","使用","接到","通过","int","demo","controllers","其中",")","来","两根","屏","设置","左手","$","我们","output","电阻","_","main","print","0xaa","例程","接下","enabled","自己","传输","=","初始","可以","%","大","join","都","能","对象","相比","以","影响","想要","[","句柄","spidevtest","为","sleep","return","\"","0","指令","什么","设备","总线","hz","管脚","下来","之类","bytestohex","通信协议","解析","这个","0x55","+","终端","代码","peripheral","比较","启用","数据量","？","sclk","程序","）","x3pi","x3","xerf2","派","strip","#","true","试一试","旭日","外设","master","函数","__","os","spi","传输速率","。","另外","/","学习","同步","除能","还有","while","resp","to","其他","19","bin","出来","通信","slave","库","导入","速率","创建","ls","press","input","clock","，","mosi","示例","发现","uart","一起","两个","发送数据","右手","类","就","xfer2","(","ctrl","*","如果",":","bytes","时候","2","if","这样","是","从",",","访问","看到","用来","之前","def","发送","看看","不妨","也","一个","miso","是否","please","传递","now","线","连线","import","serial","interface","直接","一种","频率","try","相当于","系统","感器","之后","岂","会","!","keyboardinterrupt","打印","概念","他","很大","open","使","给","收到","哪个","的","不是","bus","芯片","号","0x"," ","一些",".","啦","sys","了","chip","到","21","并","'","信号","1","串口","比如","常见","]","负责","close","基于","cs","原理","传感","x","一位","大家","并打印","时","接收","另","输入","传输数据","python3","接口","吗","同时","c","受到","开发","当于","in","system","初始化","同样","数据","此时","：","就是","发生","dev","在","控制","时钟","device","相当","of","应该","打开","全称","spidev","输出","中","list","test","select","连接","12mhz","协议","（","一组","运行","usr","同","循环","；","for","把","很多","主从","由主","使能","短接","接下来"],"title":"SPI同步串行通信","title_tokens":["spi","串行","通信","同步"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#spi","text":"UART串口通信中的数据只能一位一位的传输，如果数据量比较大的时候，传输速率会受到很大影响，此时我们就可以考虑使用同步串行通信了，比如SPI。","text_tokens":["就","串口","比如","如果","时候","一位","受到","考虑","比较","串行","数据量","只能","使用","数据","此时","会","中","spi","传输速率","我们","很大","。","同步","的","通信","传输","速率","可以","大","影响","，","了","uart"],"title":"SPI同步串行通信","title_tokens":["spi","串行","通信","同步"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#spi_1","text":"SPI，全称是Serial Peripheral Interface，也就是串行外设接口，同样是一种通信协议，在很多芯片中都有集成。 相比之前学习的UART串口通信，他多了两根线，其中一个是时钟信号，另一个是设备使能信号，用来控制设备是否启用，所以也产生了主从设备的概念。 MISO ：Master Input Slave Output，主设备数据输入，从设备数据输出； MOSI ：Master Output Slave Input，主设备数据输出，从设备数据输入； SCLK ：Serial Clock，时钟信号，由主设备产生； CS ：Chip Select，从设备使能信号，由主设备控制。 这样，在一组SPI通信的系统中，可以连接多个设备，想要和哪个设备通信时，就使能这个设备，除能其他设备。 我们在开发中常见的SPI设备会有一些传感器，还有电阻屏之类的。","text_tokens":["有","多个","产生","所以","传感器","主","多","集成","串行","和","其中","两根","屏","我们","output","电阻","可以","都","能","相比","想要","设备","之类","通信协议","这个","peripheral","启用","sclk","外设","master","spi","。","学习","除能","还有","其他","通信","slave","input","clock","，","mosi","uart","就","这样","是","从","用来","之前","也","一个","miso","是否","线","serial","interface","一种","系统","感器","会","概念","他","使","哪个","的","芯片"," ","一些","了","chip","信号","串口","常见","cs","传感","时","另","输入","接口","开发","同样","数据","：","就是","在","控制","时钟","全称","输出","中","select","连接","协议","一组","；","很多","主从","由主","使能"],"title":"SPI通信原理","title_tokens":["spi","通信","原理"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_1","text":"在SPI的通信中，有一个管脚负责发送，另外一个管脚负责接收，如果我们把同一组SPI的发送和接收接到一起，岂不是能接收到自己发送的数据吗？ 我们不妨来试一试，这里使用一个跳线帽直接把19，21两个SPI的通信管脚短接。","text_tokens":["如果","有","负责","管脚","接收","这里","发送","不妨","吗","一个","跳线","帽","短接","和","使用","接到","？","数据","直接","在","来","试一试","岂","中","另外","spi","我们","。","一组","21","的","不是","19","通信","自己"," ","同","把","，","能","到","一起","两个"],"title":"硬件连线","title_tokens":["硬件","连线"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_2","text":"大家来运行例程，看看会发生什么？ $ sudo python3 test_spi.py 在旭日X3派的终端中，输入运行例程的指令，接下来我们就可以看到通过SPI传输并收到的数据啦，相当于是左手传递给右手，自己给自己循环传输数据了。","text_tokens":["右手","就","指令","py","什么","是","大家","看到","sudo","输入","传输数据","python3","看看","终端","传递","通过","当于","？","数据","发生","在","x3","相当","派","相当于","来","旭日","会","中","$","spi","左手","我们","test","。","给","_","收到","例程","的","接下","运行","了","自己","传输"," ","可以","循环",".","，","啦","并","下来","接下来"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_3","text":"test_spi.py： #!/usr/bin/env python3 import sys import os import time # 导入spidev模块 import spidev def BytesToHex ( Bytes ): return '' . join ([ \"0x %02X \" % x for x in Bytes ]) . strip () def spidevTest (): # 设置spi的bus号（0, 1, 2）和片选(0, 1) spi_bus = input ( \"Please input SPI bus num:\" ) spi_device = input ( \"Please input SPI cs num:\" ) # 创建spidev类的对象以访问基于spidev的Python函数。 spi = spidev . SpiDev () # 打开spi总线句柄 spi . open ( int ( spi_bus ), int ( spi_device )) # 设置 spi 频率为 12MHz spi . max_speed_hz = 12000000 print ( \"Starting demo now! Press CTRL+C to exit\" ) # 发送 [0x55, 0xAA], 接收的数据应该也是 [0x55, 0xAA] try : while True : resp = spi . xfer2 ([ 0x55 , 0xAA ]) print ( BytesToHex ( resp )) time . sleep ( 1 ) except KeyboardInterrupt : spi . close () if __name__ == '__main__' : print ( \"List of enabled spi controllers:\" ) os . system ( 'ls /dev/spidev*' ) spidevTest () 在python中使用spidev这个库，初始化X3Pi的SPI，之后使用xerf2发送数据，同时接收数据，并打印出来，会发现打印出来的就是我们发送的。","text_tokens":["02x","name","speed","py","time","接收数据","except","exit","starting","python","片选","12000000","max","模块","env","num","!","打开","demo","和","使用","int","设置","我们","_","main","print","0xaa","enabled","=","初始","%","join","以","对象","初始化","sleep","句柄","为","[","controllers","spidevtest","return","\"","0","总线","hz","bytestohex","0x55","这个","+","）","x3pi","xerf2","strip","#","true","函数","__","os","spi","/","。","while","resp","to","出来","bin","库","导入","创建","ls","press","input","，","发现","发送数据","类","xfer2","(","ctrl","*",":","bytes","2","if","是",",","访问","def","发送","也","please","now","import","频率","try","之后","keyboardinterrupt","会","打印","open","的","号","0x"," ",".","bus","'","sys","1","]","close","基于","cs","x","并打印","接收","python3","同时","c","system","in","数据","：","就是","dev","device","of","在","应该","spidev","list","中","test","12mhz","（","usr","for",")"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/","text":"I2C同步串行通信 SPI通信虽然功能更强大了，但是需要4根线做连接，还是有点复杂，接下来I2C的连线就简单很多了。 I2C通信原理 I2C也是一种常用的串行通信方式，和SPI一样可以连接多个设备，重点是它只需要两根线就可以完成。 不过他的两根线和UART不同，不全是传输数据用的，I2C中的一根线是时钟线，另一根才是传输数据的，这根线可以双向的传输数据。 I2C通信中可以有多个主设备或者从设备，只要能通过地址找到彼此的位置即可。 主器件用于启动总线传送数据，并产生时钟给各种从机，此时任何被寻址的器件均被认为是从机。在总线上主和从、发和收的关系不是恒定的，而取决于此时数据传送方向。如果主机要发送数据给从机，主机首先得找到从机的地址，然后主动发送数据过去，最后也得由主机终止数据传送；如果主机要接收从机的数据，同样由主机得找到从机的地址，然后主机接收从器件发送的数据，最后由主机终止接收过程。 因为I2C的特性，使用I2C的设备比SPI多很多，比如图中的紫外线传感器，陀螺仪之类的，都是使用I2C进行通信的。 硬件接线 我们找来一个常用的陀螺仪模块，按照这里的接线图连接到旭日X3派的40PIN接口上，这里除了I2C通信的两根线之外，另外两根是电源线，负责给这个模块供电的，让它正常工作起来。 运行示例程序 接线是挺简单的，我们继续来运行这个例程，看下能否收到数据。 $ sudo python3 mpu6500_i2c.py 在终端启动例程，很快就可以看到通过I2C读取到了大量传感器的数据，这些就是陀螺仪模块的原始数据，收到之后我们就可以进行结算处理啦，这就是我们后续机器人开发的需要解决的问题了。 代码解析 mpu6500_i2c.py： #!/usr/bin/env python3 import smbus , time def MPU6050_start (): # alter sample rate (stability) samp_rate_div = 0 # sample rate = 8 kHz/(1+samp_rate_div) bus . write_byte_data ( MPU6050_ADDR , SMPLRT_DIV , samp_rate_div ) time . sleep ( 0.1 ) # reset all sensors bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x00 ) time . sleep ( 0.1 ) # power management and crystal settings bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x01 ) time . sleep ( 0.1 ) #Write to Configuration register bus . write_byte_data ( MPU6050_ADDR , CONFIG , 0 ) time . sleep ( 0.1 ) #Write to Gyro configuration register gyro_config_sel = [ 0b00000 , 0b010000 , 0b10000 , 0b11000 ] # byte registers gyro_config_vals = [ 250.0 , 500.0 , 1000.0 , 2000.0 ] # degrees/sec gyro_indx = 0 bus . write_byte_data ( MPU6050_ADDR , GYRO_CONFIG , int ( gyro_config_sel [ gyro_indx ])) time . sleep ( 0.1 ) #Write to Accel configuration register accel_config_sel = [ 0b00000 , 0b01000 , 0b10000 , 0b11000 ] # byte registers accel_config_vals = [ 2.0 , 4.0 , 8.0 , 16.0 ] # g (g = 9.81 m/s^2) accel_indx = 0 bus . write_byte_data ( MPU6050_ADDR , ACCEL_CONFIG , int ( accel_config_sel [ accel_indx ])) time . sleep ( 0.1 ) # interrupt register (related to overflow of data [FIFO]) bus . write_byte_data ( MPU6050_ADDR , INT_ENABLE , 1 ) time . sleep ( 0.1 ) return gyro_config_vals [ gyro_indx ], accel_config_vals [ accel_indx ] def read_raw_bits ( register ): # read accel and gyro values high = bus . read_byte_data ( MPU6050_ADDR , register ) low = bus . read_byte_data ( MPU6050_ADDR , register + 1 ) # combine higha and low for unsigned bit value value = (( high << 8 ) | low ) # convert to +- value if ( value > 32768 ): value -= 65536 return value def mpu6050_conv (): # raw acceleration bits acc_x = read_raw_bits ( ACCEL_XOUT_H ) acc_y = read_raw_bits ( ACCEL_YOUT_H ) acc_z = read_raw_bits ( ACCEL_ZOUT_H ) # raw temp bits ## t_val = read_raw_bits(TEMP_OUT_H) # uncomment to read temp # raw gyroscope bits gyro_x = read_raw_bits ( GYRO_XOUT_H ) gyro_y = read_raw_bits ( GYRO_YOUT_H ) gyro_z = read_raw_bits ( GYRO_ZOUT_H ) #convert to acceleration in g and gyro dps a_x = ( acc_x / ( 2.0 ** 15.0 )) * accel_sens a_y = ( acc_y / ( 2.0 ** 15.0 )) * accel_sens a_z = ( acc_z / ( 2.0 ** 15.0 )) * accel_sens w_x = ( gyro_x / ( 2.0 ** 15.0 )) * gyro_sens w_y = ( gyro_y / ( 2.0 ** 15.0 )) * gyro_sens w_z = ( gyro_z / ( 2.0 ** 15.0 )) * gyro_sens ## temp = ((t_val)/333.87)+21.0 # uncomment and add below in return return a_x , a_y , a_z , w_x , w_y , w_z # MPU6050 Registers MPU6050_ADDR = 0x68 PWR_MGMT_1 = 0x6B SMPLRT_DIV = 0x19 CONFIG = 0x1A GYRO_CONFIG = 0x1B ACCEL_CONFIG = 0x1C INT_ENABLE = 0x38 ACCEL_XOUT_H = 0x3B ACCEL_YOUT_H = 0x3D ACCEL_ZOUT_H = 0x3F TEMP_OUT_H = 0x41 GYRO_XOUT_H = 0x43 GYRO_YOUT_H = 0x45 GYRO_ZOUT_H = 0x47 # start I2C driver bus = smbus . SMBus ( 0 ) # start comm with i2c bus gyro_sens , accel_sens = MPU6050_start () # instantiate gyro/accel while True : print ( mpu6050_conv ()) 这里我们看一下怎么使用I2C和陀螺仪通信来获取信息。主体上有三个大的函数，而这三个函数的功能都比较单一，第一个函数通过给陀螺仪发送数据来进行初始化的设置，比如配置陀螺仪的电源寄存器，加速度寄存器等；第二个函数则是从陀螺仪读取数据；第三个函数则是将读取到的函数进行计算，从而变成真正的加速度等信息。 具体的读写操作可以看下面的代码片段，也是直接调用函数指定地址和数据就好了。 这里我们也能看到几个关键的参数，比如陀螺仪MPU6050的地址是0x68，通过这个地址才能确认到陀螺仪的存在，然后进行初始化，初始化完成之后进入循环，不停的将数据打印出来。","text_tokens":["取决于","alter","有点","才能",">","第二","config","特性","供电","vals","<","调用","addr","功能","简单","两根","sel","设置","片段","紫外","例程","问题","因为","继续","^","都","sleep","存在","陀螺仪","0","寄存","配置","data","high","acceleration","之类","之外","除了","0b010000","comm","机器人","0x1c","要","management","、","combine","派","主动","等","速度","旭日","/","出来","则","，","示例","21.0","处理","调用函数","overflow","sec","取信","就","外线","关系","让","地址","9.81","寄存器","一样","重点","reset","div","结算","也","m","只要","连线","被","感器","0b00000","正常","打印","比","虽然","的","或者","读取数据","0x1b","啦","configuration","0b11000","了","sens","陀螺","比如","15.0","负责","mpu6050","传感","原理","是从","接收","read","接口","将","开发","各种","|","就是","acc","一根","sample","t","获取信息","value","中","指定","0x47","接线图","连接","首先","higha","进行","循环","；","变成","即可",")","py","启动","原始","传感器","三个","认为","with","!","通过","串行","和","不同","40pin","bits","0x38","z","它","计算","$","y","二个","从机","过去","print","传输","samp","=","可以","初始化","从而","return","pwr","h","below","fifo","接线","关键","这个","找到","然后","+","才","0b10000","all","比较","mgmt","程序","x3","这","完成","由","spi","。","机器","while","通信","0.1","怎么","register","用","复杂","(","*","恒定","传送数据","2","下","均","250.0","一个","线","s","import","常用","按照","一种","传送","之后","0x45","0x01","读写操作","他","机","收到","0x3b","khz","bus","加速","333.87","第一","x","indx","传输数据","python3","方向","同样","此时","：","看","low","temp","usr","for","i2c","65536","下来","stability","yout","有","多个","硬件","产生","dps","sudo","这里","convert","模块","多","settings","使用","out","values","确认","只","工作","获取","8.0","_","接下","下面","+-","[","smbus","crystal","任何","1000.0","终端","代码","强大","真正","这根","true","器件","双向","函数","图中","同步","##","读取","第三个","寻址","第一个","发送数据",":","是","不全是","主机","第二个","加速度","终止","instantiate","write","给","conv"," ",".","到","读写","用于","sensors","and","找","]","得","进入","0x00","0x3d","in","而","数据","最后","更","具体","driver","电源","做","4","bit","related","挺","运行","信息","一下","rate","power","xout","0x41","接下来","time","几个","4.0","能否","主","env","原始数据","int","enable","紫外线","位置","来","registers","我们","方式","这些","500.0","很快","add","好","interrupt","初始","gyro","大","32768","能","解决","0x6b","彼此","取决","发和收","设备","总线","起来","解析","mpu6500","a","但是","accel","8","#","主体","另外","不过","to","bin","w","根线","uart","start","0x3f","如果","raw","过程","if","需要","从","后续",",","g","电源线","看到","zout","参数","def","发送","线图","smplrt","0x43","直接","单一","2.0","不是","0x68","第三","并","上主","1","0x19","另","0b01000","上","16.0","val","uncomment","2000.0","在","of","时钟","不停","还是","byte","unsigned","degrees","-","0x1a","大量","gyroscope","很多","操作"],"title":"I2C同步串行通信","title_tokens":["同步","串行","i2c","通信"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#i2c","text":"SPI通信虽然功能更强大了，但是需要4根线做连接，还是有点复杂，接下来I2C的连线就简单很多了。","text_tokens":["就","复杂","有点","需要","强大","但是","连线","功能","简单","更","还是","spi","。","连接","做","虽然","4","的","接下","通信","i2c","，","很多","了","根线","下来","接下来"],"title":"I2C同步串行通信","title_tokens":["同步","串行","i2c","通信"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#i2c_1","text":"I2C也是一种常用的串行通信方式，和SPI一样可以连接多个设备，重点是它只需要两根线就可以完成。 不过他的两根线和UART不同，不全是传输数据用的，I2C中的一根线是时钟线，另一根才是传输数据的，这根线可以双向的传输数据。 I2C通信中可以有多个主设备或者从设备，只要能通过地址找到彼此的位置即可。 主器件用于启动总线传送数据，并产生时钟给各种从机，此时任何被寻址的器件均被认为是从机。在总线上主和从、发和收的关系不是恒定的，而取决于此时数据传送方向。如果主机要发送数据给从机，主机首先得找到从机的地址，然后主动发送数据过去，最后也得由主机终止数据传送；如果主机要接收从机的数据，同样由主机得找到从机的地址，然后主机接收从器件发送的数据，最后由主机终止接收过程。 因为I2C的特性，使用I2C的设备比SPI多很多，比如图中的紫外线传感器，陀螺仪之类的，都是使用I2C进行通信的。","text_tokens":["取决于","有","启动","多个","产生","传感器","特性","认为","主","多","通过","串行","和","不同","使用","紫外线","位置","只","它","两根","从机","方式","过去","紫外","传输","因为","可以","能","都","陀螺仪","彼此","取决","发和收","设备","总线","之类","任何","找到","然后","才","要","、","这根","主动","完成","器件","双向","由","spi","。","图中","不过","通信","，","寻址","uart","发送数据","就","外线","用","关系","恒定","如果","传送数据","地址","过程","需要","是","从","一样","不全是","主机","重点","发送","均","也","只要","线","终止","常用","一种","被","传送","感器","比","他","机","给","的","不是","或者"," ","上主","并","陀螺","用于","比如","得","传感","是从","接收","另","传输数据","方向","各种","而","数据","此时","同样","在","时钟","最后","一根","中","连接","首先","进行","i2c","；","很多","即可"],"title":"I2C通信原理","title_tokens":["通信","i2c","原理"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_1","text":"我们找来一个常用的陀螺仪模块，按照这里的接线图连接到旭日X3派的40PIN接口上，这里除了I2C通信的两根线之外，另外两根是电源线，负责给这个模块供电的，让它正常工作起来。","text_tokens":["陀螺仪","找","负责","让","起来","是","接线","电源线","这里","供电","这个","之外","线图","接口","除了","模块","一个","上","线","40pin","按照","常用","x3","派","来","正常","工作","旭日","它","两根","另外","。","接线图","我们","电源","连接","给","的","通信","i2c","，","到","陀螺"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_2","text":"接线是挺简单的，我们继续来运行这个例程，看下能否收到数据。 $ sudo python3 mpu6500_i2c.py 在终端启动例程，很快就可以看到通过I2C读取到了大量传感器的数据，这些就是陀螺仪模块的原始数据，收到之后我们就可以进行结算处理啦，这就是我们后续机器人开发的需要解决的问题了。","text_tokens":["陀螺仪","就","py","启动","传感","原始","需要","解决","是","后续","接线","下","看到","sudo","mpu6500","传感器","这个","能否","python3","终端","结算","模块","原始数据","通过","机器人","开发","数据","就是","看","在","简单","之后","感器","来","这","$","。","我们","这些","收到","_","机器","的","例程","挺","运行","很快","大量","问题"," ","可以","进行","i2c","读取",".","，","继续","啦","了","到","陀螺","处理"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_3","text":"mpu6500_i2c.py： #!/usr/bin/env python3 import smbus , time def MPU6050_start (): # alter sample rate (stability) samp_rate_div = 0 # sample rate = 8 kHz/(1+samp_rate_div) bus . write_byte_data ( MPU6050_ADDR , SMPLRT_DIV , samp_rate_div ) time . sleep ( 0.1 ) # reset all sensors bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x00 ) time . sleep ( 0.1 ) # power management and crystal settings bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x01 ) time . sleep ( 0.1 ) #Write to Configuration register bus . write_byte_data ( MPU6050_ADDR , CONFIG , 0 ) time . sleep ( 0.1 ) #Write to Gyro configuration register gyro_config_sel = [ 0b00000 , 0b010000 , 0b10000 , 0b11000 ] # byte registers gyro_config_vals = [ 250.0 , 500.0 , 1000.0 , 2000.0 ] # degrees/sec gyro_indx = 0 bus . write_byte_data ( MPU6050_ADDR , GYRO_CONFIG , int ( gyro_config_sel [ gyro_indx ])) time . sleep ( 0.1 ) #Write to Accel configuration register accel_config_sel = [ 0b00000 , 0b01000 , 0b10000 , 0b11000 ] # byte registers accel_config_vals = [ 2.0 , 4.0 , 8.0 , 16.0 ] # g (g = 9.81 m/s^2) accel_indx = 0 bus . write_byte_data ( MPU6050_ADDR , ACCEL_CONFIG , int ( accel_config_sel [ accel_indx ])) time . sleep ( 0.1 ) # interrupt register (related to overflow of data [FIFO]) bus . write_byte_data ( MPU6050_ADDR , INT_ENABLE , 1 ) time . sleep ( 0.1 ) return gyro_config_vals [ gyro_indx ], accel_config_vals [ accel_indx ] def read_raw_bits ( register ): # read accel and gyro values high = bus . read_byte_data ( MPU6050_ADDR , register ) low = bus . read_byte_data ( MPU6050_ADDR , register + 1 ) # combine higha and low for unsigned bit value value = (( high << 8 ) | low ) # convert to +- value if ( value > 32768 ): value -= 65536 return value def mpu6050_conv (): # raw acceleration bits acc_x = read_raw_bits ( ACCEL_XOUT_H ) acc_y = read_raw_bits ( ACCEL_YOUT_H ) acc_z = read_raw_bits ( ACCEL_ZOUT_H ) # raw temp bits ## t_val = read_raw_bits(TEMP_OUT_H) # uncomment to read temp # raw gyroscope bits gyro_x = read_raw_bits ( GYRO_XOUT_H ) gyro_y = read_raw_bits ( GYRO_YOUT_H ) gyro_z = read_raw_bits ( GYRO_ZOUT_H ) #convert to acceleration in g and gyro dps a_x = ( acc_x / ( 2.0 ** 15.0 )) * accel_sens a_y = ( acc_y / ( 2.0 ** 15.0 )) * accel_sens a_z = ( acc_z / ( 2.0 ** 15.0 )) * accel_sens w_x = ( gyro_x / ( 2.0 ** 15.0 )) * gyro_sens w_y = ( gyro_y / ( 2.0 ** 15.0 )) * gyro_sens w_z = ( gyro_z / ( 2.0 ** 15.0 )) * gyro_sens ## temp = ((t_val)/333.87)+21.0 # uncomment and add below in return return a_x , a_y , a_z , w_x , w_y , w_z # MPU6050 Registers MPU6050_ADDR = 0x68 PWR_MGMT_1 = 0x6B SMPLRT_DIV = 0x19 CONFIG = 0x1A GYRO_CONFIG = 0x1B ACCEL_CONFIG = 0x1C INT_ENABLE = 0x38 ACCEL_XOUT_H = 0x3B ACCEL_YOUT_H = 0x3D ACCEL_ZOUT_H = 0x3F TEMP_OUT_H = 0x41 GYRO_XOUT_H = 0x43 GYRO_YOUT_H = 0x45 GYRO_ZOUT_H = 0x47 # start I2C driver bus = smbus . SMBus ( 0 ) # start comm with i2c bus gyro_sens , accel_sens = MPU6050_start () # instantiate gyro/accel while True : print ( mpu6050_conv ()) 这里我们看一下怎么使用I2C和陀螺仪通信来获取信息。主体上有三个大的函数，而这三个函数的功能都比较单一，第一个函数通过给陀螺仪发送数据来进行初始化的设置，比如配置陀螺仪的电源寄存器，加速度寄存器等；第二个函数则是从陀螺仪读取数据；第三个函数则是将读取到的函数进行计算，从而变成真正的加速度等信息。 具体的读写操作可以看下面的代码片段，也是直接调用函数指定地址和数据就好了。 这里我们也能看到几个关键的参数，比如陀螺仪MPU6050的地址是0x68，通过这个地址才能确认到陀螺仪的存在，然后进行初始化，初始化完成之后进入循环，不停的将数据打印出来。","text_tokens":["stability","yout","py","time","alter","有","几个","才能","4.0","dps",">","第二","config","这里","convert","三个","vals","<","env","with","!","通过","调用","settings","和","使用","int","enable","addr","bits","out","0x38","values","z","功能","确认","来","计算","设置","sel","registers","获取","片段","8.0","y","我们","二个","_","500.0","print","add","好","interrupt","下面","samp","=","+-","初始","可以","gyro","大","^","32768","都","能","0x6b","初始化","sleep","存在","[","从而","0","smbus","pwr","return","陀螺仪","配置","crystal","寄存","data","h","high","acceleration","fifo","below","关键","1000.0","mpu6500","这个","a","+","然后","代码","0b010000","真正","comm","0b10000","all","比较","0x1c","mgmt","management","combine","accel","8","这","#","true","主体","速度","函数","等","完成","。","/","while","##","to","出来","bin","通信","0.1","则","怎么","register","读取","，","w","21.0","第三个","调用函数","start","sec","overflow","0x3f","第一个","取信","发送数据","就","(","*",":","raw","2","if","地址","9.81","是",",","寄存器","g","zout","reset","第二个","div","加速度","看到","参数","def","发送","250.0","smplrt","m","一个","也","0x43","s","import","直接","之后","0b00000","instantiate","write","0x45","0x01","打印","读写操作","单一","2.0","给","的","0x3b","conv","读取数据","0x1b","0x68"," ","khz",".","bus","0b11000","configuration","sens","加速","第三","陀螺","到","333.87","读写","了","sensors","1","and","比如","]","15.0","mpu6050","是从","操作","第一","x","read","0x19","indx","python3","进入","0b01000","将","0x00","16.0","上","val","0x3d","in","uncomment","|","而","：","数据","2000.0","看","of","不停","acc","sample","t","获取信息","byte","具体","value","unsigned","degrees","low","0x47","-","driver","电源","temp","指定","0x1a","bit","related","higha","信息","一下","rate","usr","for","进行","i2c","power","xout","gyroscope","；","循环","0x41","65536","变成",")"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/","text":"USB外设驱动 在电脑上，我们最常用的接口之一，应该就是USB了，相比之前讲到的外设通信方法，USB更加复杂，速度也更快。 USB通信原理 USB不仅是我们生活中最常用的一种接口，也是一种串行总线的通讯方式。他类似于UART，有两根线用来传输数据。 而且USB还有专门的接口规范，比如我们常听说的USB Type A、Type C。例如这里列出来的USB口，打印机常用的B口，手机上用的C口，都是标准的USB接口。 USB的接口规范，使用广泛，很多成熟的外设都是采用的USB接口。 摄像头驱动 比如USB摄像头。 硬件接线 这里我们使用一个USB摄像头，通过一个相机驱动把它跑起来，并且可以看到图像数据。 方法有很多中，TogetherROS兼容ROS2的所有功能，那我们就先试试ROS2中的标准方法，在旭日X3PI上直接安装一个usb_cam功能包。 ROS2相机驱动 安装与配置 首先安装ROS2的相机驱动包： # 安装功能包 $ sudo apt install ros-foxy-usb-cam 安装好之后，为了让系统能够找到该功能包，需要进入tros的目录，建立对应的软连接。 # 建立软连接 $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 因为旭日X3Pi可以连接csi摄像头，设备名占用了video0-7，所以外接的USB摄像头会被自动分配到video8，我们需要在ROS2的功能包中修改一下设备号。 # 修改配置文件 $ cd /opt/tros/share/usb_cam/config $ sudo vim params.yaml 然后给这个设备添加权限，最后再设置TogetherROS的环境变量就可以使用啦。 # 添加可执行权限 $ sudo chmod 777 /dev/video8 # 添加环境变量 $ source /opt/tros/local_setup.bash 运行相机驱动 我们来试一试。 $ ros2 launch usb_cam demo_launch.py #启动相机，X3Pi $ ros2 run rqt_image_view rqt_image_view #查看图像，PC 这里直接在X3Pi中启动usb_cam的launch文件，然后再启动一个能和他通信的Ubuntu桌面系统，打开rqt_image_view，选择对应的话题，就可以看到图像了。也就是说明我们成功的用TROS驱动了这个USB摄像头。 TogetherROS相机驱动 除此之外，TogetherROS中也提供了USB摄像头的驱动节点，连接摄像头之后，直接设置设备的权限和TogetherROS的环境变量就可以使用了。 $ source /opt/tros/local_setup.bash $ sudo chmod 777 /dev/video8 $ ros2 launch hobot_usb_cam hobot_usb_cam.launch.py 之后可以再打开一个新的终端，输入对应的指令，然后启动websocket这个节点，就可以把image这个话题的数据发送到网页了。 $ source /opt/tros/local_setup.bash $ cd /opt/tros/lib/websocket/webservice $ sudo chmod +x ./sbin/nginx $ sudo ./sbin/nginx -p . $ ros2 run websocket websocket --ros-args -p image_topic: = /image -p image_type: = mjpeg -p only_show_image: = true 这时我们直接打开在通一个局域网下的浏览器，输入X3Pi的地址，就可以进去到一个网页，点击左上方web端展示即可看到USB摄像头的实时画面。 激光雷达驱动 移动机器人中常用的激光雷达大多也是USB借口的，比如这款rplidar。 安装与配置 如果我们想把它跑起来，同样需要一个驱动包，大家可以在工作空间中下载雷达的驱动包，然后进行编译。编译完成后，添加环境变量就可以使用这个功能包了。 # 下载源码 $ mkdir -p catkin_ws/src $ cd ~/catkin_ws/src $ git clone -b ros2 https://github.com/slamtec/rplidar_ros.git # 编译 $ cd ~/catkin_ws $ colcon build --symlink-install # 添加环境变量 $ source ~/catkin_ws/install/setup.bash # 添加权限 $ sudo chmod 777 /dev/ttyUSB0 还要记得给激光雷达的USB口设置对应的权限。 运行激光雷达驱动 驱动安装好之后，就可以启动雷达了。 在旭日X3派的终端中，运行启动激光雷达的launch文件。 $ ros2 launch rplidar_ros2 rplidar_launch.py #启动雷达，X3PI $ ros2 run rviz2 rviz2 #查看点云，PC 启动成功后，我们在电脑端的Ubuntu系统中，在ros2环境下打开rviz2，然后将世界坐标系改为laser，然后添加LaserScan的可视化选项，并且把Reliability Policy的选项改为System Default，此时就可以看到激光雷达的点云数据了。","text_tokens":["bash","能够","这款","该","所以","config","节点","web","最","websocket","type","功能","两根","设置","hobot","sbin","网页","install","因为","都","symlink","配置","指令","标准","link","之外","实时","ws","机器人","、","派","驱动","速度","旭日","csi","外设","/","进去","出来","share","，","就","让","软","地址","policy","常","自动","也","讲到","被","配置文件","外接","后","打印","的","号","slamtec","啦","了","展示","build","比如","动机","原理","大家","接口","将","对应","端的","类似","就是","包","应该","webservice","中","环境","选项","连接","首先","摄像","进行","移动机器人","即可","更加","py","启动","laserscan","相机","浏览","打开","通过","串行","和","大多","串行总线","它","兼容","$","发送到","提供","tros","印机","口","--","pc","传输","=","可以","为了","rqt","接线","跑","找到","+","然后","这个","先","cd","soft","x3pi","x3","完成","试一试","。","广泛","上方","机器","并且","usb","通信","togetherros","建立","那","复杂","用","params","下","之前","一个","线","常用","一种","摄像头","之后","会","他","源码","专门","args","video8","世界","名","7","再","src","x","run","传输数据","局域","python3","雷达","c","chmod","包了","system","包中","vim","：","同样","此时","想","电脑","通","与","可","局域网","rviz2","yaml","把","再启动","有","硬件","ubuntu","目录","sudo","这里","记得","端","demo","使用","工作","cam","_","占用","选择","终端","图像","查看","借口","true","还有","激光雷达","权限","777","还要","左上",":","~","是","方法","采用","上用","移动","手机","不仅","下载","安装","成熟","给","lib","就是说","catkin"," ","例如","之一","新","画面",".","colcon","到","桌面","可视","环境变","所有","也就是说","明","送到","输入","进入","create","文件","列出来","编译","数据","最后","setup","更","foxy","git","试试","运行","view","一下","添加","点击","除此之外","列出","ros","分配","左上方","成功","ros2","https","com","来","我们","方式","好","能","相比","source","mjpeg","opt","设备","video0","总线","起来","变量","image","reliability","a","ttyusb0","快","#","改为","nginx","坐标系","b","default","像头","话题","uart","激光","生活","如果","rplidar","需要","修改","看到","p","用来","发送","打印机","浏览器","直接","laser","系统","topic","clone","local","空间","通讯","执行","除此","可视化","github","apt","这时","于","听说","上","而且","坐标","dev","在","mkdir","-","only","点云","launch","show","很多","环境变量","规范"],"title":"USB外设驱动","title_tokens":["usb","外设","驱动"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#usb","text":"在电脑上，我们最常用的接口之一，应该就是USB了，相比之前讲到的外设通信方法，USB更加复杂，速度也更快。","text_tokens":["复杂","方法","之前","接口","也","上","最","讲到","常用","就是","快","在","应该","电脑","更","速度","外设","。","我们","的","usb","通信","之一","，","了","相比","更加"],"title":"USB外设驱动","title_tokens":["usb","外设","驱动"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#usb_1","text":"USB不仅是我们生活中最常用的一种接口，也是一种串行总线的通讯方式。他类似于UART，有两根线用来传输数据。 而且USB还有专门的接口规范，比如我们常听说的USB Type A、Type C。例如这里列出来的USB口，打印机常用的B口，手机上用的C口，都是标准的USB接口。 USB的接口规范，使用广泛，很多成熟的外设都是采用的USB接口。","text_tokens":["通讯","列出","比如","生活","有","总线","常","是","于","用来","听说","传输数据","这里","标准","a","接口","采用","也","打印机","c","最","上用","线","串行","列出来","使用","手机","数据","、","常用","类似","而且","type","一种","不仅","串行总线","外设","两根","打印","中","。","广泛","我们","他","专门","成熟","方式","还有","印机","的","出来","口","b","usb","传输"," ","例如","，","很多","都","uart","规范"],"title":"USB通信原理","title_tokens":["usb","通信","原理"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_1","text":"比如USB摄像头。","text_tokens":["摄像头","比如","usb","摄像","像头","。"],"title":"摄像头驱动","title_tokens":["像头","摄像头","驱动","摄像"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_2","text":"这里我们使用一个USB摄像头，通过一个相机驱动把它跑起来，并且可以看到图像数据。 方法有很多中，TogetherROS兼容ROS2的所有功能，那我们就先试试ROS2中的标准方法，在旭日X3PI上直接安装一个usb_cam功能包。","text_tokens":["就","那","有","所有","起来","看到","方法","这里","标准","跑","相机","先","一个","ros2","上","图像","通过","使用","数据","功能","x3pi","直接","摄像头","在","包","驱动","cam","它","旭日","兼容","中","安装","。","我们","_","并且","试试","的","usb"," ","摄像","可以","像头","把","，","很多","togetherros"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#ros2","text":"","text_tokens":[],"title":"ROS2相机驱动","title_tokens":["ros2","驱动","相机"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_3","text":"首先安装ROS2的相机驱动包： # 安装功能包 $ sudo apt install ros-foxy-usb-cam 安装好之后，为了让系统能够找到该功能包，需要进入tros的目录，建立对应的软连接。 # 建立软连接 $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 因为旭日X3Pi可以连接csi摄像头，设备名占用了video0-7，所以外接的USB摄像头会被自动分配到video8，我们需要在ROS2的功能包中修改一下设备号。 # 修改配置文件 $ cd /opt/tros/share/usb_cam/config $ sudo vim params.yaml 然后给这个设备添加权限，最后再设置TogetherROS的环境变量就可以使用啦。 # 添加可执行权限 $ sudo chmod 777 /dev/video8 # 添加环境变量 $ source /opt/tros/local_setup.bash","text_tokens":["bash","ros","py","能够","该","所以","分配","目录","sudo","config","相机","ros2","使用","功能","cam","设置","$","我们","tros","_","--","好","install","因为","可以","source","为了","配置","opt","设备","video0","占用","变量","link","这个","找到","然后","cd","soft","x3pi","#","驱动","旭日","csi","。","/","usb","share","像头","，","togetherros","建立","权限","就","777","让","软","需要","自动","params","修改","摄像头","被","配置文件","之后","系统","外接","会","安装","给","video8","的","local","号"," ",".","名","啦","了","到","7","再","执行","环境变","apt","python3","进入","对应","create","文件","chmod","包中","vim","：","dev","在","包","最后","setup","foxy","环境","可","-","连接","首先","一下","摄像","添加","yaml","环境变量"],"title":"安装与配置","title_tokens":["与","安装","配置"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_4","text":"我们来试一试。 $ ros2 launch usb_cam demo_launch.py #启动相机，X3Pi $ ros2 run rqt_image_view rqt_image_view #查看图像，PC 这里直接在X3Pi中启动usb_cam的launch文件，然后再启动一个能和他通信的Ubuntu桌面系统，打开rqt_image_view，选择对应的话题，就可以看到图像了。也就是说明我们成功的用TROS驱动了这个USB摄像头。","text_tokens":["rqt","桌面","就","用","py","也就是说","启动","明","ubuntu","看到","run","image","这里","选择","然后","相机","这个","一个","成功","ros2","对应","打开","图像","查看","文件","demo","和","就是","直接","x3pi","在","摄像头","系统","来","#","驱动","cam","试一试","中","$","。","我们","他","tros","_","的","launch","pc","view","usb","通信","了","就是说"," ","摄像","可以","像头",".","，","再启动","能","话题"],"title":"运行相机驱动","title_tokens":["运行","驱动","相机"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#togetherros","text":"除此之外，TogetherROS中也提供了USB摄像头的驱动节点，连接摄像头之后，直接设置设备的权限和TogetherROS的环境变量就可以使用了。 $ source /opt/tros/local_setup.bash $ sudo chmod 777 /dev/video8 $ ros2 launch hobot_usb_cam hobot_usb_cam.launch.py 之后可以再打开一个新的终端，输入对应的指令，然后启动websocket这个节点，就可以把image这个话题的数据发送到网页了。 $ source /opt/tros/local_setup.bash $ cd /opt/tros/lib/websocket/webservice $ sudo chmod +x ./sbin/nginx $ sudo ./sbin/nginx -p . $ ros2 run websocket websocket --ros-args -p image_topic: = /image -p image_type: = mjpeg -p only_show_image: = true 这时我们直接打开在通一个局域网下的浏览器，输入X3Pi的地址，就可以进去到一个网页，点击左上方web端展示即可看到USB摄像头的实时画面。","text_tokens":["bash","ros","py","启动","sudo","左上方","节点","浏览","web","ros2","打开","端","和","使用","websocket","type","cam","设置","$","发送到","我们","提供","hobot","tros","_","网页","sbin","--","=","可以","source","mjpeg","指令","opt","设备","变量","image","这个","然后","之外","+","终端","cd","实时","x3pi","true","驱动","。","/","nginx","上方","进去","usb","像头","话题","，","togetherros","权限","就","777","左上",":","地址","下","p","看到","发送","也","一个","浏览器","直接","摄像头","之后","topic","args","video8","lib","的","local"," ","画面","新",".","了","到","展示","再","环境变","除此","x","送到","这时","run","输入","局域","对应","chmod","数据","dev","在","setup","通","webservice","中","环境","-","局域网","连接","only","launch","show","摄像","点击","除此之外","把","环境变量","即可"],"title":"TogetherROS相机驱动","title_tokens":["togetherros","驱动","相机"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_5","text":"移动机器人中常用的激光雷达大多也是USB借口的，比如这款rplidar。","text_tokens":["比如","激光","动机","rplidar","这款","是","雷达","也","机器人","移动","常用","大多","借口","中","。","机器","的","usb","激光雷达","移动机器人","，"],"title":"激光雷达驱动","title_tokens":["激光","激光雷达","雷达","驱动"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_6","text":"如果我们想把它跑起来，同样需要一个驱动包，大家可以在工作空间中下载雷达的驱动包，然后进行编译。编译完成后，添加环境变量就可以使用这个功能包了。 # 下载源码 $ mkdir -p catkin_ws/src $ cd ~/catkin_ws/src $ git clone -b ros2 https://github.com/slamtec/rplidar_ros.git # 编译 $ cd ~/catkin_ws $ colcon build --symlink-install # 添加环境变量 $ source ~/catkin_ws/install/setup.bash # 添加权限 $ sudo chmod 777 /dev/ttyUSB0 还要记得给激光雷达的USB口设置对应的权限。","text_tokens":["bash","ros","sudo","记得","https","ros2","com","使用","功能","工作","它","设置","$","我们","_","口","--","install","可以","source","symlink","起来","变量","跑","然后","这个","ttyusb0","cd","ws","#","完成","驱动","。","/","b","usb","激光雷达","，","权限","就","777","还要","激光","如果",":","~","rplidar","需要","p","一个","下载","后","clone","源码","给","的","catkin"," ","slamtec",".","colcon","空间","build","环境变","src","github","大家","雷达","对应","chmod","包了","编译","同样","dev","想","包","在","mkdir","setup","git","中","环境","-","添加","进行","把","环境变量"],"title":"安装与配置","title_tokens":["与","安装","配置"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_7","text":"驱动安装好之后，就可以启动雷达了。 在旭日X3派的终端中，运行启动激光雷达的launch文件。 $ ros2 launch rplidar_ros2 rplidar_launch.py #启动雷达，X3PI $ ros2 run rviz2 rviz2 #查看点云，PC 启动成功后，我们在电脑端的Ubuntu系统中，在ros2环境下打开rviz2，然后将世界坐标系改为laser，然后添加LaserScan的可视化选项，并且把Reliability Policy的选项改为System Default，此时就可以看到激光雷达的点云数据了。","text_tokens":["就","可视","激光","py","可视化","rplidar","启动","laserscan","policy","ubuntu","下","run","看到","reliability","然后","终端","雷达","将","成功","ros2","打开","端的","文件","查看","system","此时","数据","坐标","x3pi","laser","在","x3","之后","派","系统","#","电脑","驱动","旭日","后","安装","中","$","。","环境","我们","改为","选项","_","坐标系","rviz2","世界","并且","的","launch","点云","运行","好","pc","default"," ","添加","可以","激光雷达",".","，","把","了"],"title":"运行激光雷达驱动","title_tokens":["运行","激光","雷达","驱动","激光雷达"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/","text":"机器视觉介绍 机器视觉概念 机器视觉， 就是用计算机来模拟人的视觉功能，但这并不仅仅是人眼的简单延伸，更重要的是像人脑一样，可以从客观事物的图像中提取信息，进行处理并加以理解，最终用于实际检测、控制等场景。 获取图像信息相对简单，但想让机器人理解图像中千变万化的物品，就难上加难了。 为了解决这一系列复杂的问题，机器视觉也是一个涉猎广泛的交叉学科，横跨人工智能、神经生物学、物理学、计算机科学、图像处理、模式识别等诸多领域。时至今日，在各个领域中，都有大量开发者或组织参与其中，也积累了众多技术，不过依然还有很多问题亟待解决，就像我们对自己大脑的研究也只是冰山一角一样，机器视觉的研究也将会是一个长久的工作。 机器视觉相关的关键技术也有不少，比如视觉图像的采集和信号处理，这个过程主要是通过传感器硬件采集外部光信号的过程，光信号最终会转变成数字电路的信号，便于下一步的处理；类似左边图片中看到的效果，获取图像之后，更重要的是要识别图像中的物体、确定物体的位置、或者检测物品的变化，这就要用到模式识别或者机器学习等技术，这个部分也是当今机器视觉研究的重点。 和人类的两只眼睛不同，机器用于获取图像的传感器种类较为丰富，可以是一个摄像头，也可以是两个摄像头，还可以是三个、四个、很多个摄像头，不仅可以获取颜色信息，还可以通过红外相机获取深度或者能量信息，这可比人眼获取的信息丰富多了，当然，这也会对后期的处理带来不同的计算压力。 在工业领域，机器视觉系统已经被广泛用于自动检验、工件加工、装配自动化以及生产过程控制等工作。随着机器人的快速发展和应用，机器视觉也逐渐应用于农业机器人、AMR物流机器人、服务机器人、无人驾驶汽车等各种机器人，活跃在农场、物流、仓储、交通、医院等多种环境中。 机器视觉流程 人类视觉擅长于对复杂、非结构化的场景进行定性解释，但机器视觉凭借速度、精度和可重复性等优势，非常适合对结构化场景进行定量测量。 一般来讲，典型的机器视觉系统可以分为如图所示的三个部分：图像采集、图像分析和控制输出。 图像采集注重对原始光学信号的采样，是整个视觉系统的传感部分，核心是相机和相关的配件。 其中光源用于照明待检测的物体，并突显其特征，便于让相机能够更好的捕捉图像。光源是影响机器视觉系统成像质量的重要因素，好的光源和照明效果对机器视觉判断影响很大。当前，机器视觉的光源已经突破人眼的可见光范围，其光谱范围跨越红外光（IR）、可见光、紫外光（UV）乃至X射线波段，可实现更精细和更广泛的检测范围，以及特殊成像需求。 相机被喻为机器视觉系统的“眼睛”，承担着图像信息采集的重要任务。图像传感器又是相机的核心元器件，主要有CCD和CMOS两种类型，其工作原理是将相机镜头接收到的光学信号转化成数字信号。选择合适的相机是机器视觉系统设计的重要环节，不仅直接决定了采集图像的质量和速度，同时也与整个系统的运行模式相关。 图像处理系统接收到相机传来的数字图像之后，通过各种软件算法进行图像特征提取、特征分析和数据标定，最后进行判断。这是各种视觉算法研究最为集中的部分，从传统的模式识别算法，到当前热门的各种机器学习方法，都是为了更好的让机器理解环境。 对于人来讲，识别某一个物体是苹果似乎理所当然，但是对于机器人来讲，就需要提取各种各样不同种类、颜色、形状的苹果特征，然后训练得到一个苹果的“模型”，再通过这个模型对实时图像做匹配，从而分析面前这个东西到底是不是苹果。 在机器人系统中，视觉识别的结果最终要和机器人的某些行为绑定，也就是第三个部分——控制输出，包含I/O接口、运动控制、可视化显示等。当图像处理系统完成图像分析后，将判断的结果发给机器人控制系统，接下来机器人完成运动控制。比如视觉识别到了抓取目标的位置，通过IO口控制夹爪完成抓取和放置，过程中识别的结果和运动的状态，都可以在上位机中显示，方便我们监控。 就机器视觉而言，在这三个部分中，图像分析占据了绝对的核心，涉及的方法、使用的各种开源软件或者框架非常多，这也是我们后续开发的重点，TogetherROS中提供了大量的算法、工具和功能支持。 旭日X3派配置 了解了机器视觉的基本原理和流程，相信大家对视觉应用已经充满了期待，我们这就准备开始。 后续课程中，我们将继续在旭日X3派的开发板上，使用TogetherROS实现各种各样的视觉例程，不过我们得先找到一个相机，比如usb相机或者MIPI接口配套的相机模块，然后连接到开发板对应的接口上。 电脑和开发板之前通过网线连接，便于我们查看视觉处理的结果，速度更快。 如果有HDMI屏幕的话，也可以准备好，稍后需要使用的时候插上查看结果，如果没有的话，也没有影响，后续我们会使用一套网络传输工具，通过板卡的IP地址，就可以看到图像处理的实时状态啦。 USB相机图像采集 关于相机的驱动，请大家也再确认一下，这是后续视觉处理的基础。 如果是USB相机的话，可以参考这个过程验证下是否可以顺利看到图像。 # 旭日X3派 $ sudo apt install ros-foxy-usb-cam $ cd /opt/tros $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros $ source /opt/tros/local_setup.bash $ ros2 launch usb_cam demo_launch.py # 修改params.yaml配置文件中的设备号 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view MIPI相机图像采集 如果使用的是MIPI相机的话，可以参考这个流程驱动相机并显示图像。 # 旭日X3派 $ source /opt/tros/local_setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p video_device: = F37 -p image_width: = 960 -p image_height: = 540 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view 为了提高图像的编码和传输效率，我们建议大家使用MIPI接口的相机，后续应用功能我们也会以该相机为主。","text_tokens":["承担","bash","能够","研究","uv","物理学","可重复性","该","长久","已经","时至今日","横跨","功能","一般来讲","简单","紫外光","范围","仓储","照明","的话","加工","紫外","例程","最终","自己","问题","install","开源","继续","都","以","影响","配置","判断","活跃","理所当然","乃至","放置","光学","link","实时","人脑","机器人","物品","配套","要","、","快速","结果","派","等","速度","旭日","驱动","o","生产","/","开发者","面前","ccd","各个领域","信号处理","，","处理","定量","这是","就","难上加难","神经","让","理学","物体","地址","插上","自动","一样","没有","重点","图像处理","理解","采样","也","是否","效率","决定","对于","基础","被","配置文件","较为","视觉","感器","模型","需求","加以","传统","似乎","后","ip地址","科学","测量","关键技术","电路","重要环节","的","width","或者","长于","号","啦","工件","了","擅长于","比如","传感","原理","物理","相关","大家","接收","质量","形状","转变成","接口","两种","将","同时","对应","开发","变化","各种","生物","类似","就是","控制","还","医院","中","环境","复性","开发板","连接","结构化","（","仅仅","摄像","解释","进行","只是","；","变成","x射线","py","整个","注重","原始","提高","占据","爪","准备","传感器","三个","相机","苹果","又","通过","和","不同","屏幕","一角","波段","机中","大脑","计算","课程","$","驾驶","提供","tros","mipi","口","--","pc","特征分析","验证","传输","=","可以","发展","从而","为了","rqt","左边","包含","红外","关键","类型","监控","实际","客观","这个","然后","找到","先","cd","soft","请","智能","热门","各种各样","）","某","红外光","x3","事物","关于","这","完成","逐渐","。","广泛","实现","学习","机器","编码","射线","数字信号","适合","介绍","usb","镜头","togetherros","两个","配件","生物学","用","复杂","冰山","当然","时候","元器","params","突破","下","就要","压力","当前","之前","农场","一个","模式","确定","核心","物流","对","典型","光","摄像头","一系","之后","模拟","采集","会","自动化","概念","涉猎","args","学科","匹配","amr","但","控制系统","再","部分","run","python3","i","得到","因素","特殊","重复性","：","精细","定性","想","device","各个","电脑","丰富","特征提取","与","可","而言","两只","yaml","显示","下来","计算机科学","分为","有","颜色","最为","硬件","cmos","sudo","模块","多","”","demo","使用","其中","基本","确认","可见","着","工作","cam","获取","各样","数字电路","_","数字","化成","接下","东西","无人","绝对","稍后","f37","框架","io","其","建议","主要","选择","效果","图像","查看","期待","540","方便","汽车","器件","发给","ir","技术","某些","还有","开始","能量","数字图像","第三个","待",":","至今","不少","重复","是","顺利","交叉学科","方法","“","—","便于","当","不仅仅","是不是","相对","转变","像","种类","服务","不仅","合适","人工智能","数字电","很大","客观事物","标定","一套"," ","基本原理","抓取",".","一步","所示","捕捉","到","状态","用于","延伸","可视","行为","得","计算机","工具","交叉","绑定","擅长","随着","create","众多","任务","文件","分析","冰山一角","检验","数据","最后","setup","更","识别","foxy","网络","做","人眼","充满","运行","信息","view","精度","一下","hdmi","height","涉及","支持","接下来","ros","来讲","四个","今日","算法","带来","模式识别","ros2","跨越","位置","来","一般","图片","集中","组织","我们","人类","一系列","流程","好","解决","外部","source","优势","眼睛","非常","板卡","深度","opt","设备","农业","非","亟待解决","image","训练","光谱","个","领域","或","了解","但是","参考","为主","装配","突显","快","相信","#","结构","不过","video","运动","像头","可见光","光源","工业","软件","传来","交通","夹","如图所示","如果","人","千变万化","过程","特征","需要","环节","从","后续","修改","看到","p","参与","后期","系列","亟待","目标","依然","重要","无人驾驶","多种","转化","直接","系统","应用","检测","算机","当今","提取","人工","不是","local","设计","第三","并","本原","信号","成像","上位","可视化","凭借","apt","于","非常适合","960","用到","更好","到底","上","转化成","以及","网线","元器件","诸多","积累","场景","在","可比","喻为","输出","-","大量","launch","很多"],"title":"机器视觉介绍","title_tokens":["机器","视觉","介绍"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_1","text":"","text_tokens":[],"title":"机器视觉介绍","title_tokens":["机器","视觉","介绍"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_2","text":"机器视觉， 就是用计算机来模拟人的视觉功能，但这并不仅仅是人眼的简单延伸，更重要的是像人脑一样，可以从客观事物的图像中提取信息，进行处理并加以理解，最终用于实际检测、控制等场景。 获取图像信息相对简单，但想让机器人理解图像中千变万化的物品，就难上加难了。 为了解决这一系列复杂的问题，机器视觉也是一个涉猎广泛的交叉学科，横跨人工智能、神经生物学、物理学、计算机科学、图像处理、模式识别等诸多领域。时至今日，在各个领域中，都有大量开发者或组织参与其中，也积累了众多技术，不过依然还有很多问题亟待解决，就像我们对自己大脑的研究也只是冰山一角一样，机器视觉的研究也将会是一个长久的工作。 机器视觉相关的关键技术也有不少，比如视觉图像的采集和信号处理，这个过程主要是通过传感器硬件采集外部光信号的过程，光信号最终会转变成数字电路的信号，便于下一步的处理；类似左边图片中看到的效果，获取图像之后，更重要的是要识别图像中的物体、确定物体的位置、或者检测物品的变化，这就要用到模式识别或者机器学习等技术，这个部分也是当今机器视觉研究的重点。 和人类的两只眼睛不同，机器用于获取图像的传感器种类较为丰富，可以是一个摄像头，也可以是两个摄像头，还可以是三个、四个、很多个摄像头，不仅可以获取颜色信息，还可以通过红外相机获取深度或者能量信息，这可比人眼获取的信息丰富多了，当然，这也会对后期的处理带来不同的计算压力。 在工业领域，机器视觉系统已经被广泛用于自动检验、工件加工、装配自动化以及生产过程控制等工作。随着机器人的快速发展和应用，机器视觉也逐渐应用于农业机器人、AMR物流机器人、服务机器人、无人驾驶汽车等各种机器人，活跃在农场、物流、仓储、交通、医院等多种环境中。","text_tokens":["计算机科学","有","颜色","研究","硬件","物理学","四个","今日","传感器","三个","相机","带来","模式识别","多","通过","长久","已经","和","时至今日","不同","横跨","功能","其中","一角","位置","简单","来","工作","大脑","计算","图片","组织","获取","我们","驾驶","人类","仓储","数字电路","加工","一系列","数字","最终","无人","自己","问题","可以","都","解决","发展","外部","为了","左边","眼睛","深度","活跃","红外","农业","关键","亟待解决","实际","客观","主要","这个","效果","个","领域","或","人脑","图像","机器人","物品","要","智能","、","装配","快速","事物","这","等","逐渐","汽车","技术","生产","。","广泛","学习","机器","不过","还有","开发者","能量","各个领域","信号处理","像头","，","工业","交通","处理","两个","生物学","就","用","复杂","难上加难","冰山","神经","让","理学","人","千变万化","至今","不少","过程","物体","自动","是","从","一样","重点","交叉学科","图像处理","参与","下","便于","理解","不仅仅","系列","看到","就要","后期","压力","农场","也","一个","亟待","模式","确定","相对","依然","重要","对","应用","物流","无人驾驶","光","多种","转变","摄像头","像","一系","种类","之后","视觉","不仅","模拟","采集","感器","检测","较为","系统","算机","加以","会","当今","人工智能","自动化","提取","科学","数字电","涉猎","被","客观事物","人工","关键技术","电路","的","学科","或者"," ","amr","但","一步","工件","了","并","用于","延伸","信号","比如","计算机","传感","交叉","物理","相关","部分","于","用到","转变成","随着","将","众多","以及","开发","变化","冰山一角","检验","各种","生物","诸多","就是","积累","场景","类似","控制","想","在","还","各个","更","识别","医院","服务","可比","当然","丰富","中","环境","人眼","两只","大量","仅仅","信息","摄像","进行","只是","；","很多","变成"],"title":"机器视觉概念","title_tokens":["机器","视觉","概念"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_3","text":"人类视觉擅长于对复杂、非结构化的场景进行定性解释，但机器视觉凭借速度、精度和可重复性等优势，非常适合对结构化场景进行定量测量。 一般来讲，典型的机器视觉系统可以分为如图所示的三个部分：图像采集、图像分析和控制输出。 图像采集注重对原始光学信号的采样，是整个视觉系统的传感部分，核心是相机和相关的配件。 其中光源用于照明待检测的物体，并突显其特征，便于让相机能够更好的捕捉图像。光源是影响机器视觉系统成像质量的重要因素，好的光源和照明效果对机器视觉判断影响很大。当前，机器视觉的光源已经突破人眼的可见光范围，其光谱范围跨越红外光（IR）、可见光、紫外光（UV）乃至X射线波段，可实现更精细和更广泛的检测范围，以及特殊成像需求。 相机被喻为机器视觉系统的“眼睛”，承担着图像信息采集的重要任务。图像传感器又是相机的核心元器件，主要有CCD和CMOS两种类型，其工作原理是将相机镜头接收到的光学信号转化成数字信号。选择合适的相机是机器视觉系统设计的重要环节，不仅直接决定了采集图像的质量和速度，同时也与整个系统的运行模式相关。 图像处理系统接收到相机传来的数字图像之后，通过各种软件算法进行图像特征提取、特征分析和数据标定，最后进行判断。这是各种视觉算法研究最为集中的部分，从传统的模式识别算法，到当前热门的各种机器学习方法，都是为了更好的让机器理解环境。 对于人来讲，识别某一个物体是苹果似乎理所当然，但是对于机器人来讲，就需要提取各种各样不同种类、颜色、形状的苹果特征，然后训练得到一个苹果的“模型”，再通过这个模型对实时图像做匹配，从而分析面前这个东西到底是不是苹果。 在机器人系统中，视觉识别的结果最终要和机器人的某些行为绑定，也就是第三个部分——控制输出，包含I/O接口、运动控制、可视化显示等。当图像处理系统完成图像分析后，将判断的结果发给机器人控制系统，接下来机器人完成运动控制。比如视觉识别到了抓取目标的位置，通过IO口控制夹爪完成抓取和放置，过程中识别的结果和运动的状态，都可以在上位机中显示，方便我们监控。 就机器视觉而言，在这三个部分中，图像分析占据了绝对的核心，涉及的方法、使用的各种开源软件或者框架非常多，这也是我们后续开发的重点，TogetherROS中提供了大量的算法、工具和功能支持。","text_tokens":["承担","x射线","分为","整个","注重","能够","有","研究","颜色","来讲","原始","最为","uv","cmos","占据","可重复性","爪","算法","传感器","三个","相机","苹果","又","模式识别","多","”","通过","已经","和","不同","使用","跨越","一般来讲","其中","功能","波段","位置","可见","机中","着","紫外光","工作","一般","集中","范围","我们","提供","人类","照明","各样","紫外","化成","数字","接下","口","东西","好","特征分析","最终","绝对","开源","可以","都","影响","优势","从而","为了","框架","眼睛","非常","判断","包含","io","其","理所当然","红外","乃至","非","下来","放置","类型","光学","监控","主要","训练","选择","效果","光谱","然后","这个","实时","图像","机器人","但是","要","热门","、","各种各样","）","突显","某","红外光","结果","这","方便","完成","等","速度","器件","发给","o","ir","。","实现","广泛","/","结构","学习","机器","某些","面前","射线","数字信号","适合","ccd","运动","数字图像","镜头","可见光","，","光源","软件","传来","第三个","togetherros","定量","配件","处理","这是","待","就","夹","复杂","如图所示","当然","让","物体","重复","特征","人","过程","需要","元器","环节","是","从","后续","突破","重点","图像处理","方法","“","—","便于","当前","采样","理解","当","是不是","也","一个","核心","模式","决定","对于","目标","转化","重要","对","典型","直接","被","种类","之后","视觉","系统","感器","采集","需求","检测","不仅","合适","模型","似乎","传统","后","提取","很大","测量","支持","重要环节","的","不是","或者","长于","匹配","标定","设计"," ","抓取","但","第三","控制系统","并","所示","擅长于","捕捉","到","用于","了","状态","信号","成像","再","上位","可视","比如","行为","可视化","工具","传感","原理","凭借","相关","部分","接收","质量","形状","绑定","非常适合","擅长","更好","到底","接口","两种","i","得到","因素","将","同时","转化成","特殊","以及","分析","任务","各种","开发","元器件","数据","重复性","：","精细","定性","场景","就是","控制","在","最后","更","识别","喻为","输出","特征提取","环境","与","复性","可","中","而言","做","人眼","结构化","（","大量","运行","信息","精度","解释","进行","涉及","显示","接下来"],"title":"机器视觉流程","title_tokens":["机器","视觉","流程"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#x3","text":"了解了机器视觉的基本原理和流程，相信大家对视觉应用已经充满了期待，我们这就准备开始。 后续课程中，我们将继续在旭日X3派的开发板上，使用TogetherROS实现各种各样的视觉例程，不过我们得先找到一个相机，比如usb相机或者MIPI接口配套的相机模块，然后连接到开发板对应的接口上。 电脑和开发板之前通过网线连接，便于我们查看视觉处理的结果，速度更快。 如果有HDMI屏幕的话，也可以准备好，稍后需要使用的时候插上查看结果，如果没有的话，也没有影响，后续我们会使用一套网络传输工具，通过板卡的IP地址，就可以看到图像处理的实时状态啦。","text_tokens":["有","准备","相机","模块","通过","已经","和","使用","屏幕","基本","课程","我们","的话","各样","mipi","流程","例程","好","传输","可以","稍后","继续","影响","板卡","找到","然后","先","实时","了解","图像","查看","期待","配套","各种各样","快","相信","x3","结果","派","这","速度","旭日","。","实现","机器","不过","开始","usb","，","togetherros","处理","就","如果","时候","地址","插上","需要","后续","没有","看到","图像处理","便于","之前","也","一个","对","视觉","应用","会","ip地址","的","或者","一套"," ","基本原理","啦","了","状态","到","本原","比如","得","工具","原理","大家","接口","将","上","对应","开发","各种","网线","在","更","电脑","网络","中","开发板","连接","充满","hdmi"],"title":"旭日X3派配置","title_tokens":["配置","派","x3","旭日"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#usb","text":"关于相机的驱动，请大家也再确认一下，这是后续视觉处理的基础。 如果是USB相机的话，可以参考这个过程验证下是否可以顺利看到图像。 # 旭日X3派 $ sudo apt install ros-foxy-usb-cam $ cd /opt/tros $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros $ source /opt/tros/local_setup.bash $ ros2 launch usb_cam demo_launch.py # 修改params.yaml配置文件中的设备号 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view","text_tokens":["bash","ros","py","sudo","相机","ros2","demo","确认","cam","$","的话","tros","_","pc","--","验证","install","可以","source","rqt","配置","opt","设备","image","link","这个","cd","soft","图像","参考","请","x3","关于","派","#","驱动","旭日","。","/","usb","，","处理","这是","如果","过程","params","是","后续","顺利","修改","下","看到","也","是否","基础","配置文件","视觉","的","local","号"," ",".","再","大家","apt","run","python3","create","文件","setup","foxy","中","-","launch","view","一下","yaml"],"title":"USB相机图像采集","title_tokens":["usb","图像","采集","相机"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#mipi","text":"如果使用的是MIPI相机的话，可以参考这个流程驱动相机并显示图像。 # 旭日X3派 $ source /opt/tros/local_setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p video_device: = F37 -p image_width: = 960 -p image_height: = 540 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view 为了提高图像的编码和传输效率，我们建议大家使用MIPI接口的相机，后续应用功能我们也会以该相机为主。","text_tokens":["为了","rqt","bash","ros","opt","如果",":","提高","是","f37","大家","后续","该","建议","run","p","image","960","这个","相机","接口","也","ros2","效率","图像","参考","和","使用","为主","功能","device","x3","540","派","setup","#","驱动","cam","旭日","foxy","应用","会","$","。","/","-","我们","的话","tros","mipi","_","args","编码","以","的","流程","local","--","video","width","pc","view","传输"," ","=","可以","height",".","，","并","source","显示"],"title":"MIPI相机图像采集","title_tokens":["mipi","图像","采集","相机"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/","text":"CV图像加速处理 OpenCV是一个著名的机器视觉处理库，相信大家都有听过，这个库中有很多图像处理的基础算法，比如灰度变化、图像滤波等，不过这个库为了保证较好的通用性，主要通过软件实现各种算法，TogetherROS对此作了大量优化，我们一起来看看。 TogetherROS视觉加速 TogetherROS系统中集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 效果这么好，具体该如何使用呢？ 高斯滤波 我们先来看下图像处理中常用的高斯滤波算法，OpenCV和hobotcv，正面PK一下，我们也看看在程序中如何使用hobotcv的图像处理加速算法。 运行示例程序 $ cd /opt/tros/hobotcv_gaussian/sample $ ./build.sh $ cd output $ ./run.sh 代码解析 hobotcv_sample.cpp： // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include <algorithm> #include <chrono> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <utility> #include \"hobotcv_gaussian_blur.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" void analyse_result ( cv :: Mat & out_filter , cv :: Mat & cls_filter , std :: string flag_name ) { auto start_time = std :: chrono :: steady_clock :: now (); std :: cout << \"\" << std :: endl ; std :: cout << \"analyse_result start \" << std :: endl ; std :: cout << \"---------\" << flag_name << std :: endl ; std :: cout << \"out_filter type:\" << out_filter . type () << \",cols:\" << out_filter . cols << \",rows:\" << out_filter . rows << \",channel:\" << out_filter . channels () << std :: endl ; std :: cout << \"cls_filter type:\" << cls_filter . type () << \",cols:\" << cls_filter . cols << \",rows:\" << cls_filter . rows << \",channel:\" << cls_filter . channels () << std :: endl ; double minvalue , maxvalue ; cv :: Point mixIdx , maxIdx ; cv :: minMaxLoc ( out_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"out_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"out_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"out_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: minMaxLoc ( cls_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"cls_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"cls_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"cls_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: Mat mat_diff = cv :: abs ( out_filter - cls_filter ); cv :: Scalar sum_error = cv :: sum ( mat_diff >= 1 ); cv :: Scalar mean_error = cv :: sum ( mat_diff ) / ( mat_diff . rows * mat_diff . cols ); cv :: minMaxLoc ( mat_diff , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"\" << std :: endl ; std :: cout << \"diff diff diff\" << std :: endl ; std :: cout << \"mat_diff minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"mat_diff min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"mat_diff max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; std :: cout << \"\" << std :: endl ; std :: cout << \"error sum:\" << sum_error [ 0 ] << \",max:\" << maxvalue << \",mean_error:\" << mean_error [ 0 ] << std :: endl ; int time_used_ms_end = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: steady_clock :: now () - start_time ) . count (); std :: cout << \"analyse_result,time_used_ms_end:\" << time_used_ms_end << std :: endl ; std :: cout << \"analyse_result end \" << std :: endl ; std :: cout << \"\" << std :: endl ; } int main () { int32_t ret = -1 ; HobotGaussianBlurParam blur_param ; HOBOTCV_INITIALIZE_GAUSSIAN_BLUR_PARAM ( & blur_param ); HobotCVGaussianBlurHandle handle ; ret = HobotCVGaussianBlurCreate ( blur_param , & handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurCreate failed, error msg:%d \\n \" , ret ); return -1 ; } for ( int i = 0 ; i < 5 ; i ++ ) { std :: string m_tof_file_s = \"images/frame1_\" + std :: to_string ( i ) + \".png\" ; std :: cout << \"===================\" << std :: endl ; std :: cout << \"image name :\" << m_tof_file_s << std :: endl ; cv :: Mat src = cv :: imread ( m_tof_file_s , CV_16UC1 ); cv :: Mat dst ; cv :: medianBlur ( src , src , 3 ); auto start_time_infe = std :: chrono :: steady_clock :: now (); ret = HobotCVGaussianBlurProcess ( handle , & src , & dst ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurProcess failed, error msg:%d \\n \" , ret ); return -1 ; } int infe_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_infe ). count (); std :: cout << \"infe cost time:\" << infe_time << std :: endl ; auto start_time_gauss = std :: chrono :: steady_clock :: now (); cv :: Mat gaussian_tof ; cv :: GaussianBlur ( src , gaussian_tof , cv :: Size ( 3 , 3 ), 0 , 0 , cv :: BORDER_REPLICATE ); int guss_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_gauss ). count (); std :: cout << \"guss_time cost time:\" << guss_time << std :: endl ; float save_rate = float (( guss_time * 1.0 - infe_time * 1.0 ) / guss_time ); std :: cout << \"hobotcv save rate:\" << save_rate << std :: endl ; analyse_result ( dst , gaussian_tof , \"GaussianBlur\" ); std :: cout << \"-------------------------\" << std :: endl ; std :: cout << \"\" << std :: endl ; } ret = HobotCVGaussianBlurDestroy ( handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurDestroy failed, error msg:%d \\n \" , ret ); return -1 ; } return 0 ; } 图像裁剪与缩放 再来看另外一个案例，图像的裁剪与缩放，比如这样一幅图片，我们尝试剪裁左上角的一小块图像出来，或者对裁剪的某一块图像放大来看看。 运行示例程序 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/hobot_cv/config/ . $ ros2 run hobot_cv example 代码解析 // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include \"include/hobotcv_imgproc.h\" #include \"include/utils.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/core/types.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/opencv.hpp\" #include <fstream> #include <string> #include <chrono> #include <iostream> void writeImg ( cv :: Mat & mat , std :: string imgfile ) { cv :: Mat img_bgr ; cv :: cvtColor ( mat , img_bgr , cv :: COLOR_YUV2BGR_NV12 ); cv :: imwrite ( imgfile , img_bgr ); } int main () { std :: string image_file = \"config/test.jpg\" ; cv :: Mat bgr_mat = cv :: imread ( image_file , cv :: IMREAD_COLOR ); auto src_height = bgr_mat . rows ; auto src_width = bgr_mat . cols ; cv :: Mat srcmat_nv12 ; BGRToNv12 ( bgr_mat , srcmat_nv12 ); auto dst_height = src_height / 2 ; auto dst_width = src_width / 2 ; cv :: Mat dstmat_nv12 ( dst_height * 3 / 2 , dst_width , CV_8UC1 ); auto before_resize = std :: chrono :: system_clock :: now (); auto ret = hobot_cv :: hobotcv_resize ( srcmat_nv12 , src_height , src_width , dstmat_nv12 , dst_height , dst_width ); auto after_resize = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_resize - before_resize ). count (); if ( 0 == ret ) { std :: cout << \"resize finish, time: \" << interval << \"ms\" << std :: endl ; } writeImg ( dstmat_nv12 , \"./resize.jpg\" ); auto before_crop = std :: chrono :: system_clock :: now (); auto cropmat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , 200 , 200 , cv :: Range ( 0 , 200 ), cv :: Range ( 0 , 200 )); auto after_crop = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_crop - before_crop ). count (); std :: cout << \"crop finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropmat , \"./crop.jpg\" ); auto before_cropResize = std :: chrono :: system_clock :: now (); auto cropResizemat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , src_height , src_width , cv :: Range ( 200 , 400 ), cv :: Range ( 200 , 400 )); auto after_cropResize = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_cropResize - before_cropResize ). count (); std :: cout << \"cropResize finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropResizemat , \"./cropResize.jpg\" ); return 0 ; }","text_tokens":["name","bash","灰度","放大","该",">","crop","config","save","dstmat","<","milliseconds","软硬件","集成","cls","type","finish","opencv","对比","proprietary","hobot","information","都","测试","reproduced","flag","0","core","2021","案例","n","writeimg","？","、","一","等","如何","裁剪","minvalue","/","hpp","出来","，","示例","param","处理","point","range","types","这样","cropmat","图像处理","也","m","size","效率","基础","abs","视觉","一幅","horizon","软硬","16uc1","minmaxloc","的","width","或者","了","utils","cpp","handle","build","库中","比如","channels","大家","接口","开发","变化","各种","rights","这么","imgproc","sample","t","中","by","written","test","imgcodecs","robotics","ms","duration","算子","resize","be","5","进行","r","高斯",")","较","chrono","来看","max","通过","和","color","may","filter","兼容","$","work","y","tros","steady","channel","imwrite","=","可以","提升","img","率","为了","any","return","jpg","png","auto","h","void","dst","帧","guss","这个","+","先","cd","all","imread","程序","某","分别","。","实现","滤波","机器","做到","microseconds","库","without","togetherros","initialize","cost","hobotcvgaussianblurhandle","yuv2bgr","(","呢","*","gaussianblur","rows","2","多倍","下","小块","after","material","一个","mean","now","尝试","甚至","s","对","常用","地平线","min","example","加速","queue","再","src","通用性","string","std","x","mixidx","系统资源","run","一小","畸变","i","c","system","：","一小块","&","编程","与","result","copied","ret","底层","for","协同","400","有","硬件","map","使用","out","++","{","output","cropresizemat","blur","_","%","一块","-------------------------","[","校正","express","cout","iomanip","error","way","主要","transmitted","效果","作","代码","风格","图像","maxvalue","frame1","opencv2","优化","tof","trade","diff","地平","end","剪裁","analyse","clock","hobotcv","part","左上",":","owned","maxidx","inc","是","方法","便于","confidential","the","used","images","hobotgaussianblurparam","过","failed","reserved","对此","\\","d","secrets","lib","芯片","printf"," ",";","例如","fstream",".","到","sum","and","]","降低","disclosed","3","听","消耗","int32","endl","in","setup","更","具体","左上角","double","msg","before","运行","iostream","一下","rate","nv12","cp","height","cropresize","缩放","time","算法","}","旋转","8uc1","ros2","cvtcolor","int","来","引擎","资源","count","图片","replicate","我们","main","utility","this","好","性能","gaussian","---------","source","is","\"","混合","scalar","opt","iterator","medianblur","起来","解析","正面","pk","image","相信","#","no","另外","著名","不过","or","1.0","to","imgfile","purpose","200","软件","file","start","copyright","mat","cast","border","float","gauss","if",",","通用","看看","保证","hobotcvgaussianblurprocess","interval","sh","include","cols","系统","hobotcvgaussianblurcreate","应用","1","infe","上","bgrtonv12","cv","而且","倍","在","of","bgr","contains","hobotcvgaussianblurdestroy","-","algorithm","大量","permission","srcmat","很多","上角"],"title":"CV图像处理加速","title_tokens":["图像","cv","加速","处理","图像处理"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#cv","text":"OpenCV是一个著名的机器视觉处理库，相信大家都有听过，这个库中有很多图像处理的基础算法，比如灰度变化、图像滤波等，不过这个库为了保证较好的通用性，主要通过软件实现各种算法，TogetherROS对此作了大量优化，我们一起来看看。","text_tokens":["为了","库中","比如","通用性","有","灰度","听","起来","是","大家","算法","通用","较","图像处理","主要","这个","作","看看","一个","保证","图像","基础","通过","变化","各种","、","相信","优化","视觉","过","一","等","opencv","对此","。","著名","实现","我们","滤波","机器","不过","的","大量","好","了","库","，","很多","都","软件","togetherros","处理"],"title":"CV图像加速处理","title_tokens":["处理","图像","cv","加速"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#togetherros","text":"TogetherROS系统中集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 效果这么好，具体该如何使用呢？","text_tokens":["缩放","硬件","该","旋转","通过","软硬件","集成","使用","opencv","引擎","资源","兼容","对比","我们","hobot","好","可以","性能","提升","测试","率","混合","校正","帧","效果","风格","图像","？","、","分别","等","如何","。","实现","滤波","地平","做到","库","，","软件","togetherros","处理","呢","2","多倍","方法","便于","效率","甚至","常用","地平线","视觉","系统","应用","软硬","的","芯片"," ","例如","加速","了","到","降低","3","系统资源","消耗","接口","畸变","上","cv","开发","而且","倍","在","这么","更","具体","编程","中","与","运行","算子","底层","进行","协同","高斯"],"title":"TogetherROS视觉加速","title_tokens":["视觉","togetherros","加速"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_1","text":"我们先来看下图像处理中常用的高斯滤波算法，OpenCV和hobotcv，正面PK一下，我们也看看在程序中如何使用hobotcv的图像处理加速算法。","text_tokens":["算法","正面","图像处理","下","pk","来看","看看","先","也","图像","和","使用","程序","常用","在","opencv","如何","中","。","我们","滤波","的","一下","，","加速","高斯","hobotcv","处理"],"title":"高斯滤波","title_tokens":["高斯","滤波"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_2","text":"$ cd /opt/tros/hobotcv_gaussian/sample $ ./build.sh $ cd output $ ./run.sh","text_tokens":["_","run","build","opt","sample","cd"," ","sh","gaussian",".","$","/","output","hobotcv","tros"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_3","text":"hobotcv_sample.cpp： // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include <algorithm> #include <chrono> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <utility> #include \"hobotcv_gaussian_blur.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" void analyse_result ( cv :: Mat & out_filter , cv :: Mat & cls_filter , std :: string flag_name ) { auto start_time = std :: chrono :: steady_clock :: now (); std :: cout << \"\" << std :: endl ; std :: cout << \"analyse_result start \" << std :: endl ; std :: cout << \"---------\" << flag_name << std :: endl ; std :: cout << \"out_filter type:\" << out_filter . type () << \",cols:\" << out_filter . cols << \",rows:\" << out_filter . rows << \",channel:\" << out_filter . channels () << std :: endl ; std :: cout << \"cls_filter type:\" << cls_filter . type () << \",cols:\" << cls_filter . cols << \",rows:\" << cls_filter . rows << \",channel:\" << cls_filter . channels () << std :: endl ; double minvalue , maxvalue ; cv :: Point mixIdx , maxIdx ; cv :: minMaxLoc ( out_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"out_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"out_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"out_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: minMaxLoc ( cls_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"cls_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"cls_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"cls_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: Mat mat_diff = cv :: abs ( out_filter - cls_filter ); cv :: Scalar sum_error = cv :: sum ( mat_diff >= 1 ); cv :: Scalar mean_error = cv :: sum ( mat_diff ) / ( mat_diff . rows * mat_diff . cols ); cv :: minMaxLoc ( mat_diff , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"\" << std :: endl ; std :: cout << \"diff diff diff\" << std :: endl ; std :: cout << \"mat_diff minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"mat_diff min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"mat_diff max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; std :: cout << \"\" << std :: endl ; std :: cout << \"error sum:\" << sum_error [ 0 ] << \",max:\" << maxvalue << \",mean_error:\" << mean_error [ 0 ] << std :: endl ; int time_used_ms_end = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: steady_clock :: now () - start_time ) . count (); std :: cout << \"analyse_result,time_used_ms_end:\" << time_used_ms_end << std :: endl ; std :: cout << \"analyse_result end \" << std :: endl ; std :: cout << \"\" << std :: endl ; } int main () { int32_t ret = -1 ; HobotGaussianBlurParam blur_param ; HOBOTCV_INITIALIZE_GAUSSIAN_BLUR_PARAM ( & blur_param ); HobotCVGaussianBlurHandle handle ; ret = HobotCVGaussianBlurCreate ( blur_param , & handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurCreate failed, error msg:%d \\n \" , ret ); return -1 ; } for ( int i = 0 ; i < 5 ; i ++ ) { std :: string m_tof_file_s = \"images/frame1_\" + std :: to_string ( i ) + \".png\" ; std :: cout << \"===================\" << std :: endl ; std :: cout << \"image name :\" << m_tof_file_s << std :: endl ; cv :: Mat src = cv :: imread ( m_tof_file_s , CV_16UC1 ); cv :: Mat dst ; cv :: medianBlur ( src , src , 3 ); auto start_time_infe = std :: chrono :: steady_clock :: now (); ret = HobotCVGaussianBlurProcess ( handle , & src , & dst ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurProcess failed, error msg:%d \\n \" , ret ); return -1 ; } int infe_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_infe ). count (); std :: cout << \"infe cost time:\" << infe_time << std :: endl ; auto start_time_gauss = std :: chrono :: steady_clock :: now (); cv :: Mat gaussian_tof ; cv :: GaussianBlur ( src , gaussian_tof , cv :: Size ( 3 , 3 ), 0 , 0 , cv :: BORDER_REPLICATE ); int guss_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_gauss ). count (); std :: cout << \"guss_time cost time:\" << guss_time << std :: endl ; float save_rate = float (( guss_time * 1.0 - infe_time * 1.0 ) / guss_time ); std :: cout << \"hobotcv save rate:\" << save_rate << std :: endl ; analyse_result ( dst , gaussian_tof , \"GaussianBlur\" ); std :: cout << \"-------------------------\" << std :: endl ; std :: cout << \"\" << std :: endl ; } ret = HobotCVGaussianBlurDestroy ( handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurDestroy failed, error msg:%d \\n \" , ret ); return -1 ; } return 0 ; }","text_tokens":["name","time",">","}","chrono","map","max","save","<","milliseconds","cls","int","out","type","may","++","{","filter","count","work","replicate","y","proprietary","blur","_","steady","main","utility","this","information","channel","=","%","gaussian","---------","-------------------------","[","is","reproduced","any","\"","flag","express","cout","iterator","scalar","0","core","png","auto","h","medianblur","void","2021","iomanip","error","way","dst","guss","image","transmitted","+","n","all","maxvalue","imread","frame1","opencv2","tof","#","no","minvalue","border","/","trade","or","diff","hpp","1.0","to","microseconds","return","end","purpose","analyse","without","clock","file","param","hobotcv","initialize","part","copyright","start","mat","point","cast","hobotcvgaussianblurhandle","cost","(","gauss","*","gaussianblur",":","owned","rows","maxidx","if","inc",",","material","confidential","size","mean","m","now","hobotcvgaussianblurprocess","the","used","images","hobotgaussianblurparam","s","abs","include","cols","failed","hobotcvgaussianblurcreate","horizon","reserved","\\","d","16uc1","secrets","minmaxloc","min","printf"," ",";","fstream",".","queue","cpp","handle","sum","and","1","src","]","string","disclosed","channels","3","std","x","mixidx","infe","int32","i","c","endl","cv","in","rights","：","of","imgproc","contains","sample","t","&","float","by","written","hobotcvgaussianblurdestroy","-","imgcodecs","algorithm","robotics","result","double","ms","duration","msg","copied","ret","iostream","permission","rate","be","5","for",")"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_4","text":"再来看另外一个案例，图像的裁剪与缩放，比如这样一幅图片，我们尝试剪裁左上角的一小块图像出来，或者对裁剪的某一块图像放大来看看。","text_tokens":["缩放","再","比如","左上","放大","这样","小块","来看","看看","一小","案例","一个","尝试","图像","对","某","一幅","来","一小块","裁剪","图片","与","另外","我们","。","左上角","的","出来","或者","剪裁","一块","，","上角"],"title":"图像裁剪与缩放","title_tokens":["与","缩放","裁剪","图像"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_5","text":"$ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/hobot_cv/config/ . $ ros2 run hobot_cv example","text_tokens":["bash","opt","run","config","ros2","cv","setup","$","/","-","hobot","tros","_","lib","example"," ","cp",".","r","source"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_6","text":"// Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include \"include/hobotcv_imgproc.h\" #include \"include/utils.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/core/types.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/opencv.hpp\" #include <fstream> #include <string> #include <chrono> #include <iostream> void writeImg ( cv :: Mat & mat , std :: string imgfile ) { cv :: Mat img_bgr ; cv :: cvtColor ( mat , img_bgr , cv :: COLOR_YUV2BGR_NV12 ); cv :: imwrite ( imgfile , img_bgr ); } int main () { std :: string image_file = \"config/test.jpg\" ; cv :: Mat bgr_mat = cv :: imread ( image_file , cv :: IMREAD_COLOR ); auto src_height = bgr_mat . rows ; auto src_width = bgr_mat . cols ; cv :: Mat srcmat_nv12 ; BGRToNv12 ( bgr_mat , srcmat_nv12 ); auto dst_height = src_height / 2 ; auto dst_width = src_width / 2 ; cv :: Mat dstmat_nv12 ( dst_height * 3 / 2 , dst_width , CV_8UC1 ); auto before_resize = std :: chrono :: system_clock :: now (); auto ret = hobot_cv :: hobotcv_resize ( srcmat_nv12 , src_height , src_width , dstmat_nv12 , dst_height , dst_width ); auto after_resize = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_resize - before_resize ). count (); if ( 0 == ret ) { std :: cout << \"resize finish, time: \" << interval << \"ms\" << std :: endl ; } writeImg ( dstmat_nv12 , \"./resize.jpg\" ); auto before_crop = std :: chrono :: system_clock :: now (); auto cropmat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , 200 , 200 , cv :: Range ( 0 , 200 ), cv :: Range ( 0 , 200 )); auto after_crop = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_crop - before_crop ). count (); std :: cout << \"crop finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropmat , \"./crop.jpg\" ); auto before_cropResize = std :: chrono :: system_clock :: now (); auto cropResizemat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , src_height , src_width , cv :: Range ( 200 , 400 ), cv :: Range ( 200 , 400 )); auto after_cropResize = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_cropResize - before_cropResize ). count (); std :: cout << \"cropResize finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropResizemat , \"./cropResize.jpg\" ); return 0 ; }","text_tokens":["400","time",">","crop","config","}","chrono","8uc1","dstmat","<","milliseconds","cvtcolor","int","color","finish","may","opencv","{","count","work","proprietary","cropresizemat","hobot","_","main","this","information","imwrite","=","img","is","reproduced","any","\"","jpg","express","0","cout","return","core","auto","h","void","2021","way","dst","image","transmitted","all","writeimg","imread","opencv2","#","no","/","trade","or","hpp","imgfile","purpose","200","without","clock","file","hobotcv","part","copyright","mat","yuv2bgr","cast","range","(","*","types","owned",":","rows","2","if","inc",",","cropmat","after","material","confidential","now","the","used","interval","include","cols","horizon","reserved","secrets","width"," ",";","fstream",".","utils","and","src","string","disclosed","3","std","c","bgrtonv12","cv","endl","system","in","rights","of","imgproc","bgr","contains","&","by","written","-","test","imgcodecs","robotics","ms","before","duration","copied","ret","iostream","permission","nv12","resize","be","srcmat","for","height","cropresize",")"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/","text":"模型推理框架 智能机器人与机器学习是紧密相连的，机器学习又可以分成数据采集、标注、训练、推理等环节，其中数据的训练需要消耗大量算力，适合在服务器或者云端进行，不过训练好的模型可是要部署到机器人端进行推理运算的，所以模型推理的效率如何，直接决定了机器人视觉处理的效率，这刚好是TogetherROS所擅长的地方。 Hobot DNN模型推理库 TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 hobot_dnn是在地平线X3开发板上利用BPU处理器实现AI推理功能，基于地平线EasyDNN和ROS2 Node进行二次开发，为应用开发提供更简单易用的模型集成开发接口，包括模型管理、基于模型描述的输入处理及结果解析，以及模型输出内存分配管理等功能。 关于hobot_dnn的使用逻辑流程如这张图所示，供大家参考，我们后续也会通过具体的案例解释代码的实现过程。 算法与应用库 在Hobot DNN模型推理库的基础上，地平线还提供了一套基于TogetherROS系统的AI算法包，称为BOXs，这样我们就不需要从零构建算法，基于这些标准而高效的算法，可以更关注应用层面的APP开发。 从这张图中我们可以看到，这套AI算法包中包含两大块，一个是基础算法，一个是应用算法。 基础算法中主要是图像分类、语义分割和目标检测这些常用的算法，应用层面就会基于这些算法和某些场景，动态实现更为复杂的人体识别、骨骼点识别、手势识别等具体的功能，这些模块就可以和机器人运功功能直接结合，节省了我们开发AI视觉部分的时间。 模型推理测试 这套模型推理和算法库的效果如何呢？ 我们先来体验一个TogetherROS系统自带的案例，识别这张图片中的人，以及每个人的骨骼关键点。 # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。config中为example使用的模型，回灌使用的本地图片 $ cp -r /opt/tros/lib/dnn_node_example/config/ . # 使用本地jpg格式图片通过同步模式进行回环预测，并存储渲染后的图片 $ ros2 launch dnn_node_example hobot_dnn_node_example_feedback.launch.py","text_tokens":["bash","py","时间","相连","云端","预测","服务器","每个","算法","所以","分配","config","回环","描述","又","模块","ai","ros2","易用","端","通过","分割","集成","和","使用","功能","其中","node","简单","来","引擎","图片","关注","$","这张","我们","提供","hobot","tros","这些","_","很快","流程","骨骼","好","开源","及","可以","如","测试","渲染","source","为","框架","jpg","配置","opt","包含","两大块","解析","关键","拷贝","实际","训练","标准","主要","效果","部署","代码","boxs","零","先","案例","机器人","图像","参考","要","？","智能","、","二次开发","本地","x3","管理","结果","关于","这","#","等","借助","如何","。","务器","实现","/","某些","学习","机器","不过","地方","开发者","地平","同步","系统集成","适合","称为","节省","刚好","库","标注","回灌","逻辑","，","语义","示例","togetherros","处理","推理","就","复杂","呢","bpu","easydnn","人","过程","需要","这样","环节","是","所","后续","从","路径","出","格式","看到","理器","不","人体","存储","不用","也","一个","调教","效率","可是","决定","dnn","基础","目标","模式","关键点","常用","直接","高效","配置文件","服务","地平线","视觉","系统","算力","模型","采集","应用","供","检测","会","动态","后","紧密","人工智能","安装","手势","中为","人工","lib","的","或者","芯片","结合","example","一套"," ","啦","运算",".","了","所示","到","并","处理器","自带","充足","利用","feedback","基于","内存","运功","大家","点","部分","消耗","输入","花费","擅长","接口","层面","上","众多","以及","开发","app","文件","二次","分成","而","数据","包中","场景","在","包","还","setup","更","识别","具体","输出","包括","中","环境","与","-","体验","开发板","保障","这套","张图","大量","launch","运行","底层","解释","进行","cp","r","很多","大块","分类","更为","构建"],"title":"模型推理框架","title_tokens":["框架","模型","推理"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_1","text":"智能机器人与机器学习是紧密相连的，机器学习又可以分成数据采集、标注、训练、推理等环节，其中数据的训练需要消耗大量算力，适合在服务器或者云端进行，不过训练好的模型可是要部署到机器人端进行推理运算的，所以模型推理的效率如何，直接决定了机器人视觉处理的效率，这刚好是TogetherROS所擅长的地方。","text_tokens":["推理","相连","需要","云端","环节","是","服务器","所","所以","消耗","训练","擅长","部署","又","端","机器人","可是","效率","决定","要","分成","智能","、","数据","直接","其中","在","服务","视觉","这","算力","采集","等","模型","如何","紧密","与","务器","。","学习","机器","不过","地方","的","大量","或者","适合","好","刚好","可以","标注","进行","，","运算","了","到","处理","togetherros"],"title":"模型推理框架","title_tokens":["框架","模型","推理"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#hobot-dnn","text":"TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 hobot_dnn是在地平线X3开发板上利用BPU处理器实现AI推理功能，基于地平线EasyDNN和ROS2 Node进行二次开发，为应用开发提供更简单易用的模型集成开发接口，包括模型管理、基于模型描述的输入处理及结果解析，以及模型输出内存分配管理等功能。 关于hobot_dnn的使用逻辑流程如这张图所示，供大家参考，我们后续也会通过具体的案例解释代码的实现过程。","text_tokens":["时间","分配","描述","ai","ros2","易用","通过","集成","和","使用","功能","node","简单","引擎","我们","提供","hobot","_","很快","流程","开源","及","可以","如","为","解析","实际","训练","部署","代码","案例","参考","智能","、","二次开发","x3","管理","结果","关于","这","等","借助","。","实现","开发者","地平","系统集成","库","逻辑","，","togetherros","处理","推理","就","bpu","easydnn","过程","是","后续","理器","不用","也","调教","dnn","供","地平线","系统","算力","模型","应用","会","人工智能","人工","的","芯片"," ","啦","了","所示","处理器","充足","利用","基于","内存","大家","输入","花费","接口","上","众多","以及","开发","二次","数据","在","更","具体","输出","包括","中","开发板","保障","这套","张图","底层","解释","进行","很多"],"title":"Hobot DNN模型推理库","title_tokens":["推理","模型"," ","库","dnn","hobot"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_2","text":"在Hobot DNN模型推理库的基础上，地平线还提供了一套基于TogetherROS系统的AI算法包，称为BOXs，这样我们就不需要从零构建算法，基于这些标准而高效的算法，可以更关注应用层面的APP开发。 从这张图中我们可以看到，这套AI算法包中包含两大块，一个是基础算法，一个是应用算法。 基础算法中主要是图像分类、语义分割和目标检测这些常用的算法，应用层面就会基于这些算法和某些场景，动态实现更为复杂的人体识别、骨骼点识别、手势识别等具体的功能，这些模块就可以和机器人运功功能直接结合，节省了我们开发AI视觉部分的时间。","text_tokens":["时间","算法","模块","ai","分割","和","功能","关注","我们","提供","hobot","这些","骨骼","可以","包含","两大块","主要","标准","boxs","零","图像","机器人","、","这","等","。","实现","某些","机器","地平","称为","节省","库","，","语义","togetherros","推理","就","复杂","需要","这样","是","从","看到","不","人体","一个","dnn","基础","目标","常用","直接","高效","地平线","视觉","系统","模型","应用","检测","动态","会","手势","的","结合","一套"," ","了","基于","运功","部分","点","层面","上","app","开发","而","包中","场景","在","包","还","更","识别","具体","中","张图","这套","大块","分类","更为","构建"],"title":"算法与应用库","title_tokens":["与","算法","应用","库"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_3","text":"这套模型推理和算法库的效果如何呢？ 我们先来体验一个TogetherROS系统自带的案例，识别这张图片中的人，以及每个人的骨骼关键点。 # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。config中为example使用的模型，回灌使用的本地图片 $ cp -r /opt/tros/lib/dnn_node_example/config/ . # 使用本地jpg格式图片通过同步模式进行回环预测，并存储渲染后的图片 $ ros2 launch dnn_node_example hobot_dnn_node_example_feedback.launch.py","text_tokens":["bash","py","预测","每个","算法","config","回环","ros2","通过","和","使用","node","来","图片","$","这张","我们","hobot","tros","_","骨骼","渲染","source","jpg","配置","opt","关键","拷贝","效果","先","案例","？","本地","#","如何","。","/","同步","库","回灌","，","示例","togetherros","推理","呢","人","需要","出","从","路径","格式","存储","一个","模式","dnn","关键点","配置文件","系统","模型","后","安装","中为","lib","的","example"," ",".","并","自带","feedback","以及","文件","setup","识别","中","环境","-","体验","这套","launch","运行","进行","cp","r"],"title":"模型推理测试","title_tokens":["测试","模型","推理"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/","text":"图像物体分类 接下来我们继续学习基于Hobot CNN模型推理库之上的视觉应用。 机器人要感知周边环境，那就得确定看到的图像中都有什么，比如地上有一只猫，旁边有一个桌子之类的，这个猫和桌子就是具体的物体分类啦。 图像分类原理 如果是人来识别一只猫的话，似乎再简单不过了，无论黑猫、白猫还是花猫，我们一眼就可以看出来。 不过这件事对于机器人来讲可没有那么简单，为了能够让机器准确识别一只猫，无数学者可是研究了几十年啊，虽然还赶不上人类的智慧，但是这件事已经没有那么遥不可及了。 比如说我们要让机器识别图像中有一只猫，我们就得先教会机器什么是猫，对此我们就得把各种各样猫的照片给计算机看，目的就是让机器学习，看的越多，识别的也就越准。 我们那里找这么多猫的图片呢？ 大家可能听说过一个著名的视觉对象数据库——ImageNet，里边有超过1400万张标注过的图像，2万多个类别，我们就可以利用这个庞大的数据库，找到很多猫的照片。 然后就搭建神经网络，把这些数据放进去训练了，调教出一套比较好的识别模型。 接下来把这套模型部署到机器人上，之后每当有一幅图像收到之后，就传到这个模型中，也就是模型推理，推理的结果就是类似这样的数据，概率最大的，也就是机器识别到的物体啦。 关于机器学习，理论众多，大家可以学习专门的课程，我们课上还是重点讲解在TogetherROS中的实现方法。 编程开发方法 我们来看这样一张图片，大家很快就可以发现这是一只斑马。 运行示例程序 我们如何用机器来识别它呢，大家先来运行这个案例，这是基于ImageNet数据集训练的模型，可以识别1000种常见的物体，我们看一下效果如何？ $ cd /app/ai_inference/01_basic_sample/ $ sudo python3 ./test_mobilenetv1.py 代码解析 test_mobilenetv1.py： #!/usr/bin/env python3 from hobot_dnn import pyeasy_dnn as dnn import numpy as np import cv2 def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_BGR2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] if __name__ == '__main__' : # test classification result models = dnn . load ( '../models/mobilenetv1_224x224_nv12.bin' ) # test input and output properties print ( \"=\" * 10 , \"inputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) print ( \"inputs[0] name is:\" , models [ 0 ] . inputs [ 0 ] . name ) print ( \"=\" * 10 , \"outputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . outputs [ 0 ] . properties ) print ( \"outputs[0] name is:\" , models [ 0 ] . outputs [ 0 ] . name ) # 打开图片 img_file = cv2 . imread ( './zebra_cls.jpg' ) # 把图片缩放到模型的输入尺寸 # 获取算法模型的输入tensor 的尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) des_dim = ( w , h ) resized_data = cv2 . resize ( img_file , des_dim , interpolation = cv2 . INTER_AREA ) nv12_data = bgr2nv12_opencv ( resized_data ) # 模型推理 outputs = models [ 0 ] . forward ( nv12_data ) print ( \"=\" * 10 , \"Get output[0] numpy data\" , \"=\" * 10 ) print ( \"output[0] buffer numpy info: \" ) print ( \"shape: \" , outputs [ 0 ] . buffer . shape ) print ( \"dtype: \" , outputs [ 0 ] . buffer . dtype ) # print(\"First 10 results:\", outputs[0].buffer[0][:10]) # 从输出结果中得到值最大的那个序号，比如 zebra 就是第 340 个值，应该大于 0.99 print ( \"=\" * 10 , \"Classification result\" , \"=\" * 10 ) assert np . argmax ( outputs [ 0 ] . buffer ) == 340 # 输出类别序号和预测概率值 print ( \"cls id: %d Confidence: %f \" % ( np . argmax ( outputs [ 0 ] . buffer ), outputs [ 0 ] . buffer [ 0 ][ np . argmax ( outputs [ 0 ] . buffer )])) Mobilenetv2物体分类 用图片进行识别不太过瘾，毕竟是静态的图像，没问题，TogetherROS中还提供了实时物体分类的案例，我们继续来体验一下。 为了实时显示视觉识别的效果，这里我们需要启动TogetherROS中的一个web服务器，它会把视觉识别的实时效果，通过网络传输出来，我们直接在浏览器中就可以看到结果啦。也是便于我们开发调试的一个重要工具。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . 运行例程： $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/mobilenetv2workconfig.json image_width: = 480 image_height: = 272 在浏览器中登录192.168.1.10，就可以看到分类效果啦：","text_tokens":["name","bash","能够","研究","uv","据库","config","可能","web","已经","cls","websocket","type","简单","opencv","hobot","的话","hw","sbin","buffer","例程","问题","mobilenetv2workconfig","继续","都","0","packed","data","interpolation","之类","开发方法","越","花猫","那里","实时","案例","机器人","要","？","、","结果","黑猫","如何","中有","/","进去","出来","share","，","示例","id","这是","就","神经","让","物体","results","这样","出","没有","重点","dtype","zeros","也","调教","可是","对于","登录","视觉","一幅","模型","最大","似乎","虽然","的","width","啦","了","静态","尺寸","比如","概率","放到","zebra","基于","原理","大家","1.10","十年","万多个","各种","开发","一张","地上","类似","就是","这么","还","应该","sample","webservice","环境","中","test","遥不可及","resize","神经网络","10","进行","r","分类","这件",")","1000","py","启动","mobilenetv2","cnn","numpy","来看","first","浏览","ai","!","打开","dim","通过","和","color","第","计算","它","课程","$","y","提供","tros","print","传输","=","可以","一眼","神经网","超过","img","为了","旁边","return","jpg","什么","h","1400","这个","找到","然后","+","先","cd","比较","models","imread","各种各样","程序","关于","万张","outputs","。","实现","学习","机器","库","标注","nchw","togetherros","info","推理","480","那","呢","用","(","*","classification","2","benchmark","教会","shape","事","周边","一个","缩","确定","dnn","inference","import","之后","confidence","专门","收到","basic","example","i420","再","inter","序号","des","常见","x","like","python3","得到","数据库","app","chmod","照片","：","看","argmax","万多","学者","340","编程","f","可","体验","result","usr","把","桌子","课上","get","下来","显示","人来","赶不上","多猫","有","多个","sudo","这里","runtime","多","imagenet","node","np","获取","from","output","各样","_","接下","周边环境","%","json","[","放进","传到","讲解","效果","部署","代码","图像","inputs","务器","无数","input","发现",":","是","方法","—","便于","cv2","as","大于","服务","过","对此","d","调试","给","无论","lib","一套"," ",".","到","之上","and","利用","找","]","得","计算机","pro","工具","3","类别","load","输入","众多","准确","数据","layout","setup","识别","那么","272","具体","网络","不可","这套","4","运行","transpose","一下","nv12","几十","cp","height","不太","接下来","resized","192.168","就可以看","来讲","..","预测","服务器","算法","assert","比如说","env","ros2","庞大","cvtcolor","个值","来","planar","图片","我们","人类","这些","main","很快","forward","好","对象","mobilenetv1","reshape","理论","source","\"","is","&&","毕竟","opt","过瘾","斑马","解析","放进去","bgr2nv12","image","训练","但是","tensor","yuv420p","0.99","啊","#","智慧","__","nginx","著名","种","不过","bin","感知","w","file","里边","如果","if","需要","else",",","从","看到","p","def","值","重要","area","浏览器","一只","直接","几十年","应用","算机","它会","webserver","那个","'","集","1","没","01","每当","听说","properties","白猫","bgr2yuv","搭建","上","越准","目的","在","猫","还是","输出","-","launch","很多","pyeasy","224x224"],"title":"图像物体分类","title_tokens":["图像","分类","物体"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_1","text":"接下来我们继续学习基于Hobot CNN模型推理库之上的视觉应用。 机器人要感知周边环境，那就得确定看到的图像中都有什么，比如地上有一只猫，旁边有一个桌子之类的，这个猫和桌子就是具体的物体分类啦。","text_tokens":["之上","旁边","推理","就","比如","那","什么","有","得","物体","基于","之类","看到","cnn","这个","周边","一个","机器人","确定","图像","要","和","地上","就是","一只","视觉","模型","应用","猫","具体","环境","中","。","我们","都","hobot","学习","机器","的","接下","周边环境"," ","库","啦","继续","感知","，","分类","桌子","下来","接下来"],"title":"图像物体分类","title_tokens":["图像","分类","物体"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_2","text":"如果是人来识别一只猫的话，似乎再简单不过了，无论黑猫、白猫还是花猫，我们一眼就可以看出来。 不过这件事对于机器人来讲可没有那么简单，为了能够让机器准确识别一只猫，无数学者可是研究了几十年啊，虽然还赶不上人类的智慧，但是这件事已经没有那么遥不可及了。 比如说我们要让机器识别图像中有一只猫，我们就得先教会机器什么是猫，对此我们就得把各种各样猫的照片给计算机看，目的就是让机器学习，看的越多，识别的也就越准。 我们那里找这么多猫的图片呢？ 大家可能听说过一个著名的视觉对象数据库——ImageNet，里边有超过1400万张标注过的图像，2万多个类别，我们就可以利用这个庞大的数据库，找到很多猫的照片。 然后就搭建神经网络，把这些数据放进去训练了，调教出一套比较好的识别模型。 接下来把这套模型部署到机器人上，之后每当有一幅图像收到之后，就传到这个模型中，也就是模型推理，推理的结果就是类似这样的数据，概率最大的，也就是机器识别到的物体啦。 关于机器学习，理论众多，大家可以学习专门的课程，我们课上还是重点讲解在TogetherROS中的实现方法。","text_tokens":["人来","赶不上","多猫","有","能够","研究","就可以看","来讲","多个","据库","可能","比如说","多","庞大","已经","imagenet","简单","计算","图片","课程","我们","的话","人类","各样","这些","接下","好","可以","一眼","神经网","超过","对象","理论","为了","什么","放进","传到","讲解","1400","放进去","训练","这个","找到","越","花猫","然后","部署","先","那里","机器人","图像","但是","比较","要","？","、","各种各样","啊","结果","关于","智慧","黑猫","万张","中有","课上","。","著名","实现","无数","学习","不过","机器","进去","出来","标注","，","togetherros","里边","推理","就","呢","如果","神经","让","物体","2","这样","出","是","没有","重点","方法","教会","—","事","也","一个","调教","可是","对于","一只","几十年","之后","视觉","过","一幅","模型","最大","算机","似乎","对此","专门","给","虽然","收到","无论","的","一套"," ","啦","了","到","再","比如","概率","利用","找","得","计算机","大家","每当","听说","类别","白猫","数据库","搭建","上","十年","众多","准确","万多个","各种","越准","照片","数据","目的","就是","看","类似","在","这么","还","识别","那么","猫","万多","还是","网络","学者","中","可","不可","遥不可及","这套","几十","神经网络","把","很多","这件","下来","接下来"],"title":"图像分类原理","title_tokens":["原理","图像","分类"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_3","text":"我们来看这样一张图片，大家很快就可以发现这是一只斑马。","text_tokens":["一只","这是","很快","来看","就","发现","可以","图片","这样","，","。","我们","大家","斑马","一张"],"title":"编程开发方法","title_tokens":["开发方法","编程","开发","方法"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_4","text":"我们如何用机器来识别它呢，大家先来运行这个案例，这是基于ImageNet数据集训练的模型，可以识别1000种常见的物体，我们看一下效果如何？ $ cd /app/ai_inference/01_basic_sample/ $ sudo python3 ./test_mobilenetv1.py","text_tokens":["这是","用","呢","常见","py","物体","基于","01","大家","sudo","训练","这个","效果","python3","先","cd","案例","ai","app","inference","？","数据","看","imagenet","来","识别","模型","sample","它","如何","$","/","我们","种","test","机器","_","basic","的","运行","一下"," ","可以",".","，","mobilenetv1","集","1000"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_5","text":"test_mobilenetv1.py： #!/usr/bin/env python3 from hobot_dnn import pyeasy_dnn as dnn import numpy as np import cv2 def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_BGR2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] if __name__ == '__main__' : # test classification result models = dnn . load ( '../models/mobilenetv1_224x224_nv12.bin' ) # test input and output properties print ( \"=\" * 10 , \"inputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) print ( \"inputs[0] name is:\" , models [ 0 ] . inputs [ 0 ] . name ) print ( \"=\" * 10 , \"outputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . outputs [ 0 ] . properties ) print ( \"outputs[0] name is:\" , models [ 0 ] . outputs [ 0 ] . name ) # 打开图片 img_file = cv2 . imread ( './zebra_cls.jpg' ) # 把图片缩放到模型的输入尺寸 # 获取算法模型的输入tensor 的尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) des_dim = ( w , h ) resized_data = cv2 . resize ( img_file , des_dim , interpolation = cv2 . INTER_AREA ) nv12_data = bgr2nv12_opencv ( resized_data ) # 模型推理 outputs = models [ 0 ] . forward ( nv12_data ) print ( \"=\" * 10 , \"Get output[0] numpy data\" , \"=\" * 10 ) print ( \"output[0] buffer numpy info: \" ) print ( \"shape: \" , outputs [ 0 ] . buffer . shape ) print ( \"dtype: \" , outputs [ 0 ] . buffer . dtype ) # print(\"First 10 results:\", outputs[0].buffer[0][:10]) # 从输出结果中得到值最大的那个序号，比如 zebra 就是第 340 个值，应该大于 0.99 print ( \"=\" * 10 , \"Classification result\" , \"=\" * 10 ) assert np . argmax ( outputs [ 0 ] . buffer ) == 340 # 输出类别序号和预测概率值 print ( \"cls id: %d Confidence: %f \" % ( np . argmax ( outputs [ 0 ] . buffer ), outputs [ 0 ] . buffer [ 0 ][ np . argmax ( outputs [ 0 ] . buffer )]))","text_tokens":["name","resized","py","uv","..","预测","算法","numpy","first","assert","env","!","打开","dim","cvtcolor","cls","和","color","type","第","个值","planar","opencv","np","图片","获取","y","from","output","hobot","hw","_","main","print","buffer","forward","=","%","img","mobilenetv1","reshape","[","0","return","\"","is","jpg","packed","data","h","interpolation","bgr2nv12","image","models","imread","inputs","tensor","yuv420p","0.99","结果","#","__","outputs","/","bin","input","nchw","，","w","file","info","id","推理","(","*",":","classification","2","if","results","else",",","从","dtype","shape","cv2","def","zeros","缩","dnn","值","as","import","area","大于","confidence","模型","最大","d","的","width"," ",".","那个","'","i420","inter","尺寸","1","and","放到","des","序号","]","比如","概率","zebra","pro","3","类别","load","输入","properties","like","python3","bgr2yuv","得到","：","layout","就是","argmax","应该","340","输出","中","f","test","result","4","transpose","nv12","resize","usr","10","height","把","pyeasy","224x224",")","get"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#mobilenetv2","text":"用图片进行识别不太过瘾，毕竟是静态的图像，没问题，TogetherROS中还提供了实时物体分类的案例，我们继续来体验一下。 为了实时显示视觉识别的效果，这里我们需要启动TogetherROS中的一个web服务器，它会把视觉识别的实时效果，通过网络传输出来，我们直接在浏览器中就可以看到结果啦。也是便于我们开发调试的一个重要工具。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . 运行例程： $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/mobilenetv2workconfig.json image_width: = 480 image_height: = 272 在浏览器中登录192.168.1.10，就可以看到分类效果啦：","text_tokens":["bash","192.168","py","启动","服务器","这里","config","浏览","web","runtime","ros2","通过","websocket","node","来","图片","$","我们","提供","hobot","tros","sbin","_","例程","问题","传输","mobilenetv2workconfig","=","可以","json","继续","source","为了","&&","毕竟","opt","过瘾","image","效果","+","cd","实时","案例","图像","结果","#","。","务器","/","nginx","出来","share","，","file","togetherros","就","480","用",":","物体","需要","benchmark","是","看到","p","便于","也","一个","dnn","登录","重要","浏览器","直接","服务","视觉","它会","调试","lib","的","webserver","width","example"," ","啦",".","了","静态","没","工具","x","1.10","开发","chmod","：","在","还","setup","识别","272","网络","webservice","中","-","体验","launch","运行","一下","进行","cp","height","把","不太","分类","r","显示"],"title":"Mobilenetv2物体分类","title_tokens":["分类","mobilenetv2","物体"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/","text":"动态目标检测 图像物体分类重在分析图像中存在的物体是什么，便于机器理解看到的环境信息，另外一种场景，机器不仅要识别某一物体，还要知道这个物体所在的位置，当物体在运动时，更要快速连续的跟踪，这就是目标检测，重在分析识别到物体在图像中的位置。 目标检测原理 假设我们要识别图像中这只狗的位置，以最为常用的YOLO算法为例，它会运用单个卷积神经网络(CNN) ，将图像分成网格，并预测每个网格的对象概率和边界框。 比如，对于这个图像，Yolo的CNN网络将输入的图片分割成7x7的网格，然后每个网格负责去检测那些中心点落在该格子内的目标，比如，小狗这个目标的中心点在左下角的网格中，那该网格就负责预测狗这个对象。 每个网格中将有多个边界框，在训练时，我们希望每个对象只有一个边界框，比如最终只有一个边界框把这只狗包起来。因此，我们根据哪个边界框与之前标注的重叠度最高，预测对象的位置和概率。 最终包围对象的边界框，就是识别的结果，使用四个描述符进行说明： 边界框的中心位置 边界框的高度 边界框的宽度 识别到对象所属的类 这样就完成了对目标的实时检测，拿到目标的信息之后，就可以进行后续的机器人行为控制了。 我们对目标检测系统运行速度的要求一般都比较高，可以实时处理视频流，比如车辆行驶的动态监测、自然环境中的目标识别，有着非常广泛的应用价值。 回到TogetherROS和旭日X3派的开发板，我们来看下这套软硬件结合的目标检测系统，效率如何。 MIPI相机目标检测 接下来，我们要利用MIPI相机，动态识别图像中各种各样的物体以及他们所在的位置，推理过程使用的是基于COCO数据集训练的80个类别，也就是可以识别80种常用的物体位置。 运行例程 $ cd /app/ai_inference/03_mipi_camera_sample/ $ python3 ./mipi_camera.py 代码解析 mipi_camera.py： #!/usr/bin/env python3 import numpy as np import cv2 import colorsys # Camera API libs from hobot_vio import libsrcampy as srcampy from hobot_dnn import pyeasy_dnn as dnn # detection model class names def get_classes (): return np . array ([ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" , \"bus\" , \"train\" , \"truck\" , \"boat\" , \"traffic light\" , \"fire hydrant\" , \"stop sign\" , \"parking meter\" , \"bench\" , \"bird\" , \"cat\" , \"dog\" , \"horse\" , \"sheep\" , \"cow\" , \"elephant\" , \"bear\" , \"zebra\" , \"giraffe\" , \"backpack\" , \"umbrella\" , \"handbag\" , \"tie\" , \"suitcase\" , \"frisbee\" , \"skis\" , \"snowboard\" , \"sports ball\" , \"kite\" , \"baseball bat\" , \"baseball glove\" , \"skateboard\" , \"surfboard\" , \"tennis racket\" , \"bottle\" , \"wine glass\" , \"cup\" , \"fork\" , \"knife\" , \"spoon\" , \"bowl\" , \"banana\" , \"apple\" , \"sandwich\" , \"orange\" , \"broccoli\" , \"carrot\" , \"hot dog\" , \"pizza\" , \"donut\" , \"cake\" , \"chair\" , \"couch\" , \"potted plant\" , \"bed\" , \"dining table\" , \"toilet\" , \"tv\" , \"laptop\" , \"mouse\" , \"remote\" , \"keyboard\" , \"cell phone\" , \"microwave\" , \"oven\" , \"toaster\" , \"sink\" , \"refrigerator\" , \"book\" , \"clock\" , \"vase\" , \"scissors\" , \"teddy bear\" , \"hair drier\" , \"toothbrush\" ]) def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_RGB2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] def postprocess ( model_output , model_hw_shape , origin_image = None , origin_img_shape = None , score_threshold = 0.5 , nms_threshold = 0.6 , dump_image = False ): input_height = model_hw_shape [ 0 ] input_width = model_hw_shape [ 1 ] if origin_image is not None : origin_image_shape = origin_image . shape [ 0 : 2 ] else : origin_image_shape = origin_img_shape prediction_bbox = decode ( outputs = model_output , score_threshold = score_threshold , origin_shape = origin_image_shape , input_size = 512 ) prediction_bbox = nms ( prediction_bbox , iou_threshold = nms_threshold ) prediction_bbox = np . array ( prediction_bbox ) topk = min ( prediction_bbox . shape [ 0 ], 1000 ) if topk != 0 : idx = np . argpartition ( prediction_bbox [ ... , 4 ], - topk )[ - topk :] prediction_bbox = prediction_bbox [ idx ] if dump_image and origin_image is not None : draw_bboxs ( origin_image , prediction_bbox ) return prediction_bbox def draw_bboxs ( image , bboxes , gt_classes_index = None , classes = get_classes ()): \"\"\"draw the bboxes in the original image \"\"\" num_classes = len ( classes ) image_h , image_w , channel = image . shape hsv_tuples = [( 1.0 * x / num_classes , 1. , 1. ) for x in range ( num_classes )] colors = list ( map ( lambda x : colorsys . hsv_to_rgb ( * x ), hsv_tuples )) colors = list ( map ( lambda x : ( int ( x [ 0 ] * 255 ), int ( x [ 1 ] * 255 ), int ( x [ 2 ] * 255 )), colors )) fontScale = 0.5 bbox_thick = int ( 0.6 * ( image_h + image_w ) / 600 ) for i , bbox in enumerate ( bboxes ): coor = np . array ( bbox [: 4 ], dtype = np . int32 ) if gt_classes_index == None : class_index = int ( bbox [ 5 ]) score = bbox [ 4 ] else : class_index = gt_classes_index [ i ] score = 1 bbox_color = colors [ class_index ] c1 , c2 = ( coor [ 0 ], coor [ 1 ]), ( coor [ 2 ], coor [ 3 ]) cv2 . rectangle ( image , c1 , c2 , bbox_color , bbox_thick ) classes_name = classes [ class_index ] bbox_mess = ' %s : %.2f ' % ( classes_name , score ) t_size = cv2 . getTextSize ( bbox_mess , 0 , fontScale , thickness = bbox_thick // 2 )[ 0 ] cv2 . rectangle ( image , c1 , ( c1 [ 0 ] + t_size [ 0 ], c1 [ 1 ] - t_size [ 1 ] - 3 ), bbox_color , - 1 ) cv2 . putText ( image , bbox_mess , ( c1 [ 0 ], c1 [ 1 ] - 2 ), cv2 . FONT_HERSHEY_SIMPLEX , fontScale , ( 0 , 0 , 0 ), bbox_thick // 2 , lineType = cv2 . LINE_AA ) print ( \" {} is in the picture with confidence: {:.4f} , bbox: {} \" . format ( classes_name , score , coor )) # cv2.imwrite(\"demo.jpg\", image) return image def decode ( outputs , score_threshold , origin_shape , input_size = 512 ): def _distance2bbox ( points , distance ): x1 = points [ ... , 0 ] - distance [ ... , 0 ] y1 = points [ ... , 1 ] - distance [ ... , 1 ] x2 = points [ ... , 0 ] + distance [ ... , 2 ] y2 = points [ ... , 1 ] + distance [ ... , 3 ] return np . stack ([ x1 , y1 , x2 , y2 ], - 1 ) def _scores ( cls , ce ): cls = 1 / ( 1 + np . exp ( - cls )) ce = 1 / ( 1 + np . exp ( - ce )) return np . sqrt ( ce * cls ) def _bbox ( bbox , stride , origin_shape , input_size ): h , w = bbox . shape [ 1 : 3 ] yv , xv = np . meshgrid ( np . arange ( h ), np . arange ( w )) xy = ( np . stack (( yv , xv ), 2 ) + 0.5 ) * stride bbox = _distance2bbox ( xy , bbox ) # opencv read, shape[1] is w, shape[0] is h scale_w = origin_shape [ 1 ] / input_size scale_h = origin_shape [ 0 ] / input_size scale = max ( origin_shape [ 0 ], origin_shape [ 1 ]) / input_size # origin img is pad resized #bbox = bbox * scale # origin img is resized bbox = bbox * [ scale_w , scale_h , scale_w , scale_h ] return bbox bboxes = list () strides = [ 8 , 16 , 32 , 64 , 128 ] for i in range ( len ( strides )): cls = outputs [ i ] . buffer bbox = outputs [ i + 5 ] . buffer ce = outputs [ i + 10 ] . buffer scores = _scores ( cls , ce ) classes = np . argmax ( scores , axis =- 1 ) classes = np . reshape ( classes , [ - 1 , 1 ]) max_score = np . max ( scores , axis =- 1 ) max_score = np . reshape ( max_score , [ - 1 , 1 ]) bbox = _bbox ( bbox , strides [ i ], origin_shape , input_size ) bbox = np . reshape ( bbox , [ - 1 , 4 ]) pred_bbox = np . concatenate ([ bbox , max_score , classes ], axis = 1 ) index = pred_bbox [ ... , 4 ] > score_threshold pred_bbox = pred_bbox [ index ] bboxes . append ( pred_bbox ) return np . concatenate ( bboxes ) def nms ( bboxes , iou_threshold , sigma = 0.3 , method = 'nms' ): def bboxes_iou ( boxes1 , boxes2 ): boxes1 = np . array ( boxes1 ) boxes2 = np . array ( boxes2 ) boxes1_area = ( boxes1 [ ... , 2 ] - boxes1 [ ... , 0 ]) * \\ ( boxes1 [ ... , 3 ] - boxes1 [ ... , 1 ]) boxes2_area = ( boxes2 [ ... , 2 ] - boxes2 [ ... , 0 ]) * \\ ( boxes2 [ ... , 3 ] - boxes2 [ ... , 1 ]) left_up = np . maximum ( boxes1 [ ... , : 2 ], boxes2 [ ... , : 2 ]) right_down = np . minimum ( boxes1 [ ... , 2 :], boxes2 [ ... , 2 :]) inter_section = np . maximum ( right_down - left_up , 0.0 ) inter_area = inter_section [ ... , 0 ] * inter_section [ ... , 1 ] union_area = boxes1_area + boxes2_area - inter_area ious = np . maximum ( 1.0 * inter_area / union_area , np . finfo ( np . float32 ) . eps ) return ious classes_in_img = list ( set ( bboxes [:, 5 ])) best_bboxes = [] for cls in classes_in_img : cls_mask = ( bboxes [:, 5 ] == cls ) cls_bboxes = bboxes [ cls_mask ] while len ( cls_bboxes ) > 0 : max_ind = np . argmax ( cls_bboxes [:, 4 ]) best_bbox = cls_bboxes [ max_ind ] best_bboxes . append ( best_bbox ) cls_bboxes = np . concatenate ( [ cls_bboxes [: max_ind ], cls_bboxes [ max_ind + 1 :]]) iou = bboxes_iou ( best_bbox [ np . newaxis , : 4 ], cls_bboxes [:, : 4 ]) weight = np . ones (( len ( iou ),), dtype = np . float32 ) assert method in [ 'nms' , 'soft-nms' ] if method == 'nms' : iou_mask = iou > iou_threshold weight [ iou_mask ] = 0.0 if method == 'soft-nms' : weight = np . exp ( - ( 1.0 * iou ** 2 / sigma )) cls_bboxes [:, 4 ] = cls_bboxes [:, 4 ] * weight score_mask = cls_bboxes [:, 4 ] > 0. cls_bboxes = cls_bboxes [ score_mask ] return best_bboxes def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) if __name__ == '__main__' : models = dnn . load ( '../models/fcos_512x512_nv12.bin' ) # 打印输入 tensor 的属性 print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) # 打印输出 tensor 的属性 print ( len ( models [ 0 ] . outputs )) for output in models [ 0 ] . outputs : print_properties ( output . properties ) # 获取 Camera 句柄 cam = srcampy . Camera () # 打开 f37 摄像头，并且把输出突出缩小成算法模型的输入尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) # 打开 F37, 初始化视频 pipeline 0 ，设置帧率30fps，缩放图像为 512 x 512 cam . open_cam ( 0 , 1 , 30 , w , h ) # Get HDMI display object disp = srcampy . Display () # For the meaning of parameters, please refer to the relevant documents of HDMI display disp . display ( 0 , 1920 , 1080 ) input_shape = ( h , w ) while True : # 从相机获取分辨率为 512x512 的nv12格式的图像数据， 参数 2 代表从硬件模块IPU中获取 img = cam . get_img ( 2 , 512 , 512 ) # 把图像数据转成 numpy 数据类型 img = np . frombuffer ( img , dtype = np . uint8 ) # 模型推理 outputs = models [ 0 ] . forward ( img ) # 对算法结果进行过滤，去掉执行度低的检测框，计算检测框的交并比去除冗余框，把检测框的坐标还原到原图位置上 prediction_bbox = postprocess ( outputs , input_shape , origin_img_shape = ( 1080 , 1920 )) # 从新获取一张图像，大小缩放成与显示器的分辨率一样的 1920 x 1080, 并且转换成 bgr格式，方便进行绘图操作 origin_image = cam . get_img ( 2 , 1920 , 1080 ) origin_nv12 = np . frombuffer ( origin_image , dtype = np . uint8 ) . reshape ( 1620 , 1920 ) origin_bgr = cv2 . cvtColor ( origin_nv12 , cv2 . COLOR_YUV420SP2BGR ) # 把算法运行后得到的物体检测框绘制到图像上 box_bgr = draw_bboxs ( origin_bgr , prediction_bbox ) # X3 的HDMI输出模块的输入图像格式需要是NV12的，所以需要先把bgr格式转成NV12 box_nv12 = bgr2nv12_opencv ( box_bgr ) # 把 NV12 格式的图像输出给显示器 disp . set_img ( box_nv12 . tobytes ()) cam . close_cam () USB相机目标检测 如果大家手上没有MIPI接口的相机，使用USB相机也可以实现同样的功能。 运行例程 $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 动态目标检测 大家如果没有HDMI显示器的话，也没有问题，刚才的例程，也可以这样来运行，我们通过统一网络环境中的浏览器就可以动态看到结果啦。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/fcosworkconfig.json image_width: = 480 image_height: = 272","text_tokens":["xv","gt","name","bash","uv","nms","names","该",">","所以","config","refer","软硬件","cls","websocket","成","type","功能","ball","scale","sqrt","opencv","设置","font","hobot","enumerate","hw","显示器","的话","sbin","buffer","例程","最终","stop","问题","dining","coor","实时处理","32","都","以","meter","网格","存在","hot","句柄","512","0","packed","data","0.6","去掉","那该","bear","baseball","实时","dog","机器人","relevant","要","umbrella","、","c2","快速","api","car","结果","派","section","速度","旭日","orange","如何","希望","/","手上","iou","转换","share","，","bat","kite","处理","range","类","就","中心点","knife","神经","物体","单个","这样","hsv","一样","没有","格式","dtype","理解","zeros","也","size","02","效率","mouse","对于","输出模块","colors","落","yuv420sp2bgr","模型","动态","origin","高度","软硬","phone","打印","比","strides","后","suitcase","y2","person","哪个","的","width","1920","重叠","banana","啦","最高","了","truck","bowl","绘制","1620","尺寸","比如","概率","close","负责","couch","zebra","基于","原理","bicycle","大家","picture","read","len","chair","meshgrid","接口","minimum","自然环境","将","hydrant","disp","maximum","开发","各种","一张","就是","控制","包","sample","t","documents","webservice","中","环境","开发板","rgb","监测","5","神经网络","coco","进行","价值","10","摄像","r","分类","分辨率","wine","points",")","oven","1000","0.5","yv","说明","py","启动","某一","boxes2","cnn","numpy","class","来看","相机","fork","max","512x512","浏览","ai","with","giraffe","num","!","distance2bbox","他们","度","rectangle","视频","和","跟踪","打开","color","best","通过","tennis","horse","计算","potted","$","y","eps","tros","mipi","16","print","parameters","channel","imwrite","=","可以","神经网","2f","img","初始化","率","为","绘图","glass","scissors","bottle","return","jpg","什么","h","小成","apple","帧","类型","这个","然后","airplane","+","先","cd","soft","狗","刚才","比较","aa","finfo","models","高","各种各样","x3","classes","这","motorcycle","完成","outputs","。","广泛","实现","机器","while","并且","0.0","usb","index","突出","标注","frombuffer","nchw","book","togetherros","有着","推理","480","(","sheep","*","light","2","benchmark","colorsys","libs","下","sandwich","shape","之前","只有","一个","换成","dnn","prediction","600","inference","s","对","import","常用","一种","摄像头","object","之后","confidence","srcampy","所属","fcosworkconfig","float32","teddy","min","example","meaning","sink","框","bus","1080","mask","i420","fire","parking","right","inter","linetype","x","去除","时","like","python3","cow","i","得到","pred","puttext","model","app","chmod","sports","同样","：","argmax","更要","list","与","y1","冗余","frisbee","usr","for","把","surfboard","下来","get","显示","有","glove","最为","多个","硬件","handbag","还原","描述","map","runtime","模块","%.","分割","demo","使用","node","tv","03","只","thick","cam","{","np","64","获取","from","output","各样","_","hair","stride","xy","skis","接下","tie","%","json","box","f37","[","none","topk","original","卷积","broccoli","中心","转","转成","cell","代表","宽度","去","代码","图像","ious","inputs","运用","scores","pad","decode","gettextsize","microwave","true","方便","4f","weight","table","fontscale","clock","input","toothbrush","spoon","newaxis","还要","sigma",":","pizza","是","交","左下","便于","当","边界","cv2","要求","laptop","转换成","please","the","as","cake","tobytes","uint8","服务","不仅","vase","bbox","辨率","数据类型","\\","not","描述符","给","lib","tuples"," ","ce","新",".","到","统一","and","racket","refrigerator","30fps","利用","行为","]","false","pro","3","视频流","低","keyboard","类别","输入","vio","假设","load","拿到","int32","80","回到","分析","in","分成","数据","layout","ipu","自然","setup","识别","272","idx","分辨","网络","exp","fcos","elephant","过滤","这套","4","运行","信息","transpose","nv12","camera","hdmi","simplex","height","cp","line","接下来","pipeline","缩放","resized","left","中将","bench","hershey","..","预测","四个","每个","x2","算法","x1","}","donut","union","assert","env","ros2","cvtcolor","int","bboxes","位置","大小","detection","打印输出","来","planar","一般","图片","我们","30","因此","车辆","backpack","main","内","traffic","down","forward","初始","对象","reshape","source","\"","非常","is","&&","opt","skateboard","起来","stack","carrot","解析","255","set","bgr2nv12","image","7x7","训练","rgb2yuv","mess","个","小狗","0.3","知道","连续","c1","...","tensor","yuv420p","8","属性","图像格式","#","boxes1","score","argpartition","up","__","另外","format","nginx","种","1.0","行驶","cat","to","bin","arange","ind","运动","像头","根据","bird","w","file","thickness","bboxs","display","yolo","为例","如果","sign","过程","if","需要","else",",","后续","method","ones","从","看到","p","postprocess","参数","def","snowboard","原图","目标","libsrcampy","toilet","area","浏览器","系统","remote","应用","检测","bed","下角","distance","它会","open","lambda","webserver","结合","axis","左下角","concatenate","drier","'","并","dump","集","draw","缩小","执行","1","格子","plant","toaster","包围","array","properties","上","以及","train","boat","cup","坐标","场景","append","在","of","bgr","输出","-","128","重在","缩小成","launch","所在","那些","操作","threshold","pyeasy"],"title":"动态目标检测","title_tokens":["动态","检测","目标"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_1","text":"图像物体分类重在分析图像中存在的物体是什么，便于机器理解看到的环境信息，另外一种场景，机器不仅要识别某一物体，还要知道这个物体所在的位置，当物体在运动时，更要快速连续的跟踪，这就是目标检测，重在分析识别到物体在图像中的位置。","text_tokens":["还要","什么","物体","某一","是","时","看到","便于","理解","这个","当","知道","图像","分析","目标","连续","要","跟踪","就是","场景","一种","在","快速","位置","不仅","这","识别","检测","更要","中","环境","另外","。","机器","的","重在","信息","所在","运动","分类","，","到","存在"],"title":"动态目标检测","title_tokens":["动态","检测","目标"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_2","text":"假设我们要识别图像中这只狗的位置，以最为常用的YOLO算法为例，它会运用单个卷积神经网络(CNN) ，将图像分成网格，并预测每个网格的对象概率和边界框。 比如，对于这个图像，Yolo的CNN网络将输入的图片分割成7x7的网格，然后每个网格负责去检测那些中心点落在该格子内的目标，比如，小狗这个目标的中心点在左下角的网格中，那该网格就负责预测狗这个对象。 每个网格中将有多个边界框，在训练时，我们希望每个对象只有一个边界框，比如最终只有一个边界框把这只狗包起来。因此，我们根据哪个边界框与之前标注的重叠度最高，预测对象的位置和概率。 最终包围对象的边界框，就是识别的结果，使用四个描述符进行说明： 边界框的中心位置 边界框的高度 边界框的宽度 识别到对象所属的类 这样就完成了对目标的实时检测，拿到目标的信息之后，就可以进行后续的机器人行为控制了。 我们对目标检测系统运行速度的要求一般都比较高，可以实时处理视频流，比如车辆行驶的动态监测、自然环境中的目标识别，有着非常广泛的应用价值。 回到TogetherROS和旭日X3派的开发板，我们来看下这套软硬件结合的目标检测系统，效率如何。","text_tokens":["说明","有","中将","最为","多个","硬件","预测","四个","每个","该","算法","cnn","描述","来看","软硬件","分割","度","视频","和","使用","成","位置","只","一般","图片","我们","因此","车辆","内","最终","可以","神经网","实时处理","都","对象","以","网格","非常","卷积","中心","起来","宽度","7x7","去","这个","然后","那该","小狗","训练","实时","狗","图像","机器人","比较","要","高","、","运用","x3","结果","派","这","完成","速度","旭日","如何","希望","。","广泛","机器","行驶","标注","根据","，","togetherros","有着","处理","yolo","类","为例","就","(","中心点","神经","单个","这样","后续","左下","下","边界","之前","只有","要求","一个","效率","对于","目标","对","常用","之后","落","系统","动态","检测","应用","下角","高度","软硬","所属","它会","描述符","哪个","的","重叠","结合"," ","框","左下角","最高","并","了","到","比如","概率","行为","负责","格子","视频流","时","输入","包围","假设","拿到","自然环境","将","回到","开发","分成","：","就是","自然","在","包","控制","识别","网络","中","环境","与","开发板","这套","运行","信息","监测","神经网络","进行","价值","那些","把",")"],"title":"目标检测原理","title_tokens":["原理","检测","目标"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#mipi","text":"接下来，我们要利用MIPI相机，动态识别图像中各种各样的物体以及他们所在的位置，推理过程使用的是基于COCO数据集训练的80个类别，也就是可以识别80种常用的物体位置。","text_tokens":["推理","利用","物体","基于","过程","是","类别","训练","相机","个","也","80","图像","以及","他们","各种","要","使用","各种各样","数据","常用","就是","位置","识别","动态","中","。","我们","种","各样","mipi","的","接下","所在","coco","可以","，","集","下来","接下来"],"title":"MIPI相机目标检测","title_tokens":["mipi","目标","检测","相机"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_3","text":"$ cd /app/ai_inference/03_mipi_camera_sample/ $ python3 ./mipi_camera.py","text_tokens":["_","mipi","python3","03","py","sample","cd"," ","ai","camera","app",".","$","inference","/"],"title":"运行例程","title_tokens":["运行","例程"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_4","text":"mipi_camera.py： #!/usr/bin/env python3 import numpy as np import cv2 import colorsys # Camera API libs from hobot_vio import libsrcampy as srcampy from hobot_dnn import pyeasy_dnn as dnn # detection model class names def get_classes (): return np . array ([ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" , \"bus\" , \"train\" , \"truck\" , \"boat\" , \"traffic light\" , \"fire hydrant\" , \"stop sign\" , \"parking meter\" , \"bench\" , \"bird\" , \"cat\" , \"dog\" , \"horse\" , \"sheep\" , \"cow\" , \"elephant\" , \"bear\" , \"zebra\" , \"giraffe\" , \"backpack\" , \"umbrella\" , \"handbag\" , \"tie\" , \"suitcase\" , \"frisbee\" , \"skis\" , \"snowboard\" , \"sports ball\" , \"kite\" , \"baseball bat\" , \"baseball glove\" , \"skateboard\" , \"surfboard\" , \"tennis racket\" , \"bottle\" , \"wine glass\" , \"cup\" , \"fork\" , \"knife\" , \"spoon\" , \"bowl\" , \"banana\" , \"apple\" , \"sandwich\" , \"orange\" , \"broccoli\" , \"carrot\" , \"hot dog\" , \"pizza\" , \"donut\" , \"cake\" , \"chair\" , \"couch\" , \"potted plant\" , \"bed\" , \"dining table\" , \"toilet\" , \"tv\" , \"laptop\" , \"mouse\" , \"remote\" , \"keyboard\" , \"cell phone\" , \"microwave\" , \"oven\" , \"toaster\" , \"sink\" , \"refrigerator\" , \"book\" , \"clock\" , \"vase\" , \"scissors\" , \"teddy bear\" , \"hair drier\" , \"toothbrush\" ]) def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_RGB2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] def postprocess ( model_output , model_hw_shape , origin_image = None , origin_img_shape = None , score_threshold = 0.5 , nms_threshold = 0.6 , dump_image = False ): input_height = model_hw_shape [ 0 ] input_width = model_hw_shape [ 1 ] if origin_image is not None : origin_image_shape = origin_image . shape [ 0 : 2 ] else : origin_image_shape = origin_img_shape prediction_bbox = decode ( outputs = model_output , score_threshold = score_threshold , origin_shape = origin_image_shape , input_size = 512 ) prediction_bbox = nms ( prediction_bbox , iou_threshold = nms_threshold ) prediction_bbox = np . array ( prediction_bbox ) topk = min ( prediction_bbox . shape [ 0 ], 1000 ) if topk != 0 : idx = np . argpartition ( prediction_bbox [ ... , 4 ], - topk )[ - topk :] prediction_bbox = prediction_bbox [ idx ] if dump_image and origin_image is not None : draw_bboxs ( origin_image , prediction_bbox ) return prediction_bbox def draw_bboxs ( image , bboxes , gt_classes_index = None , classes = get_classes ()): \"\"\"draw the bboxes in the original image \"\"\" num_classes = len ( classes ) image_h , image_w , channel = image . shape hsv_tuples = [( 1.0 * x / num_classes , 1. , 1. ) for x in range ( num_classes )] colors = list ( map ( lambda x : colorsys . hsv_to_rgb ( * x ), hsv_tuples )) colors = list ( map ( lambda x : ( int ( x [ 0 ] * 255 ), int ( x [ 1 ] * 255 ), int ( x [ 2 ] * 255 )), colors )) fontScale = 0.5 bbox_thick = int ( 0.6 * ( image_h + image_w ) / 600 ) for i , bbox in enumerate ( bboxes ): coor = np . array ( bbox [: 4 ], dtype = np . int32 ) if gt_classes_index == None : class_index = int ( bbox [ 5 ]) score = bbox [ 4 ] else : class_index = gt_classes_index [ i ] score = 1 bbox_color = colors [ class_index ] c1 , c2 = ( coor [ 0 ], coor [ 1 ]), ( coor [ 2 ], coor [ 3 ]) cv2 . rectangle ( image , c1 , c2 , bbox_color , bbox_thick ) classes_name = classes [ class_index ] bbox_mess = ' %s : %.2f ' % ( classes_name , score ) t_size = cv2 . getTextSize ( bbox_mess , 0 , fontScale , thickness = bbox_thick // 2 )[ 0 ] cv2 . rectangle ( image , c1 , ( c1 [ 0 ] + t_size [ 0 ], c1 [ 1 ] - t_size [ 1 ] - 3 ), bbox_color , - 1 ) cv2 . putText ( image , bbox_mess , ( c1 [ 0 ], c1 [ 1 ] - 2 ), cv2 . FONT_HERSHEY_SIMPLEX , fontScale , ( 0 , 0 , 0 ), bbox_thick // 2 , lineType = cv2 . LINE_AA ) print ( \" {} is in the picture with confidence: {:.4f} , bbox: {} \" . format ( classes_name , score , coor )) # cv2.imwrite(\"demo.jpg\", image) return image def decode ( outputs , score_threshold , origin_shape , input_size = 512 ): def _distance2bbox ( points , distance ): x1 = points [ ... , 0 ] - distance [ ... , 0 ] y1 = points [ ... , 1 ] - distance [ ... , 1 ] x2 = points [ ... , 0 ] + distance [ ... , 2 ] y2 = points [ ... , 1 ] + distance [ ... , 3 ] return np . stack ([ x1 , y1 , x2 , y2 ], - 1 ) def _scores ( cls , ce ): cls = 1 / ( 1 + np . exp ( - cls )) ce = 1 / ( 1 + np . exp ( - ce )) return np . sqrt ( ce * cls ) def _bbox ( bbox , stride , origin_shape , input_size ): h , w = bbox . shape [ 1 : 3 ] yv , xv = np . meshgrid ( np . arange ( h ), np . arange ( w )) xy = ( np . stack (( yv , xv ), 2 ) + 0.5 ) * stride bbox = _distance2bbox ( xy , bbox ) # opencv read, shape[1] is w, shape[0] is h scale_w = origin_shape [ 1 ] / input_size scale_h = origin_shape [ 0 ] / input_size scale = max ( origin_shape [ 0 ], origin_shape [ 1 ]) / input_size # origin img is pad resized #bbox = bbox * scale # origin img is resized bbox = bbox * [ scale_w , scale_h , scale_w , scale_h ] return bbox bboxes = list () strides = [ 8 , 16 , 32 , 64 , 128 ] for i in range ( len ( strides )): cls = outputs [ i ] . buffer bbox = outputs [ i + 5 ] . buffer ce = outputs [ i + 10 ] . buffer scores = _scores ( cls , ce ) classes = np . argmax ( scores , axis =- 1 ) classes = np . reshape ( classes , [ - 1 , 1 ]) max_score = np . max ( scores , axis =- 1 ) max_score = np . reshape ( max_score , [ - 1 , 1 ]) bbox = _bbox ( bbox , strides [ i ], origin_shape , input_size ) bbox = np . reshape ( bbox , [ - 1 , 4 ]) pred_bbox = np . concatenate ([ bbox , max_score , classes ], axis = 1 ) index = pred_bbox [ ... , 4 ] > score_threshold pred_bbox = pred_bbox [ index ] bboxes . append ( pred_bbox ) return np . concatenate ( bboxes ) def nms ( bboxes , iou_threshold , sigma = 0.3 , method = 'nms' ): def bboxes_iou ( boxes1 , boxes2 ): boxes1 = np . array ( boxes1 ) boxes2 = np . array ( boxes2 ) boxes1_area = ( boxes1 [ ... , 2 ] - boxes1 [ ... , 0 ]) * \\ ( boxes1 [ ... , 3 ] - boxes1 [ ... , 1 ]) boxes2_area = ( boxes2 [ ... , 2 ] - boxes2 [ ... , 0 ]) * \\ ( boxes2 [ ... , 3 ] - boxes2 [ ... , 1 ]) left_up = np . maximum ( boxes1 [ ... , : 2 ], boxes2 [ ... , : 2 ]) right_down = np . minimum ( boxes1 [ ... , 2 :], boxes2 [ ... , 2 :]) inter_section = np . maximum ( right_down - left_up , 0.0 ) inter_area = inter_section [ ... , 0 ] * inter_section [ ... , 1 ] union_area = boxes1_area + boxes2_area - inter_area ious = np . maximum ( 1.0 * inter_area / union_area , np . finfo ( np . float32 ) . eps ) return ious classes_in_img = list ( set ( bboxes [:, 5 ])) best_bboxes = [] for cls in classes_in_img : cls_mask = ( bboxes [:, 5 ] == cls ) cls_bboxes = bboxes [ cls_mask ] while len ( cls_bboxes ) > 0 : max_ind = np . argmax ( cls_bboxes [:, 4 ]) best_bbox = cls_bboxes [ max_ind ] best_bboxes . append ( best_bbox ) cls_bboxes = np . concatenate ( [ cls_bboxes [: max_ind ], cls_bboxes [ max_ind + 1 :]]) iou = bboxes_iou ( best_bbox [ np . newaxis , : 4 ], cls_bboxes [:, : 4 ]) weight = np . ones (( len ( iou ),), dtype = np . float32 ) assert method in [ 'nms' , 'soft-nms' ] if method == 'nms' : iou_mask = iou > iou_threshold weight [ iou_mask ] = 0.0 if method == 'soft-nms' : weight = np . exp ( - ( 1.0 * iou ** 2 / sigma )) cls_bboxes [:, 4 ] = cls_bboxes [:, 4 ] * weight score_mask = cls_bboxes [:, 4 ] > 0. cls_bboxes = cls_bboxes [ score_mask ] return best_bboxes def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) if __name__ == '__main__' : models = dnn . load ( '../models/fcos_512x512_nv12.bin' ) # 打印输入 tensor 的属性 print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) # 打印输出 tensor 的属性 print ( len ( models [ 0 ] . outputs )) for output in models [ 0 ] . outputs : print_properties ( output . properties ) # 获取 Camera 句柄 cam = srcampy . Camera () # 打开 f37 摄像头，并且把输出突出缩小成算法模型的输入尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) # 打开 F37, 初始化视频 pipeline 0 ，设置帧率30fps，缩放图像为 512 x 512 cam . open_cam ( 0 , 1 , 30 , w , h ) # Get HDMI display object disp = srcampy . Display () # For the meaning of parameters, please refer to the relevant documents of HDMI display disp . display ( 0 , 1920 , 1080 ) input_shape = ( h , w ) while True : # 从相机获取分辨率为 512x512 的nv12格式的图像数据， 参数 2 代表从硬件模块IPU中获取 img = cam . get_img ( 2 , 512 , 512 ) # 把图像数据转成 numpy 数据类型 img = np . frombuffer ( img , dtype = np . uint8 ) # 模型推理 outputs = models [ 0 ] . forward ( img ) # 对算法结果进行过滤，去掉执行度低的检测框，计算检测框的交并比去除冗余框，把检测框的坐标还原到原图位置上 prediction_bbox = postprocess ( outputs , input_shape , origin_img_shape = ( 1080 , 1920 )) # 从新获取一张图像，大小缩放成与显示器的分辨率一样的 1920 x 1080, 并且转换成 bgr格式，方便进行绘图操作 origin_image = cam . get_img ( 2 , 1920 , 1080 ) origin_nv12 = np . frombuffer ( origin_image , dtype = np . uint8 ) . reshape ( 1620 , 1920 ) origin_bgr = cv2 . cvtColor ( origin_nv12 , cv2 . COLOR_YUV420SP2BGR ) # 把算法运行后得到的物体检测框绘制到图像上 box_bgr = draw_bboxs ( origin_bgr , prediction_bbox ) # X3 的HDMI输出模块的输入图像格式需要是NV12的，所以需要先把bgr格式转成NV12 box_nv12 = bgr2nv12_opencv ( box_bgr ) # 把 NV12 格式的图像输出给显示器 disp . set_img ( box_nv12 . tobytes ()) cam . close_cam ()","text_tokens":["xv","gt","name","uv","nms","names",">","所以","refer","cls","type","成","ball","scale","sqrt","opencv","设置","font","hobot","enumerate","hw","显示器","buffer","stop","dining","coor","32","meter","句柄","hot","512","0","packed","data","0.6","去掉","bear","baseball","dog","relevant","umbrella","c2","api","car","结果","section","orange","/","iou","转换","，","bat","kite","range","knife","物体","hsv","一样","格式","dtype","zeros","size","mouse","输出模块","colors","yuv420sp2bgr","模型","origin","phone","打印","比","后","strides","suitcase","y2","person","的","width","1920","banana","truck","bowl","绘制","1620","尺寸","close","couch","zebra","bicycle","picture","read","len","chair","meshgrid","minimum","hydrant","disp","maximum","一张","t","documents","中","rgb","5","摄像","10","进行","分辨率","points","wine","oven","1000",")","0.5","yv","py","boxes2","class","numpy","fork","512x512","相机","max","with","giraffe","num","!","distance2bbox","打开","度","rectangle","视频","color","best","tennis","horse","计算","potted","y","eps","mipi","16","print","parameters","channel","imwrite","=","2f","img","初始化","率","为","绘图","glass","scissors","bottle","return","jpg","h","小成","apple","帧","类型","airplane","+","先","soft","aa","finfo","models","x3","classes","motorcycle","outputs","while","并且","0.0","index","突出","frombuffer","nchw","book","推理","(","sheep","*","light","2","colorsys","libs","sandwich","shape","换成","dnn","prediction","600","s","对","import","摄像头","object","confidence","srcampy","float32","teddy","min","meaning","sink","框","bus","1080","mask","i420","fire","parking","right","inter","linetype","x","去除","like","python3","cow","i","得到","pred","puttext","model","sports","：","argmax","list","y1","与","冗余","frisbee","usr","for","把","surfboard","显示","get","glove","硬件","handbag","还原","map","模块","%.","demo","tv","thick","cam","{","np","64","获取","from","output","_","hair","stride","xy","skis","tie","%","box","f37","[","none","topk","original","broccoli","转","转成","cell","代表","图像","ious","inputs","scores","pad","decode","gettextsize","microwave","true","方便","4f","weight","table","fontscale","clock","input","toothbrush","spoon","newaxis","sigma",":","pizza","是","交","cv2","laptop","转换成","please","the","as","cake","tobytes","uint8","vase","bbox","辨率","数据类型","\\","not","给","tuples"," ","ce","新",".","到","and","racket","refrigerator","30fps","false","]","pro","3","低","keyboard","load","vio","输入","int32","in","数据","layout","ipu","idx","分辨","exp","fcos","elephant","过滤","4","transpose","运行","nv12","camera","hdmi","simplex","height","line","pipeline","缩放","resized","left","bench","hershey","..","x2","算法","x1","}","donut","union","assert","env","cvtcolor","int","bboxes","位置","大小","detection","打印输出","planar","30","backpack","main","traffic","down","forward","初始","reshape","\"","is","skateboard","stack","carrot","255","set","bgr2nv12","image","rgb2yuv","0.3","mess","c1","...","tensor","yuv420p","8","属性","图像格式","#","boxes1","score","argpartition","up","__","format","1.0","ind","cat","to","bin","arange","像头","bird","w","thickness","bboxs","display","sign","if","需要","else",",","method","ones","从","postprocess","参数","def","snowboard","原图","libsrcampy","toilet","area","remote","检测","bed","distance","open","lambda","axis","concatenate","drier","'","并","dump","draw","缩小","执行","1","plant","toaster","array","properties","上","train","boat","cup","坐标","append","of","bgr","输出","-","128","缩小成","操作","threshold","pyeasy"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#usb","text":"如果大家手上没有MIPI接口的相机，使用USB相机也可以实现同样的功能。","text_tokens":["mipi","功能","使用","的","相机","usb","接口","如果","也","可以","大家","，","。","实现","手上","没有","同样"],"title":"USB相机目标检测","title_tokens":["usb","目标","检测","相机"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_5","text":"$ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py","text_tokens":["_","fcos","python3","usb","py","sample","cd"," ","ai","camera","02","app",".","$","inference","/"],"title":"运行例程","title_tokens":["运行","例程"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_6","text":"大家如果没有HDMI显示器的话，也没有问题，刚才的例程，也可以这样来运行，我们通过统一网络环境中的浏览器就可以动态看到结果啦。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/fcosworkconfig.json image_width: = 480 image_height: = 272","text_tokens":["bash","py","启动","config","浏览","runtime","ros2","通过","websocket","node","来","$","我们","的话","显示器","tros","sbin","_","hobot","例程","问题","=","可以","json","source","&&","opt","image","+","cd","刚才","结果","#","。","/","nginx","share","，","file","就","480","如果",":","这样","benchmark","没有","看到","p","也","dnn","浏览器","服务","动态","fcosworkconfig","lib","的","webserver","width","example"," ","啦",".","统一","x","大家","chmod","setup","272","网络","webservice","环境","中","-","launch","运行","hdmi","cp","height","r","显示"],"title":"动态目标检测","title_tokens":["动态","检测","目标"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/","text":"人体检测与跟踪 不知道大家有没有玩过类似XBOX的体感游戏机，上边会有一个相机，动态识别我们的动作，比如跳舞、打球，是不是还挺神奇的，这就是人体检测与跟踪的应用。 TogetherROS中也集成了一套类似的算法，可以识别人体、人头、人脸、人手等一系列关键点，我们来体验一下。 编程开发方法 先来看一个人体识别的基础应用，我们驱动相机后，实时采样视觉信息，然后再通过检测算法，识别每一幅图片中人体位置，并把识别的结果保存成一张图片，便于我们查看。 运行例程 # 下载例程代码（与之前课程下载的代码一致） $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build # 终端1，运行相机 $ source /opt/tros/setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p out_format: = nv12 -p image_width: = 960 -p image_height: = 544 -p video_device: = F37 # 终端2，运行例程 $ source /opt/tros/setup.bash $ source ./install/local_setup.bash $ mkdir -p config && cp -r /opt/tros/lib/dnn_node_example/config/multitask_body_kps_960x544.hbm config/ $ ros2 run cpp_dnn_demo cpp_dnn_demo --ros-args -p image: = config/test.jpg 代码解析 #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" #include \"dnn_node/dnn_node.h\" #include \"dnn_node/util/image_proc.h\" #include \"sensor_msgs/msg/image.hpp\" using namespace hobot :: dnn_node ; class BodyDetNode : public DnnNode { public : BodyDetNode ( const std :: string & node_name = \"body_det\" , const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : DnnNode ( node_name , options ) { // 获取模型输入图片的尺寸，包括图片的宽model_input_width_和高model_input_height ，用于模型前处理 if ( Init () != 0 || GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ) < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Node init fail!\" ); } //创建图片消息的subscriber，订阅的topic为”/image_raw”，消息类型为sensor_msgs::msg::Image。订阅到的图片用于算法模型推理 ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( \"/image_raw\" , 10 , std :: bind ( & BodyDetNode :: FeedImg , this , std :: placeholders :: _1 )); } ~ BodyDetNode () override {} void FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr msg ); protected : int SetNodePara () override { if ( ! dnn_node_para_ptr_ ) return -1 ; //指定模型推理使用的模型文件名和模型名 dnn_node_para_ptr_ -> model_file = \"config/multitask_body_kps_960x544.hbm\" ; dnn_node_para_ptr_ -> model_name = \"multitask_body_kps_960x544\" ; //指定模型输出的人体框的解析方法，其中人体框输出索引为box_output_index_ //使用的解析方法为hobot_dnn预定义的检测框解析方法FaceHandDetectionOutputParser。 std :: shared_ptr < OutputParser > box_out_parser = std :: make_shared < FaceHandDetectionOutputParser > (); dnn_node_para_ptr_ -> output_parsers_ . emplace_back ( std :: make_pair ( box_output_index_ , box_out_parser ) ); return 0 ; } int PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) override ; private : int model_input_width_ = -1 ; int model_input_height_ = -1 ; const int32_t box_output_index_ = 1 ; sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg_ ; rclcpp :: Subscription < sensor_msgs :: msg :: Image >:: ConstSharedPtr ros_img_subscription_ = nullptr ; }; //输出模型结果，并将结果渲染到图片后保存在本地 int BodyDetNode::PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( node_output -> outputs . empty () || static_cast < int32_t > ( node_output -> outputs . size ()) < box_output_index_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid outputs\" ); return -1 ; } auto * filter2d_result = dynamic_cast < Filter2DResult *> ( node_output -> outputs [ box_output_index_ ]. get ()); if ( ! filter2d_result ) return -1 ; std :: stringstream ss ; ss << \"img encoding: \" << img_msg_ -> encoding << \", stamp: \" << img_msg_ -> header . stamp . sec << \",\" << img_msg_ -> header . stamp . nanosec << \" \\n out box size: \" << filter2d_result -> boxes . size () << \" \\n \" ; cv :: Mat nv12 ( img_msg_ -> height * 3 / 2 , img_msg_ -> width , CV_8UC1 , const_cast < char *> ( reinterpret_cast < const char *> ( img_msg_ -> data . data ()))); cv :: Mat bgr ; cv :: cvtColor ( nv12 , bgr , CV_YUV2BGR_NV12 ); for ( auto & rect : filter2d_result -> boxes ) { ss << \"rect: \" << rect . left << \" \" << rect . top << \" \" << rect . right << \" \" << rect . bottom << \" \\n \" ; // 图片渲染 cv :: rectangle ( bgr , cv :: Point ( rect . left , rect . top ), cv :: Point ( rect . right , rect . bottom ), cv :: Scalar ( 255 , 0 , 0 ), 3 ); } std :: string result_image = \"render_\" + std :: to_string ( img_msg_ -> header . stamp . sec ) + \".\" + std :: to_string ( img_msg_ -> header . stamp . nanosec ) + \".jpg\" ; ss << \"Render img to file: \" << result_image ; RCLCPP_INFO ( rclcpp :: get_logger ( \"example\" ), \"%s\" , ss . str (). c_str ()); cv :: imwrite ( result_image , bgr ); return 0 ; } //将nv12格式的图片转成模型输入的数据类型DNNInput后，输入给推理任务 void BodyDetNode::FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg ) return ; if ( \"nv12\" != img_msg -> encoding ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Only support nv12 img encoding!\" ); return ; } img_msg_ = img_msg ; // 创建模型输入数据 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { ImageProc :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ )}; // 运行推理，DnnNode基类中定义并实现的启动推理接口。 Run ( inputs ); } int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < BodyDetNode > ()); rclcpp :: shutdown (); return 0 ; } 人体检测与跟踪 结果保存成图片，虽然便于保留数据，但是不利于动态看到效果，我们不如再来实时动态效果显示。 在这个案例中，我们在之前人体识别的基础上，进一步实现了人体部位的识别和骨骼、眼神等关键点的识别，比如头、脸、身体、手掌、眼睛。 识别的结果同样是通过浏览器来进行查看。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . $ ros2 launch /opt/tros/share/mono2d_body_detection/launch/hobot_mono2d_body_detection.launch.py","text_tokens":["back","feedimg","bash","name","索引",">","argv","config","kps","<","argc","集成","nanosec","vector","websocket","成","hobot","sbin","例程","install","private","0","data","core","sensor","开发方法","实时","案例","n","ws","、","本地","filter2d","结果","const","等","驱动","眼神","/","hpp","reinterpret","share","不如","，","处理","sec","point","没有","格式","不","采样","也","size","基础","public","关键点","不利","视觉","一幅","shared","神奇","动态","模型","基类","后","保存","虽然","的","width","det","了","filter2dresult","cpp","build","尺寸","比如","protected","大家","emplace","接口","将","开发","|","一张","类似","就是","还","imgproc","t","一致","webservice","中","指定","test","imgcodecs","setnodepara","（","10","进行","r",")","spin","py","启动","class","来看","相机","浏览","!","通过","imageproc","rectangle","和","跟踪","课程","$","tros","mipi","骨骼","--","dynamic","imwrite","=","可以","img","利于","为","return","jpg","人脸","auto","h","游戏机","void","关键","类型","这个","然后","+","先","cd","动态效果","高","头","）","facehanddetectionoutputparser","这","outputs","跳舞","。","实现","部位","有没有","创建","index","togetherros","info","yuv2bgr","推理","(","*","2","玩过","outputparser","人体","之前","一个","dnn","s","para","一系","会","nullptr","args","example","框","名","再","right","src","dnnnode","body","string","constsharedptr","std","预定","placeholders","x","run","人手","c","tutorials","model","chmod","同样","上边","每","device","&","编程","不利于","与","体验","result","ss","for","把","显示","get","dnnnodeoutput","游戏","有","header","encoding","”","demo","parser","使用","out","其中","node","cam","{","手掌","获取","output","shutdown","_","mono2d","%","box","f37","[","转","error","效果","终端","代码","multitask","查看","inputs","subscriber","opencv2","身体","进一步","input","logger","打球",":","~","是","subscription","保留","消息","方法","便于","是不是","服务","parsers","数据类型","make","下载","init","\\","给","empty","lib","一套"," ",";",".","colcon","一步","到","invalid","用于","util","]","3","guyuehome","输入","userdata","int32","create","任务","文件","数据","setup","识别","git","msg","挺","运行","信息","一下","nv12","cp","height","bind","ros","left","char","算法","}","动作","8uc1","https","ros2","com","前","cvtcolor","int","位置","detection","来","gitee","图片","xbox","我们","hbm","main","一系列","msgs","this","top","support","bodydetnode","渲染","source","\"","眼睛","&&","opt","scalar","960x544","解析","255","义","image","proc","知道","但是","stamp","rect","#","nodeoptions","format","boxes","定义","nginx","to","video","人头","getmodelinputsize","file","str","mat","cast","pair","raw","if","体感",",","宽","看到","p","postprocess","系列","dnninput","include","浏览器","订阅","应用","检测","topic","using","clone","webserver","不是","local","文件名","ptr","rclcpp","并","stringstream","1","getnv12pyramidfromnv12img","960","bottom","namespace","上","544","cv","dev","在","bgr","mkdir","static","options","override","输出","包括","-","only","launch","render","脸","fail"],"title":"人体检测与跟踪","title_tokens":["与","跟踪","人体","检测"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_1","text":"不知道大家有没有玩过类似XBOX的体感游戏机，上边会有一个相机，动态识别我们的动作，比如跳舞、打球，是不是还挺神奇的，这就是人体检测与跟踪的应用。 TogetherROS中也集成了一套类似的算法，可以识别人体、人头、人脸、人手等一系列关键点，我们来体验一下。","text_tokens":["比如","游戏","打球","有","人脸","游戏机","体感","大家","没有","玩过","算法","关键","不","系列","人体","人手","相机","动作","是不是","也","一个","知道","集成","跟踪","关键点","、","上边","类似","就是","一系","还","这","识别","神奇","动态","检测","应用","等","会","来","中","跳舞","与","。","xbox","我们","体验","一系列","的","不是","挺","人头","一下","一套","有没有"," ","可以","，","了","togetherros"],"title":"人体检测与跟踪","title_tokens":["与","跟踪","人体","检测"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_2","text":"先来看一个人体识别的基础应用，我们驱动相机后，实时采样视觉信息，然后再通过检测算法，识别每一幅图片中人体位置，并把识别的结果保存成一张图片，便于我们查看。","text_tokens":["再","算法","便于","人体","来看","相机","采样","然后","先","实时","一个","基础","通过","查看","一张","每","成","位置","结果","视觉","一幅","识别","应用","驱动","检测","后","图片","中","。","保存","我们","的","信息","把","，","并"],"title":"编程开发方法","title_tokens":["开发方法","编程","开发","方法"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_3","text":"# 下载例程代码（与之前课程下载的代码一致） $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build # 终端1，运行相机 $ source /opt/tros/setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p out_format: = nv12 -p image_width: = 960 -p image_height: = 544 -p video_device: = F37 # 终端2，运行例程 $ source /opt/tros/setup.bash $ source ./install/local_setup.bash $ mkdir -p config && cp -r /opt/tros/lib/dnn_node_example/config/multitask_body_kps_960x544.hbm config/ $ ros2 run cpp_dnn_demo cpp_dnn_demo --ros-args -p image: = config/test.jpg","text_tokens":["bash","ros","config","kps","相机","https","ros2","com","demo","out","node","cam","gitee","课程","$","hbm","tros","_","mipi","例程","--","install","=","source","f37","jpg","&&","opt","960x544","image","终端","代码","cd","multitask","ws","）","#","format","/","video","，","togetherros",":","2","p","之前","dnn","下载","clone","args","lib","的","width","local","example"," ",".","colcon","cpp","build","1","src","body","guyuehome","run","userdata","960","tutorials","544","dev","device","setup","mkdir","一致","git","与","-","test","（","运行","nv12","cp","height","r"],"title":"运行例程","title_tokens":["运行","例程"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_4","text":"#include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" #include \"dnn_node/dnn_node.h\" #include \"dnn_node/util/image_proc.h\" #include \"sensor_msgs/msg/image.hpp\" using namespace hobot :: dnn_node ; class BodyDetNode : public DnnNode { public : BodyDetNode ( const std :: string & node_name = \"body_det\" , const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : DnnNode ( node_name , options ) { // 获取模型输入图片的尺寸，包括图片的宽model_input_width_和高model_input_height ，用于模型前处理 if ( Init () != 0 || GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ) < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Node init fail!\" ); } //创建图片消息的subscriber，订阅的topic为”/image_raw”，消息类型为sensor_msgs::msg::Image。订阅到的图片用于算法模型推理 ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( \"/image_raw\" , 10 , std :: bind ( & BodyDetNode :: FeedImg , this , std :: placeholders :: _1 )); } ~ BodyDetNode () override {} void FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr msg ); protected : int SetNodePara () override { if ( ! dnn_node_para_ptr_ ) return -1 ; //指定模型推理使用的模型文件名和模型名 dnn_node_para_ptr_ -> model_file = \"config/multitask_body_kps_960x544.hbm\" ; dnn_node_para_ptr_ -> model_name = \"multitask_body_kps_960x544\" ; //指定模型输出的人体框的解析方法，其中人体框输出索引为box_output_index_ //使用的解析方法为hobot_dnn预定义的检测框解析方法FaceHandDetectionOutputParser。 std :: shared_ptr < OutputParser > box_out_parser = std :: make_shared < FaceHandDetectionOutputParser > (); dnn_node_para_ptr_ -> output_parsers_ . emplace_back ( std :: make_pair ( box_output_index_ , box_out_parser ) ); return 0 ; } int PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) override ; private : int model_input_width_ = -1 ; int model_input_height_ = -1 ; const int32_t box_output_index_ = 1 ; sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg_ ; rclcpp :: Subscription < sensor_msgs :: msg :: Image >:: ConstSharedPtr ros_img_subscription_ = nullptr ; }; //输出模型结果，并将结果渲染到图片后保存在本地 int BodyDetNode::PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( node_output -> outputs . empty () || static_cast < int32_t > ( node_output -> outputs . size ()) < box_output_index_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid outputs\" ); return -1 ; } auto * filter2d_result = dynamic_cast < Filter2DResult *> ( node_output -> outputs [ box_output_index_ ]. get ()); if ( ! filter2d_result ) return -1 ; std :: stringstream ss ; ss << \"img encoding: \" << img_msg_ -> encoding << \", stamp: \" << img_msg_ -> header . stamp . sec << \",\" << img_msg_ -> header . stamp . nanosec << \" \\n out box size: \" << filter2d_result -> boxes . size () << \" \\n \" ; cv :: Mat nv12 ( img_msg_ -> height * 3 / 2 , img_msg_ -> width , CV_8UC1 , const_cast < char *> ( reinterpret_cast < const char *> ( img_msg_ -> data . data ()))); cv :: Mat bgr ; cv :: cvtColor ( nv12 , bgr , CV_YUV2BGR_NV12 ); for ( auto & rect : filter2d_result -> boxes ) { ss << \"rect: \" << rect . left << \" \" << rect . top << \" \" << rect . right << \" \" << rect . bottom << \" \\n \" ; // 图片渲染 cv :: rectangle ( bgr , cv :: Point ( rect . left , rect . top ), cv :: Point ( rect . right , rect . bottom ), cv :: Scalar ( 255 , 0 , 0 ), 3 ); } std :: string result_image = \"render_\" + std :: to_string ( img_msg_ -> header . stamp . sec ) + \".\" + std :: to_string ( img_msg_ -> header . stamp . nanosec ) + \".jpg\" ; ss << \"Render img to file: \" << result_image ; RCLCPP_INFO ( rclcpp :: get_logger ( \"example\" ), \"%s\" , ss . str (). c_str ()); cv :: imwrite ( result_image , bgr ); return 0 ; } //将nv12格式的图片转成模型输入的数据类型DNNInput后，输入给推理任务 void BodyDetNode::FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg ) return ; if ( \"nv12\" != img_msg -> encoding ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Only support nv12 img encoding!\" ); return ; } img_msg_ = img_msg ; // 创建模型输入数据 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { ImageProc :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ )}; // 运行推理，DnnNode基类中定义并实现的启动推理接口。 Run ( inputs ); } int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < BodyDetNode > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["back","bind","feedimg","dnnnodeoutput","spin","name","ros","left","header","启动","索引",">","char","算法","argv","config","class","}","kps","8uc1","encoding","<","!","”","imageproc","argc","rectangle","nanosec","和","前","int","使用","out","parser","cvtcolor","vector","成","其中","node","{","图片","获取","hbm","output","hobot","shutdown","_","main","msgs","this","dynamic","imwrite","=","top","bodydetnode","%","support","private","img","box","渲染","为","[","\"","0","return","jpg","scalar","data","core","auto","h","转","void","sensor","error","960x544","类型","解析","255","义","image","proc","+","n","multitask","stamp","高","inputs","subscriber","opencv2","本地","facehanddetectionoutputparser","filter2d","结果","rect","const","#","nodeoptions","outputs","。","/","boxes","定义","实现","hpp","reinterpret","to","index","创建","input","getmodelinputsize","，","file","处理","info","sec","str","mat","cast","logger","推理","pair","(","yuv2bgr","*","point",":","raw","~","2","if",",","宽","subscription","消息","方法","格式","postprocess","outputparser","人体","size","dnninput","dnn","public","s","para","include","订阅","parsers","shared","模型","数据类型","检测","init","make","topic","基类","nullptr","后","\\","using","保存","给","empty","的","width","det","example","文件名","ptr"," ",";","框",".","rclcpp","名","并","filter2dresult","到","invalid","用于","util","stringstream","right","尺寸","1","dnnnode","]","body","string","protected","constsharedptr","std","预定","placeholders","3","getnv12pyramidfromnv12img","emplace","run","输入","bottom","int32","接口","namespace","将","c","model","create","任务","文件","cv","|","数据","在","imgproc","bgr","static","t","options","override","&","输出","包括","中","指定","-","imgcodecs","msg","setnodepara","result","only","运行","ss","nv12","10","for","height","render","fail",")","get"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_5","text":"结果保存成图片，虽然便于保留数据，但是不利于动态看到效果，我们不如再来实时动态效果显示。 在这个案例中，我们在之前人体识别的基础上，进一步实现了人体部位的识别和骨骼、眼神等关键点的识别，比如头、脸、身体、手掌、眼睛。 识别的结果同样是通过浏览器来进行查看。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . $ ros2 launch /opt/tros/share/mono2d_body_detection/launch/hobot_mono2d_body_detection.launch.py","text_tokens":["bash","py","启动","config","浏览","ros2","通过","和","websocket","成","detection","来","图片","手掌","$","我们","hobot","tros","sbin","_","骨骼","例程","mono2d","利于","source","眼睛","&&","opt","关键","这个","效果","+","cd","实时","案例","动态效果","查看","但是","、","头","结果","#","等","眼神","部位","。","实现","身体","/","nginx","进一步","share","不如","，","是","保留","看到","p","便于","之前","人体","基础","关键点","浏览器","服务","不利","动态","保存","虽然","lib","的","webserver"," ",".","一步","了","再","比如","body","x","上","chmod","同样","数据","在","setup","识别","webservice","不利于","中","-","launch","运行","进行","cp","r","脸","显示"],"title":"人体检测与跟踪","title_tokens":["与","跟踪","人体","检测"]}]}