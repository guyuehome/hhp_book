{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。 本教程将会以旭日X3派为平台，介绍地平线机器人开发平台的使用原理与方法。 教程链接汇总 旭日X3派开发板使用手册： https://developer.horizon.ai/api/v1/fileData/documents_pi/index.html 机器人开发平台使用手册： https://developer.horizon.ai/api/v1/fileData/TogetherROS/index.html 视频课程： https://class.guyuehome.com/all/10284445/19617453 图文教程： https://hhp.guyuehome.com/ 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/92 博客泡圈： https://www.guyuehome.com/","text_tokens":["documents","hhp","图文","问答","地平线","链接","引言","课程","感知","算法","系统","机器人","手册","信息","api","包括","正式","数据","计算","开发","推出","index","汇总","horizon","_","大脑","驱动","给","在","方法","派","多","各种","操作系统","x3","月","泡圈","年","developer","程式","v1","介绍","：","博客","all","等","以","层面","、","。","旭日","www","复杂","6","https","视频","togetherros","filedata","硬件","教程","工具","操作","动作","带来",":","非常复杂","传感器","ai","guyuehome","是","开发板","使用","为","html","的","非常","各种各样","电机","等等","部分","使用手册","92","本","传感","平台","id","circledetail","class","作为","pi","各样","与",".","机器","行业","全新","原理","一个","，","更","主控","软件","com","2022","10284445","bubble","地平","执行","进行"," ","将会","19617453","感器","/","帮助","环境","一代","规控"],"title":"**引言**","title_tokens":["*","引言"]},{"location":"#_1","text":"机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。 本教程将会以旭日X3派为平台，介绍地平线机器人开发平台的使用原理与方法。","text_tokens":["地平线","感知","算法","系统","机器人","信息","包括","正式","数据","计算","开发","推出","大脑","驱动","给","在","方法","派","多","各种","操作系统","x3","月","年","程式","介绍","：","等","以","层面","、","。","旭日","复杂","6","硬件","教程","工具","操作","动作","带来","非常复杂","传感器","是","使用","为","的","非常","各种各样","电机","等等","部分","本","传感","平台","作为","各样","与","机器","行业","全新","原理","一个","，","更","主控","软件","2022","地平","执行","进行"," ","将会","感器","帮助","环境","一代","规控"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"旭日X3派开发板使用手册： https://developer.horizon.ai/api/v1/fileData/documents_pi/index.html 机器人开发平台使用手册： https://developer.horizon.ai/api/v1/fileData/TogetherROS/index.html 视频课程： https://class.guyuehome.com/all/10284445/19617453 图文教程： https://hhp.guyuehome.com/ 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/92 博客泡圈： https://www.guyuehome.com/","text_tokens":["派","filedata","documents","教程",".","hhp","机器","图文","问答",":","课程","x3","泡圈","ai","手册","机器人","guyuehome","developer","api","开发板","v1","使用","html","com","10284445","bubble","：","博客","all","开发","index","使用手册","horizon"," ","92","19617453","_","togetherros","平台","旭日","/","www","id","https","circledetail","class","视频","pi"],"title":"教程链接汇总","title_tokens":["教程","链接","汇总"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["提供","通过","人才培养","镜像","）","课程","责任","机器人","依法","如需","社区","面向","+","包括","声明者","拥有","微控","开发","学","居","将","面向未来","线上","培养","华语","不得","有权","高校","超过","课件","小时","创新","合作","版权","未经","brand","致力于","120","精锋","高质","交流学习","生态","均","许可","违反","年","万人","合法","任何","未来","企业","古月","抄录","法律","等","致力","集","学习","武汉","努力","赋能","实践","、","捆绑","。","www","源码","人才","产品","一体","传播","交流","视频","和","法律责任","《","有限","1000","所有","请","追究","内容","限于","ai","guyuehome","是","知名","》","使用","为","2011","单位","授权","网站","的","ros","书面","畅销","出版","销售","仅限","@","修改","至今","对本","科技","本","平台","用户","追究其","高质量","构建","作品","累积","不","创建","质量","建立","与",".","机器","模式","众多","，","学习者","或","地区","明者","个人","联系","com","复制","究其","但","（","及","上","校企","图书","公司","进行","万字","优质"," ","有限公司","上述","声明","其它","被"],"title":"关于我们","title_tokens":["我们","关于"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["提供","通过","人才培养","）","课程","机器人","社区","面向","+","开发","居","面向未来","线上","培养","华语","高校","超过","小时","创新","合作","致力于","120","高质","交流学习","生态","年","万人","未来","企业","古月","等","致力","集","学习","努力","赋能","实践","、","。","www","人才","一体","交流","视频","《","1000","内容","ai","guyuehome","是","知名","》","为","2011","的","ros","畅销","出版","至今","平台","用户","高质量","构建","累积","创建","质量","建立","与",".","机器","模式","众多","，","学习者","地区","com","（","及","校企","图书","万字","优质"," "],"title":"学机器人，上古月居","title_tokens":["古月","上","机器人","学","居","机器","，"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["镜像","课程","责任","依法","如需","包括","声明者","拥有","微控","居","将","不得","有权","课件","版权","未经","brand","精锋","均","许可","违反","合法","任何","古月","抄录","法律","等","学习","武汉","、","捆绑","。","源码","产品","传播","和","视频","法律责任","有限","所有","请","追究","限于","guyuehome","使用","为","单位","授权","网站","的","书面","销售","仅限","@","修改","对本","科技","本","用户","追究其","作品","不","与",".","，","或","明者","个人","联系","究其","复制","com","但","公司","进行"," ","有限公司","上述","声明","其它","被"],"title":"版权声明","title_tokens":["版权","声明"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/","text":"智能机器人发展与现状 智能机器人正在改变着我们的生活，想象这样一种场景。 也许不知不觉的某一天，我们就会发现类似这样的机器人会真实出现在生活当中。 科技的发展日新月异，智能机器人也突飞猛进，伴随机器人发展而生的机器人操作系统，也是机器人重要的发展动力之一。 智能机器人举例 提到智能机器人，大家脑海里会映射出什么样的情景呢？ 是不是会有很多科幻电影中变形金刚、大白机器人、星球大战等场景呢？ 智能机器人这个概念，只是一个科幻词汇么？当然不是的，其实在我们身边，已经有越来越多智能机器人出现，我们来看看他们都在哪里？ 扫地机器人 先来看一个大家最熟悉的一个类型——扫地机器人。现在的扫地机器人，除了可以完成扫地、拖地这样一些基本功能之外，还搭载了激光雷达、相机、红外等十几种传感器。 一个全新的扫地机器人虽然是第一次来到你家，但是它可能用到 5 分到 10 分钟时间，很快就可以通过它的传感器对你的家庭环境了如指掌，也就是把实际的家庭环境做成了一张地图，这样他就会知道哪里是卧室，哪里是餐厅，哪里是厨房，不同的区域用多大的风力，用多大的水量来去清扫最为合适，它都会智能化地来做判断。 除此之外，它还得知道怎么样去躲避各种障碍物，比如说家里面的宠物、地上摆放的插线板，各种各样的杂物等等。 所以看似非常小的一个扫地机器人，其实已经是一个很智能化的家用设备了，正在潜移默化地改变着我们的生活。 自动化仓储 第二个案例，虽然大部分人在生活中不会直接接触，但却和每一个人息息相关，那就是自动化仓储。 这是京东某个实际部署运营的一套自动化的仓库，在里面可以看到各种各样的机器人，比如工业机械臂、移动机器人等等，这套立体仓库当中大量的货架也是自动化的，这就是一个典型的机器人应用场景。 之前有一个关于京东的新闻报道，里边讲到，从我们下单那刻开始，到商品分拣出来放到快递员手上，只需要20分钟。比如我们要买个手机，下单付款，20分钟之后，这个手机已经从这么庞大的仓库中顺利找到，并且完成了包装、打标、分配等一系列工序。这样，我们在绝大部分城市，基本都可以体验到下单之后，当天或者隔天收货的体验，为什么它可以做到如此高效，就是因为背后这一套由机器人组成的自动化系统，借助大数据的分析，甚至可以做到在你下单之前，平台就知道你将要买什么东西。比如说你会按照一个月的频率买米买面，那平台就可以预测到上个月你买的米应该快吃完了，然后就会在距离你家最近的一个仓库里面备货。 当你下单之后，这袋米可能半个小时送到你手上了。 自动驾驶 第三个案例，那就是当今最为热门的技术之一——自动驾驶。 自动驾驶汽车也是典型的移动机器人系统，为了保证绝对安全的驾驶过程，汽车上装配了非常多的传感器，以及极为复杂的控制算法。 视频中我们看到的是华为自动驾驶系统在实际路面上测试的效果，自动驾驶汽车通过多个相机、雷达、超声波，实时构建周围环境的三维信息，不仅可以动态识别路面上的行人车辆、车道线、交通指示灯等，还可以安全完成超车、会车、跟车、转向等重要功能，同时对突发状况也可以及时处理，比如躲避突然出现的车辆、礼让行人等，最终自动行驶入库，把我们安全顺利的送到目的地。 虽然自动驾驶相关的技术和法律法规还在不断完善中，但是相信有一天我们每个人都可以体验自动驾驶的乐趣，而且这一天不会太远。 智能机器人发展 机器人的发展横跨几十年，经历了三个重要时期。 2000年前，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 2015年之后，智能机器人市场迅速爆发，到2025年，国内人工智能市场有望达到1164亿元，而作为人工智能重要载体的机器人，市场更会达到1463亿元。 行业的快速发展，必将带动大量专业人才的需求，人才缺口也将逐年扩大，2025年，预计国内机器人行业的人才缺口将超过450万，人工智能方面的缺口更会达到1000万。 面对如此严峻的人才需求，国内各高校从2016年起，陆续开设机器人和人工智能专业，为人才的供给提供有力保障。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角。 机器人操作系统 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是机器人操作系统。 ROS的诞生 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣、做饭、收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法：既然自己做不到，那为什么不联合所有人一起干呢？如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在这几个图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面，却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS怀揣“提高机器人软件复用率”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 ROS的特点 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。","text_tokens":["远","映射","台球","声波","摆放","今日","差不多","于","第一次","大部分","参考","80","新鲜事","软件系统","呢","机器人","也","—","发状","个","第二","发布","激光","分拣","设备","立体","人","拉开序幕","极为","半个","数据","做出","目标","真实","图中","出现","物体","近几年","发展","这套","分","保证","这款","因为","立体仓库","井喷","繁荣","机制","到","判断","日常","几种","条","必将","高校","程度","助推","宽松","某","功能","青年","几个","基本","潜移","分析","维基","这是","线","他们","下单","低","相关","时期","肩膀","增长","革命","运营","起来","最","上个","叠","排名","重要","全球","报道","十几","生态系","人形","之内","熟悉","不过","绝对","2015","有力","跑","路面","日新月异","移动","数字","释放","有望","时间","同一","产品","电气","源码","人才","友好","情景","系列","周围","当天","付款","车辆","分享","从中","agv","此","教程","才","不仅","后期","四大","实现","回答","教器","命令","缩短","新","货架","绝大","华为","团队","一些","着","大学","自己","工业生产","提出","也许","为","剪头发","激光雷达","人数","迅速","拖地","就是","装配","车道","次数","手机","快递","而","等等","部分","wiki","250","从","只能","至今","packages","上市","应该","目的","传感","通信","据库","里面","分钟","聊天","上图","杂物","做到","不知不觉","ros1",".","得到","类型","机器","行业","全新","模块化","数据库","浏览量","一个","嵌入式","150","地","快","特性","乐趣","软件","个人","商业","造","某个","但","精致","效率","做法","算机","人才需求","一起","执行","找到","需要","完成","讨论","多万","开源","里会","2007","案例","独立","大","供给","答案","沉淀","帮助","高效","依然","简单","检测","目的地","windows","脑海","普遍","智慧","提供","2","关注","衣服","之","围绕","领域","大战","计算机","躲避","十几种","已有","资金","方式","法律法规","是不是","基本功","当","社区","很","逐渐","借助","浪潮","多项","自动","正式","有","框架","创意","宠物","更加","迅猛","收货","实验室","在生活中","过程","？","总称","怎么样","律法","处理","生产","却","预测","用","及时处理","外观","不知","查看","看到","最近","驱动","星球大战","什么","代","除此","如果","来看","正如","中","不要","人工智能","达到","主角","媒体","京东","有志","看看","不断","许可","联合","几十","基本功能","真的","事情","陪","越来","毛巾","左右","零部件","不是","嵌入","做成","高","买面","采购","万人","任何","餐厅","重新","快速","几年","之外","地上","突发","等","了","插","维基百","视觉","一系列","或者","整合","讲","驾驶","由","带动","拉开","部署","分配","国家","金刚","想象","组成","控制算法","时代","款","有没有","因","丰富","亿元","许可证","上去","由示","各项","；","缺口","潜移默化","自身","它","每","操作","1000","一套","安全","所有","无论","情况","手上","这一波","苹果","不断完善","传感器","这","雷达","上边","礼让","服务","很多","要","头发","页面","应用软件","周围环境","资源","网站","的","一大","一大步","轰动","指示灯","预计","并","深知","多媒体","变形","太远","动力","自主","智能化","电机","这样","没有","更为","年前","面对","城市","家用","为例","智能","构建","当今","加","记录","局部","一种","圈","一步","如此","上个月","通常","以及","伺服电机","市场","斯坦福大学","不到","最高","此时","设计","完全","呈","万左右","一群","我们","完","收拾","你","容易","身影","热点","第三个","1164","无疑"," ","针对","特点","接触","诞生","其实","业生","俗称","基本上","四足","方面","只是","福大","环境","缺少","别人","统统","多媒体系统","c","障碍","同样","最为","行人","十年","就","频率","最佳","元素","逐年","把","开始","一家","课程","一张","感知","算法","系统","大家","说明","除了","已经","电影","比如","这么","保障","吃","劳动力","开发","除此之外","自动化","所有人","学术","完善","将","转向","车","可为","他","提到","问题","增长速度","变形金刚","超车","明智","超过","a","一切","2016","实时","具备","息息相关","超声波","多","第三","各种","员","操作系统","三个","爆发","更会","看似","来到","新闻报道","状","进步","当时","充足","送到","打","减速机","控制","年","复用","开发工具","频繁","最终","么","用到","两个","里边","以","障碍物","实际","时至今日","减速","类似","电路","哪里","买","肯定","、","备货","。","商业化","org","同理","第一","pr2","和","视频","现状","5","风力","词汇","15","应用","发现","有限","推进","这里","陆续","工具","随着","二个","工业","及时","零","ros2","活跃度","科幻电影","清晰","是","地图","用多大","商品","同时","搭载","包装","其中","代表","集合","专业","热门","法规","效果","ros","非常","买个","都","买米","新鲜","专业人才","关于","起","出来","清扫","庞大","甚至","用户","状况","如何","相机","得","想法","工序","各样","绝大部分","超声","站","访问","扫地","新闻","标准","测试","而且","强悍","度","活动","，","国内","送餐","怎么","各","场景","生态系统","速度","大量","伺服","浏览","东西","涉及","突飞猛进","存储","虽然","人工","四项","整理","用于","广泛","维基百科","还","柔性","水量","统计","上","动态","推动","正在","先","但是","卧室","乐意","40","根据","总而言之","万","家庭环境","robot","洗衣","提高","狗","开设","感器","以上","活跃","熨烫","成果","所以","下来","之前","为什么","论坛","米","控制器","猛进","其他","可以","通过","不多","无聊","出","向前走","大白","制造","问答","一个月","比如说","区域","研究","曲线","怀揣","打标","信息","之一","载体","仿生","长远","驱动器","一款","算是","小","隔天","计算","研发","入库","需求","尝试","可能","index","既然","操控","”","而生","发表","这个","不觉","技术","放到","尽量","25","linux","小时","包","工厂","1463","给","在","不同","移动机器人","2000","初期","那刻","红外","还是","做","生态","体验","月","按照","臂","会","星球","家庭","向前","结晶","访问量","之后","做饭","改变","后","：","生活","顺利","光靠","这些","“","时候","多个","法律","100","20","开发者","层面","严峻","默化","总体","经历","劳动","b","地域","实验","什么样","然后","合适","一系","知道","不想","水下","木头","得以","斯坦福","模块","概念","交通","家","复杂","新增","复合","横跨","不会","本身","越来越","将要","无论是","了如指掌","突发状况","汽车","当中","来讲","全人类","discourse","动作","前夜","动机","背后","要求","ai","大步","指示","张图","只要","使用","全球化","基于","跨平台","450","线板","闻报","给出","趋势","对于","各种各样","扩大","率","性能","最后","2025","机械","第二个","成为","科技","行驶","平台","突然","仓库","三维","你家","几十年","去","来","身边","作为","以叠","玩耍","当然","10","直接","不","促使","轮子","距离","与","对","太","全人","伴随","相信","索引","棒","下载","突飞","核心","那","很快","更","跟车","主要","科幻","仓储","新月","体系","一天","典型","为了","巨人","大部","引擎","地来","只","不断丰富","personal","公司","现在","并且","而言","举例","answers","支持","人类","厨房","识别","大有可为","这袋","原型","一次","序幕","百科","说干就干","部件","干","有人","被","思考","每个"],"title":"智能机器人发展与现状","title_tokens":["机器人","与","智能","机器","发展","现状"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_1","text":"智能机器人正在改变着我们的生活，想象这样一种场景。 也许不知不觉的某一天，我们就会发现类似这样的机器人会真实出现在生活当中。 科技的发展日新月异，智能机器人也突飞猛进，伴随机器人发展而生的机器人操作系统，也是机器人重要的发展动力之一。","text_tokens":["不知不觉","发现","就","当中","伴随","操作系统","机器","操作","，","突飞","场景","着","机器人","也","系统","会","新月","是","之一","一天","重要","突飞猛进","我们","也许","的","改变","生活","真实","正在","动力","出现","发展","日新月异","这样","而生"," ","不觉","类似","科技","不知","智能","想象","。","某","一种","在","猛进"],"title":"智能机器人发展与现状","title_tokens":["机器人","与","智能","机器","发展","现状"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_2","text":"提到智能机器人，大家脑海里会映射出什么样的情景呢？ 是不是会有很多科幻电影中变形金刚、大白机器人、星球大战等场景呢？ 智能机器人这个概念，只是一个科幻词汇么？当然不是的，其实在我们身边，已经有越来越多智能机器人出现，我们来看看他们都在哪里？","text_tokens":["词汇","映射","多","大战","机器","他们","出","中","大白","，","一个","是不是","科幻电影","看看","场景","呢","机器人","科幻","会","星球","很多","越来","大家","不是","我们","已经","的","电影","有","都","么","变形","等","出现","？"," ","这个","什么样","里会","其实","提到","哪里","、","金刚","智能","变形金刚","概念","只是","脑海","星球大战","来","身边","在","越来越","情景","什么","当然"],"title":"智能机器人举例","title_tokens":["举例","智能","机器人","机器"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_3","text":"先来看一个大家最熟悉的一个类型——扫地机器人。现在的扫地机器人，除了可以完成扫地、拖地这样一些基本功能之外，还搭载了激光雷达、相机、红外等十几种传感器。 一个全新的扫地机器人虽然是第一次来到你家，但是它可能用到 5 分到 10 分钟时间，很快就可以通过它的传感器对你的家庭环境了如指掌，也就是把实际的家庭环境做成了一张地图，这样他就会知道哪里是卧室，哪里是餐厅，哪里是厨房，不同的区域用多大的风力，用多大的水量来去清扫最为合适，它都会智能化地来做判断。 除此之外，它还得知道怎么样去躲避各种障碍物，比如说家里面的宠物、地上摆放的插线板，各种各样的杂物等等。 所以看似非常小的一个扫地机器人，其实已经是一个很智能化的家用设备了，正在潜移默化地改变着我们的生活。","text_tokens":["可以","通过","就","躲避","十几种","摆放","把","第一次","基本功","比如说","一张","区域","机器人","也","—","激光","很","大家","设备","除了","已经","比如","小","除此之外","宠物","可能","分","怎么样","他","到","判断","几种","功能","不同","基本","除此","潜移","各种","红外","来看","看似","做","来到","最","会","家庭","基本功能","做成","十几","餐厅","改变","之外","地上","生活","熟悉","用到","等","了","插","障碍物","实际","默化","合适","时间","知道","哪里","、","。","家","第一","了如指掌","5","风力","潜移默化","它","传感器","雷达","一些","着","是","地图","用多大","搭载","的","激光雷达","拖地","就是","非常","都","线板","各种各样","智能化","等等","这样","家用","清扫","传感","智能","里面","你家","分钟","去","来","相机","得","杂物","10","各样","扫地","对","类型","机器","全新","一个","，","很快","地","怎么","虽然","我们","你","地来","还","水量","先","正在","现在","但是","卧室","完成"," ","厨房","家庭环境","其实","感器","一次","环境","所以","障碍","最为"],"title":"扫地机器人","title_tokens":["机器","机器人","扫地"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_4","text":"第二个案例，虽然大部分人在生活中不会直接接触，但却和每一个人息息相关，那就是自动化仓储。 这是京东某个实际部署运营的一套自动化的仓库，在里面可以看到各种各样的机器人，比如工业机械臂、移动机器人等等，这套立体仓库当中大量的货架也是自动化的，这就是一个典型的机器人应用场景。 之前有一个关于京东的新闻报道，里边讲到，从我们下单那刻开始，到商品分拣出来放到快递员手上，只需要20分钟。比如我们要买个手机，下单付款，20分钟之后，这个手机已经从这么庞大的仓库中顺利找到，并且完成了包装、打标、分配等一系列工序。这样，我们在绝大部分城市，基本都可以体验到下单之后，当天或者隔天收货的体验，为什么它可以做到如此高效，就是因为背后这一套由机器人组成的自动化系统，借助大数据的分析，甚至可以做到在你下单之前，平台就知道你将要买什么东西。比如说你会按照一个月的频率买米买面，那平台就可以预测到上个月你买的米应该快吃完了，然后就会在距离你家最近的一个仓库里面备货。 当你下单之后，这袋米可能半个小时送到你手上了。","text_tokens":["可以","就","频率","开始","一个月","大部分","当","比如说","系统","机器人","也","打标","第二","分拣","立体","人","已经","借助","比如","这么","自动","半个","有","隔天","数据","吃","自动化","可能","收货","在生活中","这套","这个","却","预测","因为","立体仓库","放到","到","看到","小时","最近","在","移动机器人","什么","息息相关","基本","分析","这是","各种","员","那刻","中","下单","相关","京东","新闻报道","体验","运营","按照","送到","臂","会","上个","报道","之后","买面","生活","顺利","等","了","里边","20","实际","一系列","或者","移动","讲","然后","由","部署","一系","分配","知道","买","、","备货","。","组成","不会","和","将要","系列","当天","付款","应用","当中","它","每","一套","货架","二个","工业","手上","动机","绝大","这","背后","是","商品","要","包装","的","就是","买个","都","买米","手机","快递","闻报","各种各样","等等","部分","关于","这样","从","机械","城市","应该","第二个","出来","庞大","甚至","平台","里面","仓库","分钟","你家","直接","工序","各样","绝大部分","做到","如此","距离","新闻","上个月","机器","，","一个","那","快","场景","仓储","大量","东西","典型","虽然","大部","我们","完","某个","你","但","只","并且","找到","需要","完成"," ","接触","这袋","案例","大","高效","之前","为什么","米"],"title":"自动化仓储","title_tokens":["自动化","自动","仓储"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_5","text":"第三个案例，那就是当今最为热门的技术之一——自动驾驶。 自动驾驶汽车也是典型的移动机器人系统，为了保证绝对安全的驾驶过程，汽车上装配了非常多的传感器，以及极为复杂的控制算法。 视频中我们看到的是华为自动驾驶系统在实际路面上测试的效果，自动驾驶汽车通过多个相机、雷达、超声波，实时构建周围环境的三维信息，不仅可以动态识别路面上的行人车辆、车道线、交通指示灯等，还可以安全完成超车、会车、跟车、转向等重要功能，同时对突发状况也可以及时处理，比如躲避突然出现的车辆、礼让行人等，最终自动行驶入库，把我们安全顺利的送到目的地。 虽然自动驾驶相关的技术和法律法规还在不断完善中，但是相信有一天我们每个人都可以体验自动驾驶的乐趣，而且这一天不会太远。","text_tokens":["可以","通过","躲避","声波","把","法律法规","算法","系统","机器人","也","—","发状","信息","之一","人","极为","比如","自动","有","入库","出现","完善","转向","过程","保证","车","技术","律法","处理","及时处理","超车","看到","功能","在","实时","移动机器人","超声波","多","第三","三个","线","中","相关","体验","送到","不断","会","控制","重要","最终","突发","顺利","绝对","多个","了","等","法律","实际","路面","移动","驾驶","、","。","控制算法","交通","复杂","不会","视频","和","周围","车辆","突发状况","汽车","不仅","安全","及时","不断完善","动机","传感器","华为","雷达","这","礼让","指示","是","同时","周围环境","的","热门","法规","效果","指示灯","就是","装配","非常","车道","都","太远","行驶","目的","传感","状况","突然","构建","三维","当今","相机","超声","对","测试","相信","机器","而且","以及","，","那","跟车","乐趣","一天","典型","为了","我们","虽然","还","上","动态","但是","第三个","最为","完成"," ","识别","案例","感器","环境","目的地","行人","每个"],"title":"自动驾驶","title_tokens":["驾驶","自动"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_6","text":"机器人的发展横跨几十年，经历了三个重要时期。 2000年前，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 2015年之后，智能机器人市场迅速爆发，到2025年，国内人工智能市场有望达到1164亿元，而作为人工智能重要载体的机器人，市场更会达到1463亿元。 行业的快速发展，必将带动大量专业人才的需求，人才缺口也将逐年扩大，2025年，预计国内机器人行业的人才缺口将超过450万，人工智能方面的缺口更会达到1000万。 面对如此严峻的人才需求，国内各高校从2016年起，陆续开设机器人和人工智能专业，为人才的供给提供有力保障。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角。","text_tokens":["十年","提供","关注","最佳","计算机","逐年","于","课程","感知","系统","机器人","也","载体","之一","仿生","驱动器","设备","逐渐","拉开序幕","自动","正式","保障","计算","劳动力","开发","需求","更加","出现","将","发展","操控","过程","技术","生产","井喷","到","必将","高校","超过","驱动","工厂","1463","2016","2000","多","这是","三个","爆发","操作系统","更会","人工智能","达到","时期","主角","状","按照","不断","减速机","几十","控制","年","家庭","重要","之后","高","后","快速","2015","不过","等","了","有力","层面","严峻","经历","劳动","视觉","数字","释放","减速","驾驶","拉开","有望","带动","、","。","电气","时代","人才","横跨","丰富","和","亿元","由示","agv","应用","汽车","有限","缺口","1000","教器","命令","陆续","操作","随着","工业","动作","前夜","传感器","这","要求","ai","服务","工业生产","是","提出","为","专业","的","迅速","预计","并","450","就是","专业人才","自主","动力","而","扩大","智能化","电机","没有","2025","年前","只能","面对","从","起","成为","传感","智能","几十年","作为","局部","如此","对","太","类型","机器","行业","伺服电机","，","国内","市场","送餐","更","此时","主要","各","完全","呈","伺服","大量","软件","我们","人工","热点","不断丰富","算机","人才需求","而言","执行","但是","1164","最为"," ","人类","万","俗称","业生","感器","大","狗","四足","方面","开设","供给","帮助","序幕","依然","缺少","环境","检测","控制器","思考"],"title":"智能机器人发展","title_tokens":["发展","智能","机器人","机器"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_7","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是机器人操作系统。","text_tokens":["可以","操作系统","机器","操作","，","一个","那","斯坦福大学","有志","团队","青年","系统","机器人","大学","一群","是","重要","越来","不是","人","已经","的","就是","非常","上","给出","开发","尝试","对于","层面","完成","或者","这个","针对","技术","独立","问题","答案","福大","斯坦福","智能","。","如何","复杂","高效","越来越"],"title":"机器人操作系统","title_tokens":["系统","机器人","操作系统","机器","操作"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros","text":"2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣、做饭、收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法：既然自己做不到，那为什么不联合所有人一起干呢？如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在这几个图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面，却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS怀揣“提高机器人软件复用率”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。","text_tokens":["可以","2","衣服","台球","就","领域","无聊","今日","向前走","资金","第一次","软件系统","呢","机器人","个","也","—","研究","系统","怀揣","社区","很","大家","一款","已经","框架","有","做出","目标","开发","图中","所有人","可能","物体","实验室","学术","既然","发展","”","而生","？","这个","这款","外观","处理","用","却","因为","繁荣","条","看到","功能","一切","在","什么","代","几个","移动机器人","多","如果","初期","各种","还是","他们","中","做","低","当时","充足","打","臂","联合","年","叠","真的","事情","陪","毛巾","重要","向前","零部件","复用","做饭","：","快速","光靠","人形","之内","“","时候","等","了","100","层面","时至今日","一系列","实验","移动","类似","一系","电路","不想","同一","水下","肯定","、","木头","。","组成","得以","款","家","复杂","第一","有没有","复合","横跨","pr2","因","和","无论是","系列","5","分享","从中","应用","才","后期","实现","一套","无论","所有","苹果","动机","这","自己","一些","大步","服务","是","很多","要","只要","头发","应用软件","其中","基于","专业","剪头发","的","一大","一大步","轰动","ros","就是","并","都","深知","手机","率","性能","这样","没有","最后","至今","机械","成为","出来","甚至","为例","平台","分钟","普遍","聊天","以叠","圈","玩耍","想法","不","促使","标准","机器","而且","强悍","，","一个","那","很快","不到","更","此时","设计","软件","个人","涉及","我们","虽然","收拾","整理","用于","广泛","你","还","容易","精致","柔性","效率","身影","personal","只","上","推动","一起","但是","找到","完成"," ","robot","提高","2007","诞生","洗衣","独立","原型","熨烫","一次","帮助","说干就干","部件","别人","所以","统统","干","为什么","有人","同样"],"title":"ROS的诞生","title_tokens":["的","ros","诞生"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros_1","text":"提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["可以","远","之","围绕","就","领域","制造","向前走","已有","一家","把","系统","机器人","也","社区","长远","大家","多项","比如","有","创意","目标","开发","将","发展","这个","总称","技术","机制","到","尽量","明智","a","linux","宽松","给","功能","在","具备","多","各种","他们","正如","不要","中","做","肩膀","生态","媒体","进步","许可","会","向前","开发工具","复用","结晶","越来","全球","嵌入","不是","做成","采购","重新","这些","模块","生态系","：","了","以","跑","b","整合","由","时间","、","商业化","。","组成","产品","同理","家","人才","新增","友好","本身","和","越来越","许可证","上去","此","分享","汽车","应用","；","四大","推进","实现","自身","来讲","工具","这里","全人类","缩短","新","零","工业","ros2","这","自己","着","同时","是","很多","使用","代表","全球化","集合","的","跨平台","ros","就是","并","非常","都","多媒体","各种各样","率","智能化","部分","最后","这样","从","上市","平台","智能","通信","来","直接","一步","做到","站","ros1","轮子","各样","全人","对","促使","通常","机器","模块化","，","一个","核心","那","更","嵌入式","特性","设计","生态系统","完全","软件","体系","商业","巨人","造","我们","引擎","还","做法","上","公司","一起","支持"," ","特点","人类","提高","开源","案例","成果","沉淀","简单","多媒体系统","别人","下来","c","windows","被","智慧"],"title":"ROS的特点","title_tokens":["特点","的","ros"]},{"location":"TogetherROS/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros_2","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。","text_tokens":["可以","通过","就","不多","差不多","元素","问答","方式","大部分","参考","80","新鲜事","曲线","呢","机器人","发布","社区","很","大家","说明","浪潮","已经","人","算是","比如","有","数据","研发","开发","index","近几年","迅猛","发展","发表","？","可为","问题","助推","日常","增长速度","到","程度","25","查看","看到","包","给","功能","在","几个","什么","基本","不同","多","维基","这是","各种","来看","中","增长","相关","革命","月","起来","排名","频繁","重要","左右","全球","越来","统计","访问量","万人","任何","几年","：","快速","这些","等","了","两个","20","开发者","维基百","总体","地域","整合","国家","、","。","源码","org","和","越来越","各项","应用","；","教程","15","回答","这里","discourse","新","每","情况","活跃度","这一波","清晰","这","绝大","上边","张图","是","提出","很多","页面","使用","代表","资源","其中","网站","的","ros","人数","就是","非常","次数","都","新鲜","趋势","动力","wiki","关于","等等","部分","更为","250","packages","从","据库","用户","加","记录","作为","上图","不","绝大部分","访问","索引","棒",".","得到","机器","度","活动","数据库","浏览量","，","核心","一个","150","下载","快","最高","万左右","速度","浏览","我们","大部","四项","维基百科","上","正在","现在","而言","answers","乐意","40","根据","讨论","最为","多万","总而言之","无疑"," ","大有可为","万","其实","以上","基本上","大","活跃","百科","论坛","其他","存储","每个"],"title":"ROS的社区","title_tokens":["的","ros","社区"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/","text":"智能机器人开发平台介绍 机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 以操作系统为例，应用最为广泛的ROS系统在不断迭代，不过在智能时代洪流的冲击下，还是涌现出一些问题。 ROS的一些问题 ROS逐渐成为标准，大量机器人应用被贡献到社区，虽然提高了代码的通用性，但却难以发挥硬件的完整性能； 大量应用聚焦在机器人运动控制与定位导航等基础功能，智能化的应用较少； 在软件资源格外丰富的社区中，还缺少系统化的内容，帮助用户快速实现相关资源的复用。 很多开发者都在魔改ROS，去适配自己的机器人，所以机器人的研发成本非常高。从机械选型、系统定制、算法开发到数据闭环，每个过程都要付出高昂的成本，在这么高昂的成本下，做机器人是非常困难的一件事情。 在算法层面，机器人算法仍处于早期阶段，很多感知算法还停留在理论阶段，无法服务与实际场景，机器学习发展迅速，不过对于很多开发者来讲，数据的采集、标注、训练都是一个庞大的工作量，部署运行不仅十分困难，还要消耗大量的算力成本。 智能机器人涉及的领域和方法较多，目前整体的学习成本偏高，想要实现智能化应用的难度就更高，问题的出现，也带来了机遇与挑战。 地平线机器人开发平台 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。这套机器人开发平台的目的是打造软硬协同、极致优化、丰富易用的机器人开发组件与生态，由图中这几个部分组成，我们一一来看下。 平台的底层主要依托于地平线AIOT边缘AI芯片——旭日3和旭日5，内部集成了地平线最先进的伯努利2.0架构的AI 引擎，可提供 5TOPS 以上的等效算力。如此强大的算力支持，保证了智能机器人开发的基础条件。 芯片是基础建设，在此之上更重要的是一系列软件设施，正如我们电脑上的windows和linux，一套优质的操作系统，是上层应用软件开发的必要条件，TogetherROS在ROS系统的基础上，进行了大量的改良和优化，可以为开发者提供高效实用的系统环境。 在此之上，平台还会提供大量的机器人参考算法和应用功能示例，比如常用的建图、定位、导航，还有智能机器人中至关重要的智能化功能，比如一些基础算法，图像分类、图像分割、目标检测等，还有应用功能，人脸检测、人体跟踪、骨骼点检测、手势识别、语音处理等等，提供基于大量数据训练的模型，借助底层AI引擎的支持，可以快速、稳定的实现各种各样的智能应用。 同时平台还会配套一系列加速机器人开发的工具链，比如代码编写工具、系统调试工具、数据标注和训练工具等。 古月居和地平线也会共同打造机器人开发者社区，持续分享技术内容，沉淀更多开发者的智慧，更多机器人产业中的合作伙伴也会陆续加入，共同打造最为丰富的机器人开发者套件，建设智能机器人开发的生态圈。 在这个机器人开发平台之中，最为重要的就是TogetherROS系统了，起到了承上启下、连接各项功能的作用，我们将通过一系列课程为大家深入浅出的介绍。 TogetherROS的特点 在ROS系统庞大社区资源的基础上，结合智能机器人的发展和产业需求，TogetherROS应运而生。 TogetherROS有三个核心特点： 开源兼容，秉承开源精神的力量 TogetherROS和ROS系统一样，也是一套完全开源的系统，所有开发者都可以继续二次开发，接口方面和ROS2完全兼容，ROS2原有的功能也都可以继续复用，已有的机器人代码可以十分便利的迁移过来。 极致性能优化 相比ROS的通用化，TogetherROS更多考虑的是如何充分挖掘底层硬件的性能，比如提高数据传输的效率、增强人工智能处理的能力，在后续的使用案例中，大家可以充分感受到这一点。 丰富易用的软硬件组件 比如各种各样的传感器和开发套件，再比如算法模块、感知应用、机器人功能，还有提高开发效率的各种编程、部署工具。 TogetherROS系统框架 具体展开来看，TogetherROS的系统框架如图所示，其中深蓝色部分为地平线优化、新增的模块，其他是目前复用ROS2中的模块： 在系统通信的中间件部分，保留了ROS2中原本针对不同DDS的通信框架，与ROS2 foxy版本的接口完全兼容，方便复用ROS丰富工具包进行原型验证，在此之上增加了“zero-copy” 零拷贝 的通信机制，降低大数据传输时延和系统资源消耗。 在组件功能部分，TogetherROS提供“hobot CV” 视觉加速库 ，软硬件协同，可以提升CV算子性能、降低系统资源消耗；针对AI模型的推理，封装了“hobot_dnn” 功能包，可以调用底层芯片的AI引擎，简化板端AI开发与部署，释放BPU的算力。可以支持丰富的机器人传感器型号，比如相机、雷达、IMU、GPS等，节省驱动开发的时间，可以聚焦在机器人应用开发上。 除此之外，TogetherROS还会提供丰富的 软件调试和性能调优工具 ，方便用户定位问题和优化系统性能，在具体的行业应用中，还支持最小化和模块化的剪裁，利于部署在资源受限的嵌入式产品中。 总之，TogetherROS出于ROS，又不止于ROS，ROS原有的功能依然继承，重点是借助硬件能力，充分优化系统的性能，提高机器人开发的效率。","text_tokens":["于","点","参考","机器人","也","—","等效","深入浅出","阶段","包括","人体","数据","保留","链","目标","上层","出现","推出","偏高","发展","内部","这套","保证","建设","_","机制","到","必要","建图","功能","几个","分割","重点","加速","工具包","边缘","相关","人脸","最","停留","重要","介绍","难以","古月","不过","学习","之中","释放","时间","不止","集成","产品","简化","系列","加入","节省","贡献","此","硬件","分享","cv","不仅","实现","方便","一些","自己","少","能力","为","迅速","就是","等等","部分","从","目的","传感","通信","感受","算力","时延","最小化","机器","之上","行业","全新","想要","模块化","一个","嵌入式","主控","软件","仍","2022","迭代","但","效率","zero","秉承","增加","执行","2.0","调优","板端","开源","伙伴","案例","成本","大","沉淀","帮助","下","高效","依然","检测","接口","windows","依托","一代","智慧","规控","提供","便利","剪裁","标注","领域","挑战","已有","生态圈","社区","完整","逐渐","借助","正式","框架","有","算子","由图","条件","配套","居","再","过程","合作伙伴","定制","拷贝","处理","却","格外","大脑","定位","驱动","基础","除此","后续","一一","来看","正如","中","人工智能","不断","迁移","事情","挖掘","嵌入","高","采集","快速","之外","等","了","视觉","一系列","魔","部署","dds","相比","组成","时代","运行","5tops","6","底层","丰富","涌现","深蓝","各项","；","最小","系统资源","操作","涌现出","一套","所有","带来","伯努利","传感器","内容","训练","这","雷达","服务","很多","要","应用软件","型号","资源","结合","图像","的","提升","二次开发","智能化","电机","定位问题","受限","选型","为例","3","智能","难度","具体","至关","如此","aiot","洪流","一件","完全","示例","通用","我们","设施","gps","优质"," ","特点","针对","系统化","闭环","蓝色","方面","环境","缺少","编程","中间","改良","最为","芯片","-","就","模型","原有","十分","先进","课程","感知","算法","系统","早期","分类","dnn","传输","深入","大家","hobot","比如","这么","二次","foxy","开发","付出","除此之外","机遇","将","imu","问题","继续","冲击","困难","多","各种","打造","操作系统","三个","骨骼","常用","控制","年","复用","出于","以","数据传输","版本","实际","发挥","、","。","旭日","现出","极致","中间件","和","又","5","应用","还要","工具","陆续","零","一样","ros2","非常复杂","所示","过来","深蓝色","增强","是","同时","其中","ros","非常","都","语音","应运","力量","整体","验证","十分困难","必要条件","封装","消耗","适配","处于","庞大","用户","如何","承上启下","相机","聚焦","各样","标准","运动","编写","，","还会","场景","考虑","大量","强大","涉及","虽然","人工","广泛","电脑","改","还","持续","工作量","上","地平","进行","手势","提高","原本","以上","感器","调试","软件资源","所以","展开","其他","如图所示","可以","通过","高昂","地平线","信息","通用性","至关重要","易用","计算","研发","充分","需求","”","这个","目前","应运而生","技术","连接","总之","精神","社区资源","代码","linux","推理","包","给","合作","在","方法","起到","不同","组件","通用化","兼容","还是","做","生态","月","导航","架构","实用","套件","库","会","程式","跟踪","：","模块","可","“","开发者","层面","利于","一系","软硬","软硬件","复杂","定位导航","无法","新增","togetherros","继承","来讲","动作","较","ai","copy","使用","基于","对于","各种各样","性能","机械","产业","共同","bpu","成为","平台","降低","去","作为","稳定","与","还有","理论","调用","据传","核心","工作","更","主要","引擎","作用","一点","优化","协同","支持","识别","原型","被","每个"],"title":"智能机器人开发平台介绍","title_tokens":["机器人","开发","平台","智能","机器","介绍"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#_1","text":"机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 以操作系统为例，应用最为广泛的ROS系统在不断迭代，不过在智能时代洪流的冲击下，还是涌现出一些问题。","text_tokens":["各样","硬件","各种","应用","操作系统","还是","机器","操作","涌现出","一个","，","动作","洪流","非常复杂","主控","传感器","感知","算法","系统","机器人","不断","一些","是","软件","信息","程式","广泛","迭代","包括","的","ros","：","非常","数据","计算","不过","等","以","执行","各种各样","进行","层面","电机","等等","部分"," ","问题","感器","、","传感","平台","。","大脑","为例","智能","复杂","环境","时代","冲击","驱动","下","现出","作为","在","涌现","规控","最为"],"title":"智能机器人开发平台介绍","title_tokens":["机器人","开发","平台","智能","机器","介绍"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#ros","text":"ROS逐渐成为标准，大量机器人应用被贡献到社区，虽然提高了代码的通用性，但却难以发挥硬件的完整性能； 大量应用聚焦在机器人运动控制与定位导航等基础功能，智能化的应用较少； 在软件资源格外丰富的社区中，还缺少系统化的内容，帮助用户快速实现相关资源的复用。 很多开发者都在魔改ROS，去适配自己的机器人，所以机器人的研发成本非常高。从机械选型、系统定制、算法开发到数据闭环，每个过程都要付出高昂的成本，在这么高昂的成本下，做机器人是非常困难的一件事情。 在算法层面，机器人算法仍处于早期阶段，很多感知算法还停留在理论阶段，无法服务与实际场景，机器学习发展迅速，不过对于很多开发者来讲，数据的采集、标注、训练都是一个庞大的工作量，部署运行不仅十分困难，还要消耗大量的算力成本。 智能机器人涉及的领域和方法较多，目前整体的学习成本偏高，想要实现智能化应用的难度就更高，问题的出现，也带来了机遇与挑战。","text_tokens":["高昂","标注","领域","就","挑战","十分","感知","算法","系统","机器人","也","早期","社区","通用性","完整","逐渐","阶段","这么","数据","研发","开发","付出","出现","偏高","机遇","发展","过程","定制","目前","却","格外","问题","到","代码","定位","功能","在","方法","基础","困难","多","中","做","相关","导航","停留","控制","复用","事情","高","采集","难以","快速","不过","等","了","开发者","层面","实际","学习","发挥","魔","部署","、","。","运行","定位导航","无法","丰富","和","贡献","硬件","应用","；","不仅","还要","实现","来讲","带来","较","内容","训练","自己","少","是","服务","很多","要","资源","的","ros","迅速","非常","都","整体","十分困难","对于","智能化","性能","消耗","适配","从","机械","处于","选型","成为","庞大","用户","智能","难度","去","算力","聚焦","与","标准","理论","机器","运动","想要","，","一个","工作","更","一件","场景","大量","通用","软件","仍","涉及","虽然","改","还","但","工作量"," ","提高","系统化","闭环","成本","帮助","下","软件资源","缺少","所以","被","每个"],"title":"ROS的一些问题","title_tokens":["的","问题","ros","一些"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#_2","text":"2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。这套机器人开发平台的目的是打造软硬协同、极致优化、丰富易用的机器人开发组件与生态，由图中这几个部分组成，我们一一来看下。 平台的底层主要依托于地平线AIOT边缘AI芯片——旭日3和旭日5，内部集成了地平线最先进的伯努利2.0架构的AI 引擎，可提供 5TOPS 以上的等效算力。如此强大的算力支持，保证了智能机器人开发的基础条件。 芯片是基础建设，在此之上更重要的是一系列软件设施，正如我们电脑上的windows和linux，一套优质的操作系统，是上层应用软件开发的必要条件，TogetherROS在ROS系统的基础上，进行了大量的改良和优化，可以为开发者提供高效实用的系统环境。 在此之上，平台还会提供大量的机器人参考算法和应用功能示例，比如常用的建图、定位、导航，还有智能机器人中至关重要的智能化功能，比如一些基础算法，图像分类、图像分割、目标检测等，还有应用功能，人脸检测、人体跟踪、骨骼点检测、手势识别、语音处理等等，提供基于大量数据训练的模型，借助底层AI引擎的支持，可以快速、稳定的实现各种各样的智能应用。 同时平台还会配套一系列加速机器人开发的工具链，比如代码编写工具、系统调试工具、数据标注和训练工具等。 古月居和地平线也会共同打造机器人开发者社区，持续分享技术内容，沉淀更多开发者的智慧，更多机器人产业中的合作伙伴也会陆续加入，共同打造最为丰富的机器人开发者套件，建设智能机器人开发的生态圈。 在这个机器人开发平台之中，最为重要的就是TogetherROS系统了，起到了承上启下、连接各项功能的作用，我们将通过一系列课程为大家深入浅出的介绍。","text_tokens":["提供","可以","芯片","通过","标注","模型","地平线","于","先进","课程","点","参考","生态圈","算法","系统","机器人","也","—","分类","至关重要","社区","深入","大家","等效","深入浅出","借助","人体","比如","正式","易用","数据","由图","条件","目标","开发","上层","配套","链","居","推出","将","内部","合作伙伴","这套","这个","保证","技术","建设","处理","连接","代码","linux","必要","建图","定位","给","功能","合作","在","起到","几个","分割","基础","组件","多","加速","打造","各种","操作系统","一一","骨骼","边缘","来看","正如","中","生态","常用","人脸","月","实用","架构","最","导航","套件","会","年","重要","介绍","跟踪","快速","古月","可","等","了","开发者","层面","一系列","之中","一系","软硬","集成","、","。","组成","旭日","5tops","6","底层","极致","丰富","和","togetherros","系列","5","加入","此","分享","各项","应用","实现","工具","操作","陆续","一套","带来","伯努利","内容","这","训练","ai","一些","是","同时","应用软件","为","基于","图像","的","ros","就是","语音","必要条件","各种各样","智能化","等等","部分","产业","共同","3","平台","目的","智能","稳定","算力","承上启下","各样","至关","如此","与","还有","aiot","机器","之上","行业","全新","编写","，","还会","更","主要","示例","大量","软件","强大","2022","我们","电脑","引擎","作用","持续","设施","上","地平","优化","协同","2.0","进行","最为","支持","优质"," ","手势","识别","伙伴","以上","调试","沉淀","帮助","下","高效","环境","检测","windows","依托","一代","智慧","改良"],"title":"地平线机器人开发平台","title_tokens":["地平","机器人","开发","平台","机器","地平线"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#togetherros","text":"在ROS系统庞大社区资源的基础上，结合智能机器人的发展和产业需求，TogetherROS应运而生。 TogetherROS有三个核心特点： 开源兼容，秉承开源精神的力量 TogetherROS和ROS系统一样，也是一套完全开源的系统，所有开发者都可以继续二次开发，接口方面和ROS2完全兼容，ROS2原有的功能也都可以继续复用，已有的机器人代码可以十分便利的迁移过来。 极致性能优化 相比ROS的通用化，TogetherROS更多考虑的是如何充分挖掘底层硬件的性能，比如提高数据传输的效率、增强人工智能处理的能力，在后续的使用案例中，大家可以充分感受到这一点。 丰富易用的软硬件组件 比如各种各样的传感器和开发套件，再比如算法模块、感知应用、机器人功能，还有提高开发效率的各种编程、部署工具。","text_tokens":["可以","便利","原有","已有","十分","感知","算法","系统","机器人","也","社区","传输","大家","比如","二次","易用","有","数据","充分","开发","需求","发展","再","应运而生","处理","精神","继续","社区资源","代码","到","功能","在","基础","组件","多","后续","各种","三个","通用化","兼容","中","人工智能","套件","复用","迁移","挖掘","：","模块","开发者","数据传输","部署","软硬","软硬件","相比","、","。","底层","极致","丰富","和","togetherros","硬件","应用","工具","一套","所有","一样","ros2","过来","传感器","这","增强","是","能力","使用","资源","结合","的","ros","都","应运","力量","各种各样","二次开发","性能","产业","庞大","传感","智能","如何","感受","各样","还有","机器","据传","，","核心","更","考虑","完全","通用","人工","效率","一点","上","秉承","优化"," ","特点","开源","提高","案例","感器","方面","接口","编程"],"title":"TogetherROS的特点","title_tokens":["特点","的","togetherros"]},{"location":"TogetherROS/1.2_TogetherROS%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/#togetherros_1","text":"具体展开来看，TogetherROS的系统框架如图所示，其中深蓝色部分为地平线优化、新增的模块，其他是目前复用ROS2中的模块： 在系统通信的中间件部分，保留了ROS2中原本针对不同DDS的通信框架，与ROS2 foxy版本的接口完全兼容，方便复用ROS丰富工具包进行原型验证，在此之上增加了“zero-copy” 零拷贝 的通信机制，降低大数据传输时延和系统资源消耗。 在组件功能部分，TogetherROS提供“hobot CV” 视觉加速库 ，软硬件协同，可以提升CV算子性能、降低系统资源消耗；针对AI模型的推理，封装了“hobot_dnn” 功能包，可以调用底层芯片的AI引擎，简化板端AI开发与部署，释放BPU的算力。可以支持丰富的机器人传感器型号，比如相机、雷达、IMU、GPS等，节省驱动开发的时间，可以聚焦在机器人应用开发上。 除此之外，TogetherROS还会提供丰富的 软件调试和性能调优工具 ，方便用户定位问题和优化系统性能，在具体的行业应用中，还支持最小化和模块化的剪裁，利于部署在资源受限的嵌入式产品中。 总之，TogetherROS出于ROS，又不止于ROS，ROS原有的功能依然继承，重点是借助硬件能力，充分优化系统的性能，提高机器人开发的效率。","text_tokens":["提供","可以","剪裁","芯片","-","模型","原有","地平线","于","系统","机器人","dnn","传输","hobot","借助","比如","框架","foxy","算子","保留","数据","充分","开发","除此之外","”","目前","拷贝","imu","总之","_","机制","问题","推理","定位","包","驱动","功能","在","不同","除此","重点","组件","加速","兼容","工具包","来看","中","库","复用","嵌入","出于","：","模块","之外","“","等","了","数据传输","版本","视觉","释放","利于","dds","部署","时间","软硬","软硬件","不止","、","。","产品","底层","新增","中间件","丰富","和","简化","togetherros","又","节省","此","硬件","继承","深蓝","cv","；","应用","最小","系统资源","工具","方便","零","ros2","所示","传感器","雷达","ai","深蓝色","是","能力","copy","型号","其中","为","资源","的","ros","提升","验证","封装","定位问题","部分","性能","消耗","受限","bpu","传感","通信","用户","降低","算力","时延","相机","最小化","具体","聚焦","与","机器","之上","调用","据传","行业","模块化","，","嵌入式","还会","完全","软件","引擎","还","效率","zero","上","地平","增加","优化","协同","调优","进行","板端","支持","gps"," ","针对","提高","原本","大","感器","蓝色","原型","调试","依然","展开","接口","中间","其他","如图所示"],"title":"TogetherROS系统框架","title_tokens":["框架","togetherros","系统"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/","text":"TogetherROS与ROS性能对比 ROS2 vs ROS1 先来看下两个大版本ROS的系统架构。 在这张图中，左侧是ROS1，右侧是ROS2，两者最明显的变化，就是Master。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery——自发现机制，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的DDS系统。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于共享内存的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了，Linux、windows、MacOS、RTOS都可以。 ROS2系统架构 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个ROS Middleware，简称RMW，也就是制定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 TogetherROS vs ROS2 TogetherROS就是在这样一个ROS2架构的基础上，继续进行了优化，原本DDS通信的部分依然保留，可以适配不同厂家的DDS通信系统，在此之上，针对功能性的组件进行了众多优化和补充，在上一节中我们也给大家介绍了这套框架。 优化之后的TogetherROS系统，在数据传输和AI处理方面，到底有多少提升呢，我们来看具体的对比数据。 通信效率量化对比 先来看下操作系统至关重要的数据通信功能，我们针对ROS中最为常用的大数据传输模式——话题通信进行了测试。 在单元测试中，使用同样的算力平台，分别安装TogetherROS和ROS2系统，然后在其中运行一个话题通信的发布者与订阅者，实现不同数据量的传输。经过数据统计，我们可以看到，在数据通信延时方面，随着数据量的增加，ROS2系统在通信延时、发送端和接收端的CPU占用率上，都会程线性增加，可以预想，在数据量较大的情况下，系统的通信负荷会非常严重。 而在TogetherROS系统中，由于使用了零拷贝的传输机制，传输数据量的增加，并不会导致延时和CPU占用率的增加，极大程度节省了系统资源。 在场景测试中，我们尽量模拟真实机器人的应用，使用TogetherROS和ROS2系统连接了多个相机、雷达和里程计等传感器，作为大量数据的输入来源，继续进行了测试，结果和之前的单元测试类似，ROS2系统此时的CPU占用率已经超过90%，想要运行数据传输之外的应用功能，几乎是不可能的，通信延时也达到了15ms以上，这在某些实时性要求比较高的应用中，是不可接受的。 而在TogetherROS系统中，CPU占用和通信延时也微乎其微，更多系统资源都可以让给应用处理。 CV图像处理量化对比 再来看下智能机器人中视觉感知层面的处理，TogetherROS系统集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 模型推理 在AI处理方面，ROS2原生系统中并没有太多支持，只能依赖社区中的资源，很难充分发挥硬件的算力。 对此，TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 传感器驱动管理 在传感器层面，是大量数据传输的来源，TogetherROS也重点进行了优化，针对常用的传感器类型，系统中内置参数配置、系统调用和内存管理机制，同样是在芯片的硬件层面进行了加速和隔离，保障数据流的稳定生成。 机器人开发工具 机器人开发过程中的性能优化和调试，也是非常繁杂的工作，TogetherROS系统自带火焰图等工具，可以实现系统层面的调优和测试，便于开发者挖掘系统性能。 以上这些都是TogetherROS在ROS系统之上的优化和补充，未来更多特性也会不断迭代推出，让智能机器人的开发更加简单。","text_tokens":["于","另外","软件系统","呢","机器人","也","—","发布","会程","通信接口","数据","保留","占用率","数据流","目标","预想","真实","推出","系统集成","这套","右侧","传输数据","风格","更换","机制","到","程度","某","功能","严重","基本","重点","数据通","内置","加速","对此","最","层","重要","发","介绍","倍","应用层","middleware","交付","熟悉","不过","明显","一团乱麻","端","里程计","打交道","符合","简单明了","时间","集成","产品","节省","减少","常","此","由于","硬件","cv","定义","程序","实现","延迟","属性","广泛应用","rtos","一团乱","为","能够","就是","厂商","而","部分","延时","滤波","简称","只能","应该","传感","通信","中间层","共享内存","算力","ros1","做到","类型","机器","之上","想要","一个","走","好","特性","cpu","软件","商业","迭代","但","效率","管理","节点","增加","功能性","找到","调优","需要","开源","成本","大","有且","加密","里程","自家","下","依然","简单","只不过","接口","windows","提供","vs","2","负荷","master","另","角色","90%","社区","管理器","量化","5g","借助","彼此","框架","有","算子","选项","混合","更加","再","过程","安装","？","隔离","拷贝","处理","用","看到","驱动","基础","用率","如果","举","来看","中","达到","而已","人工智能","微乎其微","乱麻","不断","协议","统计","挖掘","不是","高","联网","重新","之外","等","了","例如","占用","视觉","dds","部署","一行","相比","运行","图","库会","间层","收","底层","内存","丰富","接收端","系统资源","它","每","操作","一套","所有","情况","繁杂","带来","左侧","很难","传感器","这","雷达","训练","哪些","很多","要","15ms","资源","图像","的","并","选择","提升","充分发挥","这样","没有","缩放","3","智能","适用","一种","具体","至关","macos","建立","原生","下边","此时","设计","补充","我们","完","消失","让给","接收","切换","极大"," ","针对","其实","交给","一节","指挥","经过","方面","discovery","听","编程","花费","中间","同样","最为","开发成本","芯片","自带","就","移植","模型","时","听说","把","一家","自","感知","系统","物","满足","dnn","传输","发成","大家","hobot","除了","已经","比如","内","保障","火焰","开发","单元","完善","将","省略","问题","图像处理","继续","超过","会成","opencv","实时","fastrtps","多","各种","操作系统","常用","充足","让","开发工具","复用","频繁","该","未来","么","两个","数据传输","版本","不爽","实际","旋转","客户端","实时性","发挥","模拟","输入","类似","高斯","肯定","、","。","者","和","应用","发现","这里","工具","随着","零","一样","ros2","rmw","过来","例子","是","其中","ros","非常","都","最大","导致","封装","消耗","适配","分别","名字","甚至","用户","如何","两者","国际标准","得","相机","数据量","到底","标准","测试","模式","而且","丢","，","畸变","某些","场景","变化","大量","啦","人工","广泛","改","分发","上","地平","先","只有","共享","进行","接受","提高","原本","以上","感器","诟病","/","调试","较大","所以","之前","tcp","其他","校正","发布者","可以","通过","单元测试","订阅","线性","几乎","地平线","进程","信息","至关重要","充分","需求","一团","可能","对比","这个","依赖","连接","写","代码","变得","国际","linux","尽量","量","推理","给","在","方法","通信协议","不同","组件","调教","厂家","兼容","制定","多倍","来源","做","数据通信","按照","架构","里","比较","库","会","之后","这些","便于","opensplice","时候","不太","多个","解决","开发者","层面","然后","从而","配置","软硬","软硬件","复杂","无法","不会","togetherros","轻松","结果","来讲","可选项","客户","帧","请","交道","要求","ai","张图","只要","理器","使用","基于","参数","对于","率","性能","bpu","可选","突然","平台","降低","稳定","作为","当然","不","与","还有","太","调用","据传","众多","唯一","更","很快","工作","主要","话题","产品开发","为了","udp","发送","成","引擎","公司","优化","协同","支持","不用","ceo","管理机制","不可","生成","多少","接入","每个"],"title":"性能对比","title_tokens":["对比","性能"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#togetherrosros","text":"","text_tokens":[],"title":"TogetherROS与ROS性能对比","title_tokens":["与","对比","性能","ros","togetherros"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#ros2-vs-ros1","text":"先来看下两个大版本ROS的系统架构。 在这张图中，左侧是ROS1，右侧是ROS2，两者最明显的变化，就是Master。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery——自发现机制，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的DDS系统。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于共享内存的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了，Linux、windows、MacOS、RTOS都可以。","text_tokens":["可以","提供","master","通过","就","角色","进程","把","另外","自","系统","也","—","发布","至关重要","信息","管理器","彼此","比如","内","通信接口","数据","选项","开发","更加","一团","完善","将","再","安装","右侧","这个","依赖","连接","写","更换","机制","变得","linux","驱动","会成","在","方法","通信协议","如果","操作系统","来看","中","而已","乱麻","架构","最","里","让","会","层","协议","频繁","重要","这些","应用层","时候","不过","不太","两个","明显","了","一团乱麻","版本","客户端","打交道","从而","类似","简单明了","dds","肯定","、","。","库会","间层","复杂","底层","内存","和","应用","发现","程序","它","操作","可选项","一套","客户","所有","一样","rtos","ros2","左侧","请","交道","这","雷达","一团乱","哪些","张图","是","很多","理器","基于","图像","的","ros","就是","都","封装","而","名字","可选","突然","通信","中间层","共享内存","两者","稳定","得","ros1","至关","不","macos","建立","标准","tcp","调用","，","一个","走","好","下边","主要","变化","大量","udp","我们","成","但","管理","节点","公司","消失","上","先","只有","接收","共享","找到","进行","需要","ceo"," ","大","指挥","有且","下","简单","只不过","discovery","接口","windows","听","中间"],"title":"ROS2 vs ROS1","title_tokens":[" ","vs","ros2","ros1"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#ros2","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个ROS Middleware，简称RMW，也就是制定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。","text_tokens":["可以","提供","master","另","就","移植","时","于","听说","一家","把","软件系统","系统","物","也","满足","社区","发成","除了","5g","比如","数据","目标","开发","需求","再","安装","省略","？","这个","写","用","问题","更换","代码","国际","某","给","功能","在","通信协议","fastrtps","不同","基本","多","厂家","如果","各种","举","制定","中","做","按照","最","协议","频繁","复用","该","发","不是","联网","重新","这些","之外","opensplice","middleware","交付","么","不过","多个","等","了","解决","熟悉","层面","不爽","版本","然后","符合","类似","dds","部署","一行","配置","肯定","相比","、","。","产品","收","底层","无法","丰富","轻松","减少","常","应用","实现","这里","每","程序","定义","延迟","来讲","属性","广泛应用","一样","带来","ros2","rmw","过来","这","例子","是","要","只要","为","能够","基于","的","ros","就是","并","选择","最大","都","对于","厂商","率","性能","这样","开发成本","简称","适配","应该","用户","通信","适用","如何","国际标准","稳定","得","一种","当然","ros1","不","还有","标准","想要","丢","，","一个","唯一","好","更","场景","设计","变化","软件","产品开发","商业","为了","udp","我们","完","广泛","改","先","切换","不用"," ","开源","提高","其实","交给","成本","加密","诟病","/","自家","简单","所以","接口","接入","tcp","其他","每个"],"title":"ROS2系统架构","title_tokens":["ros2","系统","架构"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#togetherros-vs-ros2","text":"TogetherROS就是在这样一个ROS2架构的基础上，继续进行了优化，原本DDS通信的部分依然保留，可以适配不同厂家的DDS通信系统，在此之上，针对功能性的组件进行了众多优化和补充，在上一节中我们也给大家介绍了这套框架。 优化之后的TogetherROS系统，在数据传输和AI处理方面，到底有多少提升呢，我们来看具体的对比数据。","text_tokens":["可以","此","组件","厂家","到底","具体","之上","来看","据传","中","众多","一个","，","ros2","ai","架构","系统","也","呢","补充","传输","介绍","我们","大家","之后","的","就是","框架","有","保留","数据","上","提升","优化","了","功能性","数据传输","进行","对比","部分","这样","这套"," ","针对","适配","原本","dds","处理","一节","继续","方面","通信","。","依然","多少","给","功能","在","和","不同","togetherros","基础"],"title":"TogetherROS vs ROS2","title_tokens":[" ","vs","ros2","togetherros"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_1","text":"先来看下操作系统至关重要的数据通信功能，我们针对ROS中最为常用的大数据传输模式——话题通信进行了测试。 在单元测试中，使用同样的算力平台，分别安装TogetherROS和ROS2系统，然后在其中运行一个话题通信的发布者与订阅者，实现不同数据量的传输。经过数据统计，我们可以看到，在数据通信延时方面，随着数据量的增加，ROS2系统在通信延时、发送端和接收端的CPU占用率上，都会程线性增加，可以预想，在数据量较大的情况下，系统的通信负荷会非常严重。 而在TogetherROS系统中，由于使用了零拷贝的传输机制，传输数据量的增加，并不会导致延时和CPU占用率的增加，极大程度节省了系统资源。 在场景测试中，我们尽量模拟真实机器人的应用，使用TogetherROS和ROS2系统连接了多个相机、雷达和里程计等传感器，作为大量数据的输入来源，继续进行了测试，结果和之前的单元测试类似，ROS2系统此时的CPU占用率已经超过90%，想要运行数据传输之外的应用功能，几乎是不可能的，通信延时也达到了15ms以上，这在某些实时性要求比较高的应用中，是不可接受的。 而在TogetherROS系统中，CPU占用和通信延时也微乎其微，更多系统资源都可以让给应用处理。","text_tokens":["可以","负荷","单元测试","订阅","线性","几乎","系统","机器人","也","—","90%","发布","至关重要","传输","已经","会程","数据","占用率","预想","真实","单元","可能","安装","传输数据","拷贝","连接","处理","机制","继续","程度","尽量","量","超过","看到","功能","在","实时","不同","严重","用率","数据通","多","操作系统","来看","中","来源","达到","常用","微乎其微","数据通信","比较","会","重要","统计","高","之外","多个","等","了","数据传输","端","里程计","实时性","占用","然后","模拟","输入","类似","、","。","运行","者","不会","和","togetherros","节省","由于","结果","应用","接收端","实现","系统资源","操作","随着","情况","零","ros2","传感器","这","雷达","要求","是","15ms","使用","其中","资源","的","ros","非常","并","都","导致","而","延时","分别","平台","通信","传感","作为","算力","相机","不","至关","数据量","与","测试","模式","机器","据传","想要","，","一个","更","某些","此时","场景","cpu","话题","大量","发送","我们","上","增加","先","让给","接收","进行","最为","极大"," ","针对","接受","以上","大","经过","里程","方面","感器","不可","下","较大","之前","同样","发布者"],"title":"通信效率量化对比","title_tokens":["通信","对比","效率","量化"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#cv","text":"再来看下智能机器人中视觉感知层面的处理，TogetherROS系统集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。","text_tokens":["可以","2","芯片","通过","地平线","感知","系统","机器人","hobot","算子","混合","开发","再","对比","系统集成","风格","处理","到","opencv","在","方法","加速","兼容","来看","中","多倍","常用","库","倍","便于","等","了","层面","例如","旋转","视觉","高斯","软硬","软硬件","集成","、","。","运行","底层","togetherros","硬件","cv","应用","系统资源","实现","帧","资源","图像","的","提升","率","性能","滤波","消耗","分别","缩放","甚至","3","智能","降低","具体","做到","与","测试","机器","而且","，","畸变","更","软件","我们","引擎","效率","上","地平","协同","进行"," ","下","接口","编程","校正"],"title":"CV图像处理量化对比","title_tokens":["图像处理","cv","对比","量化","图像","处理"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_2","text":"在AI处理方面，ROS2原生系统中并没有太多支持，只能依赖社区中的资源，很难充分发挥硬件的算力。 对此，TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。","text_tokens":["提供","可以","硬件","多","芯片","调教","太","应用","就","模型","中","众多","，","人工智能","原生","ros2","很快","很难","对此","训练","ai","系统","充足","库","很多","啦","dnn","社区","使用","人工","资源","hobot","借助","基于","引擎","的","并","保障","分发","数据","上","充分","开发","了","开发者","充分发挥","实际","支持","系统集成","没有","发挥","依赖"," ","开源","不用","只能","这套","处理","部署","bpu","时间","方面","集成","。","智能","推理","底层","算力","花费","在","和","togetherros"],"title":"模型推理","title_tokens":["模型","推理"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_3","text":"在传感器层面，是大量数据传输的来源，TogetherROS也重点进行了优化，针对常用的传感器类型，系统中内置参数配置、系统调用和内存管理机制，同样是在芯片的硬件层面进行了加速和隔离，保障数据流的稳定生成。","text_tokens":["硬件","内置","芯片","加速","类型","调用","据传","中","来源","，","常用","传感器","系统","也","是","大量","传输","的","管理","保障","数据","数据流","优化","了","参数","数据传输","层面","进行","隔离","针对","管理机制","配置","感器","机制","、","传感","生成","。","内存","稳定","在","和","同样","togetherros","重点"],"title":"传感器驱动管理","title_tokens":["传感器","感器","传感","驱动","管理"]},{"location":"TogetherROS/1.3_TogetherROS%E4%B8%8EROS%E5%AF%B9%E6%AF%94/#_4","text":"机器人开发过程中的性能优化和调试，也是非常繁杂的工作，TogetherROS系统自带火焰图等工具，可以实现系统层面的调优和测试，便于开发者挖掘系统性能。 以上这些都是TogetherROS在ROS系统之上的优化和补充，未来更多特性也会不断迭代推出，让智能机器人的开发更加简单。","text_tokens":["可以","多","自带","测试","机器","实现","工具","之上","中","，","繁杂","工作","更","特性","系统","机器人","也","不断","是","会","让","补充","挖掘","迭代","的","ros","这些","便于","未来","非常","都","火焰","开发","优化","等","更加","推出","调优","层面","开发者","过程","性能"," ","以上","调试","。","图","智能","简单","在","和","togetherros"],"title":"机器人开发工具","title_tokens":["机器人","开发","开发工具","机器","工具"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/","text":"TogetherROS应用场景 相比手机、电脑等通用平台，机器人的类型可是千变万化，构建机器人操作系统的难度就远比手机和电脑的操作系统要复杂很多。机器人的主流应用大致可以分为 服务机器人、工业机器人、特种机器人 三个方向，无论是在哪一方向，都会面临很多问题。比如传感器、执行器等器件选型复杂，不同场景下需要的性能和参数都有所不同，这就要求操作系统得兼容尽量多的器件。 不同场景下的计算平台算力和资源差异很大，一般都需要进行定制化的裁剪和优化，这就得有一系列工具便于系统的定制和裁剪。每个场景中的应用功能变化也很大，各种算法的集成和开发要尽量简单，算法基于的数据也在持续迭代，需要一套工具链来提供迭代和升级。 针对各种各样的需求变化，TogetherROS系统都提供了支持。 服务机器人 在服务机器人领域，场景和功能尤其复杂，有家里的扫地机器人，有餐厅里的送餐机器人，有咖啡店里的双臂机器人，还有物流送货的飞行机器人，虽然每一个机器人平台的构型不同，但都需要动态处理多种多样的环境变化，这就需要TogetherROS系统基于大量数据的AI处理和丰富的组件功能支持，快速推动各种功能的落地。 工业机器人 在工业机器人领域，目前的机器人主要以工业机械臂和物流移动机器人形态为主，场景相比服务机器人要标准很多，核心目的是要提高生产效率，这就要求机器人可以长期稳定的运行，同时实时处理各项运动功能，TogetherROS系统可裁剪和性能稳定等特点，都可以符合要求。 特种机器人 而在特种机器人的应用领域，结合了服务和工业场景中的不少特点，机器人形态多变，得动态处理各种复杂场景里的事件，例如火灾、地震、管道等场景，更是会发生很多不可预料的情况，TogetherROS系统中的AI处理可以较好的保障不同环境中的感知效果，同时端云联动，可以实现大量数据的训练和部署，不断提高对复杂环境的处理能力。 可见，TogetherROS系统充分考虑了众多应用场景的需求，不仅可以满足智能机器人开发过程中的每一个环节，也考虑到了机器人未来在产业中的应用效果。","text_tokens":["可以","提供","远","就","领域","链来","千变万化","感知","算法","系统","机器人","也","满足","环节","送货","比如","保障","有","数据","计算","充分","开发","需求","可见","方向","过程","落地","定制","目前","处理","生产","问题","到","器件","尽量","功能","化","在","实时","执行器","不同","移动机器人","组件","多","各种","操作系统","三个","兼容","中","构型","事件","里","应用领域","不断","臂","会","多变","端云","餐厅","未来","便于","快速","可","等","了","裁剪","飞行","以","符合要求","例如","可是","一系列","尤其","形态","移动","咖啡店","符合","部署","一系","相比","、","。","哪","集成","运行","复杂","一","地震","丰富","和","无论是","togetherros","系列","主流","各项","应用","不仅","升级","实现","面临","操作","工具","每","一套","无论","家里","工业","多样","为主","情况","较","动机","传感器","很大","这","要求","ai","训练","多种","服务","是","同时","很多","要","不少","联动","能力","资源","基于","结合","的","效果","都","手机","双臂","参数","各种各样","而","大致","性能","咖啡","机械","产业","分为","选型","管道","目的","平台","传感","智能","构建","难度","稳定","得","算力","预料","各样","扫地","还有","特种","差异","标准","类型","对","机器","运动","更是","比","物流","，","一个","核心","好","送餐","充分考虑","众多","主要","场景","考虑","通用","变化","大量","虽然","迭代","电脑","持续","但","效率","实时处理","有所不同","动态","发生","优化","推动","执行","有所","进行","需要","支持"," ","针对","特点","提高","一般","多种多样","感器","不可","长期","下","火灾","环境","简单","每个"],"title":"应用场景","title_tokens":["应用","场景"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#togetherros","text":"相比手机、电脑等通用平台，机器人的类型可是千变万化，构建机器人操作系统的难度就远比手机和电脑的操作系统要复杂很多。机器人的主流应用大致可以分为 服务机器人、工业机器人、特种机器人 三个方向，无论是在哪一方向，都会面临很多问题。比如传感器、执行器等器件选型复杂，不同场景下需要的性能和参数都有所不同，这就要求操作系统得兼容尽量多的器件。 不同场景下的计算平台算力和资源差异很大，一般都需要进行定制化的裁剪和优化，这就得有一系列工具便于系统的定制和裁剪。每个场景中的应用功能变化也很大，各种算法的集成和开发要尽量简单，算法基于的数据也在持续迭代，需要一套工具链来提供迭代和升级。 针对各种各样的需求变化，TogetherROS系统都提供了支持。","text_tokens":["可以","提供","远","就","链来","千变万化","算法","系统","机器人","也","比如","有","数据","计算","开发","需求","方向","定制","问题","器件","尽量","功能","化","在","执行器","不同","多","各种","操作系统","三个","兼容","中","会","便于","等","了","裁剪","可是","一系列","一系","、","相比","。","哪","集成","复杂","一","和","无论是","togetherros","系列","主流","应用","升级","面临","操作","工具","一套","无论","工业","传感器","很大","这","要求","服务","很多","要","资源","基于","的","都","手机","参数","各种各样","大致","性能","分为","选型","平台","传感","构建","难度","得","算力","各样","特种","差异","类型","机器","比","，","场景","通用","变化","迭代","电脑","持续","有所不同","优化","执行","有所","进行","需要","支持"," ","针对","一般","感器","下","简单","每个"],"title":"TogetherROS应用场景","title_tokens":["应用","场景","togetherros"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_1","text":"在服务机器人领域，场景和功能尤其复杂，有家里的扫地机器人，有餐厅里的送餐机器人，有咖啡店里的双臂机器人，还有物流送货的飞行机器人，虽然每一个机器人平台的构型不同，但都需要动态处理多种多样的环境变化，这就需要TogetherROS系统基于大量数据的AI处理和丰富的组件功能支持，快速推动各种功能的落地。","text_tokens":["组件","扫地","还有","各种","领域","就","机器","每","物流","，","家里","一个","多样","送餐","构型","这","场景","ai","里","机器人","系统","服务","变化","大量","丰富","虽然","基于","送货","的","餐厅","但","快速","有","都","数据","双臂","动态","推动","飞行","需要","支持","落地","尤其","咖啡","咖啡店","处理","多种多样","平台","。","复杂","环境","功能","在","和","不同","togetherros","多种"],"title":"服务机器人","title_tokens":["机器人","机器","服务"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_2","text":"在工业机器人领域，目前的机器人主要以工业机械臂和物流移动机器人形态为主，场景相比服务机器人要标准很多，核心目的是要提高生产效率，这就要求机器人可以长期稳定的运行，同时实时处理各项运动功能，TogetherROS系统可裁剪和性能稳定等特点，都可以符合要求。","text_tokens":["可以","各项","标准","领域","就","机器","运动","物流","，","工业","为主","核心","动机","要求","主要","场景","这","系统","机器人","臂","服务","是","很多","要","同时","的","实时处理","效率","可","都","等","裁剪","以","符合要求","性能","形态","特点","移动","目前","机械","提高","符合","处理","生产","相比","目的","。","运行","长期","功能","稳定","在","和","实时","移动机器人","togetherros"],"title":"工业机器人","title_tokens":["机器人","机器","工业"]},{"location":"TogetherROS/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_3","text":"而在特种机器人的应用领域，结合了服务和工业场景中的不少特点，机器人形态多变，得动态处理各种复杂场景里的事件，例如火灾、地震、管道等场景，更是会发生很多不可预料的情况，TogetherROS系统中的AI处理可以较好的保障不同环境中的感知效果，同时端云联动，可以实现大量数据的训练和部署，不断提高对复杂环境的处理能力。 可见，TogetherROS系统充分考虑了众多应用场景的需求，不仅可以满足智能机器人开发过程中的每一个环节，也考虑到了机器人未来在产业中的应用效果。","text_tokens":["可以","领域","感知","系统","机器人","也","满足","环节","保障","数据","充分","开发","需求","可见","过程","处理","到","在","不同","各种","中","事件","应用领域","不断","里","会","多变","端云","未来","等","了","例如","形态","部署","、","。","复杂","地震","和","togetherros","应用","不仅","实现","每","情况","工业","较","训练","ai","服务","不少","同时","很多","能力","联动","结合","的","效果","而","产业","管道","智能","得","预料","对","特种","机器","更是","充分考虑","众多","，","一个","好","考虑","场景","大量","动态","发生","特点"," ","提高","不可","火灾","环境"],"title":"特种机器人","title_tokens":["特种","机器人","机器"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/","text":"旭日X3派介绍 TogetherROS是一个软件层面的系统，要想使用它，当然得找一个硬件层面的计算平台，安装之后才能使用啦。 之前我们提到，TogetherROS会基于地平线的AI芯片，充分发挥硬件性能，我们如何使用这颗芯片呢？ 旭日X3派 没问题，地平线已经为我们准备好了，那就是搭载旭日X3芯片的机器人开发板——旭日X3派。 第一眼看上去，大家是否会想到树莓派呢？没错，为了适应开发者的使用习惯，兼容市面上大量已有的模块，旭日X3派的整体外观和接口形态都接近树莓派，不过面向的开发对象以及板卡的计算实力，和树莓派就完全不同了。 类似这些常用的传感器，旭日X3派统统都可以支持，未来还有更多机器人套件会出现在大家身边。 大家可以在这张表中，看到旭日X3派的硬件资源，CPU是四核A53，频率1.2Hz，在系统内还可以进行超频，BPU就是硬件级的AI引擎，这是旭日X3派相比市面上其他开发板，最大的不同，也是核心性能的主要来源，类似于业界常听到的NPU，这里使用的是地平线机器人独有的伯努利2.0架构，可以提供5Tops的等效算力支持。 内存方面，大家可以选择2GB或者4GB的版本，存储使用的是SD卡，我们可以自行选择，只要大于8GB就可以啦。 在多媒体方面，旭日X3派支持硬件级别的H265和H264编解码，常用的图像和视频都可以流畅播放。 接口方面，尽量可以满足我们常用外接设备和开发的需求，这里是一个CSI的相机接口，板载USB有3个，包含1个USB3.0和2个USB2.0，这里是一个板载的调试串口，我们可以通过它获取系统层面的很多调试信息，也可以与板卡进行通信。 板卡上也搭载了有线网络和无线网络，这个有线网口我们可以直接用网线连接到电脑，就可以在电脑上远程登录和板卡通信了，或者连接到路由器，让板卡直接上网，无线网络和蓝牙是一个二合一的模块，我们也可以直接通过wiki，让板卡连接到某个网络中。 显示接口主要是这里的HDMI，如果我们先要看到系统界面，或者后续很多视觉例程的识别效果，都可以通过HDMI外接一个显示器进行显示。 最后还有至关重要的扩展接口，有40个引脚，和树莓派的接口定义一致，什么GPIO、串口、I2C、SPI等等，一应俱全。 这块板卡我们在使用的时候，推荐使用5V3A的电源，通过TypeC线连接到这里供电，官方提供的系统目前是Ubuntu20.04，使用起来和原生系统没有太大差别。 总体来讲， 旭日X3派是一款面向生态开发者的嵌入式AI开发板，接口兼容树莓派，具有5Tops的端侧推理算力，以及4核ARM A53的处理能力。 面对个人开发者，旭日X3派可以让每一位开发者拥有自己的AI开发套件，不再受开发板高昂的价格限制，面对高等院校，使用旭日X3派开发套件探索AI和机器人应用是学习的开始，有助于学生快速入门人工智能与机器人开发，面对产业，旭日X3派以及地平线的AI工具链，可以帮助客户将产品尽快推向市场，快速落地智能机器人方向的解决方案。 旭日X3M芯片 在旭日X3派上，最为核心的当然就是这颗AI芯片了，这是关于芯片的具体信息，供大家参考。 值得一提的是，随着芯片的技术迭代，2023年，地平线将推出X5芯片，比较大的变化是CPU升级到了8核A55，主频提升到1.8GHz，BPU的算力也将达到8Tops，还加入了GPU，以及更多可扩展的接口。 在使用旭日X3派的过程中，大家也可以期待旭日X5派了。 旭日X3派接口 好啦，还是回到旭日X3派的开发接口上来，我们再做一个整理，这些就是我们使用开发板进行智能机器人开发过程中，最为常用的接口啦。 大家目前在树莓派或者其他开发板上使用的绝大部分模块，基本都可以在旭日X3派上复用，同时还有更多智能化的玩法等着大家。 关于40Pin扩展接口的序号排布，大家可以看这里，引脚的序号是从靠近HDMI板卡内测的开始算起，是引脚1，然后依次蛇形计数，分别是1、2、3、4、5，一直到这里是39和40。 上图是40PIN扩展接口的详细定义，有3.3V和5V的电源信号，有I2C、I2S、SPI、UART等通信接口，还有很多可动态配置的GPIO信号，基本可以满足各种各样的机器人开发啦。 好啦，关于旭日X3派这块开发板我们已经了解清楚了，具体该如何使用呢，我们后续操作起来。","text_tokens":["业界","市面上","于","一眼","大部分","参考","不再","呢","机器人","也","—","个","二合一","主频","等效","设备","是从","通信接口","链","出现","方向","推出","网络","合一","i2c","市面","常听到","到","端侧","官方","基本","派","板载","这是","硬件资源","树莓","线","起来","一直","usb3.0","想","重要","介绍","有助于","不过","学习","有助","uart","产品","推荐","实力","1","加入","硬件","助于","定义","csi","h264","绝大","清楚","自己","想到","着","靠近","40pin","能力","开发板","核","为","无线","计数","就是","有线网","spi","高等","推向","具有","wiki","等等","供","部分","没错","传感","npu","这颗","通信","算力","上图","看","机器","一个","远程","嵌入式","好","cpu","软件","个人","无线网络","某个","迭代","hz","内测","usb","2.0","找","路由器","院校","大","帮助","接口","提供","2","x5","调试信息","已有","5v","值得一提的是","8tops","听到","有","usb2.0","解决方案","再","过程","h265","安装","？","准备","一应俱全","外观","张表中","用","处理","看到","什么","后续","如果","口","中","人工智能","达到","媒体","arm","扩展","排布","嵌入","详细","大于","快速","3.3","等","了","引脚","视觉","或者","a55","相比","5tops","值得","内存","上去","是否","限制","它","每","操作","伯努利","传感器","这","学生","很多","要","资源","sd","图像","的","1.2","ubuntu20.04","选择","多媒体","4","提升","界面","充分发挥","智能化","没有","a53","面对","3","智能","ghz","具体","供电","至关","依次","以及","市场","原生","显示","方案","完全","我们","2023","习惯","hdmi"," ","受","信号","方面","统统","最为","芯片","就","频率","开始","5v3a","系统","满足","大家","面向","已经","内","拥有","开发","将","8gb","流畅","提到","问题","入门","多","各种","2gb","常用","播放","x3","俱全","让","年","网线","复用","了解","对象","该","未来","版本","发挥","类似","39","、","旭日","。","第一","和","视频","外","无线网","5","应用","升级","这里","工具","随着","接口定义","gpu","蓝牙","是","同时","搭载","适应","效果","都","最大","整体","8","关于","分别","一致","起","如何","玩法","外接","得","相机","独有","绝大部分","各样","，","x3m","高等院校","大量","啦","变化","1.8","人工","整理","电脑","还","分发","上","地平","动态","第一眼","解码","先","路由","40","进行","感器","调试","i2s","之前","价格","其他","可以","包含","通过","高昂","编解码","地平线","信息","至关重要","自行","一款","计算","充分","需求","落地","这个","目前","技术","连接","板卡","gpio","级","尽量","推理","在","不同","typec","上网","期待","看上","兼容","推向市场","还是","来源","做","生态","显示器","v","架构","比较","套件","会","登录","看上去","之后","线网","这些","模块","可","时候","解决","一应","序号","开发者","层面","总体","形态","然后","配置","有线","togetherros","一位","例程","卡","来讲","客户","上来","ai","才能","只要","使用","基于","接近","差别","接设备","各种各样","性能","最后","蛇形","产业","bpu","四核","平台","身边","尽快","当然","直接","还有","与","太","级别","面上","核心","那","更","主要","为了","大部","超频","引擎","算","探索","获取","支持","没","电源","识别","这块","二合","4gb","回到","串口","存储"],"title":"旭日X3派介绍","title_tokens":["介绍","旭日","派","x3"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3","text":"TogetherROS是一个软件层面的系统，要想使用它，当然得找一个硬件层面的计算平台，安装之后才能使用啦。 之前我们提到，TogetherROS会基于地平线的AI芯片，充分发挥硬件性能，我们如何使用这颗芯片呢？","text_tokens":["硬件","芯片","它","地平线","一个","，","ai","系统","呢","才能","是","会","软件","要","啦","想","使用","我们","之后","基于","的","分发","计算","地平","充分","层面","充分发挥","安装","发挥","性能","？"," ","找","提到","平台","。","这颗","如何","之前","得","togetherros","当然"],"title":"旭日X3派介绍","title_tokens":["介绍","旭日","派","x3"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3_1","text":"没问题，地平线已经为我们准备好了，那就是搭载旭日X3芯片的机器人开发板——旭日X3派。 第一眼看上去，大家是否会想到树莓派呢？没错，为了适应开发者的使用习惯，兼容市面上大量已有的模块，旭日X3派的整体外观和接口形态都接近树莓派，不过面向的开发对象以及板卡的计算实力，和树莓派就完全不同了。 类似这些常用的传感器，旭日X3派统统都可以支持，未来还有更多机器人套件会出现在大家身边。 大家可以在这张表中，看到旭日X3派的硬件资源，CPU是四核A53，频率1.2Hz，在系统内还可以进行超频，BPU就是硬件级的AI引擎，这是旭日X3派相比市面上其他开发板，最大的不同，也是核心性能的主要来源，类似于业界常听到的NPU，这里使用的是地平线机器人独有的伯努利2.0架构，可以提供5Tops的等效算力支持。 内存方面，大家可以选择2GB或者4GB的版本，存储使用的是SD卡，我们可以自行选择，只要大于8GB就可以啦。 在多媒体方面，旭日X3派支持硬件级别的H265和H264编解码，常用的图像和视频都可以流畅播放。 接口方面，尽量可以满足我们常用外接设备和开发的需求，这里是一个CSI的相机接口，板载USB有3个，包含1个USB3.0和2个USB2.0，这里是一个板载的调试串口，我们可以通过它获取系统层面的很多调试信息，也可以与板卡进行通信。 板卡上也搭载了有线网络和无线网络，这个有线网口我们可以直接用网线连接到电脑，就可以在电脑上远程登录和板卡通信了，或者连接到路由器，让板卡直接上网，无线网络和蓝牙是一个二合一的模块，我们也可以直接通过wiki，让板卡连接到某个网络中。 显示接口主要是这里的HDMI，如果我们先要看到系统界面，或者后续很多视觉例程的识别效果，都可以通过HDMI外接一个显示器进行显示。 最后还有至关重要的扩展接口，有40个引脚，和树莓派的接口定义一致，什么GPIO、串口、I2C、SPI等等，一应俱全。 这块板卡我们在使用的时候，推荐使用5V3A的电源，通过TypeC线连接到这里供电，官方提供的系统目前是Ubuntu20.04，使用起来和原生系统没有太大差别。 总体来讲， 旭日X3派是一款面向生态开发者的嵌入式AI开发板，接口兼容树莓派，具有5Tops的端侧推理算力，以及4核ARM A53的处理能力。 面对个人开发者，旭日X3派可以让每一位开发者拥有自己的AI开发套件，不再受开发板高昂的价格限制，面对高等院校，使用旭日X3派开发套件探索AI和机器人应用是学习的开始，有助于学生快速入门人工智能与机器人开发，面对产业，旭日X3派以及地平线的AI工具链，可以帮助客户将产品尽快推向市场，快速落地智能机器人方向的解决方案。","text_tokens":["业界","市面上","于","一眼","不再","呢","机器人","也","—","个","二合一","等效","设备","链","出现","方向","网络","合一","i2c","市面","常听到","到","端侧","官方","派","板载","这是","硬件资源","树莓","线","起来","usb3.0","重要","有助于","不过","学习","有助","产品","推荐","实力","1","硬件","助于","定义","csi","h264","自己","想到","能力","开发板","核","为","无线","就是","有线网","spi","高等","推向","具有","wiki","等等","没错","传感","npu","通信","算力","机器","一个","远程","嵌入式","好","cpu","个人","无线网络","某个","hz","usb","2.0","路由器","院校","大","帮助","接口","提供","2","调试信息","已有","听到","有","usb2.0","解决方案","h265","？","准备","一应俱全","外观","张表中","用","处理","看到","什么","后续","如果","口","中","人工智能","媒体","arm","扩展","嵌入","大于","快速","了","引脚","视觉","或者","相比","5tops","内存","上去","是否","限制","它","每","伯努利","传感器","这","学生","很多","要","资源","sd","图像","的","1.2","ubuntu20.04","选择","多媒体","4","界面","没有","a53","面对","3","智能","供电","至关","以及","市场","原生","显示","方案","完全","我们","习惯","hdmi"," ","受","方面","统统","芯片","就","频率","开始","5v3a","系统","满足","大家","面向","已经","内","拥有","开发","将","8gb","流畅","问题","入门","多","2gb","常用","播放","x3","俱全","让","网线","对象","未来","版本","类似","、","旭日","。","第一","和","视频","外","无线网","应用","这里","工具","接口定义","蓝牙","是","搭载","适应","效果","都","最大","整体","一致","外接","相机","独有","，","高等院校","大量","啦","人工","电脑","还","上","地平","第一眼","解码","先","路由","40","进行","感器","调试","价格","其他","可以","包含","通过","高昂","编解码","地平线","信息","至关重要","自行","一款","计算","需求","落地","这个","目前","连接","板卡","gpio","级","尽量","推理","在","不同","typec","上网","看上","兼容","推向市场","来源","生态","显示器","架构","套件","会","登录","看上去","线网","这些","模块","时候","解决","一应","开发者","层面","总体","形态","有线","一位","例程","卡","来讲","客户","ai","只要","使用","接近","差别","接设备","性能","最后","产业","bpu","四核","身边","尽快","直接","还有","与","太","级别","面上","核心","那","更","主要","为了","超频","引擎","探索","获取","支持","没","电源","识别","这块","二合","4gb","串口","存储"],"title":"旭日X3派","title_tokens":["旭日","派","x3"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3m","text":"在旭日X3派上，最为核心的当然就是这颗AI芯片了，这是关于芯片的具体信息，供大家参考。 值得一提的是，随着芯片的技术迭代，2023年，地平线将推出X5芯片，比较大的变化是CPU升级到了8核A55，主频提升到1.8GHz，BPU的算力也将达到8Tops，还加入了GPU，以及更多可扩展的接口。 在使用旭日X3派的过程中，大家也可以期待旭日X5派了。","text_tokens":["x5","派","可以","芯片","多","这是","期待","升级","以及","随着","地平线","，","核心","达到","gpu","更","中","值得一提的是","参考","x3","扩展","ai","比较","cpu","也","是","变化","年","1.8","信息","主频","8tops","大家","2023","核","使用","迭代","的","还","就是","可","上","地平","提升","了","推出","将","最为","过程","8","关于","供"," ","a55","技术","bpu","大","到","旭日","这颗","。","ghz","值得","接口","算力","在","具体","当然","加入"],"title":"旭日X3M芯片","title_tokens":["x3m","旭日","芯片"]},{"location":"TogetherROS/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3_2","text":"好啦，还是回到旭日X3派的开发接口上来，我们再做一个整理，这些就是我们使用开发板进行智能机器人开发过程中，最为常用的接口啦。 大家目前在树莓派或者其他开发板上使用的绝大部分模块，基本都可以在旭日X3派上复用，同时还有更多智能化的玩法等着大家。 关于40Pin扩展接口的序号排布，大家可以看这里，引脚的序号是从靠近HDMI板卡内测的开始算起，是引脚1，然后依次蛇形计数，分别是1、2、3、4、5，一直到这里是39和40。 上图是40PIN扩展接口的详细定义，有3.3V和5V的电源信号，有I2C、I2S、SPI、UART等通信接口，还有很多可动态配置的GPIO信号，基本可以满足各种各样的机器人开发啦。 好啦，关于旭日X3派这块开发板我们已经了解清楚了，具体该如何使用呢，我们后续操作起来。","text_tokens":["可以","2","开始","5v","大部分","呢","机器人","满足","大家","已经","是从","有","通信接口","开发","再","过程","i2c","目前","板卡","gpio","到","在","基本","派","多","后续","各种","还是","树莓","中","做","常用","v","x3","扩展","起来","排布","一直","了解","复用","该","详细","这些","模块","可","3.3","等","了","序号","引脚","或者","然后","39","uart","配置","、","旭日","。","和","1","5","定义","这里","操作","绝大","清楚","上来","着","靠近","同时","40pin","是","很多","开发板","使用","的","计数","就是","都","4","spi","各种各样","智能化","部分","关于","蛇形","分别","起","3","智能","通信","如何","玩法","上图","具体","绝大部分","看","各样","还有","依次","机器","，","一个","好","更","啦","我们","大部","整理","内测","算","上","动态","40","进行","hdmi","电源"," ","信号","这块","i2s","回到","接口","其他","最为"],"title":"旭日X3派接口","title_tokens":["接口","旭日","派","x3"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/","text":"TogetherROS系统安装 我们在旭日X3派上安装系统镜像，并进一步完成TogetherROS系统的安装，大家如果手上有旭日X3派开发板的话，建议跟随一起操作。 先来了解一下TogetherROS系统安装的整体流程： 第一步，要完成硬件的准备，我们需要找到一块旭日X3派的开发板，并且准备好电源线、SD卡、读卡器、串口模块等必要的配件，当然还需要有一台操作的电脑啦。 硬件都准备好之后，就可以进入第二步，给旭日X3派下载并安装Ubuntu系统镜像，这是TogetherROS系统运行必要的底层环境。 第三步，就可以开始安装TogetherROS啦。 安装完成后，我们还需要进一步完成一些配置工作，可以也让旭日X3派板卡上的各项功能都运行起来，保证TogetherROS的顺利运行。 最后一步，就是体验TogetherROS出厂自带的一些例程啦，确定一切安装顺利，为后续机器人开发最好准备。 接下来，我们就按照这个流程，开始操作。 硬件准备 先来完成硬件准备： 找到一块旭日X3派的板卡，准备好一套5V3A的电源和TypeC电源线，稍后会连接到这里的电源接口，给板卡供电。 然后准备好一张8GB以上的SD卡和读卡器，下一步我们会在上边烧写系统镜像。 接下来使用一个串口模块，连接旭日X3派和笔记本电脑，便于下一步看到系统镜像的启动信息。 如果大家有网线和HDMI显示器的话，也可以先准备好，在之后的操作中用的上，如果没有也没关系，不影响TogetherROS系统的基本使用。 硬件准备齐全之后，就可以进入第二步了。 安装Ubuntu系统 我们来给旭日X3派安装Ubuntu系统，关于系统镜像和烧写工具，都可以在 地平线AI社区 中找到。 下载SD卡镜像 首先登录地平线AI社区，点击”产品中心——资源中心“， 进入页面后下拉至”X3派资料包“专区，其中有两个镜像，点击下载其中的”旭日X3派系统镜像（服务版）“，会有一个压缩包，把它保存到当前电脑桌面。 此外，我们稍后将镜像烧写到SD卡里，需要用到烧写小工具，如果大家电脑上没有合适的工具，可以下拉到”工具“专区，点击下载”烧录 工具rufus\"。 下载完后我们来看一下两个压缩文件中的内容： 其中一个是烧写X3派镜像文件的工具，压缩包中有两个文件，一个是system_sdcard.img文件，是我们稍后会用于烧写SD卡的镜像文件；另一个是disk_nand.img文件，用于烧写旭日X3派中的flash文件，大多数情况下都用不到； 另一个压缩包里是我们稍后用于烧写镜像的rufus工具。 我们把两个压缩包都解压出来，然后把SD卡放进读卡器、插到电脑端 接下来就可以开始烧写SD卡镜像。 烧写SD卡镜像 运行解压出来的烧写工具rufus。启动后需要确认几个参数： 第一个是确定烧写到哪个磁盘上。工具软件会默认搜索当前读取到的SD卡，下图所示磁盘名称，就是演示时插好的16GB的SD卡。 下一步我们点击“选择”，找到需要烧写的镜像文件。演示中已经把需要的system_sdcrd.img文件放在了桌面上，选中它点击“打开”； 下面的内容就可以用默认的配置，点击“开始”会弹出警告告诉我们将把磁盘里的所有文件都清除掉，这没有问题，我们点击“选择“，就开始烧写SD卡镜像了。 进度条显示“准备就绪”后，点击“关闭”，此时你的SD卡镜像就已经烧写完成了，我们把SD卡的读卡器拔出来。 连接串口 接下来把SD卡插到旭日X3派上。 把串口模块连接到电脑的USB上。 连接好串口模块后，为了确保串口已经跟电脑连接成功、并且安装好了驱动，我们可以右键“我的电脑”图标、选择“管理”，在打开的”计算机管理“界面中找到”设备管理器——端口“，检查一下你的USB串口是否已经显示出了对应的设备。演示中的端口号为COM6,说明串口已经成功驱动了。 如果没有看到自己的设备号、或者设备号前有一个叹号或者问号标记，说明你的驱动没有安装好，可以搜索网络上的技术博客，来完成串口模块的驱动安装。 关闭“计算机管理”窗口，接下来就要通过串口与旭日X3派进行连接了。这里我们需要用到一个串口小工具，大家可以使用自己常用的工具。 演示中使用的串口工具是MobaXterm,十分推荐大家使用这个工具，里面集成了开发过程中需要使用的各种小工具，我们后续的串口通讯、SSH网络通讯，都会使用这些工具完成。 打开MobaXterm,点击左上角的\"Session\"； 找到里面的“Serial\"串口选项，点击打开；串口号选择本机连接到旭日X3派的相应端口，演示中为COM6; 波特率选择921600。选项好后点击“OK”。 现在串口已经连接成功了，但当前旭日X3派的板子还没有上电，所以没有任何信息弹出。 我们把电源线与旭日X3派连接好。 可以看到弹出了日志提醒：“当前系统正在启动”。等待系统加载完成。 现在可以看到系统已经加载成功了。 串口登录系统 接下来我们需要登录系统。我们有两个账号可以用来登录： 账号1：用户名为root，密码也为root； 账号2：用户名为storise，密码也为storise； 这里演示使用root用户来登录。输入用户名、密码，回车，需要等待大约1分钟，因为第一次登录需要展开一些系统必要的安装软件，安装好后系统会自动重启。 系统自动重启后，再次使用root用户登录。现在你的UBUNTU系统就已经安装好了。 我们可以使用LINUX系统常用的一些命令行进行查看和设置，比如ls查看当前命令，pwd查看当前路径，还可以使用mkdir命令创建文件夹，比如这里,一个test文件夹就创建成功了。 到这里为止，旭日X3派上的Ubuntu系统就安装成功啦，我们继续下一步。 安装TogetherROS系统 安装TogetherROS系统。 为了达到更好的通信效率，我们后续使用有线网络连接旭日X3派，这里大家可以拿出一根网线，直接连接电脑和旭日X3派的网口。 旭日X3派中出厂已经配置好了静态IP地址，是192.168.1.10，我们将使用的电脑也配置到同一网段即可。 配置有线网络 接下来请大家拿一根网线，连接旭日X3派和电脑。 然后，在电脑端打开控制面板，找到“查看网络状态和任务”。 找到已经连接成功的以太网，点击它； 会弹出一个窗口，我们点击“属性”。 再次弹出窗口，我们双击选择“Internet协议版本4”。 然后会弹出一个配置IP地址的窗口，我们勾选”使用下面的IP地址“。 按照如下信息填入： IP地址：192.168.1.100 子网掩码：255.255.255.0 默认网关：192.168.1.1 我们使用的旭日X3派的板子IP为192.168.1.10，所以IP后三位除了.10和网关.1以外，大家可以选用1-255之间的任意数字，这里使用.100； 填写完在所有窗口点击“确定”，最后关闭窗口。现在网络的配置就完成了，此时电脑端的静态IP就是192.168.1.100,我们通过这个IP与旭日X3派产生连接。 SSH远程登录 我们再次打开MobaXterm软件,点击左上角的\"Session\"，找到里面的\"SSH\",输入 旭日X3派板子的IP192.168.1.10，点击”OK“。 弹出登录窗口，我们用root账户登录：用户名为root，密码为root。这里会弹窗询问是否保存登录密码，如果需要保存就点“YES”，不需要保存就点“NO”。 现在我们就成功通过网络SSH协议登录到了旭日X3派板子上，和之前我们用串口登录的效果几乎是一样的，但现在我们是用网络通讯，所以现在通讯的效率和传输的速度会更高。 配置完成网络通讯后，我们来正式安装TogetherROS。 下载TogetherROS安装包 拷贝安装包 我们打开地平线社区的网站，在“产品中心”页面下拉到“机器人平台”，这里面都是TogetherROS相关的资源。 我们找到其中的\"TogetherROS DEB安装包\"，点击下载到电脑端。大概有300多兆的文件大小，很快就能下载完成。 这里我们先使用DEB安装包，来直接安装编译好的二进制文件。未来课程中我们会介绍如何通过源码编译的方式进行安装。 接下来我们进行TogetherROS镜像文件的复制安装。 安装TogetherROS 首先我们需要把电脑端的TogetherROS镜像文件，拷贝到旭日X3派板端。 大家可以在电脑上右键打开一个终端，并使用scp命令进行文件拷贝，命令格式为：scp + 空格 + .\\ + <要拷贝的文件名> + 用户名 + @ + 旭日X3派的IP地址 + :/ +旭日X3派上的文件目录名。 演示中使用的命令如下： $ scp . \\t ros_debV1_20220607894835.0.deb root@192.169.1.10:/userdata 这样就可以将TogetherROS镜像文件从电脑端拷贝到旭日X3派的userdata目录下。 除了这种拷贝方法，大家还可以使用MobaXterm软件，它提供了一种基于SCP命令的可视化的文件复制方式。 大家可以点击MobaXterm软件页面左侧的“SSH browser”，左边显示的目录就是旭日X3派板子上的文件目录结构。 我们找到板子上对应的userdata文件夹，双击打开它。 使用MobaXterm软件，可以把togetherROS镜像文件从电脑本机上直接拖到板子的文件目录底下。 现在TogetherROS安装包已经传输完成。我们在命令行中进入板子的userdata文件夹下，再确认安装包已经存放到了文件夹。命令行： $ cd /userdata/ $ ls 确认完毕后，我们用LINUX命令行dpkg进行安装，命令格式为:\"dpkg -i <要安装的包的名称>“，大家根据自己实际的版本号进行安装。此处使用命令为： $ dpkg -i tros_debV1_20220607094835.0.deb 等待安装完成，我们用命令“cd /opt\"进入opt文件夹，用ls命令检查一下该路径下的文件，可以看到opt文件夹下有一个tros文件夹，这个文件夹里就是我们刚刚安装好的TogetherROS的所有系统文件了。 如果觉得终端里看不方便，也可以使用MobaXterm软件的可视化浏览器来查看。 大家可以点击/opt/tros文件夹，看看其中的文件结构。 /include文件夹里，是我们后续会用到的关于系统的头文件的调用路径； /lib文件夹里面是库文件； /share文件夹里是安装好的功能包的路径； /src文件夹里是后续会用到的代码； /tools文件夹里是一些小工具。 除此之外，还有很多.bat,.sh脚本文件，它们是用来设置环境变量的。这是因为，你的LINUX系统不知道你安装包的路径在哪，所以需要通过环境变量的脚本来告诉系统，如何找到对应的TogetherROS的功能包、和功能包里的命令工具。 环境变量在我们后续操作里会频繁地使用到，我们会使用到一个”source\"命令来配置环境变量，例如： $ source /opt/tros/setup.bash 运行上面这行命令，就会把当前环境变量设置到系统里去；下次再运行ROS2、TogetherROS指令时，就能找到功能包的路径了。 到这里，TogetherROS也安装完成，下一节我们将对开发板和TogetherROS进行配置。","text_tokens":["通讯","控制面板","cd","mkdir","专区","第一次","）","机器人","也","—","密码","第二","前","拉到","设备","大多数","网络","网口","是因为","保证","打开","_","因为","到","提醒","必要","功能","用来","20220607894835.0","几个","账户","基本","填入","派","警告","这是","t","相关","tools",">","起来","地址","介绍","一台","端","成功","可视","数字","同一","镜像文件","拖","跟","集成","产品","源码","scp","ip192.168","解压","推荐","share","多兆","1","能","硬件","端口","日志","配件","命令","方便","ls","属性","flash",":","搜索","一些","自己","的话","开发板","为","放在","source","就是","流程","从","上电",";","本","通信","里面","分钟","最好","头文件","结构","检查一下","看","电脑桌",".",",","机器","多数","一个","远程","好","地","选中","192.168","软件","刚刚","browser","工具软件","左上","电源接口","但","效率","存放","管理","算机","usb","一起","找到","左边","环境变量","需要","完成","sdcard","ok","里会","相应","卡里","可视化","压缩包","烧写","询问","下","接口","300","20220607094835.0","提供","2","标记","路径","填写","账号","另","计算机","no","名","方式","网络连接","镜像","没关","编译","社区","对应","管理器","+","ubuntu","自动","正式","有","选项","就要","如下","再","过程","安装","root","准备","拷贝","用","dpkg","查看","看到","弹","驱动","storise","状态","除此","后续","电脑桌面","如果","serial","来看","中","sh","变量","达到","看看","协议","我","高","接下","任何","i","文件目录","之外","回车","等","了","告诉","等待","插","例如","名称","产生","或者","完毕","运行","底层","进入","底下","是否","各项","；","它","操作","上角","一套","情况","所有","波特","手上","左侧","内容","这","上边","服务","很多","要","指令","件夹","一根","页面","sd","资源","网站","的","双击","以外","并","选择","笔记本","4","文件名","界面","计算机管理","@","bat","桌面","稍后","没有","这样","没关系","波特率","以太网","一块","齐全","首先","bash","第二步","一种","一步","供电","test","pwd","更好","ssh","不到","显示","进度","此时","internet","opt","就点","我们","接下来","你","左上角","（","出厂","端的","hdmi"," ","一节","设置","环境","桌面上","浏览器","读卡","选用","-","自带","就","此外","子网掩码","时","十分","开始","把","重启","包里","255.255","课程","5v3a","一张","口号","系统","目录","文件大小","传输","大家","说明","除了","已经","烧","比如","窗口","开发","大概","除此之外","将","8gb","图标","确定","终端","问题","继续","机","一切","右键","第三","用户名","各种","网络通讯","勾选","演示","192.169","常用","弹窗","x3","拷贝到","以太","让","觉得","控制","了解","网线","system","频繁","该","就绪","完后","未来","第三步","用到","两个","版本","1.100","版","面板","实际","输入","压缩","、","哪","旭日","。","第一","\"","和","跟随","下拉到","这里","工具","一样","ros2","所示","加载","是","其中","ros","效果","下面","都","整体","二进制","setup","影响","关于","文件","出来","include","检查","派板","用户","如何","制面","完在","大约","创建","好后","，","yes","安装包","板子","速度","啦","浏览","userdata","复制","网段","用于","电脑","中心","环境变","还","户名","它们","上","地平","先","正在","根据","进行","lib","版本号","当前","以上","烧录","/","mobaxterm","下来","所以","展开","拿出","网关","之前","行","可以","三步","准备就绪","二步","中有","通过","脚本","921600","几乎","拔出来","com6","出","大多","地平线","第一步","号","问号","ip","默认","下图","关系","空格","信息","串","为止","小","计算","”","此处","之间","这个","\\","技术","连接","写","笔记","板卡","1.1","255","代码","这种","linux","包","给","在","方法","进一步","typec","点击","掉","三位","img","上面","任意","$","debv1","显示器","确保","体验","deb","按照","里","库","会","即可","登录","命令行","之后","读取","：","模块","后","便于","叹","顺利","这些","博客","“","进制","100","端口号","子网","确认","资料","然后","磁盘","一下","合适","第一个","配置","进度条","知道","255.0","清除","笔记本电脑","有线","大小","静态","保存","togetherros","例程","rufus","卡","格式","任务","再次","请","tros","ai","会弹","中用","理器","压缩文件","使用","基于","电源线","弹出","参数","拔出","sdcrd","nand","最后","哪个","src","1.10","平台","读卡器","下次","<","ip地址","去","来","启动","当然","直接","不","10","与","建议","下拉至","session","还有","对","调用","面上","下载","放进","16gb","工作","关闭","更","很快","下拉","文件夹","拿","中为","为了","掩码","机上","名为","并且","现在","电源","一次","系统文件","串口","disk"],"title":"系统安装","title_tokens":["系统","安装"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros","text":"我们在旭日X3派上安装系统镜像，并进一步完成TogetherROS系统的安装，大家如果手上有旭日X3派开发板的话，建议跟随一起操作。 先来了解一下TogetherROS系统安装的整体流程： 第一步，要完成硬件的准备，我们需要找到一块旭日X3派的开发板，并且准备好电源线、SD卡、读卡器、串口模块等必要的配件，当然还需要有一台操作的电脑啦。 硬件都准备好之后，就可以进入第二步，给旭日X3派下载并安装Ubuntu系统镜像，这是TogetherROS系统运行必要的底层环境。 第三步，就可以开始安装TogetherROS啦。 安装完成后，我们还需要进一步完成一些配置工作，可以也让旭日X3派板卡上的各项功能都运行起来，保证TogetherROS的顺利运行。 最后一步，就是体验TogetherROS出厂自带的一些例程啦，确定一切安装顺利，为后续机器人开发最好准备。 接下来，我们就按照这个流程，开始操作。","text_tokens":["可以","三步","二步","读卡","自带","就","第一步","开始","镜像","系统","机器人","也","第二","大家","ubuntu","有","开发","安装","这个","保证","准备","确定","板卡","必要","给","功能","一切","在","进一步","派","第三","后续","如果","这是","体验","x3","起来","按照","让","了解","之后","接下","一台","：","模块","后","第三步","顺利","等","一下","配置","、","旭日","。","运行","底层","第一","进入","跟随","togetherros","硬件","各项","例程","配件","卡","操作","手上","一些","的话","要","开发板","为","sd","的","电源线","就是","并","都","整体","流程","最后","读卡器","一块","最好","来","第二步","当然","一步","建议","机器","下载","，","好","工作","啦","我们","接下来","电脑","还","上","出厂","先","一起","并且","找到","需要","完成","电源"," ","环境","下来","串口"],"title":"TogetherROS系统安装","title_tokens":["togetherros","系统","安装"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_1","text":"先来完成硬件准备： 找到一块旭日X3派的板卡，准备好一套5V3A的电源和TypeC电源线，稍后会连接到这里的电源接口，给板卡供电。 然后准备好一张8GB以上的SD卡和读卡器，下一步我们会在上边烧写系统镜像。 接下来使用一个串口模块，连接旭日X3派和笔记本电脑，便于下一步看到系统镜像的启动信息。 如果大家有网线和HDMI显示器的话，也可以先准备好，在之后的操作中用的上，如果没有也没关系，不影响TogetherROS系统的基本使用。 硬件准备齐全之后，就可以进入第二步了。","text_tokens":["可以","二步","读卡","就","镜像","没关","5v3a","一张","系统","也","关系","第二","信息","大家","有","8gb","准备","连接","笔记","板卡","到","看到","给","在","typec","基本","派","如果","显示器","x3","会","网线","之后","接下","：","模块","便于","了","然后","旭日","。","笔记本电脑","进入","和","togetherros","硬件","这里","卡","操作","一套","上边","的话","中用","使用","sd","的","电源线","笔记本","稍后","没有","影响","没关系","读卡器","一块","齐全","来","第二步","启动","一步","供电","不","，","一个","好","显示","我们","接下来","电脑","电源接口","上","先","找到","完成","hdmi","电源"," ","以上","烧写","下","下来","接口","串口"],"title":"硬件准备","title_tokens":["准备","硬件"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#ubuntu","text":"我们来给旭日X3派安装Ubuntu系统，关于系统镜像和烧写工具，都可以在 地平线AI社区 中找到。","text_tokens":["可以","派","工具","中","地平线","，","镜像","x3","ai","系统","社区","我们","烧","ubuntu","都","地平","找到","安装","关于"," ","写","旭日","。","给","来","在","和"],"title":"安装Ubuntu系统","title_tokens":["安装","ubuntu","系统"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#sd","text":"首先登录地平线AI社区，点击”产品中心——资源中心“， 进入页面后下拉至”X3派资料包“专区，其中有两个镜像，点击下载其中的”旭日X3派系统镜像（服务版）“，会有一个压缩包，把它保存到当前电脑桌面。 此外，我们稍后将镜像烧写到SD卡里，需要用到烧写小工具，如果大家电脑上没有合适的工具，可以下拉到”工具“专区，点击下载”烧录 工具rufus\"。 下载完后我们来看一下两个压缩文件中的内容： 其中一个是烧写X3派镜像文件的工具，压缩包中有两个文件，一个是system_sdcard.img文件，是我们稍后会用于烧写SD卡的镜像文件；另一个是disk_nand.img文件，用于烧写旭日X3派中的flash文件，大多数情况下都用不到； 另一个压缩包里是我们稍后用于烧写镜像的rufus工具。 我们把两个压缩包都解压出来，然后把SD卡放进读卡器、插到电脑端 接下来就可以开始烧写SD卡镜像。","text_tokens":["可以","中有","读卡","另","此外","就","专区","大多","地平线","把","开始","镜像","）","系统","—","社区","拉到","大家","烧","小","有","将","大多数","”","写","用","_","到","包","点击","派","img","电脑桌面","如果","来看","中","x3","里","会","登录","system","接下","完后","：","后","“","用到","两个","插","端","版","资料","然后","一下","合适","镜像文件","压缩","、","产品","旭日","。","解压","进入","\"","保存","下拉到","；","rufus","它","工具","卡","情况","flash","内容","ai","服务","是","页面","压缩文件","其中","资源","sd","的","都","nand","桌面","稍后","没有","文件","出来","读卡器","首先","电脑桌","下拉至",".","多数","下载","，","一个","放进","不到","下拉","我们","接下来","用于","电脑","中心","（","上","地平","需要","sdcard"," ","当前","卡里","压缩包","烧写","烧录","下","下来","disk"],"title":"下载SD卡镜像","title_tokens":["卡","镜像","sd","下载"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#sd_1","text":"运行解压出来的烧写工具rufus。启动后需要确认几个参数： 第一个是确定烧写到哪个磁盘上。工具软件会默认搜索当前读取到的SD卡，下图所示磁盘名称，就是演示时插好的16GB的SD卡。 下一步我们点击“选择”，找到需要烧写的镜像文件。演示中已经把需要的system_sdcrd.img文件放在了桌面上，选中它点击“打开”； 下面的内容就可以用默认的配置，点击“开始”会弹出警告告诉我们将把磁盘里的所有文件都清除掉，这没有问题，我们点击“选择“，就开始烧写SD卡镜像了。 进度条显示“准备就绪”后，点击“关闭”，此时你的SD卡镜像就已经烧写完成了，我们把SD卡的读卡器拔出来。","text_tokens":["可以","准备就绪","读卡","就","拔出来","出","时","把","开始","镜像","默认","下图","已经","烧","将","”","打开","准备","写","确定","用","_","问题","到","几个","点击","掉","img","警告","演示","中","里","会","system","就绪","读取","：","后","“","了","告诉","插","名称","确认","磁盘","第一个","配置","进度条","镜像文件","。","运行","清除","解压","第一","；","rufus","它","工具","卡","所有","所示","搜索","内容","这","会弹","是","sd","放在","的","就是","下面","选择","都","参数","拔出","sdcrd","桌面","没有","文件","哪个","出来","读卡器","启动","一步",".","面上","一个","，","16gb","好","关闭","显示","进度","此时","选中","软件","工具软件","我们","你","上","找到","需要","完成"," ","当前","烧写","下","桌面上"],"title":"烧写SD卡镜像","title_tokens":["卡","镜像","sd","烧写"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_2","text":"接下来把SD卡插到旭日X3派上。 把串口模块连接到电脑的USB上。 连接好串口模块后，为了确保串口已经跟电脑连接成功、并且安装好了驱动，我们可以右键“我的电脑”图标、选择“管理”，在打开的”计算机管理“界面中找到”设备管理器——端口“，检查一下你的USB串口是否已经显示出了对应的设备。演示中的端口号为COM6,说明串口已经成功驱动了。 如果没有看到自己的设备号、或者设备号前有一个叹号或者问号标记，说明你的驱动没有安装好，可以搜索网络上的技术博客，来完成串口模块的驱动安装。 关闭“计算机管理”窗口，接下来就要通过串口与旭日X3派进行连接了。这里我们需要用到一个串口小工具，大家可以使用自己常用的工具。 演示中使用的串口工具是MobaXterm,十分推荐大家使用这个工具，里面集成了开发过程中需要使用的各种小工具，我们后续的串口通讯、SSH网络通讯，都会使用这些工具完成。 打开MobaXterm,点击左上角的\"Session\"； 找到里面的“Serial\"串口选项，点击打开；串口号选择本机连接到旭日X3派的相应端口，演示中为COM6; 波特率选择921600。选项好后点击“OK”。 现在串口已经连接成功了，但当前旭日X3派的板子还没有上电，所以没有任何信息弹出。 我们把电源线与旭日X3派连接好。 可以看到弹出了日志提醒：“当前系统正在启动”。等待系统加载完成。 现在可以看到系统已经加载成功了。","text_tokens":["可以","通讯","标记","通过","921600","计算机","com6","出","号","十分","把","问号","口号","系统","—","前","信息","对应","管理器","串","大家","设备","说明","已经","小","有","计算","选项","窗口","开发","就要","网络","”","过程","安装","这个","图标","打开","技术","连接","到","提醒","机","看到","弹","驱动","在","点击","派","右键","后续","如果","各种","网络通讯","serial","演示","中","常用","确保","x3","会","我","接下","任何","这些","模块","后","叹","：","博客","“","用到","了","等待","插","成功","端口号","或者","一下","跟","、","旭日","。","集成","推荐","\"","是否","端口","；","日志","这里","卡","工具","上角","波特","搜索","自己","加载","是","理器","使用","为","sd","的","电源线","选择","都","弹出","界面","计算机管理","没有","上电",";","检查","本","里面","波特率","来","启动","检查一下","与","好后","session",",","ssh","，","一个","好","关闭","显示","板子","中为","为了","我们","接下来","左上","电脑","你","还","左上角","但","管理","上","算机","usb","正在","并且","现在","找到","进行","需要","完成","电源"," ","ok","当前","相应","mobaxterm","下来","所以","串口"],"title":"连接串口","title_tokens":["串口","连接"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_3","text":"接下来我们需要登录系统。我们有两个账号可以用来登录： 账号1：用户名为root，密码也为root； 账号2：用户名为storise，密码也为storise； 这里演示使用root用户来登录。输入用户名、密码，回车，需要等待大约1分钟，因为第一次登录需要展开一些系统必要的安装软件，安装好后系统会自动重启。 系统自动重启后，再次使用root用户登录。现在你的UBUNTU系统就已经安装好了。 我们可以使用LINUX系统常用的一些命令行进行查看和设置，比如ls查看当前命令，pwd查看当前路径，还可以使用mkdir命令创建文件夹，比如这里,一个test文件夹就创建成功了。 到这里为止，旭日X3派上的Ubuntu系统就安装成功啦，我们继续下一步。","text_tokens":["可以","2","路径","账号","就","mkdir","重启","第一次","系统","也","密码","为止","已经","比如","ubuntu","自动","有","安装","root","因为","继续","到","linux","必要","查看","storise","用来","派","用户名","演示","常用","x3","会","登录","命令行","接下","：","后","回车","两个","了","等待","成功","输入","、","。","旭日","第一","和","1","；","这里","命令","ls","再次","一些","件夹","使用","为","的","文件","用户","分钟","来","大约","一步","创建","test","好后",",","pwd","，","一个","好","文件夹","软件","啦","我们","接下来","你","还","名为","户名","上","现在","进行","需要"," ","当前","一次","设置","下","下来","展开"],"title":"串口登录系统","title_tokens":["登录","系统","串口"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros_1","text":"安装TogetherROS系统。 为了达到更好的通信效率，我们后续使用有线网络连接旭日X3派，这里大家可以拿出一根网线，直接连接电脑和旭日X3派的网口。 旭日X3派中出厂已经配置好了静态IP地址，是192.168.1.10，我们将使用的电脑也配置到同一网段即可。","text_tokens":["可以","派","后续",".","更好","这里","中","，","达到","网络连接","好","x3","系统","也","是","192.168","即可","网线","一根","为了","地址","我们","使用","大家","网段","电脑","已经","的","效率","出厂","了","将","网络","网口","安装"," ","连接","配置","同一","1.10","到","。","通信","旭日","有线","ip地址","拿出","静态","和","togetherros","直接"],"title":"安装TogetherROS系统","title_tokens":["togetherros","安装","系统"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_4","text":"接下来请大家拿一根网线，连接旭日X3派和电脑。 然后，在电脑端打开控制面板，找到“查看网络状态和任务”。 找到已经连接成功的以太网，点击它； 会弹出一个窗口，我们点击“属性”。 再次弹出窗口，我们双击选择“Internet协议版本4”。 然后会弹出一个配置IP地址的窗口，我们勾选”使用下面的IP地址“。 按照如下信息填入： IP地址：192.168.1.100 子网掩码：255.255.255.0 默认网关：192.168.1.1 我们使用的旭日X3派的板子IP为192.168.1.10，所以IP后三位除了.10和网关.1以外，大家可以选用1-255之间的任意数字，这里使用.100； 填写完在所有窗口点击“确定”，最后关闭窗口。现在网络的配置就完成了，此时电脑端的静态IP就是192.168.1.100,我们通过这个IP与旭日X3派产生连接。","text_tokens":["可以","控制面板","选用","-","填写","通过","就","子网掩码","出","ip","255.255","默认","信息","大家","除了","已经","窗口","如下","网络","”","之间","这个","打开","连接","确定","1.1","255","查看","弹","在","状态","三位","填入","点击","派","任意","勾选","x3","按照","以太","控制","网线","协议","地址","接下","：","后","“","了","100","端","成功","版本","1.100","面板","子网","产生","数字","然后","配置","255.0","旭日","。","静态","和","1","；","它","这里","任务","属性","所有","再次","请","会弹","一根","使用","为","的","双击","以外","就是","下面","选择","4","最后","1.10","以太网","ip地址","制面","完在","10","与",".",",","，","一个","关闭","此时","internet","板子","192.168","拿","掩码","我们","接下来","电脑","现在","找到","完成","端的"," ","下来","网关","所以"],"title":"配置有线网络","title_tokens":["网络","配置","有线"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#ssh","text":"我们再次打开MobaXterm软件,点击左上角的\"Session\"，找到里面的\"SSH\",输入 旭日X3派板子的IP192.168.1.10，点击”OK“。 弹出登录窗口，我们用root账户登录：用户名为root，密码为root。这里会弹窗询问是否保存登录密码，如果需要保存就点“YES”，不需要保存就点“NO”。 现在我们就成功通过网络SSH协议登录到了旭日X3派板子上，和之前我们用串口登录的效果几乎是一样的，但现在我们是用网络通讯，所以现在通讯的效率和传输的速度会更高。 配置完成网络通讯后，我们来正式安装TogetherROS。","text_tokens":["通讯","通过","就","几乎","no","出","密码","传输","正式","窗口","网络","”","安装","root","打开","用","到","弹","账户","点击","派","如果","网络通讯","弹窗","x3","会","登录","协议","高","：","后","“","了","成功","输入","配置","旭日","。","ip192.168","\"","和","保存","togetherros","是否","这里","上角","一样","再次","是","为","的","效果","1.10","用户","里面","来","不","session",".",",","ssh","，","yes","更","板子","速度","软件","就点","我们","左上","左上角","但","效率","名为","上","现在","找到","需要","完成"," ","ok","询问","mobaxterm","所以","之前","串口"],"title":"SSH远程登录","title_tokens":["登录","ssh","远程"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros_2","text":"","text_tokens":[],"title":"下载TogetherROS安装包","title_tokens":["安装包","togetherros","下载","安装"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_5","text":"我们打开地平线社区的网站，在“产品中心”页面下拉到“机器人平台”，这里面都是TogetherROS相关的资源。 我们找到其中的\"TogetherROS DEB安装包\"，点击下载到电脑端。大概有300多兆的文件大小，很快就能下载完成。 这里我们先使用DEB安装包，来直接安装编译好的二进制文件。未来课程中我们会介绍如何通过源码编译的方式进行安装。 接下来我们进行TogetherROS镜像文件的复制安装。","text_tokens":["下拉到","通过","就","机器","这里","中","地平线","，","下载","方式","好","相关","很快","安装包","编译","课程","下拉","镜像","这","deb","机器人","文件大小","是","会","能","社区","拉到","页面","介绍","我们","其中","资源","使用","直接","电脑","中心","的","网站","接下","未来","接下来","有","都","进制","地平","“","大概","先","找到","端","二进制","进行","”","完成","安装"," ","打开","文件","复制","镜像文件","到","平台","产品","。","里面","300","如何","源码","大小","下来","多兆","来","\"","在","togetherros","点击"],"title":"拷贝安装包","title_tokens":["安装包","拷贝","安装"]},{"location":"TogetherROS/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros_3","text":"首先我们需要把电脑端的TogetherROS镜像文件，拷贝到旭日X3派板端。 大家可以在电脑上右键打开一个终端，并使用scp命令进行文件拷贝，命令格式为：scp + 空格 + .\\ + <要拷贝的文件名> + 用户名 + @ + 旭日X3派的IP地址 + :/ +旭日X3派上的文件目录名。 演示中使用的命令如下： $ scp . \\t ros_debV1_20220607894835.0.deb root@192.169.1.10:/userdata 这样就可以将TogetherROS镜像文件从电脑端拷贝到旭日X3派的userdata目录下。 除了这种拷贝方法，大家还可以使用MobaXterm软件，它提供了一种基于SCP命令的可视化的文件复制方式。 大家可以点击MobaXterm软件页面左侧的“SSH browser”，左边显示的目录就是旭日X3派板子上的文件目录结构。 我们找到板子上对应的userdata文件夹，双击打开它。 使用MobaXterm软件，可以把togetherROS镜像文件从电脑本机上直接拖到板子的文件目录底下。 现在TogetherROS安装包已经传输完成。我们在命令行中进入板子的userdata文件夹下，再确认安装包已经存放到了文件夹。命令行： $ cd /userdata/ $ ls 确认完毕后，我们用LINUX命令行dpkg进行安装，命令格式为:\"dpkg -i <要安装的包的名称>“，大家根据自己实际的版本号进行安装。此处使用命令为： $ dpkg -i tros_debV1_20220607094835.0.deb 等待安装完成，我们用命令“cd /opt\"进入opt文件夹，用ls命令检查一下该路径下的文件，可以看到opt文件夹下有一个tros文件夹，这个文件夹里就是我们刚刚安装好的TogetherROS的所有系统文件了。 如果觉得终端里看不方便，也可以使用MobaXterm软件的可视化浏览器来查看。 大家可以点击/opt/tros文件夹，看看其中的文件结构。 /include文件夹里，是我们后续会用到的关于系统的头文件的调用路径； /lib文件夹里面是库文件； /share文件夹里是安装好的功能包的路径； /src文件夹里是后续会用到的代码； /tools文件夹里是一些小工具。 除此之外，还有很多.bat,.sh脚本文件，它们是用来设置环境变量的。这是因为，你的LINUX系统不知道你安装包的路径在哪，所以需要通过环境变量的脚本来告诉系统，如何找到对应的TogetherROS的功能包、和功能包里的命令工具。 环境变量在我们后续操作里会频繁地使用到，我们会使用到一个”source\"命令来配置环境变量，例如： $ source /opt/tros/setup.bash 运行上面这行命令，就会把当前环境变量设置到系统里去；下次再运行ROS2、TogetherROS指令时，就能找到功能包的路径了。 到这里，TogetherROS也安装完成，下一节我们将对开发板和TogetherROS进行配置。","text_tokens":["可以","提供","脚本","路径","-","cd","通过","就","名","时","方式","把","包里","镜像","目录","系统","也","空格","对应","传输","大家","除了","+","已经","小","有","开发","除此之外","如下","将","再","”","此处","安装","root","这个","\\","打开","拷贝","是因为","用","终端","dpkg","_","因为","到","代码","这种","linux","查看","看到","包","功能","20220607894835.0","在","方法","用来","除此","点击","派","右键","用户名","后续","如果","上面","t","演示","$","中","debv1","192.169","sh","变量","tools","拷贝到","x3",">","deb","里","看看","库","觉得","会","命令行","地址","频繁","该","i","：","后","文件目录","之外","“","用到","了","告诉","等待","端","可视","名称","实际","版本","例如","确认","一下","知道","配置","镜像文件","拖","哪","、","旭日","。","scp","完毕","运行","share","进入","\"","和","togetherros","底下","能","；","它","格式","命令","工具","操作","方便","ls","所有","这里",":","ros2","左侧","这","tros","自己","一些","是","很多","要","指令","件夹","页面","开发板","使用","为","其中","基于","的","ros","双击","source","就是","并","文件名","@","bat","setup","关于","这样","从","文件","include","派板","检查","1.10","用户","本","src","里面","如何","下次","<","ip地址","去","首先","来","一种","bash","头文件","结构","检查一下","直接","不","看","还有","对",".",",","调用","ssh","，","一个","好","安装包","地","显示","板子","文件夹","软件","刚刚","浏览","browser","opt","userdata","复制","我们","环境变","电脑","你","机上","还","存放","户名","它们","上","现在","找到","左边","进行","根据","需要","端的","完成","版本号","lib","环境变量"," ","当前","里会","一节","可视化","设置","/","系统文件","下","mobaxterm","环境","所以","行","20220607094835.0","浏览器"],"title":"安装TogetherROS","title_tokens":["togetherros","安装"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/","text":"TogetherROS系统配置 无论是旭日X3派，还是TogetherROS，在正式使用之前，都还需要进行一些必要的配置，完善必要的功能模块，提供完整的算力支持，达到最佳状态。 网络连接 第一个配置，是无线网络连接。 当然，大家也可以直接用网线连接旭日X3派和一个可以上网的路由器，不过更多时候，我们还是会使用无线网络来上网。 我们打开MobaXterm,选择SSH，使用root用户登录板卡；如果之前登录过板卡、还没有关闭的话，也可以继续使用。 现在我们可以通过命令行搜索周边环境有哪些WIFI信号，命令如下： $ sudo nmcli device wifi rescan #扫描当前环境里所有WIFI名称，但扫描结果不会显示 $ nmcli device wifi list #显示扫描到的WIFI名称 $ sudo nmcli device wifi connect <账号> password <密码> #连接WIFI $ sudo vim /etc/network/interfaces #修改DHCP配置 比如，我的办公室里wifi的名称是psmicro,我们就可以使用“sudo nmcli device wifi connect psmicro password <密码>”来连接。 等到终端返回信息“successfully activated\",就说明WIFI连接成功； 我们可以Ping古月居的网址，来检查一下连接。如果能够Ping通，就说明网络已经连接成功，现在就可以成功连接到互联网，进行后续的软件下载和更新了。 网络配置完成后，在后续开发中，大家就可以直接下载或更新各种软件包了。 系统更新 第二个配置，是更新当前旭日X3派所使用的Ubuntu镜像，和在电脑上使用的命令相同。 我们更新一下当前的系统镜像： $ sudo apt update #会按照当前软件源的域名设置去连接远程软件源 $ sudo apt full-upgrade #升级所有可以升级的软件包 弹出如下对话，我们选择“Y”，回车； 这样我们就完成了对系统更新的检查，并安装好了更新包。 CPU调频策略 第三个配置，设置CPU的调频策略，这是一个可选项，大家了解之后，在未来需要使用的时候进行配置即可。 动态调频 $ echo > ondemand /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让系统根据当前负载，动态调整CPU频率 满频模式 $ echo > performance /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让CPU始终以满频，也就1.2GHz的频率工作 打开超频 $ echo 1 > /sys/devices/system/cpu/cpufreq/boost #使CPU以超频，也就是1.5GHz的频率工作 关闭超频 $ echo 0 > /sys/devices/system/cpu/cpufreq/boost 这里CPU频率为，满频模式：1.2GHz，超频模式：1.5GHz。 大家需要注意，默认的系统配置是关闭超频、并且动态调频的配置。这样可以比较好地保证功率最优。 安装ROS2功能包 接下来，还有一个很重要的配置，那就是安装ROS2功能包，我们说TogetherROS是基于ROS2深度优化的，很多模块还是会复用ROS2中的功能，所有ROS2的原生功能也可以支持，这里我们就把ROS2必要的功能包都安装一下，让系统的功能模块更加完整。 熟悉ROS2的同学，应该对这些指令并不陌生，和ROS2官方手册中的安装步骤一致，不过还是建议大家跟着课程的步骤一起来安装一下。 添加ROS2源 第一步我们需要更新系统软件源，并安装必要的下载工具。 $ sudo apt update && sudo apt install curl gnupg lsb-release #更新软件源 $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg #设置ROS2软件源秘钥 $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null #设置ROS2软件源 Attention 大部分国内开发者在这都会遇到同一个问题：网址无法连接。解决方案可以参考古月居官网上的这篇帖子： 《解决”Failed to connect to raw.githubusercontent.com“报错》 安装ROS2包 $ sudo apt update #更新软件源 $ sudo apt install ros-foxy-ros-base ros-foxy-demo-nodes-cpp # 安装ROS2功能包 时间会有些长，需要稍微等待一下。 现在ROS2就安装完成了。 大家可以使用同样的命令，继续安装ROS2中的更多功能包。 这里推荐大家先安装ROS2之后会使用到的编译器，比如python3-colcon-common-extensions。我们后续一些TogetherROS功能包的编译，也会使用python3-colcon-common的命令来安装。 $ sudo apt install python3-colcon-common-extensions # ROS2编译器 另外，我们推荐大家安装一个git工具，大家可以通过它下载GitHub、GitLab上的软件包，我们后续也会用到。安装命令为本小节代码第四行。 $ sudo apt install git # 安装git工具 到这里，我们常用的软件和功能包就安装完成了。我们可以看到，在旭日X3派文件目录/opt底下，除了之前的/tros文件夹外，还多出来一个/ros文件夹，里面就是我们刚才安装好的ros-foxy版本的所有系统文件。 如果大家要使用ROS2的功能包，也需要source里面的.bash或者.bat脚本文件。 建立软链接 为了方便我们在TogetherROS系统李调用ROS2的功能，在TogetherROS里提供了一个叫create_soft_link创建软链接的脚本，它而已通过软链接，把ROS2的环境变量链接到当前TogetherROS的环境包里来。执行以下命令： $ cd /opt/tros ## 使用/opt/tros目录下的create_soft_link.py创建ROS package至TogetherROS的软链接 $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros 这样设置以后，假如你source了TogetherROS的环境变量，那么同样的配置也会对ROS2生效。 好啦，到这里为止，所有必要的配置项我们都做完了，是不是有点迫不及待想要使用TogetherROS了呢？","text_tokens":["os","cd","gnupg","有点","key","soft","链接","大部分","参考","另外","wifi","呢","也","密码","第二","网络","保证","打开","使","_","到","扫描","必要","官方","功能","connect","null","编译器","派","下载工具","这是","(",">","起来","keyring","governor","重要","稍微","attention","满频","古月","熟悉","不过","boost","base","成功","统配","main","同一","时间","https","archive","推荐","share","0","1","命令","方便","添加",":","搜索","一些","--","的话","gitlab","colcon","》","为","能够","无线","source","to","对话","就是","sudo","部分","以后","修改","packages","应该","四行",")","里面","signed","居官","算力","检查一下",".",",","刚才","想要","一个","远程","好","地","或","cpu","软件","软件包","无线网络","devices","报错","但","gpg","秘钥","echo","办公室","执行","环境变量","需要","完成","陌生","路由器","下","返回","rescan","提供","master","账号","performance","=","]","网络连接","ondemand","镜像","编译","是不是","假如","完整","很","ubuntu","正式","有","选项","居","如下","更加","curl","解决方案","安装","root","？","用","dpkg","弹","以满频","看到","full","状态","所","后续","如果","usr","中","说","变量","达到","而已","package","1.5","小节","ping","我","不是","upgrade","联网","接下","项","nmcli","文件目录","系统配","回车","了","等待","名称","nodes","或者","|","系统软件","&&","一","print","不及","底下","；","注意","它","cpufreq","无论","所有","这篇","域名","这","哪些","同学","很多","指令","要","件夹","多功能","的","1.2","并","选择","bat","by","demo","没有","这样","周边环境","architecture","create","tee","ghz","通","bash","负载","common","一步","建立","长","第四行","ssh","至","原生","release","显示","最优","方案","py","arch","opt","apt","我们","完","接下来","你","etc","sources","#","第三个","生效"," ","信号","调频","githubusercontent","ssl","设置","环境","第四","scaling","cpp","同样","以下","-","就","网址","最佳","频率","dhcp","把","d","包里","课程","policy0","系统","手册","目录","大家","说明","除了","已经","比如","深度","foxy","开发","有些","完善","link","install","终端","问题","继续","y","多","更新","第三","各种","三个","调整","codename","常用","x3","过","让","网线","了解","system","复用","未来","用到","以","步骤","版本","rosdistro","、","旭日","。","update","org","始终","第一","device","\"","和","网上","无线网","外","《","##","升级","这里","工具","二个","ros2","是","ros","软","都","sys","一致","文件","出来","检查","用户","办公","创建","达到最佳","模式","，","国内","互联","啦","互联网","com","环境变","电脑","还","李","上","动态","先","路由","根据","进行","遇到","系统配置","当前","功能模块","公室","跟着","那么","/","mobaxterm","下来","之前","keyrings","为本","可以","脚本","通过","出","第一步","默认","相同","信息","dev","功率","为止","等到","extensions","”","连接","板卡","代码","interfaces","http","包","在","上网","lsb","包都","还是","$","做","deb","按照","里","比较","会","即可","登录","命令行","之后","线网","：","模块","后","这些","vim","“","时候","解决","successfully","开发者","对系统","[","第一个","一下","配置","无法","github","不会","无论是","togetherros","psmicro","结果","帖子","可选项","tros","failed","使用","基于","更新包","password","python3","周边","raw","第二个","可选","同一个","<","去","来","直接","当然","不","还有","对","建议","迫不及待","调用","下载","那","更","关闭","工作","activated","list","叫","文件夹","为了","大部","超频","优化","现在","并且","o","支持","network","git","系统文件","源","策略"],"title":"系统配置","title_tokens":["系统配","配置","系统","统配","系统配置"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#togetherros","text":"无论是旭日X3派，还是TogetherROS，在正式使用之前，都还需要进行一些必要的配置，完善必要的功能模块，提供完整的算力支持，达到最佳状态。","text_tokens":["提供","派","达到最佳","最佳","还是","无论","，","达到","x3","一些","完整","使用","的","还","模块","正式","都","完善","进行","需要","支持","功能模块","配置","旭日","。","必要","功能","之前","算力","在","状态","无论是","togetherros"],"title":"TogetherROS系统配置","title_tokens":["系统配","配置","系统","统配","系统配置","togetherros"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_1","text":"第一个配置，是无线网络连接。 当然，大家也可以直接用网线连接旭日X3派和一个可以上网的路由器，不过更多时候，我们还是会使用无线网络来上网。 我们打开MobaXterm,选择SSH，使用root用户登录板卡；如果之前登录过板卡、还没有关闭的话，也可以继续使用。 现在我们可以通过命令行搜索周边环境有哪些WIFI信号，命令如下： $ sudo nmcli device wifi rescan #扫描当前环境里所有WIFI名称，但扫描结果不会显示 $ nmcli device wifi list #显示扫描到的WIFI名称 $ sudo nmcli device wifi connect <账号> password <密码> #连接WIFI $ sudo vim /etc/network/interfaces #修改DHCP配置 比如，我的办公室里wifi的名称是psmicro,我们就可以使用“sudo nmcli device wifi connect psmicro password <密码>”来连接。 等到终端返回信息“successfully activated\",就说明WIFI连接成功； 我们可以Ping古月居的网址，来检查一下连接。如果能够Ping通，就说明网络已经连接成功，现在就可以成功连接到互联网，进行后续的软件下载和更新了。 网络配置完成后，在后续开发中，大家就可以直接下载或更新各种软件包了。","text_tokens":["可以","通过","账号","就","网址","dhcp","wifi","也","密码","信息","大家","说明","已经","比如","有","等到","开发","居","如下","网络","”","root","打开","连接","用","终端","板卡","继续","到","扫描","interfaces","connect","在","派","上网","多","后续","如果","更新","各种","还是","$","中","x3",">","里","过","会","登录","网线","命令行","ping","我","联网","线网","：","nmcli","后","古月","vim","“","不过","时候","了","successfully","成功","名称","第一个","一下","配置","、","。","旭日","第一","device","不会","\"","和","psmicro","无线网","结果","；","命令","所有","搜索","的话","哪些","是","使用","能够","无线","的","选择","password","sudo","周边","没有","周边环境","修改","检查","用户","<","通","来","办公","检查一下","直接","当然",",","ssh","下载","，","一个","更","关闭","activated","显示","list","或","互联","软件","互联网","无线网络","软件包","我们","还","但","etc","#","现在","办公室","路由","进行","完成","network"," ","当前","路由器","信号","公室","/","mobaxterm","环境","返回","之前","rescan"],"title":"网络连接","title_tokens":["网络","网络连接","连接"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_2","text":"第二个配置，是更新当前旭日X3派所使用的Ubuntu镜像，和在电脑上使用的命令相同。 我们更新一下当前的系统镜像： $ sudo apt update #会按照当前软件源的域名设置去连接远程软件源 $ sudo apt full-upgrade #升级所有可以升级的软件包 弹出如下对话，我们选择“Y”，回车； 这样我们就完成了对系统更新的检查，并安装好了更新包。","text_tokens":["可以","派","更新","-","；","就","升级","命令","$","出","，","二个","远程","所有","镜像","好","x3","相同","按照","系统","域名","是","会","软件","第二","软件包","apt","所","使用","我们","电脑","upgrade","的","：","ubuntu","对话","并","更新包","选择","上","“","sudo","回车","#","了","如下","”","完成","安装","这样"," ","对系统","当前","连接","一下","第二个","配置","检查","设置","旭日","。","update","源","弹","去","full","在","和","y"],"title":"系统更新","title_tokens":["系统","更新"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#cpu","text":"第三个配置，设置CPU的调频策略，这是一个可选项，大家了解之后，在未来需要使用的时候进行配置即可。 动态调频 $ echo > ondemand /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让系统根据当前负载，动态调整CPU频率 满频模式 $ echo > performance /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让CPU始终以满频，也就1.2GHz的频率工作 打开超频 $ echo 1 > /sys/devices/system/cpu/cpufreq/boost #使CPU以超频，也就是1.5GHz的频率工作 关闭超频 $ echo 0 > /sys/devices/system/cpu/cpufreq/boost 这里CPU频率为，满频模式：1.2GHz，超频模式：1.5GHz。 大家需要注意，默认的系统配置是关闭超频、并且动态调频的配置。这样可以比较好地保证功率最优。","text_tokens":["可以","就","频率","performance","ondemand","policy0","默认","系统","也","功率","大家","选项","保证","打开","使","_","以满频","在","第三","这是","三个","调整","$","1.5",">","比较","让","即可","governor","了解","system","之后","未来","满频","：","系统配","时候","boost","以","统配","配置","、","。","始终","0","1","注意","这里","cpufreq","可选项","是","使用","为","的","1.2","就是","sys","这样","可选","ghz","负载","模式","，","一个","好","工作","关闭","地","最优","cpu","devices","超频","echo","动态","#","并且","根据","第三个","进行","需要","系统配置"," ","当前","调频","设置","/","scaling","策略"],"title":"CPU调频策略","title_tokens":["调频","cpu","策略"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2","text":"接下来，还有一个很重要的配置，那就是安装ROS2功能包，我们说TogetherROS是基于ROS2深度优化的，很多模块还是会复用ROS2中的功能，所有ROS2的原生功能也可以支持，这里我们就把ROS2必要的功能包都安装一下，让系统的功能模块更加完整。 熟悉ROS2的同学，应该对这些指令并不陌生，和ROS2官方手册中的安装步骤一致，不过还是建议大家跟着课程的步骤一起来安装一下。","text_tokens":["可以","不","还有","对","建议","就","包都","还是","这里","中","说","，","一个","所有","那","ros2","原生","把","课程","起来","系统","手册","也","让","是","会","很多","同学","复用","指令","重要","很","完整","我们","大家","接下来","基于","接下","的","这些","深度","就是","模块","并","熟悉","不过","优化","更加","步骤","支持","安装","陌生"," ","一致","功能模块","一下","应该","配置","跟着","。","必要","下来","包","官方","功能","一","和","togetherros"],"title":"安装ROS2功能包","title_tokens":["功能","包","ros2","安装"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2_1","text":"第一步我们需要更新系统软件源，并安装必要的下载工具。 $ sudo apt update && sudo apt install curl gnupg lsb-release #更新软件源 $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg #设置ROS2软件源秘钥 $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null #设置ROS2软件源 Attention 大部分国内开发者在这都会遇到同一个问题：网址无法连接。解决方案可以参考古月居官网上的这篇帖子： 《解决”Failed to connect to raw.githubusercontent.com“报错》","text_tokens":["可以","os","-","master","网址","gnupg","=","key","第一步","]","d","大部分","参考","系统","dev","ubuntu","开发","curl","解决方案","”","安装","install","连接","dpkg","_","问题","必要","http","null","connect","在","下载工具","更新","lsb","usr","(","codename","$",">","deb","keyring","会","attention","：","古月","“","解决","开发者","main","系统软件","|","[","rosdistro","同一","&&","org","。","update","https","无法","archive","第一","share","print","\"","网上","《","帖子","工具","这篇",":","ros2","这","--","failed","》","的","ros","source","to","并","都","sudo","by","raw","architecture","部分","packages","tee",")","同一个","signed","居官","一步",".","下载","，","国内","一个","release","方案","list","软件","arch","apt","com","我们","大部","报错","etc","gpg","秘钥","echo","sources","#","需要","o","遇到"," ","githubusercontent","ssl","设置","/","源","keyrings"],"title":"添加ROS2源","title_tokens":["ros2","添加","源"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2_2","text":"$ sudo apt update #更新软件源 $ sudo apt install ros-foxy-ros-base ros-foxy-demo-nodes-cpp # 安装ROS2功能包 时间会有些长，需要稍微等待一下。 现在ROS2就安装完成了。 大家可以使用同样的命令，继续安装ROS2中的更多功能包。 这里推荐大家先安装ROS2之后会使用到的编译器，比如python3-colcon-common-extensions。我们后续一些TogetherROS功能包的编译，也会使用python3-colcon-common的命令来安装。 $ sudo apt install python3-colcon-common-extensions # ROS2编译器 另外，我们推荐大家安装一个git工具，大家可以通过它下载GitHub、GitLab上的软件包，我们后续也会用到。安装命令为本小节代码第四行。 $ sudo apt install git # 安装git工具 到这里，我们常用的软件和功能包就安装完成了。我们可以看到，在旭日X3派文件目录/opt底下，除了之前的/tros文件夹外，还多出来一个/ros文件夹，里面就是我们刚才安装好的ros-foxy版本的所有系统文件。 如果大家要使用ROS2的功能包，也需要source里面的.bash或者.bat脚本文件。","text_tokens":["可以","脚本","-","通过","就","编译","另外","目录","系统","也","大家","除了","比如","foxy","有些","extensions","安装","install","继续","到","代码","看到","包","功能","编译器","在","派","多","更新","后续","如果","$","中","常用","x3","会","小节","稍微","之后","文件目录","用到","base","了","等待","版本","nodes","或者","一下","时间","、","update","。","旭日","推荐","github","和","togetherros","底下","外","这里","工具","命令","它","所有","ros2","tros","一些","gitlab","要","colcon","件夹","使用","多功能","的","ros","source","就是","python3","sudo","bat","demo","文件","四行","出来","里面","来","bash","common",".","长","刚才","第四行","下载","，","一个","好","更","文件夹","软件","软件包","opt","apt","我们","还","上","#","先","现在","需要","完成","git"," ","/","系统文件","源","第四","之前","cpp","同样","为本"],"title":"安装ROS2包","title_tokens":["包","ros2","安装"]},{"location":"TogetherROS/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_3","text":"为了方便我们在TogetherROS系统李调用ROS2的功能，在TogetherROS里提供了一个叫create_soft_link创建软链接的脚本，它而已通过软链接，把ROS2的环境变量链接到当前TogetherROS的环境包里来。执行以下命令： $ cd /opt/tros ## 使用/opt/tros目录下的create_soft_link.py创建ROS package至TogetherROS的软链接 $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros 这样设置以后，假如你source了TogetherROS的环境变量，那么同样的配置也会对ROS2生效。 好啦，到这里为止，所有必要的配置项我们都做完了，是不是有点迫不及待想要使用TogetherROS了呢？","text_tokens":["提供","脚本","以下","通过","cd","有点","soft","把","包里","链接","是不是","假如","系统","目录","也","呢","为止","foxy","link","？","_","到","必要","功能","在","$","package","变量","做","而已","里","会","不是","项","：","了","配置","。","不及","togetherros","##","它","这里","命令","方便","所有","ros2","tros","--","使用","的","ros","source","软","都","python3","这样","create","以后","来","创建","对",".","迫不及待","调用","想要","至","，","一个","好","叫","py","啦","opt","为了","我们","完","环境变","你","李","执行","环境变量","生效"," ","当前","那么","设置","/","下","环境","同样"],"title":"建立软链接","title_tokens":["链接","软","建立"]},{"location":"TogetherROS/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/","text":"TogetherROS示例运行 接下来，我们就在安装配置好TogetherROS的旭日X3派上，试一试系统自带的一些例程，确保整个系统已经可以正常运行。 通信测试 先来测试一下TogetherROS系统的通信功能。 我们需要启动两个终端，分别连接到旭日X3派上，并分别按以下命令配置环境变量。 终端1： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function 终端2： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 接下来，我们用ros2 run命令运行节点： 运行第一个例程： ros2 run example_rclcpp_minimal_publisher publisher_member_function 这是一个用C++写的最小化的发布者程序，其中节点叫publisher_member+function，按回车运行该节点。 可以看到这个节点开始不断循环发布信息，每次发布的信息为字符串形式，内容是“Hello,world! +数字”。 同样，在终端2的命令行窗口，输入以下命令并回车开启订阅者节点。 ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 这个订阅者节点会获取到、并显示出刚才发布者节点发布的信息。 通过这样一个例程，我们验证了两个节点之间的通信没有问题。这这是一个基于DDS的话题通信。 按CTRL+C可以关闭该例程。 通信系统没有问题了，如果你是一个ROS2的开发者，可能对刚才我们使用的ROS2命令比较熟悉，这时你可能也会产生一个问题：我们之前也安装了ROS2系统，那ROS2的原生功能还可以正常运行么？ 我们再来试一试ROS2中自带的一个例程。 和刚才一样打开两个终端，这里我们需要source一下ROS里的环境变量。该环境变量我们刚才已经设置了过软连接，所以配置过程中它也会配置ROS2的功能包路径。 在终端1输入命令： $ source /opt/tros/local_setup.bash 在终端2，也输入同样的命令，配置环境变量的脚本： 接下来运行两个ROS2的节点。 这两个节点的功能包是属于ROS2里的功能包,可以直接调用到。我们来尝试一下输入命令ros2 run，再输入功能包名称，如果按Tab自动补全文件名，说明可以找到对应的这个功能包： ros2 run demo_nodes_cpp talker talker也是一个发布者节点。按回车运行，可以看到终端1的发布者节点以每秒1次的频率发布消息。 同样，我们到终端2中打开订阅者节点： ros2 run demo_nodes_cpp listener 回车运行，很快两个终端间就建立了通讯。 这样就使用ROS2里的例程实现了话题通信连接，只不过这里我们使用的就是ROS2原生的功能包了，而不是TogetherROS的功能。 通信系统已经没问题了，但看上去似乎还不太直观。 目标检测 没问题，接下来，我们就运行一个更为直观的案例——目标检测。 在这个案例中，需要大家找一个USB的相机，连接到旭日X3拍的USB接口上。 在运行这个例程之前，需要确认两点：1.有一个USB相机已经连接到了旭日X3派板子上；2.有一个HDMI的显示器也连接到了旭日X3派板子上，它主要用于显示后续的图像检测的效果。 要确认USB相机已经正确连接到开发板，可以在终端输入命令“ls - dv\"查看当前设备号，默认把USB相机识别为vedio8，如果当前列表里能找到vedio8就说明相机被成功识别到了。 输入以下命令运行例程： $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 代码第一行，02例程的功能是通过相机动态采集图像，并对图像里的目标物体进行实时识别。 代码第二行，我们用python3来运行例程usb_camera_fcos.py，它的目标识别的功能是通过我们板卡中CPU的AI引擎来实现的。 我们输入以上两行代码，就开始驱动相机、并对相机里的图像做动态识别了。 此时如果有连接HDMI的显示器，就可以在显示器里看到动态识别的效果。 我们可以调整USB相机镜头的范围，去拍一些杯子、电脑、显示器等等，都可以把对应的目标物体识别到，并把对应的物体用彩色框给框出来；在框的左上角，就是识别到物体的名称、以及它识别的概率值了。 几个示例程序都可以正常运行了，说明当前的软硬件系统都已经准备就绪，到这里，我们才算是可以正式开始机器人开发了。","text_tokens":["补全","通讯","cd","vedio8","两行","框","机器人","也","—","第二","发布","listener","设备","形式","目标","物体","打开","_","到","值","功能","彩色","几个","派","这是","二行","熟悉","不过","成功","数字","次","1","能","硬件","才","程序","实现","命令","talker","ls","循环","一些","直观","开发板","按","为","source","就是","而","等等","这时","example","通信","最小化","试一试",".",",","刚才","机器","一个","好","cpu","左上","但","节点","usb","找到","环境变量","需要","找","案例","只不过","检测","接口","列表","字符","2","路径","hello","member","对应","+","自动","正式","有","再","过程","安装","？","准备","用","查看","看到","驱动","范围","camera","包是","后续","如果","fcos","似乎","中","变量","不断","开启","examples","不是","接下","采集","回车","publisher","了","名称","nodes","产生","dds","一行","subscriber","运行","c++","每次","上去","；","最小","它","上角","内容","这","要","图像","的","并","文件名","demo","这样","没有","更为","bash","建立","以及","原生","显示","此时","py","字符串","示例","opt","我们","接下来","你","左上角","local","概率","hdmi"," ","属于","设置","环境","c","cpp","同样","以下","-","自带","就","频率","rclcpp","开始","把","02","系统","大家","说明","已经","第一行","窗口","开发","框给","!","终端","问题","整个","包了","dv","实时","sample","调整","框出","消息","x3","过","该","就绪","么","两个","以","输入","、","旭日","。","者","第一","\"","和","app","这里","一样","ros2","world","是","其中","ros","效果","软","都","function","验证","setup","正确","分别","文件","第二行","出来","相机","测试","，","板子","环境变","用于","杯子","电脑","还","上","动态","先","进行","当前","以上","/","inference","下来","所以","之前","发布者","可以","脚本","准备就绪","通过","订阅","出","号","minimal","默认","信息","拍","算是","尝试","可能","”","间","之间","这个","连接","写","板卡","ctrl","代码","包","在","看上","$","做","显示器","确保","比较","里","会","命令行","看上去","：","“","开发者","确认","一下","第一个","配置","软硬","软硬件","run","镜头","正常","togetherros","例程","两点","tros","ai","使用","基于","python3","去","来","启动","直接","不","对","太","调用","那","关闭","很快","tab","主要","叫","话题","每秒","引擎","框出来","获取","没","识别","被"],"title":"示例运行","title_tokens":["运行","示例"]},{"location":"TogetherROS/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#togetherros","text":"接下来，我们就在安装配置好TogetherROS的旭日X3派上，试一试系统自带的一些例程，确保整个系统已经可以正常运行。","text_tokens":["试一试","派","可以","自带","例程","就","，","好","确保","x3","一些","系统","我们","接下来","接下","已经","的","上","安装","配置","整个","旭日","运行","。","下来","正常","在","togetherros"],"title":"TogetherROS示例运行","title_tokens":["运行","togetherros","示例"]},{"location":"TogetherROS/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#_1","text":"先来测试一下TogetherROS系统的通信功能。 我们需要启动两个终端，分别连接到旭日X3派上，并分别按以下命令配置环境变量。 终端1： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function 终端2： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 接下来，我们用ros2 run命令运行节点： 运行第一个例程： ros2 run example_rclcpp_minimal_publisher publisher_member_function 这是一个用C++写的最小化的发布者程序，其中节点叫publisher_member+function，按回车运行该节点。 可以看到这个节点开始不断循环发布信息，每次发布的信息为字符串形式，内容是“Hello,world! +数字”。 同样，在终端2的命令行窗口，输入以下命令并回车开启订阅者节点。 ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 这个订阅者节点会获取到、并显示出刚才发布者节点发布的信息。 通过这样一个例程，我们验证了两个节点之间的通信没有问题。这这是一个基于DDS的话题通信。 按CTRL+C可以关闭该例程。 通信系统没有问题了，如果你是一个ROS2的开发者，可能对刚才我们使用的ROS2命令比较熟悉，这时你可能也会产生一个问题：我们之前也安装了ROS2系统，那ROS2的原生功能还可以正常运行么？ 我们再来试一试ROS2中自带的一个例程。 和刚才一样打开两个终端，这里我们需要source一下ROS里的环境变量。该环境变量我们刚才已经设置了过软连接，所以配置过程中它也会配置ROS2的功能包路径。 在终端1输入命令： $ source /opt/tros/local_setup.bash 在终端2，也输入同样的命令，配置环境变量的脚本： 接下来运行两个ROS2的节点。 这两个节点的功能包是属于ROS2里的功能包,可以直接调用到。我们来尝试一下输入命令ros2 run，再输入功能包名称，如果按Tab自动补全文件名，说明可以找到对应的这个功能包： ros2 run demo_nodes_cpp talker talker也是一个发布者节点。按回车运行，可以看到终端1的发布者节点以每秒1次的频率发布消息。 同样，我们到终端2中打开订阅者节点： ros2 run demo_nodes_cpp listener 回车运行，很快两个终端间就建立了通讯。 这样就使用ROS2里的例程实现了话题通信连接，只不过这里我们使用的就是ROS2原生的功能包了，而不是TogetherROS的功能。 通信系统已经没问题了，但看上去似乎还不太直观。","text_tokens":["可以","以下","2","路径","脚本","通过","订阅","补全","自带","通讯","就","频率","rclcpp","出","开始","hello","minimal","系统","也","member","发布","信息","对应","listener","说明","+","已经","自动","形式","窗口","开发","尝试","可能","再","”","过程","安装","间","之间","这个","？","打开","!","连接","用","终端","写","_","问题","ctrl","到","看到","包","包了","功能","在","包是","派","这是","如果","看上","似乎","$","中","变量","消息","x3","比较","不断","里","过","开启","会","命令行","看上去","该","examples","不是","接下","：","回车","“","publisher","熟悉","么","两个","了","不过","以","开发者","名称","nodes","产生","数字","输入","一下","第一个","dds","配置","subscriber","、","。","旭日","run","运行","者","c++","第一","每次","次","正常","和","togetherros","上去","1","例程","最小","程序","这里","它","命令","talker","实现","一样","ros2","循环","内容","world","tros","这","是","直观","按","其中","为","基于","使用","的","source","ros","软","就是","并","function","文件名","验证","而","setup","demo","这样","没有","分别","这时","文件","example","通信","来","bash","最小化","启动","直接","试一试","不","建立","对","太",".","测试",",","刚才","调用","，","一个","那","关闭","原生","很快","tab","显示","叫","话题","字符串","opt","我们","每秒","接下来","环境变","你","还","但","上","节点","先","获取","local","环境变量","找到","需要","没"," ","属于","设置","/","环境","只不过","下来","所以","c","之前","cpp","字符","同样","发布者"],"title":"通信测试","title_tokens":["通信","测试"]},{"location":"TogetherROS/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#_2","text":"没问题，接下来，我们就运行一个更为直观的案例——目标检测。 在这个案例中，需要大家找一个USB的相机，连接到旭日X3拍的USB接口上。 在运行这个例程之前，需要确认两点：1.有一个USB相机已经连接到了旭日X3派板子上；2.有一个HDMI的显示器也连接到了旭日X3派板子上，它主要用于显示后续的图像检测的效果。 要确认USB相机已经正确连接到开发板，可以在终端输入命令“ls - dv\"查看当前设备号，默认把USB相机识别为vedio8，如果当前列表里能找到vedio8就说明相机被成功识别到了。 输入以下命令运行例程： $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 代码第一行，02例程的功能是通过相机动态采集图像，并对图像里的目标物体进行实时识别。 代码第二行，我们用python3来运行例程usb_camera_fcos.py，它的目标识别的功能是通过我们板卡中CPU的AI引擎来实现的。 我们输入以上两行代码，就开始驱动相机、并对相机里的图像做动态识别了。 此时如果有连接HDMI的显示器，就可以在显示器里看到动态识别的效果。 我们可以调整USB相机镜头的范围，去拍一些杯子、电脑、显示器等等，都可以把对应的目标物体识别到，并把对应的物体用彩色框给框出来；在框的左上角，就是识别到物体的名称、以及它识别的概率值了。 几个示例程序都可以正常运行了，说明当前的软硬件系统都已经准备就绪，到这里，我们才算是可以正式开始机器人开发了。","text_tokens":["可以","2","以下","准备就绪","-","cd","vedio8","通过","就","号","把","开始","两行","默认","框","02","系统","机器人","也","—","第二","对应","大家","设备","说明","已经","拍","算是","正式","有","第一行","目标","开发","框给","物体","这个","准备","连接","用","终端","问题","_","板卡","到","代码","查看","看到","值","驱动","范围","dv","camera","功能","在","实时","彩色","几个","派","后续","如果","sample","调整","fcos","框出","$","中","做","显示器","x3","里","就绪","接下","二行","采集","：","“","了","成功","名称","确认","输入","一行","软硬","软硬件","、","。","运行","旭日","镜头","第一","\"","正常","1","能","硬件","app","例程","两点","；","才","实现","它","程序","命令","上角","这里","ls","ai","一些","是","直观","要","开发板","为","图像","的","效果","就是","并","都","python3","等等","更为","正确","第二行","出来","去","来","相机","对",".","机器","以及","，","一个","显示","此时","主要","py","cpu","板子","示例","我们","接下来","左上","用于","杯子","引擎","电脑","左上角","框出来","上","动态","usb","找到","概率","进行","需要","hdmi","没"," ","识别","当前","找","案例","以上","/","inference","下来","检测","接口","列表","之前","被"],"title":"目标检测","title_tokens":["检测","目标"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/","text":"多节点话题通信 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 编程方法 了解了话题的基本原理，接下来我们就要开始编写代码啦。 创建工作空间 请大家先按照这个流程创建工作空间、下载课程的例程代码，并进行编译。 $ mkdir –p dev_ws/src $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build 运行示例程序 编译成功后，我们尝试运行话题通信的Hello World例程，在这个例程中，我们会先创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_topic_cpp talker $ ros2 run learning_topic_cpp listener 这就是TogetherROS系统中话题通信的方法，依然沿用了ROS2中话题通信的完整流程。 代码解析 发布者的实现方法publisher_member_function.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using namespace std :: chrono_literals ; /* This example creates a subclass of Node and uses std::bind() to register a * member function as a callback from the timer. */ class MinimalPublisher : public rclcpp :: Node { public : MinimalPublisher () : Node ( \"minimal_publisher\" ), count_ ( 0 ) { publisher_ = this -> create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & MinimalPublisher :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, world! \" + std :: to_string ( count_ ++ ); RCLCPP_INFO ( this -> get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者的实现方法subscriber_member_function.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using std :: placeholders :: _1 ; class MinimalSubscriber : public rclcpp :: Node { public : MinimalSubscriber () : Node ( \"minimal_subscriber\" ) { subscription_ = this -> create_subscription < std_msgs :: msg :: String > ( \"topic\" , 10 , std :: bind ( & MinimalSubscriber :: topic_callback , this , _1 )); } private : void topic_callback ( const std_msgs :: msg :: String :: SharedPtr msg ) const { RCLCPP_INFO ( this -> get_logger (), \"I heard: '%s'\" , msg -> data . c_str ()); } rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["数据类型","cd","mkdir","组织","第一次","另外","块","呢","机器人","也","个","发布","叫做","listener","设备","人","比方","是从","数据","this","根本","可见","方向","gitee","不能","{","std","tutorials","因为","_","到","某","值","指","功能","基本原理","传递","基本","(","t",">","get","最","creates","重要","想","古月","存在","可视","成功","the","main","称之为","and","通信模型","https","0","1","数据结构","像素","硬件","想下","literals","实现","收到","定义","程序","talker","public",":","知识","一些","的话","colcon","init","rgb","source","to","就是","'","流程","等等","修改","functional","从","没错","应该",";","example","挺","通信","传感",")","仔细","class","结构","看",".","得到","类型",",","机器","一个","万缕","好","特性","timerbase","感兴趣","联系","subscription","千丝万缕","但","节点","会先","需要","独立","可视化","chatter","某种","依然","接口","}","字符","2","后缀","=","小编","方式","]","using","是不是","编译","兴趣","hello","of","member","对应","完整","本原","+","有","语言","居","就要","在生活中","再","？","魔性","用","词","不知","memory","ws","查看","msg","驱动","uses","出去","placeholders","什么","如果","来看","似乎","中","说","msgs","编程语言","bind","随处可见","较强","register","报社","不是","接下","i","publisher","英文","了","像","名称","积木","dds","subscriber","想象","组成","运行","微信","&","注意","画面","一份","它","每","谁","这","传感器","同学","理解","很多","要","指令","图像","的","from","并","这样","没有","create","长宽","为例","3","bash","一种","p","原理","显示","此时","字符串","示例","auto","opt","千丝","我们","接下来","你","拼接","异步","publish","#","随处","接收","local"," ","hpp","++","heard","c","听","编程","cpp","不然","minimalsubscriber","-","就","rclcpp","模型","听说","把","开始","课程","系统","描述","传输","大家","–","比如","将","install","*","!","a","实时","多","各种","监控","杂志","消息","逻辑","namespace","打","让","控制","了解","对象","该","const","void","渲染","两个","以","数据传输","类似","logger","、","。","者","第一","\"","视频","和","500","这里","自然","接口定义","一样","ros2","string","world","是","无关","其中","ros","都","function","setup","名字","文件","include","用户","message","timer","相机","得","必然","逻辑性","各样","创建","标准","topic","count","运动","编写","，","某些","阅读","并不知道","啦","char","东西","固定","userdata","com","用于","中文","适合","上","先","进行","learning","感器","/","下来","摇杆","发布者","可以","包含","通过","订阅","桥梁","callback","号","优先级","publishing","minimal","报纸","控制指令","关系","信息","dev","自行","build","shared","尝试","可能","所谓","make","既然","”","发出","间","之间","这个","感兴","代码","发送数据","给","private","sharedptr","在","方法","ms","平时","周期","return","还是","$","size","做","数量","str","按照","里","会","区分","之后","这些","后","：","生活","int","“","时候","多个","minimalpublisher","b","从而","[","一下","合适","知道","spin","公众","run","概念","接收数据","复杂","无法","本身","文章","togetherros","统一","例程","data","格式","联系方式","请","之为","传递数据","要求","tros","guyuehome","才能","只要","使用","基于","一篇","参数","各种各样","node","最后","拍摄","成为","clone","他会","src","as","<","作为","subclass","10","不","chrono","对","建议","还有","太","与","wall","优先","据传","info","下载","唯一","那","更","工作","叫","话题","解析","发送","argc","成","s","argv","沿用","shutdown","获取","%","git","空间","一次","排版","被","角度","每个"],"title":"多节点话题通信","title_tokens":["通信","节点","多","话题"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["各样","各种","桥梁","机器","实现","它","联系方式","，","方式","万缕","传递数据","机器人","最","话题","会","是","联系","千丝万缕","重要","千丝","不是","其中","的","但","这些","就是","并","有","数据","节点","了","各种各样","间","之间"," ","独立","。","功能","一种","传递"],"title":"多节点话题通信","title_tokens":["通信","节点","多","话题"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["可以","桥梁","就","方式","是不是","机器人","关系","信息","传输","大家","设备","有","数据","方向","将","之间","这个","？","到","a","查看","某","驱动","给","功能","在","传递","实时","监控","中","做","想","不是","渲染","两个","了","以","存在","数据传输","可视","b","称之为","一下","。","视频","硬件","实现","它","之为","这","才能","是","要","图像","的","ros","这样","拍摄","从","没错","为例","用户","作为","相机","必然","得到","机器","据传","，","一个","显示","此时","话题","我们","节点","上","获取"," ","可视化","某种"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["可以","数据类型","订阅","就","模型","小编","号","把","组织","兴趣","报纸","另外","呢","机器人","也","发布","叫做","传输","大家","比方","比如","是从","有","数据","可见","居","在生活中","”","？","这个","感兴","到","发送数据","出去","什么","平时","如果","来看","杂志","打","会","随处可见","对象","之后","古月","生活","“","了","数据传输","名称","称之为","类似","dds","公众","、","。","接收数据","者","微信","无法","本身","和","文章","实现","它","每","格式","收到","自然","之为","要求","知识","的话","是","使用","基于","的","就是","都","等等","没有","这样","从","名字","应该","成为","他会","看","对","类型","机器","据传","，","一个","好","特性","叫","话题","感兴趣","固定","发送","成","节点","随处","接收","需要"," ","/","排版","角度","发布者"],"title":"发布/订阅模型","title_tokens":["/","模型","发布","订阅"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["可以","2","订阅","模型","号","优先级","是不是","报纸","机器人","也","控制指令","个","发布","大家","人","有","可能","再","这个","魔性","因为","多","如果","还是","似乎","杂志","数量","里","控制","该","不是","区分","这些","多个","了","存在","称之为","一下","知道","通信模型","公众","、","。","想象","者","和","1","想下","注意","画面","一样","之为","谁","是","很多","指令","要","的","ros","并","没错","3","挺","通信","仔细","不","对","建议","机器","优先","，","唯一","一个","话题","东西","发送","我们","节点","不然"," ","摇杆","听","被","发布者","每个"],"title":"多对多通信","title_tokens":["通信","多","对"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["可以","订阅","就","号","听说","第一次","报纸","也","发布","叫做","传输","比如","有","数据","根本","居","可能","所谓","发出","这个","？","用","词","不知","某","指","什么","周期","如果","逻辑","让","控制","较强","报社","后","古月","时候","了","类似","合适","知道","公众","。","者","第一","文章","一份","收到","传感器","这","一些","同学","是","指令","只要","的","一篇","就是","参数","等等","修改","传感","通信","逻辑性","不","还有","太","运动","一个","，","那","更","特性","某些","阅读","话题","并不知道","用于","你","适合","异步"," ","感器","一次","发布者"],"title":"异步通信","title_tokens":["通信","异步"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["可以","包含","通过","订阅","就","后缀","方式","块","系统","机器人","也","发布","描述","对应","传输","自行","比如","语言","数据","有","既然","不能","msg","值","在","各种","中","说","消息","编程语言","会","英文","了","像","数据传输","称之为","积木","、","。","组成","概念","者","复杂","和","数据结构","统一","像素","定义","这里","格式","接口定义","一样","之为","是","理解","无关","rgb","图像","的","ros","都","各种各样","等等","最后","这样","长宽","文件","通信","得","一种","结构","各样","与","标准",".","机器","据传","，","一个","话题","我们","成","中文","拼接","节点","进行"," ","接口","编程","发布者","每个"],"title":"消息接口","title_tokens":["接口","消息"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_7","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。","text_tokens":["编写","原理","，","开始","话题","啦","了解","本原","我们","接下来","接下","的","了","就要","代码","。","下来","基本原理","基本"],"title":"编程方法","title_tokens":["方法","编程"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_8","text":"请大家先按照这个流程创建工作空间、下载课程的例程代码，并进行编译。 $ mkdir –p dev_ws/src $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build","text_tokens":["创建","cd","例程",".","mkdir","$","p","下载","，",":","请","编译","课程","工作","按照","guyuehome","colcon","dev","userdata","com","大家","build","的","–","并","流程","先","gitee","进行","git","这个"," ","空间","tutorials","_","clone","src","、","代码","。","/","ws","https","togetherros"],"title":"创建工作空间","title_tokens":["创建","工作","空间"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_9","text":"编译成功后，我们尝试运行话题通信的Hello World例程，在这个例程中，我们会先创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_topic_cpp talker $ ros2 run learning_topic_cpp listener 这就是TogetherROS系统中话题通信的方法，依然沿用了ROS2中话题通信的完整流程。","text_tokens":["创建","周期","订阅","例程","标准",".","类型","topic","定义","talker","$","方法","中","，","一个","ros2","hello","编译","消息","string","world","这","tros","系统","话题","字符串","是","发布","opt","listener","完整","发送","我们","的","ros","source","后","就是","沿用","“","流程","会先","尝试","了","接收","成功","local","再","”","setup","install","这个"," ","learning","从而","_","chatter","到","通信","运行","。","者","/","run","依然","bash","cpp","在","字符","togetherros","发布者"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_10","text":"发布者的实现方法publisher_member_function.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using namespace std :: chrono_literals ; /* This example creates a subclass of Node and uses std::bind() to register a * member function as a callback from the timer. */ class MinimalPublisher : public rclcpp :: Node { public : MinimalPublisher () : Node ( \"minimal_publisher\" ), count_ ( 0 ) { publisher_ = this -> create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & MinimalPublisher :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, world! \" + std :: to_string ( count_ ++ ); RCLCPP_INFO ( this -> get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者的实现方法subscriber_member_function.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using std :: placeholders :: _1 ; class MinimalSubscriber : public rclcpp :: Node { public : MinimalSubscriber () : Node ( \"minimal_subscriber\" ) { subscription_ = this -> create_subscription < std_msgs :: msg :: String > ( \"topic\" , 10 , std :: bind ( & MinimalSubscriber :: topic_callback , this , _1 )); } private : void topic_callback ( const std_msgs :: msg :: String :: SharedPtr msg ) const { RCLCPP_INFO ( this -> get_logger (), \"I heard: '%s'\" , msg -> data . c_str ()); } rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["minimalsubscriber","-","订阅","callback","=","rclcpp","]","using","publishing","hello","minimal","of","member","发布","+","shared","this","make","{","*","!","std","_","memory","a","msg","private","sharedptr","uses","方法","placeholders","ms","return","(","t","size","msgs",">","namespace","bind","get","str","creates","register","const","void","i","：","int","publisher","minimalpublisher","the","main","logger","[","and","spin","subscriber","者","\"","0","1","&","literals","500","data","实现","public",":","string","world","init","的","from","to","'","function","node","create","functional",";","example","include",")","message","as","<","timer","class","subclass","10","chrono","wall",".",",","count","topic","info","timerbase","char","auto","subscription","argc","s","argv","publish","shutdown","#","%"," ","hpp","++","/","heard","c","}","cpp","发布者"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/","text":"多节点服务通信 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 编程方法 了解了服务通信的原理，接下来我们就要开始编写代码啦，我们尝试通过服务实现一个加法求解器的功能。 运行示例程序 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 我们一起操作下这个例程。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_service_cpp server $ ros2 run learning_service_cpp client 2 3 话题和服务是最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 代码解析 服务器端add_two_ints_server.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <memory> void add ( const std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Request> request, std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Response> response ) { response->sum = request->a + request->b ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Incoming request\\na: %ld\" \" b: %ld\" , request->a, request->b ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"sending back response: [%ld]\" , ( long int ) response->sum ) ; } int main ( int argc, char **argv ) { rclcpp::init ( argc, argv ) ; std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared ( \"add_two_ints_server\" ) ; rclcpp::Service<learning_service_cpp::srv::AddTwoInts>::SharedPtr service = node->create_service<learning_service_cpp::srv::AddTwoInts> ( \"add_two_ints\" , & add ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Ready to add two ints.\" ) ; rclcpp::spin ( node ) ; rclcpp::shutdown () ; } 客户端add_two_ints_client.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <chrono> #include <cstdlib> #include <memory> using namespace std :: chrono_literals ; int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); if ( argc != 3 ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"usage: add_two_ints_client X Y\" ); return 1 ; } std :: shared_ptr < rclcpp :: Node > node = rclcpp :: Node :: make_shared ( \"add_two_ints_client\" ); rclcpp :: Client < learning_service_cpp :: srv :: AddTwoInts >:: SharedPtr client = node -> create_client < learning_service_cpp :: srv :: AddTwoInts > ( \"add_two_ints\" ); auto request = std :: make_shared < learning_service_cpp :: srv :: AddTwoInts :: Request > (); request -> a = atoll ( argv [ 1 ]); request -> b = atoll ( argv [ 2 ]); while ( ! client -> wait_for_service ( 1 s )) { if ( ! rclcpp :: ok ()) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Interrupted while waiting for the service. Exiting.\" ); return 0 ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"service not available, waiting again...\" ); } auto result = client -> async_send_request ( request ); // Wait for the result. if ( rclcpp :: spin_until_future_complete ( node , result ) == rclcpp :: FutureReturnCode :: SUCCESS ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"Sum: %ld\" , result . get () -> sum ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Failed to call service add_two_ints\" ); } rclcpp :: shutdown (); return 0 ; }","text_tokens":["另外","机器人","也","—","发布","叫做","人","数据","形式","目标","上层","if","物体","网络","{","not","std","_","机制","到","判断","功能","传递","加法","数据通","红色","同步","(","越快",">","get","一直","发","介绍","ld","器","古月","for","存在","前者","学习","the","main","称之为","interrupted","通信模型","0","1","问","literals","程序","定义","实现","收到","命令","好像",":","init","为","source","to","就是","again","部分","简称","从",";","本","传感","通信",")",".","得到",",","机器","想要","一个","坐标","反应","某个","但","节点","client","一起","需要","ready","ok","一般","转圈圈","返回","下","接口","}","提供","2","一对","=","na","]","using","变成","incoming","当","waiting","圈圈","很","until","+","答","居","就要","在生活中","过程","反馈","处理","memory","msg","希望","看到","驱动","出去","状态","发给","后续","越快越好","来看","中","网页","我","高","接下","futurereturncode","等","了","视觉","或者","讲","相比","运行","ptr","是否","请求","&","服务器","每","操作","success","send","苹果","传感器","域名","两种","服务","指令","要","页面","图像","的","网站","并","界面","这样","没有","create","x","3","求解","bash","一种","具体","一问一答","原理","此时","完全","示例","auto","opt","我们","接下来","你","求和","异步","#","接收","local","有所"," ","针对","hpp","long","addtwoints","编程","cpp","同样","浏览器","最为","-","usage","就","准确","频率","rclcpp","模型","时","开始","课程","传输","大家","比如","这么","务器","将","install","*","!","继续","a","sum","y","多","exiting","各种","常用","消息","namespace","future","控制","宕机","了解","const","add","void","error","而是","服务器发送","两个","向","经常","客户端","类似","logger","、","。","查询","者","加数","\"","展现","和","跟随","应用","应答","一样","ros2","cstdlib","周期性","是","那有","假设","其中","ros","效果","available","都","封装","setup","文件","include","srv","相机","访问","标准","运动","编写","，","某些","啦","浏览","char","电脑","适合","上","但是","进行","learning","感器","/","所以","下来","之前","server","发布者","可以","通过","订阅","控制指令","信息","ints","半天","wait","计算","shared","result","尝试","可能","make","”","atoll","之间","这个","\\","cs","代码","这种","back","...","给","sharedptr","在","方法","不同","request","周期","return","还是","sending","附近","转圈","$","数据通信","按照","最新","会","之后","这些","后","：","async","生活","int","“","时候","多个","b","然后","同步性","[","知道","spin","run","无法","结果","例程","客户","常见","之为","要求","传递数据","tros","failed","使用","越好","位置","服务器端","node","成为","else","while","response","<","call","尽快","不","chrono","对","还有","complete","info","并不需要","唯一","核心","更","话题","解析","发送","argc","成","s","单向","argv","有所不同","不好","shutdown","service","获取","%","two","识别","图像识别","后者"],"title":"多节点服务通信","title_tokens":["通信","节点","多","服务"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["可以","问","订阅","准确","同步","实现","收到","，","常用","消息","另外","话题","—","服务","发布","传输","使用","我们","我","你","单向","的","ros","效果","数据","异步","节点","多个","一起","答","将","学习","之间"," ","讲","类似","知道","机制","本","通信","。","这种","者","无法","一种","方法","发布者","是否"],"title":"多节点服务通信","title_tokens":["通信","节点","多","服务"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["可以","通过","订阅","频率","模型","变成","课程","另外","机器人","发布","信息","传输","比如","这么","数据","形式","目标","上层","答","物体","反馈","这个","机制","继续","到","这种","希望","驱动","在","不同","发给","周期","红色","附近","中","按照","最新","一直","发","我","高","而是","时候","了","或者","然后","通信模型","。","查询","和","跟随","请求","问","应用","实现","应答","好像","一样","服务","是","使用","其中","图像","的","ros","并","位置","这样","成为","通信","相机","尽快","对","得到","机器","运动","，","一个","并不需要","更","此时","话题","发送","我们","你","单向","有所不同","节点","service","有所","需要"," ","识别","图像识别","之前"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["问","通过","各种","就","实现","服务器","来看","收到","模型","应答","客户","操作","，","常见","某些","此时","域名","网页","也","服务","会","浏览","信息","叫做","很","页面","发送","我们","我","为","之后","某个","电脑","你","的","网站","比如","就是","并","生活","数据","展现","上","形式","时候","服务器发送","务器","答","服务器端","进行","向","需要","客户端","在生活中","经常","反馈","或者"," ","简称","从","cs","针对","处理","机制","。","/","这种","通信","返回","在","浏览器","具体","请求"],"title":"客户端/服务器模型","title_tokens":["服务","务器","/","服务器","客户端","模型","客户"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["可以","通过","越快越好","同步","服务器","转圈","应答","中","客户","，","越快","之为","要求","话题","也","服务","是","一直","浏览","假设","反应","圈圈","那有","宕机","信息","我们","你","的","半天","越好","不好","务器","了","接收","可能","服务器端","网络","过程","客户端","没有","这个","或者","称之为","一般","相比","到","通信","判断","。","转圈圈","所以","在","状态","浏览器"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["可以","不","访问","服务器","每","模型","客户","中","，","唯一","一样","一个","完全","服务","是","大家","人","网站","的","但","比如","并","古月","都","多个","务器","界面","居","存在","但是","服务器端","客户端","没有","这个","通信模型","。","通信","看到","所以","同样"],"title":"一对多通信","title_tokens":["通信","一对","多"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["后续","还有","标准",".","还是","定义","命令","方法","中","，","核心","一个","一样","变成","苹果","消息","传递数据","坐标","话题","也","服务","是","会","要","介绍","使用","我们","大家","的","ros","比如","这些","数据","位置","了","两个","部分","反馈"," ","类似","文件","通信","。","srv","msg","给","在","和","传递","请求"],"title":"服务接口","title_tokens":["接口","服务"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_7","text":"了解了服务通信的原理，接下来我们就要开始编写代码啦，我们尝试通过服务实现一个加法求解器的功能。","text_tokens":["加法","通过","实现","编写","原理","，","一个","开始","服务","啦","了解","我们","接下来","接下","的","器","了","尝试","就要","代码","通信","。","求解","下来","功能"],"title":"编程方法","title_tokens":["方法","编程"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_8","text":"当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 我们一起操作下这个例程。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_service_cpp server $ ros2 run learning_service_cpp client 2 3 话题和服务是最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。","text_tokens":["提供","可以","2","通过","就","时","开始","当","控制指令","传输","ints","比如","数据","计算","目标","务器","将","”","反馈","这个","install","_","到","给","出去","方法","加法","数据通","周期","同步","$","常用","数据通信","控制","之后","add","高","后","“","等","两个","前者","客户端","视觉","同步性","、","。","run","加数","和","请求","结果","例程","服务器","收到","操作","应答","客户","ros2","周期性","传感器","要求","tros","两种","服务","是","指令","的","source","并","位置","封装","服务器端","setup","3","传感","通信","bash","一问一答",".","得到","机器","想要","，","更","话题","啦","opt","发送","我们","成","单向","适合","求和","节点","client","一起","service","获取","local","进行","需要","two","learning"," ","针对","识别","感器","/","下","后者","cpp","server","最为"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_9","text":"服务器端add_two_ints_server.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <memory> void add ( const std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Request> request, std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Response> response ) { response->sum = request->a + request->b ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Incoming request\\na: %ld\" \" b: %ld\" , request->a, request->b ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"sending back response: [%ld]\" , ( long int ) response->sum ) ; } int main ( int argc, char **argv ) { rclcpp::init ( argc, argv ) ; std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared ( \"add_two_ints_server\" ) ; rclcpp::Service<learning_service_cpp::srv::AddTwoInts>::SharedPtr service = node->create_service<learning_service_cpp::srv::AddTwoInts> ( \"add_two_ints\" , & add ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Ready to add two ints.\" ) ; rclcpp::spin ( node ) ; rclcpp::shutdown () ; } 客户端add_two_ints_client.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <chrono> #include <cstdlib> #include <memory> using namespace std :: chrono_literals ; int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); if ( argc != 3 ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"usage: add_two_ints_client X Y\" ); return 1 ; } std :: shared_ptr < rclcpp :: Node > node = rclcpp :: Node :: make_shared ( \"add_two_ints_client\" ); rclcpp :: Client < learning_service_cpp :: srv :: AddTwoInts >:: SharedPtr client = node -> create_client < learning_service_cpp :: srv :: AddTwoInts > ( \"add_two_ints\" ); auto request = std :: make_shared < learning_service_cpp :: srv :: AddTwoInts :: Request > (); request -> a = atoll ( argv [ 1 ]); request -> b = atoll ( argv [ 2 ]); while ( ! client -> wait_for_service ( 1 s )) { if ( ! rclcpp :: ok ()) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Interrupted while waiting for the service. Exiting.\" ); return 0 ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"service not available, waiting again...\" ); } auto result = client -> async_send_request ( request ); // Wait for the result. if ( rclcpp :: spin_until_future_complete ( node , result ) == rclcpp :: FutureReturnCode :: SUCCESS ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"Sum: %ld\" , result . get () -> sum ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Failed to call service add_two_ints\" ); } rclcpp :: shutdown (); return 0 ; }","text_tokens":["2","-","usage","=","rclcpp","na","]","using","incoming","waiting","ints","until","+","wait","shared","result","务器","make","if","{","atoll","not","\\","*","!","std","_","memory","back","a","...","sharedptr","sum","y","request","exiting","return","(","sending",">","get","namespace","future","const","add","void","futurereturncode","ld","：","async","error","int","for","客户端","b","the","main","logger","[","interrupted","spin","ptr","\"","0","1","&","literals","服务器","success","客户",":","send","cstdlib","服务","failed","init","to","available","again","服务器端","node","create",";","include","x","3",")","else","srv","while","response","<","call","chrono","complete",".",",","info","char","auto","argc","s","argv","client","shutdown","#","service","%","two","learning"," ","ready","ok","hpp","long","addtwoints","/","}","cpp","server"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/","text":"多节点动作通信 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 编程方法 相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 运行示例程序 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_action_cpp server $ ros2 run learning_action_cpp client 代码解析 动作的服务器fibonacci_action_server.cpp： #include <inttypes.h> #include <memory> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO(jacobperron): Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionServer : public rclcpp :: Node { public : using Fibonacci = learning_action_cpp :: action :: Fibonacci ; using GoalHandleFibonacci = rclcpp_action :: ServerGoalHandle < Fibonacci > ; explicit MinimalActionServer ( const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : Node ( \"minimal_action_server\" , options ) { using namespace std :: placeholders ; this -> action_server_ = rclcpp_action :: create_server < Fibonacci > ( this -> get_node_base_interface (), this -> get_node_clock_interface (), this -> get_node_logging_interface (), this -> get_node_waitables_interface (), \"fibonacci\" , std :: bind ( & MinimalActionServer :: handle_goal , this , _1 , _2 ), std :: bind ( & MinimalActionServer :: handle_cancel , this , _1 ), std :: bind ( & MinimalActionServer :: handle_accepted , this , _1 )); } private : rclcpp_action :: Server < Fibonacci >:: SharedPtr action_server_ ; rclcpp_action :: GoalResponse handle_goal ( const rclcpp_action :: GoalUUID & uuid , std :: shared_ptr < const Fibonacci :: Goal > goal ) { RCLCPP_INFO ( this -> get_logger (), \"Received goal request with order %d\" , goal -> order ); ( void ) uuid ; // Let's reject sequences that are over 9000 if ( goal -> order > 9000 ) { return rclcpp_action :: GoalResponse :: REJECT ; } return rclcpp_action :: GoalResponse :: ACCEPT_AND_EXECUTE ; } rclcpp_action :: CancelResponse handle_cancel ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Received request to cancel goal\" ); ( void ) goal_handle ; return rclcpp_action :: CancelResponse :: ACCEPT ; } void execute ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Executing goal\" ); rclcpp :: Rate loop_rate ( 1 ); const auto goal = goal_handle -> get_goal (); auto feedback = std :: make_shared < Fibonacci :: Feedback > (); auto & sequence = feedback -> sequence ; sequence . push_back ( 0 ); sequence . push_back ( 1 ); auto result = std :: make_shared < Fibonacci :: Result > (); for ( int i = 1 ; ( i < goal -> order ) && rclcpp :: ok (); ++ i ) { // Check if there is a cancel request if ( goal_handle -> is_canceling ()) { result -> sequence = sequence ; goal_handle -> canceled ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Canceled\" ); return ; } // Update sequence sequence . push_back ( sequence [ i ] + sequence [ i - 1 ]); // Publish feedback goal_handle -> publish_feedback ( feedback ); RCLCPP_INFO ( this -> get_logger (), \"Publish Feedback\" ); loop_rate . sleep (); } // Check if goal is done if ( rclcpp :: ok ()) { result -> sequence = sequence ; goal_handle -> succeed ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Succeeded\" ); } } void handle_accepted ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { using namespace std :: placeholders ; // this needs to return quickly to avoid blocking the executor, so spin up a new thread std :: thread { std :: bind ( & MinimalActionServer :: execute , this , _1 ), goal_handle }. detach (); } }; // class MinimalActionServer int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); auto action_server = std :: make_shared < MinimalActionServer > (); rclcpp :: spin ( action_server ); rclcpp :: shutdown (); return 0 ; } 动作的客户端fibonacci_action_client.cpp： #include <inttypes.h> #include <memory> #include <string> #include <iostream> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO ( jacobperron ) : Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionClient : public rclcpp::Node { public: using Fibonacci = learning_action_cpp::action::Fibonacci ; using GoalHandleFibonacci = rclcpp_action::ClientGoalHandle<Fibonacci> ; explicit MinimalActionClient ( const rclcpp::NodeOptions & node_options = rclcpp::NodeOptions ()) : Node ( \"minimal_action_client\" , node_options ) , goal_done_ ( false ) { this->client_ptr_ = rclcpp_action::create_client<Fibonacci> ( this->get_node_base_interface () , this->get_node_graph_interface () , this->get_node_logging_interface () , this->get_node_waitables_interface () , \"fibonacci\" ) ; this->timer_ = this->create_wall_timer ( std::chrono::milliseconds ( 500 ) , std::bind ( & MinimalActionClient::send_goal, this )) ; } bool is_goal_done () const { return this->goal_done_ ; } void send_goal () { using namespace std::placeholders ; this->timer_->cancel () ; this->goal_done_ = false ; if ( !this->client_ptr_ ) { RCLCPP_ERROR ( this->get_logger () , \"Action client not initialized\" ) ; } if ( !this->client_ptr_->wait_for_action_server ( std::chrono::seconds ( 10 ))) { RCLCPP_ERROR ( this->get_logger () , \"Action server not available after waiting\" ) ; this->goal_done_ = true ; return ; } auto goal_msg = Fibonacci::Goal () ; goal_msg.order = 10 ; RCLCPP_INFO ( this->get_logger () , \"Sending goal\" ) ; auto send_goal_options = rclcpp_action::Client<Fibonacci>::SendGoalOptions () ; send_goal_options.goal_response_callback = std::bind ( & MinimalActionClient::goal_response_callback, this, _1 ) ; send_goal_options.feedback_callback = std::bind ( & MinimalActionClient::feedback_callback, this, _1, _2 ) ; send_goal_options.result_callback = std::bind ( & MinimalActionClient::result_callback, this, _1 ) ; auto goal_handle_future = this->client_ptr_->async_send_goal ( goal_msg, send_goal_options ) ; } private: rclcpp_action::Client<Fibonacci>::SharedPtr client_ptr_ ; rclcpp::TimerBase::SharedPtr timer_ ; bool goal_done_ ; void goal_response_callback ( std::shared_future<GoalHandleFibonacci::SharedPtr> future ) { auto goal_handle = future.get () ; if ( !goal_handle ) { RCLCPP_ERROR ( this->get_logger () , \"Goal was rejected by server\" ) ; } else { RCLCPP_INFO ( this->get_logger () , \"Goal accepted by server, waiting for result\" ) ; } } void feedback_callback ( GoalHandleFibonacci::SharedPtr, const std::shared_ptr<const Fibonacci::Feedback> feedback ) { RCLCPP_INFO ( this->get_logger () , \"Next number in sequence received: %\" PRId32, feedback->sequence.back ()) ; } void result_callback ( const GoalHandleFibonacci::WrappedResult & result ) { this->goal_done_ = true ; switch ( result.code ) { case rclcpp_action::ResultCode::SUCCEEDED: break ; case rclcpp_action::ResultCode::ABORTED: RCLCPP_ERROR ( this->get_logger () , \"Goal was aborted\" ) ; return ; case rclcpp_action::ResultCode::CANCELED: RCLCPP_ERROR ( this->get_logger () , \"Goal was canceled\" ) ; return ; default: RCLCPP_ERROR ( this->get_logger () , \"Unknown result code\" ) ; return ; } RCLCPP_INFO ( this->get_logger () , \"Result received\" ) ; for ( auto number : result.result->sequence ) { RCLCPP_INFO ( this->get_logger () , \"%\" PRId32, number ) ; } } } ; // class MinimalActionClient int main ( int argc, char ** argv ) { rclcpp::init ( argc, argv ) ; auto action_client = std::make_shared<MinimalActionClient> () ; while ( !action_client->is_goal_done ()) { rclcpp::spin_some ( action_client ) ; } rclcpp::shutdown () ; return 0 ; }","text_tokens":["合成","minimalactionclient","转个","goalhandlefibonacci","另外","机器人","也","—","发布","分拣","通信接口","数据","this","根本","目标","if","{","not","std","_","机制","到","所处","功能","received","分析","同步","(","sequences",">","起来","get","毕竟","想","介绍","应用层","quickly","base","for","就此","the","explicit","main","handle","时间","and","一点一点","通信模型","push","case","0","1","不仅","不仅仅","实现","收到","命令","一边","定义","程序","public","graph",":","init","source","to","就是","'","流程","仅仅","executing","next","accepted","从","只能","没错","直到","相对","clock",";","抓取","目的",")","通信","interface","loop","仔细","class","每隔","some","应带","are","看",".",",","new","avoid","机器","一个","好","坐标","timerbase","某个","管理","节点","client","aborted","执行","控","需要","完成","9000","ok","cancelresponse","多少度","canceling","下","简单","接口","}","waitables","干什么","2","一对","一段时间","clientgoalhandle","=","action","using","]","是不是","当","眼前","waiting","of","完整","很","+","送货","有","reject","再","过程","反馈","？","part","memory","resultcode","msg","状态","placeholders","什么","如果","中","goalresponse","达到","bind","动","不是","i","number","sequence","等","了","告诉","像","30","由","相比","&&","运行","executor","底层","一","有没有","ptr","请求","&","较长","服务器","blocking","check","send","这","succeed","上边","服务","理解","指令","的","并","unknown","let","by","没有","这样","更为","create","bool","智能","bash","一种","圈","具体","it","进度","示例","auto","opt","我们","秘密","was","publish","#","360","local","code","logging","remove"," ","hpp","其实","prid32","++","编程","cpp","jacobperron","-","break","就","结束","rclcpp","模型","时","开始","把","d","系统","满足","姿态","大家","比如","这么","nodeoptions","务器","default","install","*","!","iostream","某一","整个","goal","a","实时","canceled","true","多","三个","其","段时间","minimalactionserver","namespace","过","让","future","控制","const","void","_-","error","遥控","用到","两个","举个","就此结束","旋转","1s","客户端","类似","included","logger","哪里","肯定","、","execute","。","update","者","\"","needs","和","又","is","应用","随时","发现","500","goaluuid","一样","ros2","string","例子","是","同时","假设","succeeded","ros","options","available","都","setup","竟然","with","名字","文件","include","动图","行为","timer","得","到底","运动","度","，","seconds","还会","送餐","场景","rate","char","rejected","还","上","servergoalhandle","只有","先","但是","进行","learning","feedback","after","当前","/","之前","server","发布者","可以","订阅","callback","up","minimal","含义","隐藏","detach","信息","键盘","wait","shared","result","thread","需求","可能","make","表示","既然","发出","这个","代码","这种","back","private","sharedptr","在","方法","wrappedresult","request","todo","周期","一段","return","h","sending","转圈","$","uuid","order","常常","导航","initialized","臂","会","之后","这些","便于","后","模块","：","accept","int","async","多个","20","sleep","so","取消","[","一下","合适","知道","进度条","spin","run","概念","milliseconds","复杂","例程","当中","fibonacci","客户","inttypes","动作","装","there","tros","才能","使用","基于","cancel","服务器端","node","机械","else","while","as","response","<","来","done","10","不","chrono","对","wall","sendgoaloptions","调用","info","那","switch","话题","over","解析","发送","argc","false","s","argv","in","一点","once","shutdown","现在","%","that","识别","转","多少","被"],"title":"多节点动作通信","title_tokens":["动作","通信","节点","多"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["可以","对","应用","就","不仅","机器","不仅仅","运动","实现","中","一个","，","被","那","送餐","动作","好","另外","含义","场景","常常","系统","机器人","也","—","是","满足","会","理解","完整","分拣","很","我们","键盘","某个","送货","的","ros","这些","这么","就是","并","便于","管理","遥控","上","用到","目标","等","需求","流程","仅仅","进行","需要","这个"," ","从","识别","名字","某一","机制","、","目的","智能","。","通信","概念","这种","复杂","简单","行为","功能","一种","在","具体"],"title":"多节点动作通信","title_tokens":["动作","通信","节点","多"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["可以","就","结束","一段时间","转个","开始","把","眼前","机器人","信息","比如","根本","表示","再","过程","发出","反馈","？","机制","到","在","一段","如果","段时间","转圈","让","想","不是","之后","后","了","告诉","像","举个","20","30","旋转","1s","取消","一下","合适","知道","哪里","一点一点","时间","肯定","、","进度条","。","有没有","随时","当中","命令","动作","装","这","例子","才能","是","指令","假设","使用","的","并","没有","这样","更为","直到","行为","通信","每隔","得","圈","10","不","到底","机器","度","运动","，","一个","进度","发送","我们","还","一点","360","现在","执行","控","需要","完成"," ","ok","当前","多少度","转","多少"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["干什么","周期","如果","就","结束","机器","服务器","运动","收到","模型","一边","客户","中","，","达到","动作","一个","开始","当","起来","导航","坐标","机器人","也","服务","是","让","控制","同时","动","臂","想","姿态","信息","发送","使用","之后","的","后","目标","务器","执行","可能","服务器端","就此结束","再","客户端","过程","就此","反馈","这个"," ","机械","当前","类似","抓取","整个","。","所处","通信","状态","和","实时","什么","又"],"title":"客户端/服务器模型","title_tokens":["服务","务器","/","服务器","客户端","模型","客户"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["可以","机器","服务器","运动","命令","中","客户","，","一个","动作","一样","机器人","服务","毕竟","才能","发送","大家","的","有","都","多个","务器","只有","先","但是","执行","服务器端","客户端","完成","只能","通信","。","下","和"],"title":"一对多通信","title_tokens":["通信","一对","多"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":[".","同步","定义","中","，","action","动作","那","也","过","是","介绍","我们","使用","的","有","数据","通信接口","进行","既然","过程","反馈","文件","机制","通信","。","接口","之前","一种"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["看","周期","订阅","应用","发现","三个","其","实现","服务器","运动","调用","收到","命令","客户","时","，","一个","动作","还会","是不是","当","上边","隐藏","话题","也","服务","是","会","发布","发送","大家","不是","使用","基于","秘密","的","模块","就是","应用层","有","目标","应带","两个","务器","服务器端","表示","再","客户端","过程","竟然","反馈"," ","没错","其实","机制","动图","。","通信","下","仔细","者","底层","来","一种","和","发布者","请求"],"title":"由服务和话题合成","title_tokens":["话题","合成","服务","和","由"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_7","text":"相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["较长","分析","例程","程序","，","动作","起来","话题","服务","我们","的","并","相对","一下","相比","通信","运行","。","一","之前","和"],"title":"编程方法","title_tokens":["方法","编程"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_8","text":"$ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_action_cpp server $ ros2 run learning_action_cpp client","text_tokens":[".","$","action","ros2","tros","opt","source","client","local","setup","install","learning"," ","_","run","/","bash","cpp","server"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_9","text":"动作的服务器fibonacci_action_server.cpp： #include <inttypes.h> #include <memory> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO(jacobperron): Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionServer : public rclcpp :: Node { public : using Fibonacci = learning_action_cpp :: action :: Fibonacci ; using GoalHandleFibonacci = rclcpp_action :: ServerGoalHandle < Fibonacci > ; explicit MinimalActionServer ( const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : Node ( \"minimal_action_server\" , options ) { using namespace std :: placeholders ; this -> action_server_ = rclcpp_action :: create_server < Fibonacci > ( this -> get_node_base_interface (), this -> get_node_clock_interface (), this -> get_node_logging_interface (), this -> get_node_waitables_interface (), \"fibonacci\" , std :: bind ( & MinimalActionServer :: handle_goal , this , _1 , _2 ), std :: bind ( & MinimalActionServer :: handle_cancel , this , _1 ), std :: bind ( & MinimalActionServer :: handle_accepted , this , _1 )); } private : rclcpp_action :: Server < Fibonacci >:: SharedPtr action_server_ ; rclcpp_action :: GoalResponse handle_goal ( const rclcpp_action :: GoalUUID & uuid , std :: shared_ptr < const Fibonacci :: Goal > goal ) { RCLCPP_INFO ( this -> get_logger (), \"Received goal request with order %d\" , goal -> order ); ( void ) uuid ; // Let's reject sequences that are over 9000 if ( goal -> order > 9000 ) { return rclcpp_action :: GoalResponse :: REJECT ; } return rclcpp_action :: GoalResponse :: ACCEPT_AND_EXECUTE ; } rclcpp_action :: CancelResponse handle_cancel ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Received request to cancel goal\" ); ( void ) goal_handle ; return rclcpp_action :: CancelResponse :: ACCEPT ; } void execute ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Executing goal\" ); rclcpp :: Rate loop_rate ( 1 ); const auto goal = goal_handle -> get_goal (); auto feedback = std :: make_shared < Fibonacci :: Feedback > (); auto & sequence = feedback -> sequence ; sequence . push_back ( 0 ); sequence . push_back ( 1 ); auto result = std :: make_shared < Fibonacci :: Result > (); for ( int i = 1 ; ( i < goal -> order ) && rclcpp :: ok (); ++ i ) { // Check if there is a cancel request if ( goal_handle -> is_canceling ()) { result -> sequence = sequence ; goal_handle -> canceled ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Canceled\" ); return ; } // Update sequence sequence . push_back ( sequence [ i ] + sequence [ i - 1 ]); // Publish feedback goal_handle -> publish_feedback ( feedback ); RCLCPP_INFO ( this -> get_logger (), \"Publish Feedback\" ); loop_rate . sleep (); } // Check if goal is done if ( rclcpp :: ok ()) { result -> sequence = sequence ; goal_handle -> succeed ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Succeeded\" ); } } void handle_accepted ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { using namespace std :: placeholders ; // this needs to return quickly to avoid blocking the executor, so spin up a new thread std :: thread { std :: bind ( & MinimalActionServer :: execute , this , _1 ), goal_handle }. detach (); } }; // class MinimalActionServer int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); auto action_server = std :: make_shared < MinimalActionServer > (); rclcpp :: spin ( action_server ); rclcpp :: shutdown (); return 0 ; } 动作的客户端fibonacci_action_client.cpp： #include <inttypes.h> #include <memory> #include <string> #include <iostream> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO ( jacobperron ) : Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionClient : public rclcpp::Node { public: using Fibonacci = learning_action_cpp::action::Fibonacci ; using GoalHandleFibonacci = rclcpp_action::ClientGoalHandle<Fibonacci> ; explicit MinimalActionClient ( const rclcpp::NodeOptions & node_options = rclcpp::NodeOptions ()) : Node ( \"minimal_action_client\" , node_options ) , goal_done_ ( false ) { this->client_ptr_ = rclcpp_action::create_client<Fibonacci> ( this->get_node_base_interface () , this->get_node_graph_interface () , this->get_node_logging_interface () , this->get_node_waitables_interface () , \"fibonacci\" ) ; this->timer_ = this->create_wall_timer ( std::chrono::milliseconds ( 500 ) , std::bind ( & MinimalActionClient::send_goal, this )) ; } bool is_goal_done () const { return this->goal_done_ ; } void send_goal () { using namespace std::placeholders ; this->timer_->cancel () ; this->goal_done_ = false ; if ( !this->client_ptr_ ) { RCLCPP_ERROR ( this->get_logger () , \"Action client not initialized\" ) ; } if ( !this->client_ptr_->wait_for_action_server ( std::chrono::seconds ( 10 ))) { RCLCPP_ERROR ( this->get_logger () , \"Action server not available after waiting\" ) ; this->goal_done_ = true ; return ; } auto goal_msg = Fibonacci::Goal () ; goal_msg.order = 10 ; RCLCPP_INFO ( this->get_logger () , \"Sending goal\" ) ; auto send_goal_options = rclcpp_action::Client<Fibonacci>::SendGoalOptions () ; send_goal_options.goal_response_callback = std::bind ( & MinimalActionClient::goal_response_callback, this, _1 ) ; send_goal_options.feedback_callback = std::bind ( & MinimalActionClient::feedback_callback, this, _1, _2 ) ; send_goal_options.result_callback = std::bind ( & MinimalActionClient::result_callback, this, _1 ) ; auto goal_handle_future = this->client_ptr_->async_send_goal ( goal_msg, send_goal_options ) ; } private: rclcpp_action::Client<Fibonacci>::SharedPtr client_ptr_ ; rclcpp::TimerBase::SharedPtr timer_ ; bool goal_done_ ; void goal_response_callback ( std::shared_future<GoalHandleFibonacci::SharedPtr> future ) { auto goal_handle = future.get () ; if ( !goal_handle ) { RCLCPP_ERROR ( this->get_logger () , \"Goal was rejected by server\" ) ; } else { RCLCPP_INFO ( this->get_logger () , \"Goal accepted by server, waiting for result\" ) ; } } void feedback_callback ( GoalHandleFibonacci::SharedPtr, const std::shared_ptr<const Fibonacci::Feedback> feedback ) { RCLCPP_INFO ( this->get_logger () , \"Next number in sequence received: %\" PRId32, feedback->sequence.back ()) ; } void result_callback ( const GoalHandleFibonacci::WrappedResult & result ) { this->goal_done_ = true ; switch ( result.code ) { case rclcpp_action::ResultCode::SUCCEEDED: break ; case rclcpp_action::ResultCode::ABORTED: RCLCPP_ERROR ( this->get_logger () , \"Goal was aborted\" ) ; return ; case rclcpp_action::ResultCode::CANCELED: RCLCPP_ERROR ( this->get_logger () , \"Goal was canceled\" ) ; return ; default: RCLCPP_ERROR ( this->get_logger () , \"Unknown result code\" ) ; return ; } RCLCPP_INFO ( this->get_logger () , \"Result received\" ) ; for ( auto number : result.result->sequence ) { RCLCPP_INFO ( this->get_logger () , \"%\" PRId32, number ) ; } } } ; // class MinimalActionClient int main ( int argc, char ** argv ) { rclcpp::init ( argc, argv ) ; auto action_client = std::make_shared<MinimalActionClient> () ; while ( !action_client->is_goal_done ()) { rclcpp::spin_some ( action_client ) ; } rclcpp::shutdown () ; return 0 ; }","text_tokens":["2","-","break","callback","clientgoalhandle","up","=","rclcpp","minimalactionclient","action","using","d","]","minimal","goalhandlefibonacci","waiting","detach","of","+","wait","nodeoptions","shared","this","reject","result","thread","务器","if","make","default","{","not","part","*","!","std","iostream","_","goal","memory","back","a","resultcode","msg","private","sharedptr","placeholders","wrappedresult","received","canceled","true","request","todo","return","h","(","sending","minimalactionserver","goalresponse","sequences","uuid","order",">","namespace","get","bind","initialized","future","const","void","_-","i","：","async","number","accept","sequence","int","error","quickly","base","for","sleep","so","客户端","the","explicit","main","handle","included","logger","[","and","push","case","execute","spin","&&","update","milliseconds","executor","ptr","\"","needs","0","1","&","is","fibonacci","500","服务器","graph","public","goaluuid","inttypes","客户","动作",":","check","blocking","send","string","there","succeed","服务","init","succeeded","的","to","options","cancel","available","'","unknown","let","executing","next","accepted","by","node","create","with","clock",";","include","bool",")","interface","loop","else","while","as","response","<","timer","class","some","done","are","10","chrono","wall",".",",","sendgoaloptions","new","avoid","info","seconds","it","switch","timerbase","over","rate","auto","char","rejected","argc","false","s","argv","was","in","servergoalhandle","once","publish","shutdown","client","#","aborted","%","that","code","logging","remove","9000","learning"," ","feedback","after","ok","cancelresponse","hpp","prid32","++","/","canceling","}","cpp","waitables","server","jacobperron"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/","text":"零拷贝数据传输 在传统操作系统的数据传输过程中，系统内部会在磁盘、内存、缓存中多次进行数据拷贝，每次都会占用CPU的资源，数据量小的时候还好，随着数据量的增加，CPU的开销也会持续增加，尤其是在机器人图像数据的应用中 ，经常会发生这种问题，导致CPU都在做数据拷贝，没有时间处理其他的应用功能了，直接的感觉就是处理卡顿。 零拷贝技术 针对这种问题，零拷贝技术应运而生。 零拷贝主要的任务就是避免CPU将数据从一块存储拷贝到另外一块存储，避免让CPU做大量的数据拷贝任务，减少不必要的拷贝，或者让别的组件来做这一类简单的数据传输任务，让CPU解脱出来专注于别的任务。这样就可以让系统资源的利用更加有效。 TogetherROS中就提供了灵活、高效的零拷贝功能，可以显著降低大尺寸数据的通信延时和CPU占用，具体有多显著呢，我们不妨进行一个测试。 TogetherROS零拷贝性能测试 我们使用TogetherROS系统内部集成的性能测试工具——performance_test，来评估下开启零拷贝前后的性能差异，这里我们传输的样本数据量是4M。 未开启零拷贝进行数据传输 $ ros2 run performance_test perf_test --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #未开启 开启零拷贝数据传输： $ ros2 run performance_test perf_test --zero-copy --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #开启 好的，测试已经跑完了，我们把结果放到这里，来分析一下。 在这个测试中，关键有四个指标： 时延，也就是消息从发布者到订阅者的传输时间。不开启零拷贝的情况下，平均为0.004912s，开启零拷贝之后，速度快了差不多40倍，平均为0.000180s。 CPU使用率，表示通信活动所占用的CPU时间，大家可以看这个utime指标，开启零拷贝之后时间有显著的提升，消耗CPU的资源少了。 驻留内存，包括通信过程中分配的内存和共享内存，是这个maxrss中的数据，开启零拷贝之后，占用的内存也更少。 样本统计，包括测试中发送、接收以及丢失的消息数量，是这组数据，依然是开启零拷贝之后性能更好。 通过测试，对于大数据通信来讲，零拷贝在CPU消耗、内存占用以及通信延迟抖动方面的性能都会更好。 这里只是便于大家感受零拷贝技术的效果，具体编程中如何使用零拷贝机制呢？ 编程开发 为了方便大家使用，TogetherROS针对零拷贝功能进行了封装，风格类似ROS2中话题通信的接口，还是话题通信一样的流程，我们只需要修改几个函数就可以实现啦。 运行例程 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run hbmem_pubsub talker $ ros2 run hbmem_pubsub listener 代码解析 发布者publisher_hbmem.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" using namespace std :: chrono_literals ; class MinimalHbmemPublisher : public rclcpp :: Node { public : MinimalHbmemPublisher () : Node ( \"minimal_hbmem_publisher\" ), count_ ( 0 ) { // 创建publisher_hbmem，topic为\"topic\"，QOS为KEEPLAST(10)，以及默认的可靠传输 publisher_ = this -> create_publisher_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 ); // 定时器，每隔40毫秒调用一次timer_callback进行消息发送 timer_ = this -> create_wall_timer ( 40 ms , std :: bind ( & MinimalHbmemPublisher :: timer_callback , this )); } private : // 定时器回调函数 void timer_callback () { // 获取要发送的消息 auto loanedMsg = publisher_ -> borrow_loaned_message (); // 判断消息是否可用，可能出现获取消息失败导致消息不可用的情况 if ( loanedMsg . is_valid ()) { // 引用方式获取实际的消息 auto & msg = loanedMsg . get (); // 获取当前时间，单位为us auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()). count (); // 对消息的index和time_stamp进行赋值 msg . index = count_ ; msg . time_stamp = time_now ; // 打印发送消息 RCLCPP_INFO ( this -> get_logger (), \"message: %d\" , msg . index ); publisher_ -> publish ( std :: move ( loanedMsg )); // 注意，发送后，loanedMsg已不可用 // 计数器加一 count_ ++ ; } else { // 获取消息失败，丢弃该消息 RCLCPP_INFO ( this -> get_logger (), \"Failed to get LoanMessage!\" ); } } // 定时器 rclcpp :: TimerBase :: SharedPtr timer_ ; // hbmem publisher rclcpp :: PublisherHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr publisher_ ; // 计数器 size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者subscriber_hbmem.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" class MinimalHbmemSubscriber : public rclcpp :: Node { public : MinimalHbmemSubscriber () : Node ( \"minimal_hbmem_subscriber\" ) { // 创建subscription_hbmem，topic为\"sample\"，QOS为KEEPLAST(10)，以及默认的可靠传输 // 消息回调函数为topic_callback subscription_ = this -> create_subscription_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 , std :: bind ( & MinimalHbmemSubscriber :: topic_callback , this , std :: placeholders :: _1 )); } private : // 消息回调函数 void topic_callback ( const hbmem_pubsub :: msg :: SampleMessage :: SharedPtr msg ) const { // 注意，msg只能在回调函数中使用，回调函数返回后，该消息就会被释放 // 获取当前时间 auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()) . count (); // 计算延时并打印出来 RCLCPP_INFO ( this -> get_logger (), \"msg %d, time cost %dus\" , msg -> index , time_now - msg -> time_stamp ); } // hbmem subscription rclcpp :: SubscriptionHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemSubscriber > ()); rclcpp :: shutdown (); return 0 ; } 接口汇总 我们整理一下，与ROS2中的话题通信相比，TogetherROS带有零拷贝机制的话题通信接口是这样的。 在发布者中，我们可以使用PublisherHbmem来创建一个发布者对象，然后通过create_publisher_hbmem发布数据，而在订阅者中，SubscriptionHbmem用来创建一个订阅者对象，通过 create_subscription_hbmem订阅需要的数据，至于底层如何完成零拷贝的过程，都交给TogetherROS即可。","text_tokens":["差不多","多次","于","评估","另外","呢","机器人","也","—","发布","专注","listener","minimalhbmempublisher","赋值","包括","通信接口","数据","this","出现","if","内部","{","风格","引用","不妨","std","_","机制","到","平均","判断","必要","4m","功能","用来","几个","time","array4m","数据通","分析","(","t","已",">","get","倍","跑","since","main","释放","时间","集成","0","1","减少","epoch","literals","实现","talker","延迟","方便","public",":","--","少","init","为","单位","history","计数","source","to","就是","流程","别的","而","延时","修改","尺寸","从","functional","只能","clock",";",")","通信","共享内存","感受","class","每隔","时延","指标","加一","看","差异",".",",","机器","一个","0.000180","好","快","timerbase","cpu","subscription","zero","增加","需要","完成","一类","前后","大","下","高效","依然","简单","毫秒","返回","接口","}","提供","灵活","max","performance","=","方式","]","using","有","更加","过程","？","拷贝","处理","定时","r","还好","用","depth","memory","msg","所","placeholders","用率","中","四个","bind","开启","统计","publisher","了","30","占用","尤其","或者","可靠","抖动","分配","samplemessage","subscriber","相比","运行","m","底层","每次","感觉","内存","&","是否","注意","loanmessage","系统资源","操作","情况","这","要","资源","图像","的","us","runtime","提升","没有","这样","create","steady","一块","bash","具体","test","更好","move","以及","关键","maxrss","auto","opt","我们","完","publish","#","接收","local"," ","针对","hpp","交给","方面","只是","++","编程","cpp","-","就","keep","rclcpp","把","d","系统","传输","大家","已经","可用","开发","将","汇总","install","*","!","问题","解脱","多","sample","操作系统","last","传统","消息","拷贝到","namespace","让","该","对象","const","cost","void","borrow","数据传输","实际","经常","使用率","类似","pubsub","logger","、","。","者","有效","避免","\"","和","utime","is","应用","这里","工具","随着","零","一样","ros2","string","是","效果","都","应运","导致","未","封装","setup","显著","消耗","出来","include","message","如何","timer","创建","数据量","测试","count","topic","活动","驻留","函数","，","subscriptionhbmem","stamp","hbmem","reliable","速度","大量","测试工具","啦","开销","char","整理","持续","发生","microseconds","共享","40","并打印","进行","丢失","当前","更少","/","卡顿","其他","发布者","可以","通过","订阅","callback","不多","这组","minimal","默认","0.004912","小","shared","计算","带有","可能","keeplast","index","make","表示","这个","应运而生","技术","丢弃","放到","代码","这种","private","sharedptr","在","ms","组件","return","还是","$","cast","利用","size","做","数据通信","数量","loanedmsg","会","valid","即可","perf","之后","打印","：","便于","后","int","时候","试工","100","然后","磁盘","[","一下","spin","run","togetherros","结果","缓存","例程","失败","来讲","dus","任务","tros","至于","copy","failed","minimalhbmemsubscriber","使用","对于","publisherhbmem","性能","node","不必要","样本","else","<","降低","来","now","直接","10","不","chrono","wall","对","与","调用","据传","定时器","info","主要","话题","解析","duration","qos","为了","发送","argc","s","argv","计数器","只","不必","shutdown","获取","%","loaned","一次","不可","回调","被","存储"],"title":"零拷贝数据传输","title_tokens":["数据","数据传输","传输","据传","零","拷贝"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_1","text":"在传统操作系统的数据传输过程中，系统内部会在磁盘、内存、缓存中多次进行数据拷贝，每次都会占用CPU的资源，数据量小的时候还好，随着数据量的增加，CPU的开销也会持续增加，尤其是在机器人图像数据的应用中 ，经常会发生这种问题，导致CPU都在做数据拷贝，没有时间处理其他的应用功能了，直接的感觉就是处理卡顿。","text_tokens":["数据量","缓存","应用","操作系统","机器","操作","据传","多次","中","随着","，","做","传统","cpu","系统","机器人","也","会","是","开销","传输","资源","图像","的","持续","小","就是","数据","都","时候","增加","发生","导致","了","在","数据传输","进行","内部","过程","经常","占用","没有","尤其"," ","拷贝","磁盘","处理","还好","问题","时间","、","。","这种","卡顿","每次","功能","感觉","内存","其他","直接"],"title":"零拷贝数据传输","title_tokens":["数据","数据传输","传输","据传","零","拷贝"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_2","text":"针对这种问题，零拷贝技术应运而生。 零拷贝主要的任务就是避免CPU将数据从一块存储拷贝到另外一块存储，避免让CPU做大量的数据拷贝任务，减少不必要的拷贝，或者让别的组件来做这一类简单的数据传输任务，让CPU解脱出来专注于别的任务。这样就可以让系统资源的利用更加有效。 TogetherROS中就提供了灵活、高效的零拷贝功能，可以显著降低大尺寸数据的通信延时和CPU占用，具体有多显著呢，我们不妨进行一个测试。","text_tokens":["可以","提供","就","灵活","于","另外","系统","呢","专注","传输","有","数据","更加","将","拷贝","应运而生","技术","不妨","问题","这种","必要","功能","解脱","组件","多","中","利用","做","拷贝到","让","了","数据传输","占用","或者","、","。","有效","避免","和","togetherros","减少","系统资源","任务","零","这","资源","的","就是","应运","别的","显著","这样","延时","尺寸","从","不必要","出来","通信","一块","降低","来","具体","测试","据传","，","一个","主要","cpu","大量","我们","不必","进行"," ","针对","一类","大","高效","简单","存储"],"title":"零拷贝技术","title_tokens":["拷贝","技术","零"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#togetherros","text":"我们使用TogetherROS系统内部集成的性能测试工具——performance_test，来评估下开启零拷贝前后的性能差异，这里我们传输的样本数据量是4M。 未开启零拷贝进行数据传输 $ ros2 run performance_test perf_test --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #未开启 开启零拷贝数据传输： $ ros2 run performance_test perf_test --zero-copy --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #开启 好的，测试已经跑完了，我们把结果放到这里，来分析一下。 在这个测试中，关键有四个指标： 时延，也就是消息从发布者到订阅者的传输时间。不开启零拷贝的情况下，平均为0.004912s，开启零拷贝之后，速度快了差不多40倍，平均为0.000180s。 CPU使用率，表示通信活动所占用的CPU时间，大家可以看这个utime指标，开启零拷贝之后时间有显著的提升，消耗CPU的资源少了。 驻留内存，包括通信过程中分配的内存和共享内存，是这个maxrss中的数据，开启零拷贝之后，占用的内存也更少。 样本统计，包括测试中发送、接收以及丢失的消息数量，是这组数据，依然是开启零拷贝之后性能更好。 通过测试，对于大数据通信来讲，零拷贝在CPU消耗、内存占用以及通信延迟抖动方面的性能都会更好。 这里只是便于大家感受零拷贝技术的效果，具体编程中如何使用零拷贝机制呢？","text_tokens":["可以","-","订阅","通过","max","performance","不多","keep","差不多","这组","评估","把","系统","呢","也","—","0.004912","发布","传输","大家","已经","包括","有","数据","表示","内部","过程","这个","？","拷贝","技术","r","_","机制","放到","到","depth","平均","4m","在","所","array4m","用率","数据通","分析","last","$","中","消息","数据通信","四个","数量","开启","会","perf","统计","之后","倍","：","便于","试工","了","100","跑","数据传输","30","占用","使用率","一下","抖动","时间","分配","集成","、","。","run","m","者","内存","和","togetherros","1","utime","结果","这里","工具","来讲","延迟","零","情况","ros2","--","少","是","copy","使用","为","资源","的","history","效果","就是","runtime","都","提升","未","对于","性能","显著","消耗","从","样本","通信","如何","共享内存","感受","来","时延","指标","具体","10","不","看","数据量","test","差异","测试","更好","据传","活动","驻留","以及","，","0.000180","好","关键","快","maxrss","cpu","reliable","速度","测试工具","发送","我们","完","s","zero","#","接收","共享","40","进行"," ","丢失","前后","大","方面","只是","更少","下","依然","编程","发布者"],"title":"TogetherROS零拷贝性能测试","title_tokens":["测试","性能","零","拷贝","togetherros"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_3","text":"为了方便大家使用，TogetherROS针对零拷贝功能进行了封装，风格类似ROS2中话题通信的接口，还是话题通信一样的流程，我们只需要修改几个函数就可以实现啦。","text_tokens":["可以","就","还是","实现","方便","中","，","零","一样","函数","ros2","话题","啦","为了","大家","使用","我们","的","只","流程","了","封装","进行","需要","修改","针对","拷贝","风格","类似","通信","。","接口","功能","几个","togetherros"],"title":"编程开发","title_tokens":["编程","开发"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_4","text":"$ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run hbmem_pubsub talker $ ros2 run hbmem_pubsub listener","text_tokens":["tros","_","hbmem",".","/","run","listener","opt","local","talker","$","setup","bash","install"," ","ros2","source","pubsub"],"title":"运行例程","title_tokens":["例程","运行"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_5","text":"发布者publisher_hbmem.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" using namespace std :: chrono_literals ; class MinimalHbmemPublisher : public rclcpp :: Node { public : MinimalHbmemPublisher () : Node ( \"minimal_hbmem_publisher\" ), count_ ( 0 ) { // 创建publisher_hbmem，topic为\"topic\"，QOS为KEEPLAST(10)，以及默认的可靠传输 publisher_ = this -> create_publisher_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 ); // 定时器，每隔40毫秒调用一次timer_callback进行消息发送 timer_ = this -> create_wall_timer ( 40 ms , std :: bind ( & MinimalHbmemPublisher :: timer_callback , this )); } private : // 定时器回调函数 void timer_callback () { // 获取要发送的消息 auto loanedMsg = publisher_ -> borrow_loaned_message (); // 判断消息是否可用，可能出现获取消息失败导致消息不可用的情况 if ( loanedMsg . is_valid ()) { // 引用方式获取实际的消息 auto & msg = loanedMsg . get (); // 获取当前时间，单位为us auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()). count (); // 对消息的index和time_stamp进行赋值 msg . index = count_ ; msg . time_stamp = time_now ; // 打印发送消息 RCLCPP_INFO ( this -> get_logger (), \"message: %d\" , msg . index ); publisher_ -> publish ( std :: move ( loanedMsg )); // 注意，发送后，loanedMsg已不可用 // 计数器加一 count_ ++ ; } else { // 获取消息失败，丢弃该消息 RCLCPP_INFO ( this -> get_logger (), \"Failed to get LoanMessage!\" ); } } // 定时器 rclcpp :: TimerBase :: SharedPtr timer_ ; // hbmem publisher rclcpp :: PublisherHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr publisher_ ; // 计数器 size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者subscriber_hbmem.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" class MinimalHbmemSubscriber : public rclcpp :: Node { public : MinimalHbmemSubscriber () : Node ( \"minimal_hbmem_subscriber\" ) { // 创建subscription_hbmem，topic为\"sample\"，QOS为KEEPLAST(10)，以及默认的可靠传输 // 消息回调函数为topic_callback subscription_ = this -> create_subscription_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 , std :: bind ( & MinimalHbmemSubscriber :: topic_callback , this , std :: placeholders :: _1 )); } private : // 消息回调函数 void topic_callback ( const hbmem_pubsub :: msg :: SampleMessage :: SharedPtr msg ) const { // 注意，msg只能在回调函数中使用，回调函数返回后，该消息就会被释放 // 获取当前时间 auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()) . count (); // 计算延时并打印出来 RCLCPP_INFO ( this -> get_logger (), \"msg %d, time cost %dus\" , msg -> index , time_now - msg -> time_stamp ); } // hbmem subscription rclcpp :: SubscriptionHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["-","订阅","callback","就","=","rclcpp","方式","]","using","d","minimal","默认","发布","minimalhbmempublisher","传输","可用","赋值","shared","this","计算","可能","keeplast","出现","if","index","make","{","*","!","引用","std","定时","用","丢弃","_","判断","memory","msg","private","sharedptr","在","placeholders","ms","time","sample","return","(","t","cast","已","中","size","消息","loanedmsg",">","namespace","bind","get","会","valid","该","const","cost","void","打印","：","后","int","publisher","borrow","实际","since","main","释放","可靠","pubsub","logger","[","时间","samplemessage","spin","subscriber","者","\"","和","0","1","&","是否","epoch","is","literals","注意","loanmessage","失败","dus","public","情况",":","string","failed","要","init","minimalhbmemsubscriber","使用","为","单位","的","us","计数","to","导致","publisherhbmem","node","延时","create","functional","steady","只能","clock",";","include","出来",")","else","message","<","timer","class","每隔","加一","now","10","创建","chrono","wall","对",".",",","count","topic","move","调用","定时器","以及","函数","info","，","subscriptionhbmem","stamp","hbmem","timerbase","char","auto","subscription","duration","qos","发送","argc","argv","计数器","publish","shutdown","#","获取","microseconds","%","40","并打印","进行","loaned"," ","当前","hpp","一次","不可","回调","/","++","返回","毫秒","}","cpp","被","发布者"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/3.4_.%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_6","text":"我们整理一下，与ROS2中的话题通信相比，TogetherROS带有零拷贝机制的话题通信接口是这样的。 在发布者中，我们可以使用PublisherHbmem来创建一个发布者对象，然后通过create_publisher_hbmem发布数据，而在订阅者中，SubscriptionHbmem用来创建一个订阅者对象，通过 create_subscription_hbmem订阅需要的数据，至于底层如何完成零拷贝的过程，都交给TogetherROS即可。","text_tokens":["可以","创建","通过","与","订阅","中","subscriptionhbmem","，","零","一个","ros2","hbmem","至于","话题","是","即可","发布","subscription","对象","我们","使用","整理","的","通信接口","数据","都","publisher","带有","publisherhbmem","而","需要","完成","过程","这样","create"," ","拷贝","然后","用来","一下","_","机制","交给","相比","通信","。","者","如何","底层","接口","来","在","togetherros","发布者"],"title":"接口汇总","title_tokens":["接口","汇总"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/","text":"分布式通信配置 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如在这款机器人系统中，就有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用旭日派作为控制器，主要实现传感器驱动、电机控制、AI应用等功能，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个计算平台之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过TogehterROS都已经为我们准备好了，我们只需要在每一个计算上配置好TogehterROS或者ROS2的环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下分布式系统的魅力。 分布式网络搭建 旭日派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function # 旭日派端 $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function # PC端 神奇的事情就这样发生了，旭日X3派上安装的是TogetherROS，我的电脑上安装的是ROS2，他们只要处于同一网络中，就可以实现通信了，感觉就像在一个电脑里一样。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和旭日X3派端中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 话题分布式通信 之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 以话题通信为例，旭日派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串，我们看下效果如何。 $ ros2 run learning_topic_cpp talker # 旭日派端 $ ros2 run learning_topic_cpp listener # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，我们几乎不需要任何配置，代码也不需要做任何修改，一切都会变得如此轻松。","text_tokens":["可以","提供","中有","订阅","就","此外","几乎","计算机","桥接","任务分配","有点","不够","繁多","rclcpp","=","togehterros","hello","minimal","系统","机器人","呢","也","个","member","信息","之一","发布","传输","listener","大家","已经","比如","小","框架","有","计算能力","计算","数据","带领","开发","出现","可能","将","网络","安装","之间","？","这款","准备","处理","连接","笔记","用","_","问题","机制","到","代码","变得","这种","pc","希望","驱动","功能","一切","在","采用","所","不同","什么","局域网","方法","派","多","局域","全都","如果","各种","监控","看上","他们","$","中","做","确保","x3","起来",">","里","压力","比较","会","毕竟","控制","即可","命令行","事情","看上去","频繁","不是","examples","我","attention","接下","打通","任何","这些","后","：","位于","而是","不过","多个","等","两个","了","publisher","像","your","端","以","实际","经常","一系列","或者","由","类似","一下","一系","配置","分配","同一","、","subscriber","。","运行","组成","旭日","笔记本电脑","复杂","run","如","小组","一","无法","者","局域网络","感觉","和","togetherros","上去","系列","加入","是否","轻松","分组","应用","例程","实现","每","命令","talker","任务","方便","情况","一样","带来","ros2","请","export","较","传感器","这","world","上边","ai","布式","一句","才能","是","能力","很多","只要","使用","为","放在","拆解","资源","放","的","ros","效果","就是","非常","并","都","分布式系统","派端","笔记本","function","电机","domain","这样","没有","消耗","于是","修改","处于","简而言之","为例","平台","通信","智能","传感","挺","同一个","id","两者","<","感受","如何","相互","作为","结构","具体","直接","虚拟机","不","看","虚拟","如此","测试","topic","魅力","机器","模式","运动","搭建","编写","，","分布","分布式","一个","岂","远程","好","主要","叫","完全","话题","字符串","变化","神奇","互联","啦","典型","我们","接下来","电脑","你","还","适合","减轻","只","用到","上","节点","算机","发生","#","并且","而言","需要","完成","遇到","没","learning"," ","互通","原本","感器","下","卡顿","环境","则","下来","体积","之前","cpp","字符","控制器","发布者"],"title":"分布式通信配置","title_tokens":["配置","布式","通信","分布","分布式"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。","text_tokens":["可以","多","全都","如果","计算机","机器","实现","任务分配","不够","繁多","任务","中","，","一个","情况","岂","分布","分布式","这","里","机器人","压力","布式","会","能力","系统","不是","放在","拆解","的","这些","减轻","就是","计算能力","计算","分布式系统","上","算机","多个","等","出现","将","经常","遇到","？"," ","处理","分配","、","到","智能","运行","平台","。","卡顿","功能"],"title":"分布式通信配置","title_tokens":["配置","布式","通信","分布","分布式"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_2","text":"什么叫分布式？ 机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如在这款机器人系统中，就有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用旭日派作为控制器，主要实现传感器驱动、电机控制、AI应用等功能，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个计算平台之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过TogehterROS都已经为我们准备好了，我们只需要在每一个计算上配置好TogehterROS或者ROS2的环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下分布式系统的魅力。","text_tokens":["可以","就","此外","计算机","有点","togehterros","系统","机器人","信息","之一","传输","大家","已经","小","比如","框架","有","数据","计算","带领","开发","可能","将","之间","？","这款","准备","笔记","到","这种","驱动","功能","在","采用","不同","什么","派","多","各种","监控","看上","中","做","起来","压力","比较","毕竟","控制","看上去","接下","任何","这些","位于","不过","等","两个","了","或者","由","分配","配置","、","组成","。","旭日","笔记本电脑","复杂","一","上去","应用","实现","每","任务","方便","ros2","较","传感器","这","上边","ai","布式","是","为","资源","放","的","就是","非常","都","分布式系统","笔记本","电机","消耗","于是","平台","通信","传感","挺","感受","相互","作为","结构","不","魅力","机器","运动","，","分布","分布式","一个","远程","好","主要","叫","完全","变化","典型","我们","接下来","电脑","还","适合","减轻","只","节点","上","算机","并且","需要"," ","原本","感器","下","环境","下来","体积","控制器"],"title":"分布式通信","title_tokens":["分布式","通信","布式","分布"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_3","text":"旭日派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function # 旭日派端 $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function # PC端 神奇的事情就这样发生了，旭日X3派上安装的是TogetherROS，我的电脑上安装的是ROS2，他们只要处于同一网络中，就可以实现通信了，感觉就像在一个电脑里一样。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["可以","中有","就","桥接","计算机","rclcpp","minimal","呢","也","个","member","已经","计算","将","网络","安装","之间","？","连接","用","_","问题","到","pc","希望","在","所","什么","局域网","派","局域","如果","他们","$","中","做","确保","x3","里","会","命令行","事情","examples","我","attention","接下","打通","后","而是","publisher","不过","了","两个","像","端","一下","配置","同一","subscriber","旭日","。","run","如","小组","无法","局域网络","感觉","和","togetherros","分组","实现","命令","一样","带来","ros2","请","这","是","能力","很多","只要","使用","为","的","效果","并","都","派端","function","这样","修改","处于","简而言之","平台","通信","同一个","具体","直接","虚拟机","不","虚拟","测试","模式","，","一个","话题","神奇","互联","我们","接下来","电脑","你","上","算机","发生","#","而言","需要","完成"," ","互通","下来"],"title":"分布式网络搭建","title_tokens":["布式","搭建","网络","分布","分布式"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_4","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和旭日X3派端中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["提供","可以","分组","如果","就","计算机","实现","=","$","中","，","一个","一样","ros2","export","x3",">","一句","才能","即可","我们","电脑","的","ros","：","计算","派端","算机","了","your","将","domain","这样","没"," ","处于","类似","问题","机制","同一","配置","分配","到","_","通信","旭日","小组","同一个","id","则","两者","<","无法","。","在","和","不同","加入"],"title":"分布式网络分组","title_tokens":["分组","布式","网络","分布","分布式"]},{"location":"TogetherROS/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_5","text":"之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 以话题通信为例，旭日派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串，我们看下效果如何。 $ ros2 run learning_topic_cpp talker # 旭日派端 $ ros2 run learning_topic_cpp listener # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，我们几乎不需要任何配置，代码也不需要做任何修改，一切都会变得如此轻松。","text_tokens":["可以","订阅","几乎","hello","呢","机器人","也","发布","listener","开发","网络","？","_","问题","代码","变得","pc","一切","在","方法","派","$","中","做","会","频繁","任何","用到","了","以","端","实际","一系列","类似","一系","配置","旭日","。","run","者","系列","是否","轻松","例程","talker","情况","ros2","world","布式","使用","的","ros","效果","都","派端","没有","修改","为例","通信","如何","作为","直接","不","看","如此","topic","测试","机器","编写","，","分布","分布式","好","话题","字符串","啦","我们","电脑","#","需要","learning"," ","下","之前","cpp","字符","发布者"],"title":"话题分布式通信","title_tokens":["布式","话题","通信","分布","分布式"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/","text":"数字输入与输出 数字输入与输出是最常用的一种外设通信方式，虽然每一个端口只有0和1两种状态，但却可以组合出各种各样的变化。 数字输入与输出原理 数字输入与输出，也称为通用输入输出，全称是General-purpose input/output，大部分情况下，我们都会用简称GPIO GPIO的功能，主要是指这个管脚可以作为数字信号的输入或者输出使用，到底是输入还是输出呢，这需要我们使用系统寄存器来进行配置。 当GPIO被设置为输入模式时，就可以读取这个管脚上的电平高低，从而实现读取外部信号的功能，比如外部按键的信号，就是这样读取的。 当GPIO被设置为输出模式时，我们就可以主动改变管脚的电平高低了，这样就能通过电平的变化，控制外部的设备，比如点亮或者熄灭一个LED灯。 除此之外，一些IO口还可以配置成其他功能，比如PWM输出，串口通信等等。 关于旭日X3派的管脚定义，大家可以参考这张图，他会显示每个管脚具体可以实现什么功能。 这里需要说明一点，旭日X3派的管脚序号定义有三种编码方式： 第一种就是Board编码，这种就是按照主板上管脚排针编号，分别对应1~40号排针。 第二种就是BCM编码，这种方式是参考 Broadcom SOC 的通道编号，侧重CPU寄存器，在使用BCM库或者使用python编程时，常采用的一种编码方式。 第三种就是X3编码，可以理解为是旭日X3派自己的编码方式，在使用旭日派自己的驱动库编程时，会使用到这种编码。 大家在后续编程开发中，需要结合函数接口的说明，使用对应的引脚编号，不然可能会出现意料之外的问题。 引脚复用配置工具 虽然从硬件上看，扩展出来的引脚只有40个，不过大部分引脚还可以配置成多种功能，这样延伸出来变化可就多了，那如何配置引脚的不同功能呢？ 我们可以使用旭日X3派中提供的srpi-config工具进行配置。 直接在终端中输入这个指令，就可以看到这样的窗口，okay配置对应管脚为专用功能，disabled配置对应管脚为GPIO模式，按照自己的需要进行配置即可，配置完成后重启才会生效。 了解了GPIO的概念，接下来我们就要开始编程啦。 数字输入编程 首先我们来看下最基本的数字输入测试，读取一个按键的状态。 硬件接线 我们将按键的一边连接到旭日X3派的38号引脚上，这是一个GPIO的接口，另一边连接到39号引脚，也就是GND。 原理很简单，按键没按下时，导线是断开的，GPIO是默认的状态，按键按下后，导线就会导通，GPIO的状态变成了GND。 这样，我们就可以通过电平的变化，知道按键的状态啦。 运行例程 我们不妨来运行一下，看下实际效果是不是这样。 $ sudo python3 simple_input.py 我们将一个按键开关接到对应的管脚上， 然后连接到旭日X3PI当中，运行刚才的程序。之后我们按下或是松开按键时，他都会打印出对应的电平变化。 按下显示的就是LOW，也就是低电平，松开就是HIGH，也就是高电平。 代码解析 数字输入的功能实现啦，我们来看下代码是如何实现的。 simple_input.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 input_pin = 38 # BOARD 编码 38 def main (): prev_value = None # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输入模式 GPIO . setup ( input_pin , GPIO . IN ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : # 读取管脚电平 value = GPIO . input ( input_pin ) if value != prev_value : if value == GPIO . HIGH : value_str = \"HIGH\" else : value_str = \"LOW\" print ( \"Value read from pin {} : {} \" . format ( input_pin , value_str )) prev_value = value time . sleep ( 1 ) finally : GPIO . cleanup () if __name__ == '__main__' : main () 我们在Python中需要引入X3Pi的GPIO库，从而使用对应的GPIO功能。 主函数里首先需要定义了一个变量来存储这个管脚的电平信号。 进行初始化，设置管脚的编码模式为BOARD模式，之后定义输入用的管脚，这里使用的是BOARD编码，因为他是第38个管脚，所以为38号。 之后的话就会进入到循环当中，这样的一个函数就可以读出当前的电平值。 没有按下按键的时候，38管脚和GND是断开的，他就是高电平，按下按键时，就和GND导通了，这个管脚就会编程低电平。 如果电平值和上一次存储的不一致，后面的判断就会判断出是升高还是降低，最后会把结果打印出来。 松开按键时同理。 数字输出编程 GPIO不止有输入功能，还有输出功能，大家应该经常看到电子设别上的LED灯吧，这就是典型的IO输出控制的设备，我们也来试一试。 硬件接线 我们将一个LED灯的正极连接到了2号引脚，这是5V电源，用来给LED供电的，不过LED电阻小，为了不至于烧坏，我们最好还是在电路中串联一个电阻来限制电流大小。 接下来，当LED的负极接到GND，也就是电源的0V上时，LED两边会因为有电势差而被点亮；当LED的负极也连接到高电平，也就是5V的时候，会因为两边没有电势差，也就不会被点亮。 这个负极的电平信号我们就用GPIO来输出，所以我们把LED的负极连接到任意的GPIO引脚上，比如38号，将这个引脚设置为输出模式，当输出高电平时，灯就会熄灭，输出低电平，灯就会被点亮。 把这两个动作放到一个循环中，就可以实现闪烁的功能啦。 运行示例程序 快来运行例程试一试吧，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行程序，就可以看到这个LED就会开始闪烁了。 $ sudo python3 simple_input.py 代码解析 simple_out.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 output_pin = 38 # BOARD 编码 38 def main (): # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输出模式，并且初始化为高电平 GPIO . setup ( output_pin , GPIO . OUT , initial = GPIO . HIGH ) # 记录当前管脚状态 curr_value = GPIO . HIGH print ( \"Starting demo now! Press CTRL+C to exit\" ) try : # 间隔1秒时间，循环控制LED灯亮灭 while True : time . sleep ( 1 ) GPIO . output ( output_pin , curr_value ) curr_value ^= GPIO . HIGH finally : GPIO . cleanup () if __name__ == '__main__' : main () 数字输入与输出集成 学习了GPIO的输入与输出功能后，我们就可以做一些自动化的功能了。 硬件接线 比如我们同时连接一个按键和LED灯，尝试实现按键被按下，灯被点亮，松开，灯熄灭，这样的功能。 运行示例程序 我们通过这个例程来试一试效果如何？ $ sudo python3 button_led.py 我们来看一下具体的操作，同样的，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。按下按键后，就可以看到LED被点亮了，松开之后，LED就熄灭了。 代码解析 button_led.py #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道： # 36号作为输出，可以点亮一个LED # 38号作为输入，可以接一个按钮 led_pin = 36 # BOARD 编码 36 but_pin = 38 # BOARD 编码 38 # 禁用警告信息 GPIO . setwarnings ( False ) def main (): prev_value = None # Pin Setup: GPIO . setmode ( GPIO . BOARD ) # BOARD pin-numbering scheme GPIO . setup ( led_pin , GPIO . OUT ) # LED pin set as output GPIO . setup ( but_pin , GPIO . IN ) # Button pin set as input # Initial state for LEDs: GPIO . output ( led_pin , GPIO . LOW ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : curr_value = GPIO . input ( but_pin ) if curr_value != prev_value : GPIO . output ( led_pin , curr_value ) prev_value = curr_value print ( \"Outputting {} to Pin {} \" . format ( curr_value , led_pin )) time . sleep ( 1 ) finally : GPIO . cleanup () # cleanup all GPIO if __name__ == '__main__' : main () 基本的配置还是一样的，引入基本的库，然后设置为BOARD模式，然后初始化两个管脚，一个用来读取按键的通断，一个用来控制LED的亮灭，之后只需要判断按键的状态来做出对应的控制LED的动作就可以了。","text_tokens":["寄存","initial","接线","正极","大部分","参考","意料","呢","也","个","第二","设备","做出","电势","出现","if","{","input","不妨","_","因为","到","判断","间隔","值","指","功能","用来","两边","time","基本","派","外设","管脚","这是","prev","警告","(","out","最","0v","禁用","bcm","串联","不过","for","name","学习","main","数字","时间","不止","电流","集成","gnd","0","1","能","常","端口","硬件","才","实现","定义","程序","一边",":","循环","主板","一些","自己","的话","按","为","to","就是","意料之外","'","sudo","电阻","而","等等","部分","简称","从","应该","leds",")","通信","另一边","最好","试一试","看",".",",","刚才","开关","一个","快","cpu","pwm","但","需要","完成","下","升高","简单","接口","}","led","提供","2","=","上时","方式","starting","5v","变成","是不是","当","set","对应","很","+","输出","自动","有","吧","初始","就要","button","？","用","却","def","看到","驱动","状态","外部","什么","除此","后续","如果","口","usr","来看","exit","中","变量","数字信号","扩展","编号","不是","接下","后面","之外","cleanup","curr","了","引脚","或者","按键","引入","运行","按下","print","进入","；","限制","每","操作","情况","称为","松开","这","两种","理解","指令","output","结合","的","from","第三种","高低","demo","这样","没有","首先","记录","一种","env","负极","具体","36","供电","电势差","通断","soc","原理","显示","py","示例","通用","我们","接下来","低电平","#","生效","实物","bin"," ","会导通","信号","烧坏","设置","c","编程","format","或是","同样","不然","专用","-","就","时","重启","侧重","开始","把","全称","系统","pin","大家","输入输出","说明","io","hobot","比如","python","窗口","开发","除此之外","自动化","将","!","他","编码","终端","问题","read","simple","采用","true","多","第三","各种","__","常用","闪烁","x3","控制","了解","复用","灯","读出","灭","两个","numbering","实际","经常","okay","输入","电路","39","第一种","。","旭日","同理","第一","\"","和","finally","这里","工具","熄灭","一样","是","点亮","同时","board","效果","都","setup","关于","分别","一致","出来","第","如何","x3pi","各样","到底","测试","模式","函数","，","变化","啦","接","虽然","断开","还","电子","上","只有","40","进行","38","press","导线","general","当前","电平","/","下来","所以","其他","多种","可以","通过","初始化","出","号","默认","none","value","灯亮","broadcom","信息","setmode","小","按钮","尝试","可能","这个","连接","gpio","放到","ctrl","代码","这种","给","在","不同","setwarnings","还是","任意","import","设别","出是","$","做","三种","~","str","按照","里","亮","库","会","即可","之后","读取","打印","：","改变","后","可","all","时候","序号","sleep","寄存器","然后","从而","一下","配置","知道","config","概念","二种","大小","不会","导通","结果","例程","当中","scheme","组合","low","动作","outputting","秒","不至于","high","至于","张图","state","使用","but","高电平","python3","各种各样","最后","他会","disabled","else","while","purpose","as","降低","作为","来","主动","now","直接","不","与","还有","那","第二种","srpi","接到","主要","实际效果","解析","典型","为了","大部","^","false","成","try","in","一点","只","并且","编码方式","排针","延伸","没","电源","一次","主","串口","被","通道","存储","每个"],"title":"数字输入与输出","title_tokens":["输出","数字","输入","与"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_1","text":"数字输入与输出是最常用的一种外设通信方式，虽然每一个端口只有0和1两种状态，但却可以组合出各种各样的变化。","text_tokens":["可以","各样","端口","与","外设","各种","每","出","方式","，","一个","常用","组合","两种","最","是","变化","虽然","的","但","输出","只有","各种各样","数字","输入","却","通信","。","状态","一种","和","0","1"],"title":"数字输入与输出","title_tokens":["输出","数字","输入","与"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_2","text":"数字输入与输出，也称为通用输入输出，全称是General-purpose input/output，大部分情况下，我们都会用简称GPIO GPIO的功能，主要是指这个管脚可以作为数字信号的输入或者输出使用，到底是输入还是输出呢，这需要我们使用系统寄存器来进行配置。 当GPIO被设置为输入模式时，就可以读取这个管脚上的电平高低，从而实现读取外部信号的功能，比如外部按键的信号，就是这样读取的。 当GPIO被设置为输出模式时，我们就可以主动改变管脚的电平高低了，这样就能通过电平的变化，控制外部的设备，比如点亮或者熄灭一个LED灯。 除此之外，一些IO口还可以配置成其他功能，比如PWM输出，串口通信等等。 关于旭日X3派的管脚定义，大家可以参考这张图，他会显示每个管脚具体可以实现什么功能。 这里需要说明一点，旭日X3派的管脚序号定义有三种编码方式： 第一种就是Board编码，这种就是按照主板上管脚排针编号，分别对应1~40号排针。 第二种就是BCM编码，这种方式是参考 Broadcom SOC 的通道编号，侧重CPU寄存器，在使用BCM库或者使用python编程时，常采用的一种编码方式。 第三种就是X3编码，可以理解为是旭日X3派自己的编码方式，在使用旭日派自己的驱动库编程时，会使用到这种编码。 大家在后续编程开发中，需要结合函数接口的说明，使用对应的引脚编号，不然可能会出现意料之外的问题。","text_tokens":["可以","寄存","-","通过","就","时","方式","号","侧重","大部分","当","参考","意料","全称","呢","系统","也","第二","broadcom","对应","大家","输入输出","设备","io","说明","比如","输出","python","有","开发","除此之外","可能","出现","这个","input","用","编码","问题","gpio","到","这种","通道","驱动","指","功能","在","采用","外部","什么","除此","派","第三","后续","管脚","口","还是","中","数字信号","三种","x3","~","按照","库","会","编号","控制","灯","读取","bcm","：","改变","之外","了","序号","引脚","寄存器","或者","数字","输入","从而","按键","配置","第一种","。","旭日","二种","第一","能","1","常","实现","定义","这里","情况","熄灭","称为","这","主板","一些","自己","张图","是","点亮","理解","output","使用","为","结合","的","board","就是","意料之外","都","第三种","高低","部分","这样","等等","关于","简称","分别","他会","通信","purpose","作为","来","一种","主动","具体","与","到底","模式","soc","函数","，","一个","第二种","显示","主要","cpu","通用","变化","pwm","大部","我们","成","还","一点","上","40","进行","编码方式","需要","排针"," ","general","信号","设置","电平","/","下","接口","编程","串口","被","其他","led","不然","每个"],"title":"数字输入与输出原理","title_tokens":["与","原理","数字","输入","输出"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_3","text":"虽然从硬件上看，扩展出来的引脚只有40个，不过大部分引脚还可以配置成多种功能，这样延伸出来变化可就多了，那如何配置引脚的不同功能呢？ 我们可以使用旭日X3派中提供的srpi-config工具进行配置。 直接在终端中输入这个指令，就可以看到这样的窗口，okay配置对应管脚为专用功能，disabled配置对应管脚为GPIO模式，按照自己的需要进行配置即可，配置完成后重启才会生效。 了解了GPIO的概念，接下来我们就要开始编程啦。","text_tokens":["可以","提供","专用","-","就","重启","开始","大部分","呢","个","对应","窗口","就要","？","这个","终端","gpio","看到","功能","在","不同","派","多","管脚","中","x3","扩展","按照","会","即可","了解","接下","后","可","不过","了","引脚","okay","输入","配置","config","旭日","。","概念","硬件","才","工具","自己","指令","使用","为","的","部分","这样","从","出来","disabled","如何","直接","看","模式","，","那","srpi","变化","啦","虽然","大部","我们","接下来","成","还","上","只有","40","进行","需要","完成","生效","延伸"," ","下来","编程","多种"],"title":"引脚复用配置工具","title_tokens":["引脚","工具","配置","复用"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_4","text":"首先我们来看下最基本的数字输入测试，读取一个按键的状态。","text_tokens":["最","。","测试","下","来看","状态","我们","首先","，","读取","一个","的","数字","输入","基本","按键"],"title":"数字输入编程","title_tokens":["数字","输入","编程"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_5","text":"我们将按键的一边连接到旭日X3派的38号引脚上，这是一个GPIO的接口，另一边连接到39号引脚，也就是GND。 原理很简单，按键没按下时，导线是断开的，GPIO是默认的状态，按键按下后，导线就会导通，GPIO的状态变成了GND。 这样，我们就可以通过电平的变化，知道按键的状态啦。","text_tokens":["可以","派","通过","这是","就","一边","原理","时","号","，","一个","变成","默认","x3","也","是","变化","啦","很","我们","按","断开","的","后","就是","上","了","将","38","引脚","这样","没","导线"," ","会导通","连接","按键","39","gpio","知道","到","电平","旭日","。","下","另一边","gnd","简单","按下","接口","状态"],"title":"硬件接线","title_tokens":["接线","硬件"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_6","text":"我们不妨来运行一下，看下实际效果是不是这样。 $ sudo python3 simple_input.py 我们将一个按键开关接到对应的管脚上， 然后连接到旭日X3PI当中，运行刚才的程序。之后我们按下或是松开按键时，他都会打印出对应的电平变化。 按下显示的就是LOW，也就是低电平，松开就是HIGH，也就是高电平。","text_tokens":["看","管脚",".","当中","刚才","开关","程序","$","出","时","，","一个","low","是不是","松开","接到","显示","py","high","实际效果","也","会","变化","对应","我们","不是","之后","的","打印","效果","就是","高电平","都","上","python3","sudo","低电平","将","实际","这样"," ","然后","不妨","input","一下","按键","连接","_","他","到","电平","。","运行","旭日","下","按下","x3pi","来","simple","或是"],"title":"运行例程","title_tokens":["例程","运行"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_7","text":"数字输入的功能实现啦，我们来看下代码是如何实现的。 simple_input.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 input_pin = 38 # BOARD 编码 38 def main (): prev_value = None # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输入模式 GPIO . setup ( input_pin , GPIO . IN ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : # 读取管脚电平 value = GPIO . input ( input_pin ) if value != prev_value : if value == GPIO . HIGH : value_str = \"HIGH\" else : value_str = \"LOW\" print ( \"Value read from pin {} : {} \" . format ( input_pin , value_str )) prev_value = value time . sleep ( 1 ) finally : GPIO . cleanup () if __name__ == '__main__' : main () 我们在Python中需要引入X3Pi的GPIO库，从而使用对应的GPIO功能。 主函数里首先需要定义了一个变量来存储这个管脚的电平信号。 进行初始化，设置管脚的编码模式为BOARD模式，之后定义输入用的管脚，这里使用的是BOARD编码，因为他是第38个管脚，所以为38号。 之后的话就会进入到循环当中，这样的一个函数就可以读出当前的电平值。 没有按下按键的时候，38管脚和GND是断开的，他就是高电平，按下按键时，就和GND导通了，这个管脚就会编程低电平。 如果电平值和上一次存储的不一致，后面的判断就会判断出是升高还是降低，最后会把结果打印出来。 松开按键时同理。","text_tokens":["可以","就","初始化","=","时","starting","号","把","none","个","pin","value","对应","hobot","+","setmode","python","初始","if","{","这个","!","input","他","编码","用","_","gpio","def","因为","ctrl","到","代码","判断","值","read","功能","simple","在","time","true","管脚","prev","如果","usr","(","import","来看","exit","出是","还是","中","变量","__","str","里","库","编号","会","之后","读取","后面","打印","：","读出","cleanup","时候","了","sleep","name","main","数字","输入","从而","按键","引入","。","同理","按下","gnd","print","进入","\"","和","1","硬件","finally","导通","结果","当中","实现","定义","这里","low",":","松开","循环","high","的话","是","使用","为","的","board","to","from","就是","高电平","'","python3","setup","demo","这样","没有","最后","一致","出来",")","else","while","第","如何","as","x3pi","降低","首先","来","env","now","不",".",",","模式","函数","，","一个","py","啦","我们","断开","try","in","上","低电平","#","38","进行","需要","press","bin"," ","当前","信号","电平","设置","一次","/","下","主","升高","所以","c","}","format","编程","通道","存储"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_8","text":"GPIO不止有输入功能，还有输出功能，大家应该经常看到电子设别上的LED灯吧，这就是典型的IO输出控制的设备，我们也来试一试。","text_tokens":["试一试","还有","设别","，","这","也","控制","灯","典型","大家","我们","设备","io","的","电子","输出","就是","有","上","吧","经常","输入","应该","gpio","不止","。","看到","功能","来","led"],"title":"数字输出编程","title_tokens":["数字","编程","输出"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_9","text":"我们将一个LED灯的正极连接到了2号引脚，这是5V电源，用来给LED供电的，不过LED电阻小，为了不至于烧坏，我们最好还是在电路中串联一个电阻来限制电流大小。 接下来，当LED的负极接到GND，也就是电源的0V上时，LED两边会因为有电势差而被点亮；当LED的负极也连接到高电平，也就是5V的时候，会因为两边没有电势差，也就不会被点亮。 这个负极的电平信号我们就用GPIO来输出，所以我们把LED的负极连接到任意的GPIO引脚上，比如38号，将这个引脚设置为输出模式，当输出高电平时，灯就会熄灭，输出低电平，灯就会被点亮。 把这两个动作放到一个循环中，就可以实现闪烁的功能啦。","text_tokens":["可以","2","就","上时","时","号","把","5v","正极","当","也","小","比如","输出","有","电势","将","这个","连接","用","因为","gpio","放到","到","给","功能","在","用来","两边","这是","还是","任意","中","闪烁","会","0v","灯","接下","串联","不过","时候","了","两个","引脚","电路","电流","。","gnd","大小","不会","；","限制","实现","熄灭","动作","不至于","循环","这","至于","点亮","为","的","就是","高电平","电阻","而","没有","最好","来","负极","供电","电势差","模式","一个","，","接到","啦","为了","我们","接下来","上","低电平","38","电源"," ","信号","烧坏","电平","设置","下来","所以","被","led"],"title":"硬件接线","title_tokens":["接线","硬件"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_10","text":"快来运行例程试一试吧，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行程序，就可以看到这个LED就会开始闪烁了。 $ sudo python3 simple_input.py","text_tokens":["试一试","可以","例程",".","就","刚才","程序","$","，","开始","快","闪烁","按照","py","会","的","python3","吧","sudo","了","将","完成","实物","这个"," ","然后","input","连接","_","设置","到","。","运行","x3pi","看到","来","simple","led"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_11","text":"simple_out.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 output_pin = 38 # BOARD 编码 38 def main (): # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输出模式，并且初始化为高电平 GPIO . setup ( output_pin , GPIO . OUT , initial = GPIO . HIGH ) # 记录当前管脚状态 curr_value = GPIO . HIGH print ( \"Starting demo now! Press CTRL+C to exit\" ) try : # 间隔1秒时间，循环控制LED灯亮灭 while True : time . sleep ( 1 ) GPIO . output ( output_pin , curr_value ) curr_value ^= GPIO . HIGH finally : GPIO . cleanup () if __name__ == '__main__' : main ()","text_tokens":["initial","初始化","=","starting","pin","value","灯亮","hobot","+","setmode","输出","初始","if","!","编码","_","gpio","def","ctrl","通道","间隔","simple","状态","time","true","管脚","usr","(","import","exit","__","out","编号","控制","：","cleanup","curr","灭","sleep","name","main","时间","print","\"","1","硬件","finally","定义",":","秒","循环","high","output","使用","为","的","board","to","高电平","'","python3","setup","demo",")","while","as","记录","env","now",".",",","模式","，","py","^","try","#","并且","38","press","bin"," ","当前","设置","电平","/","c","led"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_12","text":"学习了GPIO的输入与输出功能后，我们就可以做一些自动化的功能了。","text_tokens":["可以","gpio","一些","与","了","自动","就","自动化","。","学习","我们","功能","，","做","的","输入","后","输出"],"title":"数字输入与输出集成","title_tokens":["与","集成","数字","输入","输出"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_13","text":"比如我们同时连接一个按键和LED灯，尝试实现按键被按下，灯被点亮，松开，灯熄灭，这样的功能。","text_tokens":["实现","一个","熄灭","，","松开","同时","点亮","灯","我们","按","的","比如","尝试","这样","连接","按键","。","下","功能","被","和","led"],"title":"硬件接线","title_tokens":["接线","硬件"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_14","text":"我们通过这个例程来试一试效果如何？ $ sudo python3 button_led.py 我们来看一下具体的操作，同样的，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。按下按键后，就可以看到LED被点亮了，松开之后，LED就熄灭了。","text_tokens":["试一试","可以","通过","例程",".","就","刚才","程序","来看","操作","$","，","熄灭","松开","py","按照","点亮","我们","之后","的","效果","后","python3","sudo","了","将","button","实物","完成","？","这个"," ","然后","连接","一下","按键","_","设置","到","。","运行","如何","按下","x3pi","看到","来","被","同样","led","具体"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_15","text":"button_led.py #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道： # 36号作为输出，可以点亮一个LED # 38号作为输入，可以接一个按钮 led_pin = 36 # BOARD 编码 36 but_pin = 38 # BOARD 编码 38 # 禁用警告信息 GPIO . setwarnings ( False ) def main (): prev_value = None # Pin Setup: GPIO . setmode ( GPIO . BOARD ) # BOARD pin-numbering scheme GPIO . setup ( led_pin , GPIO . OUT ) # LED pin set as output GPIO . setup ( but_pin , GPIO . IN ) # Button pin set as input # Initial state for LEDs: GPIO . output ( led_pin , GPIO . LOW ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : curr_value = GPIO . input ( but_pin ) if curr_value != prev_value : GPIO . output ( led_pin , curr_value ) prev_value = curr_value print ( \"Outputting {} to Pin {} \" . format ( curr_value , led_pin )) time . sleep ( 1 ) finally : GPIO . cleanup () # cleanup all GPIO if __name__ == '__main__' : main () 基本的配置还是一样的，引入基本的库，然后设置为BOARD模式，然后初始化两个管脚，一个用来读取按键的通断，一个用来控制LED的亮灭，之后只需要判断按键的状态来做出对应的控制LED的动作就可以了。","text_tokens":["可以","initial","-","就","初始化","=","号","starting","none","pin","value","set","信息","对应","hobot","+","setmode","按钮","输出","做出","初始","if","button","{","!","input","编码","_","gpio","def","ctrl","判断","通道","用来","状态","setwarnings","time","基本","true","警告","管脚","prev","usr","(","import","exit","还是","__","out","亮","库","控制","禁用","之后","读取","：","cleanup","all","curr","灭","两个","了","for","numbering","sleep","name","main","输入","然后","按键","配置","引入","。","print","\"","1","finally","定义","scheme","outputting","low","一样",":","动作","点亮","output","state","使用","为","的","board","but","to","'","python3","setup","demo","leds",")","while","as","作为","来","env","now","36",".",",","模式","通断","，","一个","py","接","false","try","in","只","#","38","需要","press","bin"," ","设置","/","c","}","format","led"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/","text":"PWM脉冲宽度调制 我们已经可以用GPIO控制LED灯一闪一闪亮晶晶了，这样只有亮和灭的状态似乎还是太简单了，能不能对LED的亮度进行调整呢？ 当然没问题，这就要用到接下来学习的PWM脉冲宽度调制了。 PWM脉冲宽度调制原理 在GPIO的数字输入和输出模式中，只有高低电平，高电平一般是3.3V或者5V，低电平就是0V，如果我想要一个折中一点的电压怎么办呢？PWM大家了解一下。 PWM，全称是脉冲宽度调制 ， 是一种对模拟信号电平进行数字编码的方法，通过高分辨率计数器，调制出一定占空比的方波，通过这种方式对模拟信号的电平进行编码。 通俗点来说，如果我们有一个10W的灯泡，在一个小时中亮了半个小时，那我们宏观来看，它在这一个小时中的功率就是5W，这样就相当于是它的电压被降低了。而我们还可以通过改变这一个小时中，灯泡被点亮的时长，来等效出不同的电压。 然后，我们把一个小时缩短为很小的一个时间，到达一定的微分程度，表现出来的就是电压的变化，而这个很小的时间，就是PWM频率的倒数，被点亮的时间在这个很小的时间中所占的百分比就叫做占空比。 这里大家也要注意，虽然PWM在尽力呈现出模拟信号的样子，但本质还是数字信号，因为在给定的某一任何时刻，引脚只能高电平或者低电平。 通过PWM技术，可以让数字电路产生类似模拟信号的效果，从而实现类似的无级控制，比如风扇的转速，或者屏幕的亮度，很多都是通过PWM技术实现的调节。 PWM编程 接下来我们就来试一试，通过PWM让一个LED实现不同亮度的变化，也就是我们常见的呼吸灯了。 硬件接线 还是用这个LED灯，一端连接电阻，再到5V高电平的引脚，另外一端，接到33号引脚的PWM接口。 运行示例程序 大家先来运行例程，看看效果如何。 $ sudo python3 simple_pwm.py 我们来看一下实物的操作，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。就可以看到这样的一个呼吸灯的效果了。 代码解析 simple_pwm.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 支持PWM的管脚: 32 and 33, 在使用PWM时，必须确保该管脚没有被其他功能占用 output_pin = 33 def main (): # Pin Setup: # Board pin-numbering scheme GPIO . setmode ( GPIO . BOARD ) # 支持的频率范围： 48KHz ~ 192MHz p = GPIO . PWM ( output_pin , 48000 ) # 初始占空比 25%， 先每0.25秒增加5%占空比，达到100%之后再每0.25秒减少5%占空比 val = 25 incr = 5 p . ChangeDutyCycle ( val ) p . start ( val ) print ( \"PWM running. Press CTRL+C to exit.\" ) try : while True : time . sleep ( 0.25 ) if val >= 100 : incr = - incr if val <= 0 : incr = - incr val += incr p . ChangeDutyCycle ( val ) finally : p . stop () GPIO . cleanup () if __name__ == '__main__' : main () 一样的引入GPIO的库，然后设置管脚编码模式为BOARD，然后创建一个PWM的实例化对象p，同时设置他的频率，之后就可以通过ChangeDutyCycle来改变他的占空比，在循环当中，占空比大于等于100时，就会以5%的梯度减小；当小于等于0时，就会以5%的梯度增大。","text_tokens":["48000","接线","微分","点","本质","另外","呢","也","叫做","等效","半个","呼吸","if","不能","因为","_","到","程度","某","功能","time","管脚","(",">","0v","name","学习","到达","main","数字","时间","and","小于","0","能","来说","减少","硬件","实现","程序","缩短","192mhz",":","循环","为","计数","to","就是","'","sudo","电阻","而","只能","宏观",")","方波","试一试","等于","灯泡",".",",","刚才","想要","一个","转速","pwm","但","表现","增加","完成","一般","简单","接口","led","=","方式","start","5v","当","+","输出","有","初始","就要","再","？","用","def","看到","范围","化","状态","很小","数字电","如果","灯一闪","usr","似乎","来看","exit","中","达到","数字信号","看看","我","高","接下","任何","大于","一定","cleanup","3.3","了","引脚","产生","占用","折中","0.25","或者","引入","运行","一","print","高分","；","注意","它","每","操作","呈现","这","很多","要","output","的","必须","占","这样","没有","调制","一种","33","env","模拟信号","通俗","减小","p","原理","高分辨率","py","示例","我们","接下来","低电平","#","实物","bin"," ","信号","设置","脉冲","一端","c","编程","-","就","频率","相当于","时","把","数字编码","全称","屏幕","样子","pin","大家","hobot","已经","比如","48khz","分辨率","将","!","他","编码","问题","分辨","simple","true","一闪","调整","__","数字电路","亮晶晶","让","控制","了解","辨率","灯","该","对象","风扇","怎么办","用到","灭","以","numbering","5%","输入","模拟","类似","电路","。","现出","changedutycycle","\"","和","running","10w","5","finally","这里","一样","是","点亮","同时","board","效果","都","100%","setup","出来","如何","x3pi","呈现出","25%","中亮","宽度","创建","模式","，","怎么","变化","虽然","实例","还","任何时刻","只有","先","进行","press","梯度","电平","/","下来","其他","可以","通过","出","号","给定","百分比","中所","功率","setmode","stop","无级","这个","5w","技术","连接","gpio","ctrl","代码","这种","25","小时","当于","在","方法","不同","还是","import","$","确保","~","v","按照","亮","库","会","之后","：","改变","倒数","电压","100","val","sleep","占空比","然后","从而","一下","32","例程","当中","亮度","scheme","常见","秒","百分","相当","使用","时刻","高电平","python3","时长","调节","while","as","<","降低","来","当然","对","太","incr","那","接到","解析","尽力","try","计数器","一点","支持","没","增大","晶晶","被","何时"],"title":"PWM脉冲宽度调制","title_tokens":["宽度","脉冲","调制","pwm"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm","text":"我们已经可以用GPIO控制LED灯一闪一闪亮晶晶了，这样只有亮和灭的状态似乎还是太简单了，能不能对LED的亮度进行调整呢？ 当然没问题，这就要用到接下来学习的PWM脉冲宽度调制了。","text_tokens":["可以","宽度","对","太","一闪","灯一闪","亮度","调整","还是","似乎","，","这","呢","亮","亮晶晶","控制","pwm","我们","接下来","已经","接下","的","用到","灭","了","只有","就要","进行","学习","不能","这样","没","？"," ","用","问题","gpio","晶晶","。","调制","简单","脉冲","状态","当然","下来","和","led","能"],"title":"PWM脉冲宽度调制","title_tokens":["宽度","脉冲","调制","pwm"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm_1","text":"在GPIO的数字输入和输出模式中，只有高低电平，高电平一般是3.3V或者5V，低电平就是0V，如果我想要一个折中一点的电压怎么办呢？PWM大家了解一下。 PWM，全称是脉冲宽度调制 ， 是一种对模拟信号电平进行数字编码的方法，通过高分辨率计数器，调制出一定占空比的方波，通过这种方式对模拟信号的电平进行编码。 通俗点来说，如果我们有一个10W的灯泡，在一个小时中亮了半个小时，那我们宏观来看，它在这一个小时中的功率就是5W，这样就相当于是它的电压被降低了。而我们还可以通过改变这一个小时中，灯泡被点亮的时长，来等效出不同的电压。 然后，我们把一个小时缩短为很小的一个时间，到达一定的微分程度，表现出来的就是电压的变化，而这个很小的时间，就是PWM频率的倒数，被点亮的时间在这个很小的时间中所占的百分比就叫做占空比。 这里大家也要注意，虽然PWM在尽力呈现出模拟信号的样子，但本质还是数字信号，因为在给定的某一任何时刻，引脚只能高电平或者低电平。 通过PWM技术，可以让数字电路产生类似模拟信号的效果，从而实现类似的无级控制，比如风扇的转速，或者屏幕的亮度，很多都是通过PWM技术实现的调节。","text_tokens":["可以","通过","就","频率","微分","相当于","出","方式","把","5v","数字编码","点","本质","全称","给定","呢","屏幕","也","样子","百分比","中所","叫做","功率","大家","等效","比如","半个","输出","有","分辨率","无级","？","这个","5w","技术","编码","因为","gpio","程度","这种","小时","某","当于","分辨","在","方法","不同","很小","数字电","如果","还是","来看","中","数字电路","数字信号","v","让","0v","控制","了解","辨率","风扇","我","高","任何","怎么办","改变","一定","倒数","3.3","电压","了","引脚","到达","产生","折中","或者","占空比","数字","输入","模拟","然后","类似","一下","从而","电路","时间","。","现出","一","高分","和","10w","来说","亮度","注意","实现","它","缩短","这里","百分","呈现","这","是","点亮","很多","要","相当","为","时刻","的","计数","效果","就是","高电平","都","而","占","这样","时长","调节","只能","宏观","出来","调制","降低","来","呈现出","方波","一种","中亮","宽度","模拟信号","对","灯泡","通俗","模式","想要","，","一个","转速","那","高分辨率","怎么","变化","pwm","尽力","我们","虽然","还","但","计数器","一点","表现","任何时刻","低电平","只有","进行"," ","信号","一般","电平","脉冲","被","何时"],"title":"PWM脉冲宽度调制原理","title_tokens":["宽度","调制","脉冲","pwm","原理"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm_2","text":"接下来我们就来试一试，通过PWM让一个LED实现不同亮度的变化，也就是我们常见的呼吸灯了。","text_tokens":["试一试","通过","就","亮度","实现","，","一个","常见","也","让","变化","灯","pwm","我们","接下来","接下","的","就是","呼吸","了","。","下来","来","不同","led"],"title":"PWM编程","title_tokens":["编程","pwm"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_1","text":"还是用这个LED灯，一端连接电阻，再到5V高电平的引脚，另外一端，接到33号引脚的PWM接口。","text_tokens":["还是","，","号","5v","另外","接到","灯","pwm","的","高电平","电阻","引脚","再","这个","连接","用","到","电平","。","一端","接口","33","led"],"title":"硬件接线","title_tokens":["接线","硬件"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_2","text":"大家先来运行例程，看看效果如何。 $ sudo python3 simple_pwm.py 我们来看一下实物的操作，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。就可以看到这样的一个呼吸灯的效果了。","text_tokens":["可以","例程",".","就","刚才","程序","来看","操作","$","，","一个","看看","py","按照","灯","pwm","大家","我们","的","效果","python3","sudo","呼吸","先","了","将","完成","实物","这样"," ","然后","连接","一下","_","设置","到","。","运行","如何","x3pi","看到","来","simple"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_3","text":"simple_pwm.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 支持PWM的管脚: 32 and 33, 在使用PWM时，必须确保该管脚没有被其他功能占用 output_pin = 33 def main (): # Pin Setup: # Board pin-numbering scheme GPIO . setmode ( GPIO . BOARD ) # 支持的频率范围： 48KHz ~ 192MHz p = GPIO . PWM ( output_pin , 48000 ) # 初始占空比 25%， 先每0.25秒增加5%占空比，达到100%之后再每0.25秒减少5%占空比 val = 25 incr = 5 p . ChangeDutyCycle ( val ) p . start ( val ) print ( \"PWM running. Press CTRL+C to exit.\" ) try : while True : time . sleep ( 0.25 ) if val >= 100 : incr = - incr if val <= 0 : incr = - incr val += incr p . ChangeDutyCycle ( val ) finally : p . stop () GPIO . cleanup () if __name__ == '__main__' : main () 一样的引入GPIO的库，然后设置管脚编码模式为BOARD，然后创建一个PWM的实例化对象p，同时设置他的频率，之后就可以通过ChangeDutyCycle来改变他的占空比，在循环当中，占空比大于等于100时，就会以5%的梯度减小；当小于等于0时，就会以5%的梯度增大。","text_tokens":["可以","-","通过","48000","就","频率","=","时","start","当","pin","hobot","+","setmode","48khz","初始","if","stop","再","!","他","编码","_","gpio","def","ctrl","25","范围","功能","化","在","simple","time","true","管脚","usr","(","import","exit","__","达到","确保","~",">","库","会","该","对象","之后","：","改变","大于","cleanup","100","val","以","numbering","sleep","name","占用","5%","占空比","main","0.25","然后","引入","and","。","小于","changedutycycle","32","print","\"","0","running","5","减少","finally","；","当中","192mhz","每","scheme","一样",":","秒","循环","同时","output","使用","为","的","board","to","'","python3","必须","100%","setup","没有",")","while","as","<","来","25%","33","env","创建","等于",".",",","减小","模式","p","incr","，","一个","py","pwm","实例","try","增加","#","先","支持","press","bin"," ","增大","梯度","设置","/","c","被","其他"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/","text":"UART串口通信 现在的传感器和执行器种类越来越多，需要和控制器传输的数据也是多种多样，只用GPIO来控制和读取的话，只有0和1的状态，未免还是有点麻烦，各种各样的通信方法也层出不穷，UART串口通信绝对是最为常用的一种。 串口通信原理 串行通信是一种通讯协议，也可以简称为串口，可以理解为数据是串成一串的，所以也就只能一位一位的发送，这样传输的速度虽然受到了限制，但是对硬件线路的要求小，只需要一对传输线，一个发送，一个接收，就可以实现双向通信了。 一般情况下，串口模块发送数据的管脚叫做TX，接收数据的管脚叫做RX。发送端发过去的数据，需要对方串口模块的接收端来接收，所以一侧发送端的TX需要连接到另外一侧的接收端RX，接收和发送在两方看来是相对的，所以我们接线的时候，要记住永远是TX引脚连接到RX引脚，接反了数据就传输不了了。 硬件连接 接下来，我们就尝试通过一个串口模块来实现电脑和旭日X3Pi的串口通信。 在接线方面，我们先交叉连接串口模块和旭日X3Pi的RX、TX，同时为了让两边具有相同的参考电平，还要将两者的GND连接到一起，然后再把串口模块连接到电脑就可以了。 运行示例程序 接下来就可以运行串口通信的例程了。 $ sudo python3 test_serial.py 实物接线完成后，在旭日X3派的终端中输入指令启动例程，很快就可以在终端中看到串口向外发送的数据了。 在串口连接的电脑中打开一个串口软件，用来接收和发送数据，设置好端口和波特率，就能看到旭日X3派发过来的数据了。我们再使用电脑的串口软件尝试下发送数据给旭日X3派，输入1234，点击发送，可以看到，X3Pi的终端这边也成功的接收到了数据并且打印出来了。 代码解析 test_serial.py： #!/usr/bin/env python3 import sys import os import time # 导入python串口库 import serial import serial.tools.list_ports def serialTest (): print ( \"List of enabled UART:\" ) os . system ( 'ls /dev/tty[a-zA-Z]*' ) uart_dev = input ( \"请输入需要测试的串口设备名:\" ) baudrate = input ( \"请输入波特率(9600,19200,38400,57600,115200,921600):\" ) try : ser = serial . Serial ( uart_dev , int ( baudrate ), timeout = 1 ) # 1s timeout except Exception as e : print ( \"open serial failed! \\n \" ) print ( ser ) print ( \"Starting demo now! Press CTRL+C to exit\" ) while True : test_data = \"AA55\" write_num = ser . write ( test_data . encode ( 'UTF-8' )) print ( \"Send: \" , test_data ) received_data = ser . read ( write_num ) . decode ( 'UTF-8' ) if received_data : print ( \"Recv: \" , received_data ) time . sleep ( 1 ) ser . close () return 0 if __name__ == '__main__' : if serialTest () != 0 : print ( \"Serial test failed!\" ) else : print ( \"Serial test success!\" ) X3Pi这边如果要使用串口，直接使用serial库就可以了，这里我们先调用系统的库，打印出当前有哪些串口，然后手动输入选择串口的设备名，再输入串口的波特率，就可以进项串口的初始化了，初始化成功之后就会进入循环。 循环中，X3Pi会每隔一秒发送一次AA55，同时还会判断是否接收到了数据，如果接收到了数据也会打印出来。","text_tokens":["通讯","os","接线","有点","参考","另外","过去","也","叫做","设备","数据","if","num","打开","input","_","到","判断","timeout","enabled","用来","两边","执行器","time","received","派","管脚","记住","(","对方","tools","派发","端发","绝对","成功","name","main","麻烦","uart","gnd","0","1","能","tx","硬件","端口","实现","程序","ls",":","循环","的话","为","to","'","sudo","具有","简称","open","只能","相对","只用","传感","通信",")","每隔","tty",".",",","一个","好","软件","一起","执行","需要","完成","一般","下","传输线","一对","close","名","=","永远","starting","]","看来","of","+","有","初始","双向通信","再","def","看到","状态","decode","1234","向外","如果","serial","usr","exit","aa55","中","write","协议","越来","接下","了","引脚","encode","串行","运行","print","进入","是否","接收端","限制","success","e","情况","波特","send","传感器","哪些","一侧","理解","指令","要","exception","except","的","选择","115200","demo","这样","波特率","一种","env","test","一秒","原理","线路","一串","py","示例","我们","接下来","z","#","接收","串成","端的","实物","bin"," ","多种多样","方面","设置","c","最为","这边","-","就","把","系统","传输","python","将","ports","*","!","终端","za","双向","a","read","不了","ser","true","多","各种","接反","__","常用","x3","让","控制","system","1s","进项","输入","、","。","旭日","手动","\"","和","n","还要","这里","多样","过来","是","同时","sys","8","出来","x3pi","两者","各样","测试","，","还会","baudrate","速度","虽然","导入","电脑","只有","先","但是","press","当前","感器","电平","serialtest","/","所以","下来","控制器","多种","可以","通过","921600","初始化","出","utf","相同","dev","小","57600","尝试","\\","连接","gpio","ctrl","代码","发送数据","给","在","方法","38400","点击","return","还是","import","$","rx","库","会","之后","读取","打印","：","模块","后","int","时候","sleep","9600","然后","[","接收数据","交叉","越来越","一位","例程","data","请","种类","要求","未免","failed","使用","recv","19200","python3","各种各样","两方","else","while","as","来","启动","now","直接","对","受到","调用","很快","list","解析","为了","发送","try","只","层出不穷","并且","现在","一次","串口"],"title":"UART异步串口通信","title_tokens":["异步","uart","通信","串口"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#uart","text":"现在的传感器和执行器种类越来越多，需要和控制器传输的数据也是多种多样，只用GPIO来控制和读取的话，只有0和1的状态，未免还是有点麻烦，各种各样的通信方法也层出不穷，UART串口通信绝对是最为常用的一种。","text_tokens":["各样","多","各种","还是","有点","方法","越来越","，","多样","常用","种类","传感器","的话","也","未免","是","控制","越来","传输","0","读取","的","1","数据","绝对","只有","层出不穷","现在","执行","各种各样","需要","多种多样","麻烦","uart","感器","gpio","只用","传感","通信","。","状态","来","串口","一种","和","控制器","执行器","最为","多种"],"title":"UART串口通信","title_tokens":["通信","uart","串口"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_1","text":"串行通信是一种通讯协议，也可以简称为串口，可以理解为数据是串成一串的，所以也就只能一位一位的发送，这样传输的速度虽然受到了限制，但是对硬件线路的要求小，只需要一对传输线，一个发送，一个接收，就可以实现双向通信了。 一般情况下，串口模块发送数据的管脚叫做TX，接收数据的管脚叫做RX。发送端发过去的数据，需要对方串口模块的接收端来接收，所以一侧发送端的TX需要连接到另外一侧的接收端RX，接收和发送在两方看来是相对的，所以我们接线的时候，要记住永远是TX引脚连接到RX引脚，接反了数据就传输不了了。","text_tokens":["可以","通讯","传输线","接线","就","一对","永远","另外","过去","看来","也","叫做","传输","小","数据","双向通信","连接","到","双向","发送数据","不了","在","管脚","记住","接反","rx","对方","协议","端发","模块","时候","了","引脚","串行","。","接收数据","和","tx","硬件","一位","接收端","限制","实现","情况","要求","一侧","是","理解","要","为","的","这样","简称","只能","相对","两方","通信","来","一种","对","受到","，","一个","线路","一串","速度","发送","虽然","我们","只","接收","但是","串成","需要","端的"," ","一般","下","所以","串口"],"title":"串口通信原理","title_tokens":["通信","原理","串口"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_2","text":"接下来，我们就尝试通过一个串口模块来实现电脑和旭日X3Pi的串口通信。 在接线方面，我们先交叉连接串口模块和旭日X3Pi的RX、TX，同时为了让两边具有相同的参考电平，还要将两者的GND连接到一起，然后再把串口模块连接到电脑就可以了。","text_tokens":["可以","tx","通过","接线","就","还要","实现","rx","，","一个","把","参考","相同","让","同时","为了","我们","接下来","电脑","接下","的","模块","尝试","先","一起","了","将","再","具有"," ","然后","连接","方面","、","电平","旭日","通信","。","到","gnd","x3pi","两者","下来","交叉","来","串口","在","和","两边"],"title":"硬件连接","title_tokens":["硬件","连接"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_3","text":"接下来就可以运行串口通信的例程了。 $ sudo python3 test_serial.py 实物接线完成后，在旭日X3派的终端中输入指令启动例程，很快就可以在终端中看到串口向外发送的数据了。 在串口连接的电脑中打开一个串口软件，用来接收和发送数据，设置好端口和波特率，就能看到旭日X3派发过来的数据了。我们再使用电脑的串口软件尝试下发送数据给旭日X3派，输入1234，点击发送，可以看到，X3Pi的终端这边也成功的接收到了数据并且打印出来了。","text_tokens":["可以","派","向外","端口","这边","test","例程",".","就","接线","serial","$","中","，","一个","波特","好","很快","过来","x3","派发","py","也","指令","软件","发送","我们","使用","接下来","接下","电脑","的","打印","后","数据","python3","sudo","了","尝试","1234","接收","并且","成功","再","完成","实物"," ","打开","输入","用来","连接","终端","_","出来","设置","到","通信","运行","。","旭日","发送数据","波特率","下","看到","下来","点击","给","x3pi","串口","在","和","启动","能"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_4","text":"test_serial.py： #!/usr/bin/env python3 import sys import os import time # 导入python串口库 import serial import serial.tools.list_ports def serialTest (): print ( \"List of enabled UART:\" ) os . system ( 'ls /dev/tty[a-zA-Z]*' ) uart_dev = input ( \"请输入需要测试的串口设备名:\" ) baudrate = input ( \"请输入波特率(9600,19200,38400,57600,115200,921600):\" ) try : ser = serial . Serial ( uart_dev , int ( baudrate ), timeout = 1 ) # 1s timeout except Exception as e : print ( \"open serial failed! \\n \" ) print ( ser ) print ( \"Starting demo now! Press CTRL+C to exit\" ) while True : test_data = \"AA55\" write_num = ser . write ( test_data . encode ( 'UTF-8' )) print ( \"Send: \" , test_data ) received_data = ser . read ( write_num ) . decode ( 'UTF-8' ) if received_data : print ( \"Recv: \" , received_data ) time . sleep ( 1 ) ser . close () return 0 if __name__ == '__main__' : if serialTest () != 0 : print ( \"Serial test failed!\" ) else : print ( \"Serial test success!\" ) X3Pi这边如果要使用串口，直接使用serial库就可以了，这里我们先调用系统的库，打印出当前有哪些串口，然后手动输入选择串口的设备名，再输入串口的波特率，就可以进项串口的初始化了，初始化成功之后就会进入循环。 循环中，X3Pi会每隔一秒发送一次AA55，同时还会判断是否接收到了数据，如果接收到了数据也会打印出来。","text_tokens":["可以","os","这边","-","921600","就","close","名","初始化","=","出","starting","]","utf","系统","也","of","dev","设备","+","python","有","57600","数据","初始","if","num","再","ports","*","!","\\","input","_","def","ctrl","za","判断","到","a","timeout","read","enabled","38400","time","decode","ser","received","true","return","如果","serial","usr","(","import","exit","aa55","中","__","tools","库","会","write","system","之后","打印","：","int","了","sleep","成功","name","9600","1s","进项","main","输入","然后","encode","[","uart","。","print","手动","进入","\"","0","1","是否","n","data","这里","success","ls","波特","e",":","请","send","循环","哪些","同时","exception","failed","要","使用","except","recv","的","to","19200","选择","'","python3","115200","sys","8","demo","open","出来",")","else","while","波特率","as","x3pi","每隔","env","tty","now","直接","test",".","测试",",","一秒","调用","，","还会","list","py","baudrate","发送","导入","我们","try","z","#","先","接收","需要","press","bin"," ","当前","serialtest","一次","/","c","串口"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/","text":"SPI同步串行通信 UART串口通信中的数据只能一位一位的传输，如果数据量比较大的时候，传输速率会受到很大影响，此时我们就可以考虑使用同步串行通信了，比如SPI。 SPI通信原理 SPI，全称是Serial Peripheral Interface，也就是串行外设接口，同样是一种通信协议，在很多芯片中都有集成。 相比之前学习的UART串口通信，他多了两根线，其中一个是时钟信号，另一个是设备使能信号，用来控制设备是否启用，所以也产生了主从设备的概念。 MISO ：Master Input Slave Output，主设备数据输入，从设备数据输出； MOSI ：Master Output Slave Input，主设备数据输出，从设备数据输入； SCLK ：Serial Clock，时钟信号，由主设备产生； CS ：Chip Select，从设备使能信号，由主设备控制。 这样，在一组SPI通信的系统中，可以连接多个设备，想要和哪个设备通信时，就使能这个设备，除能其他设备。 我们在开发中常见的SPI设备会有一些传感器，还有电阻屏之类的。 硬件连线 在SPI的通信中，有一个管脚负责发送，另外一个管脚负责接收，如果我们把同一组SPI的发送和接收接到一起，岂不是能接收到自己发送的数据吗？ 我们不妨来试一试，这里使用一个跳线帽直接把19，21两个SPI的通信管脚短接。 运行示例程序 大家来运行例程，看看会发生什么？ $ sudo python3 test_spi.py 在旭日X3派的终端中，输入运行例程的指令，接下来我们就可以看到通过SPI传输并收到的数据啦，相当于是左手传递给右手，自己给自己循环传输数据了。 代码解析 test_spi.py： #!/usr/bin/env python3 import sys import os import time # 导入spidev模块 import spidev def BytesToHex ( Bytes ): return '' . join ([ \"0x %02X \" % x for x in Bytes ]) . strip () def spidevTest (): # 设置spi的bus号（0, 1, 2）和片选(0, 1) spi_bus = input ( \"Please input SPI bus num:\" ) spi_device = input ( \"Please input SPI cs num:\" ) # 创建spidev类的对象以访问基于spidev的Python函数。 spi = spidev . SpiDev () # 打开spi总线句柄 spi . open ( int ( spi_bus ), int ( spi_device )) # 设置 spi 频率为 12MHz spi . max_speed_hz = 12000000 print ( \"Starting demo now! Press CTRL+C to exit\" ) # 发送 [0x55, 0xAA], 接收的数据应该也是 [0x55, 0xAA] try : while True : resp = spi . xfer2 ([ 0x55 , 0xAA ]) print ( BytesToHex ( resp )) time . sleep ( 1 ) except KeyboardInterrupt : spi . close () if __name__ == '__main__' : print ( \"List of enabled spi controllers:\" ) os . system ( 'ls /dev/spidev*' ) spidevTest () 在python中使用spidev这个库，初始化X3Pi的SPI，之后使用xerf2发送数据，同时接收数据，并打印出来，会发现打印出来的就是我们发送的。","text_tokens":["可以","2","os","芯片","master","通过","另","就","频率","max","close","初始化","=","相当于","时","号","]","把","strip","时钟","）","starting","另外","*","全称","19","系统","也","帽","of","dev","传输","大家","设备","+","负责","比如","输出","python","有","数据","初始","开发","0xaa","if","速率","num","这个","？","cs","传输数据","!","打开","input","他","连接","使","不妨","_","终端","def","02x","ctrl","到","代码","发送数据","吗","看到","当于","给","enabled","用来","在","传递","通信协议","什么","time","派","true","多","21","外设","如果","管脚","跳线","return","serial","同步","线","启用","mosi","usr","$","import","中","select","(","spidevtest","exit","__","传输速率","看看","x3","比较","库","会","chip","控制","system","协议","对象","不是","一组","之后","接下","打印","：","模块","int","时候","多个","xerf2","了","两个","for","以","sleep","xfer2","name","学习","右手","两根","产生","短接","main","输入","0x","[","uart","join","集成","相比","串行","。","概念","运行","旭日","接收数据","12000000","device","print","\"","和","0","能","是否","主从","1","硬件","一位","；","例程","please","之类","12mhz","发现","程序","这里","收到","controllers","ls","常见",":","resp","循环","传感器","很大","由主","一些","自己","是","同时","很多","output","指令","相当","使用","其中","为","基于","except","屏","bytes","的","to","除能","就是","并","都","'","python3","sudo","电阻","spi","slave","spidev","sys","影响","这样","sclk","同","demo","open","从","只能","clock","应该","哪个","出来","x","interface","通信","传感",")","while","miso","x3pi","来","一种","env","now","直接","试一试","创建","访问","数据量","还有","test",".",",","受到","想要","原理","函数","，","一个","岂","类","接到","此时","list","考虑","py","句柄","使能","示例","啦","解析","发送","我们","导入","peripheral","接下来","总线","keyboardinterrupt","hz","try","speed","（","in","0x55","发生","#","一起","片选","接收","%","并打印","press","左手","bin"," ","bus","信号","bytestohex","大","感器","设置","/","主","所以","接口","连线","下来","之前","串口","c","其他","同样"],"title":"SPI同步串行通信","title_tokens":["spi","串行","通信","同步"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#spi","text":"UART串口通信中的数据只能一位一位的传输，如果数据量比较大的时候，传输速率会受到很大影响，此时我们就可以考虑使用同步串行通信了，比如SPI。","text_tokens":["可以","数据量","一位","如果","就","受到","同步","中","，","传输速率","此时","很大","考虑","比较","会","传输","我们","使用","的","比如","数据","时候","了","spi","速率","影响","只能","uart","大","通信","串行","。","串口"],"title":"SPI同步串行通信","title_tokens":["spi","串行","通信","同步"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#spi_1","text":"SPI，全称是Serial Peripheral Interface，也就是串行外设接口，同样是一种通信协议，在很多芯片中都有集成。 相比之前学习的UART串口通信，他多了两根线，其中一个是时钟信号，另一个是设备使能信号，用来控制设备是否启用，所以也产生了主从设备的概念。 MISO ：Master Input Slave Output，主设备数据输入，从设备数据输出； MOSI ：Master Output Slave Input，主设备数据输出，从设备数据输入； SCLK ：Serial Clock，时钟信号，由主设备产生； CS ：Chip Select，从设备使能信号，由主设备控制。 这样，在一组SPI通信的系统中，可以连接多个设备，想要和哪个设备通信时，就使能这个设备，除能其他设备。 我们在开发中常见的SPI设备会有一些传感器，还有电阻屏之类的。","text_tokens":["可以","芯片","master","另","就","时","时钟","全称","系统","也","设备","输出","有","数据","开发","这个","cs","input","他","连接","使","用来","在","通信协议","多","外设","serial","线","mosi","启用","中","select","会","chip","控制","协议","一组","：","多个","了","学习","两根","产生","输入","uart","集成","相比","串行","。","概念","和","能","是否","主从","；","之类","常见","传感器","由主","一些","是","很多","output","其中","屏","的","除能","就是","都","电阻","spi","slave","这样","sclk","从","clock","哪个","interface","通信","传感","miso","一种","还有","想要","，","一个","使能","我们","peripheral"," ","信号","感器","主","所以","接口","之前","串口","其他","同样"],"title":"SPI通信原理","title_tokens":["spi","通信","原理"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_1","text":"在SPI的通信中，有一个管脚负责发送，另外一个管脚负责接收，如果我们把同一组SPI的发送和接收接到一起，岂不是能接收到自己发送的数据吗？ 我们不妨来试一试，这里使用一个跳线帽直接把19，21两个SPI的通信管脚短接。","text_tokens":["试一试","21","管脚","如果","跳线","这里","中","，","一个","把","岂","另外","接到","自己","帽","发送","我们","不是","一组","使用","直接","的","负责","有","数据","spi","一起","两个","接收","同","？"," ","短接","不妨","到","通信","。","吗","来","在","和","19","能"],"title":"硬件连线","title_tokens":["硬件","连线"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_2","text":"大家来运行例程，看看会发生什么？ $ sudo python3 test_spi.py 在旭日X3派的终端中，输入运行例程的指令，接下来我们就可以看到通过SPI传输并收到的数据啦，相当于是左手传递给右手，自己给自己循环传输数据了。","text_tokens":["可以","派","通过","test","例程",".","就","收到","相当于","$","中","，","循环","看看","x3","py","自己","会","是","指令","啦","相当","传输","大家","我们","接下来","接下","的","并","数据","python3","sudo","发生","spi","了","右手","左手","？"," ","传输数据","输入","终端","_","旭日","运行","。","看到","下来","当于","给","来","在","传递","什么"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_3","text":"test_spi.py： #!/usr/bin/env python3 import sys import os import time # 导入spidev模块 import spidev def BytesToHex ( Bytes ): return '' . join ([ \"0x %02X \" % x for x in Bytes ]) . strip () def spidevTest (): # 设置spi的bus号（0, 1, 2）和片选(0, 1) spi_bus = input ( \"Please input SPI bus num:\" ) spi_device = input ( \"Please input SPI cs num:\" ) # 创建spidev类的对象以访问基于spidev的Python函数。 spi = spidev . SpiDev () # 打开spi总线句柄 spi . open ( int ( spi_bus ), int ( spi_device )) # 设置 spi 频率为 12MHz spi . max_speed_hz = 12000000 print ( \"Starting demo now! Press CTRL+C to exit\" ) # 发送 [0x55, 0xAA], 接收的数据应该也是 [0x55, 0xAA] try : while True : resp = spi . xfer2 ([ 0x55 , 0xAA ]) print ( BytesToHex ( resp )) time . sleep ( 1 ) except KeyboardInterrupt : spi . close () if __name__ == '__main__' : print ( \"List of enabled spi controllers:\" ) os . system ( 'ls /dev/spidev*' ) spidevTest () 在python中使用spidev这个库，初始化X3Pi的SPI，之后使用xerf2发送数据，同时接收数据，并打印出来，会发现打印出来的就是我们发送的。","text_tokens":["2","os","频率","max","close","初始化","=","号","]","strip","starting","）","也","of","dev","+","python","数据","初始","0xaa","if","num","这个","cs","!","打开","*","input","_","def","02x","ctrl","发送数据","enabled","在","time","true","return","usr","(","import","exit","spidevtest","中","__","库","会","system","对象","之后","打印","：","模块","int","xerf2","for","以","sleep","xfer2","name","main","0x","[","join","。","接收数据","12000000","device","print","\"","和","0","1","please","12mhz","发现","controllers","ls",":","resp","是","同时","使用","为","except","基于","bytes","的","to","就是","'","python3","spi","spidev","sys","demo","open","应该","出来","x",")","while","x3pi","env","now","创建","访问","test",".",",","函数","，","类","list","py","句柄","发送","导入","我们","总线","keyboardinterrupt","hz","try","speed","（","in","0x55","#","片选","接收","%","并打印","press","bin"," ","bus","bytestohex","设置","/","c"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/","text":"I2C同步串行通信 SPI通信虽然功能更强大了，但是需要4根线做连接，还是有点复杂，接下来I2C的连线就简单很多了。 I2C通信原理 I2C也是一种常用的串行通信方式，和SPI一样可以连接多个设备，重点是它只需要两根线就可以完成。 不过他的两根线和UART不同，不全是传输数据用的，I2C中的一根线是时钟线，另一根才是传输数据的，这根线可以双向的传输数据。 I2C通信中可以有多个主设备或者从设备，只要能通过地址找到彼此的位置即可。 主器件用于启动总线传送数据，并产生时钟给各种从机，此时任何被寻址的器件均被认为是从机。在总线上主和从、发和收的关系不是恒定的，而取决于此时数据传送方向。如果主机要发送数据给从机，主机首先得找到从机的地址，然后主动发送数据过去，最后也得由主机终止数据传送；如果主机要接收从机的数据，同样由主机得找到从机的地址，然后主机接收从器件发送的数据，最后由主机终止接收过程。 因为I2C的特性，使用I2C的设备比SPI多很多，比如图中的紫外线传感器，陀螺仪之类的，都是使用I2C进行通信的。 硬件接线 我们找来一个常用的陀螺仪模块，按照这里的接线图连接到旭日X3派的40PIN接口上，这里除了I2C通信的两根线之外，另外两根是电源线，负责给这个模块供电的，让它正常工作起来。 运行示例程序 接线是挺简单的，我们继续来运行这个例程，看下能否收到数据。 $ sudo python3 mpu6500_i2c.py 在终端启动例程，很快就可以看到通过I2C读取到了大量传感器的数据，这些就是陀螺仪模块的原始数据，收到之后我们就可以进行结算处理啦，这就是我们后续机器人开发的需要解决的问题了。 代码解析 mpu6500_i2c.py： #!/usr/bin/env python3 import smbus , time def MPU6050_start (): # alter sample rate (stability) samp_rate_div = 0 # sample rate = 8 kHz/(1+samp_rate_div) bus . write_byte_data ( MPU6050_ADDR , SMPLRT_DIV , samp_rate_div ) time . sleep ( 0.1 ) # reset all sensors bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x00 ) time . sleep ( 0.1 ) # power management and crystal settings bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x01 ) time . sleep ( 0.1 ) #Write to Configuration register bus . write_byte_data ( MPU6050_ADDR , CONFIG , 0 ) time . sleep ( 0.1 ) #Write to Gyro configuration register gyro_config_sel = [ 0b00000 , 0b010000 , 0b10000 , 0b11000 ] # byte registers gyro_config_vals = [ 250.0 , 500.0 , 1000.0 , 2000.0 ] # degrees/sec gyro_indx = 0 bus . write_byte_data ( MPU6050_ADDR , GYRO_CONFIG , int ( gyro_config_sel [ gyro_indx ])) time . sleep ( 0.1 ) #Write to Accel configuration register accel_config_sel = [ 0b00000 , 0b01000 , 0b10000 , 0b11000 ] # byte registers accel_config_vals = [ 2.0 , 4.0 , 8.0 , 16.0 ] # g (g = 9.81 m/s^2) accel_indx = 0 bus . write_byte_data ( MPU6050_ADDR , ACCEL_CONFIG , int ( accel_config_sel [ accel_indx ])) time . sleep ( 0.1 ) # interrupt register (related to overflow of data [FIFO]) bus . write_byte_data ( MPU6050_ADDR , INT_ENABLE , 1 ) time . sleep ( 0.1 ) return gyro_config_vals [ gyro_indx ], accel_config_vals [ accel_indx ] def read_raw_bits ( register ): # read accel and gyro values high = bus . read_byte_data ( MPU6050_ADDR , register ) low = bus . read_byte_data ( MPU6050_ADDR , register + 1 ) # combine higha and low for unsigned bit value value = (( high << 8 ) | low ) # convert to +- value if ( value > 32768 ): value -= 65536 return value def mpu6050_conv (): # raw acceleration bits acc_x = read_raw_bits ( ACCEL_XOUT_H ) acc_y = read_raw_bits ( ACCEL_YOUT_H ) acc_z = read_raw_bits ( ACCEL_ZOUT_H ) # raw temp bits ## t_val = read_raw_bits(TEMP_OUT_H) # uncomment to read temp # raw gyroscope bits gyro_x = read_raw_bits ( GYRO_XOUT_H ) gyro_y = read_raw_bits ( GYRO_YOUT_H ) gyro_z = read_raw_bits ( GYRO_ZOUT_H ) #convert to acceleration in g and gyro dps a_x = ( acc_x / ( 2.0 ** 15.0 )) * accel_sens a_y = ( acc_y / ( 2.0 ** 15.0 )) * accel_sens a_z = ( acc_z / ( 2.0 ** 15.0 )) * accel_sens w_x = ( gyro_x / ( 2.0 ** 15.0 )) * gyro_sens w_y = ( gyro_y / ( 2.0 ** 15.0 )) * gyro_sens w_z = ( gyro_z / ( 2.0 ** 15.0 )) * gyro_sens ## temp = ((t_val)/333.87)+21.0 # uncomment and add below in return return a_x , a_y , a_z , w_x , w_y , w_z # MPU6050 Registers MPU6050_ADDR = 0x68 PWR_MGMT_1 = 0x6B SMPLRT_DIV = 0x19 CONFIG = 0x1A GYRO_CONFIG = 0x1B ACCEL_CONFIG = 0x1C INT_ENABLE = 0x38 ACCEL_XOUT_H = 0x3B ACCEL_YOUT_H = 0x3D ACCEL_ZOUT_H = 0x3F TEMP_OUT_H = 0x41 GYRO_XOUT_H = 0x43 GYRO_YOUT_H = 0x45 GYRO_ZOUT_H = 0x47 # start I2C driver bus = smbus . SMBus ( 0 ) # start comm with i2c bus gyro_sens , accel_sens = MPU6050_start () # instantiate gyro/accel while True : print ( mpu6050_conv ()) 这里我们看一下怎么使用I2C和陀螺仪通信来获取信息。主体上有三个大的函数，而这三个函数的功能都比较单一，第一个函数通过给陀螺仪发送数据来进行初始化的设置，比如配置陀螺仪的电源寄存器，加速度寄存器等；第二个函数则是从陀螺仪读取数据；第三个函数则是将读取到的函数进行计算，从而变成真正的加速度等信息。 具体的读写操作可以看下面的代码片段，也是直接调用函数指定地址和数据就好了。 这里我们也能看到几个关键的参数，比如陀螺仪MPU6050的地址是0x68，通过这个地址才能确认到陀螺仪的存在，然后进行初始化，初始化完成之后进入循环，不停的将数据打印出来。","text_tokens":["寄存","接线","higha","有点","时钟","另外","过去","机器人","也","第二","alter","设备","是从","数据","图中","方向","if","i2c","传输数据","w","pwr","enable","因为","_","到","功能","xout","几个","time","重点","派","加速","同步","线","(","t","单一",">","起来","out","寻址","0b10000","地址","不过","fifo","读写操作","for","存在","不全是","uart","and","读取数据","0","能","1","硬件","线图","才","程序","收到",":","values","0x41","循环","40pin","15.0","to","就是","sudo","spi","而","从","传感","通信","挺",")","加速度","看",".",",","机器","一个","好","特性","总线","找到","2.0","combine","需要","完成","0x43","找","大","下","简单","接口","2","另","=","zout","真正","方式","start","]","变成","power","of","+","彼此","负责","acceleration","有","0x3d","初始","主体","指定","过程","处理","用","def","器件","看到","后续","如果","usr","instantiate","中","0b010000","均","0x45","write","register","9.81","不是","接下","任何","0x3b","之外","32768","等","了","smbus","根线","产生","能否","或者","|","由","串行","运行","m","print","进入","这根","mpu6500","；","它","操作","2000.0","原始数据","传感器","这","很多","要","一根","8.0","65536","的","并","4","indx","x","16.0","0x6b","首先","一种","stability","env","具体","供电","0x38","原理","关键","yout","此时","py","不停","示例","紫外","我们","接下来","z","#","接收","第三个","bin"," ","设置","below","gyroscope","连线","调用函数","同样","发和收","-","就","reset","registers","gyro","主机","传输","500.0","除了","比如","开发","将","management","*","!","他","终端","问题","继续","uncomment","双向","a","机","read","y","true","多","第三","各种","sample","三个","related","获取信息","khz","常用","x3","0b11000","读写","让","add","0x68","g","sensors","认为","、","。","旭日","上主","21.0","第一","和","4.0","0b01000","vals","unsigned","之类","##","这里","二个","一样","0x00","是","传送数据","片段","mpu6050","下面","都","degrees","comm","250.0","8","with","出来","外线","得","addr","configuration","0b00000","陀螺仪","函数","，","怎么","速度","大量","啦","强大","rate","0x3f","虽然","用于","上","但是","进行","driver","samp","感器","/","+-","下来","accel","可以","通过","初始化","从机","value","关系","信息","终止","convert","计算","0x1c","这个","temp","0x1a","连接","代码","发送数据","smplrt","给","在","不同","0x19","return","h","还是","bit","import","$","做","取决","按照","比较","即可","陀螺","之后","读取","conv","打印","0x1b","这些","模块","：","dps","结算","int","all","多个","解决","val","sleep","两根","寄存器","确认","mgmt","恒定","然后","从而","[","一下","第一个","配置","config","333.87","接线图","复杂","0.1","正常","1000.0","interrupt","例程","传送","原始","data","0x01","low","high","才能","sens","overflow","只要","使用","电源线","div","位置","crystal","python3","settings","参数","raw","最后","紫外线","acc","第二个","0x47","while","bits","<","来","启动","主动","直接","调用","比","更","工作","很快","解析","发送","^","取信","s","in","只","获取","sec","电源","bus","byte","sel","主","则","取决于","被"],"title":"I2C同步串行通信","title_tokens":["串行","通信","i2c","同步"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#i2c","text":"SPI通信虽然功能更强大了，但是需要4根线做连接，还是有点复杂，接下来I2C的连线就简单很多了。","text_tokens":["就","还是","有点","，","做","更","很多","强大","虽然","接下来","接下","的","4","spi","了","但是","需要","根线","i2c","连接","通信","。","复杂","简单","下来","连线","功能"],"title":"I2C同步串行通信","title_tokens":["串行","通信","i2c","同步"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#i2c_1","text":"I2C也是一种常用的串行通信方式，和SPI一样可以连接多个设备，重点是它只需要两根线就可以完成。 不过他的两根线和UART不同，不全是传输数据用的，I2C中的一根线是时钟线，另一根才是传输数据的，这根线可以双向的传输数据。 I2C通信中可以有多个主设备或者从设备，只要能通过地址找到彼此的位置即可。 主器件用于启动总线传送数据，并产生时钟给各种从机，此时任何被寻址的器件均被认为是从机。在总线上主和从、发和收的关系不是恒定的，而取决于此时数据传送方向。如果主机要发送数据给从机，主机首先得找到从机的地址，然后主动发送数据过去，最后也得由主机终止数据传送；如果主机要接收从机的数据，同样由主机得找到从机的地址，然后主机接收从器件发送的数据，最后由主机终止接收过程。 因为I2C的特性，使用I2C的设备比SPI多很多，比如图中的紫外线传感器，陀螺仪之类的，都是使用I2C进行通信的。","text_tokens":["可以","发和收","通过","另","就","方式","时钟","从机","过去","也","主机","关系","终止","传输","设备","彼此","比如","是从","有","数据","图中","方向","过程","i2c","传输数据","连接","他","用","因为","器件","双向","发送数据","机","给","在","不同","重点","多","各种","如果","线","中","均","常用","取决","寻址","即可","陀螺","地址","不是","任何","不过","多个","不全是","两根","产生","或者","恒定","然后","由","uart","认为","、","串行","。","上主","和","能","这根","；","传送","才","之类","它","一样","传感器","是","传送数据","很多","要","一根","只要","使用","的","并","都","位置","spi","而","最后","从","紫外线","传感","通信","外线","首先","得","一种","启动","主动","陀螺仪","比","，","特性","此时","紫外","发送","总线","用于","只","接收","找到","进行","需要","完成"," ","感器","主","取决于","被","同样"],"title":"I2C通信原理","title_tokens":["通信","原理","i2c"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_1","text":"我们找来一个常用的陀螺仪模块，按照这里的接线图连接到旭日X3派的40PIN接口上，这里除了I2C通信的两根线之外，另外两根是电源线，负责给这个模块供电的，让它正常工作起来。","text_tokens":["供电","派","线图","接线","线","这里","它","陀螺仪","一个","，","常用","工作","另外","x3","起来","按照","让","40pin","是","陀螺","我们","除了","的","负责","电源线","模块","之外","上","两根","i2c","电源","这个","找","连接","到","接线图","旭日","通信","。","接口","给","来","正常"],"title":"硬件接线","title_tokens":["接线","硬件"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_2","text":"接线是挺简单的，我们继续来运行这个例程，看下能否收到数据。 $ sudo python3 mpu6500_i2c.py 在终端启动例程，很快就可以看到通过I2C读取到了大量传感器的数据，这些就是陀螺仪模块的原始数据，收到之后我们就可以进行结算处理啦，这就是我们后续机器人开发的需要解决的问题了。","text_tokens":["可以","看","通过","mpu6500","后续","接线","例程",".","就","原始","机器","收到","$","陀螺仪","，","很快","原始数据","传感器","这","py","机器人","是","大量","陀螺","啦","我们","之后","读取","的","这些","模块","就是","结算","数据","python3","sudo","开发","了","解决","进行","需要","i2c","能否","这个"," ","处理","终端","_","感器","问题","继续","到","挺","。","运行","传感","下","简单","看到","来","在","启动"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_3","text":"mpu6500_i2c.py： #!/usr/bin/env python3 import smbus , time def MPU6050_start (): # alter sample rate (stability) samp_rate_div = 0 # sample rate = 8 kHz/(1+samp_rate_div) bus . write_byte_data ( MPU6050_ADDR , SMPLRT_DIV , samp_rate_div ) time . sleep ( 0.1 ) # reset all sensors bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x00 ) time . sleep ( 0.1 ) # power management and crystal settings bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x01 ) time . sleep ( 0.1 ) #Write to Configuration register bus . write_byte_data ( MPU6050_ADDR , CONFIG , 0 ) time . sleep ( 0.1 ) #Write to Gyro configuration register gyro_config_sel = [ 0b00000 , 0b010000 , 0b10000 , 0b11000 ] # byte registers gyro_config_vals = [ 250.0 , 500.0 , 1000.0 , 2000.0 ] # degrees/sec gyro_indx = 0 bus . write_byte_data ( MPU6050_ADDR , GYRO_CONFIG , int ( gyro_config_sel [ gyro_indx ])) time . sleep ( 0.1 ) #Write to Accel configuration register accel_config_sel = [ 0b00000 , 0b01000 , 0b10000 , 0b11000 ] # byte registers accel_config_vals = [ 2.0 , 4.0 , 8.0 , 16.0 ] # g (g = 9.81 m/s^2) accel_indx = 0 bus . write_byte_data ( MPU6050_ADDR , ACCEL_CONFIG , int ( accel_config_sel [ accel_indx ])) time . sleep ( 0.1 ) # interrupt register (related to overflow of data [FIFO]) bus . write_byte_data ( MPU6050_ADDR , INT_ENABLE , 1 ) time . sleep ( 0.1 ) return gyro_config_vals [ gyro_indx ], accel_config_vals [ accel_indx ] def read_raw_bits ( register ): # read accel and gyro values high = bus . read_byte_data ( MPU6050_ADDR , register ) low = bus . read_byte_data ( MPU6050_ADDR , register + 1 ) # combine higha and low for unsigned bit value value = (( high << 8 ) | low ) # convert to +- value if ( value > 32768 ): value -= 65536 return value def mpu6050_conv (): # raw acceleration bits acc_x = read_raw_bits ( ACCEL_XOUT_H ) acc_y = read_raw_bits ( ACCEL_YOUT_H ) acc_z = read_raw_bits ( ACCEL_ZOUT_H ) # raw temp bits ## t_val = read_raw_bits(TEMP_OUT_H) # uncomment to read temp # raw gyroscope bits gyro_x = read_raw_bits ( GYRO_XOUT_H ) gyro_y = read_raw_bits ( GYRO_YOUT_H ) gyro_z = read_raw_bits ( GYRO_ZOUT_H ) #convert to acceleration in g and gyro dps a_x = ( acc_x / ( 2.0 ** 15.0 )) * accel_sens a_y = ( acc_y / ( 2.0 ** 15.0 )) * accel_sens a_z = ( acc_z / ( 2.0 ** 15.0 )) * accel_sens w_x = ( gyro_x / ( 2.0 ** 15.0 )) * gyro_sens w_y = ( gyro_y / ( 2.0 ** 15.0 )) * gyro_sens w_z = ( gyro_z / ( 2.0 ** 15.0 )) * gyro_sens ## temp = ((t_val)/333.87)+21.0 # uncomment and add below in return return a_x , a_y , a_z , w_x , w_y , w_z # MPU6050 Registers MPU6050_ADDR = 0x68 PWR_MGMT_1 = 0x6B SMPLRT_DIV = 0x19 CONFIG = 0x1A GYRO_CONFIG = 0x1B ACCEL_CONFIG = 0x1C INT_ENABLE = 0x38 ACCEL_XOUT_H = 0x3B ACCEL_YOUT_H = 0x3D ACCEL_ZOUT_H = 0x3F TEMP_OUT_H = 0x41 GYRO_XOUT_H = 0x43 GYRO_YOUT_H = 0x45 GYRO_ZOUT_H = 0x47 # start I2C driver bus = smbus . SMBus ( 0 ) # start comm with i2c bus gyro_sens , accel_sens = MPU6050_start () # instantiate gyro/accel while True : print ( mpu6050_conv ()) 这里我们看一下怎么使用I2C和陀螺仪通信来获取信息。主体上有三个大的函数，而这三个函数的功能都比较单一，第一个函数通过给陀螺仪发送数据来进行初始化的设置，比如配置陀螺仪的电源寄存器，加速度寄存器等；第二个函数则是从陀螺仪读取数据；第三个函数则是将读取到的函数进行计算，从而变成真正的加速度等信息。 具体的读写操作可以看下面的代码片段，也是直接调用函数指定地址和数据就好了。 这里我们也能看到几个关键的参数，比如陀螺仪MPU6050的地址是0x68，通过这个地址才能确认到陀螺仪的存在，然后进行初始化，初始化完成之后进入循环，不停的将数据打印出来。","text_tokens":["可以","2","寄存","-","通过","就","初始化","higha","=","reset","zout","真正","registers","start","]","变成","power","gyro","也","value","of","第二","信息","alter","500.0","+","acceleration","比如","是从","convert","0x3d","有","数据","计算","初始","0x1c","if","主体","将","指定","management","i2c","这个","*","!","pwr","temp","w","0x1a","enable","_","def","到","代码","uncomment","发送数据","a","smplrt","看到","read","给","功能","xout","几个","time","y","0x19","true","第三","加速","sample","return","h","三个","related","usr","(","import","bit","t","instantiate","获取信息","单一","0b010000","khz","0x45","0b11000",">","out","比较","读写","write","陀螺","register","0b10000","9.81","地址","之后","add","读取","conv","打印","0x68","0x1b","：","dps","0x3b","int","all","32768","fifo","等","读写操作","了","for","smbus","sleep","val","存在","寄存器","确认","mgmt","g","|","sensors","然后","从而","[","一下","第一个","配置","and","config","333.87","。","m","21.0","读取数据","第一","0.1","print","进入","和","1000.0","0","interrupt","4.0","1","能","0b01000","vals","unsigned","mpu6500","；","data","##","这里","操作","2000.0","二个","0x01","low",":","values","0x41","循环","这","0x00","high","才能","sens","是","overflow","15.0","8.0","65536","使用","片段","mpu6050","的","to","div","下面","都","settings","crystal","python3","degrees","参数","comm","250.0","而","indx","8","raw","with","acc","第二个","出来","x",")","16.0","0x47","while","通信","bits","0x6b","<","来","stability","env","加速度","具体","直接","看","addr","0x38","configuration",".",",","0b00000","调用","陀螺仪","函数","，","一个","好","关键","yout","怎么","py","不停","速度","rate","0x3f","发送","我们","^","取信","s","in","z","上","#","获取","2.0","combine","进行","sec","第三个","完成","bin","driver"," ","0x43","电源","bus","byte","samp","大","设置","/","sel","+-","below","gyroscope","则","accel","调用函数"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/","text":"USB外设驱动 在电脑上，我们最常用的接口之一，应该就是USB了，相比之前讲到的外设通信方法，USB更加复杂，速度也更快。 USB通信原理 USB不仅是我们生活中最常用的一种接口，也是一种串行总线的通讯方式。他类似于UART，有两根线用来传输数据。 而且USB还有专门的接口规范，比如我们常听说的USB Type A、Type C。例如这里列出来的USB口，打印机常用的B口，手机上用的C口，都是标准的USB接口。 USB的接口规范，使用广泛，很多成熟的外设都是采用的USB接口。 摄像头驱动 比如USB摄像头。 硬件接线 这里我们使用一个USB摄像头，通过一个相机驱动把它跑起来，并且可以看到图像数据。 方法有很多中，TogetherROS兼容ROS2的所有功能，那我们就先试试ROS2中的标准方法，在旭日X3PI上直接安装一个usb_cam功能包。 ROS2相机驱动 安装与配置 首先安装ROS2的相机驱动包： # 安装功能包 $ sudo apt install ros-foxy-usb-cam 安装好之后，为了让系统能够找到该功能包，需要进入tros的目录，建立对应的软连接。 # 建立软连接 $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 因为旭日X3Pi可以连接csi摄像头，设备名占用了video0-7，所以外接的USB摄像头会被自动分配到video8，我们需要在ROS2的功能包中修改一下设备号。 # 修改配置文件 $ cd /opt/tros/share/usb_cam/config $ sudo vim params.yaml 然后给这个设备添加权限，最后再设置TogetherROS的环境变量就可以使用啦。 # 添加可执行权限 $ sudo chmod 777 /dev/video8 # 添加环境变量 $ source /opt/tros/local_setup.bash 运行相机驱动 我们来试一试。 $ ros2 launch usb_cam demo_launch.py #启动相机，X3Pi $ ros2 run rqt_image_view rqt_image_view #查看图像，PC 这里直接在X3Pi中启动usb_cam的launch文件，然后再启动一个能和他通信的Ubuntu桌面系统，打开rqt_image_view，选择对应的话题，就可以看到图像了。也就是说明我们成功的用TROS驱动了这个USB摄像头。 TogetherROS相机驱动 除此之外，TogetherROS中也提供了USB摄像头的驱动节点，连接摄像头之后，直接设置设备的权限和TogetherROS的环境变量就可以使用了。 $ source /opt/tros/local_setup.bash $ sudo chmod 777 /dev/video8 $ ros2 launch hobot_usb_cam hobot_usb_cam.launch.py 之后可以再打开一个新的终端，输入对应的指令，然后启动websocket这个节点，就可以把image这个话题的数据发送到网页了。 $ source /opt/tros/local_setup.bash $ cd /opt/tros/lib/websocket/webservice $ sudo chmod +x ./sbin/nginx $ sudo ./sbin/nginx -p . $ ros2 run websocket websocket --ros-args -p image_topic: = /image -p image_type: = mjpeg -p only_show_image: = true 这时我们直接打开在通一个局域网下的浏览器，输入X3Pi的地址，就可以进去到一个网页，点击左上方web端展示即可看到USB摄像头的实时画面。 激光雷达驱动 移动机器人中常用的激光雷达大多也是USB借口的，比如这款rplidar。 安装与配置 如果我们想把它跑起来，同样需要一个驱动包，大家可以在工作空间中下载雷达的驱动包，然后进行编译。编译完成后，添加环境变量就可以使用这个功能包了。 # 下载源码 $ mkdir -p catkin_ws/src $ cd ~/catkin_ws/src $ git clone -b ros2 https://github.com/slamtec/rplidar_ros.git # 编译 $ cd ~/catkin_ws $ colcon build --symlink-install # 添加环境变量 $ source ~/catkin_ws/install/setup.bash # 添加权限 $ sudo chmod 777 /dev/ttyUSB0 还要记得给激光雷达的USB口设置对应的权限。 运行激光雷达驱动 驱动安装好之后，就可以启动雷达了。 在旭日X3派的终端中，运行启动激光雷达的launch文件。 $ ros2 launch rplidar_ros2 rplidar_launch.py #启动雷达，X3PI $ ros2 run rviz2 rviz2 #查看点云，PC 启动成功后，我们在电脑端的Ubuntu系统中，在ros2环境下打开rviz2，然后将世界坐标系改为laser，然后添加LaserScan的可视化选项，并且把Reliability Policy的选项改为System Default，此时就可以看到激光雷达的点云数据了。","text_tokens":["通讯","成熟","cd","接线","mkdir","soft","于","reliability","only","机器人","也","激光","设备","数据","video8","传输数据","打开","这款","像头","_","因为","到","功能","用来","派","外设","线","webservice","起来","最","发送到","地址","想","symlink","跑","成功","端","可视","移动","uart","源码","yaml","https","share","专门","能","常","硬件","不仅","新","csi","添加",":","--","colcon","laserscan","能够","激光雷达","串行总线","source","就是","也就是说","手机","sudo","配置文件","修改","这时","应该","通信","试一试",".","机器","一个","好","上方","快","坐标","总线","左上","rplidar","type","节点","usb","执行","找到","环境变量","需要","完成","摄像头","可视化","下","接口","laser","提供","记得","名","=","方式","编译","对应","列出来","摄像","+","ubuntu","自动","有","选项","更加","再","安装","用","世界","rviz2","ws","pc","查看","看到","驱动","除此","局域网","左上方","如果","catkin","点云","口","中","变量","坐标系","网页","之外","了","例如","占用","分配","相比","串行","运行","进入","画面","它","ttyusb0","所有","雷达","很多","指令","cam","图像","的","选择","上用","桌面","demo","create","x","通","首先","bash","一种","建立","p","原理","sbin","此时","py","权限","opt","apt","我们","包中","view","video0","#","local","端的"," ","设置","环境","c","同样","浏览器","show","-","就","听说","把","系统","目录","policy","传输","大家","hobot","比如","列出","foxy","除此之外","将","default","link","install","他","终端","a","包了","采用","实时","true","借口","web","常用","x3","送到","让","system","该","slamtec","输入","类似","、","。","旭日","和","还要","这里","ros2","是","印机","nginx","ros","软","都","setup","文件","出来","x3pi","外接","相机","打印机","进去","标准","topic","而且","，","params","速度","啦","浏览","com","广泛","电脑","环境变","规范","上","先","进行","lib","rqt","试试","/","所以","之前","args","可以","通过","mjpeg","大多","号","之一","dev","build","讲到","这个","连接","websocket","再启动","包","给","在","方法","移动机器人","点击","局域","兼容","$","明","~","会","即可","之后","打印","：","后","生活","vim","可","两根","b","就是说","然后","一下","配置","config","run","复杂","github","togetherros","改为","展示","动机","tros","使用","chmod","python3","image","最后","7","clone","src","launch","来","启动","直接","还有","与","777","下载","那","更","工作","话题","为了","发送","并且","git","空间","被"],"title":"USB外设驱动","title_tokens":["驱动","外设","usb"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#usb","text":"在电脑上，我们最常用的接口之一，应该就是USB了，相比之前讲到的外设通信方法，USB更加复杂，速度也更快。","text_tokens":["外设","，","常用","更","快","最","也","速度","之一","我们","电脑","讲到","的","就是","上","usb","了","更加","应该","相比","通信","。","复杂","接口","之前","在","方法"],"title":"USB外设驱动","title_tokens":["驱动","外设","usb"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#usb_1","text":"USB不仅是我们生活中最常用的一种接口，也是一种串行总线的通讯方式。他类似于UART，有两根线用来传输数据。 而且USB还有专门的接口规范，比如我们常听说的USB Type A、Type C。例如这里列出来的USB口，打印机常用的B口，手机上用的C口，都是标准的USB接口。 USB的接口规范，使用广泛，很多成熟的外设都是采用的USB接口。","text_tokens":["通讯","常","成熟","还有","外设","标准","不仅","口","线","这里","而且","中","，","方式","于","常用","听说","最","也","是","很多","传输","列出来","我们","使用","印机","总线","广泛","的","打印","串行总线","比如","列出","type","生活","有","数据","规范","手机","都","usb","上用","例如","两根","b","传输数据"," ","他","类似","uart","出来","、","串行","。","a","接口","c","一种","用来","采用","专门","打印机"],"title":"USB通信原理","title_tokens":["通信","原理","usb"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_1","text":"比如USB摄像头。","text_tokens":["usb","。","摄像","比如","像头","摄像头"],"title":"摄像头驱动","title_tokens":["摄像","摄像头","驱动","像头"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_2","text":"这里我们使用一个USB摄像头，通过一个相机驱动把它跑起来，并且可以看到图像数据。 方法有很多中，TogetherROS兼容ROS2的所有功能，那我们就先试试ROS2中的标准方法，在旭日X3PI上直接安装一个usb_cam功能包。","text_tokens":["可以","通过","标准","就","兼容","这里","它","中","一个","，","把","所有","ros2","那","起来","很多","cam","摄像","我们","使用","图像","的","有","数据","上","usb","先","并且","跑","安装"," ","摄像头","像头","_","试试","。","旭日","x3pi","看到","包","驱动","功能","相机","在","方法","togetherros","直接"],"title":"硬件接线","title_tokens":["接线","硬件"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#ros2","text":"","text_tokens":[],"title":"ROS2相机驱动","title_tokens":["ros2","驱动","相机"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_3","text":"首先安装ROS2的相机驱动包： # 安装功能包 $ sudo apt install ros-foxy-usb-cam 安装好之后，为了让系统能够找到该功能包，需要进入tros的目录，建立对应的软连接。 # 建立软连接 $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 因为旭日X3Pi可以连接csi摄像头，设备名占用了video0-7，所以外接的USB摄像头会被自动分配到video8，我们需要在ROS2的功能包中修改一下设备号。 # 修改配置文件 $ cd /opt/tros/share/usb_cam/config $ sudo vim params.yaml 然后给这个设备添加权限，最后再设置TogetherROS的环境变量就可以使用啦。 # 添加可执行权限 $ sudo chmod 777 /dev/video8 # 添加环境变量 $ source /opt/tros/local_setup.bash","text_tokens":["可以","-","cd","就","名","soft","号","系统","目录","对应","dev","摄像","设备","foxy","自动","video8","再","安装","link","install","这个","连接","像头","_","因为","到","包","驱动","给","功能","在","$","变量","让","会","该","之后","：","vim","可","了","占用","然后","一下","分配","配置","config","。","旭日","yaml","share","进入","togetherros","csi","添加","ros2","tros","--","cam","使用","能够","chmod","的","ros","source","软","python3","sudo","配置文件","setup","最后","create","修改","7","文件","x3pi","首先","相机","外接","bash","建立","777",".","，","好","params","py","权限","啦","opt","apt","为了","我们","环境变","包中","video0","usb","#","执行","找到","环境变量","local","需要"," ","摄像头","设置","/","环境","所以","被"],"title":"安装与配置","title_tokens":["配置","安装","与"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_4","text":"我们来试一试。 $ ros2 launch usb_cam demo_launch.py #启动相机，X3Pi $ ros2 run rqt_image_view rqt_image_view #查看图像，PC 这里直接在X3Pi中启动usb_cam的launch文件，然后再启动一个能和他通信的Ubuntu桌面系统，打开rqt_image_view，选择对应的话题，就可以看到图像了。也就是说明我们成功的用TROS驱动了这个USB摄像头。","text_tokens":["试一试","可以",".","就","这里","$","中","，","一个","明","ros2","tros","py","系统","话题","能","cam","对应","摄像","我们","图像","的","view","ubuntu","就是","也就是说","选择","usb","#","了","image","成功","桌面","就是说","demo","这个"," ","rqt","打开","然后","文件","他","用","像头","_","摄像头","再启动","。","run","通信","pc","查看","x3pi","launch","看到","驱动","来","相机","在","和","启动","直接"],"title":"运行相机驱动","title_tokens":["运行","驱动","相机"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#togetherros","text":"除此之外，TogetherROS中也提供了USB摄像头的驱动节点，连接摄像头之后，直接设置设备的权限和TogetherROS的环境变量就可以使用了。 $ source /opt/tros/local_setup.bash $ sudo chmod 777 /dev/video8 $ ros2 launch hobot_usb_cam hobot_usb_cam.launch.py 之后可以再打开一个新的终端，输入对应的指令，然后启动websocket这个节点，就可以把image这个话题的数据发送到网页了。 $ source /opt/tros/local_setup.bash $ cd /opt/tros/lib/websocket/webservice $ sudo chmod +x ./sbin/nginx $ sudo ./sbin/nginx -p . $ ros2 run websocket websocket --ros-args -p image_topic: = /image -p image_type: = mjpeg -p only_show_image: = true 这时我们直接打开在通一个局域网下的浏览器，输入X3Pi的地址，就可以进去到一个网页，点击左上方web端展示即可看到USB摄像头的实时画面。","text_tokens":["提供","可以","-","cd","就","mjpeg","=","把","only","也","dev","对应","摄像","设备","hobot","+","数据","除此之外","video8","再","这个","打开","连接","像头","终端","_","websocket","到","看到","驱动","在","实时","除此","局域网","点击","左上方","true","局域","web","$","中","变量","webservice","网页","送到","发送到","即可","地址","之后","之外","了","端","输入","然后","。","run","和","togetherros","展示","画面","新",":","ros2","tros","--","指令","cam","使用","chmod","nginx","的","source","ros","sudo","image","setup","这时","x","x3pi","launch","通","bash","启动","直接","进去","777",".","topic","p","，","一个","上方","sbin","权限","py","话题","浏览","opt","发送","我们","左上","环境变","type","节点","usb","local","环境变量","lib"," ","摄像头","设置","/","下","环境","args","浏览器","show"],"title":"TogetherROS相机驱动","title_tokens":["驱动","togetherros","相机"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_5","text":"移动机器人中常用的激光雷达大多也是USB借口的，比如这款rplidar。","text_tokens":["借口","机器","大多","中","，","常用","动机","雷达","机器人","也","是","激光","的","激光雷达","rplidar","比如","usb","这款","移动","。","移动机器人"],"title":"激光雷达驱动","title_tokens":["雷达","激光雷达","激光","驱动"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_6","text":"如果我们想把它跑起来，同样需要一个驱动包，大家可以在工作空间中下载雷达的驱动包，然后进行编译。编译完成后，添加环境变量就可以使用这个功能包了。 # 下载源码 $ mkdir -p catkin_ws/src $ cd ~/catkin_ws/src $ git clone -b ros2 https://github.com/slamtec/rplidar_ros.git # 编译 $ cd ~/catkin_ws $ colcon build --symlink-install # 添加环境变量 $ source ~/catkin_ws/install/setup.bash # 添加权限 $ sudo chmod 777 /dev/ttyUSB0 还要记得给激光雷达的USB口设置对应的权限。","text_tokens":["可以","-","cd","就","mkdir","记得","把","编译","激光","dev","对应","大家","build","install","这个","_","ws","包了","包","驱动","给","功能","在","如果","catkin","口","$","中","变量","~","起来","想","symlink","后","slamtec","跑","b","然后","。","源码","https","github","还要","它","ttyusb0","添加",":","ros2","雷达","--","colcon","使用","chmod","的","激光雷达","ros","source","sudo","setup","clone","src","bash","777",".","p","下载","，","一个","工作","权限","com","我们","环境变","rplidar","usb","#","环境变量","进行","需要","完成","git"," ","空间","设置","/","环境","同样"],"title":"安装与配置","title_tokens":["配置","安装","与"]},{"location":"TogetherROS/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_7","text":"驱动安装好之后，就可以启动雷达了。 在旭日X3派的终端中，运行启动激光雷达的launch文件。 $ ros2 launch rplidar_ros2 rplidar_launch.py #启动雷达，X3PI $ ros2 run rviz2 rviz2 #查看点云，PC 启动成功后，我们在电脑端的Ubuntu系统中，在ros2环境下打开rviz2，然后将世界坐标系改为laser，然后添加LaserScan的可视化选项，并且把Reliability Policy的选项改为System Default，此时就可以看到激光雷达的点云数据了。","text_tokens":["可以","派","改为","点云",".","就","$","中","添加","，","把","好","ros2","坐标系","reliability","此时","x3","雷达","py","系统","坐标","policy","system","激光","laserscan","我们","之后","电脑","的","激光雷达","rplidar","后","ubuntu","数据","选项","了","#","并且","成功","将","可视","default","端的","安装"," ","打开","然后","文件","世界","终端","_","可视化","rviz2","。","旭日","运行","run","pc","查看","x3pi","launch","环境","驱动","下","看到","在","laser","启动"],"title":"运行激光雷达驱动","title_tokens":["雷达","运行","激光","驱动","激光雷达"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/","text":"机器视觉介绍 机器视觉概念 机器视觉， 就是用计算机来模拟人的视觉功能，但这并不仅仅是人眼的简单延伸，更重要的是像人脑一样，可以从客观事物的图像中提取信息，进行处理并加以理解，最终用于实际检测、控制等场景。 获取图像信息相对简单，但想让机器人理解图像中千变万化的物品，就难上加难了。 为了解决这一系列复杂的问题，机器视觉也是一个涉猎广泛的交叉学科，横跨人工智能、神经生物学、物理学、计算机科学、图像处理、模式识别等诸多领域。时至今日，在各个领域中，都有大量开发者或组织参与其中，也积累了众多技术，不过依然还有很多问题亟待解决，就像我们对自己大脑的研究也只是冰山一角一样，机器视觉的研究也将会是一个长久的工作。 机器视觉相关的关键技术也有不少，比如视觉图像的采集和信号处理，这个过程主要是通过传感器硬件采集外部光信号的过程，光信号最终会转变成数字电路的信号，便于下一步的处理；类似左边图片中看到的效果，获取图像之后，更重要的是要识别图像中的物体、确定物体的位置、或者检测物品的变化，这就要用到模式识别或者机器学习等技术，这个部分也是当今机器视觉研究的重点。 和人类的两只眼睛不同，机器用于获取图像的传感器种类较为丰富，可以是一个摄像头，也可以是两个摄像头，还可以是三个、四个、很多个摄像头，不仅可以获取颜色信息，还可以通过红外相机获取深度或者能量信息，这可比人眼获取的信息丰富多了，当然，这也会对后期的处理带来不同的计算压力。 在工业领域，机器视觉系统已经被广泛用于自动检验、工件加工、装配自动化以及生产过程控制等工作。随着机器人的快速发展和应用，机器视觉也逐渐应用于农业机器人、AMR物流机器人、服务机器人、无人驾驶汽车等各种机器人，活跃在农场、物流、仓储、交通、医院等多种环境中。 机器视觉流程 人类视觉擅长于对复杂、非结构化的场景进行定性解释，但机器视觉凭借速度、精度和可重复性等优势，非常适合对结构化场景进行定量测量。 一般来讲，典型的机器视觉系统可以分为如图所示的三个部分：图像采集、图像分析和控制输出。 图像采集注重对原始光学信号的采样，是整个视觉系统的传感部分，核心是相机和相关的配件。 其中光源用于照明待检测的物体，并突显其特征，便于让相机能够更好的捕捉图像。光源是影响机器视觉系统成像质量的重要因素，好的光源和照明效果对机器视觉判断影响很大。当前，机器视觉的光源已经突破人眼的可见光范围，其光谱范围跨越红外光（IR）、可见光、紫外光（UV）乃至X射线波段，可实现更精细和更广泛的检测范围，以及特殊成像需求。 相机被喻为机器视觉系统的“眼睛”，承担着图像信息采集的重要任务。图像传感器又是相机的核心元器件，主要有CCD和CMOS两种类型，其工作原理是将相机镜头接收到的光学信号转化成数字信号。选择合适的相机是机器视觉系统设计的重要环节，不仅直接决定了采集图像的质量和速度，同时也与整个系统的运行模式相关。 图像处理系统接收到相机传来的数字图像之后，通过各种软件算法进行图像特征提取、特征分析和数据标定，最后进行判断。这是各种视觉算法研究最为集中的部分，从传统的模式识别算法，到当前热门的各种机器学习方法，都是为了更好的让机器理解环境。 对于人来讲，识别某一个物体是苹果似乎理所当然，但是对于机器人来讲，就需要提取各种各样不同种类、颜色、形状的苹果特征，然后训练得到一个苹果的“模型”，再通过这个模型对实时图像做匹配，从而分析面前这个东西到底是不是苹果。 在机器人系统中，视觉识别的结果最终要和机器人的某些行为绑定，也就是第三个部分——控制输出，包含I/O接口、运动控制、可视化显示等。当图像处理系统完成图像分析后，将判断的结果发给机器人控制系统，接下来机器人完成运动控制。比如视觉识别到了抓取目标的位置，通过IO口控制夹爪完成抓取和放置，过程中识别的结果和运动的状态，都可以在上位机中显示，方便我们监控。 就机器视觉而言，在这三个部分中，图像分析占据了绝对的核心，涉及的方法、使用的各种开源软件或者框架非常多，这也是我们后续开发的重点，TogetherROS中提供了大量的算法、工具和功能支持。 旭日X3派配置 了解了机器视觉的基本原理和流程，相信大家对视觉应用已经充满了期待，我们这就准备开始。 后续课程中，我们将继续在旭日X3派的开发板上，使用TogetherROS实现各种各样的视觉例程，不过我们得先找到一个相机，比如usb相机或者MIPI接口配套的相机模块，然后连接到开发板对应的接口上。 电脑和开发板之前通过网线连接，便于我们查看视觉处理的结果，速度更快。 如果有HDMI屏幕的话，也可以准备好，稍后需要使用的时候插上查看结果，如果没有的话，也没有影响，后续我们会使用一套网络传输工具，通过板卡的IP地址，就可以看到图像处理的实时状态啦。 USB相机图像采集 关于相机的驱动，请大家也再确认一下，这是后续视觉处理的基础。 如果是USB相机的话，可以参考这个过程验证下是否可以顺利看到图像。 # 旭日X3派 $ sudo apt install ros-foxy-usb-cam $ cd /opt/tros $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros $ source /opt/tros/local_setup.bash $ ros2 launch usb_cam demo_launch.py # 修改params.yaml配置文件中的设备号 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view MIPI相机图像采集 如果使用的是MIPI相机的话，可以参考这个流程驱动相机并显示图像。 # 旭日X3派 $ source /opt/tros/local_setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p video_device: = F37 -p image_width: = 960 -p image_height: = 540 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view 为了提高图像的编码和传输效率，我们建议大家使用MIPI接口的相机，后续应用功能我们也会以该相机为主。","text_tokens":["cd","今日","关键技术","soft","于","组织","形状","）","参考","转化","机器人","也","个","—","设备","人","数据","目标","可见","物体","网络","发展","像头","_","判断","到","ccd","某","基本原理","功能","基本","重点","派","定量","分析","这是","光","交叉学科","相关","重要","想","地址","介绍","难上加难","不过","绝对","可视","学习","数字","突破","yaml","一般来讲","红外光","医院","检验","系列","硬件","不仅","后期","配件","不仅仅","较为","非","实现","方便","f37",":","自己","着","的话","--","开发板","两只","能够","source","夹","就是","装配","sudo","流程","配置文件","仅仅","540","部分","修改","从","至今","相对","抓取","传感","标定","结构","质量","提取",".","得到","类型","机器","一个","好","快","或","爪","无人","width","加工","软件","解释","但","效率","精细","算机","uv","usb","积累","找到","左边","元器件","需要","完成","开源","摄像头","一般","可视化","下","依然","简单","检测","接口","转变成","提供","重复性","领域","计算机","=","变成","是不是","当","对应","冰山","摄像","本原","理学","逐渐","环节","自动","输出","有","cmos","框架","配套","就要","客观事物","过程","再","准备","处理","用","生产","器件","大脑","pc","查看","图片","看到","充满","范围","驱动","长久","状态","外部","基础","发给","后续","数字电","如果","口","似乎","乃至","中","测量","人工智能","控制系统","四个","数字信号","压力","因素","不是","接下","采集","i","快速","元器","等","了","像","放置","视觉","一系列","或者","信号处理","驾驶","绑定","优势","运行","丰富","是否","决定","；","一套","为主","亟待","带来","苹果","传感器","这","两种","训练","height","服务","理解","很多","要","上位","cam","图像","的","并","选择","面前","稍后","没有","demo","神经","转变","create","待","960","智能","当今","定性","bash","一步","更好","以及","原理","p","关键","显示","设计","py","特征提取","紫外","opt","apt","我们","接下来","生物学","view","（","客观","#","事物","接收","local","第三个","hdmi"," ","参与","信号","复性","只是","环境","最为","传来","-","就","突显","模型","开始","捕捉","课程","千变万化","屏幕","算法","系统","ir","传输","大家","io","已经","比如","深度","foxy","注重","mipi","开发","自动化","将","农场","link","install","确定","编码","问题","图像处理","结构化","整个","继续","凭借","实时","多","第三","各种","监控","三个","其","擅长","精度","一角","传统","数字电路","x3","让","控制","了解","网线","该","涉猎","最终","用到","冰山一角","两个","以","实际","时至今日","匹配","模拟","射线","类似","电路","人脑","、","。","生物","旭日","喻为","device","和","又","照明","应用","工具","随着","工业","一样","ros2","所示","是","同时","其中","热门","ros","效果","非常","都","物理","验证","各个领域","setup","影响","关于","分为","文件","行为","理所当然","重要环节","相机","得","各样","紫外光","到底","模式","模式识别","运动","颜色","，","无人驾驶","某些","params","场景","速度","大量","变化","啦","东西","涉及","擅长于","人工","用于","广泛","电脑","还","适合","上","先","但是","进行","农业","rqt","各个","提高","当前","感器","活跃","/","下来","之前","args","多种","如图所示","可以","可见光","转化成","通过","包含","波段","号","研究","信息","数字图像","计算","需求","”","非常适合","这个","技术","连接","板卡","特征分析","在","方法","不同","期待","红外","$","做","video","会","之后","重复","：","便于","后","模块","可","顺利","“","时候","解决","开发者","确认","亟待解决","可比","跨越","然后","从而","一下","一系","合适","配置","run","能量","概念","交通","复杂","插上","镜头","交叉","占据","横跨","化成","计算机科学","togetherros","机中","结果","汽车","原始","例程","科学","来讲","任务","x射线","请","种类","很大","tros","不少","使用","特殊","位置","物理学","python3","image","对于","各种各样","集中","工件","最后","光源","光谱","学科","特征","launch","ip地址","来","当然","直接","还有","对","人眼","与","相信","建议","众多","物流","核心","更","工作","主要","仓储","光学","为了","典型","加以","诸多","物品","成像","获取","可重复性","而言","采样","o","支持","延伸","人类","识别","承担","amr","长于","被","眼睛"],"title":"机器视觉介绍","title_tokens":["介绍","视觉","机器"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_1","text":"","text_tokens":[],"title":"机器视觉介绍","title_tokens":["介绍","视觉","机器"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_2","text":"机器视觉， 就是用计算机来模拟人的视觉功能，但这并不仅仅是人眼的简单延伸，更重要的是像人脑一样，可以从客观事物的图像中提取信息，进行处理并加以理解，最终用于实际检测、控制等场景。 获取图像信息相对简单，但想让机器人理解图像中千变万化的物品，就难上加难了。 为了解决这一系列复杂的问题，机器视觉也是一个涉猎广泛的交叉学科，横跨人工智能、神经生物学、物理学、计算机科学、图像处理、模式识别等诸多领域。时至今日，在各个领域中，都有大量开发者或组织参与其中，也积累了众多技术，不过依然还有很多问题亟待解决，就像我们对自己大脑的研究也只是冰山一角一样，机器视觉的研究也将会是一个长久的工作。 机器视觉相关的关键技术也有不少，比如视觉图像的采集和信号处理，这个过程主要是通过传感器硬件采集外部光信号的过程，光信号最终会转变成数字电路的信号，便于下一步的处理；类似左边图片中看到的效果，获取图像之后，更重要的是要识别图像中的物体、确定物体的位置、或者检测物品的变化，这就要用到模式识别或者机器学习等技术，这个部分也是当今机器视觉研究的重点。 和人类的两只眼睛不同，机器用于获取图像的传感器种类较为丰富，可以是一个摄像头，也可以是两个摄像头，还可以是三个、四个、很多个摄像头，不仅可以获取颜色信息，还可以通过红外相机获取深度或者能量信息，这可比人眼获取的信息丰富多了，当然，这也会对后期的处理带来不同的计算压力。 在工业领域，机器视觉系统已经被广泛用于自动检验、工件加工、装配自动化以及生产过程控制等工作。随着机器人的快速发展和应用，机器视觉也逐渐应用于农业机器人、AMR物流机器人、服务机器人、无人驾驶汽车等各种机器人，活跃在农场、物流、仓储、交通、医院等多种环境中。","text_tokens":["可以","通过","就","领域","计算机","今日","关键技术","于","组织","变成","千变万化","研究","机器人","也","个","系统","信息","冰山","摄像","理学","逐渐","人","已经","比如","深度","自动","有","计算","开发","就要","自动化","物体","将","农场","客观事物","过程","发展","这个","技术","处理","用","确定","像头","问题","图像处理","生产","大脑","图片","看到","功能","在","长久","外部","不同","重点","多","数字电","各种","光","三个","红外","交叉学科","中","人工智能","一角","相关","数字电路","四个","压力","让","会","控制","重要","想","之后","采集","涉猎","最终","便于","快速","难上加难","不过","等","了","像","解决","冰山一角","用到","开发者","两个","实际","学习","时至今日","视觉","一系列","亟待解决","或者","信号处理","数字","模拟","可比","驾驶","类似","一系","电路","人脑","、","。","生物","能量","交通","复杂","交叉","横跨","丰富","和","计算机科学","医院","检验","系列","硬件","；","应用","汽车","不仅","科学","后期","不仅仅","较为","随着","亟待","工业","一样","带来","种类","传感器","这","自己","不少","是","理解","很多","要","服务","其中","两只","图像","的","效果","就是","并","装配","都","位置","物理学","物理","各个领域","仅仅","部分","工件","神经","转变","从","至今","相对","传感","智能","学科","当今","来","相机","当然","一步","还有","提取","人眼","对","机器","模式","模式识别","以及","颜色","众多","，","一个","物流","更","工作","关键","无人驾驶","或","场景","主要","无人","仓储","大量","变化","加工","为了","我们","人工","加以","用于","广泛","生物学","还","但","诸多","物品","客观","算机","事物","获取","积累","左边","进行","农业","延伸"," ","人类","各个","识别","参与","信号","摄像头","感器","amr","活跃","只是","下","依然","简单","环境","检测","被","眼睛","转变成","多种"],"title":"机器视觉概念","title_tokens":["概念","视觉","机器"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_3","text":"人类视觉擅长于对复杂、非结构化的场景进行定性解释，但机器视觉凭借速度、精度和可重复性等优势，非常适合对结构化场景进行定量测量。 一般来讲，典型的机器视觉系统可以分为如图所示的三个部分：图像采集、图像分析和控制输出。 图像采集注重对原始光学信号的采样，是整个视觉系统的传感部分，核心是相机和相关的配件。 其中光源用于照明待检测的物体，并突显其特征，便于让相机能够更好的捕捉图像。光源是影响机器视觉系统成像质量的重要因素，好的光源和照明效果对机器视觉判断影响很大。当前，机器视觉的光源已经突破人眼的可见光范围，其光谱范围跨越红外光（IR）、可见光、紫外光（UV）乃至X射线波段，可实现更精细和更广泛的检测范围，以及特殊成像需求。 相机被喻为机器视觉系统的“眼睛”，承担着图像信息采集的重要任务。图像传感器又是相机的核心元器件，主要有CCD和CMOS两种类型，其工作原理是将相机镜头接收到的光学信号转化成数字信号。选择合适的相机是机器视觉系统设计的重要环节，不仅直接决定了采集图像的质量和速度，同时也与整个系统的运行模式相关。 图像处理系统接收到相机传来的数字图像之后，通过各种软件算法进行图像特征提取、特征分析和数据标定，最后进行判断。这是各种视觉算法研究最为集中的部分，从传统的模式识别算法，到当前热门的各种机器学习方法，都是为了更好的让机器理解环境。 对于人来讲，识别某一个物体是苹果似乎理所当然，但是对于机器人来讲，就需要提取各种各样不同种类、颜色、形状的苹果特征，然后训练得到一个苹果的“模型”，再通过这个模型对实时图像做匹配，从而分析面前这个东西到底是不是苹果。 在机器人系统中，视觉识别的结果最终要和机器人的某些行为绑定，也就是第三个部分——控制输出，包含I/O接口、运动控制、可视化显示等。当图像处理系统完成图像分析后，将判断的结果发给机器人控制系统，接下来机器人完成运动控制。比如视觉识别到了抓取目标的位置，通过IO口控制夹爪完成抓取和放置，过程中识别的结果和运动的状态，都可以在上位机中显示，方便我们监控。 就机器视觉而言，在这三个部分中，图像分析占据了绝对的核心，涉及的方法、使用的各种开源软件或者框架非常多，这也是我们后续开发的重点，TogetherROS中提供了大量的算法、工具和功能支持。","text_tokens":["可以","提供","可见光","重复性","转化成","传来","通过","包含","突显","就","波段","模型","捕捉","形状","）","是不是","当","算法","系统","转化","ir","也","研究","机器人","—","信息","数字图像","已经","环节","人","io","比如","输出","cmos","注重","有","数据","框架","目标","开发","需求","可见","物体","将","再","”","过程","非常适合","这个","处理","图像处理","结构化","整个","判断","凭借","到","器件","特征分析","ccd","某","范围","功能","在","方法","实时","不同","状态","发给","重点","定量","分析","第三","各种","这是","监控","三个","其","红外","口","后续","擅长","似乎","乃至","精度","测量","中","做","传统","控制系统","相关","数字信号","让","控制","重要","因素","不是","之后","接下","重复","采集","：","便于","最终","i","后","可","元器","“","绝对","等","了","可视","学习","放置","视觉","或者","跨越","数字","然后","射线","匹配","从而","合适","突破","绑定","、","。","优势","运行","复杂","喻为","一般来讲","镜头","红外光","占据","化成","和","多","togetherros","又","照明","机中","结果","决定","原始","不仅","配件","实现","非","来讲","工具","任务","x射线","方便","所示","苹果","种类","传感器","很大","两种","训练","着","这","是","同时","理解","要","上位","使用","其中","能够","而言","图像","的","热门","效果","夹","就是","非常","并","特殊","选择","都","面前","位置","对于","各种各样","部分","影响","最后","集中","光源","从","分为","光谱","抓取","待","传感","行为","理所当然","标定","特征","重要环节","定性","相机","结构","直接","当然","各样","质量","对","紫外光","人眼","与","提取","类型","得到","到底","机器","更好","模式","模式识别","运动","以及","原理","颜色","，","核心","一个","好","更","工作","某些","显示","主要","场景","设计","爪","特征提取","速度","大量","软件","紫外","东西","光学","典型","为了","擅长于","我们","涉及","接下来","用于","解释","广泛","但","适合","（","精细","成像","uv","可重复性","接收","但是","第三个","进行","采样","元器件","需要","o","完成","支持","人类"," ","开源","识别","当前","承担","信号","一般","感器","可视化","复性","/","长于","环境","下来","检测","接口","被","眼睛","最为","如图所示"],"title":"机器视觉流程","title_tokens":["流程","视觉","机器"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#x3","text":"了解了机器视觉的基本原理和流程，相信大家对视觉应用已经充满了期待，我们这就准备开始。 后续课程中，我们将继续在旭日X3派的开发板上，使用TogetherROS实现各种各样的视觉例程，不过我们得先找到一个相机，比如usb相机或者MIPI接口配套的相机模块，然后连接到开发板对应的接口上。 电脑和开发板之前通过网线连接，便于我们查看视觉处理的结果，速度更快。 如果有HDMI屏幕的话，也可以准备好，稍后需要使用的时候插上查看结果，如果没有的话，也没有影响，后续我们会使用一套网络传输工具，通过板卡的IP地址，就可以看到图像处理的实时状态啦。","text_tokens":["可以","通过","就","开始","课程","屏幕","也","对应","传输","本原","大家","已经","比如","有","mipi","配套","开发","将","网络","准备","连接","处理","板卡","图像处理","继续","到","查看","充满","看到","基本原理","在","状态","实时","基本","派","后续","期待","各种","如果","中","x3","会","了解","网线","地址","模块","便于","不过","时候","了","视觉","或者","然后","。","旭日","插上","和","togetherros","结果","应用","例程","实现","工具","一套","这","的话","开发板","使用","图像","的","流程","各种各样","稍后","没有","影响","ip地址","得","相机","各样","对","相信","机器","原理","，","一个","好","更","快","速度","啦","我们","电脑","上","usb","先","找到","需要","hdmi"," ","接口","之前"],"title":"旭日X3派配置","title_tokens":["旭日","派","x3","配置"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#usb","text":"关于相机的驱动，请大家也再确认一下，这是后续视觉处理的基础。 如果是USB相机的话，可以参考这个过程验证下是否可以顺利看到图像。 # 旭日X3派 $ sudo apt install ros-foxy-usb-cam $ cd /opt/tros $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros $ source /opt/tros/local_setup.bash $ ros2 launch usb_cam demo_launch.py # 修改params.yaml配置文件中的设备号 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view","text_tokens":["可以","-","cd","soft","号","参考","也","大家","设备","foxy","再","过程","link","install","这个","处理","_","pc","看到","驱动","基础","派","后续","这是","如果","$","中","x3","顺利","确认","视觉","一下","配置","。","旭日","run","yaml","是否","请","ros2","tros","--","的话","是","cam","图像","的","ros","source","python3","sudo","验证","配置文件","image","setup","关于","demo","create","修改","文件","launch","相机","bash",".","，","params","py","opt","apt","view","usb","#","local"," ","rqt","/","下"],"title":"USB相机图像采集","title_tokens":["图像","采集","相机","usb"]},{"location":"TogetherROS/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#mipi","text":"如果使用的是MIPI相机的话，可以参考这个流程驱动相机并显示图像。 # 旭日X3派 $ source /opt/tros/local_setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p video_device: = F37 -p image_width: = 960 -p image_height: = 540 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view 为了提高图像的编码和传输效率，我们建议大家使用MIPI接口的相机，后续应用功能我们也会以该相机为主。","text_tokens":["可以","派","args","-","后续","如果","建议",".","应用","=","$","p","为主","，","video","f37",":","ros2","参考","显示","x3","tros","height","--","的话","也","width","是","会","opt","cam","为了","传输","该","使用","我们","大家","图像","的","source","ros","view","foxy","并","效率","mipi","流程","#","image","以","local","540","setup","这个"," ","rqt","提高","编码","_","960","。","旭日","/","run","pc","驱动","device","接口","功能","相机","bash","和"],"title":"MIPI相机图像采集","title_tokens":["图像","采集","mipi","相机"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/","text":"CV图像加速处理 OpenCV是一个著名的机器视觉处理库，相信大家都有听过，这个库中有很多图像处理的基础算法，比如灰度变化、图像滤波等，不过这个库为了保证较好的通用性，主要通过软件实现各种算法，TogetherROS对此作了大量优化，我们一起来看看。 TogetherROS视觉加速 TogetherROS系统中集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 效果这么好，具体该如何使用呢？ 高斯滤波 我们先来看下图像处理中常用的高斯滤波算法，OpenCV和hobotcv，正面PK一下，我们也看看在程序中如何使用hobotcv的图像处理加速算法。 运行示例程序 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/hobot_cv/config/ . $ ros2 launch hobot_cv hobot_cv_gaussian_blur.launch.py 代码解析 代码地址：https://c-gitlab.horizon.ai/HHP/box/hobot_cv/-/blob/develop/test/test_gaussian_blur.cpp // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include <algorithm> #include <chrono> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <utility> #include \"hobotcv_gaussian_blur.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" void analyse_result ( cv :: Mat & out_filter , cv :: Mat & cls_filter , std :: string flag_name ) { auto start_time = std :: chrono :: steady_clock :: now (); std :: cout << \"\" << std :: endl ; std :: cout << \"analyse_result start \" << std :: endl ; std :: cout << \"---------\" << flag_name << std :: endl ; std :: cout << \"out_filter type:\" << out_filter . type () << \",cols:\" << out_filter . cols << \",rows:\" << out_filter . rows << \",channel:\" << out_filter . channels () << std :: endl ; std :: cout << \"cls_filter type:\" << cls_filter . type () << \",cols:\" << cls_filter . cols << \",rows:\" << cls_filter . rows << \",channel:\" << cls_filter . channels () << std :: endl ; double minvalue , maxvalue ; cv :: Point mixIdx , maxIdx ; cv :: minMaxLoc ( out_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"out_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"out_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"out_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: minMaxLoc ( cls_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"cls_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"cls_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"cls_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: Mat mat_diff = cv :: abs ( out_filter - cls_filter ); cv :: Scalar sum_error = cv :: sum ( mat_diff >= 1 ); cv :: Scalar mean_error = cv :: sum ( mat_diff ) / ( mat_diff . rows * mat_diff . cols ); cv :: minMaxLoc ( mat_diff , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"\" << std :: endl ; std :: cout << \"diff diff diff\" << std :: endl ; std :: cout << \"mat_diff minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"mat_diff min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"mat_diff max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; std :: cout << \"\" << std :: endl ; std :: cout << \"error sum:\" << sum_error [ 0 ] << \",max:\" << maxvalue << \",mean_error:\" << mean_error [ 0 ] << std :: endl ; int time_used_ms_end = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: steady_clock :: now () - start_time ) . count (); std :: cout << \"analyse_result,time_used_ms_end:\" << time_used_ms_end << std :: endl ; std :: cout << \"analyse_result end \" << std :: endl ; std :: cout << \"\" << std :: endl ; } int main () { int32_t ret = -1 ; HobotGaussianBlurParam blur_param ; HOBOTCV_INITIALIZE_GAUSSIAN_BLUR_PARAM ( & blur_param ); HobotCVGaussianBlurHandle handle ; ret = HobotCVGaussianBlurCreate ( blur_param , & handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurCreate failed, error msg:%d \\n \" , ret ); return -1 ; } for ( int i = 0 ; i < 5 ; i ++ ) { std :: string m_tof_file_s = \"images/frame1_\" + std :: to_string ( i ) + \".png\" ; std :: cout << \"===================\" << std :: endl ; std :: cout << \"image name :\" << m_tof_file_s << std :: endl ; cv :: Mat src = cv :: imread ( m_tof_file_s , CV_16UC1 ); cv :: Mat dst ; cv :: medianBlur ( src , src , 3 ); auto start_time_infe = std :: chrono :: steady_clock :: now (); ret = HobotCVGaussianBlurProcess ( handle , & src , & dst ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurProcess failed, error msg:%d \\n \" , ret ); return -1 ; } int infe_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_infe ). count (); std :: cout << \"infe cost time:\" << infe_time << std :: endl ; auto start_time_gauss = std :: chrono :: steady_clock :: now (); cv :: Mat gaussian_tof ; cv :: GaussianBlur ( src , gaussian_tof , cv :: Size ( 3 , 3 ), 0 , 0 , cv :: BORDER_REPLICATE ); int guss_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_gauss ). count (); std :: cout << \"guss_time cost time:\" << guss_time << std :: endl ; float save_rate = float (( guss_time * 1.0 - infe_time * 1.0 ) / guss_time ); std :: cout << \"hobotcv save rate:\" << save_rate << std :: endl ; analyse_result ( dst , gaussian_tof , \"GaussianBlur\" ); std :: cout << \"-------------------------\" << std :: endl ; std :: cout << \"\" << std :: endl ; } ret = HobotCVGaussianBlurDestroy ( handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurDestroy failed, error msg:%d \\n \" , ret ); return -1 ; } return 0 ; } 图像裁剪与缩放 再来看另外一个案例，图像的裁剪与缩放，比如这样一幅图片，我们尝试剪裁左上角的一小块图像出来，或者对裁剪的某一块图像放大来看看。 运行示例程序 # 配置TogetherROS环境 source /opt/tros/setup.bash # 从TogetherROS的安装路径中拷贝出运行示例需要的模型和配置文件。 cp -r /opt/tros/lib/hobot_cv/config/ . # 启动launch文件 ros2 launch hobot_cv hobot_cv_crop_resize.launch.py 代码解析 代码地址：https://c-gitlab.horizon.ai/HHP/box/hobot_cv/-/blob/develop/src/test.cpp // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include \"include/hobotcv_imgproc.h\" #include \"include/utils.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/core/types.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/opencv.hpp\" #include <fstream> #include <string> #include <chrono> #include <iostream> void writeImg ( cv :: Mat & mat , std :: string imgfile ) { cv :: Mat img_bgr ; cv :: cvtColor ( mat , img_bgr , cv :: COLOR_YUV2BGR_NV12 ); cv :: imwrite ( imgfile , img_bgr ); } int main () { std :: string image_file = \"config/test.jpg\" ; cv :: Mat bgr_mat = cv :: imread ( image_file , cv :: IMREAD_COLOR ); auto src_height = bgr_mat . rows ; auto src_width = bgr_mat . cols ; cv :: Mat srcmat_nv12 ; BGRToNv12 ( bgr_mat , srcmat_nv12 ); auto dst_height = src_height / 2 ; auto dst_width = src_width / 2 ; cv :: Mat dstmat_nv12 ( dst_height * 3 / 2 , dst_width , CV_8UC1 ); auto before_resize = std :: chrono :: system_clock :: now (); auto ret = hobot_cv :: hobotcv_resize ( srcmat_nv12 , src_height , src_width , dstmat_nv12 , dst_height , dst_width ); auto after_resize = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_resize - before_resize ). count (); if ( 0 == ret ) { std :: cout << \"resize finish, time: \" << interval << \"ms\" << std :: endl ; } writeImg ( dstmat_nv12 , \"./resize.jpg\" ); auto before_crop = std :: chrono :: system_clock :: now (); auto cropmat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , 200 , 200 , cv :: Range ( 0 , 200 ), cv :: Range ( 0 , 200 )); auto after_crop = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_crop - before_crop ). count (); std :: cout << \"crop finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropmat , \"./crop.jpg\" ); auto before_cropResize = std :: chrono :: system_clock :: now (); auto cropResizemat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , src_height , src_width , cv :: Range ( 200 , 400 ), cv :: Range ( 200 , 400 )); auto after_cropResize = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_cropResize - before_cropResize ). count (); std :: cout << \"cropResize finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropResizemat , \"./cropResize.jpg\" ); return 0 ; }","text_tokens":["hhp","gauss","types","正面","confidential","另外","呢","也","replicate","iomanip","hobotcvgaussianblurhandle","this","if","minvalue","{","horizon","保证","风格","std","_","到","jpg","secrets","某","time","bgrtonv12","著名","加速","16uc1","(","t","对此",">","起来","out","analyse","地址","倍","不过","裁剪","for","name","scalar","the","param","main","range","handle","and","集成","https","0","1","硬件","cv","实现","程序","png",":","way","gitlab","infe","source","to","配置文件","滤波","从","clock",";",")","做到","blob",".",",","end","frame1","机器","一个","好","dstmat","imwrite","reproduced","width","软件","左上","效率","type","-------------------------","需要","express","案例","下","hobotgaussianblurparam","接口","}","robotics","2","剪裁","路径","400","may","max","no","=","灰度","start","]","of","channel","guss","+","有","算子","混合","filter","再","imgproc","安装","？","part","拷贝","cls","处理","r","msg","图片","基础","一小","imread","来看","中","algorithm","看看","2021","tof","i","等","了","例如","视觉","imgcodecs","或者","point","运行","m","底层","一","channels","&","maxidx","库中","系统资源","上角","double","float","images","height","map","很多","资源","图像","的","copied","提升","mean","by","core","这样","interval","steady","缩放","x","bgr","3","gaussian","一块","bash","iterator","具体","test","contains","work","py","transmitted","示例","ret","通用","auto","opt","initialize","我们","hobotcvgaussianblurcreate","左上角","cout","permission","#","int32"," ","hpp","++","环境","c","听","编程","cpp","芯片","-","save","maxvalue","pk","模型","inc","d","endl","1.0","cvtcolor","算法","系统","any","大家","hobot","比如","这么","nv12","开发","*","iostream","trade","图像处理","mat","opencv","sum","or","y","rows","diff","各种","utility","常用","一幅","过","system","该","cost","void","error","旋转","高斯","一小块","、","。","box","\"","和","5","n","is","应用","border","ros2","finish","cropmat","string","是","queue","效果","都","setup","消耗","放大","crop","before","分别","文件","include","甚至","出来","小块","如何","color","测试","count","而且","，","畸变","变化","大量","rate","develop","printf","上","地平","先","microseconds","进行","200","lib","dst","after","opencv2","utils","/","gaussianblur","fstream","校正","proprietary","可以","通过","出","地平线","通用性","writeimg","material","copyright","result","尝试","8uc1","对比","这个","\\","代码","在","方法","ms","without","hobotcv","img","return","h","兼容","$","cast","多倍","size","owned","库","：","便于","disclosed","int","all","cropresize","medianblur","[","一下","配置","软硬","软硬件","config","minmaxloc","milliseconds","cp","togetherros","abs","帧","be","较","information","tros","ai","reserved","failed","yuv2bgr","使用","作","image","率","性能","blur","src","purpose","launch","降低","<","来","file","启动","now","srcmat","chrono","与","对","相信","min","更","imgfile","主要","cols","解析","duration","为了","used","引擎","s","---------","in","resize","优化","协同","%","hobotcvgaussianblurprocess","hobotcvgaussianblurdestroy","written","flag","rights","cropresizemat","mixidx"],"title":"CV图像处理加速","title_tokens":["图像处理","加速","cv","图像","处理"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#cv","text":"OpenCV是一个著名的机器视觉处理库，相信大家都有听过，这个库中有很多图像处理的基础算法，比如灰度变化、图像滤波等，不过这个库为了保证较好的通用性，主要通过软件实现各种算法，TogetherROS对此作了大量优化，我们一起来看看。","text_tokens":["著名","通过","各种","相信","机器","库中","实现","灰度","一个","，","好","较","对此","主要","起来","算法","看看","过","库","是","变化","很多","通用","软件","通用性","大量","为了","大家","我们","图像","的","比如","作","有","都","不过","等","了","优化","视觉","滤波","这个","保证","处理","图像处理","、","。","一","听","opencv","togetherros","基础"],"title":"CV图像加速处理","title_tokens":["图像","处理","加速","cv"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#togetherros","text":"TogetherROS系统中集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 效果这么好，具体该如何使用呢？","text_tokens":["可以","2","芯片","通过","地平线","系统","呢","hobot","这么","算子","混合","开发","对比","？","风格","处理","到","opencv","在","方法","加速","兼容","中","多倍","常用","库","该","倍","便于","等","了","例如","旋转","视觉","高斯","软硬","软硬件","集成","、","。","运行","底层","togetherros","硬件","cv","应用","系统资源","实现","帧","使用","资源","图像","的","效果","提升","率","性能","滤波","消耗","分别","缩放","甚至","3","如何","降低","具体","做到","与","测试","而且","，","畸变","更","好","软件","我们","引擎","效率","上","地平","协同","进行"," ","接口","编程","校正"],"title":"TogetherROS视觉加速","title_tokens":["视觉","togetherros","加速"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_1","text":"我们先来看下图像处理中常用的高斯滤波算法，OpenCV和hobotcv，正面PK一下，我们也看看在程序中如何使用hobotcv的图像处理加速算法。","text_tokens":["hobotcv","加速","程序","来看","正面","pk","中","，","常用","看看","算法","也","我们","使用","图像","的","先","在","滤波","处理","一下","高斯","图像处理","。","下","如何","opencv","和"],"title":"高斯滤波","title_tokens":["高斯","滤波"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_2","text":"$ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/hobot_cv/config/ . $ ros2 launch hobot_cv hobot_cv_gaussian_blur.launch.py","text_tokens":["-","cv",".","$","ros2","tros","py","opt","hobot","source","setup","lib"," ","blur","r","_","config","gaussian","/","launch","cp","bash"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_3","text":"代码地址：https://c-gitlab.horizon.ai/HHP/box/hobot_cv/-/blob/develop/test/test_gaussian_blur.cpp // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include <algorithm> #include <chrono> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <utility> #include \"hobotcv_gaussian_blur.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" void analyse_result ( cv :: Mat & out_filter , cv :: Mat & cls_filter , std :: string flag_name ) { auto start_time = std :: chrono :: steady_clock :: now (); std :: cout << \"\" << std :: endl ; std :: cout << \"analyse_result start \" << std :: endl ; std :: cout << \"---------\" << flag_name << std :: endl ; std :: cout << \"out_filter type:\" << out_filter . type () << \",cols:\" << out_filter . cols << \",rows:\" << out_filter . rows << \",channel:\" << out_filter . channels () << std :: endl ; std :: cout << \"cls_filter type:\" << cls_filter . type () << \",cols:\" << cls_filter . cols << \",rows:\" << cls_filter . rows << \",channel:\" << cls_filter . channels () << std :: endl ; double minvalue , maxvalue ; cv :: Point mixIdx , maxIdx ; cv :: minMaxLoc ( out_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"out_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"out_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"out_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: minMaxLoc ( cls_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"cls_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"cls_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"cls_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: Mat mat_diff = cv :: abs ( out_filter - cls_filter ); cv :: Scalar sum_error = cv :: sum ( mat_diff >= 1 ); cv :: Scalar mean_error = cv :: sum ( mat_diff ) / ( mat_diff . rows * mat_diff . cols ); cv :: minMaxLoc ( mat_diff , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"\" << std :: endl ; std :: cout << \"diff diff diff\" << std :: endl ; std :: cout << \"mat_diff minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"mat_diff min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"mat_diff max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; std :: cout << \"\" << std :: endl ; std :: cout << \"error sum:\" << sum_error [ 0 ] << \",max:\" << maxvalue << \",mean_error:\" << mean_error [ 0 ] << std :: endl ; int time_used_ms_end = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: steady_clock :: now () - start_time ) . count (); std :: cout << \"analyse_result,time_used_ms_end:\" << time_used_ms_end << std :: endl ; std :: cout << \"analyse_result end \" << std :: endl ; std :: cout << \"\" << std :: endl ; } int main () { int32_t ret = -1 ; HobotGaussianBlurParam blur_param ; HOBOTCV_INITIALIZE_GAUSSIAN_BLUR_PARAM ( & blur_param ); HobotCVGaussianBlurHandle handle ; ret = HobotCVGaussianBlurCreate ( blur_param , & handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurCreate failed, error msg:%d \\n \" , ret ); return -1 ; } for ( int i = 0 ; i < 5 ; i ++ ) { std :: string m_tof_file_s = \"images/frame1_\" + std :: to_string ( i ) + \".png\" ; std :: cout << \"===================\" << std :: endl ; std :: cout << \"image name :\" << m_tof_file_s << std :: endl ; cv :: Mat src = cv :: imread ( m_tof_file_s , CV_16UC1 ); cv :: Mat dst ; cv :: medianBlur ( src , src , 3 ); auto start_time_infe = std :: chrono :: steady_clock :: now (); ret = HobotCVGaussianBlurProcess ( handle , & src , & dst ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurProcess failed, error msg:%d \\n \" , ret ); return -1 ; } int infe_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_infe ). count (); std :: cout << \"infe cost time:\" << infe_time << std :: endl ; auto start_time_gauss = std :: chrono :: steady_clock :: now (); cv :: Mat gaussian_tof ; cv :: GaussianBlur ( src , gaussian_tof , cv :: Size ( 3 , 3 ), 0 , 0 , cv :: BORDER_REPLICATE ); int guss_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_gauss ). count (); std :: cout << \"guss_time cost time:\" << guss_time << std :: endl ; float save_rate = float (( guss_time * 1.0 - infe_time * 1.0 ) / guss_time ); std :: cout << \"hobotcv save rate:\" << save_rate << std :: endl ; analyse_result ( dst , gaussian_tof , \"GaussianBlur\" ); std :: cout << \"-------------------------\" << std :: endl ; std :: cout << \"\" << std :: endl ; } ret = HobotCVGaussianBlurDestroy ( handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurDestroy failed, error msg:%d \\n \" , ret ); return -1 ; } return 0 ; }","text_tokens":["-","may","hhp","save","max","gauss","no","maxvalue","=","confidential","start","inc","]","endl","d","1.0","any","of","channel","replicate","iomanip","hobot","guss","material","+","hobotcvgaussianblurhandle","copyright","result","this","if","filter","minvalue","{","horizon","imgproc","\\","part","*","cls","iostream","std","trade","_","代码","secrets","msg","mat","sum","or","time","y","ms","without","rows","hobotcv","diff","return","h","utility","16uc1","imread","(","t","cast","algorithm","size","owned",">","out","analyse","地址","2021","tof","cost","void","i","：","error","disclosed","int","all","for","name","scalar","the","imgcodecs","param","main","medianblur","[","handle","and","point","minmaxloc","milliseconds","m","https","channels","box","\"","0","1","&","5","abs","n","cv","is","maxidx","border","png","double",":","be","way","information","float","string","images","ai","reserved","gitlab","map","failed","infe","queue","to","copied","mean","image","by","core","steady","blur","clock",";","include","x","src","3",")","gaussian","purpose","<","iterator","file","now","blob","chrono","test",".",",","end","count","frame1","min","contains","work","cols","reproduced","transmitted","ret","rate","auto","duration","initialize","develop","used","s","---------","hobotcvgaussianblurcreate","printf","in","type","cout","permission","#","microseconds","%","-------------------------","int32","hobotcvgaussianblurprocess","hobotcvgaussianblurdestroy","dst","written"," ","opencv2","flag","rights","express","hpp","++","/","hobotgaussianblurparam","gaussianblur","c","fstream","cpp","robotics","mixidx","}","proprietary"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_4","text":"再来看另外一个案例，图像的裁剪与缩放，比如这样一幅图片，我们尝试剪裁左上角的一小块图像出来，或者对裁剪的某一块图像放大来看看。","text_tokens":["剪裁","与","对","来看","上角","一个","，","一幅","另外","看看","我们","左上","图像","的","左上角","比如","尝试","裁剪","再","这样","或者","放大","缩放","案例","出来","一小块","小块","。","一块","图片","某","来","一小"],"title":"图像裁剪与缩放","title_tokens":["图像","裁剪","缩放","与"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_5","text":"# 配置TogetherROS环境 source /opt/tros/setup.bash # 从TogetherROS的安装路径中拷贝出运行示例需要的模型和配置文件。 cp -r /opt/tros/lib/hobot_cv/config/ . # 启动launch文件 ros2 launch hobot_cv hobot_cv_crop_resize.launch.py","text_tokens":["路径","-","cv",".","出","模型","中","ros2","tros","py","示例","opt","hobot","的","source","resize","#","配置文件","需要","setup","lib","安装"," ","crop","拷贝","从","文件","r","配置","_","config","。","/","运行","环境","launch","cp","bash","和","启动","togetherros"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_6","text":"代码地址：https://c-gitlab.horizon.ai/HHP/box/hobot_cv/-/blob/develop/src/test.cpp // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include \"include/hobotcv_imgproc.h\" #include \"include/utils.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/core/types.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/opencv.hpp\" #include <fstream> #include <string> #include <chrono> #include <iostream> void writeImg ( cv :: Mat & mat , std :: string imgfile ) { cv :: Mat img_bgr ; cv :: cvtColor ( mat , img_bgr , cv :: COLOR_YUV2BGR_NV12 ); cv :: imwrite ( imgfile , img_bgr ); } int main () { std :: string image_file = \"config/test.jpg\" ; cv :: Mat bgr_mat = cv :: imread ( image_file , cv :: IMREAD_COLOR ); auto src_height = bgr_mat . rows ; auto src_width = bgr_mat . cols ; cv :: Mat srcmat_nv12 ; BGRToNv12 ( bgr_mat , srcmat_nv12 ); auto dst_height = src_height / 2 ; auto dst_width = src_width / 2 ; cv :: Mat dstmat_nv12 ( dst_height * 3 / 2 , dst_width , CV_8UC1 ); auto before_resize = std :: chrono :: system_clock :: now (); auto ret = hobot_cv :: hobotcv_resize ( srcmat_nv12 , src_height , src_width , dstmat_nv12 , dst_height , dst_width ); auto after_resize = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_resize - before_resize ). count (); if ( 0 == ret ) { std :: cout << \"resize finish, time: \" << interval << \"ms\" << std :: endl ; } writeImg ( dstmat_nv12 , \"./resize.jpg\" ); auto before_crop = std :: chrono :: system_clock :: now (); auto cropmat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , 200 , 200 , cv :: Range ( 0 , 200 ), cv :: Range ( 0 , 200 )); auto after_crop = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_crop - before_crop ). count (); std :: cout << \"crop finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropmat , \"./crop.jpg\" ); auto before_cropResize = std :: chrono :: system_clock :: now (); auto cropResizemat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , src_height , src_width , cv :: Range ( 200 , 400 ), cv :: Range ( 200 , 400 )); auto after_cropResize = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_cropResize - before_cropResize ). count (); std :: cout << \"cropResize finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropResizemat , \"./cropResize.jpg\" ); return 0 ; }","text_tokens":["2","-","400","may","hhp","no","types","=","confidential","inc","endl","cvtcolor","any","of","writeimg","hobot","material","copyright","nv12","this","if","8uc1","{","horizon","imgproc","part","*","iostream","std","trade","_","代码","secrets","jpg","mat","opencv","ms","or","time","bgrtonv12","without","rows","hobotcv","img","return","h","imread","(","cast","owned",">","system","地址","2021","void","：","disclosed","int","all","cropresize","for","the","imgcodecs","main","range","and","config","milliseconds","https","box","\"","0","&","cv","is",":","be","way","finish","information","cropmat","string","height","ai","reserved","gitlab","yuv2bgr","copied","image","by","core","interval","crop","before","clock",";","include","src","bgr",")","3","purpose","color","<","file","now","blob","srcmat","chrono","test",".",",","count","contains","work","imgfile","cols","dstmat","imwrite","reproduced","transmitted","width","ret","auto","duration","develop","used","in","cout","resize","permission","#","200","dst","written"," ","after","opencv2","rights","express","hpp","utils","/","cropresizemat","c","fstream","cpp","robotics","}","proprietary"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/","text":"模型推理框架 智能机器人与机器学习是紧密相连的，机器学习又可以分成数据采集、标注、训练、推理等环节，其中数据的训练需要消耗大量算力，适合在服务器或者云端进行，不过训练好的模型可是要部署到机器人端进行推理运算的，所以模型推理的效率如何，直接决定了机器人视觉处理的效率，这刚好是TogetherROS所擅长的地方。 Hobot DNN模型推理库 TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 hobot_dnn是在地平线X3开发板上利用BPU处理器实现AI推理功能，基于地平线EasyDNN和ROS2 Node进行二次开发，为应用开发提供更简单易用的模型集成开发接口，包括模型管理、基于模型描述的输入处理及结果解析，以及模型输出内存分配管理等功能。 关于hobot_dnn的使用逻辑流程如这张图所示，供大家参考，我们后续也会通过具体的案例解释代码的实现过程。 算法与应用库 在Hobot DNN模型推理库的基础上，地平线还提供了一套基于TogetherROS系统的AI算法包，称为BOXs，这样我们就不需要从零构建算法，基于这些标准而高效的算法，可以更关注应用层面的APP开发。 从这张图中我们可以看到，这套AI算法包中包含两大块，一个是基础算法，一个是应用算法。 基础算法中主要是图像分类、语义分割和目标检测这些常用的算法，应用层面就会基于这些算法和某些场景，动态实现更为复杂的人体识别、骨骼点识别、手势识别等具体的功能，这些模块就可以和机器人运功功能直接结合，节省了我们开发AI视觉部分的时间。 模型推理测试 这套模型推理和算法库的效果如何呢？ 我们先来体验一个TogetherROS系统自带的案例，识别这张图片中的人，以及每个人的骨骼关键点。 # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。config中为example使用的模型，回灌使用的本地图片 $ cp -r /opt/tros/lib/dnn_node_example/config/ . # 使用本地jpg格式图片通过同步模式进行回环预测，并存储渲染后的图片 $ ros2 launch dnn_node_example hobot_dnn_node_example_feedback.launch.py","text_tokens":["可以","提供","关注","包含","芯片","通过","路径","-","自带","标注","就","模型","出","地平线","点","参考","算法","系统","机器人","也","呢","分类","dnn","描述","大家","回灌","hobot","借助","环节","人","包括","人体","框架","保障","二次","数据","易用","输出","目标","开发","务器","相连","过程","系统集成","这套","安装","？","拷贝","本地","处理","r","预测","_","到","代码","jpg","推理","图片","看到","包","这张","功能","在","所","分割","基础","调教","后续","同步","骨骼","擅长","$","中","利用","人工智能","boxs","常用","体验","x3","逻辑","充足","库","会","语义","运功","采集","这些","模块","后","不过","等","了","渲染","端","开发者","层面","学习","实际","可是","视觉","或者","输入","部署","时间","分配","配置","config","、","集成","。","如","运行","复杂","底层","cp","内存","和","togetherros","又","节省","结果","决定","应用","app","大块","处理器","实现","服务器","格式","一套","零","ros2","所示","称为","这","训练","ai","tros","服务","是","张图","很多","要","理器","开发板","使用","其中","为","基于","结合","图像","的","关键点","source","效果","并","流程","配置文件","而","二次开发","setup","node","关于","供","消耗","这样","更为","从","部分","文件","bpu","example","智能","如何","构建","launch","来","算力","bash","具体","直接","分成","不","两大块","与","标准",".","easydnn","测试","机器","模式","以及","回环","众多","，","一个","好","很快","更","关键","某些","主要","场景","py","示例","大量","啦","解析","opt","中为","我们","人工","解释","引擎","包中","还","效率","适合","云端","运算","管理","及","上","地平","动态","刚好","先","#","进行","需要","lib","不用"," ","开源","地方","识别","手势","feedback","案例","/","高效","环境","简单","紧密","所以","接口","检测","花费","存储","每个"],"title":"模型推理框架","title_tokens":["模型","推理","框架"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_1","text":"智能机器人与机器学习是紧密相连的，机器学习又可以分成数据采集、标注、训练、推理等环节，其中数据的训练需要消耗大量算力，适合在服务器或者云端进行，不过训练好的模型可是要部署到机器人端进行推理运算的，所以模型推理的效率如何，直接决定了机器人视觉处理的效率，这刚好是TogetherROS所擅长的地方。","text_tokens":["可以","与","决定","标注","机器","服务器","擅长","模型","，","好","又","这","训练","机器人","服务","是","大量","要","直接","其中","环节","的","采集","适合","云端","运算","效率","数据","不过","等","务器","了","刚好","相连","端","进行","学习","需要","可是","视觉","消耗","或者","地方","处理","部署","、","到","智能","。","推理","如何","紧密","所以","算力","在","所","togetherros","分成"],"title":"模型推理框架","title_tokens":["模型","推理","框架"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#hobot-dnn","text":"TogetherROS系统集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 hobot_dnn是在地平线X3开发板上利用BPU处理器实现AI推理功能，基于地平线EasyDNN和ROS2 Node进行二次开发，为应用开发提供更简单易用的模型集成开发接口，包括模型管理、基于模型描述的输入处理及结果解析，以及模型输出内存分配管理等功能。 关于hobot_dnn的使用逻辑流程如这张图所示，供大家参考，我们后续也会通过具体的案例解释代码的实现过程。","text_tokens":["提供","可以","芯片","通过","就","模型","地平线","参考","系统","也","dnn","描述","大家","hobot","借助","包括","二次","保障","易用","数据","输出","开发","过程","系统集成","这套","处理","_","代码","推理","功能","在","调教","后续","中","利用","人工智能","x3","逻辑","充足","库","会","等","了","开发者","实际","输入","部署","时间","分配","集成","、","。","如","底层","内存","和","togetherros","结果","应用","处理器","实现","ros2","所示","这","训练","ai","张图","是","很多","理器","开发板","使用","为","基于","的","流程","二次开发","node","关于","供","bpu","智能","算力","具体","easydnn","以及","众多","，","很快","更","啦","解析","我们","人工","解释","引擎","管理","及","上","地平","进行","不用","开源"," ","案例","简单","接口","花费"],"title":"Hobot DNN模型推理库","title_tokens":["库","dnn","推理","模型","hobot"," "]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_2","text":"在Hobot DNN模型推理库的基础上，地平线还提供了一套基于TogetherROS系统的AI算法包，称为BOXs，这样我们就不需要从零构建算法，基于这些标准而高效的算法，可以更关注应用层面的APP开发。 从这张图中我们可以看到，这套AI算法包中包含两大块，一个是基础算法，一个是应用算法。 基础算法中主要是图像分类、语义分割和目标检测这些常用的算法，应用层面就会基于这些算法和某些场景，动态实现更为复杂的人体识别、骨骼点识别、手势识别等具体的功能，这些模块就可以和机器人运功功能直接结合，节省了我们开发AI视觉部分的时间。","text_tokens":["提供","可以","关注","包含","就","模型","地平线","点","算法","系统","机器人","分类","dnn","hobot","人体","目标","开发","这套","推理","看到","包","功能","在","分割","基础","骨骼","中","boxs","常用","库","语义","会","运功","这些","模块","等","了","层面","视觉","时间","、","。","复杂","和","togetherros","节省","app","应用","大块","实现","一套","零","称为","这","ai","张图","是","基于","结合","图像","的","而","部分","这样","更为","从","构建","具体","直接","不","两大块","标准","机器","，","一个","更","某些","主要","场景","我们","包中","还","上","地平","动态","需要"," ","手势","识别","高效","检测"],"title":"算法与应用库","title_tokens":["应用","算法","与","库"]},{"location":"TogetherROS/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_3","text":"这套模型推理和算法库的效果如何呢？ 我们先来体验一个TogetherROS系统自带的案例，识别这张图片中的人，以及每个人的骨骼关键点。 # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。config中为example使用的模型，回灌使用的本地图片 $ cp -r /opt/tros/lib/dnn_node_example/config/ . # 使用本地jpg格式图片通过同步模式进行回环预测，并存储渲染后的图片 $ ros2 launch dnn_node_example hobot_dnn_node_example_feedback.launch.py","text_tokens":["路径","-","通过","自带","模型","出","算法","呢","系统","dnn","回灌","hobot","人","安装","这套","？","拷贝","本地","r","预测","_","jpg","推理","图片","这张","同步","骨骼","$","中","体验","库","后","渲染","配置","config","。","运行","cp","和","togetherros","格式","ros2","tros","使用","的","关键点","source","效果","并","配置文件","setup","node","从","文件","example","如何","launch","来","bash",".","模式","以及","回环","一个","，","关键","py","示例","opt","中为","我们","先","#","进行","需要","lib"," ","feedback","识别","案例","/","环境","存储","每个"],"title":"模型推理测试","title_tokens":["模型","推理","测试"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/","text":"图像物体分类 接下来我们继续学习基于Hobot CNN模型推理库之上的视觉应用。 机器人要感知周边环境，那就得确定看到的图像中都有什么，比如地上有一只猫，旁边有一个桌子之类的，这个猫和桌子就是具体的物体分类啦。 图像分类原理 如果是人来识别一只猫的话，似乎再简单不过了，无论黑猫、白猫还是花猫，我们一眼就可以看出来。 不过这件事对于机器人来讲可没有那么简单，为了能够让机器准确识别一只猫，无数学者可是研究了几十年啊，虽然还赶不上人类的智慧，但是这件事已经没有那么遥不可及了。 比如说我们要让机器识别图像中有一只猫，我们就得先教会机器什么是猫，对此我们就得把各种各样猫的照片给计算机看，目的就是让机器学习，看的越多，识别的也就越准。 我们那里找这么多猫的图片呢？ 大家可能听说过一个著名的视觉对象数据库——ImageNet，里边有超过1400万张标注过的图像，2万多个类别，我们就可以利用这个庞大的数据库，找到很多猫的照片。 然后就搭建神经网络，把这些数据放进去训练了，调教出一套比较好的识别模型。 接下来把这套模型部署到机器人上，之后每当有一幅图像收到之后，就传到这个模型中，也就是模型推理，推理的结果就是类似这样的数据，概率最大的，也就是机器识别到的物体啦。 关于机器学习，理论众多，大家可以学习专门的课程，我们课上还是重点讲解在TogetherROS中的实现方法。 编程开发方法 我们来看这样一张图片，大家很快就可以发现这是一只斑马。 运行示例程序 我们如何用机器来识别它呢，大家先来运行这个案例，这是基于ImageNet数据集训练的模型，可以识别1000种常见的物体，我们看一下效果如何？ $ cd /app/ai_inference/01_basic_sample/ $ sudo python3 ./test_mobilenetv1.py 代码解析 test_mobilenetv1.py： #!/usr/bin/env python3 from hobot_dnn import pyeasy_dnn as dnn import numpy as np import cv2 def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_BGR2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] if __name__ == '__main__' : # test classification result models = dnn . load ( '../models/mobilenetv1_224x224_nv12.bin' ) # test input and output properties print ( \"=\" * 10 , \"inputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) print ( \"inputs[0] name is:\" , models [ 0 ] . inputs [ 0 ] . name ) print ( \"=\" * 10 , \"outputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . outputs [ 0 ] . properties ) print ( \"outputs[0] name is:\" , models [ 0 ] . outputs [ 0 ] . name ) # 打开图片 img_file = cv2 . imread ( './zebra_cls.jpg' ) # 把图片缩放到模型的输入尺寸 # 获取算法模型的输入tensor 的尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) des_dim = ( w , h ) resized_data = cv2 . resize ( img_file , des_dim , interpolation = cv2 . INTER_AREA ) nv12_data = bgr2nv12_opencv ( resized_data ) # 模型推理 outputs = models [ 0 ] . forward ( nv12_data ) print ( \"=\" * 10 , \"Get output[0] numpy data\" , \"=\" * 10 ) print ( \"output[0] buffer numpy info: \" ) print ( \"shape: \" , outputs [ 0 ] . buffer . shape ) print ( \"dtype: \" , outputs [ 0 ] . buffer . dtype ) # print(\"First 10 results:\", outputs[0].buffer[0][:10]) # 从输出结果中得到值最大的那个序号，比如 zebra 就是第 340 个值，应该大于 0.99 print ( \"=\" * 10 , \"Classification result\" , \"=\" * 10 ) assert np . argmax ( outputs [ 0 ] . buffer ) == 340 # 输出类别序号和预测概率值 print ( \"cls id: %d Confidence: %f \" % ( np . argmax ( outputs [ 0 ] . buffer ), outputs [ 0 ] . buffer [ 0 ][ np . argmax ( outputs [ 0 ] . buffer )])) Mobilenetv2物体分类 用图片进行识别不太过瘾，毕竟是静态的图像，没问题，TogetherROS中还提供了实时物体分类的案例，我们继续来体验一下。 为了实时显示视觉识别的效果，这里我们需要启动TogetherROS中的一个web服务器，它会把视觉识别的实时效果，通过网络传输出来，我们直接在浏览器中就可以看到结果啦。也是便于我们开发调试的一个重要工具。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . 运行例程： $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/mobilenetv2workconfig.json image_width: = 480 image_height: = 272 在浏览器中登录192.168.1.10，就可以看到分类效果啦：","text_tokens":["cd","340","1400","一眼","课上","呢","机器人","也","—","basic","数据","万张","if","物体","网络","越准","这套","讲解","打开","w","input","_","到","jpg","赶不上","值","照片","重点","resized","著名","黑猫","这是","(","imagenet","webservice","对此","get","毕竟","重要","不过","mobilenetv2","集","name","学习","main","inter","and","share","0","专门","1","白猫","mobilenetv1","planar","实现","收到","程序","272",":","神经网络","的话","能够","source","就是","'","sudo","..","first","尺寸","从","应该","example","目的","据库",")","id","看",".",",","多猫","得到","机器","之上","数据库","一个","好","旁边","width","192.168","一只","cv2","type","算机","uv","它会","找到","需要","找","案例","dtype","简单","教会","智慧","提供","2","标注","计算机","=","]","hw","inputs","packed","+","224x224","输出","有","再","花猫","？","cls","用","r","预测","def","过瘾","图片","看到","每当","json","什么","如果","imread","usr","似乎","来看","中","models","几十","dim","接下","大于","地上","了","视觉","就可以看","benchmark","部署","&&","运行","area","print","人来","interpolation","bgr2nv12","它","1000","服务器","一套","无论","yuv420p","results","训练","height","服务","很多","要","output","图像","的","from","runtime","buffer","4","confidence","没有","这样","周边环境","神经","x","3","bash","env","具体","那里","tensor","test","p","原理","sbin","显示","py","示例","bgr2yuv","opt","我们","接下来","shape","np","#","概率","bin","遥不可及"," ","环境","编程","个值","浏览器","十年","-","就","准确","模型","听说","把","d","课程","感知","一张","cvtcolor","算法","des","分类","dnn","传输","大家","hobot","已经","类别","mobilenetv2workconfig","比如","这么","nv12","开发","务器","*","!","assert","确定","问题","继续","超过","opencv","实时","桌子","y","多","各种","sample","web","__","缩","一幅","zebra","过","让","480","对象","里边","输入","类似","啊","、","。","cnn","\"","和","is","app","应用","发现","之类","argmax","这里","工具","ros2","是","webserver","f","pro","nginx","猫","效果","都","最大","开发方法","setup","关于","出来","庞大","传到","第","如何","color","得","各样","进去","这件","搭建","numpy","，","万多个","啦","浏览","虽然","nchw","还","上","先","但是","进行","lib","reshape","斑马","那么","调试","/","inference","下来","可以","中有","通过","出","种","比如说","研究","load","计算","result","可能","这个","websocket","01","放到","代码","推理","给","在","方法","i420","调教","img","return","h","还是","import","$","利用","体验","比较","库","登录","之后","这些","：","便于","可","properties","layout","多个","不太","序号","可是","然后","[","一下","config","cp","静态","togetherros","结果","例程","data","来讲","常见","0.99","越","tros","ai","classification","学者","transpose","基于","chmod","like","python3","image","对于","各种各样","周边","node","1.10","else","zeros","那个","forward","as","几十年","launch","来","file","启动","直接","10","outputs","理论","放进去","info","众多","放进","那","很快","神经网","解析","为了","事","resize","获取","%","没","人类","识别","万多","无数","不可","pyeasy"],"title":"图像物体分类","title_tokens":["图像","分类","物体"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_1","text":"接下来我们继续学习基于Hobot CNN模型推理库之上的视觉应用。 机器人要感知周边环境，那就得确定看到的图像中都有什么，比如地上有一只猫，旁边有一个桌子之类的，这个猫和桌子就是具体的物体分类啦。","text_tokens":["应用","就","桌子","之类","机器","之上","模型","中","，","一个","那","感知","机器人","旁边","库","一只","要","分类","啦","我们","接下来","基于","hobot","接下","图像","的","猫","比如","就是","有","都","地上","物体","周边","学习","视觉","周边环境"," ","这个","确定","继续","。","推理","环境","看到","下来","得","cnn","和","什么","具体"],"title":"图像物体分类","title_tokens":["图像","分类","物体"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_2","text":"如果是人来识别一只猫的话，似乎再简单不过了，无论黑猫、白猫还是花猫，我们一眼就可以看出来。 不过这件事对于机器人来讲可没有那么简单，为了能够让机器准确识别一只猫，无数学者可是研究了几十年啊，虽然还赶不上人类的智慧，但是这件事已经没有那么遥不可及了。 比如说我们要让机器识别图像中有一只猫，我们就得先教会机器什么是猫，对此我们就得把各种各样猫的照片给计算机看，目的就是让机器学习，看的越多，识别的也就越准。 我们那里找这么多猫的图片呢？ 大家可能听说过一个著名的视觉对象数据库——ImageNet，里边有超过1400万张标注过的图像，2万多个类别，我们就可以利用这个庞大的数据库，找到很多猫的照片。 然后就搭建神经网络，把这些数据放进去训练了，调教出一套比较好的识别模型。 接下来把这套模型部署到机器人上，之后每当有一幅图像收到之后，就传到这个模型中，也就是模型推理，推理的结果就是类似这样的数据，概率最大的，也就是机器识别到的物体啦。 关于机器学习，理论众多，大家可以学习专门的课程，我们课上还是重点讲解在TogetherROS中的实现方法。","text_tokens":["可以","十年","2","中有","就","准确","标注","计算机","出","模型","1400","听说","把","一眼","课程","课上","比如说","研究","机器人","也","呢","—","大家","已经","类别","比如","这么","有","数据","计算","万张","可能","物体","网络","再","越准","这套","花猫","？","这个","讲解","到","赶不上","推理","超过","图片","每当","给","照片","在","方法","什么","重点","著名","黑猫","调教","多","如果","各种","还是","似乎","imagenet","中","利用","一幅","对此","比较","过","让","几十","对象","之后","接下","这些","可","不过","多个","了","里边","学习","可是","视觉","就可以看","然后","类似","部署","啊","、","。","专门","togetherros","白猫","人来","结果","实现","收到","来讲","一套","无论","越","训练","神经网络","的话","是","很多","要","学者","能够","图像","的","猫","就是","最大","对于","各种各样","关于","没有","这样","神经","出来","庞大","目的","据库","传到","几十年","得","那里","各样","看","进去","理论","多猫","机器","放进去","这件","搭建","数据库","众多","，","一个","万多个","放进","好","神经网","一只","啦","为了","我们","虽然","接下来","还","事","上","算机","先","但是","找到","概率","遥不可及"," ","人类","识别","找","万多","那么","无数","不可","简单","教会","下来","智慧"],"title":"图像分类原理","title_tokens":["图像","分类","原理"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_3","text":"我们来看这样一张图片，大家很快就可以发现这是一只斑马。","text_tokens":["可以","一张","斑马","这是","发现","就","一只","。","图片","来看","我们","大家","这样","，","很快"],"title":"编程开发方法","title_tokens":["方法","编程","开发方法","开发"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_4","text":"我们如何用机器来识别它呢，大家先来运行这个案例，这是基于ImageNet数据集训练的模型，可以识别1000种常见的物体，我们看一下效果如何？ $ cd /app/ai_inference/01_basic_sample/ $ sudo python3 ./test_mobilenetv1.py","text_tokens":["可以","看","mobilenetv1","cd","这是","app","sample",".","test","机器","它","1000","imagenet","模型","$","种","，","常见","训练","ai","呢","py","basic","我们","大家","基于","的","效果","数据","python3","sudo","先","集","物体","这个","？"," ","识别","用","案例","一下","_","01","运行","/","inference","如何","来"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_5","text":"test_mobilenetv1.py： #!/usr/bin/env python3 from hobot_dnn import pyeasy_dnn as dnn import numpy as np import cv2 def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_BGR2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] if __name__ == '__main__' : # test classification result models = dnn . load ( '../models/mobilenetv1_224x224_nv12.bin' ) # test input and output properties print ( \"=\" * 10 , \"inputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) print ( \"inputs[0] name is:\" , models [ 0 ] . inputs [ 0 ] . name ) print ( \"=\" * 10 , \"outputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . outputs [ 0 ] . properties ) print ( \"outputs[0] name is:\" , models [ 0 ] . outputs [ 0 ] . name ) # 打开图片 img_file = cv2 . imread ( './zebra_cls.jpg' ) # 把图片缩放到模型的输入尺寸 # 获取算法模型的输入tensor 的尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) des_dim = ( w , h ) resized_data = cv2 . resize ( img_file , des_dim , interpolation = cv2 . INTER_AREA ) nv12_data = bgr2nv12_opencv ( resized_data ) # 模型推理 outputs = models [ 0 ] . forward ( nv12_data ) print ( \"=\" * 10 , \"Get output[0] numpy data\" , \"=\" * 10 ) print ( \"output[0] buffer numpy info: \" ) print ( \"shape: \" , outputs [ 0 ] . buffer . shape ) print ( \"dtype: \" , outputs [ 0 ] . buffer . dtype ) # print(\"First 10 results:\", outputs[0].buffer[0][:10]) # 从输出结果中得到值最大的那个序号，比如 zebra 就是第 340 个值，应该大于 0.99 print ( \"=\" * 10 , \"Classification result\" , \"=\" * 10 ) assert np . argmax ( outputs [ 0 ] . buffer ) == 340 # 输出类别序号和预测概率值 print ( \"cls id: %d Confidence: %f \" % ( np . argmax ( outputs [ 0 ] . buffer ), outputs [ 0 ] . buffer [ 0 ][ np . argmax ( outputs [ 0 ] . buffer )]))","text_tokens":["2","340","=","模型","]","hw","inputs","把","d","cvtcolor","des","算法","packed","dnn","hobot","224x224","类别","比如","load","输出","nv12","result","if","*","!","打开","w","input","cls","assert","预测","_","def","放到","jpg","推理","图片","值","opencv","i420","y","resized","img","return","h","imread","usr","(","import","中","__","缩","models","get","zebra","dim","：","大于","properties","layout","序号","name","main","输入","[","inter","and","area","print","\"","和","0","1","mobilenetv1","planar","interpolation","bgr2nv12","is","结果","data","argmax",":","yuv420p","results","0.99","height","classification","output","transpose","f","pro","like","from","的","就是","buffer","最大","'","python3","4","..","confidence","image","first","尺寸","从","应该","3",")","else","zeros","那个","第","forward","as","color","id","file","env","10","tensor","outputs","test",".",",","得到","info","numpy","，","py","width","bgr2yuv","cv2","nchw","shape","type","np","uv","resize","#","获取","%","概率","bin"," ","reshape","/","pyeasy","dtype","个值"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#mobilenetv2","text":"用图片进行识别不太过瘾，毕竟是静态的图像，没问题，TogetherROS中还提供了实时物体分类的案例，我们继续来体验一下。 为了实时显示视觉识别的效果，这里我们需要启动TogetherROS中的一个web服务器，它会把视觉识别的实时效果，通过网络传输出来，我们直接在浏览器中就可以看到结果啦。也是便于我们开发调试的一个重要工具。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . 运行例程： $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/mobilenetv2workconfig.json image_width: = 480 image_height: = 272 在浏览器中登录192.168.1.10，就可以看到分类效果啦：","text_tokens":["提供","可以","通过","cd","-","就","=","把","也","分类","dnn","传输","hobot","+","mobilenetv2workconfig","开发","务器","物体","网络","用","r","问题","_","websocket","继续","过瘾","图片","看到","在","json","实时","web","$","中","体验","webservice","毕竟","登录","480","重要","：","便于","不太","了","视觉","benchmark","一下","config","&&","。","运行","share","cp","静态","togetherros","结果","例程","这里","服务器","工具","272",":","ros2","tros","height","服务","是","webserver","chmod","图像","的","nginx","source","效果","runtime","image","setup","node","example","出来","x","1.10","launch","来","bash","启动","file","直接",".","p","，","一个","sbin","显示","py","width","192.168","啦","浏览","opt","为了","我们","还","#","它会","进行","需要","lib","没"," ","识别","案例","调试","/","浏览器"],"title":"Mobilenetv2物体分类","title_tokens":["mobilenetv2","分类","物体"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/","text":"动态目标检测 图像物体分类重在分析图像中存在的物体是什么，便于机器理解看到的环境信息，另外一种场景，机器不仅要识别某一物体，还要知道这个物体所在的位置，当物体在运动时，更要快速连续的跟踪，这就是目标检测，重在分析识别到物体在图像中的位置。 目标检测原理 假设我们要识别图像中这只狗的位置，以最为常用的YOLO算法为例，它会运用单个卷积神经网络(CNN) ，将图像分成网格，并预测每个网格的对象概率和边界框。 比如，对于这个图像，Yolo的CNN网络将输入的图片分割成7x7的网格，然后每个网格负责去检测那些中心点落在该格子内的目标，比如，小狗这个目标的中心点在左下角的网格中，那该网格就负责预测狗这个对象。 每个网格中将有多个边界框，在训练时，我们希望每个对象只有一个边界框，比如最终只有一个边界框把这只狗包起来。因此，我们根据哪个边界框与之前标注的重叠度最高，预测对象的位置和概率。 最终包围对象的边界框，就是识别的结果，使用四个描述符进行说明： 边界框的中心位置 边界框的高度 边界框的宽度 识别到对象所属的类 这样就完成了对目标的实时检测，拿到目标的信息之后，就可以进行后续的机器人行为控制了。 我们对目标检测系统运行速度的要求一般都比较高，可以实时处理视频流，比如车辆行驶的动态监测、自然环境中的目标识别，有着非常广泛的应用价值。 回到TogetherROS和旭日X3派的开发板，我们来看下这套软硬件结合的目标检测系统，效率如何。 MIPI相机目标检测 接下来，我们要利用MIPI相机，动态识别图像中各种各样的物体以及他们所在的位置，推理过程使用的是基于COCO数据集训练的80个类别，也就是可以识别80种常用的物体位置。 运行例程 $ cd /app/ai_inference/03_mipi_camera_sample/ $ python3 ./mipi_camera.py 代码解析 mipi_camera.py： #!/usr/bin/env python3 import numpy as np import cv2 import colorsys # Camera API libs from hobot_vio import libsrcampy as srcampy from hobot_dnn import pyeasy_dnn as dnn # detection model class names def get_classes (): return np . array ([ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" , \"bus\" , \"train\" , \"truck\" , \"boat\" , \"traffic light\" , \"fire hydrant\" , \"stop sign\" , \"parking meter\" , \"bench\" , \"bird\" , \"cat\" , \"dog\" , \"horse\" , \"sheep\" , \"cow\" , \"elephant\" , \"bear\" , \"zebra\" , \"giraffe\" , \"backpack\" , \"umbrella\" , \"handbag\" , \"tie\" , \"suitcase\" , \"frisbee\" , \"skis\" , \"snowboard\" , \"sports ball\" , \"kite\" , \"baseball bat\" , \"baseball glove\" , \"skateboard\" , \"surfboard\" , \"tennis racket\" , \"bottle\" , \"wine glass\" , \"cup\" , \"fork\" , \"knife\" , \"spoon\" , \"bowl\" , \"banana\" , \"apple\" , \"sandwich\" , \"orange\" , \"broccoli\" , \"carrot\" , \"hot dog\" , \"pizza\" , \"donut\" , \"cake\" , \"chair\" , \"couch\" , \"potted plant\" , \"bed\" , \"dining table\" , \"toilet\" , \"tv\" , \"laptop\" , \"mouse\" , \"remote\" , \"keyboard\" , \"cell phone\" , \"microwave\" , \"oven\" , \"toaster\" , \"sink\" , \"refrigerator\" , \"book\" , \"clock\" , \"vase\" , \"scissors\" , \"teddy bear\" , \"hair drier\" , \"toothbrush\" ]) def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_RGB2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] def postprocess ( model_output , model_hw_shape , origin_image = None , origin_img_shape = None , score_threshold = 0.5 , nms_threshold = 0.6 , dump_image = False ): input_height = model_hw_shape [ 0 ] input_width = model_hw_shape [ 1 ] if origin_image is not None : origin_image_shape = origin_image . shape [ 0 : 2 ] else : origin_image_shape = origin_img_shape prediction_bbox = decode ( outputs = model_output , score_threshold = score_threshold , origin_shape = origin_image_shape , input_size = 512 ) prediction_bbox = nms ( prediction_bbox , iou_threshold = nms_threshold ) prediction_bbox = np . array ( prediction_bbox ) topk = min ( prediction_bbox . shape [ 0 ], 1000 ) if topk != 0 : idx = np . argpartition ( prediction_bbox [ ... , 4 ], - topk )[ - topk :] prediction_bbox = prediction_bbox [ idx ] if dump_image and origin_image is not None : draw_bboxs ( origin_image , prediction_bbox ) return prediction_bbox def draw_bboxs ( image , bboxes , gt_classes_index = None , classes = get_classes ()): \"\"\"draw the bboxes in the original image \"\"\" num_classes = len ( classes ) image_h , image_w , channel = image . shape hsv_tuples = [( 1.0 * x / num_classes , 1. , 1. ) for x in range ( num_classes )] colors = list ( map ( lambda x : colorsys . hsv_to_rgb ( * x ), hsv_tuples )) colors = list ( map ( lambda x : ( int ( x [ 0 ] * 255 ), int ( x [ 1 ] * 255 ), int ( x [ 2 ] * 255 )), colors )) fontScale = 0.5 bbox_thick = int ( 0.6 * ( image_h + image_w ) / 600 ) for i , bbox in enumerate ( bboxes ): coor = np . array ( bbox [: 4 ], dtype = np . int32 ) if gt_classes_index == None : class_index = int ( bbox [ 5 ]) score = bbox [ 4 ] else : class_index = gt_classes_index [ i ] score = 1 bbox_color = colors [ class_index ] c1 , c2 = ( coor [ 0 ], coor [ 1 ]), ( coor [ 2 ], coor [ 3 ]) cv2 . rectangle ( image , c1 , c2 , bbox_color , bbox_thick ) classes_name = classes [ class_index ] bbox_mess = ' %s : %.2f ' % ( classes_name , score ) t_size = cv2 . getTextSize ( bbox_mess , 0 , fontScale , thickness = bbox_thick // 2 )[ 0 ] cv2 . rectangle ( image , c1 , ( c1 [ 0 ] + t_size [ 0 ], c1 [ 1 ] - t_size [ 1 ] - 3 ), bbox_color , - 1 ) cv2 . putText ( image , bbox_mess , ( c1 [ 0 ], c1 [ 1 ] - 2 ), cv2 . FONT_HERSHEY_SIMPLEX , fontScale , ( 0 , 0 , 0 ), bbox_thick // 2 , lineType = cv2 . LINE_AA ) print ( \" {} is in the picture with confidence: {:.4f} , bbox: {} \" . format ( classes_name , score , coor )) # cv2.imwrite(\"demo.jpg\", image) return image def decode ( outputs , score_threshold , origin_shape , input_size = 512 ): def _distance2bbox ( points , distance ): x1 = points [ ... , 0 ] - distance [ ... , 0 ] y1 = points [ ... , 1 ] - distance [ ... , 1 ] x2 = points [ ... , 0 ] + distance [ ... , 2 ] y2 = points [ ... , 1 ] + distance [ ... , 3 ] return np . stack ([ x1 , y1 , x2 , y2 ], - 1 ) def _scores ( cls , ce ): cls = 1 / ( 1 + np . exp ( - cls )) ce = 1 / ( 1 + np . exp ( - ce )) return np . sqrt ( ce * cls ) def _bbox ( bbox , stride , origin_shape , input_size ): h , w = bbox . shape [ 1 : 3 ] yv , xv = np . meshgrid ( np . arange ( h ), np . arange ( w )) xy = ( np . stack (( yv , xv ), 2 ) + 0.5 ) * stride bbox = _distance2bbox ( xy , bbox ) # opencv read, shape[1] is w, shape[0] is h scale_w = origin_shape [ 1 ] / input_size scale_h = origin_shape [ 0 ] / input_size scale = max ( origin_shape [ 0 ], origin_shape [ 1 ]) / input_size # origin img is pad resized #bbox = bbox * scale # origin img is resized bbox = bbox * [ scale_w , scale_h , scale_w , scale_h ] return bbox bboxes = list () strides = [ 8 , 16 , 32 , 64 , 128 ] for i in range ( len ( strides )): cls = outputs [ i ] . buffer bbox = outputs [ i + 5 ] . buffer ce = outputs [ i + 10 ] . buffer scores = _scores ( cls , ce ) classes = np . argmax ( scores , axis =- 1 ) classes = np . reshape ( classes , [ - 1 , 1 ]) max_score = np . max ( scores , axis =- 1 ) max_score = np . reshape ( max_score , [ - 1 , 1 ]) bbox = _bbox ( bbox , strides [ i ], origin_shape , input_size ) bbox = np . reshape ( bbox , [ - 1 , 4 ]) pred_bbox = np . concatenate ([ bbox , max_score , classes ], axis = 1 ) index = pred_bbox [ ... , 4 ] > score_threshold pred_bbox = pred_bbox [ index ] bboxes . append ( pred_bbox ) return np . concatenate ( bboxes ) def nms ( bboxes , iou_threshold , sigma = 0.3 , method = 'nms' ): def bboxes_iou ( boxes1 , boxes2 ): boxes1 = np . array ( boxes1 ) boxes2 = np . array ( boxes2 ) boxes1_area = ( boxes1 [ ... , 2 ] - boxes1 [ ... , 0 ]) * \\ ( boxes1 [ ... , 3 ] - boxes1 [ ... , 1 ]) boxes2_area = ( boxes2 [ ... , 2 ] - boxes2 [ ... , 0 ]) * \\ ( boxes2 [ ... , 3 ] - boxes2 [ ... , 1 ]) left_up = np . maximum ( boxes1 [ ... , : 2 ], boxes2 [ ... , : 2 ]) right_down = np . minimum ( boxes1 [ ... , 2 :], boxes2 [ ... , 2 :]) inter_section = np . maximum ( right_down - left_up , 0.0 ) inter_area = inter_section [ ... , 0 ] * inter_section [ ... , 1 ] union_area = boxes1_area + boxes2_area - inter_area ious = np . maximum ( 1.0 * inter_area / union_area , np . finfo ( np . float32 ) . eps ) return ious classes_in_img = list ( set ( bboxes [:, 5 ])) best_bboxes = [] for cls in classes_in_img : cls_mask = ( bboxes [:, 5 ] == cls ) cls_bboxes = bboxes [ cls_mask ] while len ( cls_bboxes ) > 0 : max_ind = np . argmax ( cls_bboxes [:, 4 ]) best_bbox = cls_bboxes [ max_ind ] best_bboxes . append ( best_bbox ) cls_bboxes = np . concatenate ( [ cls_bboxes [: max_ind ], cls_bboxes [ max_ind + 1 :]]) iou = bboxes_iou ( best_bbox [ np . newaxis , : 4 ], cls_bboxes [:, : 4 ]) weight = np . ones (( len ( iou ),), dtype = np . float32 ) assert method in [ 'nms' , 'soft-nms' ] if method == 'nms' : iou_mask = iou > iou_threshold weight [ iou_mask ] = 0.0 if method == 'soft-nms' : weight = np . exp ( - ( 1.0 * iou ** 2 / sigma )) cls_bboxes [:, 4 ] = cls_bboxes [:, 4 ] * weight score_mask = cls_bboxes [:, 4 ] > 0. cls_bboxes = cls_bboxes [ score_mask ] return best_bboxes def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) if __name__ == '__main__' : models = dnn . load ( '../models/fcos_512x512_nv12.bin' ) # 打印输入 tensor 的属性 print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) # 打印输出 tensor 的属性 print ( len ( models [ 0 ] . outputs )) for output in models [ 0 ] . outputs : print_properties ( output . properties ) # 获取 Camera 句柄 cam = srcampy . Camera () # 打开 f37 摄像头，并且把输出突出缩小成算法模型的输入尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) # 打开 F37, 初始化视频 pipeline 0 ，设置帧率30fps，缩放图像为 512 x 512 cam . open_cam ( 0 , 1 , 30 , w , h ) # Get HDMI display object disp = srcampy . Display () # For the meaning of parameters, please refer to the relevant documents of HDMI display disp . display ( 0 , 1920 , 1080 ) input_shape = ( h , w ) while True : # 从相机获取分辨率为 512x512 的nv12格式的图像数据， 参数 2 代表从硬件模块IPU中获取 img = cam . get_img ( 2 , 512 , 512 ) # 把图像数据转成 numpy 数据类型 img = np . frombuffer ( img , dtype = np . uint8 ) # 模型推理 outputs = models [ 0 ] . forward ( img ) # 对算法结果进行过滤，去掉执行度低的检测框，计算检测框的交并比去除冗余框，把检测框的坐标还原到原图位置上 prediction_bbox = postprocess ( outputs , input_shape , origin_img_shape = ( 1080 , 1920 )) # 从新获取一张图像，大小缩放成与显示器的分辨率一样的 1920 x 1080, 并且转换成 bgr格式，方便进行绘图操作 origin_image = cam . get_img ( 2 , 1920 , 1080 ) origin_nv12 = np . frombuffer ( origin_image , dtype = np . uint8 ) . reshape ( 1620 , 1920 ) origin_bgr = cv2 . cvtColor ( origin_nv12 , cv2 . COLOR_YUV420SP2BGR ) # 把算法运行后得到的物体检测框绘制到图像上 box_bgr = draw_bboxs ( origin_bgr , prediction_bbox ) # X3 的HDMI输出模块的输入图像格式需要是NV12的，所以需要先把bgr格式转成NV12 box_nv12 = bgr2nv12_opencv ( box_bgr ) # 把 NV12 格式的图像输出给显示器 disp . set_img ( box_nv12 . tobytes ()) cam . close_cam () USB相机目标检测 如果大家手上没有MIPI接口的相机，使用USB相机也可以实现同样的功能。 运行例程 $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 动态目标检测 大家如果没有HDMI显示器的话，也没有问题，刚才的例程，也可以这样来运行，我们通过统一网络环境中的浏览器就可以动态看到结果啦。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/fcosworkconfig.json image_width: = 480 image_height: = 272","text_tokens":["hydrant","数据类型","documents","cd","arange","soft","xv","strides","另外","框","80","机器人","个","也","frombuffer","gettextsize","fire","数据","apple","mask","目标","if","物体","iou","0.3","网络","num","{","4f","这套","not","打开","w","连续","input","像头","_","book","chair","到","jpg","scores","tie","落","功能","motorcycle","microwave","运用","分割","resized","派","yv","分析","(","t","他们","有着","价值","ipu","低","sink","distance","webservice","get","起来",">","detection","vase","更要","cup","yolo","xy","for","存在","集","thick","name","the","pred","main","range","inter","and","那该","share","0","1","车辆","硬件","planar","model","coor","boxes1","不仅","实现","新","方便","272","属性","f37",":","还原","handbag","backpack","神经网络","的话","开发板","为","rgb","tuples","to","source","就是","'","..","去除","sqrt","尺寸","open","从","teddy","clock","example",")","x1","class","bboxes","ce","person","监测","分成",".","vio",",","类型","1620","机器","得到","刚才","一个","eps","坐标","car","imwrite","拿到","width","srcampy","cv2","suitcase","spoon","小成","ones","效率","array","type","uv","colors","usb","它会","bear","cell","执行","snowboard","完成","glass","需要","一般","摄像头","umbrella","原图","potted","下","dtype","c1","检测","接口","}","2","标注","max","16","close","=","]","hw","inputs","sandwich","当","relevant","所在","boat","packed","enumerate","set","channel","api","thickness","of","128","摄像","+","负责","输出","有","初始","过程","tennis","idx","refer","cls","处理","r","预测","def","laptop","图片","看到","希望","bench","rectangle","mess","camera","json","什么","decode","交","后续","disp","如果","usr","fcos","来看","points","中","图像格式","四个","sign","models","包围","600","高","接下","i","快速","ind","了","toothbrush","plant","30","输出模块","down","benchmark","mouse","&&","origin","运行","parking","area","ious","print","rgb2yuv","axis","oven","drier","bgr2nv12","please","1000","操作","yuv420p","绘制","手上","这","训练","height","服务","理解","map","要","output","cam","giraffe","64","结合","图像","的","from","并","knife","buffer","runtime","4","confidence","bat","demo","重叠","这样","神经","没有","bicycle","缩放","x","libsrcampy","为例","3","sigma","bgr","高度","一种","去掉","bash","env","keyboard","tensor","描述符","broccoli","以及","原理","p","dog","sbin","最高","显示","1080","py","句柄","opt","7x7","我们","接下来","bboxs","hot","table","shape","stack","np","#","概率","int32","缩小成","hdmi","bin"," ","refrigerator","libs","meter","左下","设置","coco","concatenate","环境","lambda","format","cow","pad","同样","浏览器","最为","hershey","-","bed","就","0.6","模型","时","phone","把","1.0","horse","cvtcolor","一张","算法","系统","02","original","分类","描述","dnn","toilet","y2","c2","大家","hobot","说明","类别","比如","union","内","nv12","mipi","分辨率","开发","airplane","float32","将","*","!","512","weight","assert","某一","问题","font","read","分辨","glove","opencv","实时","y","true","因此","各种","sample","中心点","绘图","elephant","exp","__","常用","newaxis","x3","zebra","控制","480","辨率","对象","该","banana","traffic","转换成","最终","bowl","colorsys","以","orange","输入","hsv","0.0","、","。","旭日","30fps","cnn","\"","和","视频","box","冗余","5","换成","cake","is","app","应用","object","还要","argmax","pipeline","parameters","cat","自然","一样","ros2","转成","bbox","是","webserver","假设","边界","代表","pro","nginx","非常","dining","都","couch","中将","突出","8","setup","with","finfo","display","视频流","行为","toaster","如何","color","x2","tobytes","相机","classes","宽度","各样","缩小","运动","度","numpy","len","，","left","场景","速度","啦","浏览","ball","512x512","nchw","广泛","中心","frisbee","动态","right","上","只有","先","根据","进行","argpartition","maximum","lib","网格","reshape","狗","/","所属","inference","下来","所以","之前","postprocess","names","bird","下角","可以","sports","通过","up","卷积","初始化","种","none","1920","信息","prediction","wine","load","topk","计算","surfboard","index","stop","那些","append","hair","这个","\\","websocket","255","代码","threshold","pizza","推理","...","包","给","在","%.","i420","remote","img","return","h","import","重在","$","carrot","利用","size","truck","显示器","fcosworkconfig","skis","比较","draw","小狗","section","跟踪","之后","linetype","转换","fontscale","打印","：","便于","模块","train","后","int","layout","properties","多个","scissors","sheep","然后","[","知道","软硬","软硬件","skateboard","config","meaning","stride","大小","32","cp","打印输出","03","togetherros","统一","结果","boxes2","过滤","yuv420sp2bgr","例程","line","data","best","格式","帧","distance2bbox","格子","要求","单个","ai","light","tros","transpose","0.5","使用","基于","chmod","like","score","gt","位置","python3","bottle","参数","image","对于","各种各样","率","node","nms","哪个","行驶","y1","else","zeros","while","forward","as","launch","去","meshgrid","来","method","donut","启动","file","10","outputs","与","对","kite","puttext","比","min","类","scale","list","fork","神经网","racket","解析","uint8","minimum","simplex","false","成","s","实时处理","in","只","左下角","tv","获取","并且","%","自然环境","baseball","aa","识别","bus","dump","转","pyeasy","回到","picture","2f","每个"],"title":"动态目标检测","title_tokens":["检测","动态","目标"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_1","text":"图像物体分类重在分析图像中存在的物体是什么，便于机器理解看到的环境信息，另外一种场景，机器不仅要识别某一物体，还要知道这个物体所在的位置，当物体在运动时，更要快速连续的跟踪，这就是目标检测，重在分析识别到物体在图像中的位置。","text_tokens":["分析","不仅","还要","机器","运动","重在","中","时","，","当","另外","这","场景","所在","是","理解","分类","要","信息","更要","跟踪","图像","的","便于","快速","就是","位置","目标","存在","物体","这个","识别","连续","某一","知道","到","。","环境","看到","检测","一种","在","什么"],"title":"动态目标检测","title_tokens":["检测","动态","目标"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_2","text":"假设我们要识别图像中这只狗的位置，以最为常用的YOLO算法为例，它会运用单个卷积神经网络(CNN) ，将图像分成网格，并预测每个网格的对象概率和边界框。 比如，对于这个图像，Yolo的CNN网络将输入的图片分割成7x7的网格，然后每个网格负责去检测那些中心点落在该格子内的目标，比如，小狗这个目标的中心点在左下角的网格中，那该网格就负责预测狗这个对象。 每个网格中将有多个边界框，在训练时，我们希望每个对象只有一个边界框，比如最终只有一个边界框把这只狗包起来。因此，我们根据哪个边界框与之前标注的重叠度最高，预测对象的位置和概率。 最终包围对象的边界框，就是识别的结果，使用四个描述符进行说明： 边界框的中心位置 边界框的高度 边界框的宽度 识别到对象所属的类 这样就完成了对目标的实时检测，拿到目标的信息之后，就可以进行后续的机器人行为控制了。 我们对目标检测系统运行速度的要求一般都比较高，可以实时处理视频流，比如车辆行驶的动态监测、自然环境中的目标识别，有着非常广泛的应用价值。 回到TogetherROS和旭日X3派的开发板，我们来看下这套软硬件结合的目标检测系统，效率如何。","text_tokens":["可以","就","标注","卷积","时","把","框","算法","系统","机器人","描述","信息","说明","负责","比如","内","有","目标","开发","将","网络","那些","这套","这个","处理","预测","到","图片","希望","包","落","在","运用","分割","实时","派","因此","后续","中心点","(","有着","来看","中","价值","常用","四个","x3","起来","比较","小狗","控制","包围","对象","该","之后","yolo","高","：","最终","多个","了","以","输入","然后","软硬","软硬件","、","。","那该","运行","旭日","cnn","和","视频","togetherros","车辆","结果","硬件","应用","自然","格子","要求","这","单个","训练","神经网络","要","假设","开发板","使用","边界","结合","图像","的","就是","并","非常","都","位置","对于","中将","重叠","这样","神经","哪个","行驶","视频流","为例",")","行为","如何","去","高度","监测","分成","宽度","描述符","与","对","机器","度","，","一个","最高","类","神经网","拿到","速度","7x7","我们","成","广泛","中心","实时处理","效率","只","左下角","动态","只有","它会","概率","根据","进行","自然环境","完成"," ","网格","识别","一般","狗","左下","所属","下","环境","回到","检测","之前","最为","每个","下角"],"title":"目标检测原理","title_tokens":["检测","原理","目标"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#mipi","text":"接下来，我们要利用MIPI相机，动态识别图像中各种各样的物体以及他们所在的位置，推理过程使用的是基于COCO数据集训练的80个类别，也就是可以识别80种常用的物体位置。","text_tokens":["各样","可以","各种","他们","以及","中","利用","，","种","常用","80","训练","所在","个","也","是","要","我们","使用","接下来","基于","接下","图像","的","类别","就是","数据","位置","动态","mipi","集","物体","各种各样","过程","识别","coco","。","推理","下来","相机"],"title":"MIPI相机目标检测","title_tokens":["目标","检测","mipi","相机"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_3","text":"$ cd /app/ai_inference/03_mipi_camera_sample/ $ python3 ./mipi_camera.py","text_tokens":["_","ai","mipi","python3","cd","app","sample",".","/","inference","py","$","camera","03"," "],"title":"运行例程","title_tokens":["例程","运行"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_4","text":"mipi_camera.py： #!/usr/bin/env python3 import numpy as np import cv2 import colorsys # Camera API libs from hobot_vio import libsrcampy as srcampy from hobot_dnn import pyeasy_dnn as dnn # detection model class names def get_classes (): return np . array ([ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" , \"bus\" , \"train\" , \"truck\" , \"boat\" , \"traffic light\" , \"fire hydrant\" , \"stop sign\" , \"parking meter\" , \"bench\" , \"bird\" , \"cat\" , \"dog\" , \"horse\" , \"sheep\" , \"cow\" , \"elephant\" , \"bear\" , \"zebra\" , \"giraffe\" , \"backpack\" , \"umbrella\" , \"handbag\" , \"tie\" , \"suitcase\" , \"frisbee\" , \"skis\" , \"snowboard\" , \"sports ball\" , \"kite\" , \"baseball bat\" , \"baseball glove\" , \"skateboard\" , \"surfboard\" , \"tennis racket\" , \"bottle\" , \"wine glass\" , \"cup\" , \"fork\" , \"knife\" , \"spoon\" , \"bowl\" , \"banana\" , \"apple\" , \"sandwich\" , \"orange\" , \"broccoli\" , \"carrot\" , \"hot dog\" , \"pizza\" , \"donut\" , \"cake\" , \"chair\" , \"couch\" , \"potted plant\" , \"bed\" , \"dining table\" , \"toilet\" , \"tv\" , \"laptop\" , \"mouse\" , \"remote\" , \"keyboard\" , \"cell phone\" , \"microwave\" , \"oven\" , \"toaster\" , \"sink\" , \"refrigerator\" , \"book\" , \"clock\" , \"vase\" , \"scissors\" , \"teddy bear\" , \"hair drier\" , \"toothbrush\" ]) def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_RGB2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] def postprocess ( model_output , model_hw_shape , origin_image = None , origin_img_shape = None , score_threshold = 0.5 , nms_threshold = 0.6 , dump_image = False ): input_height = model_hw_shape [ 0 ] input_width = model_hw_shape [ 1 ] if origin_image is not None : origin_image_shape = origin_image . shape [ 0 : 2 ] else : origin_image_shape = origin_img_shape prediction_bbox = decode ( outputs = model_output , score_threshold = score_threshold , origin_shape = origin_image_shape , input_size = 512 ) prediction_bbox = nms ( prediction_bbox , iou_threshold = nms_threshold ) prediction_bbox = np . array ( prediction_bbox ) topk = min ( prediction_bbox . shape [ 0 ], 1000 ) if topk != 0 : idx = np . argpartition ( prediction_bbox [ ... , 4 ], - topk )[ - topk :] prediction_bbox = prediction_bbox [ idx ] if dump_image and origin_image is not None : draw_bboxs ( origin_image , prediction_bbox ) return prediction_bbox def draw_bboxs ( image , bboxes , gt_classes_index = None , classes = get_classes ()): \"\"\"draw the bboxes in the original image \"\"\" num_classes = len ( classes ) image_h , image_w , channel = image . shape hsv_tuples = [( 1.0 * x / num_classes , 1. , 1. ) for x in range ( num_classes )] colors = list ( map ( lambda x : colorsys . hsv_to_rgb ( * x ), hsv_tuples )) colors = list ( map ( lambda x : ( int ( x [ 0 ] * 255 ), int ( x [ 1 ] * 255 ), int ( x [ 2 ] * 255 )), colors )) fontScale = 0.5 bbox_thick = int ( 0.6 * ( image_h + image_w ) / 600 ) for i , bbox in enumerate ( bboxes ): coor = np . array ( bbox [: 4 ], dtype = np . int32 ) if gt_classes_index == None : class_index = int ( bbox [ 5 ]) score = bbox [ 4 ] else : class_index = gt_classes_index [ i ] score = 1 bbox_color = colors [ class_index ] c1 , c2 = ( coor [ 0 ], coor [ 1 ]), ( coor [ 2 ], coor [ 3 ]) cv2 . rectangle ( image , c1 , c2 , bbox_color , bbox_thick ) classes_name = classes [ class_index ] bbox_mess = ' %s : %.2f ' % ( classes_name , score ) t_size = cv2 . getTextSize ( bbox_mess , 0 , fontScale , thickness = bbox_thick // 2 )[ 0 ] cv2 . rectangle ( image , c1 , ( c1 [ 0 ] + t_size [ 0 ], c1 [ 1 ] - t_size [ 1 ] - 3 ), bbox_color , - 1 ) cv2 . putText ( image , bbox_mess , ( c1 [ 0 ], c1 [ 1 ] - 2 ), cv2 . FONT_HERSHEY_SIMPLEX , fontScale , ( 0 , 0 , 0 ), bbox_thick // 2 , lineType = cv2 . LINE_AA ) print ( \" {} is in the picture with confidence: {:.4f} , bbox: {} \" . format ( classes_name , score , coor )) # cv2.imwrite(\"demo.jpg\", image) return image def decode ( outputs , score_threshold , origin_shape , input_size = 512 ): def _distance2bbox ( points , distance ): x1 = points [ ... , 0 ] - distance [ ... , 0 ] y1 = points [ ... , 1 ] - distance [ ... , 1 ] x2 = points [ ... , 0 ] + distance [ ... , 2 ] y2 = points [ ... , 1 ] + distance [ ... , 3 ] return np . stack ([ x1 , y1 , x2 , y2 ], - 1 ) def _scores ( cls , ce ): cls = 1 / ( 1 + np . exp ( - cls )) ce = 1 / ( 1 + np . exp ( - ce )) return np . sqrt ( ce * cls ) def _bbox ( bbox , stride , origin_shape , input_size ): h , w = bbox . shape [ 1 : 3 ] yv , xv = np . meshgrid ( np . arange ( h ), np . arange ( w )) xy = ( np . stack (( yv , xv ), 2 ) + 0.5 ) * stride bbox = _distance2bbox ( xy , bbox ) # opencv read, shape[1] is w, shape[0] is h scale_w = origin_shape [ 1 ] / input_size scale_h = origin_shape [ 0 ] / input_size scale = max ( origin_shape [ 0 ], origin_shape [ 1 ]) / input_size # origin img is pad resized #bbox = bbox * scale # origin img is resized bbox = bbox * [ scale_w , scale_h , scale_w , scale_h ] return bbox bboxes = list () strides = [ 8 , 16 , 32 , 64 , 128 ] for i in range ( len ( strides )): cls = outputs [ i ] . buffer bbox = outputs [ i + 5 ] . buffer ce = outputs [ i + 10 ] . buffer scores = _scores ( cls , ce ) classes = np . argmax ( scores , axis =- 1 ) classes = np . reshape ( classes , [ - 1 , 1 ]) max_score = np . max ( scores , axis =- 1 ) max_score = np . reshape ( max_score , [ - 1 , 1 ]) bbox = _bbox ( bbox , strides [ i ], origin_shape , input_size ) bbox = np . reshape ( bbox , [ - 1 , 4 ]) pred_bbox = np . concatenate ([ bbox , max_score , classes ], axis = 1 ) index = pred_bbox [ ... , 4 ] > score_threshold pred_bbox = pred_bbox [ index ] bboxes . append ( pred_bbox ) return np . concatenate ( bboxes ) def nms ( bboxes , iou_threshold , sigma = 0.3 , method = 'nms' ): def bboxes_iou ( boxes1 , boxes2 ): boxes1 = np . array ( boxes1 ) boxes2 = np . array ( boxes2 ) boxes1_area = ( boxes1 [ ... , 2 ] - boxes1 [ ... , 0 ]) * \\ ( boxes1 [ ... , 3 ] - boxes1 [ ... , 1 ]) boxes2_area = ( boxes2 [ ... , 2 ] - boxes2 [ ... , 0 ]) * \\ ( boxes2 [ ... , 3 ] - boxes2 [ ... , 1 ]) left_up = np . maximum ( boxes1 [ ... , : 2 ], boxes2 [ ... , : 2 ]) right_down = np . minimum ( boxes1 [ ... , 2 :], boxes2 [ ... , 2 :]) inter_section = np . maximum ( right_down - left_up , 0.0 ) inter_area = inter_section [ ... , 0 ] * inter_section [ ... , 1 ] union_area = boxes1_area + boxes2_area - inter_area ious = np . maximum ( 1.0 * inter_area / union_area , np . finfo ( np . float32 ) . eps ) return ious classes_in_img = list ( set ( bboxes [:, 5 ])) best_bboxes = [] for cls in classes_in_img : cls_mask = ( bboxes [:, 5 ] == cls ) cls_bboxes = bboxes [ cls_mask ] while len ( cls_bboxes ) > 0 : max_ind = np . argmax ( cls_bboxes [:, 4 ]) best_bbox = cls_bboxes [ max_ind ] best_bboxes . append ( best_bbox ) cls_bboxes = np . concatenate ( [ cls_bboxes [: max_ind ], cls_bboxes [ max_ind + 1 :]]) iou = bboxes_iou ( best_bbox [ np . newaxis , : 4 ], cls_bboxes [:, : 4 ]) weight = np . ones (( len ( iou ),), dtype = np . float32 ) assert method in [ 'nms' , 'soft-nms' ] if method == 'nms' : iou_mask = iou > iou_threshold weight [ iou_mask ] = 0.0 if method == 'soft-nms' : weight = np . exp ( - ( 1.0 * iou ** 2 / sigma )) cls_bboxes [:, 4 ] = cls_bboxes [:, 4 ] * weight score_mask = cls_bboxes [:, 4 ] > 0. cls_bboxes = cls_bboxes [ score_mask ] return best_bboxes def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) if __name__ == '__main__' : models = dnn . load ( '../models/fcos_512x512_nv12.bin' ) # 打印输入 tensor 的属性 print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) # 打印输出 tensor 的属性 print ( len ( models [ 0 ] . outputs )) for output in models [ 0 ] . outputs : print_properties ( output . properties ) # 获取 Camera 句柄 cam = srcampy . Camera () # 打开 f37 摄像头，并且把输出突出缩小成算法模型的输入尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) # 打开 F37, 初始化视频 pipeline 0 ，设置帧率30fps，缩放图像为 512 x 512 cam . open_cam ( 0 , 1 , 30 , w , h ) # Get HDMI display object disp = srcampy . Display () # For the meaning of parameters, please refer to the relevant documents of HDMI display disp . display ( 0 , 1920 , 1080 ) input_shape = ( h , w ) while True : # 从相机获取分辨率为 512x512 的nv12格式的图像数据， 参数 2 代表从硬件模块IPU中获取 img = cam . get_img ( 2 , 512 , 512 ) # 把图像数据转成 numpy 数据类型 img = np . frombuffer ( img , dtype = np . uint8 ) # 模型推理 outputs = models [ 0 ] . forward ( img ) # 对算法结果进行过滤，去掉执行度低的检测框，计算检测框的交并比去除冗余框，把检测框的坐标还原到原图位置上 prediction_bbox = postprocess ( outputs , input_shape , origin_img_shape = ( 1080 , 1920 )) # 从新获取一张图像，大小缩放成与显示器的分辨率一样的 1920 x 1080, 并且转换成 bgr格式，方便进行绘图操作 origin_image = cam . get_img ( 2 , 1920 , 1080 ) origin_nv12 = np . frombuffer ( origin_image , dtype = np . uint8 ) . reshape ( 1620 , 1920 ) origin_bgr = cv2 . cvtColor ( origin_nv12 , cv2 . COLOR_YUV420SP2BGR ) # 把算法运行后得到的物体检测框绘制到图像上 box_bgr = draw_bboxs ( origin_bgr , prediction_bbox ) # X3 的HDMI输出模块的输入图像格式需要是NV12的，所以需要先把bgr格式转成NV12 box_nv12 = bgr2nv12_opencv ( box_bgr ) # 把 NV12 格式的图像输出给显示器 disp . set_img ( box_nv12 . tobytes ()) cam . close_cam ()","text_tokens":["hydrant","数据类型","documents","arange","soft","xv","strides","框","frombuffer","gettextsize","fire","数据","apple","mask","if","物体","iou","0.3","num","4f","{","not","打开","w","input","像头","_","book","chair","到","jpg","scores","tie","motorcycle","microwave","resized","yv","(","t","ipu","低","sink","distance","get",">","detection","vase","cup","xy","for","thick","name","the","pred","main","range","inter","and","0","1","planar","coor","硬件","model","boxes1","新","方便","属性","f37",":","还原","backpack","handbag","为","rgb","tuples","to","'","..","去除","sqrt","尺寸","open","从","teddy","clock",")","x1","class","bboxes","ce","person",".","vio",",","类型","1620","得到","eps","坐标","car","imwrite","width","srcampy","cv2","suitcase","spoon","小成","ones","array","type","uv","colors","bear","cell","执行","snowboard","glass","需要","摄像头","原图","umbrella","potted","dtype","c1","检测","}","2","max","16","close","=","]","hw","inputs","sandwich","relevant","boat","packed","enumerate","set","channel","api","thickness","of","128","摄像","+","输出","初始","tennis","idx","refer","cls","def","laptop","bench","rectangle","mess","camera","交","decode","disp","usr","fcos","points","中","图像格式","sign","models","600","i","ind","toothbrush","plant","30","输出模块","down","mouse","origin","运行","parking","area","ious","print","rgb2yuv","axis","oven","drier","bgr2nv12","please","1000","操作","yuv420p","绘制","height","map","output","cam","giraffe","64","图像","的","from","并","knife","buffer","4","confidence","bat","demo","bicycle","缩放","x","libsrcampy","3","sigma","bgr","去掉","env","keyboard","tensor","broccoli","dog","显示","1080","py","句柄","bboxs","hot","table","shape","stack","np","#","int32","缩小成","hdmi","bin"," ","refrigerator","libs","meter","设置","concatenate","lambda","format","cow","pad","hershey","-","bed","0.6","模型","phone","把","1.0","horse","cvtcolor","一张","算法","original","dnn","toilet","y2","c2","hobot","union","nv12","mipi","分辨率","airplane","float32","*","!","512","weight","assert","font","read","分辨","glove","opencv","y","true","绘图","elephant","exp","__","newaxis","x3","zebra","辨率","banana","traffic","转换成","bowl","colorsys","orange","0.0","hsv","输入","30fps","\"","box","视频","冗余","5","换成","cake","is","object","argmax","pipeline","parameters","cat","一样","转成","bbox","是","代表","pro","dining","couch","突出","8","with","finfo","display","toaster","color","x2","tobytes","相机","classes","缩小","度","numpy","len","，","left","ball","512x512","nchw","frisbee","right","上","先","argpartition","进行","maximum","reshape","/","所以","postprocess","names","bird","sports","up","初始化","none","1920","prediction","wine","load","topk","计算","surfboard","index","stop","append","hair","\\","255","threshold","pizza","推理","...","给","%.","i420","remote","img","return","h","import","carrot","size","truck","显示器","skis","draw","section","linetype","转换","fontscale","打印","：","模块","后","train","int","layout","properties","scissors","sheep","[","skateboard","meaning","stride","大小","32","打印输出","boxes2","结果","过滤","yuv420sp2bgr","line","data","best","格式","帧","distance2bbox","light","transpose","0.5","like","score","gt","位置","python3","bottle","参数","image","率","nms","y1","else","zeros","while","forward","as","meshgrid","method","donut","10","outputs","对","与","kite","puttext","比","min","scale","list","fork","racket","uint8","minimum","simplex","false","成","s","in","tv","获取","并且","%","baseball","aa","bus","dump","转","pyeasy","picture","2f"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#usb","text":"如果大家手上没有MIPI接口的相机，使用USB相机也可以实现同样的功能。","text_tokens":["可以","mipi","也","如果","usb","。","实现","大家","接口","使用","没有","相机","的","，","手上","同样","功能"],"title":"USB相机目标检测","title_tokens":["目标","检测","相机","usb"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_5","text":"$ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py","text_tokens":["_","ai","02","python3","cd","app","usb","sample","/","inference",".","py","fcos","$","camera"," "],"title":"运行例程","title_tokens":["例程","运行"]},{"location":"TogetherROS/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_6","text":"大家如果没有HDMI显示器的话，也没有问题，刚才的例程，也可以这样来运行，我们通过统一网络环境中的浏览器就可以动态看到结果啦。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/fcosworkconfig.json image_width: = 480 image_height: = 272","text_tokens":["可以","通过","cd","-","就","=","也","dnn","大家","hobot","+","网络","r","问题","_","websocket","看到","json","如果","$","中","显示器","fcosworkconfig","webservice","480","benchmark","config","&&","。","运行","share","cp","统一","结果","例程","272",":","ros2","tros","height","的话","服务","webserver","chmod","nginx","的","source","runtime","image","setup","node","没有","这样","example","x","launch","来","bash","file","启动",".","刚才","p","，","sbin","显示","py","width","啦","浏览","opt","我们","动态","#","lib","hdmi"," ","/","环境","浏览器"],"title":"动态目标检测","title_tokens":["检测","动态","目标"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/","text":"人体检测与跟踪 不知道大家有没有玩过类似XBOX的体感游戏机，上边会有一个相机，动态识别我们的动作，比如跳舞、打球，是不是还挺神奇的，这就是人体检测与跟踪的应用。 TogetherROS中也集成了一套类似的算法，可以识别人体、人头、人脸、人手等一系列关键点，我们来体验一下。 编程开发方法 先来看一个人体识别的基础应用，我们驱动相机后，实时采样视觉信息，然后再通过检测算法，识别每一幅图片中人体位置，并把识别的结果保存成一张图片，便于我们查看。 运行例程 # 下载例程代码（与之前课程下载的代码一致） $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build # 终端1，运行相机 $ source /opt/tros/setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p out_format: = nv12 -p image_width: = 960 -p image_height: = 544 -p video_device: = F37 # 终端2，运行例程 $ source /opt/tros/setup.bash $ source ./install/local_setup.bash $ mkdir -p config && cp -r /opt/tros/lib/dnn_node_example/config/multitask_body_kps_960x544.hbm config/ $ ros2 run cpp_dnn_demo cpp_dnn_demo --ros-args -p image: = config/test.jpg 代码解析 #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" #include \"dnn_node/dnn_node.h\" #include \"dnn_node/util/image_proc.h\" #include \"sensor_msgs/msg/image.hpp\" using namespace hobot :: dnn_node ; class BodyDetNode : public DnnNode { public : BodyDetNode ( const std :: string & node_name = \"body_det\" , const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : DnnNode ( node_name , options ) { // 获取模型输入图片的尺寸，包括图片的宽model_input_width_和高model_input_height ，用于模型前处理 if ( Init () != 0 || GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ) < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Node init fail!\" ); } //创建图片消息的subscriber，订阅的topic为”/image_raw”，消息类型为sensor_msgs::msg::Image。订阅到的图片用于算法模型推理 ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( \"/image_raw\" , 10 , std :: bind ( & BodyDetNode :: FeedImg , this , std :: placeholders :: _1 )); } ~ BodyDetNode () override {} void FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr msg ); protected : int SetNodePara () override { if ( ! dnn_node_para_ptr_ ) return -1 ; //指定模型推理使用的模型文件名和模型名 dnn_node_para_ptr_ -> model_file = \"config/multitask_body_kps_960x544.hbm\" ; dnn_node_para_ptr_ -> model_name = \"multitask_body_kps_960x544\" ; //指定模型输出的人体框的解析方法，其中人体框输出索引为box_output_index_ //使用的解析方法为hobot_dnn预定义的检测框解析方法FaceHandDetectionOutputParser。 std :: shared_ptr < OutputParser > box_out_parser = std :: make_shared < FaceHandDetectionOutputParser > (); dnn_node_para_ptr_ -> output_parsers_ . emplace_back ( std :: make_pair ( box_output_index_ , box_out_parser ) ); return 0 ; } int PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) override ; private : int model_input_width_ = -1 ; int model_input_height_ = -1 ; const int32_t box_output_index_ = 1 ; sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg_ ; rclcpp :: Subscription < sensor_msgs :: msg :: Image >:: ConstSharedPtr ros_img_subscription_ = nullptr ; }; //输出模型结果，并将结果渲染到图片后保存在本地 int BodyDetNode::PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( node_output -> outputs . empty () || static_cast < int32_t > ( node_output -> outputs . size ()) < box_output_index_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid outputs\" ); return -1 ; } auto * filter2d_result = dynamic_cast < Filter2DResult *> ( node_output -> outputs [ box_output_index_ ]. get ()); if ( ! filter2d_result ) return -1 ; std :: stringstream ss ; ss << \"img encoding: \" << img_msg_ -> encoding << \", stamp: \" << img_msg_ -> header . stamp . sec << \",\" << img_msg_ -> header . stamp . nanosec << \" \\n out box size: \" << filter2d_result -> boxes . size () << \" \\n \" ; cv :: Mat nv12 ( img_msg_ -> height * 3 / 2 , img_msg_ -> width , CV_8UC1 , const_cast < char *> ( reinterpret_cast < const char *> ( img_msg_ -> data . data ()))); cv :: Mat bgr ; cv :: cvtColor ( nv12 , bgr , CV_YUV2BGR_NV12 ); for ( auto & rect : filter2d_result -> boxes ) { ss << \"rect: \" << rect . left << \" \" << rect . top << \" \" << rect . right << \" \" << rect . bottom << \" \\n \" ; // 图片渲染 cv :: rectangle ( bgr , cv :: Point ( rect . left , rect . top ), cv :: Point ( rect . right , rect . bottom ), cv :: Scalar ( 255 , 0 , 0 ), 3 ); } std :: string result_image = \"render_\" + std :: to_string ( img_msg_ -> header . stamp . sec ) + \".\" + std :: to_string ( img_msg_ -> header . stamp . nanosec ) + \".jpg\" ; ss << \"Render img to file: \" << result_image ; RCLCPP_INFO ( rclcpp :: get_logger ( \"example\" ), \"%s\" , ss . str (). c_str ()); cv :: imwrite ( result_image , bgr ); return 0 ; } //将nv12格式的图片转成模型输入的数据类型DNNInput后，输入给推理任务 void BodyDetNode::FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg ) return ; if ( \"nv12\" != img_msg -> encoding ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Only support nv12 img encoding!\" ); return ; } img_msg_ = img_msg ; // 创建模型输入数据 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { ImageProc :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ )}; // 运行推理，DnnNode基类中定义并实现的启动推理接口。 Run ( inputs ); } int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < BodyDetNode > ()); rclcpp :: shutdown (); return 0 ; } 人体检测与跟踪 结果保存成图片，虽然便于保留数据，但是不利于动态看到效果，我们不如再来实时动态效果显示。 在这个案例中，我们在之前人体识别的基础上，进一步实现了人体部位的识别和骨骼、眼神等关键点的识别，比如头、脸、身体、手掌、眼睛。 识别的结果同样是通过浏览器来进行查看。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . $ ros2 launch /opt/tros/share/mono2d_body_detection/launch/hobot_mono2d_body_detection.launch.py","text_tokens":["数据类型","cd","mkdir","bottom","）","only","框","也","前","义","人体","包括","数据","保留","this","if","gitee","{","input","std","tutorials","_","parser","到","jpg","(","t","人脸","webservice","get","out",">","facehanddetectionoutputparser","detection","hbm","for","name","scalar","main","集成","https","share","multitask","0","系列","1","动态效果","support","model","cv","定义","实现","public","游戏","f37",":","--","不如","colcon","init","为","det","source","to","就是","filter2d","encoding","尺寸","para","example",";","挺",")","class",".",",","类型","一个","imwrite","width","subscription","xbox","案例","ss","检测","接口","}","2","名","boxes","=","]","using","protected","inputs","是不是","脸","+","输出","有","指定","再","imgproc","处理","r","ws","bodydetnode","查看","图片","msg","rectangle","驱动","看到","imageproc","placeholders","基础","来看","中","msgs","bind","getnv12pyramidfromnv12img","不是","高","等","了","视觉","一系列","imgcodecs","|","point","subscriber","&&","部位","运行","util","有没有","ptr","&","不利","每","一套","这","height","上边","服务","output","cam","的","并","文件名","demo","没有","core","create","x","bgr","960","3","render","bash","一步","test","p","关键","proc","sbin","显示","py","auto","opt","我们","nullptr","（","#","local","int32"," ","hpp","format","编程","cpp","c","同样","浏览器","parsers","960x544","dnnnode","-","rclcpp","模型","把","课程","一张","pair","算法","filter2dresult","cvtcolor","dnn","大家","hobot","emplace","比如","nodeoptions","nv12","mipi","开发","rect","将","override","install","*","!","本地","终端","mat","top","实时","骨骼","getmodelinputsize","消息","一幅","namespace","const","void","error","渲染","stringstream","输入","类似","logger","、","。","device","box","\"","和","body","n","应用","ros2","string","invalid","是","kps","webserver","基类","其中","dnninput","关键点","nginx","ros","效果","options","开发方法","vector","mono2d","setup","一致","文件","reinterpret","include","相机","创建","dnnnodeoutput","topic","sensor","，","left","stamp","神奇","char","constsharedptr","浏览","userdata","com","虽然","用于","还","动态","right","上","先","但是","进行","lib","打球","opencv2","/","之前","args","postprocess","可以","通过","订阅","empty","信息","dev","build","身体","shared","result","index","make","8uc1","”","这个","\\","websocket","255","代码","fail","static","back","推理","private","给","在","方法","进一步","体感","眼神","img","return","h","feedimg","$","cast","size","video","体验","~","str","会","跟踪","后","便于","int","然后","利于","[","一下","一系","知道","544","config","spin","run","手掌","cp","保存","togetherros","结果","例程","outputparser","data","格式","任务","玩过","动作","不利于","tros","guyuehome","yuv2bgr","头","使用","chmod","位置","image","预定","node","raw","nanosec","人手","clone","src","宽","<","launch","来","file","启动","10","不","setnodepara","索引","outputs","与","info","下载","游戏机","解析","dynamic","人头","argc","成","s","argv","header","shutdown","获取","%","采样","sec","git","识别","跳舞","转","眼睛"],"title":"人体检测与跟踪","title_tokens":["人体","检测","跟踪","与"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_1","text":"不知道大家有没有玩过类似XBOX的体感游戏机，上边会有一个相机，动态识别我们的动作，比如跳舞、打球，是不是还挺神奇的，这就是人体检测与跟踪的应用。 TogetherROS中也集成了一套类似的算法，可以识别人体、人头、人脸、人手等一系列关键点，我们来体验一下。","text_tokens":["不","体感","可以","与","应用","中","玩过","，","游戏","一个","动作","一套","是不是","游戏机","关键","人脸","体验","这","上边","算法","也","会","神奇","人头","大家","我们","不是","跟踪","的","还","人体","xbox","比如","就是","关键点","有","动态","等","了","打球","没有","一系列"," ","识别","人手","类似","一下","一系","知道","跳舞","、","挺","。","集成","检测","有没有","来","相机","togetherros","系列"],"title":"人体检测与跟踪","title_tokens":["人体","检测","跟踪","与"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_2","text":"先来看一个人体识别的基础应用，我们驱动相机后，实时采样视觉信息，然后再通过检测算法，识别每一幅图片中人体位置，并把识别的结果保存成一张图片，便于我们查看。","text_tokens":["结果","通过","应用","来看","每","中","一个","，","把","一幅","一张","算法","信息","我们","成","的","人体","后","便于","并","位置","先","采样","再","视觉","保存","识别","然后","。","查看","图片","驱动","检测","相机","实时","基础"],"title":"编程开发方法","title_tokens":["方法","编程","开发方法","开发"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_3","text":"# 下载例程代码（与之前课程下载的代码一致） $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build # 终端1，运行相机 $ source /opt/tros/setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p out_format: = nv12 -p image_width: = 960 -p image_height: = 544 -p video_device: = F37 # 终端2，运行例程 $ source /opt/tros/setup.bash $ source ./install/local_setup.bash $ mkdir -p config && cp -r /opt/tros/lib/dnn_node_example/config/multitask_body_kps_960x544.hbm config/ $ ros2 run cpp_dnn_demo cpp_dnn_demo --ros-args -p image: = config/test.jpg","text_tokens":["2","-","cd","mkdir","=","）","课程","dnn","dev","build","nv12","mipi","gitee","install","r","终端","tutorials","_","代码","jpg","ws","$","video","out","hbm","544","config","&&","run","运行","https","device","cp","multitask","togetherros","body","1","例程","f37",":","ros2","tros","height","--","guyuehome","kps","colcon","cam","的","source","ros","image","setup","node","demo","一致","example","clone","src","960","相机","bash","与","test",".","p","下载","，","width","opt","userdata","com","（","#","local","lib","git"," ","/","format","之前","cpp","args","960x544"],"title":"运行例程","title_tokens":["例程","运行"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_4","text":"#include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" #include \"dnn_node/dnn_node.h\" #include \"dnn_node/util/image_proc.h\" #include \"sensor_msgs/msg/image.hpp\" using namespace hobot :: dnn_node ; class BodyDetNode : public DnnNode { public : BodyDetNode ( const std :: string & node_name = \"body_det\" , const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : DnnNode ( node_name , options ) { // 获取模型输入图片的尺寸，包括图片的宽model_input_width_和高model_input_height ，用于模型前处理 if ( Init () != 0 || GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ) < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Node init fail!\" ); } //创建图片消息的subscriber，订阅的topic为”/image_raw”，消息类型为sensor_msgs::msg::Image。订阅到的图片用于算法模型推理 ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( \"/image_raw\" , 10 , std :: bind ( & BodyDetNode :: FeedImg , this , std :: placeholders :: _1 )); } ~ BodyDetNode () override {} void FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr msg ); protected : int SetNodePara () override { if ( ! dnn_node_para_ptr_ ) return -1 ; //指定模型推理使用的模型文件名和模型名 dnn_node_para_ptr_ -> model_file = \"config/multitask_body_kps_960x544.hbm\" ; dnn_node_para_ptr_ -> model_name = \"multitask_body_kps_960x544\" ; //指定模型输出的人体框的解析方法，其中人体框输出索引为box_output_index_ //使用的解析方法为hobot_dnn预定义的检测框解析方法FaceHandDetectionOutputParser。 std :: shared_ptr < OutputParser > box_out_parser = std :: make_shared < FaceHandDetectionOutputParser > (); dnn_node_para_ptr_ -> output_parsers_ . emplace_back ( std :: make_pair ( box_output_index_ , box_out_parser ) ); return 0 ; } int PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) override ; private : int model_input_width_ = -1 ; int model_input_height_ = -1 ; const int32_t box_output_index_ = 1 ; sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg_ ; rclcpp :: Subscription < sensor_msgs :: msg :: Image >:: ConstSharedPtr ros_img_subscription_ = nullptr ; }; //输出模型结果，并将结果渲染到图片后保存在本地 int BodyDetNode::PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( node_output -> outputs . empty () || static_cast < int32_t > ( node_output -> outputs . size ()) < box_output_index_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid outputs\" ); return -1 ; } auto * filter2d_result = dynamic_cast < Filter2DResult *> ( node_output -> outputs [ box_output_index_ ]. get ()); if ( ! filter2d_result ) return -1 ; std :: stringstream ss ; ss << \"img encoding: \" << img_msg_ -> encoding << \", stamp: \" << img_msg_ -> header . stamp . sec << \",\" << img_msg_ -> header . stamp . nanosec << \" \\n out box size: \" << filter2d_result -> boxes . size () << \" \\n \" ; cv :: Mat nv12 ( img_msg_ -> height * 3 / 2 , img_msg_ -> width , CV_8UC1 , const_cast < char *> ( reinterpret_cast < const char *> ( img_msg_ -> data . data ()))); cv :: Mat bgr ; cv :: cvtColor ( nv12 , bgr , CV_YUV2BGR_NV12 ); for ( auto & rect : filter2d_result -> boxes ) { ss << \"rect: \" << rect . left << \" \" << rect . top << \" \" << rect . right << \" \" << rect . bottom << \" \\n \" ; // 图片渲染 cv :: rectangle ( bgr , cv :: Point ( rect . left , rect . top ), cv :: Point ( rect . right , rect . bottom ), cv :: Scalar ( 255 , 0 , 0 ), 3 ); } std :: string result_image = \"render_\" + std :: to_string ( img_msg_ -> header . stamp . sec ) + \".\" + std :: to_string ( img_msg_ -> header . stamp . nanosec ) + \".jpg\" ; ss << \"Render img to file: \" << result_image ; RCLCPP_INFO ( rclcpp :: get_logger ( \"example\" ), \"%s\" , ss . str (). c_str ()); cv :: imwrite ( result_image , bgr ); return 0 ; } //将nv12格式的图片转成模型输入的数据类型DNNInput后，输入给推理任务 void BodyDetNode::FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg ) return ; if ( \"nv12\" != img_msg -> encoding ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Only support nv12 img encoding!\" ); return ; } img_msg_ = img_msg ; // 创建模型输入数据 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { ImageProc :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ )}; // 运行推理，DnnNode基类中定义并实现的启动推理接口。 Run ( inputs ); } int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < BodyDetNode > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["2","dnnnode","-","订阅","数据类型","名","boxes","=","rclcpp","模型","empty","bottom","]","using","protected","inputs","only","框","pair","cvtcolor","算法","filter2dresult","dnn","前","hobot","义","emplace","+","包括","人体","nodeoptions","输出","nv12","数据","shared","this","result","rect","if","index","make","指定","将","override","{","”","imgproc","8uc1","\\","*","!","input","std","处理","本地","_","parser","255","到","fail","static","jpg","bodydetnode","推理","back","msg","mat","图片","top","private","rectangle","给","imageproc","在","placeholders","方法","img","return","h","(","t","feedimg","cast","中","getmodelinputsize","size","msgs","消息","~","get","namespace",">","bind","out","str","getnv12pyramidfromnv12img","facehanddetectionoutputparser","const","高","void","后","hbm","error","int","渲染","stringstream","for","name","scalar","imgcodecs","|","main","输入","logger","[","point","config","spin","subscriber","。","运行","run","util","ptr","multitask","\"","box","和","保存","0","body","&","1","support","结果","n","model","cv","outputparser","data","定义","实现","格式","任务","public",":","string","invalid","height","kps","yuv2bgr","output","init","基类","使用","为","其中","dnninput","det","的","ros","to","options","并","filter2d","文件名","vector","image","预定","core","node","raw","create","encoding","尺寸","para","nanosec","文件","reinterpret",";","example","include","宽","3",")","bgr","render","<","class","file","启动","10","setnodepara","创建","dnnnodeoutput","索引","outputs",".",",","topic","类型","info","sensor","，","proc","left","stamp","imwrite","width","解析","constsharedptr","subscription","auto","dynamic","char","argc","nullptr","用于","成","s","argv","header","right","shutdown","#","获取","%","int32","sec"," ","opencv2","parsers","hpp","转","/","ss","检测","接口","c","}","postprocess","960x544"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_5","text":"结果保存成图片，虽然便于保留数据，但是不利于动态看到效果，我们不如再来实时动态效果显示。 在这个案例中，我们在之前人体识别的基础上，进一步实现了人体部位的识别和骨骼、眼神等关键点的识别，比如头、脸、身体、手掌、眼睛。 识别的结果同样是通过浏览器来进行查看。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . $ ros2 launch /opt/tros/share/mono2d_body_detection/launch/hobot_mono2d_body_detection.launch.py","text_tokens":["通过","cd","-","脸","hobot","+","人体","比如","身体","保留","数据","再","这个","r","_","websocket","眼睛","查看","图片","看到","在","实时","进一步","基础","眼神","骨骼","$","中","webservice","detection","便于","等","了","利于","config","部位","、","。","手掌","&&","运行","share","cp","和","保存","body","动态效果","结果","例程","不利","实现","不利于","ros2","tros","服务","是","不如","头","webserver","chmod","nginx","的","关键点","source","效果","mono2d","setup","x","launch","来","bash","启动","一步",".","p","，","关键","sbin","显示","py","浏览","opt","虽然","我们","成","动态","上","#","但是","进行","lib"," ","识别","案例","/","之前","同样","浏览器"],"title":"人体检测与跟踪","title_tokens":["人体","检测","跟踪","与"]},{"location":"TogetherROS/5.7_%E5%8D%95%E7%9B%AE3D%E5%AE%A4%E5%86%85%E6%A3%80%E6%B5%8B/","text":"单目3D室内检测 接下来，我们继续学习物体 3D 检测算法。 机器人有时候不仅仅要识别出人，还要识别出房间里有什么东西，这就是室内物体 3D 检测啦。 在TogetherROS上，就集成了这样一套算法，接下来让我们一起来体验以下吧。 先来看一张图片，很明显大家可以看到图中有两个垃圾桶。 运行示例程序 # 配置ROS2环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。 $ cp -r /opt/tros/lib/mono3d_indoor_detection/config/ . # 启动launch文件 $ ros2 launch /opt/tros/share/mono3d_indoor_detection/launch/mono3d_indoor_detection.launch.py [ INFO ] [ 1654858490 .168592166 ] [ mono3d_detection ] : target type: trash_can [ INFO ] [ 1654858490 .168644750 ] [ mono3d_detection ] : target type: width, value: 236 .816406 [ INFO ] [ 1654858490 .168704333 ] [ mono3d_detection ] : target type: height, value: 305 .664062 [ INFO ] [ 1654858490 .168759584 ] [ mono3d_detection ] : target type: length, value: 224 .182129 [ INFO ] [ 1654858490 .168812334 ] [ mono3d_detection ] : target type: rotation, value: -1571.989179 [ INFO ] [ 1654858490 .168862543 ] [ mono3d_detection ] : target type: x, value: -191.977829 [ INFO ] [ 1654858490 .168916168 ] [ mono3d_detection ] : target type: y, value: -143.963307 [ INFO ] [ 1654858490 .168966502 ] [ mono3d_detection ] : target type: z, value: 714 .024127 [ INFO ] [ 1654858490 .169016794 ] [ mono3d_detection ] : target type: depth, value: 714 .024127 [ INFO ] [ 1654858490 .169067461 ] [ mono3d_detection ] : target type: score, value: 0 .973215 [ INFO ] [ 1654858490 .169168795 ] [ mono3d_detection ] : target type: trash_can [ INFO ] [ 1654858490 .169212837 ] [ mono3d_detection ] : target type: width, value: 253 .051758 [ INFO ] [ 1654858490 .169265004 ] [ mono3d_detection ] : target type: height, value: 282 .348633 [ INFO ] [ 1654858490 .169317046 ] [ mono3d_detection ] : target type: length, value: 257 .934570 [ INFO ] [ 1654858490 .169368921 ] [ mono3d_detection ] : target type: rotation, value: -1542.727947 [ INFO ] [ 1654858490 .169418671 ] [ mono3d_detection ] : target type: x, value: 552 .459776 [ INFO ] [ 1654858490 .169470588 ] [ mono3d_detection ] : target type: y, value: -164.073169 [ INFO ] [ 1654858490 .169517505 ] [ mono3d_detection ] : target type: z, value: 1088 .358164 [ INFO ] [ 1654858490 .169566839 ] [ mono3d_detection ] : target type: depth, value: 1088 .358164 [ INFO ] [ 1654858490 .169616464 ] [ mono3d_detection ] : target type: score, value: 0 .875521 很明显，已经识别到了两个垃圾桶。 代码解析 // Copyright (c) 2022，Horizon Robotics. // // Licensed under the Apache License, Version 2.0 (the \"License\"); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \"AS IS\" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. #include \"include/centernet_3d_detection_node.h\" #include <unistd.h> #include <fstream> #include <memory> #include <string> #include <vector> #include \"dnn_node/dnn_node.h\" #include \"include/image_utils.h\" #include \"rclcpp/rclcpp.hpp\" #include <sys/stat.h> #ifdef CV_BRIDGE_PKG_ENABLED #include <cv_bridge/cv_bridge.h> #endif using hobot :: easy_dnn :: OutputDescription ; using hobot :: easy_dnn :: OutputParser ; CenterNet3DDetectionNode :: CenterNet3DDetectionNode ( const std :: string & node_name , const NodeOptions & options ) : DnnNode ( node_name , options ), output_frameCount_ ( 0 ) { this -> declare_parameter < int > ( \"is_sync_mode\" , is_sync_mode_ ); this -> declare_parameter < std :: string > ( \"config_file_path\" , config_file_path_ ); this -> declare_parameter < int > ( \"shared_mem\" , shared_mem_ ); this -> declare_parameter < std :: string > ( \"ai_msg_pub_topic_name\" , msg_pub_topic_name_ ); this -> declare_parameter < std :: string > ( \"image_sub_topic_name\" , ros_img_topic_name_ ); this -> declare_parameter < std :: string > ( \"feed_image\" , feed_image_ ); this -> get_parameter < int > ( \"is_sync_mode\" , is_sync_mode_ ); this -> get_parameter < std :: string > ( \"config_file_path\" , config_file_path_ ); this -> get_parameter < int > ( \"shared_mem\" , shared_mem_ ); this -> get_parameter < std :: string > ( \"ai_msg_pub_topic_name\" , msg_pub_topic_name_ ); this -> get_parameter < std :: string > ( \"image_sub_topic_name\" , ros_img_topic_name_ ); this -> get_parameter < std :: string > ( \"feed_image\" , feed_image_ ); model_file_name_ = config_file_path_ + \"/centernet.hbm\" ; mkdir ( \"./result/\" , 666 ); std :: stringstream ss ; ss << \"Parameter:\" << \" \\n config_file_path_:\" << config_file_path_ << \" \\n shared_men:\" << shared_mem_ << \" \\n is_sync_mode_: \" << is_sync_mode_ << \" \\n model_file_name_: \" << model_file_name_ << \" \\n feed_image:\" << feed_image_ ; RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); if ( Start () == 0 ) { RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"start success!!!\" ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"start fail!!!\" ); } } CenterNet3DDetectionNode ::~ CenterNet3DDetectionNode () {} int CenterNet3DDetectionNode :: Start () { int ret = Init (); if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Init failed!\" ); return ret ; } ret = GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ); if ( ret < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get model input size fail!\" ); return ret ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"The model input width is %d and height is %d\" , model_input_width_ , model_input_height_ ); msg_publisher_ = this -> create_publisher < ai_msgs :: msg :: PerceptionTargets > ( msg_pub_topic_name_ , 10 ); RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"msg_pub_topic_name: %s\" , msg_pub_topic_name_ . data ()); if ( ! feed_image_ . empty ()) { std :: cout << \"mono3d read image:\" << feed_image_ << \" to detect\" << std :: endl ; PredictByImage ( feed_image_ ); return 0 ; } // RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Detect images that use subscriptions\" ); if ( shared_mem_ ) { #ifdef SHARED_MEM_ENABLED RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Create hbmem_subscription with topic_name: %s\" , sharedmem_img_topic_name_ . c_str ()); sharedmem_img_subscription_ = this -> create_subscription_hbmem < hbm_img_msgs :: msg :: HbmMsg1080P > ( sharedmem_img_topic_name_ , 10 , std :: bind ( & CenterNet3DDetectionNode :: SharedMemImgProcess , this , std :: placeholders :: _1 )); #else RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Unsupport shared mem\" ); #endif } else { RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Create subscription with topic_name: %s\" , ros_img_topic_name_ . c_str ()); ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( ros_img_topic_name_ , 10 , std :: bind ( & CenterNet3DDetectionNode :: RosImgProcess , this , std :: placeholders :: _1 )); } return 0 ; } int CenterNet3DDetectionNode :: SetNodePara () { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Set node para.\" ); if ( ! dnn_node_para_ptr_ ) { return -1 ; } dnn_node_para_ptr_ -> model_file = model_file_name_ ; dnn_node_para_ptr_ -> model_name = model_name_ ; dnn_node_para_ptr_ -> model_task_type = model_task_type_ ; dnn_node_para_ptr_ -> task_num = 1 ; return 0 ; } int CenterNet3DDetectionNode :: SetOutputParser () { // set output parser auto model_manage = GetModel (); if ( ! model_manage || ! dnn_node_para_ptr_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Invalid model\" ); return -1 ; } if ( model_manage -> GetOutputCount () < model_output_count_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Error! Model %s output count is %d, unmatch with count %d\" , dnn_node_para_ptr_ -> model_name . c_str (), model_manage -> GetOutputCount (), model_output_count_ ); return -1 ; } for ( int i = 0 ; i < output_index_ ; ++ i ) { std :: shared_ptr < OutputParser > assist_parser = std :: make_shared < CenterNet3DAssistParser > (); model_manage -> SetOutputParser ( i , assist_parser ); } // set 3D paser auto output_desc = std :: make_shared < OutputDescription > ( model_manage , output_index_ , \"3D_branch\" ); for ( int i = 0 ; i < output_index_ ; ++ i ) { output_desc -> GetDependencies (). push_back ( i ); } output_desc -> SetType ( \"3D\" ); model_manage -> SetOutputDescription ( output_desc ); std :: shared_ptr < OutputParser > out_parser = std :: make_shared < CenterNet3DOutputParser > ( config_file_path_ ); model_manage -> SetOutputParser ( output_index_ , out_parser ); return 0 ; } #define CV_DRAW_LINE(p0, p1) \\ cv::line(image, cv::Point(points[p0][0], points[p0][1]), \\ cv::Point(points[p1][0], points[p1][1]), \\ CV_RGB(0, 255, 0), 2); #define CV_PUT_TEXT(text, px, py, offset) \\ { double fontScale = 3.0l; int thickness = 3u, baseline; \\ cv::Size text_size = cv::getTextSize(text, \\ cv::HersheyFonts::FONT_HERSHEY_PLAIN, fontScale, thickness, &baseline); \\ cv::Point point(px , py); \\ point.y += offset;\\ cv::Rect rect(point.x, point.y, \\ text_size.width, text_size.height); \\ point.y += text_size.height;\\ offset += text_size.height;\\ cv::putText(image, text, point, \\ cv::HersheyFonts::FONT_HERSHEY_PLAIN, \\ fontScale, CV_RGB(0, 255, 128), thickness); } void Render3DBox ( const BBox3D & box , cv :: Mat & image ) { auto & points = box . corners2d_upscale ; CV_DRAW_LINE ( 0 , 1 ) CV_DRAW_LINE ( 0 , 3 ) CV_DRAW_LINE ( 0 , 4 ) CV_DRAW_LINE ( 1 , 2 ) CV_DRAW_LINE ( 1 , 5 ) CV_DRAW_LINE ( 2 , 3 ) CV_DRAW_LINE ( 2 , 6 ) CV_DRAW_LINE ( 3 , 7 ) CV_DRAW_LINE ( 4 , 5 ) CV_DRAW_LINE ( 4 , 7 ) CV_DRAW_LINE ( 5 , 6 ) CV_DRAW_LINE ( 6 , 7 ) std :: string box_type = std :: to_string ( box . class_label ); std :: string score = std :: to_string ( box . score ); int offset = 0 ; if ( - M_PI_2 <= box . r || box . r <= M_PI_2 ) { CV_PUT_TEXT ( box_type , points [ 7 ][ 0 ], points [ 7 ][ 1 ], offset ); CV_PUT_TEXT ( score , points [ 7 ][ 0 ], points [ 7 ][ 1 ], offset ); } else { CV_PUT_TEXT ( box_type , points [ 6 ][ 0 ], points [ 6 ][ 1 ], offset ); CV_PUT_TEXT ( score , points [ 6 ][ 0 ], points [ 6 ][ 1 ], offset ); } } int CenterNet3DDetectionNode :: PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( ! msg_publisher_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid msg_publisher_\" ); return -1 ; } struct timespec time_start = { 0 , 0 }; clock_gettime ( CLOCK_REALTIME , & time_start ); ai_msgs :: msg :: Perf perf ; perf . set__type ( \"PostProcess\" ); perf . stamp_start . sec = time_start . tv_sec ; perf . stamp_start . nanosec = time_start . tv_nsec ; auto centernet_3d_output = std :: dynamic_pointer_cast < CenterNet3DOutput > ( node_output ); if ( centernet_3d_output ) { std :: stringstream ss ; ss << \"3D output dection info\" ; if ( centernet_3d_output -> image_msg_header_ ) { ss << \", frame_id: \" << centernet_3d_output -> image_msg_header_ -> frame_id << \", stamp: \" << centernet_3d_output -> image_msg_header_ -> stamp . sec << \".\" << centernet_3d_output -> image_msg_header_ -> stamp . nanosec ; } RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); } const auto & outputs = node_output -> outputs ; RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"outputs size: %d\" , outputs . size ()); if ( outputs . empty () || static_cast < int32_t > ( outputs . size ()) < model_output_count_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Invalid outputs\" ); return -1 ; } int smart_fps = 0 ; { auto tp_now = std :: chrono :: system_clock :: now (); output_frameCount_ ++ ; auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - output_tp_ ) . count (); if ( interval >= 1000 ) { smart_fps = output_frameCount_ ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Smart fps = %d\" , smart_fps ); output_frameCount_ = 0 ; output_tp_ = std :: chrono :: system_clock :: now (); } } ai_msgs :: msg :: PerceptionTargets :: UniquePtr pub_data ( new ai_msgs :: msg :: PerceptionTargets ()); if ( centernet_3d_output -> image_msg_header_ ) { pub_data -> header . set__stamp ( centernet_3d_output -> image_msg_header_ -> stamp ); pub_data -> header . set__frame_id ( centernet_3d_output -> image_msg_header_ -> frame_id ); } pub_data -> set__fps ( smart_fps ); auto * det_result = dynamic_cast < CenterNet3DDetResult *> ( outputs [ output_index_ ]. get ()); if ( ! det_result ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"invalid cast\" ); } else { RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"out box size: %d\" , det_result -> boxes . size ()); std :: map < std :: string , ai_msgs :: msg :: Target > target_list ; std :: vector < ai_msgs :: msg :: Target > targets ; targets . reserve ( det_result -> boxes . size ()); for ( auto & box : det_result -> boxes ) { ai_msgs :: msg :: Target target ; switch ( box . class_label ) { case BBox3D :: CHARGING_BASE : target . type = \"charging_base\" ; break ; case BBox3D :: SLIPPER : target . type = \"slipper\" ; break ; case BBox3D :: TRASH_CAN : target . type = \"trash_can\" ; break ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s\" , target . type . c_str ()); ai_msgs :: msg :: Attribute attribute ; ai_msgs :: msg :: Point point ; attribute . type = \"width\" ; attribute . value = box . w * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"height\" ; attribute . value = box . h * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"length\" ; attribute . value = box . l * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"rotation\" ; attribute . value = box . r * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"x\" ; attribute . value = box . x * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"y\" ; attribute . value = box . y * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"z\" ; attribute . value = box . z * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"depth\" ; attribute . value = box . d * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"score\" ; attribute . value = box . score * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), box . score ); target . attributes . push_back ( attribute ); // 8 corners /* 4----------5 6----------7 /| /| /| /| / | / | / | / | / | / | / | / | 7---|------6 |5---|------4 | | | | || | | | | | | || | | | | 0------|---1| 2------|---3 | / | / | / | / | / ^ | / | / v | / |/ |/ |/ |/ 3----------2 1----------0 */ for ( const auto & corners : box . corners2d_upscale ) { geometry_msgs :: msg :: Point32 g_point ; g_point . x = corners [ 0 ]; g_point . y = corners [ 1 ]; point . point . push_back ( g_point ); } point . type = \"corners\" ; target . points . push_back ( point ); targets . push_back ( target ); } pub_data -> targets = std :: move ( targets ); if ( ! centernet_3d_output -> image_name_ . empty ()) { auto img_bgr = cv :: imread ( centernet_3d_output -> image_name_ ); for ( auto & box : det_result -> boxes ) { Render3DBox ( box , img_bgr ); } std :: string :: size_type iPos = centernet_3d_output -> image_name_ . find_last_of ( '/' ) + 1 ; std :: string filename = centernet_3d_output -> image_name_ . substr ( iPos , centernet_3d_output -> image_name_ . length () - iPos ); cv :: imwrite ( \"./result/\" + filename , img_bgr ); } } clock_gettime ( CLOCK_REALTIME , & time_start ); perf . stamp_end . sec = time_start . tv_sec ; perf . stamp_end . nanosec = time_start . tv_nsec ; pub_data -> perfs . emplace_back ( perf ); msg_publisher_ -> publish ( std :: move ( pub_data )); return 0 ; } int CenterNet3DDetectionNode :: Predict ( std :: vector < std :: shared_ptr < DNNInput >> & inputs , const std :: shared_ptr < std :: vector < hbDNNRoi >> rois , std :: shared_ptr < DnnNodeOutput > dnn_output ) { return Run ( inputs , dnn_output , rois , is_sync_mode_ == 1 ); } void CenterNet3DDetectionNode :: RosImgProcess ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg || ! rclcpp :: ok ()) { return ; } std :: stringstream ss ; ss << \"Recved img encoding: \" << img_msg -> encoding << \", h: \" << img_msg -> height << \", w: \" << img_msg -> width << \", step: \" << img_msg -> step << \", frame_id: \" << img_msg -> header . frame_id << \", stamp: \" << img_msg -> header . stamp . sec << \".\" << img_msg -> header . stamp . nanosec << \", data size: \" << img_msg -> data . size (); RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); auto tp_start = std :: chrono :: system_clock :: now (); // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; if ( \"rgb8\" == img_msg -> encoding ) { #ifdef CV_BRIDGE_PKG_ENABLED auto cv_img = cv_bridge :: cvtColorForDisplay ( cv_bridge :: toCvShare ( img_msg ), \"bgr8\" ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after cvtColorForDisplay cost ms: %d\" , interval ); } pyramid = ImageUtils :: GetNV12Pyramid ( cv_img -> image , model_input_height_ , model_input_width_ ); #else RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Unsupport cv bridge\" ); #endif } else if ( \"nv12\" == img_msg -> encoding ) { pyramid = ImageUtils :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ ); } if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail\" ); return ; } { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after GetNV12Pyramid cost ms: %d\" , interval ); } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Dnn node begin to predict\" ); // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = img_msg -> width ; dnn_output -> src_img_height_ = img_msg -> height ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( img_msg -> header . frame_id ); dnn_output -> image_msg_header_ -> set__stamp ( img_msg -> header . stamp ); dnn_output -> image_name_ = \"\" ; // 3. 开始预测 uint32_t ret = Predict ( inputs , nullptr , dnn_output ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after Predict cost ms: %d\" , interval ); } if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"predict img failed!\" ); } return ; } int CenterNet3DDetectionNode :: PredictByImage ( const std :: string & image ) { // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; // bgr img，支持将图片resize到模型输入size pyramid = ImageUtils :: GetNV12Pyramid ( image , ImageType :: BGR , model_input_height_ , model_input_width_ ); if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail with image: %s\" , image . c_str ()); return -1 ; } // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = 1920 ; dnn_output -> src_img_height_ = 1024 ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( \"test_frame\" ); dnn_output -> image_msg_header_ -> set__stamp ( rclcpp :: Time ()); dnn_output -> image_name_ = image ; // dnn_output->image_msg_header->set__frame_id(std::to_string(img_msg->index)); // dnn_output->image_msg_header->set__stamp(img_msg->time_stamp); // 3. 开始预测 uint32_t ret = Predict ( inputs , nullptr , dnn_output ); if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"predict img failed!\" ); } return ret ; } #ifdef SHARED_MEM_ENABLED void CenterNet3DDetectionNode :: SharedMemImgProcess ( const hbm_img_msgs :: msg :: HbmMsg1080P :: ConstSharedPtr img_msg ) { if ( ! img_msg || ! rclcpp :: ok ()) { return ; } RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"go into shared mem\" ); // dump recved img msg // std::ofstream ofs(\"img_\" + std::to_string(img_msg->index) + \".\" + // std::string(reinterpret_cast<const char*>(img_msg->encoding.data()))); // ofs.write(reinterpret_cast<const char*>(img_msg->data.data()), // img_msg->data_size); auto tp_start = std :: chrono :: system_clock :: now (); // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; if ( \"nv12\" == std :: string ( reinterpret_cast < const char *> ( img_msg -> encoding . data ()))) { pyramid = ImageUtils :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ ); } else { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"share mem unsupported img encoding: %s\" , img_msg -> encoding ); } if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail!\" ); return ; } { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after GetNV12Pyramid cost ms: %d\" , interval ); } // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = img_msg -> width ; dnn_output -> src_img_height_ = img_msg -> height ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( std :: to_string ( img_msg -> index )); dnn_output -> image_msg_header_ -> set__stamp ( img_msg -> time_stamp ); // 3. 开始预测 int ret = Predict ( inputs , nullptr , dnn_output ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after Predict cost ms: %d\" , interval ); } // 4. 处理预测结果，如渲染到图片或者发布预测结果 if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Run predict failed!\" ); } return ; } #endif","text_tokens":["数据类型","mkdir","upscale","机器人","发布","targets","target","gettextsize","permissions","数据","this","图中","if","物体","num","timespec","{","licenses","horizon","not","centernet3dassistparser","w","input","std","_","parser","到","282","conditions","enabled","time","(","t","feed","assist","pym",">","起来","get","out","168916168","license","detection","169168795","sharedmem","552","hbm","substr","mono3d","168812334","base","明显","for","name","学习","168862543","the","licensed","子类","and","push","case","集成","169566839","ofs","outputdescription","share","182129","0","1","indoor","cv","model","不仅","不仅仅","程序","tp","sync",":","1654858490","1542.727947","init","1571.989179","为","rgb","det","source","to","就是","室内","'","ipos","配置文件","cvtcolorfordisplay","frame","into","仅仅","fps","164.073169","encoding","para","从","clock",";","example","debug",")","id","text","class","有时候","168592166","centernet3doutput","253",".",",","end","new","类型","机器","024127","label","imwrite","corners2d","width","subscription","uniqueptr","warn","2022","224","type","2.0","centernet","apache","需要","ok","express","ss","检测","接口","}","robotics","uint32","2","plain","路径","subscriptions","may","boxes","=","]","using","start","smart","inputs","of","either","168704333","set","3u","thickness","很","128","+","191.977829","有","吧","安装","拷贝","处理","r","预测","depth","memory","图片","看到","implied","msg","placeholders","什么","use","imread","来看","points","中","msgs","bind","go","getnv12pyramidfromnv12img","pointer","easy","write","framecount","---","imageutils","接下","i","publisher","了","hbdnnroi","169418671","men","或者","|","attributes","point","运行","www","m","6","一","offset","ptr","getnv12pyramid","centernet3ddetresult","&","applicable","unistd","specific","1000","perfs","success","一套","double","geometry","nsec","images","这","height","sharedmemimgprocess","p0","map","要","output","begin","tocvshare","except","的","4","by","这样","143.963307","create","interval","x","bgr","3","dection","runinfertask","bash","pi","pub","realtime","test","move","under","py","示例","ret","auto","predict","opt","我们","nullptr","接下来","3d","236","z","cout","publish","#","int32","getdependencies"," ","sub","attribute","hpp","3.0","rois","++","环境","c","459776","px","hershey","以下","dnnnode","-","break","recved","就","rclcpp","centernet3doutputparser","模型","d","开始","endl","一张","算法","any","dnn","大家","hobot","emplace","已经","step","nodeoptions","973215","nv12","rect","length","将","1088","governing","*","!","继续","a","font","mat","read","render3dbox","or","y","169470588","slipper","mode","last","getmodelinputsize","__","让","system","对象","const","cost","bridge","settype","void","setoutputparser","see","error","stringstream","两个","渲染","pyramid","169517505","g","934570","输入","logger","rgb8","warranties","------","。","org","168966502","\"","box","5","n","is","desc","还要","出人","ros2","string","limitations","invalid","branch","f","reserve","714","unsupport","dnninput","垃圾","ros","options","vector","传入","sys","setup","8","with","文件","664062","l","reinterpret","include","p1","168644750","writing","创建","dnnnodeoutput","topic","count","sensor","，","rotation","manage","hbmem","stamp","啦","constsharedptr","东西","char","305","上","816406","先","169616464","lib","gettime","at","after","baseline","utils","you","/","下来","fstream","postprocess","endif","可以","348633","通过","bgr8","on","出","empty","version","value","1920","compliance","unmatch","copyright","shared","result","168759584","index","make","define","\\","task","255","代码","fail","static","back","http","setoutputdescription","corners","ofstream","在","ms","without","stat","img","return","h","有时","rosimgprocess","169067461","$","cast","charging","size","law","agreed","体验","declare","~","str","put","里","v","draw","centernet3ddetectionnode","perf","imagetype","getmodel","051758","fontscale","169368921","int","kind","时候","detect","an","obtain","distributed","unless","pkg","unsupported","hbmmsg1080p","paser","[","配置","config","run","如","257","milliseconds","cp","单目","togetherros","169265004","结果","outputparser","line","data","predictbyimage","666","358164","required","----------","1024","tros","ai","169212837","perceptiontargets","房间","copy","failed","使用","software","score","can","image","parameter","node","nanosec","7","src","else","as","launch","<","nv12pyramidinput","作为","trash","启动","file","now","10","setnodepara","outputs","chrono","getoutputcount","169016794","path","puttext","info","basis","list","switch","hersheyfonts","ifdef","解析","dynamic","duration","^","成","s","bbox3d","in","header","resize","tv","filename","%","that","sec","支持","point32","识别","find","将会","dump","生成","mem","struct","875521","language","169317046","垃圾桶"],"title":"单目3D室内检测","title_tokens":["检测","室内","单目","3d"]},{"location":"TogetherROS/5.7_%E5%8D%95%E7%9B%AE3D%E5%AE%A4%E5%86%85%E6%A3%80%E6%B5%8B/#3d","text":"接下来，我们继续学习物体 3D 检测算法。 机器人有时候不仅仅要识别出人，还要识别出房间里有什么东西，这就是室内物体 3D 检测啦。 在TogetherROS上，就集成了这样一套算法，接下来让我们一起来体验以下吧。 先来看一张图片，很明显大家可以看到图中有两个垃圾桶。","text_tokens":["可以","以下","有时","就","不仅","还要","机器","不仅仅","出人","来看","出","一套","，","体验","这","起来","算法","里","机器人","一张","让","房间","啦","要","东西","很","我们","大家","接下来","3d","接下","垃圾","就是","有","室内","上","时候","吧","图中","了","先","明显","两个","物体","仅仅","学习","这样"," ","识别","继续","集成","。","图片","看到","下来","检测","一","在","垃圾桶","有时候","什么","togetherros"],"title":"单目3D室内检测","title_tokens":["检测","室内","单目","3d"]},{"location":"TogetherROS/5.7_%E5%8D%95%E7%9B%AE3D%E5%AE%A4%E5%86%85%E6%A3%80%E6%B5%8B/#_1","text":"# 配置ROS2环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。 $ cp -r /opt/tros/lib/mono3d_indoor_detection/config/ . # 启动launch文件 $ ros2 launch /opt/tros/share/mono3d_indoor_detection/launch/mono3d_indoor_detection.launch.py [ INFO ] [ 1654858490 .168592166 ] [ mono3d_detection ] : target type: trash_can [ INFO ] [ 1654858490 .168644750 ] [ mono3d_detection ] : target type: width, value: 236 .816406 [ INFO ] [ 1654858490 .168704333 ] [ mono3d_detection ] : target type: height, value: 305 .664062 [ INFO ] [ 1654858490 .168759584 ] [ mono3d_detection ] : target type: length, value: 224 .182129 [ INFO ] [ 1654858490 .168812334 ] [ mono3d_detection ] : target type: rotation, value: -1571.989179 [ INFO ] [ 1654858490 .168862543 ] [ mono3d_detection ] : target type: x, value: -191.977829 [ INFO ] [ 1654858490 .168916168 ] [ mono3d_detection ] : target type: y, value: -143.963307 [ INFO ] [ 1654858490 .168966502 ] [ mono3d_detection ] : target type: z, value: 714 .024127 [ INFO ] [ 1654858490 .169016794 ] [ mono3d_detection ] : target type: depth, value: 714 .024127 [ INFO ] [ 1654858490 .169067461 ] [ mono3d_detection ] : target type: score, value: 0 .973215 [ INFO ] [ 1654858490 .169168795 ] [ mono3d_detection ] : target type: trash_can [ INFO ] [ 1654858490 .169212837 ] [ mono3d_detection ] : target type: width, value: 253 .051758 [ INFO ] [ 1654858490 .169265004 ] [ mono3d_detection ] : target type: height, value: 282 .348633 [ INFO ] [ 1654858490 .169317046 ] [ mono3d_detection ] : target type: length, value: 257 .934570 [ INFO ] [ 1654858490 .169368921 ] [ mono3d_detection ] : target type: rotation, value: -1542.727947 [ INFO ] [ 1654858490 .169418671 ] [ mono3d_detection ] : target type: x, value: 552 .459776 [ INFO ] [ 1654858490 .169470588 ] [ mono3d_detection ] : target type: y, value: -164.073169 [ INFO ] [ 1654858490 .169517505 ] [ mono3d_detection ] : target type: z, value: 1088 .358164 [ INFO ] [ 1654858490 .169566839 ] [ mono3d_detection ] : target type: depth, value: 1088 .358164 [ INFO ] [ 1654858490 .169616464 ] [ mono3d_detection ] : target type: score, value: 0 .875521 很明显，已经识别到了两个垃圾桶。","text_tokens":["348633","路径","-","出","]","value","168704333","很","已经","target","191.977829","973215","168759584","length","1088","安装","拷贝","r","_","到","depth","282","y","169470588","169067461","$","中","168916168","detection","169168795","051758","552","169368921","mono3d","168812334","明显","了","两个","169418671","168862543","169517505","934570","[","配置","config","。","运行","257","169566839","168966502","share","cp","182129","0","indoor","169265004","358164",":","ros2","1654858490","1542.727947","tros","height","169212837","1571.989179","714","的","score","source","垃圾","can","配置文件","164.073169","setup","143.963307","从","文件","664062","x","168644750","launch","bash","trash","168592166","启动","253",".",",","169016794","info","024127","，","rotation","py","示例","width","opt","224","305","236","type","z","816406","#","169616464","需要","lib"," ","识别","/","环境","875521","459776","169317046","垃圾桶"],"title":"运行示例程序","title_tokens":["运行","程序","示例"]},{"location":"TogetherROS/5.7_%E5%8D%95%E7%9B%AE3D%E5%AE%A4%E5%86%85%E6%A3%80%E6%B5%8B/#_2","text":"// Copyright (c) 2022，Horizon Robotics. // // Licensed under the Apache License, Version 2.0 (the \"License\"); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \"AS IS\" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. #include \"include/centernet_3d_detection_node.h\" #include <unistd.h> #include <fstream> #include <memory> #include <string> #include <vector> #include \"dnn_node/dnn_node.h\" #include \"include/image_utils.h\" #include \"rclcpp/rclcpp.hpp\" #include <sys/stat.h> #ifdef CV_BRIDGE_PKG_ENABLED #include <cv_bridge/cv_bridge.h> #endif using hobot :: easy_dnn :: OutputDescription ; using hobot :: easy_dnn :: OutputParser ; CenterNet3DDetectionNode :: CenterNet3DDetectionNode ( const std :: string & node_name , const NodeOptions & options ) : DnnNode ( node_name , options ), output_frameCount_ ( 0 ) { this -> declare_parameter < int > ( \"is_sync_mode\" , is_sync_mode_ ); this -> declare_parameter < std :: string > ( \"config_file_path\" , config_file_path_ ); this -> declare_parameter < int > ( \"shared_mem\" , shared_mem_ ); this -> declare_parameter < std :: string > ( \"ai_msg_pub_topic_name\" , msg_pub_topic_name_ ); this -> declare_parameter < std :: string > ( \"image_sub_topic_name\" , ros_img_topic_name_ ); this -> declare_parameter < std :: string > ( \"feed_image\" , feed_image_ ); this -> get_parameter < int > ( \"is_sync_mode\" , is_sync_mode_ ); this -> get_parameter < std :: string > ( \"config_file_path\" , config_file_path_ ); this -> get_parameter < int > ( \"shared_mem\" , shared_mem_ ); this -> get_parameter < std :: string > ( \"ai_msg_pub_topic_name\" , msg_pub_topic_name_ ); this -> get_parameter < std :: string > ( \"image_sub_topic_name\" , ros_img_topic_name_ ); this -> get_parameter < std :: string > ( \"feed_image\" , feed_image_ ); model_file_name_ = config_file_path_ + \"/centernet.hbm\" ; mkdir ( \"./result/\" , 666 ); std :: stringstream ss ; ss << \"Parameter:\" << \" \\n config_file_path_:\" << config_file_path_ << \" \\n shared_men:\" << shared_mem_ << \" \\n is_sync_mode_: \" << is_sync_mode_ << \" \\n model_file_name_: \" << model_file_name_ << \" \\n feed_image:\" << feed_image_ ; RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); if ( Start () == 0 ) { RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"start success!!!\" ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"start fail!!!\" ); } } CenterNet3DDetectionNode ::~ CenterNet3DDetectionNode () {} int CenterNet3DDetectionNode :: Start () { int ret = Init (); if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Init failed!\" ); return ret ; } ret = GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ); if ( ret < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get model input size fail!\" ); return ret ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"The model input width is %d and height is %d\" , model_input_width_ , model_input_height_ ); msg_publisher_ = this -> create_publisher < ai_msgs :: msg :: PerceptionTargets > ( msg_pub_topic_name_ , 10 ); RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"msg_pub_topic_name: %s\" , msg_pub_topic_name_ . data ()); if ( ! feed_image_ . empty ()) { std :: cout << \"mono3d read image:\" << feed_image_ << \" to detect\" << std :: endl ; PredictByImage ( feed_image_ ); return 0 ; } // RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Detect images that use subscriptions\" ); if ( shared_mem_ ) { #ifdef SHARED_MEM_ENABLED RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Create hbmem_subscription with topic_name: %s\" , sharedmem_img_topic_name_ . c_str ()); sharedmem_img_subscription_ = this -> create_subscription_hbmem < hbm_img_msgs :: msg :: HbmMsg1080P > ( sharedmem_img_topic_name_ , 10 , std :: bind ( & CenterNet3DDetectionNode :: SharedMemImgProcess , this , std :: placeholders :: _1 )); #else RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Unsupport shared mem\" ); #endif } else { RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Create subscription with topic_name: %s\" , ros_img_topic_name_ . c_str ()); ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( ros_img_topic_name_ , 10 , std :: bind ( & CenterNet3DDetectionNode :: RosImgProcess , this , std :: placeholders :: _1 )); } return 0 ; } int CenterNet3DDetectionNode :: SetNodePara () { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Set node para.\" ); if ( ! dnn_node_para_ptr_ ) { return -1 ; } dnn_node_para_ptr_ -> model_file = model_file_name_ ; dnn_node_para_ptr_ -> model_name = model_name_ ; dnn_node_para_ptr_ -> model_task_type = model_task_type_ ; dnn_node_para_ptr_ -> task_num = 1 ; return 0 ; } int CenterNet3DDetectionNode :: SetOutputParser () { // set output parser auto model_manage = GetModel (); if ( ! model_manage || ! dnn_node_para_ptr_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Invalid model\" ); return -1 ; } if ( model_manage -> GetOutputCount () < model_output_count_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Error! Model %s output count is %d, unmatch with count %d\" , dnn_node_para_ptr_ -> model_name . c_str (), model_manage -> GetOutputCount (), model_output_count_ ); return -1 ; } for ( int i = 0 ; i < output_index_ ; ++ i ) { std :: shared_ptr < OutputParser > assist_parser = std :: make_shared < CenterNet3DAssistParser > (); model_manage -> SetOutputParser ( i , assist_parser ); } // set 3D paser auto output_desc = std :: make_shared < OutputDescription > ( model_manage , output_index_ , \"3D_branch\" ); for ( int i = 0 ; i < output_index_ ; ++ i ) { output_desc -> GetDependencies (). push_back ( i ); } output_desc -> SetType ( \"3D\" ); model_manage -> SetOutputDescription ( output_desc ); std :: shared_ptr < OutputParser > out_parser = std :: make_shared < CenterNet3DOutputParser > ( config_file_path_ ); model_manage -> SetOutputParser ( output_index_ , out_parser ); return 0 ; } #define CV_DRAW_LINE(p0, p1) \\ cv::line(image, cv::Point(points[p0][0], points[p0][1]), \\ cv::Point(points[p1][0], points[p1][1]), \\ CV_RGB(0, 255, 0), 2); #define CV_PUT_TEXT(text, px, py, offset) \\ { double fontScale = 3.0l; int thickness = 3u, baseline; \\ cv::Size text_size = cv::getTextSize(text, \\ cv::HersheyFonts::FONT_HERSHEY_PLAIN, fontScale, thickness, &baseline); \\ cv::Point point(px , py); \\ point.y += offset;\\ cv::Rect rect(point.x, point.y, \\ text_size.width, text_size.height); \\ point.y += text_size.height;\\ offset += text_size.height;\\ cv::putText(image, text, point, \\ cv::HersheyFonts::FONT_HERSHEY_PLAIN, \\ fontScale, CV_RGB(0, 255, 128), thickness); } void Render3DBox ( const BBox3D & box , cv :: Mat & image ) { auto & points = box . corners2d_upscale ; CV_DRAW_LINE ( 0 , 1 ) CV_DRAW_LINE ( 0 , 3 ) CV_DRAW_LINE ( 0 , 4 ) CV_DRAW_LINE ( 1 , 2 ) CV_DRAW_LINE ( 1 , 5 ) CV_DRAW_LINE ( 2 , 3 ) CV_DRAW_LINE ( 2 , 6 ) CV_DRAW_LINE ( 3 , 7 ) CV_DRAW_LINE ( 4 , 5 ) CV_DRAW_LINE ( 4 , 7 ) CV_DRAW_LINE ( 5 , 6 ) CV_DRAW_LINE ( 6 , 7 ) std :: string box_type = std :: to_string ( box . class_label ); std :: string score = std :: to_string ( box . score ); int offset = 0 ; if ( - M_PI_2 <= box . r || box . r <= M_PI_2 ) { CV_PUT_TEXT ( box_type , points [ 7 ][ 0 ], points [ 7 ][ 1 ], offset ); CV_PUT_TEXT ( score , points [ 7 ][ 0 ], points [ 7 ][ 1 ], offset ); } else { CV_PUT_TEXT ( box_type , points [ 6 ][ 0 ], points [ 6 ][ 1 ], offset ); CV_PUT_TEXT ( score , points [ 6 ][ 0 ], points [ 6 ][ 1 ], offset ); } } int CenterNet3DDetectionNode :: PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( ! msg_publisher_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid msg_publisher_\" ); return -1 ; } struct timespec time_start = { 0 , 0 }; clock_gettime ( CLOCK_REALTIME , & time_start ); ai_msgs :: msg :: Perf perf ; perf . set__type ( \"PostProcess\" ); perf . stamp_start . sec = time_start . tv_sec ; perf . stamp_start . nanosec = time_start . tv_nsec ; auto centernet_3d_output = std :: dynamic_pointer_cast < CenterNet3DOutput > ( node_output ); if ( centernet_3d_output ) { std :: stringstream ss ; ss << \"3D output dection info\" ; if ( centernet_3d_output -> image_msg_header_ ) { ss << \", frame_id: \" << centernet_3d_output -> image_msg_header_ -> frame_id << \", stamp: \" << centernet_3d_output -> image_msg_header_ -> stamp . sec << \".\" << centernet_3d_output -> image_msg_header_ -> stamp . nanosec ; } RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); } const auto & outputs = node_output -> outputs ; RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"outputs size: %d\" , outputs . size ()); if ( outputs . empty () || static_cast < int32_t > ( outputs . size ()) < model_output_count_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Invalid outputs\" ); return -1 ; } int smart_fps = 0 ; { auto tp_now = std :: chrono :: system_clock :: now (); output_frameCount_ ++ ; auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - output_tp_ ) . count (); if ( interval >= 1000 ) { smart_fps = output_frameCount_ ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Smart fps = %d\" , smart_fps ); output_frameCount_ = 0 ; output_tp_ = std :: chrono :: system_clock :: now (); } } ai_msgs :: msg :: PerceptionTargets :: UniquePtr pub_data ( new ai_msgs :: msg :: PerceptionTargets ()); if ( centernet_3d_output -> image_msg_header_ ) { pub_data -> header . set__stamp ( centernet_3d_output -> image_msg_header_ -> stamp ); pub_data -> header . set__frame_id ( centernet_3d_output -> image_msg_header_ -> frame_id ); } pub_data -> set__fps ( smart_fps ); auto * det_result = dynamic_cast < CenterNet3DDetResult *> ( outputs [ output_index_ ]. get ()); if ( ! det_result ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"invalid cast\" ); } else { RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"out box size: %d\" , det_result -> boxes . size ()); std :: map < std :: string , ai_msgs :: msg :: Target > target_list ; std :: vector < ai_msgs :: msg :: Target > targets ; targets . reserve ( det_result -> boxes . size ()); for ( auto & box : det_result -> boxes ) { ai_msgs :: msg :: Target target ; switch ( box . class_label ) { case BBox3D :: CHARGING_BASE : target . type = \"charging_base\" ; break ; case BBox3D :: SLIPPER : target . type = \"slipper\" ; break ; case BBox3D :: TRASH_CAN : target . type = \"trash_can\" ; break ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s\" , target . type . c_str ()); ai_msgs :: msg :: Attribute attribute ; ai_msgs :: msg :: Point point ; attribute . type = \"width\" ; attribute . value = box . w * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"height\" ; attribute . value = box . h * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"length\" ; attribute . value = box . l * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"rotation\" ; attribute . value = box . r * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"x\" ; attribute . value = box . x * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"y\" ; attribute . value = box . y * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"z\" ; attribute . value = box . z * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"depth\" ; attribute . value = box . d * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"score\" ; attribute . value = box . score * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), box . score ); target . attributes . push_back ( attribute ); // 8 corners /* 4----------5 6----------7 /| /| /| /| / | / | / | / | / | / | / | / | 7---|------6 |5---|------4 | | | | || | | | | | | || | | | | 0------|---1| 2------|---3 | / | / | / | / | / ^ | / | / v | / |/ |/ |/ |/ 3----------2 1----------0 */ for ( const auto & corners : box . corners2d_upscale ) { geometry_msgs :: msg :: Point32 g_point ; g_point . x = corners [ 0 ]; g_point . y = corners [ 1 ]; point . point . push_back ( g_point ); } point . type = \"corners\" ; target . points . push_back ( point ); targets . push_back ( target ); } pub_data -> targets = std :: move ( targets ); if ( ! centernet_3d_output -> image_name_ . empty ()) { auto img_bgr = cv :: imread ( centernet_3d_output -> image_name_ ); for ( auto & box : det_result -> boxes ) { Render3DBox ( box , img_bgr ); } std :: string :: size_type iPos = centernet_3d_output -> image_name_ . find_last_of ( '/' ) + 1 ; std :: string filename = centernet_3d_output -> image_name_ . substr ( iPos , centernet_3d_output -> image_name_ . length () - iPos ); cv :: imwrite ( \"./result/\" + filename , img_bgr ); } } clock_gettime ( CLOCK_REALTIME , & time_start ); perf . stamp_end . sec = time_start . tv_sec ; perf . stamp_end . nanosec = time_start . tv_nsec ; pub_data -> perfs . emplace_back ( perf ); msg_publisher_ -> publish ( std :: move ( pub_data )); return 0 ; } int CenterNet3DDetectionNode :: Predict ( std :: vector < std :: shared_ptr < DNNInput >> & inputs , const std :: shared_ptr < std :: vector < hbDNNRoi >> rois , std :: shared_ptr < DnnNodeOutput > dnn_output ) { return Run ( inputs , dnn_output , rois , is_sync_mode_ == 1 ); } void CenterNet3DDetectionNode :: RosImgProcess ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg || ! rclcpp :: ok ()) { return ; } std :: stringstream ss ; ss << \"Recved img encoding: \" << img_msg -> encoding << \", h: \" << img_msg -> height << \", w: \" << img_msg -> width << \", step: \" << img_msg -> step << \", frame_id: \" << img_msg -> header . frame_id << \", stamp: \" << img_msg -> header . stamp . sec << \".\" << img_msg -> header . stamp . nanosec << \", data size: \" << img_msg -> data . size (); RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); auto tp_start = std :: chrono :: system_clock :: now (); // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; if ( \"rgb8\" == img_msg -> encoding ) { #ifdef CV_BRIDGE_PKG_ENABLED auto cv_img = cv_bridge :: cvtColorForDisplay ( cv_bridge :: toCvShare ( img_msg ), \"bgr8\" ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after cvtColorForDisplay cost ms: %d\" , interval ); } pyramid = ImageUtils :: GetNV12Pyramid ( cv_img -> image , model_input_height_ , model_input_width_ ); #else RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Unsupport cv bridge\" ); #endif } else if ( \"nv12\" == img_msg -> encoding ) { pyramid = ImageUtils :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ ); } if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail\" ); return ; } { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after GetNV12Pyramid cost ms: %d\" , interval ); } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Dnn node begin to predict\" ); // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = img_msg -> width ; dnn_output -> src_img_height_ = img_msg -> height ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( img_msg -> header . frame_id ); dnn_output -> image_msg_header_ -> set__stamp ( img_msg -> header . stamp ); dnn_output -> image_name_ = \"\" ; // 3. 开始预测 uint32_t ret = Predict ( inputs , nullptr , dnn_output ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after Predict cost ms: %d\" , interval ); } if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"predict img failed!\" ); } return ; } int CenterNet3DDetectionNode :: PredictByImage ( const std :: string & image ) { // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; // bgr img，支持将图片resize到模型输入size pyramid = ImageUtils :: GetNV12Pyramid ( image , ImageType :: BGR , model_input_height_ , model_input_width_ ); if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail with image: %s\" , image . c_str ()); return -1 ; } // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = 1920 ; dnn_output -> src_img_height_ = 1024 ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( \"test_frame\" ); dnn_output -> image_msg_header_ -> set__stamp ( rclcpp :: Time ()); dnn_output -> image_name_ = image ; // dnn_output->image_msg_header->set__frame_id(std::to_string(img_msg->index)); // dnn_output->image_msg_header->set__stamp(img_msg->time_stamp); // 3. 开始预测 uint32_t ret = Predict ( inputs , nullptr , dnn_output ); if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"predict img failed!\" ); } return ret ; } #ifdef SHARED_MEM_ENABLED void CenterNet3DDetectionNode :: SharedMemImgProcess ( const hbm_img_msgs :: msg :: HbmMsg1080P :: ConstSharedPtr img_msg ) { if ( ! img_msg || ! rclcpp :: ok ()) { return ; } RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"go into shared mem\" ); // dump recved img msg // std::ofstream ofs(\"img_\" + std::to_string(img_msg->index) + \".\" + // std::string(reinterpret_cast<const char*>(img_msg->encoding.data()))); // ofs.write(reinterpret_cast<const char*>(img_msg->data.data()), // img_msg->data_size); auto tp_start = std :: chrono :: system_clock :: now (); // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; if ( \"nv12\" == std :: string ( reinterpret_cast < const char *> ( img_msg -> encoding . data ()))) { pyramid = ImageUtils :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ ); } else { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"share mem unsupported img encoding: %s\" , img_msg -> encoding ); } if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail!\" ); return ; } { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after GetNV12Pyramid cost ms: %d\" , interval ); } // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = img_msg -> width ; dnn_output -> src_img_height_ = img_msg -> height ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( std :: to_string ( img_msg -> index )); dnn_output -> image_msg_header_ -> set__stamp ( img_msg -> time_stamp ); // 3. 开始预测 int ret = Predict ( inputs , nullptr , dnn_output ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after Predict cost ms: %d\" , interval ); } // 4. 处理预测结果，如渲染到图片或者发布预测结果 if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Run predict failed!\" ); } return ; } #endif","text_tokens":["数据类型","mkdir","upscale","发布","targets","target","gettextsize","permissions","数据","this","if","num","timespec","{","licenses","horizon","not","centernet3dassistparser","w","input","std","_","parser","到","conditions","enabled","time","(","t","feed","assist","pym",">","get","out","license","detection","sharedmem","hbm","substr","mono3d","base","for","name","the","licensed","子类","and","push","case","ofs","outputdescription","share","0","1","indoor","cv","model","tp","sync",":","init","为","rgb","det","to","'","ipos","cvtcolorfordisplay","frame","into","fps","encoding","para","clock",";","example","debug",")","id","text","class","centernet3doutput",".",",","end","new","类型","label","imwrite","corners2d","width","subscription","uniqueptr","warn","2022","type","2.0","centernet","apache","ok","express","ss","接口","}","robotics","uint32","2","plain","subscriptions","may","boxes","=","start","using","]","smart","inputs","of","either","set","3u","thickness","128","+","处理","r","预测","depth","memory","msg","图片","implied","placeholders","use","imread","points","msgs","bind","go","getnv12pyramidfromnv12img","pointer","easy","write","framecount","---","imageutils","i","publisher","hbdnnroi","men","或者","|","attributes","point","www","m","6","offset","ptr","getnv12pyramid","centernet3ddetresult","&","applicable","unistd","specific","1000","perfs","success","double","geometry","nsec","images","height","sharedmemimgprocess","p0","map","output","begin","tocvshare","except","的","4","by","create","interval","x","bgr","3","dection","runinfertask","pi","pub","realtime","test","move","under","py","ret","auto","predict","nullptr","3d","z","cout","publish","#","int32","getdependencies"," ","sub","attribute","hpp","3.0","rois","++","c","px","hershey","dnnnode","-","break","recved","rclcpp","centernet3doutputparser","模型","d","开始","endl","any","dnn","hobot","emplace","step","nodeoptions","nv12","rect","length","将","governing","*","!","a","font","mat","read","render3dbox","or","y","slipper","mode","last","getmodelinputsize","__","system","对象","const","cost","bridge","settype","void","setoutputparser","see","error","stringstream","渲染","pyramid","g","输入","logger","rgb8","warranties","------","org","\"","box","5","n","is","desc","string","limitations","invalid","branch","f","reserve","unsupport","dnninput","ros","options","vector","传入","sys","8","with","l","reinterpret","include","p1","writing","创建","dnnnodeoutput","topic","count","sensor","，","stamp","manage","hbmem","rotation","char","constsharedptr","gettime","at","after","baseline","utils","you","/","fstream","postprocess","endif","通过","bgr8","on","empty","version","value","1920","compliance","unmatch","copyright","shared","result","index","make","define","\\","task","255","fail","static","back","http","setoutputdescription","corners","ofstream","ms","without","stat","img","return","h","rosimgprocess","cast","charging","size","law","agreed","declare","put","~","str","v","draw","centernet3ddetectionnode","perf","imagetype","getmodel","fontscale","int","kind","detect","an","obtain","distributed","unless","pkg","unsupported","hbmmsg1080p","paser","[","config","run","如","milliseconds","结果","outputparser","line","data","predictbyimage","666","required","----------","1024","ai","perceptiontargets","copy","failed","使用","software","score","can","image","parameter","node","nanosec","7","src","else","as","<","nv12pyramidinput","作为","trash","file","now","10","setnodepara","outputs","chrono","getoutputcount","path","puttext","info","basis","list","switch","hersheyfonts","ifdef","dynamic","duration","^","成","s","bbox3d","in","header","resize","tv","filename","%","that","sec","支持","point32","find","将会","dump","生成","mem","struct","language"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"TogetherROS/6.1_SLAM%E5%BB%BA%E5%9B%BE/","text":"SLAM建图 从这一节开始，我们开始尝试将 TogetherROS 与机器人联系起来做一些小项目。 第一节将开始学习 SLAM 技术。SLAM一般指即时定位与地图构建，即时定位与地图构建（Simultaneous Localization and Mapping，简称SLAM） 这个章节，我们将联系ROS2 和 TogetherROS ，使用 ROS2 的 SLAM-Toolbox 作为建图算法，在仿真环境中构建地图。 准备工作 1、安装 SLAM - Toolbox建立软链接 $ sudo apt-get install ros-foxy-slam-toolbox $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 2、搭载仿真环境，此处采用 turtlebot3 仿真环境 $ sudo apt-get install ros-foxy-gazebo-* $ sudo apt install ros-foxy-turtlebot3 $ sudo apt install ros-foxy-turtlebot3-bringup $ sudo apt install ros-foxy-turtlebot3-simulations $ sudo apt install ros-foxy-teleop-twist-keyboard 使用介绍 首先在 PC 端启动仿真环境 $ source /opt/ros/foxy/setup.bash $ export TURTLEBOT3_MODEL = burger $ ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py Attention 第一次加载可能比较慢，原因是正在下载部分需要的插件。 打开后，即可看到如图: 在PC端打开一个新终端： $ source /opt/ros/foxy/setup.bash $ ros2 launch turtlebot3_bringup rviz2.launch.py 此时会打开一个RVIZ2 ，需要添加“map” 如下图： 旭日X3 派运行 SLAM-Toolbox： # 配置TogetherROS环境 $ source /opt/tros/setup.bash #启动SLAM launch文件 $ ros2 launch slam_toolbox online_sync_launch.py 此处有可能会遇到缺少lib文件问题，如果发生的话如下操作： $ sudo vi /etc/ld.so.conf #在其后增加： /usr/local/lib #保存退出： $ sudo ldconfig PC端再打开一个新终端，遥控建图： $ source /opt/ros/foxy/setup.bash $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 效果如图： 建图结果","text_tokens":["2","-","cd","ldconfig","仿真","=","soft","开始","链接","）","第一次","算法","conf","机器人","小","foxy","有","尝试","可能","如下","将","再","”","此处","安装","link","install","这个","online","*","准备","打开","技术","终端","_","问题","rviz2","slam","建图","pc","定位","看到","指","在","采用","gazebo","派","如果","usr","$","中","做","localization","get","起来","x3","比较","较慢","会","即可","介绍","burger","attention","ld","：","后","遥控","“","端","项目","学习","so","simultaneous","toolbox","配置","and","、","原因","。","旭日","图","运行","run","第一","和","保存","比较慢","togetherros","1","结果","model","bringup","新","操作","添加","sync",":","ros2","export","world","这","tros","一些","--","加载","的话","地图","是","map","搭载","twist","使用","的","ros","source","软","效果","python3","sudo","插件","mapping","章节","teleop","setup","部分","create","简称","从","如图","文件","构建","launch","第一节","作为","首先","bash","启动","keyboard","建立","与","退出",".","simulations","机器","turtlebot3","下载","，","一个","工作","即时","此时","py","联系","opt","apt","我们","vi","（","etc","发生","增加","正在","#","local","需要","lib","遇到"," ","一般","一节","一次","/","环境","缺少","其后"],"title":"SLAM地图构建","title_tokens":["地图","slam","构建"]},{"location":"TogetherROS/6.1_SLAM%E5%BB%BA%E5%9B%BE/#slam","text":"从这一节开始，我们开始尝试将 TogetherROS 与机器人联系起来做一些小项目。 第一节将开始学习 SLAM 技术。SLAM一般指即时定位与地图构建，即时定位与地图构建（Simultaneous Localization and Mapping，简称SLAM） 这个章节，我们将联系ROS2 和 TogetherROS ，使用 ROS2 的 SLAM-Toolbox 作为建图算法，在仿真环境中构建地图。","text_tokens":["-","与","机器","仿真","中","，","做","开始","ros2","）","即时","localization","这","起来","一些","算法","机器人","地图","联系","我们","使用","的","小","（","尝试","将","项目","学习","mapping","章节","simultaneous","这个"," ","简称","从","技术","toolbox","一般","一节","and","。","slam","建图","构建","环境","定位","第一","第一节","指","作为","在","和","togetherros"],"title":"SLAM建图","title_tokens":["slam","建图"]},{"location":"TogetherROS/6.1_SLAM%E5%BB%BA%E5%9B%BE/#_1","text":"1、安装 SLAM - Toolbox建立软链接 $ sudo apt-get install ros-foxy-slam-toolbox $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 2、搭载仿真环境，此处采用 turtlebot3 仿真环境 $ sudo apt-get install ros-foxy-gazebo-* $ sudo apt install ros-foxy-turtlebot3 $ sudo apt install ros-foxy-turtlebot3-bringup $ sudo apt install ros-foxy-turtlebot3-simulations $ sudo apt install ros-foxy-teleop-twist-keyboard","text_tokens":["2","-","建立","cd","bringup",".","simulations","仿真","$","soft","turtlebot3","keyboard","，","链接","get","tros","py","--","opt","apt","搭载","twist","ros","软","foxy","python3","sudo","此处","安装","link","install","create"," ","*","teleop","toolbox","_","、","/","slam","环境","采用","gazebo","1"],"title":"准备工作","title_tokens":["准备","工作"]},{"location":"TogetherROS/6.1_SLAM%E5%BB%BA%E5%9B%BE/#_2","text":"首先在 PC 端启动仿真环境 $ source /opt/ros/foxy/setup.bash $ export TURTLEBOT3_MODEL = burger $ ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py Attention 第一次加载可能比较慢，原因是正在下载部分需要的插件。 打开后，即可看到如图: 在PC端打开一个新终端： $ source /opt/ros/foxy/setup.bash $ ros2 launch turtlebot3_bringup rviz2.launch.py 此时会打开一个RVIZ2 ，需要添加“map” 如下图： 旭日X3 派运行 SLAM-Toolbox： # 配置TogetherROS环境 $ source /opt/tros/setup.bash #启动SLAM launch文件 $ ros2 launch slam_toolbox online_sync_launch.py 此处有可能会遇到缺少lib文件问题，如果发生的话如下操作： $ sudo vi /etc/ld.so.conf #在其后增加： /usr/local/lib #保存退出： $ sudo ldconfig PC端再打开一个新终端，遥控建图： $ source /opt/ros/foxy/setup.bash $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 效果如图：","text_tokens":["-","ldconfig","仿真","=","第一次","conf","foxy","有","可能","如下","再","”","此处","online","打开","终端","_","问题","rviz2","slam","pc","建图","看到","在","gazebo","派","如果","usr","$","x3","比较","较慢","会","即可","burger","attention","ld","：","后","遥控","“","端","so","toolbox","配置","原因","。","旭日","图","运行","run","第一","保存","比较慢","togetherros","model","bringup","新","操作","添加","sync",":","ros2","export","world","tros","加载","的话","是","map","twist","的","ros","source","效果","插件","sudo","setup","teleop","部分","如图","文件","launch","首先","bash","启动","keyboard","退出",".","turtlebot3","下载","，","一个","此时","py","opt","vi","etc","发生","增加","正在","#","local","需要","lib","遇到"," ","一次","/","环境","缺少","其后"],"title":"使用介绍","title_tokens":["介绍","使用"]},{"location":"TogetherROS/6.1_SLAM%E5%BB%BA%E5%9B%BE/#_3","text":"","text_tokens":[],"title":"建图结果","title_tokens":["结果","建图"]},{"location":"TogetherROS/6.2_%E5%B0%8F%E8%BD%A6%E4%BA%BA%E4%BD%93%E8%B7%9F%E9%9A%8F/","text":"小车人体跟随 之前我们介绍了如何利用 X3派 进行人体检测和跟踪，那么加入我们想要将体检测和跟踪和真实机器人做一个结合会是一种什么样的体验呢？ 这里，我们将通过X3派检测到的人体目标进行一个移动跟踪，最终的一个效果就是当装配着X3派和摄像头的小车面前出现一个人物时，小车将会跟随着人体一起移动。接下来，让我们一起来体验一下吧。 编程开发方法 先来看整个程序的流程图： 这里，我们将通过 Gazebo 仿真环境下的虚拟小车作为真实机器，首先，让我们来做一些准备工作。 在PC端搭建一个仿真环境： $ sudo apt-get install ros-foxy-gazebo-* $ sudo apt install ros-foxy-turtlebot3 $ sudo apt install ros-foxy-turtlebot3-simulations 使用介绍 首先在 PC 端启动仿真环境 $ source /opt/ros/foxy/setup.bash $ export TURTLEBOT3_MODEL = burger $ ros2 launch turtlebot3_gazebo empty_world.launch.py Attention 第一次加载可能比较慢，原因是正在下载部分需要的插件。 如下图所见： 旭日X3 派运行 如下指令： # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从TogetherROS的安装路径中拷贝出运行示例需要的配置文件。 $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . #启动launch文件 $ ros2 launch body_tracking hobot_body_tracking_without_gesture.launch.py 接下来，只需要你站在摄像头面前左右前后移动，就会发现仿真环境下的小车也会跟着你移动。 再来看终端输出的信息： $ ros2 topic echo /cmd_vel linear: x: 0.5 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: -0.5 --- linear: x: 0.5 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: -0.5 --- 跟随效果","text_tokens":["路径","通过","-","就","仿真","=","出","empty","时","tracking","第一次","当","呢","机器人","也","信息","摄像","hobot","人体","foxy","图所见","输出","吧","目标","真实","开发","出现","可能","将","如下","再","安装","install","？","*","准备","拷贝","像头","r","终端","_","整个","到","pc","在","方法","gazebo","什么","y","派","without","来看","$","中","利用","做","体验","x3","起来","get","比较","较慢","让","会","detection","左右","---","介绍","跟踪","burger","attention","接下","：","最终","了","端","移动","0.0","什么样","一下","配置","config","跟","原因","。","旭日","运行","vel","一","第一","cp","和","跟随","比较慢","togetherros","body","加入","model","发现","程序","这里","随着",":","ros2","export","world","tros","一些","着","加载","angular","是","指令","0.5","使用","结合","的","ros","效果","source","就是","装配","面前","sudo","开发方法","流程","流程图","插件","配置文件","mono2d","setup","部分","linear","从","小车","文件","x","如何","launch","作为","首先","一种","来","bash","启动","站","虚拟",".","topic","simulations","机器","搭建","想要","turtlebot3","下载","，","一个","工作","py","cmd","示例","人物","opt","apt","我们","接下来","你","z","只","gesture","echo","先","一起","正在","#","进行","需要","所见","lib"," ","将会","摄像头","前后","跟着","那么","一次","/","下","环境","将体","下来","检测","之前","编程"],"title":"小车人体跟随","title_tokens":["人体","跟随","小车"]},{"location":"TogetherROS/6.2_%E5%B0%8F%E8%BD%A6%E4%BA%BA%E4%BD%93%E8%B7%9F%E9%9A%8F/#_1","text":"之前我们介绍了如何利用 X3派 进行人体检测和跟踪，那么加入我们想要将体检测和跟踪和真实机器人做一个结合会是一种什么样的体验呢？ 这里，我们将通过X3派检测到的人体目标进行一个移动跟踪，最终的一个效果就是当装配着X3派和摄像头的小车面前出现一个人物时，小车将会跟随着人体一起移动。接下来，让我们一起来体验一下吧。","text_tokens":["派","通过","机器","这里","想要","时","利用","，","做","一个","随着","当","体验","x3","起来","呢","机器人","着","让","会","是","人物","介绍","我们","跟踪","摄像","接下来","结合","接下","人体","的","效果","最终","就是","装配","面前","吧","目标","真实","了","一起","出现","将","进行","？"," ","移动","什么样","将会","小车","像头","摄像头","一下","那么","到","跟","。","如何","将体","下来","检测","一","之前","一种","和","什么","加入"],"title":"小车人体跟随","title_tokens":["人体","跟随","小车"]},{"location":"TogetherROS/6.2_%E5%B0%8F%E8%BD%A6%E4%BA%BA%E4%BD%93%E8%B7%9F%E9%9A%8F/#_2","text":"先来看整个程序的流程图： 这里，我们将通过 Gazebo 仿真环境下的虚拟小车作为真实机器，首先，让我们来做一些准备工作。 在PC端搭建一个仿真环境： $ sudo apt-get install ros-foxy-gazebo-* $ sudo apt install ros-foxy-turtlebot3 $ sudo apt install ros-foxy-turtlebot3-simulations","text_tokens":["虚拟","通过","-","simulations","程序","这里","来看","仿真","机器","搭建","$","turtlebot3","，","做","一个","工作","get","一些","让","apt","我们","的","ros","：","foxy","sudo","流程","流程图","先","真实","端","将","install"," ","*","准备","小车","整个","。","下","pc","环境","作为","首先","来","在","gazebo"],"title":"编程开发方法","title_tokens":["方法","编程","开发方法","开发"]},{"location":"TogetherROS/6.2_%E5%B0%8F%E8%BD%A6%E4%BA%BA%E4%BD%93%E8%B7%9F%E9%9A%8F/#_3","text":"首先在 PC 端启动仿真环境 $ source /opt/ros/foxy/setup.bash $ export TURTLEBOT3_MODEL = burger $ ros2 launch turtlebot3_gazebo empty_world.launch.py Attention 第一次加载可能比较慢，原因是正在下载部分需要的插件。 如下图所见： 旭日X3 派运行 如下指令： # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从TogetherROS的安装路径中拷贝出运行示例需要的配置文件。 $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . #启动launch文件 $ ros2 launch body_tracking hobot_body_tracking_without_gesture.launch.py 接下来，只需要你站在摄像头面前左右前后移动，就会发现仿真环境下的小车也会跟着你移动。 再来看终端输出的信息： $ ros2 topic echo /cmd_vel linear: x: 0.5 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: -0.5 --- linear: x: 0.5 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: -0.5 ---","text_tokens":["路径","-","就","仿真","=","出","empty","tracking","第一次","也","信息","摄像","hobot","foxy","图所见","输出","可能","如下","再","安装","拷贝","像头","r","终端","_","pc","在","gazebo","y","派","without","来看","$","中","x3","比较","较慢","会","detection","左右","---","burger","attention","接下","：","端","移动","0.0","配置","config","原因","。","旭日","运行","vel","第一","cp","比较慢","togetherros","body","model","发现",":","ros2","export","world","tros","加载","angular","是","指令","0.5","的","ros","source","面前","插件","配置文件","mono2d","setup","部分","linear","从","文件","小车","x","launch","首先","bash","启动","站",".","topic","turtlebot3","下载","，","py","cmd","示例","opt","接下来","你","z","只","gesture","echo","正在","#","需要","所见","lib"," ","摄像头","前后","跟着","一次","/","下","环境","下来"],"title":"使用介绍","title_tokens":["介绍","使用"]},{"location":"TogetherROS/6.2_%E5%B0%8F%E8%BD%A6%E4%BA%BA%E4%BD%93%E8%B7%9F%E9%9A%8F/#_4","text":"","text_tokens":[],"title":"跟随效果","title_tokens":["跟随","效果"]}]}